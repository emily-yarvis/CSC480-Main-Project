{"text":"func (s *DescribeSnapshotCopyGrantsInput) SetMaxRecords(v int64) *DescribeSnapshotCopyGrantsInput {\n\ts.MaxRecords = &v\n\treturn s\n}","label":0}
{"text":"public void setUrl(final String url) {\n\t\tMenuItemModel model = getOrCreateComponentModel();\n\t\tmodel.url = url;\n\t\tmodel.action = null;\n\t}","label":0}
{"text":"static Field lookupField(Class<?> javaClass, String fieldName) throws NoSuchFieldException {\n        if (System.getSecurityManager() != null) {\n            try {\n                return AccessController.doPrivileged(new FieldLookupAction(javaClass, fieldName));\n            } catch (PrivilegedActionException e) {\n                if (e.getCause() instanceof NoSuchFieldException) {\n                    throw (NoSuchFieldException) e.getCause();\n                }\n                throw new WeldException(e.getCause());\n            }\n        } else {\n            return FieldLookupAction.lookupField(javaClass, fieldName);\n        }\n    }","label":0}
{"text":"@Api\n\tpublic void getValue(String name, ShortAttribute attribute) {\n\t\tattribute.setValue(toShort(formWidget.getValue(name)));\n\t}","label":0}
{"text":"func (s *LabelingJobStoppingConditions) SetMaxHumanLabeledObjectCount(v int64) *LabelingJobStoppingConditions {\n\ts.MaxHumanLabeledObjectCount = &v\n\treturn s\n}","label":0}
{"text":"func (s *TaskFailedEventDetails) SetError(v string) *TaskFailedEventDetails {\n\ts.Error = &v\n\treturn s\n}","label":0}
{"text":"public function getInArray($name, array $array)\n    {\n        $value = $this->get($name);\n        return in_array($value, $array) ? $value : $array[key($array)];\n    }","label":0}
{"text":"func addValueToMap(keys []string, value interface{}, target map[string]interface{}) {\n\tnext := target\n\n\tfor i := range keys {\n\t\t\/\/ If we are on last key set or overwrite the val.\n\t\tif i == len(keys)-1 {\n\t\t\tnext[keys[i]] = value\n\t\t\tbreak\n\t\t}\n\n\t\tif iface, ok := next[keys[i]]; ok {\n\t\t\tswitch typed := iface.(type) {\n\t\t\tcase map[string]interface{}:\n\t\t\t\t\/\/ If we already had a map inside, keep\n\t\t\t\t\/\/ stepping through.\n\t\t\t\tnext = typed\n\t\t\tdefault:\n\t\t\t\t\/\/ If we didn't, then overwrite value\n\t\t\t\t\/\/ with a map and iterate with that.\n\t\t\t\tm := map[string]interface{}{}\n\t\t\t\tnext[keys[i]] = m\n\t\t\t\tnext = m\n\t\t\t}\n\t\t\tcontinue\n\t\t}\n\n\t\t\/\/ Otherwise, it wasn't present, so make it and step\n\t\t\/\/ into.\n\t\tm := map[string]interface{}{}\n\t\tnext[keys[i]] = m\n\t\tnext = m\n\t}\n}","label":0}
{"text":"def _put_one(self, item):\n        ''' \n        '''\n        # prepare values\n        values = []\n        for k, v in item.items():\n            if k == '_id':\n                continue\n            if 'dblite_serializer' in item.fields[k]:\n                serializer = item.fields[k]['dblite_serializer']\n                v = serializer.dumps(v)\n                if v is not None:\n                    v = sqlite3.Binary(buffer(v))\n            values.append(v)\n\n        # check if Item is new => update it\n        if '_id' in item:\n            fieldnames = ','.join(['%s=?' % f for f in item if f != '_id'])\n            values.append(item['_id'])\n            SQL = 'UPDATE %s SET %s WHERE rowid=?;' % (self._table, fieldnames)\n        # new Item\n        else:\n            fieldnames = ','.join([f for f in item if f != '_id'])\n            fieldnames_template = ','.join(['?' for f in item if f != '_id'])\n            SQL = 'INSERT INTO %s (%s) VALUES (%s);' % (self._table, fieldnames, fieldnames_template)\n\n        try:\n            self._cursor.execute(SQL, values)\n        except sqlite3.OperationalError, err:\n            raise RuntimeError('Item put() error, %s, SQL: %s, values: %s' % (err, SQL, values) )\n        except sqlite3.IntegrityError:\n            raise DuplicateItem('Duplicate item, %s' % item)\n        self._do_autocommit()","label":0}
{"text":"def add_arguments(self, parser):\n        \"\"\"\"\"\"\n        parser.add_argument(self._source_param, **self._source_kwargs)\n        parser.add_argument('--base', '-b', action='store',\n            help=   'Supply the base currency as code or a settings variable name. '\n                    'The default is taken from settings CURRENCIES_BASE or SHOP_DEFAULT_CURRENCY, '\n                    'or the db, otherwise USD')","label":0}
{"text":"def _get_qgen_var(self, generators, base_mva):\n        \n        Qg = array([g.q \/ base_mva for g in generators])\n\n        Qmin = array([g.q_min \/ base_mva for g in generators])\n        Qmax = array([g.q_max \/ base_mva for g in generators])\n\n        return Variable(\"Qg\", len(generators), Qg, Qmin, Qmax)","label":0}
{"text":"function relatedObjects()\n    {\n        $return = false;\n        if ( $this->ObjectAttributeID )\n        {\n            $return = array();\n\n            \/\/ Fetch words\n            $db = eZDB::instance();\n\n            $wordArray = $db->arrayQuery( \"SELECT * FROM ezkeyword_attribute_link\n                                           WHERE objectattribute_id='\" . $this->ObjectAttributeID .\"' \" );\n\n            $keywordIDArray = array();\n            \/\/ Fetch the objects which have one of these words\n            foreach ( $wordArray as $word )\n            {\n                $keywordIDArray[] = $word['keyword_id'];\n            }\n\n            $keywordCondition = $db->generateSQLINStatement( $keywordIDArray, 'keyword_id' );\n\n            if ( count( $keywordIDArray ) > 0 )\n            {\n                $objectArray = $db->arrayQuery( \"SELECT DISTINCT ezcontentobject_attribute.contentobject_id FROM ezkeyword_attribute_link, ezcontentobject_attribute\n                                                  WHERE $keywordCondition AND\n                                                        ezcontentobject_attribute.id = ezkeyword_attribute_link.objectattribute_id\n                                                        AND  objectattribute_id <> '\" . $this->ObjectAttributeID .\"' \" );\n\n                $objectIDArray = array();\n                foreach ( $objectArray as $object )\n                {\n                    $objectIDArray[] = $object['contentobject_id'];\n                }\n\n                if ( count( $objectIDArray ) > 0 )\n                {\n                    $aNodes = eZContentObjectTreeNode::findMainNodeArray( $objectIDArray );\n\n                    foreach ( $aNodes as $key => $node )\n                    {\n                        $theObject = $node->object();\n                        if ( $theObject->canRead() )\n                        {\n                            $return[] = $node;\n                        }\n                    }\n                }\n            }\n        }\n        return $return;\n    }","label":0}
{"text":"public static final double bearing(double lat1, double lon1, double lat2, double lon2)\r\n    {\r\n        return Math.toDegrees(radBearing(lat1, lon1, lat2, lon2));\r\n    }","label":0}
{"text":"def flow_pipeminor(Diam, HeadLossExpans, KMinor):\n    \n    #Checking input validity - inputs not checked here are checked by\n    #functions this function calls.\n    ut.check_range([HeadLossExpans, \">=0\", \"Headloss due to expansion\"],\n                   [KMinor, \">0\", \"K minor\"])\n    return (area_circle(Diam).magnitude * np.sqrt(2 * gravity.magnitude\n                                                  * HeadLossExpans\n                                                  \/ KMinor)\n            )","label":0}
{"text":"public function addLimitOffset(int $limit, int $offset): void\n    {\n        if ($limit === 0 && $offset === 0) {\n            return;\n        }\n        if ($limit === 0 && $offset <> 0) {\n            return;\n        }\n        if ($offset === 0) {\n            $this->statement .= ' LIMIT ' . $limit;\n        } else {\n            $this->statement .= sprintf(' LIMIT %d, %d', $offset, $limit);\n        }\n        $this->statement .= PHP_EOL;\n    }","label":0}
{"text":"public static String resolveUriPrefix(URI serverURI)\n      throws URISyntaxException {\n    if (RESTLI_SCHEMES.contains(serverURI.getScheme())) {\n      return new URI(serverURI.getScheme(), serverURI.getAuthority(), null, null, null).toString() + \"\/\";\n    }\n\n    throw new RuntimeException(\"Unrecognized scheme for URI \" + serverURI);\n  }","label":0}
{"text":"protected function convert($to, $val)\n    {\n        $val = $this->parseValue($val);\n\n        return base_convert($val, $this->unit, $to);\n    }","label":0}
{"text":"public static String getNameOfMissingClassLoaderDependency(Throwable e) {\n        if (e instanceof NoClassDefFoundError) {\n            \/\/ NoClassDefFoundError sometimes includes CNFE as the cause. Since CNFE has a better formatted class name\n            \/\/ and may also include classloader info, we prefer CNFE's over NCDFE's message.\n            if (e.getCause() instanceof ClassNotFoundException) {\n                return getNameOfMissingClassLoaderDependency(e.getCause());\n            }\n            if (e.getMessage() != null) {\n                return e.getMessage().replace('\/', '.');\n            }\n        }\n        if (e instanceof ClassNotFoundException) {\n            if (e.getMessage() != null) {\n                return e.getMessage();\n            }\n        }\n        if (e.getCause() != null) {\n            return getNameOfMissingClassLoaderDependency(e.getCause());\n        } else {\n            return \"[unknown]\";\n        }\n    }","label":0}
{"text":"function () {\n        var option = clone(this.option);\n\n        each(option, function (opts, mainType) {\n            if (ComponentModel.hasClass(mainType)) {\n                var opts = modelUtil.normalizeToArray(opts);\n                for (var i = opts.length - 1; i >= 0; i--) {\n                    \/\/ Remove options with inner id.\n                    if (modelUtil.isIdInner(opts[i])) {\n                        opts.splice(i, 1);\n                    }\n                }\n                option[mainType] = opts;\n            }\n        });\n\n        delete option[OPTION_INNER_KEY];\n\n        return option;\n    }","label":0}
{"text":"func CreateNonce() ([]byte, error) {\n\tnonce, err := crypto.GetRandomNonce()\n\treturn nonce, errors.WithMessage(err, \"error generating random nonce\")\n}","label":0}
{"text":"def query_intersections(self, x_terms=None, y_terms=None, symmetric=False):\n        \n        if x_terms is None:\n            x_terms = []\n        if y_terms is None:\n            y_terms = []\n        xset = set(x_terms)\n        yset = set(y_terms)\n        zset = xset.union(yset)\n\n        # first built map of gene->termClosure.\n        # this could be calculated ahead of time for all g,\n        # but this may be space-expensive. TODO: benchmark\n        gmap={}\n        for z in zset:\n            gmap[z] = []\n        for subj in self.subjects:\n            ancs = self.inferred_types(subj)\n            for a in ancs.intersection(zset):\n                gmap[a].append(subj)\n        for z in zset:\n            gmap[z] = set(gmap[z])\n        ilist = []\n        for x in x_terms:\n            for y in y_terms:\n                if not symmetric or x<y:\n                    shared = gmap[x].intersection(gmap[y])\n                    union = gmap[x].union(gmap[y])\n                    j = 0\n                    if len(union)>0:\n                        j = len(shared) \/ len(union)\n                    ilist.append({'x':x,'y':y,'shared':shared, 'c':len(shared), 'j':j})\n        return ilist","label":0}
{"text":"function readFile(path, fileName) {\n  return new Promise((resolve, reject) => {\n    fs.readFile(`${path}\/${fileName}`, 'utf8', (err, content) => {\n      if (err) {\n        return reject(err)\n      }\n\n      return resolve(content)\n    })\n  })\n}","label":0}
{"text":"def create_permission_request(self, customer, pos_id, pos_tid, scope,\n                                  ledger=None, text=None, callback_uri=None,\n                                  expires_in=None):\n        \n        arguments = {'customer': customer,\n                     'pos_id': pos_id,\n                     'pos_tid': pos_tid,\n                     'scope': scope,\n                     'ledger': ledger,\n                     'text': text,\n                     'callback_uri': callback_uri,\n                     'expires_in': expires_in}\n        return self.do_req('POST',\n                           self.merchant_api_base_url + '\/permission_request\/',\n                           arguments).json()","label":0}
{"text":"func (p *parser) readv(t token) ([]token, error) {\n\tvar tokens []token\n\tfor {\n\t\tread, err := p.readt(t.typ)\n\t\ttokens = append(tokens, read...)\n\t\tif err != nil {\n\t\t\treturn tokens, err\n\t\t}\n\t\tif len(read) > 0 && read[len(read)-1].val == t.val {\n\t\t\tbreak\n\t\t}\n\t}\n\treturn tokens, nil\n}","label":0}
{"text":"public function link($page, $args = array())\n    {\n        $this->setElement('a');\n        $this->setAttr('href', $this->app->url($page, $args));\n\n        return $this;\n    }","label":0}
{"text":"func (c *command) connect() error {\n\tif c.connected {\n\t\treturn transport.ErrAlreadyConnected\n\t}\n\n\tif c.auth == nil {\n\t\tif err := c.setAuthFromEndpoint(); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\tvar err error\n\tconfig, err := c.auth.ClientConfig()\n\tif err != nil {\n\t\treturn err\n\t}\n\n\toverrideConfig(c.config, config)\n\n\tc.client, err = dial(\"tcp\", c.getHostWithPort(), config)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tc.Session, err = c.client.NewSession()\n\tif err != nil {\n\t\t_ = c.client.Close()\n\t\treturn err\n\t}\n\n\tc.connected = true\n\treturn nil\n}","label":0}
{"text":"private Observable<DocumentFragment<Lookup>> getCountIn(final String id, final LookupSpec spec,\n        final long timeout, final TimeUnit timeUnit) {\n        return Observable.defer(new Func0<Observable<DocumentFragment<Lookup>>>() {\n            @Override\n            public Observable<DocumentFragment<Lookup>> call() {\n                final SubGetCountRequest request = new SubGetCountRequest(id, spec.path(), bucketName);\n                request.xattr(spec.xattr());\n                request.accessDeleted(accessDeleted);\n                addRequestSpan(environment, request, \"subdoc_count\");\n                return applyTimeout(deferAndWatch(new Func1<Subscriber, Observable<SimpleSubdocResponse>>() {\n                    @Override\n                    public Observable<SimpleSubdocResponse> call(Subscriber s) {\n                        request.subscriber(s);\n                        return core.send(request);\n                    }\n                }).map(new Func1<SimpleSubdocResponse, DocumentFragment<Lookup>>() {\n                    @Override\n                    public DocumentFragment<Lookup> call(SimpleSubdocResponse response) {\n                        try {\n                            if (response.status().isSuccess()) {\n                                try {\n                                    long count = subdocumentTranscoder.decode(response.content(), Long.class);\n                                    SubdocOperationResult<Lookup> single = SubdocOperationResult\n                                        .createResult(spec.path(), Lookup.GET_COUNT, response.status(), count);\n                                    return new DocumentFragment<Lookup>(id, response.cas(), response.mutationToken(),\n                                        Collections.singletonList(single));\n                                } finally {\n                                    if (response.content() != null) {\n                                        response.content().release();\n                                    }\n                                }\n                            } else {\n                                if (response.content() != null && response.content().refCnt() > 0) {\n                                    response.content().release();\n                                }\n\n                                if (response.status() == ResponseStatus.SUBDOC_PATH_NOT_FOUND) {\n                                    SubdocOperationResult<Lookup> single = SubdocOperationResult\n                                        .createResult(spec.path(), Lookup.GET_COUNT, response.status(), null);\n                                    return new DocumentFragment<Lookup>(id, response.cas(), response.mutationToken(), Collections.singletonList(single));\n                                } else {\n                                    throw SubdocHelper.commonSubdocErrors(response.status(), id, spec.path());\n                                }\n                            }\n                        } finally {\n                            if (environment.operationTracingEnabled()) {\n                                environment.tracer().scopeManager()\n                                    .activate(response.request().span(), true)\n                                    .close();\n                            }\n                        }\n                    }\n                }), request, environment, timeout, timeUnit);\n            }\n        });\n    }","label":0}
{"text":"public function getSiteRole($nb_site_role)\n    {\n        if (is_numeric($nb_role_id = nb_getMixedValue($nb_site_role, NABU_ROLE_FIELD_ID))) {\n            $retval = $this->getSiteRoles()->getItem($nb_role_id);\n        } else {\n            $retval = false;\n        }\n\n        return $retval;\n    }","label":0}
{"text":"def move_partition_replica(self, under_loaded_rg, eligible_partition):\n        \"\"\"\"\"\"\n        # Evaluate possible source and destination-broker\n        source_broker, dest_broker = self._get_eligible_broker_pair(\n            under_loaded_rg,\n            eligible_partition,\n        )\n        if source_broker and dest_broker:\n            self.log.debug(\n                'Moving partition {p_name} from broker {source_broker} to '\n                'replication-group:broker {rg_dest}:{dest_broker}'.format(\n                    p_name=eligible_partition.name,\n                    source_broker=source_broker.id,\n                    dest_broker=dest_broker.id,\n                    rg_dest=under_loaded_rg.id,\n                ),\n            )\n            # Move partition if eligible brokers found\n            source_broker.move_partition(eligible_partition, dest_broker)","label":0}
{"text":"def match_files(self, matched, unmatched):\n        \"\"\"\"\"\"\n        for pattern in self.iter():\n            pattern.match_files(matched, unmatched)\n            if not unmatched:\n                # Optimization: If we have matched all files already\n                # simply return at this point - nothing else to do\n                break","label":0}
{"text":"@Override\n  public List<ExecutableFlow> getRunningFlows() {\n    final ArrayList<ExecutableFlow> flows = new ArrayList<>();\n    try {\n      getFlowsHelper(flows, this.executorLoader.fetchUnfinishedFlows().values());\n    } catch (final ExecutorManagerException e) {\n      logger.error(\"Failed to get running flows.\", e);\n    }\n    return flows;\n  }","label":0}
{"text":"func (c *replicationLagCache) add(r replicationLagRecord) {\n\tif !r.Up {\n\t\t\/\/ Tablet is down. Do no longer track it.\n\t\tdelete(c.entries, r.Key)\n\t\tdelete(c.ignoredSlowReplicasInARow, r.Key)\n\t\treturn\n\t}\n\n\tentry, ok := c.entries[r.Key]\n\tif !ok {\n\t\tentry = newReplicationLagHistory(c.historyCapacityPerReplica)\n\t\tc.entries[r.Key] = entry\n\t}\n\n\tentry.add(r)\n}","label":0}
{"text":"public function git($commandString)\n    {\n        \/\/ clean commands that begin with \"git \"\n        $commandString = preg_replace('\/^git\\s\/', '', $commandString);\n\n        $commandString = $this->options['git_executable'].' '.$commandString;\n\n        $command = new $this->options['command_class']($this->dir, $commandString, $this->debug);\n\n        return $command->run();\n    }","label":0}
{"text":"public function verifyPhone(): bool\n    {\n        $phone = new UserMetaPhone($this->notification_phone);\n        $phone->verifyPhone();\n        $this->notification_phone = $phone;\n        return $this->updateModel();\n    }","label":0}
{"text":"func drawCondFmtCellIs(p int, ct string, format *formatConditional) *xlsxCfRule {\n\tc := &xlsxCfRule{\n\t\tPriority: p + 1,\n\t\tType:     validType[format.Type],\n\t\tOperator: ct,\n\t\tDxfID:    &format.Format,\n\t}\n\t\/\/ \"between\" and \"not between\" criteria require 2 values.\n\t_, ok := map[string]bool{\"between\": true, \"notBetween\": true}[ct]\n\tif ok {\n\t\tc.Formula = append(c.Formula, format.Minimum)\n\t\tc.Formula = append(c.Formula, format.Maximum)\n\t}\n\t_, ok = map[string]bool{\"equal\": true, \"notEqual\": true, \"greaterThan\": true, \"lessThan\": true}[ct]\n\tif ok {\n\t\tc.Formula = append(c.Formula, format.Value)\n\t}\n\treturn c\n}","label":0}
{"text":"def add_migrations(self, migrations):\n        \n        if self.__closed:\n            raise MigrationSessionError(\"Can't change applied session\")\n        self._to_apply.extend(migrations)","label":0}
{"text":"func ParseToRawMap(fileName string) (cfg RawMap, err error) {\n\tvar file *os.File\n\n\tcfg = make(RawMap, 0)\n\tfile, err = os.Open(fileName)\n\tif err != nil {\n\t\treturn\n\t}\n\tdefer file.Close()\n\tscanner := bufio.NewScanner(file)\n\n\tvar currentSection string\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\n\t\tif commentLine.MatchString(line) {\n\t\t\tcontinue\n\t\t} else if blankLine.MatchString(line) {\n\t\t\tcontinue\n\t\t} else if configSection.MatchString(line) {\n\t\t\tsection := configSection.ReplaceAllString(line, \"$1\")\n\t\t\tif !cfg.SectionInConfig(section) {\n\t\t\t\tcfg[section] = make(map[string]string, 0)\n\t\t\t}\n\t\t\tcurrentSection = section\n\t\t} else if configLine.MatchString(line) {\n\t\t\tregex := configLine\n\t\t\tif quotedConfigLine.MatchString(line) {\n\t\t\t\tregex = quotedConfigLine\n\t\t\t}\n\t\t\tif currentSection == \"\" {\n\t\t\t\tcurrentSection = defaultSection\n\t\t\t\tif !cfg.SectionInConfig(currentSection) {\n\t\t\t\t\tcfg[currentSection] = make(map[string]string, 0)\n\t\t\t\t}\n\t\t\t}\n\t\t\tkey := regex.ReplaceAllString(line, \"$1\")\n\t\t\tval := regex.ReplaceAllString(line, \"$2\")\n\t\t\tcfg[currentSection][key] = val\n\t\t} else {\n\t\t\terr = fmt.Errorf(\"invalid config file\")\n\t\t\tbreak\n\t\t}\n\t}\n\treturn\n}","label":0}
{"text":"public void setRoundedCorners(final boolean ROUNDED) {\n        if (null == roundedCorners) {\n            _roundedCorners = ROUNDED;\n            fireTileEvent(REDRAW_EVENT);\n        } else {\n            roundedCorners.set(ROUNDED);\n        }\n    }","label":0}
{"text":"func (s *StartBuildInput) SetTimeoutInMinutesOverride(v int64) *StartBuildInput {\n\ts.TimeoutInMinutesOverride = &v\n\treturn s\n}","label":0}
{"text":"public function downloadFeedItem(models\\Download\\Feed\\DownloadFeedItem $DownloadFeedItem)\n    {\n        $service = sprintf(self::API_DOWNLOAD_FEEDS_ITEMS_ITEM_DOWNLOAD, $DownloadFeedItem->getFeedId(), $DownloadFeedItem->getId());\n        $rest    = $this->callService('POST', $service, $DownloadFeedItem);\n\n        return $rest->getSuccess();\n    }","label":0}
{"text":"def end(self, close_fileobj=True):\n        \"\"\"\"\"\"\n        log.debug(\"in TftpContext.end - closing socket\")\n        self.sock.close()\n        if close_fileobj and self.fileobj is not None and not self.fileobj.closed:\n            log.debug(\"self.fileobj is open - closing\")\n            self.fileobj.close()","label":0}
{"text":"def find_module(modpath):\n    \"\"\"\"\"\"\n    module_path = modpath.replace('.', '\/') + '.py'\n    init_path = modpath.replace('.', '\/') + '\/__init__.py'\n    for root_path in sys.path:\n        path = os.path.join(root_path, module_path)\n        if os.path.isfile(path):\n            return path\n        path = os.path.join(root_path, init_path)\n        if os.path.isfile(path):\n            return path","label":0}
{"text":"public function submit($controller)\n    {\n        set_time_limit(0);\n\n        \/\/ Download method calls exit() so clean session here\n        $this->session->delete('file_manager_selected');\n\n        $destination = $this->file->getTempFile();\n        $files = $controller->getSubmitted('files');\n\n        \/* @var $file \\SplFileInfo *\/\n        $file = reset($files);\n\n        $path = $file->getRealPath();\n        $filename = $file->getBasename();\n\n        if ($file->isFile()) {\n            $result = $this->zip->file($path, $destination);\n        } else if ($file->isDir()) {\n            $result = $this->zip->directory($path, $destination, $filename);\n        }\n\n        if (!empty($result)) {\n            $controller->download($destination, \"$filename.zip\");\n        }\n    }","label":0}
{"text":"def get_bounds(self):\n        \n\n        size = self.get_size()\n        top_left = self.get_position([0, 0])\n\n        # t, r, b, l\n        bounds = [top_left[1], top_left[0] + size[0], top_left[1] + size[1], top_left[0]]\n        return bounds","label":0}
{"text":"public static void setTrace(boolean trace) {\n        FallbackLoggerConfiguration.trace.set(trace);\n        if (trace) {\n            debug.set(true);\n        }\n    }","label":0}
{"text":"func (dec *ProtoDecoder) Reset(r io.Reader) {\n\tdec.pBuf.Reset()\n\tdec.bBuf.Reset()\n\tdec.r = r\n}","label":0}
{"text":"func (s *Server) isAuditedAtProxy() bool {\n\t\/\/ always be safe, better to double record than not record at all\n\tclusterConfig, err := s.GetAccessPoint().GetClusterConfig()\n\tif err != nil {\n\t\treturn false\n\t}\n\n\tisRecordAtProxy := clusterConfig.GetSessionRecording() == services.RecordAtProxy\n\tisTeleportNode := s.Component() == teleport.ComponentNode\n\n\tif isRecordAtProxy && isTeleportNode {\n\t\treturn true\n\t}\n\treturn false\n}","label":0}
{"text":"public static function parseClassProperty($fullClassName, $propertyName)\n    {\n        $class      = self::parseClass($fullClassName);\n        $classNodes = $class->stmts;\n\n        foreach ($classNodes as $classLevelNode) {\n            if ($classLevelNode instanceof Property) {\n                foreach ($classLevelNode->props as $classProperty) {\n                    if ($classProperty->name->toString() == $propertyName) {\n                        return [$classLevelNode, $classProperty];\n                    }\n                }\n            }\n        }\n\n        throw new \\InvalidArgumentException(\"Property $propertyName was not found in the $fullClassName\");\n    }","label":0}
{"text":"func (cm *CIDRMap) InsertCIDR(cidr net.IPNet) error {\n\tkey := cm.cidrKeyInit(cidr)\n\tentry := [LPM_MAP_VALUE_SIZE]byte{}\n\tif err := cm.checkPrefixlen(&key, \"update\"); err != nil {\n\t\treturn err\n\t}\n\tlog.WithField(logfields.Path, cm.path).Debugf(\"Inserting CIDR entry %s\", cidr.String())\n\treturn bpf.UpdateElement(cm.Fd, unsafe.Pointer(&key), unsafe.Pointer(&entry), 0)\n}","label":0}
{"text":"func (tx *Transaction) EncodeJSON() (string, error) {\n\tdata, err := json.Marshal(tx.tx)\n\treturn string(data), err\n}","label":0}
{"text":"func (g *Generator) ImageWxH(ts int64, width, height int) (image.Image, error) {\n\tframeNum := C.av_rescale(\n\t\tC.int64_t(ts),\n\t\tC.int64_t(g.streams[g.vStreamIndex].time_base.den),\n\t\tC.int64_t(g.streams[g.vStreamIndex].time_base.num),\n\t) \/ 1000\n\tif C.avformat_seek_file(\n\t\tg.avfContext,\n\t\tC.int(g.vStreamIndex),\n\t\t0,\n\t\tframeNum,\n\t\tframeNum,\n\t\tC.AVSEEK_FLAG_FRAME,\n\t) < 0 {\n\t\tif C.avformat_seek_file(\n\t\t\tg.avfContext,\n\t\t\tC.int(g.vStreamIndex),\n\t\t\t0,\n\t\t\tframeNum,\n\t\t\tframeNum,\n\t\t\tC.AVSEEK_FLAG_ANY,\n\t\t) < 0 {\n\t\t\treturn nil, errors.New(\"can't seek to timestamp\")\n\t\t}\n\t}\n\timg := image.NewRGBA(image.Rect(0, 0, width, height))\n\tframe := C.av_frame_alloc()\n\tdefer C.av_frame_free(&frame)\n\tC.avcodec_flush_buffers(g.avcContext)\n\tpkt := C.av_packet_alloc()\n\tfor C.av_read_frame(g.avfContext, pkt) == 0 {\n\t\tif int(pkt.stream_index) != g.vStreamIndex {\n\t\t\tC.av_packet_unref(pkt)\n\t\t\tcontinue\n\t\t}\n\t\tif C.avcodec_send_packet(g.avcContext, pkt) != 0 {\n\t\t\tC.av_packet_unref(pkt)\n\t\t\treturn nil, errors.New(\"avcodec_send_packet failed\")\n\t\t}\n\t\tdts := pkt.dts\n\t\tC.av_packet_unref(pkt)\n\t\tif ret := C.avcodec_receive_frame(g.avcContext, frame); ret != 0 {\n\t\t\tif ret != C.AVERROR_EAGAIN {\n\t\t\t\treturn nil, errors.New(\"avcodec_receive_frame failed\")\n\t\t\t}\n\t\t\tcontinue\n\t\t}\n\t\tif !g.Fast && dts < frameNum {\n\t\t\tcontinue\n\t\t}\n\t\tctx := C.sws_getContext(\n\t\t\tC.int(g.width),\n\t\t\tC.int(g.height),\n\t\t\tg.avcContext.pix_fmt,\n\t\t\tC.int(width),\n\t\t\tC.int(height),\n\t\t\tC.AV_PIX_FMT_RGBA,\n\t\t\tC.SWS_BICUBIC,\n\t\t\tnil,\n\t\t\tnil,\n\t\t\tnil,\n\t\t)\n\t\tif ctx == nil {\n\t\t\treturn nil, errors.New(\"can't allocate scaling context\")\n\t\t}\n\t\tsrcSlice := (**C.uint8_t)(&frame.data[0])\n\t\tsrcStride := (*C.int)(&frame.linesize[0])\n\t\thdr := (*reflect.SliceHeader)(unsafe.Pointer(&img.Pix))\n\t\tdst := (*C.uint8_t)(unsafe.Pointer(hdr.Data))\n\t\tdstStride := (*C.int)(unsafe.Pointer(&[1]int{img.Stride}))\n\t\tC.sws_scale_wrapper(\n\t\t\tctx,\n\t\t\tsrcSlice,\n\t\t\tsrcStride,\n\t\t\t0,\n\t\t\tg.avcContext.height,\n\t\t\tdst,\n\t\t\tdstStride,\n\t\t)\n\t\tC.sws_freeContext(ctx)\n\t\tbreak\n\t}\n\treturn img, nil\n}","label":0}
{"text":"public function decrement($id, $offset = 1)\n\t{\n\t\t$success = FALSE;\n\t\t$value = wincache_ucache_dec($id, $offset, $success);\n\n\t\treturn ($success === TRUE) ? $value : FALSE;\n\t}","label":0}
{"text":"def run_checks(collector):\n    \"\"\"\"\"\"\n    artifact = collector.configuration[\"dashmat\"].artifact\n    chosen = artifact\n    if chosen in (None, \"\", NotSpecified):\n        chosen = None\n\n    dashmat = collector.configuration[\"dashmat\"]\n    modules = collector.configuration[\"__active_modules__\"]\n    config_root = collector.configuration[\"config_root\"]\n    module_options = collector.configuration[\"modules\"]\n\n    datastore = JsonDataStore(os.path.join(config_root, \"data.json\"))\n    if dashmat.redis_host:\n        datastore = RedisDataStore(redis.Redis(dashmat.redis_host))\n\n    scheduler = Scheduler(datastore)\n\n    for name, module in modules.items():\n        if chosen is None or name == chosen:\n            server = module.make_server(module_options[name].server_options)\n            scheduler.register(module, server, name)\n\n    scheduler.twitch(force=True)","label":0}
{"text":"protected void unsigned8(final int size, int value) throws IOException {\n        requireValidSizeUnsigned8(size);\n        final int required = size - available;\n        if (required > 0) {\n            unsigned8(available, value >> required);\n            unsigned8(required, value);\n            return;\n        }\n        octet <<= size;\n        octet |= (value & ((1 << size) - 1));\n        available -= size;\n        if (available == 0) {\n            write(octet);\n            count++;\n            octet = 0x00;\n            available = Byte.SIZE;\n        }\n    }","label":0}
{"text":"public static function checkCsrf($type = 1)\n    {\n        if ($type !== 0 && isset($_SERVER['HTTP_REFERER']) && !strpos($_SERVER['HTTP_REFERER'], $_SERVER['HTTP_HOST'])) {\n            if ($type == 1) {\n                if (!empty($_POST)) {\n                    Response::sendHttpStatus(403);\n                    throw new \\UnexpectedValueException(Lang::get('_ILLEGAL_REQUEST_'));\n                }\n            } else {\n                Response::sendHttpStatus(403);\n                throw new \\UnexpectedValueException(Lang::get('_ILLEGAL_REQUEST_'));\n            }\n        }\n    }","label":0}
{"text":"def max_pairs(shape):\n    \"\"\"\"\"\"\n\n    if not isinstance(shape, (tuple, list)):\n        x = get_length(shape)\n        n = int(x * (x - 1) \/ 2)\n\n    elif (isinstance(shape, (tuple, list)) and len(shape) == 1):\n        x = get_length(shape[0])\n        n = int(x * (x - 1) \/ 2)\n\n    else:\n        n = numpy.prod([get_length(xi) for xi in shape])\n\n    return n","label":0}
{"text":"public int ENgetlinkindex( String id ) throws EpanetException {\n        int[] index = new int[1];\n        int error = epanet.ENgetlinkindex(id, index);\n        checkError(error);\n        return index[0];\n    }","label":0}
{"text":"public function dispatch(Route $route, Request $request = null)\n    {\n        $context = $this->context;\n\n        if (empty($this->context) && !empty($request)) {\n            \/\/ If we have no context, but do have a request, prepare a context to store path variables in.\n            \/\/ Otherwise routing path variables would be lost for no good reason.\n            $context = new Context();\n            $context->registerInstance($request);\n        }\n\n        if (!empty($context)) {\n            \/\/ If we have a context, ensure that the route is made available in it.\n            $context->registerInstance($route);\n\n            if (!empty($request)) {\n                \/\/ If we have a request, map the path variables and pass them to the context as primitive types by name.\n                \/\/ This will allow us to inject info from a route e.g. \"\/view\/$userId\" to a $userId variable.\n                $pathVariables = VariableUrl::extractUrlVariables($request->getRequestUri(), $route->getPattern());\n\n                foreach ($pathVariables as $name => $value) {\n                    $context->registerVariable($name, $value);\n                }\n            }\n        }\n\n        return $route->action($context);\n    }","label":0}
{"text":"public static KeyManager[] getKeyManagers(String keyStoreFile, String pass)\n\t\t\tthrows InitializationException {\n\t\treturn getKeyManagers(getFileAsInputStream(keyStoreFile), pass);\n\t}","label":0}
{"text":"def to_local_name(acs, attr):\n    \n    for aconv in acs:\n        lattr = aconv.from_format(attr)\n        if lattr:\n            return lattr\n\n    return attr.friendly_name","label":0}
{"text":"private XML addClass(Class<?> aClass){\r\n\t\txmlJmapper.classes.add(Converter.toXmlClass(aClass));\r\n\t\treturn this;\r\n\t}","label":0}
{"text":"func (s *HistoricalMetricData) SetValue(v float64) *HistoricalMetricData {\n\ts.Value = &v\n\treturn s\n}","label":0}
{"text":"func (s *BuildConfiguration) SetCodeBuildServiceRole(v string) *BuildConfiguration {\n\ts.CodeBuildServiceRole = &v\n\treturn s\n}","label":0}
{"text":"protected function gatherOptions()\n    {\n        return new ListenerOptions(\n            $this->option('env'), $this->option('delay'),\n            $this->option('memory'), $this->option('timeout'),\n            $this->option('sleep'), $this->option('tries'),\n            $this->option('force')\n        );\n    }","label":0}
{"text":"func acquireChan(tokenCh <-chan struct{}) func(context.Context, bool) bool {\n\tif tokenCh == nil {\n\t\t\/\/ always false: acquire never succeeds; panic if told to block (to avoid deadlock)\n\t\treturn func(ctx context.Context, block bool) bool {\n\t\t\tif block {\n\t\t\t\tselect {\n\t\t\t\tcase <-ctx.Done():\n\t\t\t\tdefault:\n\t\t\t\t\tpanic(\"deadlock detected: block should never be true when the token chan is nil\")\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false\n\t\t}\n\t}\n\treturn func(ctx context.Context, block bool) bool {\n\t\tif block {\n\t\t\tselect {\n\t\t\tcase <-tokenCh:\n\t\t\t\t\/\/ tie breaker prefers Done\n\t\t\t\tselect {\n\t\t\t\tcase <-ctx.Done():\n\t\t\t\tdefault:\n\t\t\t\t\treturn true\n\t\t\t\t}\n\t\t\tcase <-ctx.Done():\n\t\t\t}\n\t\t\treturn false\n\t\t}\n\t\tselect {\n\t\tcase <-tokenCh:\n\t\t\treturn true\n\t\tdefault:\n\t\t\treturn false\n\t\t}\n\t}\n}","label":0}
{"text":"func Str2JSType(s string) JSType {\n\tvar (\n\t\toutput JSType\n\t)\n\ts = strings.TrimSpace(s) \/\/ santize the given string\n\tswitch {\n\tcase isBool(s):\n\t\toutput = Bool\n\tcase isFloat(s):\n\t\toutput = Float\n\tcase isInt(s):\n\t\toutput = Int\n\tcase isNull(s):\n\t\toutput = Null\n\tdefault:\n\t\toutput = String \/\/ if all alternatives have been eliminated, the input is a string\n\t}\n\treturn output\n}","label":0}
{"text":"public function selectAll($where=false, $order=false, $limit=false) {\n        $clause = false;\n        $values = array();\n        if ( is_array($where) ) {\n            $retval = self::extractWhere($where, $clause, $values);\n            if ( is_string($retval) ) throw new \\Exception($val);\n        }\n        $orderby = '';\n        if ( is_string($order) ) {\n            $orderby = self::extractOrder($order);\n            if ( $orderby === false ) throw new \\Exception('Invalid Order value');\n        }\n\n        $sql = \"SELECT KVS.id AS id, json_body, KVS.created_at, KVS.updated_at\n            FROM $this->KVS_TABLE AS KVS\n            WHERE $this->KVS_FK_NAME = :foreign_key\";\n        if ( $clause ) $sql .= ' AND '.$clause;\n        if ( $orderby ) $sql .= ' '.$orderby;\n        $values[':foreign_key'] = $this->KVS_FK;\n        $rows = $this->PDOX->allRowsDie($sql, $values);\n        return $rows;\n    }","label":0}
{"text":"def main(args=None):\n    \"\"\"\"\"\"\n    parser = _parser()\n\n    # Python 2 will error 'too few arguments' if no subcommand is supplied.\n    # No such error occurs in Python 3, which makes it feasible to check\n    # whether a subcommand was provided (displaying a help message if not).\n    # argparse internals vary significantly over the major versions, so it's\n    # much easier to just override the args passed to it. In this case, print\n    # the usage message if there are no args.\n    if args is None and len(sys.argv) <= 1:\n        sys.argv.append('--help')\n\n    options = parser.parse_args(args)\n\n    # pass options to subcommand\n    options.func(options)\n\n    return 0","label":0}
{"text":"def displace!(x,y,z)\n      self.x += x\n      self.y += y\n      self.z += z\n    end","label":0}
{"text":"@XmlElementDecl(namespace = \"http:\/\/www.drugbank.ca\", name = \"rs-id\", scope = SnpAdverseDrugReactionType.class)\n    public JAXBElement<String> createSnpAdverseDrugReactionTypeRsId(String value) {\n        return new JAXBElement<String>(_SnpAdverseDrugReactionTypeRsId_QNAME, String.class, SnpAdverseDrugReactionType.class, value);\n    }","label":0}
{"text":"public function login($username, $password)\n\t{\n\t\t$response = $this->http->get($this->getUrl('oauth2\/access_token'), array(\n\t\t\t'grant_type'\t=>\t'password ',\n\t\t\t'username'\t\t=>\t$username,\n\t\t\t'password'\t\t=>\t$password,\n\t\t\t'client_id'\t\t=>\t$this->appid,\n\t\t\t'client_secret'\t=>\t$this->appSecret,\n\t\t));\n\t\t$this->result = $response->json(true);\n\t\tif(!isset($this->result['error_code']))\n\t\t{\n\t\t\treturn $this->accessToken = $this->result['access_token'];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthrow new ApiException(isset($this->result['error']) ? $this->result['error'] : '', $this->result['error_code']);\n\t\t}\n\t}","label":0}
{"text":"public function run(Request $request) {\n\t\t$id = $this->getParam('id');\n\t\t$sport = SportQuery::create()\n\t\t\t->leftJoinGroup()\n\t\t\t->leftJoinSkill()\n\t\t\t->findOneById($id);\n\n\t\t$pictures = PictureQuery::create()\n\t\t\t->useSkillQuery()\n\t\t\t\t->filterBySportId($id)\n\t\t\t->endUse()\n\t\t\t->count();\n\n\t\t$videos = VideoQuery::create()\n\t\t\t->useSkillQuery()\n\t\t\t\t->filterBySportId($id)\n\t\t\t->endUse()\n\t\t\t->count();\n\n\t\t$references = ReferenceQuery::create()\n\t\t\t->useSkillReferenceQuery()\n\t\t\t\t->useSkillQuery()\n\t\t\t\t\t->filterBySportId($id)\n\t\t\t\t->endUse()\n\t\t\t->endUse()\n\t\t\t->count();\n\n\t\t$statistics = [\n\t\t\t'skills' => $sport->countSkills(),\n\t\t\t'groups' => $sport->countGroups(),\n\t\t\t'pictures' => $pictures,\n\t\t\t'videos' => $videos,\n\t\t\t'references' => $references\n\t\t];\n\n\t\treturn $this->responder->run($request, new Blank($statistics));\n\t}","label":0}
{"text":"private static function pushResourceToRequestContext(IPoolResource $resource)\n    {\n        $poolResources = RequestContext::get('poolResources', []);\n        $instance = $resource->getInstance();\n        $poolResources[spl_object_hash($instance)] = $resource;\n        RequestContext::set('poolResources', $poolResources);\n    }","label":0}
{"text":"@Override\n    public void transform(Context<MutableTimeSeriesCollectionPair> ctx) {\n        DateTime now = ctx.getTSData().getCurrentCollection().getTimestamp();\n\n        ctx.getTSData().getCurrentCollection().addMetrics(MONITOR_GROUP, get_metrics_(now, ctx));\n\n        ctx.getAlertManager().accept(new Alert(now, MONITOR_DOWN_ALERT, () -> \"builtin rule\", Optional.of(false), Duration.ZERO, \"builtin rule: monitor is not running for some time\", EMPTY_MAP));\n    }","label":0}
{"text":"public function select($table = '', $column = [], $arrayWhere = [], $other = '')\n    {\n        \/\/ handle column array data\n        if (!is_array($column)) {\n            $column = [];\n        }\n        \/\/ get field if pass otherwise use *\n        $sField = count($column) > 0 ? implode(', ', $column) : '*';\n        \/\/ check if table name not empty\n        if (!empty($table)) {\n            \/\/ if more then 0 array found in where array\n            if (count($arrayWhere) > 0 && is_array($arrayWhere)) {\n                \/\/ set class where array\n                $this->data = $arrayWhere;\n                \/\/ parse where array and get in temp var with key name and val\n                if (strstr(key($arrayWhere), ' ')) {\n                    $tmp = $this->customWhere($this->data);\n                    \/\/ get where syntax with namespace\n                    $where = $tmp['where'];\n                } else {\n                    $tmp = [];\n                    foreach ($arrayWhere as $k => $v) {\n                        $tmp[] = \"$k = :s_$k\";\n                    }\n                    \/\/ join temp array with AND condition\n                    $where = implode(' AND ', $tmp);\n                }\n                \/\/ unset temp var\n                unset($tmp);\n                \/\/ set class sql property\n                $this->sql = \"SELECT $sField FROM `$table` WHERE $where $other;\";\n            } else {\n                $this->sql = \"SELECT $sField FROM `$table` $other;\";  \/\/ if no where condition pass by user\n            }\n\n            \/\/ pdo prepare statement with sql query\n            $this->STH = $this->prepare($this->sql);\n            \/\/ if where condition has valid array number\n\n            if (count($arrayWhere) > 0 && is_array($arrayWhere)) {\n                $this->_bindPdoNameSpace($arrayWhere); \/\/ bind pdo param\n            }\n\n            \/\/ use try catch block to get pdo error\n            try {\n                \/\/ check if pdo execute\n                if ($this->STH->execute()) {\n                    \/\/ set class property with affected rows\n                    $this->affectedRows = $this->STH->rowCount();\n                    \/\/ set class property with sql result\n                    $this->results = $this->STH->fetchAll();\n                    \/\/ close pdo\n                    $this->STH->closeCursor();\n                    \/\/ return self object\n                    return $this;\n                } else {\n                    self::error($this->STH->errorInfo());  \/\/ catch pdo error\n                }\n            } catch (\\PDOException $e) {\n                \/\/ get pdo error and pass on error method\n                self::error($e->getMessage() . ': ' . __LINE__);\n            } \/\/ end try catch block to get pdo error\n        } else { \/\/ if table name empty\n            self::error('Table name not found..');\n        }\n    }","label":0}
{"text":"protected function getDocName()\n    {\n        $name = $this->option('name') ?: $this->name;\n\n        if (! $name) {\n            $this->comment('A name for the documentation was not supplied. Use the --name option or set a default in the configuration.');\n\n            exit;\n        }\n\n        return $name;\n    }","label":0}
{"text":"def run(self):\n        '''  '''\n        plays = []\n        matched_tags_all = set()\n        unmatched_tags_all = set()\n\n        # loop through all patterns and run them\n        self.callbacks.on_start()\n        for (play_ds, play_basedir) in zip(self.playbook, self.play_basedirs):\n            play = Play(self, play_ds, play_basedir)\n            matched_tags, unmatched_tags = play.compare_tags(self.only_tags)\n            matched_tags_all = matched_tags_all | matched_tags\n            unmatched_tags_all = unmatched_tags_all | unmatched_tags\n\n            # if we have matched_tags, the play must be run.\n            # if the play contains no tasks, assume we just want to gather facts\n            if (len(matched_tags) > 0 or len(play.tasks()) == 0):\n                plays.append(play)\n\n        # if the playbook is invoked with --tags that don't exist at all in the playbooks\n        # then we need to raise an error so that the user can correct the arguments.\n        unknown_tags = set(self.only_tags) - (matched_tags_all | unmatched_tags_all)\n        unknown_tags.discard('all')\n\n        if len(unknown_tags) > 0:\n            unmatched_tags_all.discard('all')\n            msg = 'tag(s) not found in playbook: %s.  possible values: %s'\n            unknown = ','.join(sorted(unknown_tags))\n            unmatched = ','.join(sorted(unmatched_tags_all))\n            raise errors.AnsibleError(msg % (unknown, unmatched))\n\n        for play in plays:\n            if not self._run_play(play):\n                break\n\n        # summarize the results\n        results = {}\n        for host in self.stats.processed.keys():\n            results[host] = self.stats.summarize(host)\n        return results","label":0}
{"text":"def call(self, jsondata):\n        \n        result = yield self.call_py(jsondata)\n        if result is None:\n            defer.returnValue(None)\n        else:\n            defer.returnValue(json.dumps(result))","label":0}
{"text":"func (st *State) RemoveAllBlocksForController() error {\n\tblocks, err := st.AllBlocksForController()\n\tif err != nil {\n\t\treturn errors.Trace(err)\n\t}\n\n\tops := []txn.Op{}\n\tfor _, blk := range blocks {\n\t\tops = append(ops, txn.Op{\n\t\t\tC:      blocksC,\n\t\t\tId:     blk.Id(),\n\t\t\tRemove: true,\n\t\t})\n\t}\n\n\t\/\/ Use runRawTransaction as we might be removing docs across\n\t\/\/ multiple models.\n\treturn st.runRawTransaction(ops)\n}","label":0}
{"text":"func (s *IndexFieldStatus) SetOptions(v *IndexField) *IndexFieldStatus {\n\ts.Options = v\n\treturn s\n}","label":0}
{"text":"def is_muted(what):\n    \n\n    state = False\n\n    for item in solo:\n        if item not in what:\n            state = True\n        else:\n            state = False\n            break\n\n    for item in mute:\n        if item in what:\n            state = True\n            break\n\n    return state","label":0}
{"text":"def _diffsigma(self, Ep, Egamma):\n        \n        Tp = Ep - self._m_p\n\n        diffsigma = self._Amax(Tp) * self._F(Tp, Egamma)\n\n        if self.nuclear_enhancement:\n            diffsigma *= self._nuclear_factor(Tp)\n\n        return diffsigma","label":0}
{"text":"public static void warn(Log log, String format, Object... arguments) {\r\n\t\twarn(log, null, format, arguments);\r\n\t}","label":0}
{"text":"public function setParFormat(PHPRtfLite_ParFormat $parFormat)\n    {\n        $this->_rtf->registerParFormat($parFormat);\n        $this->_parFormat = $parFormat;\n    }","label":0}
{"text":"private void countPropertyReference(UsageStatistics usageStatistics,\n\t\t\tPropertyIdValue property, int count) {\n\t\taddPropertyCounters(usageStatistics, property);\n\t\tusageStatistics.propertyCountsReferences.put(property,\n\t\t\t\tusageStatistics.propertyCountsReferences.get(property) + count);\n\t}","label":0}
{"text":"private function getCommonType($fieldName, $nativeType)\n    {\n        static $types = [\n            \/\/ integers\n            'int' => CommonTypes::TINT,\n            'tinyint' => CommonTypes::TINT,\n            'smallint' => CommonTypes::TINT,\n            'bigint' => CommonTypes::TINT,\n            \/\/ floats\n            'float' => CommonTypes::TNUMBER,\n            'real' => CommonTypes::TNUMBER,\n            'decimal' => CommonTypes::TNUMBER,\n            'numeric' => CommonTypes::TNUMBER,\n            'money' => CommonTypes::TNUMBER,\n            'smallmoney' => CommonTypes::TNUMBER,\n            \/\/ dates\n            'date' => CommonTypes::TDATE,\n            'time' => CommonTypes::TTIME,\n            'datetime' => CommonTypes::TDATETIME,\n            'smalldatetime' => CommonTypes::TDATETIME,\n            \/\/ bool\n            'bit' => CommonTypes::TBOOL,\n            \/\/ text\n            'char' => CommonTypes::TTEXT,\n            'varchar' => CommonTypes::TTEXT,\n            'text' => CommonTypes::TTEXT,\n        ];\n        if (isset($this->overrideTypes[$fieldName])) {\n            return $this->overrideTypes[$fieldName];\n        }\n        $nativeType = strtolower($nativeType);\n        $type = CommonTypes::TTEXT;\n        if (array_key_exists($nativeType, $types)) {\n            $type = $types[$nativeType];\n        }\n        return $type;\n    }","label":0}
{"text":"public static function main($argc, array $argv = [])\n    {\n        $firstDay = new self(DayEnum::MONDAY());\n        $firstDay->tellItLikeItIs();\n        $thirdDay = new self(DayEnum::WEDNESDAY());\n        $thirdDay->tellItLikeItIs();\n        $fifthDay = new self(DayEnum::FRIDAY());\n        $fifthDay->tellItLikeItIs();\n        $sixthDay = new self(DayEnum::SATURDAY());\n        $sixthDay->tellItLikeItIs();\n        $seventhDay = new self(DayEnum::SUNDAY());\n        $seventhDay->tellItLikeItIs();\n\n        return 0;\n    }","label":0}
{"text":"public static function compact($array, $reindex = false)\n    {\n        $out = array_filter($array, function ($item) {\n            return false !== (bool)$item;\n        });\n\n        return false !== $reindex && self::isList($out) ? array_values($out) : $out;\n    }","label":0}
{"text":"def build_method_summary_list(path_prefix=\"\")\n      collect_methods unless @methods\n      meths = @methods.sort\n      res = []\n      meths.each do |meth|\n\tres << {\n          \"name\" => CGI.escapeHTML(meth.name),\n          \"aref\" => \"#{path_prefix}\\##{meth.aref}\" \n        }\n      end\n      res\n    end","label":0}
{"text":"public function getExtension($mimetype)\n    {\n        if (!($extension = array_search($mimetype, $this->mainMimeTypes))) {\n            $extension = array_search($mimetype, $this->mimeTypes);\n        }\n\n        return !$extension ? null : $extension;\n    }","label":0}
{"text":"func (m *Message) SetTrackingOpens(trackingOpens bool) {\n\tm.trackingOpens = trackingOpens\n\tm.trackingOpensSet = true\n}","label":0}
{"text":"def prop_budget(self, budget):\n        \n\n        if self.minisat:\n            pysolvers.minisatgh_pbudget(self.minisat, budget)","label":0}
{"text":"func NewRocR100ForStreamWithSrcLen(sourceLength uint, priceStream gotrade.DOHLCVStreamSubscriber, timePeriod int, selectData gotrade.DOHLCVDataSelectionFunc) (indicator *RocR100, err error) {\n\tind, err := NewRocR100WithSrcLen(sourceLength, timePeriod, selectData)\n\tpriceStream.AddTickSubscription(ind)\n\treturn ind, err\n}","label":0}
{"text":"private void encodeObject(StringBuffer result, Object value) {\n    if (value != null) {\n      if (value instanceof byte[]) {\n        result.append(\"[]\");\n        HexString.binToHex((byte[])value, 0, ((byte[])value).length, result);\n      } else\n        URLEncode(result, value.toString());\n    }","label":0}
{"text":"protected function _generateVendorDir($sVendor)\n    {\n        $sVendorDir = $this->_sModuleDir . $sVendor . DIRECTORY_SEPARATOR;\n        if (!file_exists($sVendorDir)) {\n            mkdir($sVendorDir);\n\n            \/\/ Generate vendor metadata file\n            file_put_contents($sVendorDir . 'vendormetadata.php', '<?php');\n        }\n    }","label":0}
{"text":"final public function dropTables(array $tables, $fkChecks = false)\n    {\n        \/\/ Whether FK checks are enabled\n        if ($fkChecks == false) {\n            $this->db->raw('SET FOREIGN_KEY_CHECKS=0')\n                     ->execute();\n        }\n\n        foreach ($tables as $table) {\n            if (!$this->dropTable($table)) {\n                return false;\n            }\n        }\n\n        \/\/ Whether FK checks are enabled\n        if ($fkChecks == false) {\n            $this->db->raw('SET FOREIGN_KEY_CHECKS=1')\n                     ->execute();\n        }\n\n        return true;\n    }","label":0}
{"text":"function (d, chart, series) {\n            var returnCx = 0;\n            if (series.x.measure !== null && series.x.measure !== undefined) {\n                returnCx = series.x._scale(d.cx);\n            } else if (series.x._hasCategories() && series.x.categoryFields.length >= 2) {\n                returnCx = series.x._scale(d.cx) + dimple._helpers.xGap(chart, series) + ((d.xOffset + 0.5) * (((chart._widthPixels() \/ series.x._max) - 2 * dimple._helpers.xGap(chart, series)) * d.width));\n            } else {\n                returnCx = series.x._scale(d.cx) + ((chart._widthPixels() \/ series.x._max) \/ 2);\n            }\n            return returnCx;\n        }","label":0}
{"text":"public function serialize(Ability $ability, array $options = [])\n    {\n        $serialized = [\n            'id' => $ability->getUuid(),\n            'name' => $ability->getName(),\n            'minResourceCount' => $ability->getMinResourceCount(),\n            'minEvaluatedResourceCount' => $ability->getMinEvaluatedResourceCount(),\n        ];\n\n        return $serialized;\n    }","label":0}
{"text":"def _homogenize_data_filter(dfilter):\n    \n    if isinstance(dfilter, tuple) and (len(dfilter) == 1):\n        dfilter = (dfilter[0], None)\n    if (dfilter is None) or (dfilter == (None, None)) or (dfilter == (None,)):\n        dfilter = (None, None)\n    elif isinstance(dfilter, dict):\n        dfilter = (dfilter, None)\n    elif isinstance(dfilter, (list, str)) or (\n        isinstance(dfilter, int) and (not isinstance(dfilter, bool))\n    ):\n        dfilter = (None, dfilter if isinstance(dfilter, list) else [dfilter])\n    elif isinstance(dfilter[0], dict) or (\n        (dfilter[0] is None) and (not isinstance(dfilter[1], dict))\n    ):\n        pass\n    else:\n        dfilter = (dfilter[1], dfilter[0])\n    return dfilter","label":0}
{"text":"def group_id(self):\n        \n        if self.derived_from is not None:\n            return self.derived_from.group_id()\n        if self.file_uuid is None:\n            return None\n        return utils.GROUP_ID_PREFIX + self.file_uuid","label":0}
{"text":"function TypedArray (config) {\n    const array = this;\n\n    \/\/ validate min items\n    if (config.hasOwnProperty('minItems') && (!util.isInteger(config.minItems) || config.minItems < 0)) {\n        throw Error('Invalid configuration value for property: minItems. Must be an integer that is greater than or equal to zero. Received: ' + config.minItems);\n    }\n    const minItems = config.hasOwnProperty('minItems') ? config.minItems : 0;\n\n    \/\/ validate max items\n    if (config.hasOwnProperty('maxItems') && (!util.isInteger(config.maxItems) || config.maxItems < minItems)) {\n        throw Error('Invalid configuration value for property: maxItems. Must be an integer that is greater than or equal to the minItems. Received: ' + config.maxItems);\n    }\n\n    \/\/ validate schema\n    if (config.hasOwnProperty('schema')) config.schema = FullyTyped(config.schema);\n\n    \/\/ define properties\n    Object.defineProperties(array, {\n\n        maxItems: {\n            \/**\n             * @property\n             * @name TypedArray#maxItems\n             * @type {number}\n             *\/\n            value: Math.round(config.maxItems),\n            writable: false\n        },\n\n        minItems: {\n            \/**\n             * @property\n             * @name TypedArray#minItems\n             * @type {number}\n             *\/\n            value: Math.round(config.minItems),\n            writable: false\n        },\n\n        schema: {\n            \/**\n             * @property\n             * @name TypedArray#schema\n             * @type {object}\n             *\/\n            value: config.schema,\n            writable: false\n        },\n\n        uniqueItems: {\n            \/**\n             * @property\n             * @name TypedArray#uniqueItems\n             * @type {boolean}\n             *\/\n            value: !!config.uniqueItems,\n            writable: false\n        }\n\n    });\n\n    return array;\n}","label":0}
{"text":"public function getConnection(array $params, $type) {\n        if ($type == 'S') {\n            $host = (!empty($params['num_ip'])) ? $params['num_ip'] : '127.0.0.1';\n            $community = (!empty($params['des_snmp_community'])) ? $params['des_snmp_community'] : 'public';\n            $version = (!empty($params['des_snmp_version'])) ? $params['des_snmp_version'] : '2c';\n            $seclevel = (!empty($params['des_snmp_sec_level'])) ? $params['des_snmp_sec_level'] : 'noAuthNoPriv';\n            $authprotocol = (!empty($params['des_snmp_auth_protocol'])) ? $params['des_snmp_auth_protocol'] : 'MD5';\n            $authpassphrase = (!empty($params['des_snmp_auth_passphrase'])) ? $params['des_snmp_auth_passphrase'] : 'None';\n            $privprotocol = (!empty($params['des_snmp_priv_protocol'])) ? $params['des_snmp_priv_protocol'] : 'DES';\n            $privpassphrase = (!empty($params['des_snmp_priv_passphrase'])) ? $params['des_snmp_priv_passphrase'] : 'None';\n\n            $connection = new \\Cityware\\Snmp\\SNMP($host, $community, $version, $seclevel, $authprotocol, $authpassphrase, $privprotocol, $privpassphrase);\n            $connection->setSecLevel(3);\n            $connection->disableCache();\n\n            $this->setSnmpCon($connection);\n        } else if ($type == 'W') {\n            $host = (!empty($params['num_ip'])) ? $params['num_ip'] : '127.0.0.1';\n            $username = (!empty($params['des_wmi_user'])) ? $params['des_wmi_user'] : null;\n            $password = (!empty($params['des_wmi_password'])) ? $params['des_wmi_password'] : null;\n            $domain = (!empty($params['des_wmi_domain'])) ? $params['des_wmi_domain'] : null;\n            $wmi = new \\Cityware\\Wmi\\Wmi($host, $username, $password, $domain);\n            $connection = $wmi->connect('root\\\\cimv2');\n            $this->setWmiCon($connection);\n        }\n\n        return $connection;\n    }","label":0}
{"text":"def delete_keys(self, keys, secret=False):\n        '''\n        \n        '''\n        return self.execute(\n            DeleteResult(),\n            ['--batch', '--yes', '--delete-secret-key' if secret else '--delete-key'] + list(make_list(keys))\n        )","label":0}
{"text":"func (s *DescribeUserStackAssociationsInput) SetUserName(v string) *DescribeUserStackAssociationsInput {\n\ts.UserName = &v\n\treturn s\n}","label":0}
{"text":"public function find_subcommand( &$args ) {\n\t\t$name = array_shift( $args );\n\n\t\t$subcommands = $this->get_subcommands();\n\n\t\tif ( ! isset( $subcommands[ $name ] ) ) {\n\t\t\t$aliases = self::get_aliases( $subcommands );\n\n\t\t\tif ( isset( $aliases[ $name ] ) ) {\n\t\t\t\t$name = $aliases[ $name ];\n\t\t\t}\n\t\t}\n\n\t\tif ( ! isset( $subcommands[ $name ] ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn $subcommands[ $name ];\n\t}","label":0}
{"text":"public function getDefaultDb(): ?ConnectionInterface\n    {\n        \/\/ By default, the DB Facade does not return the\n        \/\/ any actual database connection, but rather an\n        \/\/ instance of \\Illuminate\\Database\\DatabaseManager.\n        \/\/ Therefore, we make sure only to obtain its\n        \/\/ \"connection\", to make sure that its only the connection\n        \/\/ instance that we obtain.\n        $manager = DB::getFacadeRoot();\n        if (isset($manager)) {\n            return $manager->connection();\n        }\n        return $manager;\n    }","label":0}
{"text":"public function set_html($source, $from_file = false)\n    {\n        if ($from_file && file_exists($source)) {\n            $this->html = file_get_contents($source);\n        } else {\n            $this->html = $source;\n        }\n\n        $this->_converted = false;\n    }","label":0}
{"text":"public function asXml(Shopgate_Model_XmlResultObject $itemNode)\n    {\n        \/**\n         * @var Shopgate_Model_XmlResultObject $stockNode\n         *\/\n        $identifierNode = $itemNode->addChildWithCDATA('identifier', $this->getValue());\n        $identifierNode->addAttribute('uid', $this->getUid());\n        $identifierNode->addAttribute('type', $this->getType());\n\n        return $itemNode;\n    }","label":0}
{"text":"public static void toFile(Template template, VelocityContext context, String destPath) {\r\n\t\tPrintWriter writer = null;\r\n\t\ttry {\r\n\t\t\twriter = FileUtil.getPrintWriter(destPath, Velocity.getProperty(Velocity.INPUT_ENCODING).toString(), false);\r\n\t\t\tmerge(template, context, writer);\r\n\t\t} catch (IORuntimeException e) {\r\n\t\t\tthrow new UtilException(e, \"Write Velocity content to [{}] error!\", destPath);\r\n\t\t} finally {\r\n\t\t\tIoUtil.close(writer);\r\n\t\t}\r\n\t}","label":0}
{"text":"public function getMag(): Mag {\r\n\t\t$this->contentItemMag = new ContentItemMag($this->label, $this->panelConfigs,\r\n\t\t\t\t$this->targetReadEiFrame, $this->targetEditEiFrame);\r\n\t\t$this->contentItemMag->setNewMappingFormUrl($this->newMappingFormUrl);\r\n\t\t$this->contentItemMag->setValue($this->toManyEiField->getValue());\r\n\t\t$this->contentItemMag->setReduced($this->reduced);\r\n\t\treturn $this->contentItemMag;\r\n\t}","label":0}
{"text":"func (s *TagListMessage) SetTagList(v []*Tag) *TagListMessage {\n\ts.TagList = v\n\treturn s\n}","label":0}
{"text":"func (l *Live) SetAppName(appname string) *Live {\n\tl.liveReq.AppName = appname\n\treturn l\n}","label":0}
{"text":"private function saveSearchContainerRelation(\\Magento\\Framework\\Model\\AbstractModel $object)\n    {\n        $searchContainers = $object->getSearchContainer();\n\n        if (is_array($searchContainers) && (count($searchContainers) > 0)) {\n            $searchContainerLinks = [];\n            $deleteCondition = OptimizerInterface::OPTIMIZER_ID . \" = \" . $object->getId();\n\n            foreach ($searchContainers as $searchContainer) {\n                $searchContainerName = (string) $searchContainer;\n                \/\/ Treat autocomplete apply_to like the quick search.\n                if ($searchContainerName === 'catalog_product_autocomplete') {\n                    $searchContainerName = 'quick_search_container';\n                }\n                $searchContainerData = $object->getData($searchContainerName);\n                $applyTo = is_array($searchContainerData) ? ((bool) $searchContainerData['apply_to'] ?? false) : false;\n                $searchContainerLinks[(string) $searchContainer] = [\n                    OptimizerInterface::OPTIMIZER_ID     => (int) $object->getId(),\n                    OptimizerInterface::SEARCH_CONTAINER => (string) $searchContainer,\n                    'apply_to'                           => (int) $applyTo,\n                ];\n            }\n\n            $this->getConnection()->delete($this->getTable(OptimizerInterface::TABLE_NAME_SEARCH_CONTAINER), $deleteCondition);\n            $this->getConnection()->insertOnDuplicate(\n                $this->getTable(OptimizerInterface::TABLE_NAME_SEARCH_CONTAINER),\n                $searchContainerLinks\n            );\n        }\n    }","label":0}
{"text":"func EnsureDir(dir string, mode os.FileMode) error {\n\tif fileOptions, err := os.Stat(dir); os.IsNotExist(err) {\n\t\tif errMake := os.MkdirAll(dir, mode); errMake != nil {\n\t\t\treturn fmt.Errorf(\"Could not create directory %s. %v\", dir, err)\n\t\t}\n\t} else if err != nil {\n\t\treturn fmt.Errorf(\"Error asserting directory %s: %v\", dir, err)\n\t} else if !fileOptions.IsDir() {\n\t\treturn fmt.Errorf(\"Path already exists as a file: %s\", dir)\n\t}\n\treturn nil\n}","label":0}
{"text":"public void sync(final boolean force) {\n    if (closed) {\n      throw new AlreadyClosedException();\n    }\n    final int f = force ? 1 : 0;\n    checkRc(LIB.mdb_env_sync(ptr, f));\n  }","label":0}
{"text":"public function revert() {\n\t\tif ($this->data()->IsModifiedOnStage) {\n\t\t\t$this->data()->doRevertToLive();\n\t\t}\n\t\treturn $this->redirect($this->data()->Link() . '?stage=Live');\n\t}","label":0}
{"text":"func (s *DynamoDBAction) SetOperation(v string) *DynamoDBAction {\n\ts.Operation = &v\n\treturn s\n}","label":0}
{"text":"function tilda(cwd) {\n  if (cwd.substring(0, 1) === '~') {\n    cwd = (process.env.HOME || process.env.HOMEPATH || process.env.HOMEDIR || process.cwd()) + cwd.substr(1);\n  }\n  return path.resolve(cwd);\n}","label":0}
{"text":"def mark_log(self, filename='system.log'):\n        \n        log_file = os.path.join(self.get_path(), 'logs', filename)\n        if not os.path.exists(log_file):\n            return 0\n        with open(log_file) as f:\n            f.seek(0, os.SEEK_END)\n            return f.tell()","label":0}
{"text":"public static void setSchemaTypeInfo(Configuration conf, StructTypeInfo schemaTypeInfo) {\n    if (schemaTypeInfo != null) {\n      conf.set(SCHEMA_TYPE_INFO, schemaTypeInfo.getTypeName());\n      LOG.debug(\"Set schema typeInfo on conf: {}\", schemaTypeInfo);\n    }\n  }","label":0}
{"text":"def source_file(pymux, variables):\n    \n    filename = os.path.expanduser(variables['<filename>'])\n    try:\n        with open(filename, 'rb') as f:\n            for line in f:\n                line = line.decode('utf-8')\n                handle_command(pymux, line)\n    except IOError as e:\n        raise CommandException('IOError: %s' % (e, ))","label":0}
{"text":"public function resolveRouteBinding($value)\n    {\n        if (! (ctype_digit($value) || is_int($value))) {\n            return null;\n        }\n\n        try {\n            $value = App::make('fakeid')->decode((int) $value);\n        } catch (Exception $e) {\n            return null;\n        }\n\n        return $this->where($this->getRouteKeyName(), $value)->first();\n    }","label":0}
{"text":"func NewGrip(name string) *Grip {\n\tsender, _ := send.NewNativeLogger(name,\n\t\tsend.LevelInfo{\n\t\t\tThreshold: level.Trace,\n\t\t\tDefault:   level.Trace,\n\t\t})\n\n\treturn &Grip{impl: sender}\n}","label":0}
{"text":"XmlNode.QName toNodeQName(Context cx, Object nameValue, boolean attribute) {\n        if (nameValue instanceof XMLName) {\n            return ((XMLName)nameValue).toQname();\n        } else if (nameValue instanceof QName) {\n            QName qname = (QName)nameValue;\n            return qname.getDelegate();\n        } else if (\n            nameValue instanceof Boolean\n            || nameValue instanceof Number\n            || nameValue == Undefined.instance\n            || nameValue == null\n        ) {\n            throw badXMLName(nameValue);\n        } else {\n            String local = null;\n            if (nameValue instanceof String) {\n                local = (String)nameValue;\n            } else {\n                local = ScriptRuntime.toString(nameValue);\n            }\n            return toNodeQName(cx, local, attribute);\n        }\n    }","label":0}
{"text":"private static final boolean is_overflow(long10 x) {\n\t\treturn (\n\t\t\t((x._0 > P26-19)) &&\n\t\t\t((x._1 & x._3 & x._5 & x._7 & x._9) == P25) &&\n\t\t\t((x._2 & x._4 & x._6 & x._8) == P26)\n\t\t\t) || (x._9 > P25);\n\t}","label":0}
{"text":"public function getId()\n    {\n        if ($output = $this->execute('fsutil file queryfileid', $this->path)) {\n                if ((bool) preg_match('\/(\\d{1}[x].*)\/', $output[0], $matches)) {\n                return $matches[0];\n            }\n        }\n    }","label":0}
{"text":"protected function readGeometry(WKBBuffer $buffer, int $srid) : Geometry\n    {\n        $buffer->readByteOrder();\n\n        $this->readGeometryHeader($buffer, $geometryType, $hasZ, $hasM, $srid);\n\n        $cs = new CoordinateSystem($hasZ, $hasM, $srid);\n\n        switch ($geometryType) {\n            case Geometry::POINT:\n                return $this->readPoint($buffer, $cs);\n\n            case Geometry::LINESTRING:\n                return $this->readLineString($buffer, $cs);\n\n            case Geometry::CIRCULARSTRING:\n                return $this->readCircularString($buffer, $cs);\n\n            case Geometry::COMPOUNDCURVE:\n                return $this->readCompoundCurve($buffer, $cs);\n\n            case Geometry::POLYGON:\n                return $this->readPolygon($buffer, $cs);\n\n            case Geometry::CURVEPOLYGON:\n                return $this->readCurvePolygon($buffer, $cs);\n\n            case Geometry::MULTIPOINT:\n                return $this->readMultiPoint($buffer, $cs);\n\n            case Geometry::MULTILINESTRING:\n                return $this->readMultiLineString($buffer, $cs);\n\n            case Geometry::MULTIPOLYGON:\n                return $this->readMultiPolygon($buffer, $cs);\n\n            case Geometry::GEOMETRYCOLLECTION:\n                return $this->readGeometryCollection($buffer, $cs);\n\n            case Geometry::POLYHEDRALSURFACE:\n                return $this->readPolyhedralSurface($buffer, $cs);\n\n            case Geometry::TIN:\n                return $this->readTIN($buffer, $cs);\n\n            case Geometry::TRIANGLE:\n                return $this->readTriangle($buffer, $cs);\n        }\n\n        throw GeometryIOException::unsupportedWKBType($geometryType);\n    }","label":0}
{"text":"func dataSourceIdentityUserV3Attributes(d *schema.ResourceData, user *users.User) error {\n\tlog.Printf(\"[DEBUG] openstack_identity_user_v3 details: %#v\", user)\n\n\td.SetId(user.ID)\n\td.Set(\"default_project_id\", user.DefaultProjectID)\n\td.Set(\"description\", user.Description)\n\td.Set(\"domain_id\", user.DomainID)\n\td.Set(\"enabled\", user.Enabled)\n\td.Set(\"name\", user.Name)\n\td.Set(\"password_expires_at\", user.PasswordExpiresAt.Format(time.RFC3339))\n\n\treturn nil\n}","label":0}
{"text":"def slicenet_range1(ranged_hparams):\n  \"\"\"\"\"\"\n  rhp = ranged_hparams\n  rhp.set_float(\"clip_grad_norm\", 1.0, 10.0, scale=rhp.LOG_SCALE)\n  rhp.set_float(\"learning_rate\", 0.02, 1.0, scale=rhp.LOG_SCALE)\n  rhp.set_float(\"optimizer_adam_beta2\", 0.995, 0.998)\n  rhp.set_float(\"weight_decay\", 1.0, 5.0)","label":0}
{"text":"def create_table_from_fits(fitsfile, hduname, colnames=None):\n    \"\"\"\"\"\"\n\n    if colnames is None:\n        return Table.read(fitsfile, hduname)\n\n    cols = []\n    with fits.open(fitsfile, memmap=True) as h:\n        for k in colnames:\n            data = h[hduname].data.field(k)\n            cols += [Column(name=k, data=data)]\n    return Table(cols)","label":0}
{"text":"protected function parseUri($uriString = '')\n  {\n    $status = @preg_match(\"~^((\/\/)([^\/?#]*))([^?#]*)(\\?([^#]*))?(#(.*))?$~\", $uriString, $matches);\n\n    if($status === FALSE)\n    {\n      throw new Exception(\"URI scheme-specific decomposition failed\");\n    }\n\n    if(!$status) return;\n\n    $this->path = (isset($matches[4])) ? $matches[4] : '';\n    $this->query = (isset($matches[6])) ? $matches[6] : '';\n    $this->fragment = (isset($matches[8])) ? $matches[8] : '';\n\n    $status = @preg_match(\"~^(([^:@]*)(:([^@]*))?@)?((?(?=[[])[[][^]]+[]]|[^:]+))(:(.*))?$~\", (isset($matches[3])) ? $matches[3] : \"\", $matches);\n\n    if($status === FALSE)\n    {\n      throw new Exception(\"URI scheme-specific authority decomposition failed\");\n    }\n\n    if(!$status) return;\n\n    $this->user = isset($matches[2]) ? $matches[2] : \"\";\n    $this->pass = isset($matches[4]) ? $matches[4] : \"\";\n    $this->host = isset($matches[5]) === TRUE ? preg_replace('~^\\[([^]]+)\\]$~', '\\1', $matches[5]) : \"\";\n    $this->port = isset($matches[7]) ? $matches[7] : \"\";\n  }","label":0}
{"text":"protected function findIdsByGivenCriteria()\n    {\n        $select = $this->getSelectAs($this->idField);\n\n        $subQueryBuilder = $this->createSubQueryBuilder($select);\n        if (null != $this->limit) {\n            $subQueryBuilder->setMaxResults($this->limit)->setFirstResult($this->limit * ($this->page - 1));\n        }\n\n        foreach ($this->sortFields as $index => $sortField) {\n            if ($sortField->getName() !== $this->idField->getName()) {\n                $subQueryBuilder->addSelect($this->getSelectAs($sortField));\n            }\n        }\n\n        $this->assignSortFields($subQueryBuilder);\n        $this->assignParameters($this->queryBuilder);\n        $ids = $subQueryBuilder->getQuery()->getArrayResult();\n\n        \/\/ if no results are found - return\n        if (count($ids) < 1) {\n            return [];\n        }\n\n        $ids = array_map(\n            function($array) {\n                return $array[$this->idField->getName()];\n            },\n            $ids\n        );\n\n        return $ids;\n    }","label":0}
{"text":"public static String notEmptyIfNotNull(String value, String name) {\n        return notEmptyIfNotNull(value, name, null);\n    }","label":0}
{"text":"function () {\n\/*Line 35 - 'AtomBrowser.js' *\/        var nVer = navigator.appVersion;\n\/*Line 36 - 'AtomBrowser.js' *\/        var nAgt = navigator.userAgent;\n\/*Line 37 - 'AtomBrowser.js' *\/        this.userAgent = nAgt;\n\/*Line 38 - 'AtomBrowser.js' *\/        var browserName = navigator.appName;\n\/*Line 39 - 'AtomBrowser.js' *\/        var fullVersion = \"\" + parseFloat(navigator.appVersion);\n\/*Line 40 - 'AtomBrowser.js' *\/        var majorVersion = parseInt(navigator.appVersion, 10);\n\/*Line 41 - 'AtomBrowser.js' *\/        var nameOffset, verOffset, ix;\n\n\/*Line 43 - 'AtomBrowser.js' *\/        \/\/ In Opera, the true version is after \"Opera\" or after \"Version\"\n\/*Line 44 - 'AtomBrowser.js' *\/        if ((verOffset = nAgt.indexOf(\"Opera\")) != -1) {\n\/*Line 45 - 'AtomBrowser.js' *\/            browserName = \"Opera\";\n\/*Line 46 - 'AtomBrowser.js' *\/            fullVersion = nAgt.substring(verOffset + 6);\n\/*Line 47 - 'AtomBrowser.js' *\/            if ((verOffset = nAgt.indexOf(\"Version\")) != -1) {\n\/*Line 48 - 'AtomBrowser.js' *\/                fullVersion = nAgt.substring(verOffset + 8);\n\/*Line 49 - 'AtomBrowser.js' *\/            }\n\/*Line 50 - 'AtomBrowser.js' *\/        }\n\/*Line 51 - 'AtomBrowser.js' *\/            \/\/ In MSIE, the true version is after \"MSIE\" in userAgent\n\/*Line 52 - 'AtomBrowser.js' *\/        else if ((verOffset = nAgt.indexOf(\"MSIE\")) != -1) {\n\/*Line 53 - 'AtomBrowser.js' *\/            browserName = \"Microsoft Internet Explorer\";\n\/*Line 54 - 'AtomBrowser.js' *\/            fullVersion = nAgt.substring(verOffset + 5);\n\/*Line 55 - 'AtomBrowser.js' *\/        }\n\/*Line 56 - 'AtomBrowser.js' *\/                \/\/ In Chrome, the true version is after \"Chrome\"\n\/*Line 57 - 'AtomBrowser.js' *\/        else if ((verOffset = nAgt.indexOf(\"Chrome\")) != -1) {\n\/*Line 58 - 'AtomBrowser.js' *\/            browserName = \"Chrome\";\n\/*Line 59 - 'AtomBrowser.js' *\/            fullVersion = nAgt.substring(verOffset + 7);\n\/*Line 60 - 'AtomBrowser.js' *\/        }\n\/*Line 61 - 'AtomBrowser.js' *\/                \/\/ In Safari, the true version is after \"Safari\" or after \"Version\"\n\/*Line 62 - 'AtomBrowser.js' *\/        else if ((verOffset = nAgt.indexOf(\"Safari\")) != -1) {\n\/*Line 63 - 'AtomBrowser.js' *\/            browserName = \"Safari\";\n\/*Line 64 - 'AtomBrowser.js' *\/            this.isMobile = nAgt.indexOf(\"iPhone\") != -1;\n\/*Line 65 - 'AtomBrowser.js' *\/            fullVersion = nAgt.substring(verOffset + 7);\n\/*Line 66 - 'AtomBrowser.js' *\/            if ((verOffset = nAgt.indexOf(\"Version\")) != -1) {\n\/*Line 67 - 'AtomBrowser.js' *\/                fullVersion = nAgt.substring(verOffset + 8);\n\/*Line 68 - 'AtomBrowser.js' *\/            }\n\/*Line 69 - 'AtomBrowser.js' *\/        }\n\/*Line 70 - 'AtomBrowser.js' *\/                \/\/ In Firefox, the true version is after \"Firefox\"\n\/*Line 71 - 'AtomBrowser.js' *\/        else if ((verOffset = nAgt.indexOf(\"Firefox\")) != -1) {\n\/*Line 72 - 'AtomBrowser.js' *\/            browserName = \"Firefox\";\n\/*Line 73 - 'AtomBrowser.js' *\/            fullVersion = nAgt.substring(verOffset + 8);\n\/*Line 74 - 'AtomBrowser.js' *\/        }\n\/*Line 75 - 'AtomBrowser.js' *\/                \/\/ In most other browsers, \"name\/version\" is at the end of userAgent\n\/*Line 76 - 'AtomBrowser.js' *\/        else if ((nameOffset = nAgt.lastIndexOf(' ') + 1) <\n\/*Line 77 - 'AtomBrowser.js' *\/              (verOffset = nAgt.lastIndexOf('\/'))) {\n\/*Line 78 - 'AtomBrowser.js' *\/                  browserName = nAgt.substring(nameOffset, verOffset);\n\/*Line 79 - 'AtomBrowser.js' *\/                  fullVersion = nAgt.substring(verOffset + 1);\n\/*Line 80 - 'AtomBrowser.js' *\/                  if (browserName.toLowerCase() == browserName.toUpperCase()) {\n\/*Line 81 - 'AtomBrowser.js' *\/                      browserName = navigator.appName;\n\/*Line 82 - 'AtomBrowser.js' *\/                  }\n\/*Line 83 - 'AtomBrowser.js' *\/              }\n\/*Line 84 - 'AtomBrowser.js' *\/        \/\/ trim the fullVersion string at semicolon\/space if present\n\/*Line 85 - 'AtomBrowser.js' *\/        if ((ix = fullVersion.indexOf(\";\")) != -1) {\n\/*Line 86 - 'AtomBrowser.js' *\/            fullVersion = fullVersion.substring(0, ix);\n\/*Line 87 - 'AtomBrowser.js' *\/        }\n\/*Line 88 - 'AtomBrowser.js' *\/        if ((ix = fullVersion.indexOf(\" \")) != -1) {\n\/*Line 89 - 'AtomBrowser.js' *\/            fullVersion = fullVersion.substring(0, ix);\n\/*Line 90 - 'AtomBrowser.js' *\/        }\n\n\/*Line 92 - 'AtomBrowser.js' *\/        majorVersion = parseInt('' + fullVersion, 10);\n\/*Line 93 - 'AtomBrowser.js' *\/        if (isNaN(majorVersion)) {\n\/*Line 94 - 'AtomBrowser.js' *\/            fullVersion = '' + parseFloat(navigator.appVersion);\n\/*Line 95 - 'AtomBrowser.js' *\/            majorVersion = parseInt(navigator.appVersion, 10);\n\/*Line 96 - 'AtomBrowser.js' *\/        }\n\n\/*Line 98 - 'AtomBrowser.js' *\/        this.browserName = browserName;\n\/*Line 99 - 'AtomBrowser.js' *\/        this.majorVersion = majorVersion;\n\/*Line 100 - 'AtomBrowser.js' *\/        this.isMobile = \/android|mobile|ios|iphone\/gi.test(nAgt);\n\/*Line 101 - 'AtomBrowser.js' *\/    }","label":0}
{"text":"func InitDb(dbResult *DbGorp) error {\n\tparams := DbInfo{}\n\tparams.DbDriver = revel.Config.StringDefault(\"db.driver\", \"sqlite3\")\n\tparams.DbHost = revel.Config.StringDefault(\"db.host\", \"localhost\")\n\tif params.DbDriver == \"sqlite3\" && params.DbHost == \"localhost\" {\n\t\tparams.DbHost = \"\/tmp\/app.db\"\n\t}\n\tparams.DbUser = revel.Config.StringDefault(\"db.user\", \"default\")\n\tparams.DbPassword = revel.Config.StringDefault(\"db.password\", \"\")\n\tparams.DbName = revel.Config.StringDefault(\"db.name\", \"default\")\n\tparams.DbConnection = revel.Config.StringDefault(\"db.connection\", \"\")\n\tparams.DbSchema = revel.Config.StringDefault(\"db.schema\", \"\")\n\tdbResult.Info = &params\n\n\treturn dbResult.InitDb(true)\n}","label":0}
{"text":"def get_size(objects):\n    \"\"\"\"\"\"\n    res = 0\n    for o in objects:\n        try:\n            res += _getsizeof(o)\n        except AttributeError:\n            print(\"IGNORING: type=%s; o=%s\" % (str(type(o)), str(o)))\n    return res","label":0}
{"text":"func (b *Client) Connect(conn io.ReadWriteCloser) (err error) {\n\tif b.Connected() {\n\t\treturn ErrConnected\n\t}\n\n\tb.connection = conn\n\tb.Reset()\n\tconnected := make(chan bool, 1)\n\tconnectError := make(chan error, 1)\n\n\tb.Once(b.Event(\"ProtocolVersion\"), func(data interface{}) {\n\t\te := b.FirmwareQuery()\n\t\tif e != nil {\n\t\t\tb.setConnecting(false)\n\t\t\tconnectError <- e\n\t\t}\n\t})\n\n\tb.Once(b.Event(\"FirmwareQuery\"), func(data interface{}) {\n\t\te := b.CapabilitiesQuery()\n\t\tif e != nil {\n\t\t\tb.setConnecting(false)\n\t\t\tconnectError <- e\n\t\t}\n\t})\n\n\tb.Once(b.Event(\"CapabilityQuery\"), func(data interface{}) {\n\t\te := b.AnalogMappingQuery()\n\t\tif e != nil {\n\t\t\tb.setConnecting(false)\n\t\t\tconnectError <- e\n\t\t}\n\t})\n\n\tb.Once(b.Event(\"AnalogMappingQuery\"), func(data interface{}) {\n\t\tb.ReportDigital(0, 1)\n\t\tb.ReportDigital(1, 1)\n\t\tb.setConnecting(false)\n\t\tb.setConnected(true)\n\t\tconnected <- true\n\t})\n\n\t\/\/ start it off...\n\tb.setConnecting(true)\n\tb.ProtocolVersionQuery()\n\n\tgo func() {\n\t\tfor {\n\t\t\tif !b.Connecting() {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tif e := b.process(); e != nil {\n\t\t\t\tconnectError <- e\n\t\t\t\treturn\n\t\t\t}\n\t\t\ttime.Sleep(10 * time.Millisecond)\n\t\t}\n\t}()\n\n\tselect {\n\tcase <-connected:\n\tcase e := <-connectError:\n\t\treturn e\n\tcase <-time.After(b.ConnectTimeout):\n\t\treturn errors.New(\"unable to connect. Perhaps you need to flash your Arduino with Firmata?\")\n\t}\n\n\tgo func() {\n\t\tfor {\n\t\t\tif !b.Connected() {\n\t\t\t\tbreak\n\t\t\t}\n\n\t\t\tif err := b.process(); err != nil {\n\t\t\t\tb.Publish(b.Event(\"Error\"), err)\n\t\t\t}\n\t\t}\n\t}()\n\n\treturn\n}","label":0}
{"text":"def register_builtin_message_types():\n    \"\"\"\"\"\"\n    from .plain import PlainTextMessage\n    from .email import EmailTextMessage, EmailHtmlMessage\n    register_message_types(PlainTextMessage, EmailTextMessage, EmailHtmlMessage)","label":0}
{"text":"func NewFuncNode(name string, f Func) *FuncNode {\n\treturn &FuncNode{Name: name, F: f}\n}","label":0}
{"text":"def make_json_response(rv):\n    \n    # Tuple of (response, status, headers)\n    rv, status, headers = normalize_response_value(rv)\n\n    # JsonResponse\n    if isinstance(rv, JsonResponse):\n        return rv\n\n    # Data\n    return JsonResponse(rv, status, headers)","label":0}
{"text":"public static Geometry computeBoundingCircle(Geometry geometry) {\n        if (geometry == null) {\n            return null;\n        }\n        return new MinimumBoundingCircle(geometry).getCircle();\n    }","label":0}
{"text":"function (name, HandlerClass) {\n\t\tif (!HandlerClass) { return this; }\n\n\t\tvar handler = this[name] = new HandlerClass(this);\n\n\t\tthis._handlers.push(handler);\n\n\t\tif (this.options[name]) {\n\t\t\thandler.enable();\n\t\t}\n\n\t\treturn this;\n\t}","label":0}
{"text":"public function delete($tag, $params = array(), $options = array())\n    {\n        $path = sprintf(\"\/tags\/%s\", $tag);\n        return $this->client->delete($path, $params, $options);\n    }","label":0}
{"text":"public function validate($value)\n    {\n        $result = false;\n\n        if (is_string($value) && strlen($value))\n        {\n            if ($value[0] == '\/' || $value[0] == '\\\\'\n                || (strlen($value) > 3 && ctype_alpha($value[0])\n                    && $value[1] == ':'\n                    && ($value[2] == '\\\\' || $value[2] == '\/')\n                )\n                || null !== parse_url($value, PHP_URL_SCHEME)\n            ) {\n                $result = true;\n            }\n        }\n\n        return $result;\n    }","label":0}
{"text":"private synchronized List<Entry> getEntriesList( DirectoryEntry directory )\n    {\n        List<Entry> entries = contents.get( directory );\n        if ( entries == null )\n        {\n            entries = new ArrayList<Entry>();\n            contents.put( directory, entries );\n        }\n        return entries;\n    }","label":0}
{"text":"protected function assertOptionName($name)\n\t{\n\t\tif ( !isset($this->options[$name]) ) {\n\t\t\tthrow new ConfigException(\n\t\t\t\t'Option \"' . $name . '\" doesn\\'t exist in configuration',\n\t\t\t\tConfigException::TYPE_NOT_FOUND\n\t\t\t);\n\t\t}\n\t}","label":0}
{"text":"def add(self, value_id, name, value_class):\n        \n        item = value_class(\n            name,\n            value_id=self.controller.component_id + \".\" + value_id,\n            is_input=self.is_input,\n            index=self.count,\n            spine = self.controller.spine\n        )\n\n        #if self._inject and self.controller:\n        #    setattr(self.controller, value_id, item)\n        #setattr(self, value_id, item)\n\n        self.count += 1\n        self._items[value_id] = item\n        if self.is_input and self.controller:\n            item.add_observer(self.controller)\n        return item","label":0}
{"text":"@Override\n\tpublic void eUnset(int featureID) {\n\t\tswitch (featureID) {\n\t\t\tcase AfplibPackage.OBJECT_FUNCTION_SET_SPECIFICATION__OBJ_TYPE:\n\t\t\t\tsetObjType(OBJ_TYPE_EDEFAULT);\n\t\t\t\treturn;\n\t\t\tcase AfplibPackage.OBJECT_FUNCTION_SET_SPECIFICATION__ARCH_VRSN:\n\t\t\t\tsetArchVrsn(ARCH_VRSN_EDEFAULT);\n\t\t\t\treturn;\n\t\t\tcase AfplibPackage.OBJECT_FUNCTION_SET_SPECIFICATION__DCA_FN_SET:\n\t\t\t\tsetDCAFnSet(DCA_FN_SET_EDEFAULT);\n\t\t\t\treturn;\n\t\t\tcase AfplibPackage.OBJECT_FUNCTION_SET_SPECIFICATION__OCA_FN_SET:\n\t\t\t\tsetOCAFnSet(OCA_FN_SET_EDEFAULT);\n\t\t\t\treturn;\n\t\t}\n\t\tsuper.eUnset(featureID);\n\t}","label":0}
{"text":"public function build($dir, $quality, array $options = array())\n    {\n        \/\/ Alter default quality on demand\n        if (isset($options['quality'])) {\n            $quality = $options['quality'];\n        }\n\n        return new Thumb($dir, $options['dimensions'], $quality);\n    }","label":0}
{"text":"public function parseFile( $fileName, $innerPath )\n\t{\n\t\t$content\t\t= FS_File_Reader::load( $fileName );\n\t\tif( !Alg_Text_Unicoder::isUnicode( $content ) )\n\t\t\t$content\t\t= Alg_Text_Unicoder::convertToUnicode( $content );\n\n\n\t\t$lines\t\t\t= explode( \"\\n\", $content );\n\t\t$fileBlock\t\t= NULL;\n\t\t$openClass\t\t= FALSE;\n\t\t$function\t\t= NULL;\n\t\t$functionBody\t= array();\n\t\t$file\t\t\t= new ADT_PHP_File;\n\t\t$file->setBasename( basename( $fileName ) );\n\t\t$file->setPathname( substr( str_replace( \"\\\\\", \"\/\", $fileName ), strlen( $innerPath ) ) );\n\t\t$file->setUri( str_replace( \"\\\\\", \"\/\", $fileName ) );\n\t\n\t\t$level\t= 0;\n\t\t$class\t= NULL;\n\t\tdo\n\t\t{\n\t\t\t$line\t= trim( array_shift( $lines ) );\n#\t\t\tremark( ( $openClass ? \"I\" : \"O\" ).\" :: \".$level.\" :: \".$this->lineNumber.\" :: \".$line );\n\t\t\t$this->lineNumber ++;\n\t\t\tif( preg_match( \"@^(<\\?(php)?)|((php)?\\?>)$@\", $line ) )\n\t\t\t\tcontinue;\n\t\t\t\n\t\t\tif( preg_match( '@}$@', $line ) )\n\t\t\t\t$level--;\n\n\t\t\tif( $line == \"\/**\" && $level < 2 )\n\t\t\t{\n\t\t\t\t$list\t= array();\n\t\t\t\twhile( !preg_match( \"@\\*?\\*\/\\s*$@\", $line ) )\n\t\t\t\t{\n\t\t\t\t\t$list[]\t= $line;\n\t\t\t\t\t$line\t= trim( array_shift( $lines ) );\n\t\t\t\t\t$this->lineNumber ++;\n\t\t\t\t}\n\t\t\t\tarray_unshift( $lines, $line );\n\t\t\t\t$this->lineNumber --;\n\t\t\t\tif( $list )\n\t\t\t\t{\n\t\t\t\t\t$this->openBlocks[]\t= $this->parseDocBlock( $list );\n\t\t\t\t\tif( !$fileBlock && !$class )\n\t\t\t\t\t{\n\t\t\t\t\t\t$fileBlock\t= array_shift( $this->openBlocks );\n\t\t\t\t\t\tarray_unshift( $this->openBlocks, $fileBlock );\n\t\t\t\t\t\t$this->decorateCodeDataWithDocData( $file, $fileBlock );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif( !$openClass )\n\t\t\t{\n\t\t\t\tif( preg_match( $this->regexClass, $line, $matches ) )\n\t\t\t\t{\n\t\t\t\t\t$parts\t= array_slice( $matches, -1 );\n\t\t\t\t\twhile( !trim( array_pop( $parts ) ) )\n\t\t\t\t\t\tarray_pop( $matches );\n\t\t\t\t\t$class\t= $this->parseClassOrInterface( $file, $matches );\n\t\t\t\t\t$openClass\t= TRUE;\n\t\t\t\t}\n\t\t\t\telse if( preg_match( $this->regexMethod, $line, $matches ) )\n\t\t\t\t{\n\t\t\t\t\t$openClass\t= FALSE;\n\t\t\t\t\t$function\t= $this->parseFunction( $file, $matches );\n\t\t\t\t\t$file->setFunction( $function );\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif( preg_match( $this->regexClass, $line, $matches ) )\n\t\t\t\t{\n\t\t\t\t\tif( $class instanceof ADT_PHP_Class )\n\t\t\t\t\t\t$file->addClass( $class );\n\t\t\t\t\telse if( $class instanceof ADT_PHP_Interface )\n\t\t\t\t\t\t$file->addInterface( $class );\n\t\t\t\t\tarray_unshift( $lines, $line );\n\t\t\t\t\t$this->lineNumber --;\n\t\t\t\t\t$openClass\t= FALSE;\n\t\t\t\t\t$level\t\t= 1;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif( preg_match( $this->regexMethod, $line, $matches ) )\n\t\t\t\t{\n\t\t\t\t\t$method\t\t= $this->parseMethod( $class, $matches );\n\t\t\t\t\t$function\t= $matches[6];\n\t\t\t\t\t$class->setMethod( $method );\n\t\t\t\t}\n\t\t\t\telse if( $level <= 1 )\n\t\t\t\t{\n\t\t\t\t\tif( preg_match( $this->regexDocVariable, $line, $matches ) )\n\t\t\t\t\t{\n\t\t\t\t\t\tif( $openClass && $class )\n\t\t\t\t\t\t\t$this->varBlocks[$class->getName().\"::\".$matches[2]]\t= $this->parseDocMember( $matches );\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\t$this->varBlocks[$matches[2]]\t= $this->parseDocVariable( $matches );\n\t\t\t\t\t}\n\t\t\t\t\telse if( preg_match( $this->regexVariable, $line, $matches ) )\n\t\t\t\t\t{\n\t\t\t\t\t\t$name\t\t= $matches[4];\n\t\t\t\t\t\tif( $openClass && $class )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$key\t\t= $class->getName().\"::\".$name;\n\t\t\t\t\t\t\t$varBlock\t= isset( $this->varBlocks[$key] ) ? $this->varBlocks[$key] : NULL;\n\t\t\t\t\t\t\t$variable\t= $this->parseMember( $class, $matches, $varBlock ); \n\t\t\t\t\t\t\t$class->setMember( $variable );\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tremark( \"Parser Error: found var after class -> not handled yet\" );\n\/*\t\t\t\t\t\t\t$key\t\t= $name;\n\t\t\t\t\t\t\t$varBlock\t= isset( $this->varBlocks[$key] ) ? $this->varBlocks[$key] : NULL;\n\t\t\t\t\t\t\t$variable\t= $this->parseMember( $matches, $varBlock );*\/\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if( $level > 1 && $function )\n\t\t\t\t{\n\t\t\t\t\t$functionBody[$function][]\t= $line;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif( preg_match( '@{$@', $line ) )\n\t\t\t\t$level++;\n\t\t\tif( $level < 1 && !preg_match( $this->regexClass, $line, $matches ) )\n\t\t\t\t$openClass\t= FALSE;\n\t\t}\n\t\twhile( $lines );\n\n\t\t$file->setSourceCode( $content );\n\t\tif( $class )\n\t\t{\n\t\t\tforeach( $class->getMethods() as $methodName => $method )\n\t\t\t\tif( isset( $functionBody[$methodName] ) )\n\t\t\t\t\t$method->setSourceCode( $functionBody[$methodName] );\n\t\t\tif( $class instanceof ADT_PHP_Class )\n\t\t\t\t$file->addClass( $class );\n\t\t\telse if( $class instanceof ADT_PHP_Interface )\n\t\t\t\t$file->addInterface( $class );\n\t\t}\n\t\treturn $file;\n\t}","label":0}
{"text":"func (s *Selection) NextMatcher(m Matcher) *Selection {\n\treturn filterAndPush(s, getSiblingNodes(s.Nodes, siblingNext, nil, nil), m)\n}","label":0}
{"text":"private void initGridLines() {\n        gridLines = new Line[base.getDimension() - 1][linesSlicing.length];\n\n        int i2 = 0;\n\n        for (int i = 0; i < base.getDimension() - 1; i++) {\n            if (i2 == index) {\n                i2++;\n            }\n\n            for (int j = 0; j < gridLines[i].length; j++) {\n                double[] originBase = new double[base.getDimension()];\n                double[] endBase = new double[base.getDimension()];\n\n                System.arraycopy(origin, 0, originBase, 0, base.getDimension());\n                System.arraycopy(origin, 0, endBase, 0, base.getDimension());\n\n                endBase[i2] = base.getCoordinateSpace()[i2 + 1][i2];\n                originBase[index] = linesSlicing[j];\n                endBase[index] = linesSlicing[j];\n\n                if (j == 0 || j == gridLines[i].length - 1) {\n                    gridLines[i][j] = new Line(originBase, endBase);\n                } else {\n                    gridLines[i][j] = new Line(Line.Style.DOT, Color.lightGray, originBase, endBase);\n                }\n            }\n            i2++;\n        }\n    }","label":0}
{"text":"def rewrite_paths(self, local_path, remote_path):\n        \n        self.__rewrite_command_line(local_path, remote_path)\n        self.__rewrite_config_files(local_path, remote_path)","label":0}
{"text":"func (s *CreateConnectorDefinitionVersionInput) SetAmznClientToken(v string) *CreateConnectorDefinitionVersionInput {\n\ts.AmznClientToken = &v\n\treturn s\n}","label":0}
{"text":"protected void compareRecognizedXMLSchemaInstanceAttribute(Attr control,\n                                                               Attr test,\n                                                               DifferenceListener listener)\n        throws DifferenceFoundException {\n        Attr nonNullNode = control != null ? control : test;\n        Difference d = \n            XMLConstants.W3C_XML_SCHEMA_INSTANCE_SCHEMA_LOCATION_ATTR\n            .equals(nonNullNode.getLocalName())\n            ? SCHEMA_LOCATION : NO_NAMESPACE_SCHEMA_LOCATION;\n\n        if (control != null) {\n            controlTracker.visited(control);\n        }\n        if (test != null) {\n            testTracker.visited(test);\n        }\n        \n        compare(control != null ? control.getValue() : ATTRIBUTE_ABSENT,\n                test != null ? test.getValue() : ATTRIBUTE_ABSENT,\n                control, test, listener, d);\n    }","label":0}
{"text":"public function export_for_template(renderer_base $output) {\n        global $USER, $OUTPUT;\n\n        $data = new \\stdClass();\n\n        if (!isset($this->config->display_picture) || $this->config->display_picture == 1) {\n            $data->userpicture = $OUTPUT->user_picture($USER, array('class' => 'userpicture'));\n        }\n\n        $data->userfullname = fullname($USER);\n\n        if (!isset($this->config->display_country) || $this->config->display_country == 1) {\n            $countries = get_string_manager()->get_list_of_countries(true);\n            if (isset($countries[$USER->country])) {\n                $data->usercountry = $countries[$USER->country];\n            }\n        }\n\n        if (!isset($this->config->display_city) || $this->config->display_city == 1) {\n            $data->usercity = $USER->city;\n        }\n\n        if (!isset($this->config->display_email) || $this->config->display_email == 1) {\n            $data->useremail = obfuscate_mailto($USER->email, '');\n        }\n\n        if (!empty($this->config->display_icq) && !empty($USER->icq)) {\n            $data->usericq = s($USER->icq);\n        }\n\n        if (!empty($this->config->display_skype) && !empty($USER->skype)) {\n            $data->userskype = s($USER->skype);\n        }\n\n        if (!empty($this->config->display_yahoo) && !empty($USER->yahoo)) {\n            $data->useryahoo = s($USER->yahoo);\n        }\n\n        if (!empty($this->config->display_aim) && !empty($USER->aim)) {\n            $data->useraim = s($USER->aim);\n        }\n\n        if (!empty($this->config->display_msn) && !empty($USER->msn)) {\n            $data->usermsn = s($USER->msn);\n        }\n\n        if (!empty($this->config->display_phone1) && !empty($USER->phone1)) {\n            $data->userphone1 = s($USER->phone1);\n        }\n\n        if (!empty($this->config->display_phone2) && !empty($USER->phone2)) {\n            $data->userphone2 = s($USER->phone2);\n        }\n\n        if (!empty($this->config->display_institution) && !empty($USER->institution)) {\n            $data->userinstitution = format_string($USER->institution);\n        }\n\n        if (!empty($this->config->display_address) && !empty($USER->address)) {\n            $data->useraddress = format_string($USER->address);\n        }\n\n        if (!empty($this->config->display_firstaccess) && !empty($USER->firstaccess)) {\n            $data->userfirstaccess = userdate($USER->firstaccess);\n        }\n\n        if (!empty($this->config->display_lastaccess) && !empty($USER->lastaccess)) {\n            $data->userlastaccess = userdate($USER->lastaccess);\n        }\n\n        if (!empty($this->config->display_currentlogin) && !empty($USER->currentlogin)) {\n            $data->usercurrentlogin = userdate($USER->currentlogin);\n        }\n\n        if (!empty($this->config->display_lastip) && !empty($USER->lastip)) {\n            $data->userlastip = $USER->lastip;\n        }\n\n        return $data;\n    }","label":0}
{"text":"public function isMode( Configuration $configuration ) {\n\t\tif( $this->inServiceChecker->isInService($configuration) )\n\t\t\treturn false;\n\n\t\tif( $this->replaceUpgradeChecker->isReplaceUpgrade($configuration) )\n\t\t\treturn false;\n\n\t\treturn true;\n\t}","label":0}
{"text":"function replaceInFile (filename, regex, replacement) {\n    let contents = fs.readFileSync (filename, 'utf8')\n    const parts = contents.split (regex)\n    const newContents = parts[0] + replacement + parts[1]\n    fs.truncateSync (filename)\n    fs.writeFileSync (filename, newContents)\n}","label":0}
{"text":"private function _checkLocale()\n    {\n        if (!is_int($this->_country)\n            || !is_int($this->_language)\n            || !is_int($this->_currency)\n        ) {\n            throw new Klarna_InvalidLocaleException;\n        }\n    }","label":0}
{"text":"def decode_data(self, encoded):\n        '''\n        \n        '''\n        try:\n            identifier = None\n            data_format = 2\n            if len(encoded) > 8:\n                data_format = 4\n                identifier = encoded[8:]\n                encoded = encoded[:8]\n            decoded = bytearray(base64.b64decode(encoded, '-_'))\n            return {\n                'data_format': data_format,\n                'temperature': self._get_temperature(decoded),\n                'humidity': self._get_humidity(decoded),\n                'pressure': self._get_pressure(decoded),\n                'identifier': identifier\n            }\n        except:\n            log.exception('Encoded value: %s not valid', encoded)\n            return None","label":0}
{"text":"func (c *Conn) SetDeadline(t time.Time) error {\n\treturn c.p.SetDeadline(t)\n}","label":0}
{"text":"func (s *BulkService) Reset() {\n\ts.requests = make([]BulkableRequest, 0)\n\ts.sizeInBytes = 0\n\ts.sizeInBytesCursor = 0\n}","label":0}
{"text":"def _create_TX_node(self, bic=True):\n        \n        ED = dict()\n        ED['DrctDbtTxInfNode'] = ET.Element(\"DrctDbtTxInf\")\n        ED['PmtIdNode'] = ET.Element(\"PmtId\")\n        ED['EndToEndIdNode'] = ET.Element(\"EndToEndId\")\n        ED['InstdAmtNode'] = ET.Element(\"InstdAmt\")\n        ED['DrctDbtTxNode'] = ET.Element(\"DrctDbtTx\")\n        ED['MndtRltdInfNode'] = ET.Element(\"MndtRltdInf\")\n        ED['MndtIdNode'] = ET.Element(\"MndtId\")\n        ED['DtOfSgntrNode'] = ET.Element(\"DtOfSgntr\")\n        ED['DbtrAgtNode'] = ET.Element(\"DbtrAgt\")\n        ED['FinInstnId_DbtrAgt_Node'] = ET.Element(\"FinInstnId\")\n        if bic:\n            ED['BIC_DbtrAgt_Node'] = ET.Element(\"BIC\")\n        ED['DbtrNode'] = ET.Element(\"Dbtr\")\n        ED['Nm_Dbtr_Node'] = ET.Element(\"Nm\")\n        ED['DbtrAcctNode'] = ET.Element(\"DbtrAcct\")\n        ED['Id_DbtrAcct_Node'] = ET.Element(\"Id\")\n        ED['IBAN_DbtrAcct_Node'] = ET.Element(\"IBAN\")\n        ED['RmtInfNode'] = ET.Element(\"RmtInf\")\n        ED['UstrdNode'] = ET.Element(\"Ustrd\")\n        return ED","label":0}
{"text":"public function removeFile(GitUserInterface $user, FilePath $relativeFilePath, $commitMessage)\n    {\n        $this->assertCommitMessageExists($commitMessage);\n        $this->createLock($user, $relativeFilePath);\n        $this->gitService->removeAndCommit($user, $relativeFilePath, $commitMessage);\n        $this->removeLock($user, $relativeFilePath);\n    }","label":0}
{"text":"public void marshall(ImportCatalogToGlueRequest importCatalogToGlueRequest, ProtocolMarshaller protocolMarshaller) {\n\n        if (importCatalogToGlueRequest == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(importCatalogToGlueRequest.getCatalogId(), CATALOGID_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }","label":0}
{"text":"public function xml2array(\\SimpleXMLElement $xml)\n    {\n        $arr = array();\n        foreach ($xml as $element) {\n            $tag = $element->getName();\n            $e = get_object_vars($element);\n            if (!empty($e)) {\n                $arr[$tag][] = $element instanceof \\SimpleXMLElement ? $this->xml2array($element) : $e;\n            } else {\n                $arr[$tag] = trim($element);\n            }\n        }\n\n        return $arr;\n    }","label":0}
{"text":"protected function getListFieldValue()\n    {\n        $id = $this->getParam(0);\n\n        if (!isset($id)) {\n            return $this->field_value->getList(array('limit' => $this->getLimit()));\n        }\n\n        if ($this->getParam('field')) {\n            return $this->field_value->getList(array('field_id' => $id, 'limit' => $this->getLimit()));\n        }\n\n        if (!is_numeric($id)) {\n            $this->errorAndExit($this->text('Invalid argument'));\n        }\n\n        $result = $this->field_value->get($id);\n\n        if (empty($result)) {\n            $this->errorAndExit($this->text('Unexpected result'));\n        }\n\n        return array($result);\n    }","label":0}
{"text":"protected function addReview()\n    {\n        if (!$this->isError()) {\n            $id = $this->review->add($this->getSubmitted());\n            if (empty($id)) {\n                $this->errorAndExit($this->text('Unexpected result'));\n            }\n            $this->line($id);\n        }\n    }","label":0}
{"text":"public function prepareValidator(\\Asgard\\Validation\\ValidatorInterface $validator, array $locales=[]) {\n\t\t$this->getDefinition()->trigger('validation', [$this, $validator], function($chain, $entity, $validator) use($locales) {\n\t\t\t$messages = [];\n\n\t\t\tforeach($this->getDefinition()->properties() as $name=>$property) {\n\t\t\t\tif($locales && $property->get('i18n')) {\n\t\t\t\t\tforeach($locales as $locale) {\n\t\t\t\t\t\tif($property->get('many')) {\n\t\t\t\t\t\t\tif($this->get($name, null, false) instanceof ManyCollection) {\n\t\t\t\t\t\t\t\tforeach($this->get($name, null, false) as $k=>$v) {\n\t\t\t\t\t\t\t\t\t$propValidator = $validator->attribute($name.'.'.$locale.'.'.$k);\n\t\t\t\t\t\t\t\t\t$property->prepareValidator($propValidator);\n\t\t\t\t\t\t\t\t\t$propValidator->formatParameters(function(&$params) use($name) {\n\t\t\t\t\t\t\t\t\t\t$params['attribute'] = $name;\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t$propValidator->ruleMessages($property->getMessages());\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t$propValidator = $validator->attribute($name.'.'.$locale);\n\t\t\t\t\t\t\t$property->prepareValidator($propValidator);\n\t\t\t\t\t\t\t$propValidator->formatParameters(function(&$params) use($name) {\n\t\t\t\t\t\t\t\t$params['attribute'] = $name;\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t$propValidator->ruleMessages($property->getMessages());\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif($property->get('many')) {\n\t\t\t\t\t\tif($this->get($name, null, false) instanceof ManyCollection) {\n\t\t\t\t\t\t\tforeach($this->get($name, null, false) as $k=>$v) {\n\t\t\t\t\t\t\t\t$propValidator = $validator->attribute($name.'.'.$k);\n\t\t\t\t\t\t\t\t$property->prepareValidator($propValidator);\n\t\t\t\t\t\t\t\t$propValidator->formatParameters(function(&$params) use($name) {\n\t\t\t\t\t\t\t\t\t$params['attribute'] = $name;\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t$propValidator->ruleMessages($property->getMessages());\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\t$propValidator = $validator->attribute($name);\n\t\t\t\t\t\t$property->prepareValidator($propValidator);\n\t\t\t\t\t\t$propValidator->ruleMessages($property->getMessages());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$messages = array_merge($messages, $this->getDefinition()->messages());\n\t\t\t$validator->attributesMessages($messages);\n\n\t\t\t$validator->set('entity', $this);\n\t\t});\n\n\t\treturn $validator;\n\t}","label":0}
{"text":"def _braket_fmt(self, expr_type):\n        \"\"\"\"\"\"\n        if self._settings['unicode_sub_super']:\n            sub_sup_fmt = SubSupFmt\n        else:\n            sub_sup_fmt = SubSupFmtNoUni\n        mapping = {\n            'bra': {\n                True: sub_sup_fmt('\u27e8{label}|', sup='({space})'),\n                'subscript': sub_sup_fmt('\u27e8{label}|', sub='({space})'),\n                False:  sub_sup_fmt('\u27e8{label}|')},\n            'ket': {\n                True: sub_sup_fmt('|{label}\u27e9', sup='({space})'),\n                'subscript': sub_sup_fmt('|{label}\u27e9', sub='({space})'),\n                False:  sub_sup_fmt('|{label}\u27e9')},\n            'ketbra': {\n                True: sub_sup_fmt('|{label_i}\u27e9\u27e8{label_j}|', sup='({space})'),\n                'subscript': sub_sup_fmt(\n                    '|{label_i}\u27e9\u27e8{label_j}|', sub='({space})'),\n                False:  sub_sup_fmt('|{label_i}\u27e9\u27e8{label_j}|')},\n            'braket': {\n                True: sub_sup_fmt('\u27e8{label_i}|{label_j}\u27e9', sup='({space})'),\n                'subscript': sub_sup_fmt(\n                    '\u27e8{label_i}|{label_j}\u27e9', sub='({space})'),\n                False:  sub_sup_fmt('\u27e8{label_i}|{label_j}\u27e9')},\n        }\n        hs_setting = bool(self._settings['show_hs_label'])\n        if self._settings['show_hs_label'] == 'subscript':\n            hs_setting = 'subscript'\n        return mapping[expr_type][hs_setting]","label":0}
{"text":"public function invokeWithin($fn, $args = array())\n    {\n        $this->invocation_context->activate();\n\n        $this->invocation_context->push($this);\n        try {\n            $result = call_user_func_array($fn, $args);\n            $this->invocation_context->pop();\n            $this->invocation_context->deactivate();\n            return $result;\n        } catch (\\Exception $e) {\n            $this->invocation_context->pop();\n            $this->invocation_context->deactivate();\n            throw $e;\n        }\n    }","label":0}
{"text":"protected void writeObject(Object o)\n\t{\n\t\tif (o == null)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\tgetPersistenceDelegate(o.getClass()).writeObject(o, this);\n\t}","label":0}
{"text":"public function put($key, $value, $minutes) {\n        $this->cache[$key] = [\n            'value' => $value,\n            'ttl'   => $this->getNow() + ($minutes * 60),\n        ];\n    }","label":0}
{"text":"public static function getmoisanneemini($mmaaaa, $format = 'mm\/aaaa', $separator = ' ')\n    {\n        $str = '';\n        switch ($format) {\n            case 'aaaamm':\n                $str = self::getmoismini(substr($mmaaaa, 4, 2)) . $separator . substr($mmaaaa, 0, 4);\n                break;\n            case 'mmaaaa':\n                $str = self::getmoismini(substr($mmaaaa, 0, 2)) . $separator . substr($mmaaaa, 2);\n                break;\n            case 'mm\/aaaa':\n                $date = explode('\/', $mmaaaa);\n                if ($date) {\n                    $str = self::getmoismini($date[0]) . $separator . $date[1];\n                }\n                break;\n        }\n        \n        return $str;\n    }","label":0}
{"text":"def extract_selector_info(sel):\n    \"\"\"\"\"\"\n    #  walk the parsed_tree, looking for pseudoClass selectors, check names\n    # add in steps and\/or deferred extras\n    steps, extras = _extract_sel_info(sel.parsed_tree)\n    steps = sorted(set(steps))\n    extras = sorted(set(extras))\n    if len(steps) == 0:\n        steps = ['default']\n    return (steps, extras)","label":0}
{"text":"def _safe_match_date_and_datetime(graphql_type, expected_python_types, value):\n    \"\"\"\"\"\"\n    # Python datetime.datetime is a subclass of datetime.date,\n    # but in this case, the two are not interchangeable.\n    # Rather than using isinstance, we will therefore check for exact type equality.\n    value_type = type(value)\n    if not any(value_type == x for x in expected_python_types):\n        raise GraphQLInvalidArgumentError(u'Expected value to be exactly one of '\n                                          u'python types {}, but was {}: '\n                                          u'{}'.format(expected_python_types, value_type, value))\n\n    # The serialize() method of GraphQLDate and GraphQLDateTime produces the correct\n    # ISO-8601 format that MATCH expects. We then simply represent it as a regular string.\n    try:\n        serialized_value = graphql_type.serialize(value)\n    except ValueError as e:\n        raise GraphQLInvalidArgumentError(e)\n\n    return _safe_match_string(serialized_value)","label":0}
{"text":"func (c *ChainConfig) GasTable(num *big.Int) GasTable {\n\tif num == nil {\n\t\treturn GasTableHomestead\n\t}\n\tswitch {\n\tcase c.IsConstantinople(num):\n\t\treturn GasTableConstantinople\n\tcase c.IsEIP158(num):\n\t\treturn GasTableEIP158\n\tcase c.IsEIP150(num):\n\t\treturn GasTableEIP150\n\tdefault:\n\t\treturn GasTableHomestead\n\t}\n}","label":0}
{"text":"def rpc_call(self, request, method=None, params=None, **kwargs):\n        \n        args = []\n        kwargs = dict()\n        if isinstance(params, dict):\n            kwargs.update(params)\n        else:\n            args = list(as_tuple(params))\n\n        method_key = \"{0}.{1}\".format(self.scheme_name, method)\n        if method_key not in self.methods:\n            raise AssertionError(\"Unknown method: {0}\".format(method))\n        method = self.methods[method_key]\n\n        if hasattr(method, 'request'):\n            args.insert(0, request)\n\n        return method(*args, **kwargs)","label":0}
{"text":"function recalculateAllDynamicProperties(entity, properties) {\n  \/\/ Find all dynamic properties\n  _lodash2.default.forEach(properties, function (propertyConfiguration, propertyName) {\n    if (isDynamicProperty(propertyConfiguration)) {\n      \/\/ Recalculate dynamic property value\n      var dynamicValue = propertyConfiguration.dynamic(entity);\n      \/\/ Set updated dynamic value (wrap into EnTTBypassEverythingValue to bypass read-only restriction)\n      entity[propertyName] = new _properties.EnTTBypassEverythingValue(dynamicValue);\n    }\n  });\n}","label":0}
{"text":"protected function getByName($project_name) {\n\n        if (!strstr($project_name, \":\")) {\n            throw (new \\Exception(\"You must search for project with namespace: prefix\"));\n        }\n        $parts = explode(':', $project_name);\n\n        $projects = $this->_client->get('\/projects\/search\/' . urlencode($parts[1]));\n\n        $found_project = false;\n        foreach ($projects as $project) {\n            if (preg_match(\"~^\" . $parts[0] . \"$~\", $project->namespace->name)) {\n                return $project;\n            }\n        }\n\n        if (!$found_project) {\n            return false;\n        }\n    }","label":0}
{"text":"func CapFromCenterHeight(center Point, height float64) Cap {\n\treturn CapFromCenterChordAngle(center, s1.ChordAngleFromSquaredLength(2*height))\n}","label":0}
{"text":"def get_extra_fields(self, model, fields):\n        \"\"\"\"\"\"\n\n        def revert_url(self):\n            \"\"\"URL for this change in the default admin site.\"\"\"\n            opts = model._meta\n            app_label, model_name = opts.app_label, opts.model_name\n            return reverse(\n                \"%s:%s_%s_simple_history\" % (admin.site.name, app_label, model_name),\n                args=[getattr(self, opts.pk.attname), self.history_id],\n            )\n\n        def get_instance(self):\n            attrs = {\n                field.attname: getattr(self, field.attname) for field in fields.values()\n            }\n            if self._history_excluded_fields:\n                excluded_attnames = [\n                    model._meta.get_field(field).attname\n                    for field in self._history_excluded_fields\n                ]\n                values = (\n                    model.objects.filter(pk=getattr(self, model._meta.pk.attname))\n                    .values(*excluded_attnames)\n                    .get()\n                )\n                attrs.update(values)\n            return model(**attrs)\n\n        def get_next_record(self):\n            \"\"\"\n            Get the next history record for the instance. `None` if last.\n            \"\"\"\n            history = utils.get_history_manager_for_model(self.instance)\n            return (\n                history.filter(Q(history_date__gt=self.history_date))\n                .order_by(\"history_date\")\n                .first()\n            )\n\n        def get_prev_record(self):\n            \"\"\"\n            Get the previous history record for the instance. `None` if first.\n            \"\"\"\n            history = utils.get_history_manager_for_model(self.instance)\n            return (\n                history.filter(Q(history_date__lt=self.history_date))\n                .order_by(\"history_date\")\n                .last()\n            )\n\n        extra_fields = {\n            \"history_id\": self._get_history_id_field(),\n            \"history_date\": models.DateTimeField(),\n            \"history_change_reason\": self._get_history_change_reason_field(),\n            \"history_type\": models.CharField(\n                max_length=1,\n                choices=((\"+\", _(\"Created\")), (\"~\", _(\"Changed\")), (\"-\", _(\"Deleted\"))),\n            ),\n            \"history_object\": HistoricalObjectDescriptor(\n                model, self.fields_included(model)\n            ),\n            \"instance\": property(get_instance),\n            \"instance_type\": model,\n            \"next_record\": property(get_next_record),\n            \"prev_record\": property(get_prev_record),\n            \"revert_url\": revert_url,\n            \"__str__\": lambda self: \"{} as of {}\".format(\n                self.history_object, self.history_date\n            ),\n        }\n\n        extra_fields.update(self._get_history_related_field(model))\n        extra_fields.update(self._get_history_user_fields())\n\n        return extra_fields","label":0}
{"text":"protected void removeTargetListeners (Component comp)\n    {\n        comp.removeMouseListener(_targetListener);\n        comp.removeMouseMotionListener(_targetListener);\n        if (comp instanceof Container) { \/\/ again, always true for JComp...\n            Container cont = (Container) comp;\n            cont.removeContainerListener(_childListener);\n            for (int ii=0, nn=cont.getComponentCount(); ii < nn; ii++) {\n                removeTargetListeners(cont.getComponent(ii));\n            }\n        }\n    }","label":0}
{"text":"async def read_message(self) -> Optional[Data]:\n        \n        frame = await self.read_data_frame(max_size=self.max_size)\n\n        # A close frame was received.\n        if frame is None:\n            return None\n\n        if frame.opcode == OP_TEXT:\n            text = True\n        elif frame.opcode == OP_BINARY:\n            text = False\n        else:  # frame.opcode == OP_CONT\n            raise WebSocketProtocolError(\"Unexpected opcode\")\n\n        # Shortcut for the common case - no fragmentation\n        if frame.fin:\n            return frame.data.decode(\"utf-8\") if text else frame.data\n\n        # 5.4. Fragmentation\n        chunks: List[Data] = []\n        max_size = self.max_size\n        if text:\n            decoder_factory = codecs.getincrementaldecoder(\"utf-8\")\n            # https:\/\/github.com\/python\/typeshed\/pull\/2752\n            decoder = decoder_factory(errors=\"strict\")  # type: ignore\n            if max_size is None:\n\n                def append(frame: Frame) -> None:\n                    nonlocal chunks\n                    chunks.append(decoder.decode(frame.data, frame.fin))\n\n            else:\n\n                def append(frame: Frame) -> None:\n                    nonlocal chunks, max_size\n                    chunks.append(decoder.decode(frame.data, frame.fin))\n                    max_size -= len(frame.data)\n\n        else:\n            if max_size is None:\n\n                def append(frame: Frame) -> None:\n                    nonlocal chunks\n                    chunks.append(frame.data)\n\n            else:\n\n                def append(frame: Frame) -> None:\n                    nonlocal chunks, max_size\n                    chunks.append(frame.data)\n                    max_size -= len(frame.data)\n\n        append(frame)\n\n        while not frame.fin:\n            frame = await self.read_data_frame(max_size=max_size)\n            if frame is None:\n                raise WebSocketProtocolError(\"Incomplete fragmented message\")\n            if frame.opcode != OP_CONT:\n                raise WebSocketProtocolError(\"Unexpected opcode\")\n            append(frame)\n\n        # mypy cannot figure out that chunks have the proper type.\n        return (\"\" if text else b\"\").join(chunks)","label":0}
{"text":"public function boot()\n    {\n        if ( ! $this->app->routesAreCached()) {\n            require __DIR__ . '\/routes.php';\n        }\n\n        $this->publishes([\n            __DIR__ . '\/..\/config\/config.php' => config_path('laravelimage.php'),\n        ]);\n\n        $this->registerBladeExtensions();\n    }","label":0}
{"text":"private function loadStyleSheetAsset($css){\n\n        $imageRe = \"\/url\\\\s*\\\\(['|\\\"]?([^)]*\\.(png|jpg|jpeg|gif|svg))['|\\\"]?\\\\)\/mi\";\n        $importRe = \"\/@import\\\\s*(url\\\\s*\\\\()?['\\\"]?([^;]*)['\\\"]\/mi\";\n        $fontFaceRe = \"\/@font-face\\\\s*\\\\{(.*)?\\\\}\/mi\";\n        $fontRe = \"\/url\\\\s*\\\\(['|\\\"]?([^)'|\\\"]*)['|\\\"]?\\\\)\/i\";\n\n        \/\/extract images\n        preg_match_all($imageRe, $css, $matches);\n        if(isset($matches[1])){\n            foreach($matches[1] as $match){\n                $this->addAsset('img', $match);\n            }\n        }\n\n        \/\/extract @import\n        preg_match_all($importRe, $css, $matches);\n        if(isset($matches[2])){\n            foreach($matches[2] as $match){\n                $this->addAsset('css', $match);\n            }\n        }\n\n        \/\/extract fonts\n        preg_match_all($fontFaceRe, $css, $matches);\n        if(isset($matches[1])){\n            foreach($matches[1] as $faceMatch){\n                preg_match_all($fontRe, $faceMatch, $fontMatches);\n                if(isset($fontMatches[1])){\n                    foreach($fontMatches[1] as $fontMatch){\n                        $this->addAsset('font', $fontMatch);\n                    }\n                }\n            }\n        }\n    }","label":0}
{"text":"def init():\n    \"\"\"\"\"\"\n    global __dev, __cfg_descr\n    devices = get_dfu_devices(idVendor=__VID, idProduct=__PID)\n    if not devices:\n        raise ValueError('No DFU device found')\n    if len(devices) > 1:\n        raise ValueError(\"Multiple DFU devices found\")\n    __dev = devices[0]\n    __dev.set_configuration()\n\n    # Claim DFU interface\n    usb.util.claim_interface(__dev, __DFU_INTERFACE)\n\n    # Find the DFU configuration descriptor, either in the device or interfaces\n    __cfg_descr = None\n    for cfg in __dev.configurations():\n        __cfg_descr = find_dfu_cfg_descr(cfg.extra_descriptors)\n        if __cfg_descr:\n            break\n        for itf in cfg.interfaces():\n            __cfg_descr = find_dfu_cfg_descr(itf.extra_descriptors)\n            if __cfg_descr:\n                break\n\n    # Get device into idle state\n    for attempt in range(4):\n        status = get_status()\n        if status == __DFU_STATE_DFU_IDLE:\n            break\n        elif (status == __DFU_STATE_DFU_DOWNLOAD_IDLE\n            or status == __DFU_STATE_DFU_UPLOAD_IDLE):\n            abort_request()\n        else:\n            clr_status()","label":0}
{"text":"func (s *ListRobotApplicationsInput) SetNextToken(v string) *ListRobotApplicationsInput {\n\ts.NextToken = &v\n\treturn s\n}","label":0}
{"text":"func (k *tsmBatchKeyIterator) Next() bool {\nRETRY:\n\t\/\/ Any merged blocks pending?\n\tif len(k.merged) > 0 {\n\t\tk.merged = k.merged[1:]\n\t\tif len(k.merged) > 0 {\n\t\t\treturn true\n\t\t}\n\t}\n\n\t\/\/ Any merged values pending?\n\tif k.hasMergedValues() {\n\t\tk.merge()\n\t\tif len(k.merged) > 0 || k.hasMergedValues() {\n\t\t\treturn true\n\t\t}\n\t}\n\n\t\/\/ If we still have blocks from the last read, merge them\n\tif len(k.blocks) > 0 {\n\t\tk.merge()\n\t\tif len(k.merged) > 0 || k.hasMergedValues() {\n\t\t\treturn true\n\t\t}\n\t}\n\n\t\/\/ Read the next block from each TSM iterator\n\tfor i, v := range k.buf {\n\t\tif len(v) != 0 {\n\t\t\tcontinue\n\t\t}\n\n\t\titer := k.iterators[i]\n\t\tif iter.Next() {\n\t\t\tkey, minTime, maxTime, typ, _, b, err := iter.Read()\n\t\t\tif err != nil {\n\t\t\t\tk.err = err\n\t\t\t}\n\n\t\t\tvar blk *block\n\t\t\tif cap(k.buf[i]) > len(k.buf[i]) {\n\t\t\t\tk.buf[i] = k.buf[i][:len(k.buf[i])+1]\n\t\t\t\tblk = k.buf[i][len(k.buf[i])-1]\n\t\t\t\tif blk == nil {\n\t\t\t\t\tblk = &block{}\n\t\t\t\t\tk.buf[i][len(k.buf[i])-1] = blk\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tblk = &block{}\n\t\t\t\tk.buf[i] = append(k.buf[i], blk)\n\t\t\t}\n\t\t\tblk.minTime = minTime\n\t\t\tblk.maxTime = maxTime\n\t\t\tblk.key = key\n\t\t\tblk.typ = typ\n\t\t\tblk.b = b\n\t\t\tblk.readMin = math.MaxInt64\n\t\t\tblk.readMax = math.MinInt64\n\n\t\t\t\/\/ This block may have ranges of time removed from it that would\n\t\t\t\/\/ reduce the block min and max time.\n\t\t\tblk.tombstones = iter.r.TombstoneRange(key, blk.tombstones[:0])\n\n\t\t\tblockKey := key\n\t\t\tfor bytes.Equal(iter.PeekNext(), blockKey) {\n\t\t\t\titer.Next()\n\t\t\t\tkey, minTime, maxTime, typ, _, b, err := iter.Read()\n\t\t\t\tif err != nil {\n\t\t\t\t\tk.err = err\n\t\t\t\t}\n\n\t\t\t\tvar blk *block\n\t\t\t\tif cap(k.buf[i]) > len(k.buf[i]) {\n\t\t\t\t\tk.buf[i] = k.buf[i][:len(k.buf[i])+1]\n\t\t\t\t\tblk = k.buf[i][len(k.buf[i])-1]\n\t\t\t\t\tif blk == nil {\n\t\t\t\t\t\tblk = &block{}\n\t\t\t\t\t\tk.buf[i][len(k.buf[i])-1] = blk\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tblk = &block{}\n\t\t\t\t\tk.buf[i] = append(k.buf[i], blk)\n\t\t\t\t}\n\n\t\t\t\tblk.minTime = minTime\n\t\t\t\tblk.maxTime = maxTime\n\t\t\t\tblk.key = key\n\t\t\t\tblk.typ = typ\n\t\t\t\tblk.b = b\n\t\t\t\tblk.readMin = math.MaxInt64\n\t\t\t\tblk.readMax = math.MinInt64\n\t\t\t\tblk.tombstones = iter.r.TombstoneRange(key, blk.tombstones[:0])\n\t\t\t}\n\t\t}\n\n\t\tif iter.Err() != nil {\n\t\t\tk.err = iter.Err()\n\t\t}\n\t}\n\n\t\/\/ Each reader could have a different key that it's currently at, need to find\n\t\/\/ the next smallest one to keep the sort ordering.\n\tvar minKey []byte\n\tvar minType byte\n\tfor _, b := range k.buf {\n\t\t\/\/ block could be nil if the iterator has been exhausted for that file\n\t\tif len(b) == 0 {\n\t\t\tcontinue\n\t\t}\n\t\tif len(minKey) == 0 || bytes.Compare(b[0].key, minKey) < 0 {\n\t\t\tminKey = b[0].key\n\t\t\tminType = b[0].typ\n\t\t}\n\t}\n\tk.key = minKey\n\tk.typ = minType\n\n\t\/\/ Now we need to find all blocks that match the min key so we can combine and dedupe\n\t\/\/ the blocks if necessary\n\tfor i, b := range k.buf {\n\t\tif len(b) == 0 {\n\t\t\tcontinue\n\t\t}\n\t\tif bytes.Equal(b[0].key, k.key) {\n\t\t\tk.blocks = append(k.blocks, b...)\n\t\t\tk.buf[i] = k.buf[i][:0]\n\t\t}\n\t}\n\n\tif len(k.blocks) == 0 {\n\t\treturn false\n\t}\n\n\tk.merge()\n\n\t\/\/ After merging all the values for this key, we might not have any.  (e.g. they were all deleted\n\t\/\/ through many tombstones).  In this case, move on to the next key instead of ending iteration.\n\tif len(k.merged) == 0 {\n\t\tgoto RETRY\n\t}\n\n\treturn len(k.merged) > 0\n}","label":0}
{"text":"def json_encode_default(obj):\n    '''\n    \n    '''\n    if isinstance(obj, (datetime, date)):\n        result = dt2ts(obj)\n    else:\n        result = json_encoder.default(obj)\n    return to_encoding(result)","label":0}
{"text":"public function getAttribute($attribute)\n    {\n        return !empty($this->attributes[$attribute]) ? $this->attributes[$attribute] : null;\n    }","label":0}
{"text":"public function initializeStructure()\n    {\n        $structure = [\n            'id' => $this->getId(),\n            'name' => $this->getName(),\n            'description' => $this->getDescription(),\n            'manualProgressionAllowed' => $this->manualProgressionAllowed,\n            'steps' => [],\n        ];\n\n        $this->setStructure(json_encode($structure));\n\n        return $this;\n    }","label":0}
{"text":"func ReturnSubs(sub Subs) {\n\tswitch s := sub.(type) {\n\tcase mSubs:\n\t\tfor k := range s {\n\t\t\tdelete(s, k)\n\t\t}\n\t\tmSubPool.Put(sub)\n\tcase *sSubs:\n\t\tsize := cap(s.s) - 2\n\t\tif size > 0 && size < poolSize+1 {\n\t\t\t\/\/ reset to empty\n\t\t\tfor i := range s.s {\n\t\t\t\ts.s[i] = Substitution{}\n\t\t\t}\n\n\t\t\ts.s = s.s[:size]\n\t\t\tsSubPool[size-1].Put(sub)\n\t\t}\n\t}\n}","label":0}
{"text":"func (in *TopologySpec) DeepCopyInto(out *TopologySpec) {\n\t*out = *in\n\tif in.Bastion != nil {\n\t\tin, out := &in.Bastion, &out.Bastion\n\t\t*out = new(BastionSpec)\n\t\t(*in).DeepCopyInto(*out)\n\t}\n\tif in.DNS != nil {\n\t\tin, out := &in.DNS, &out.DNS\n\t\t*out = new(DNSSpec)\n\t\t**out = **in\n\t}\n\treturn\n}","label":0}
{"text":"func (s *TrainingJob) SetTrainingStartTime(v time.Time) *TrainingJob {\n\ts.TrainingStartTime = &v\n\treturn s\n}","label":0}
{"text":"def post_setup_plugins(parser_result):\n    \n    if not isinstance(parser_result, dict):\n        parser_result = vars(parser_result)\n    plugins.run_post_inits(parser_result)","label":0}
{"text":"func Convert_kops_LyftVPCNetworkingSpec_To_v1alpha1_LyftVPCNetworkingSpec(in *kops.LyftVPCNetworkingSpec, out *LyftVPCNetworkingSpec, s conversion.Scope) error {\n\treturn autoConvert_kops_LyftVPCNetworkingSpec_To_v1alpha1_LyftVPCNetworkingSpec(in, out, s)\n}","label":0}
{"text":"func (s *ActionType) SetOutputArtifactDetails(v *ArtifactDetails) *ActionType {\n\ts.OutputArtifactDetails = v\n\treturn s\n}","label":0}
{"text":"@Nullable\n    protected final <T> T jsiiCall(final String method, final Class<T> returnType, @Nullable final Object... args) {\n        return JsiiObjectMapper.treeToValue(JsiiObject.engine.getClient()\n                                                                .callMethod(this.objRef,\n                                                                            method,\n                                                                            JsiiObjectMapper.valueToTree(args)),\n                                            returnType);\n    }","label":0}
{"text":"def chat(ws):\n    \n    lag_tolerance_secs = float(request.args.get(\"tolerance\", 0.1))\n    client = Client(ws, lag_tolerance_secs=lag_tolerance_secs)\n    client.subscribe(request.args.get(\"channel\"))\n    gevent.spawn(client.heartbeat)\n    client.publish()","label":0}
{"text":"public function admin_modal_bail( $item_id, $item_title, $field_args ) {\n\n\t\t$model_data = $this->build_dfv_field_item_data_recurse_item( $item_id, $item_title, $field_args );\n\t\t?>\n\t\t\t<script type=\"text\/javascript\">\n\t\t\t\twindow.parent.jQuery( window.parent ).trigger(\n\t\t\t\t\t'dfv:modal:update',\n\t\t\t\t\t<?php echo wp_json_encode( $model_data, JSON_HEX_TAG ); ?>\n\t\t\t\t);\n\t\t\t<\/script>\n\t\t<?php\n\n\t\tdie();\n\n\t}","label":0}
{"text":"private function isHeaderLine(string $line): bool\n    {\n        $matches = [];\n        if (preg_match('#^diff --git [a|b|c|i|w|o]\/(.*) [a|b|c|i|w|o]\/(.*)#', $line, $matches)) {\n            $this->appendCollectedFileAndChanges();\n            $this->currentOperation = File::OP_MODIFIED;\n            $this->currentFileName  = $matches[2];\n            return true;\n        }\n        return false;\n    }","label":0}
{"text":"def getStats(self):\n        \n        stats = protocol.ReadStats()\n        stats.aligned_read_count = self.getNumAlignedReads()\n        stats.unaligned_read_count = self.getNumUnalignedReads()\n        # TODO base_count requires iterating through all reads\n        return stats","label":0}
{"text":"public function asBinary() : string\n    {\n        static $wkbWriter;\n\n        if ($wkbWriter === null) {\n            $wkbWriter = new WKBWriter();\n        }\n\n        return $wkbWriter->write($this);\n    }","label":0}
{"text":"public static <A> Tuple7<A, A, A, A, A, A, A> fill(A a) {\n        return tuple(a, a, a, a, a, a, a);\n    }","label":0}
{"text":"public function reactivate(string $id, array $data, array $headers = [])\n    {\n        $url = $this->url('subscriptions\/%s\/reactivate', $id);\n\n        return $this->post($url, $data, $headers);\n    }","label":0}
{"text":"protected function generateIndex() {\n\n\t\t\/**\n\t\t\t*  Handle missing index.html. Solves https:\/\/github.com\/drupal-pattern-lab\/patternlab-php-core\/issues\/14\n\t\t\t*  Could also be used to re-add missing styleguidekit assets with a few edits?\n\t\t\t*\n\t\t\t*  1. @TODO: Figure out a better way to future-proof path resolution for styleguidekit `dist` folder\n\t\t\t*  2. Recusirively copy files from styleguidekit to publicDir via https:\/\/stackoverflow.com\/a\/7775949\n\t\t\t*  3. Make sure we only try to create new directories if they don't already exist\n\t\t\t*  4. Only copy files if they are missing (vs changed, etc)\n\t\t\t*\/\n\t\tif (!file_exists(Config::getOption(\"publicDir\").\"\/index.html\")) {\n\t\t\t$index = Console::getHumanReadablePath(Config::getOption(\"publicDir\")).DIRECTORY_SEPARATOR.\"index.html\";\n\t\t\tConsole::writeWarning($index . \" is missing. No biggie. Grabbing a fresh copy from your StyleguideKit...\");\n\n\t\t\t$baseDir = Config::getOption(\"baseDir\") . '\/vendor';\n\t\t\t$finder = new Finder();\n\n\t\t\t\/\/ Locate the current theme's styleguidekit assets via the patternlab-styleguidekit `type` in composer.json\n\t\t\t$finder->files()->name(\"composer.json\")->in($baseDir)->contains('patternlab-styleguidekit')->sortByName();\n\n\t\t\tforeach ($finder as $file) {\n\t\t\t\t$src = dirname($file->getRealPath()) . DIRECTORY_SEPARATOR . 'dist'; \/* [1] *\/\n\t\t\t\t$dest= Config::getOption(\"publicDir\");\n\n\t\t\t\tif (is_dir($src)){\n\n\t\t\t\t\tif(!is_dir($dest)) {\n\t\t\t\t\t\tmkdir($dest, 0755);\n\t        }\n\n\t        foreach ( \/* [2] *\/\n\t\t\t\t\t\t$iterator = new \\RecursiveIteratorIterator(\n\t\t\t\t\t\t\tnew \\RecursiveDirectoryIterator($src, \\RecursiveDirectoryIterator::SKIP_DOTS), \\RecursiveIteratorIterator::SELF_FIRST) as $item\n\t\t\t\t\t) {\n\t\t\t\t\t\tif ($item->isDir()) {\n\t\t\t\t\t\t\tif(!is_dir($dest . DIRECTORY_SEPARATOR . $iterator->getSubPathName())) { \/* [3] *\/\n\t\t\t\t\t\t\t\tmkdir($dest . DIRECTORY_SEPARATOR . $iterator->getSubPathName());\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif(!file_exists($dest . DIRECTORY_SEPARATOR . $iterator->getSubPathName())) { \/* [4] *\/\n\t\t\t\t\t\t\t\tcopy($item, $dest . DIRECTORY_SEPARATOR . $iterator->getSubPathName());\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t\/\/ set-up the dispatcher\n\t\t$dispatcherInstance = Dispatcher::getInstance();\n\n\t\t\/\/ note the start of the operation\n\t\t$dispatcherInstance->dispatch(\"builder.generateIndexStart\");\n\n\t\t\/\/ default var\n\t\t$dataDir = Config::getOption(\"publicDir\").\"\/styleguide\/data\";\n\n\t\t\/\/ double-check that the data directory exists\n\t\tif (!is_dir($dataDir)) {\n\t\t\tFileUtil::makeDir($dataDir);\n\t\t}\n\n\t\t$output = \"\";\n\n\t\t\/\/ load and write out the config options\n\t\t$config                         = array();\n\t\t$exposedOptions                 = Config::getOption(\"exposedOptions\");\n\t\tforeach ($exposedOptions as $exposedOption) {\n\t\t\t$config[$exposedOption]     = Config::getOption($exposedOption);\n\t\t}\n\t\t$output     .= \"var config = \".json_encode($config).\";\\n\";\n\n\t\t\/\/ load the ish Controls\n\t\t$ishControls     = array();\n\t\t$controlsToHide  = array();\n\t\t$ishControlsHide = Config::getOption(\"ishControlsHide\");\n\t\tif ($ishControlsHide) {\n\t\t\tforeach ($ishControlsHide as $controlToHide) {\n\t\t\t\t$controlsToHide[$controlToHide] = \"true\";\n\t\t\t}\n\t\t}\n\t\t$ishControls[\"ishControlsHide\"] = $controlsToHide;\n\t\t$output      .= \"var ishControls = \".json_encode($ishControls).\";\\n\";\n\n\t\t\/\/ load and write out the items for the navigation\n\t\t$niExporter   = new NavItemsExporter();\n\t\t$navItems     = $niExporter->run();\n\t\t$output      .= \"var navItems = \".json_encode($navItems).\";\\n\";\n\n\t\t\/\/ load and write out the items for the pattern paths\n\t\t$patternPaths = array();\n\t\t$ppdExporter  = new PatternPathDestsExporter();\n\t\t$patternPaths = $ppdExporter->run();\n\t\t$output      .= \"var patternPaths = \".json_encode($patternPaths).\";\\n\";\n\n\t\t\/\/ load and write out the items for the view all paths\n\t\t$viewAllPaths = array();\n\t\t$vapExporter  = new ViewAllPathsExporter();\n\t\t$viewAllPaths = $vapExporter->run($navItems);\n\t\t$output      .= \"var viewAllPaths = \".json_encode($viewAllPaths).\";\\n\";\n\n\t\t\/\/ gather plugin package information\n\t\t$packagesInfo = array();\n\t\t$componentDir = Config::getOption(\"componentDir\");\n\t\tif (!is_dir($componentDir)) {\n\t\t\tmkdir($componentDir);\n\t\t}\n\t\t$componentPackagesDir = $componentDir.\"\/packages\";\n\t\tif (!is_dir($componentDir.\"\/packages\")) {\n\t\t\tmkdir($componentDir.\"\/packages\");\n\t\t}\n\t\t$finder = new Finder();\n\t\t$finder->files()->name(\"*.json\")->in($componentPackagesDir);\n\t\t$finder->sortByName();\n\t\tforeach ($finder as $file) {\n\t\t\t$filename = $file->getFilename();\n\t\t\tif ($filename[0] != \"_\") {\n\t\t\t\t$javascriptPaths = array();\n\t\t\t\t$packageInfo = json_decode(file_get_contents($file->getPathname()),true);\n\t\t\t\tforeach ($packageInfo[\"templates\"] as $templateKey => $templatePath) {\n\t\t\t\t\t$templatePathFull = $componentDir.\"\/\".$packageInfo[\"name\"].\"\/\".$templatePath;\n\t\t\t\t\t$packageInfo[\"templates\"][$templateKey] = (file_exists($templatePathFull)) ? file_get_contents($templatePathFull) : \"\";\n\t\t\t\t}\n\t\t\t\tforeach ($packageInfo[\"javascripts\"] as $key => $javascriptPath) {\n\t\t\t\t\t$javascriptPaths[] = \"patternlab-components\/\".$packageInfo[\"name\"].\"\/\".$javascriptPath;\n\t\t\t\t}\n\t\t\t\t$packageInfo[\"javascripts\"] = $javascriptPaths;\n\t\t\t\t$packagesInfo[] = $packageInfo;\n\t\t\t}\n\t\t}\n\t\t$output .= \"var plugins = \".json_encode($packagesInfo).\";\";\n\n\t\t\/\/ write out the data\n\t\tfile_put_contents($dataDir.\"\/patternlab-data.js\",$output);\n\t\t\/\/ Structuring all the same data that went into `patternlab-data.js` and putting it into `patternlab-data.json` too\n\t\t$allPlData = array(\n\t\t\t'config' => $config,\n\t\t\t'ishControls' => $ishControls,\n\t\t\t'navItems' => $navItems,\n\t\t\t'patternPaths' => $patternPaths,\n\t\t\t'viewAllPaths' => $viewAllPaths,\n\t\t\t'plugins' => $packagesInfo,\n\t\t);\n\t\tfile_put_contents($dataDir.\"\/patternlab-data.json\", json_encode($allPlData));\n\n\t\t\/\/ note the end of the operation\n\t\t$dispatcherInstance->dispatch(\"builder.generateIndexEnd\");\n\n\t}","label":0}
{"text":"public function count(string $table, $wheres)\n    {\n        list($where, $bindings) = $this->handleWheres($wheres);\n        $sql = \"SELECT COUNT(*) AS total FROM {$table} WHERE {$where}\";\n\n        $result = $this->fetchObject($sql, $bindings);\n\n        return $result ? (int)$result->total : 0;\n    }","label":0}
{"text":"def as_dict(self):\n        \n        data = super(BaseEmail, self).as_dict()\n        data[\"Headers\"] = [{\"Name\": name, \"Value\": value} for name, value in data[\"Headers\"].items()]\n        for field in (\"To\", \"Cc\", \"Bcc\"):\n            if field in data:\n                data[field] = list_to_csv(data[field])\n        data[\"Attachments\"] = [prepare_attachments(attachment) for attachment in data[\"Attachments\"]]\n        return data","label":0}
{"text":"private function getZoneOptions(\\stdClass $zone)\n    {\n        $options = array(\n            'parameters' => array(\n                'class' => array(\n                    'type' => 'scalar',\n                    'options' => array('default' => 'row'),\n                ),\n            ),\n        );\n\n        if (true === property_exists($zone, 'accept')\n                && true === is_array($zone->accept)\n                && 0 < count($zone->accept)\n                && $zone->accept[0] != '') {\n            $options['accept'] = $zone->accept;\n\n            $func = function (&$item, $key) {\n                        $item = ('' == $item) ? null : 'BackBee\\ClassContent\\\\'.$item;\n                    };\n\n            array_walk($options['accept'], $func);\n        }\n\n        if (true === property_exists($zone, 'maxentry') && 0 < $zone->maxentry) {\n            $options['maxentry'] = $zone->maxentry;\n        }\n\n        return $options;\n    }","label":0}
{"text":"protected function generateAuthorizationCode()\n    {\n        $tokenLen = 40;\n        if (function_exists('random_bytes')) {\n            $randomData = random_bytes(100);\n        } elseif (function_exists('openssl_random_pseudo_bytes')) {\n            $randomData = openssl_random_pseudo_bytes(100);\n        } elseif (function_exists('mcrypt_create_iv')) {\n            $randomData = mcrypt_create_iv(100, MCRYPT_DEV_URANDOM);\n        } elseif (@file_exists('\/dev\/urandom')) { \/\/ Get 100 bytes of random data\n            $randomData = file_get_contents('\/dev\/urandom', false, null, 0, 100) . uniqid(mt_rand(), true);\n        } else {\n            $randomData = mt_rand() . mt_rand() . mt_rand() . mt_rand() . microtime(true) . uniqid(mt_rand(), true);\n        }\n\n        return substr(hash('sha512', $randomData), 0, $tokenLen);\n    }","label":0}
{"text":"private IRingSet recoverRingSystem(IAtomContainer mol) {\n        IRingSet ringSet = mol.getBuilder().newInstance(IRingSet.class);\n        for (Integer[] bondNumbers : listOfRings) {\n            IRing ring = mol.getBuilder().newInstance(IRing.class, bondNumbers.length);\n            for (int bondNumber : bondNumbers) {\n                IBond bond = mol.getBond(bondNumber);\n                ring.addBond(bond);\n                if (!ring.contains(bond.getBegin())) ring.addAtom(bond.getBegin());\n                if (!ring.contains(bond.getEnd())) ring.addAtom(bond.getEnd());\n            }\n            ringSet.addAtomContainer(ring);\n        }\n        return ringSet;\n    }","label":0}
{"text":"func (me *Logger) println(priority int, v ...interface{}) {\n\tif priority <= me.priority {\n\t\tme.setFullPrefix(priority)\n\t\tme.logger.Println(v...)\n\t}\n}","label":0}
{"text":"func (c *spanContext) parseBaggageInt64(key string) int64 {\n\tvar val int64\n\tc.ForeachBaggageItem(func(k, v string) bool {\n\t\tif strings.ToLower(k) == strings.ToLower(key) {\n\t\t\ti, err := strconv.ParseInt(v, 10, 64)\n\t\t\tif err != nil {\n\t\t\t\t\/\/ TODO handle err\n\t\t\t\treturn true\n\t\t\t}\n\t\t\tval = i\n\t\t\treturn false\n\t\t}\n\t\treturn true\n\t})\n\treturn val\n}","label":0}
{"text":"public function getPosibleTransitions(StatableInterface $object =  null, $objectIdentifier = 'id')\n    {\n        if (empty($object)) {\n            return;\n        }\n\n        $sm = $this->factory->get($object, $object->getStateGraph());\n\n        if (empty($sm)) {\n            return;\n        }\n\n        $tasks = array();\n        $accessor = PropertyAccess::createPropertyAccessor();\n\n        foreach ($object->getStateTransitions() as $transition) {\n            if ($sm->can($transition)) {\n\n                $color = $this->getTransitionColor($transition);\n                $tasks[] = array(\n                    'id' => $accessor->getValue($object, $objectIdentifier),\n                    'name' => $transition,\n                    'color' => $color,\n                    'graph' => $object->getStateGraph(),\n                    'label' => $this->getTransition($transition),\n                    'negative' => $this->isNegativeColor($color, 'transition'),\n                    'positive' => $this->isPositiveColor($color, 'transition'),\n                );\n            }\n        }\n\n        return empty($tasks) ? null : $tasks;\n    }","label":0}
{"text":"protected function getTokenStrings(int $row, array $tokens): array\n    {\n        $pieces = [];\n        foreach ($tokens as $key => $token) {\n            if ($token['line'] > $row) {\n                break;\n            }\n            if ($token['line'] < $row) {\n                continue;\n            }\n            if ($this->verbose) {\n                $type = $token['type'];\n                $content = $token['content'];\n                $content = '`' . str_replace([\"\\r\\n\", \"\\n\", \"\\r\", \"\\t\"], ['\\r\\n', '\\n', '\\r', '\\t'], $content) . '`';\n\n                unset($token['type']);\n                unset($token['content']);\n                $token['content'] = $content;\n\n                $tokenList = [];\n                foreach ($token as $k => $v) {\n                    if (is_array($v)) {\n                        if (empty($v)) {\n                            continue;\n                        }\n                        $v = json_encode($v);\n                    }\n                    $tokenList[] = $k . '=' . $v;\n                }\n                $pieces[] = $type . ' (' . $key . ') ' . implode(', ', $tokenList);\n            } else {\n                $pieces[] = $token['type'];\n            }\n        }\n        if ($this->verbose) {\n            return $pieces;\n        }\n        return [implode(' ', $pieces)];\n    }","label":0}
{"text":"func (r *Router) ServeHTTP(rw http.ResponseWriter, req *http.Request) {\n\tr.RLock()\n\tdefer r.RUnlock()\n\n\t\/\/wrap the response writer in our custom interface\n\tw := &responseWriter{writer: rw, Router: r}\n\n\t\/\/find a matching Route\n\tfor _, route := range r.routes {\n\n\t\t\/\/if the methods don't match, skip this handler\n\t\t\/\/i.e if request.Method is 'PUT' Route.Method must be 'PUT'\n\t\tif req.Method != route.method {\n\t\t\tcontinue\n\t\t}\n\n\t\t\/\/check if Route pattern matches url\n\t\tif !route.regex.MatchString(req.URL.Path) {\n\t\t\tcontinue\n\t\t}\n\n\t\t\/\/get submatches (params)\n\t\tmatches := route.regex.FindStringSubmatch(req.URL.Path)\n\n\t\t\/\/double check that the Route matches the URL pattern.\n\t\tif len(matches[0]) != len(req.URL.Path) {\n\t\t\tcontinue\n\t\t}\n\n\t\t\/\/create the http.Requests context\n\t\tc := NewContext(req)\n\n\t\t\/\/add url parameters to the context\n\t\tfor i, match := range matches[1:] {\n\t\t\tc.Params.Set(route.params[i], match)\n\t\t}\n\n\t\t\/\/execute middleware filters\n\t\tfor _, filter := range r.filters {\n\t\t\tfilter(w, req)\n\t\t\tif w.started { return }\n\t\t}\n\n\t\t\/\/invoke the request handler\n\t\troute.handler(w, req)\n\t\treturn\n\t}\n\n\t\/\/if no matches to url, throw a not found exception\n\tif w.started == false {\n\t\thttp.NotFound(w, req)\n\t}\n}","label":0}
{"text":"function startInlineServices() {\n  \/\/ Provide a webhook definition\n  var hook = {\n    name: 'Inline Sample',\n    events: ['message.sent'],\n    path: '\/inline_sample_message_sent',\n  };\n\n  \/\/ Register this webhook with Layer's Services\n  webhooksServices.register({\n    secret: SECRET,\n    url: HOST + ':' + PORT,\n    hooks: [hook]\n  });\n\n  \/\/ Listen for events from Layer's Services, and call our callbackAsync with each event\n  webhooksServices.listen({\n    expressApp: app,\n    secret: SECRET,\n    hooks: [hook]\n  }, redis);\n\n  \/\/ Setup your callback to handle the webhook events\n  queue.process(hook.name, 50, function(job, done) {\n    console.log(new Date().toLocaleString() + ': Inline Sample: Message Received from ' + (job.data.message.sender.user_id || job.data.message.sender.name));\n    done();\n  });\n}","label":0}
{"text":"function( blockTag ) {\n\t\t\t\/\/ The block element to be returned.\n\t\t\tvar block;\n\n\t\t\t\/\/ The range object used to identify the paragraph contents.\n\t\t\tvar range;\n\n\t\t\t\/\/ Indicats that the current element in the loop is the last one.\n\t\t\tvar isLast;\n\n\t\t\t\/\/ Instructs to cleanup remaining BRs.\n\t\t\tvar removePreviousBr, removeLastBr;\n\n\t\t\tblockTag = blockTag || 'p';\n\n\t\t\t\/\/ We're iterating over nested editable.\n\t\t\tif ( this._.nestedEditable ) {\n\t\t\t\t\/\/ Get next block from nested iterator and returns it if was found.\n\t\t\t\tblock = this._.nestedEditable.iterator.getNextParagraph( blockTag );\n\t\t\t\tif ( block ) {\n\t\t\t\t\t\/\/ Inherit activeFilter from the nested iterator.\n\t\t\t\t\tthis.activeFilter = this._.nestedEditable.iterator.activeFilter;\n\t\t\t\t\treturn block;\n\t\t\t\t}\n\n\t\t\t\t\/\/ No block in nested iterator means that we reached the end of the nested editable.\n\t\t\t\t\/\/ Reset the active filter to the default filter (or undefined if this iterator didn't have it).\n\t\t\t\tthis.activeFilter = this.filter;\n\n\t\t\t\t\/\/ Try to find next nested editable or get back to parent (this) iterator.\n\t\t\t\tif ( startNestedEditableIterator( this, blockTag, this._.nestedEditable.container, this._.nestedEditable.remaining ) ) {\n\t\t\t\t\t\/\/ Inherit activeFilter from the nested iterator.\n\t\t\t\t\tthis.activeFilter = this._.nestedEditable.iterator.activeFilter;\n\t\t\t\t\treturn this._.nestedEditable.iterator.getNextParagraph( blockTag );\n\t\t\t\t} else {\n\t\t\t\t\tthis._.nestedEditable = null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t\/\/ Block-less range should be checked first.\n\t\t\tif ( !this.range.root.getDtd()[ blockTag ] )\n\t\t\t\treturn null;\n\n\t\t\t\/\/ This is the first iteration. Let's initialize it.\n\t\t\tif ( !this._.started )\n\t\t\t\trange = startIterator.call( this );\n\n\t\t\tvar currentNode = this._.nextNode,\n\t\t\t\tlastNode = this._.lastNode;\n\n\t\t\tthis._.nextNode = null;\n\t\t\twhile ( currentNode ) {\n\t\t\t\t\/\/ closeRange indicates that a paragraph boundary has been found,\n\t\t\t\t\/\/ so the range can be closed.\n\t\t\t\tvar closeRange = 0,\n\t\t\t\t\tparentPre = currentNode.hasAscendant( 'pre' );\n\n\t\t\t\t\/\/ includeNode indicates that the current node is good to be part\n\t\t\t\t\/\/ of the range. By default, any non-element node is ok for it.\n\t\t\t\tvar includeNode = ( currentNode.type != CKEDITOR.NODE_ELEMENT ),\n\t\t\t\t\tcontinueFromSibling = 0;\n\n\t\t\t\t\/\/ If it is an element node, let's check if it can be part of the range.\n\t\t\t\tif ( !includeNode ) {\n\t\t\t\t\tvar nodeName = currentNode.getName();\n\n\t\t\t\t\t\/\/ Non-editable block was found - return it and move to processing\n\t\t\t\t\t\/\/ its nested editables if they exist.\n\t\t\t\t\tif ( CKEDITOR.dtd.$block[ nodeName ] && currentNode.getAttribute( 'contenteditable' ) == 'false' ) {\n\t\t\t\t\t\tblock = currentNode;\n\n\t\t\t\t\t\t\/\/ Setup iterator for first of nested editables.\n\t\t\t\t\t\t\/\/ If there's no editable, then algorithm will move to next element after current block.\n\t\t\t\t\t\tstartNestedEditableIterator( this, blockTag, block );\n\n\t\t\t\t\t\t\/\/ Gets us straight to the end of getParagraph() because block variable is set.\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t} else if ( currentNode.isBlockBoundary( this.forceBrBreak && !parentPre && { br: 1 } ) ) {\n\t\t\t\t\t\t\/\/ <br> boundaries must be part of the range. It will\n\t\t\t\t\t\t\/\/ happen only if ForceBrBreak.\n\t\t\t\t\t\tif ( nodeName == 'br' )\n\t\t\t\t\t\t\tincludeNode = 1;\n\t\t\t\t\t\telse if ( !range && !currentNode.getChildCount() && nodeName != 'hr' ) {\n\t\t\t\t\t\t\t\/\/ If we have found an empty block, and haven't started\n\t\t\t\t\t\t\t\/\/ the range yet, it means we must return this block.\n\t\t\t\t\t\t\tblock = currentNode;\n\t\t\t\t\t\t\tisLast = currentNode.equals( lastNode );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\/\/ The range must finish right before the boundary,\n\t\t\t\t\t\t\/\/ including possibly skipped empty spaces. (#1603)\n\t\t\t\t\t\tif ( range ) {\n\t\t\t\t\t\t\trange.setEndAt( currentNode, CKEDITOR.POSITION_BEFORE_START );\n\n\t\t\t\t\t\t\t\/\/ The found boundary must be set as the next one at this\n\t\t\t\t\t\t\t\/\/ point. (#1717)\n\t\t\t\t\t\t\tif ( nodeName != 'br' )\n\t\t\t\t\t\t\t\tthis._.nextNode = currentNode;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcloseRange = 1;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t\/\/ If we have child nodes, let's check them.\n\t\t\t\t\t\tif ( currentNode.getFirst() ) {\n\t\t\t\t\t\t\t\/\/ If we don't have a range yet, let's start it.\n\t\t\t\t\t\t\tif ( !range ) {\n\t\t\t\t\t\t\t\trange = this.range.clone();\n\t\t\t\t\t\t\t\trange.setStartAt( currentNode, CKEDITOR.POSITION_BEFORE_START );\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tcurrentNode = currentNode.getFirst();\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tincludeNode = 1;\n\t\t\t\t\t}\n\t\t\t\t} else if ( currentNode.type == CKEDITOR.NODE_TEXT ) {\n\t\t\t\t\t\/\/ Ignore normal whitespaces (i.e. not including &nbsp; or\n\t\t\t\t\t\/\/ other unicode whitespaces) before\/after a block node.\n\t\t\t\t\tif ( beginWhitespaceRegex.test( currentNode.getText() ) )\n\t\t\t\t\t\tincludeNode = 0;\n\t\t\t\t}\n\n\t\t\t\t\/\/ The current node is good to be part of the range and we are\n\t\t\t\t\/\/ starting a new range, initialize it first.\n\t\t\t\tif ( includeNode && !range ) {\n\t\t\t\t\trange = this.range.clone();\n\t\t\t\t\trange.setStartAt( currentNode, CKEDITOR.POSITION_BEFORE_START );\n\t\t\t\t}\n\n\t\t\t\t\/\/ The last node has been found.\n\t\t\t\tisLast = ( ( !closeRange || includeNode ) && currentNode.equals( lastNode ) );\n\n\t\t\t\t\/\/ If we are in an element boundary, let's check if it is time\n\t\t\t\t\/\/ to close the range, otherwise we include the parent within it.\n\t\t\t\tif ( range && !closeRange ) {\n\t\t\t\t\twhile ( !currentNode.getNext( skipGuard ) && !isLast ) {\n\t\t\t\t\t\tvar parentNode = currentNode.getParent();\n\n\t\t\t\t\t\tif ( parentNode.isBlockBoundary( this.forceBrBreak && !parentPre && { br: 1 } ) ) {\n\t\t\t\t\t\t\tcloseRange = 1;\n\t\t\t\t\t\t\tincludeNode = 0;\n\t\t\t\t\t\t\tisLast = isLast || ( parentNode.equals( lastNode ) );\n\t\t\t\t\t\t\t\/\/ Make sure range includes bookmarks at the end of the block. (#7359)\n\t\t\t\t\t\t\trange.setEndAt( parentNode, CKEDITOR.POSITION_BEFORE_END );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcurrentNode = parentNode;\n\t\t\t\t\t\tincludeNode = 1;\n\t\t\t\t\t\tisLast = ( currentNode.equals( lastNode ) );\n\t\t\t\t\t\tcontinueFromSibling = 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t\/\/ Now finally include the node.\n\t\t\t\tif ( includeNode )\n\t\t\t\t\trange.setEndAt( currentNode, CKEDITOR.POSITION_AFTER_END );\n\n\t\t\t\tcurrentNode = getNextSourceNode( currentNode, continueFromSibling, lastNode );\n\t\t\t\tisLast = !currentNode;\n\n\t\t\t\t\/\/ We have found a block boundary. Let's close the range and move out of the\n\t\t\t\t\/\/ loop.\n\t\t\t\tif ( isLast || ( closeRange && range ) )\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t\/\/ Now, based on the processed range, look for (or create) the block to be returned.\n\t\t\tif ( !block ) {\n\t\t\t\t\/\/ If no range has been found, this is the end.\n\t\t\t\tif ( !range ) {\n\t\t\t\t\tthis._.docEndMarker && this._.docEndMarker.remove();\n\t\t\t\t\tthis._.nextNode = null;\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\tvar startPath = new CKEDITOR.dom.elementPath( range.startContainer, range.root );\n\t\t\t\tvar startBlockLimit = startPath.blockLimit,\n\t\t\t\t\tcheckLimits = { div: 1, th: 1, td: 1 };\n\t\t\t\tblock = startPath.block;\n\n\t\t\t\tif ( !block && startBlockLimit && !this.enforceRealBlocks && checkLimits[ startBlockLimit.getName() ] &&\n\t\t\t\t\trange.checkStartOfBlock() && range.checkEndOfBlock() && !startBlockLimit.equals( range.root ) ) {\n\t\t\t\t\tblock = startBlockLimit;\n\t\t\t\t} else if ( !block || ( this.enforceRealBlocks && block.is( listItemNames ) ) ) {\n\t\t\t\t\t\/\/ Create the fixed block.\n\t\t\t\t\tblock = this.range.document.createElement( blockTag );\n\n\t\t\t\t\t\/\/ Move the contents of the temporary range to the fixed block.\n\t\t\t\t\trange.extractContents().appendTo( block );\n\t\t\t\t\tblock.trim();\n\n\t\t\t\t\t\/\/ Insert the fixed block into the DOM.\n\t\t\t\t\trange.insertNode( block );\n\n\t\t\t\t\tremovePreviousBr = removeLastBr = true;\n\t\t\t\t} else if ( block.getName() != 'li' ) {\n\t\t\t\t\t\/\/ If the range doesn't includes the entire contents of the\n\t\t\t\t\t\/\/ block, we must split it, isolating the range in a dedicated\n\t\t\t\t\t\/\/ block.\n\t\t\t\t\tif ( !range.checkStartOfBlock() || !range.checkEndOfBlock() ) {\n\t\t\t\t\t\t\/\/ The resulting block will be a clone of the current one.\n\t\t\t\t\t\tblock = block.clone( false );\n\n\t\t\t\t\t\t\/\/ Extract the range contents, moving it to the new block.\n\t\t\t\t\t\trange.extractContents().appendTo( block );\n\t\t\t\t\t\tblock.trim();\n\n\t\t\t\t\t\t\/\/ Split the block. At this point, the range will be in the\n\t\t\t\t\t\t\/\/ right position for our intents.\n\t\t\t\t\t\tvar splitInfo = range.splitBlock();\n\n\t\t\t\t\t\tremovePreviousBr = !splitInfo.wasStartOfBlock;\n\t\t\t\t\t\tremoveLastBr = !splitInfo.wasEndOfBlock;\n\n\t\t\t\t\t\t\/\/ Insert the new block into the DOM.\n\t\t\t\t\t\trange.insertNode( block );\n\t\t\t\t\t}\n\t\t\t\t} else if ( !isLast ) {\n\t\t\t\t\t\/\/ LIs are returned as is, with all their children (due to the\n\t\t\t\t\t\/\/ nested lists). But, the next node is the node right after\n\t\t\t\t\t\/\/ the current range, which could be an <li> child (nested\n\t\t\t\t\t\/\/ lists) or the next sibling <li>.\n\n\t\t\t\t\tthis._.nextNode = ( block.equals( lastNode ) ? null : getNextSourceNode( range.getBoundaryNodes().endNode, 1, lastNode ) );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( removePreviousBr ) {\n\t\t\t\tvar previousSibling = block.getPrevious();\n\t\t\t\tif ( previousSibling && previousSibling.type == CKEDITOR.NODE_ELEMENT ) {\n\t\t\t\t\tif ( previousSibling.getName() == 'br' )\n\t\t\t\t\t\tpreviousSibling.remove();\n\t\t\t\t\telse if ( previousSibling.getLast() && previousSibling.getLast().$.nodeName.toLowerCase() == 'br' )\n\t\t\t\t\t\tpreviousSibling.getLast().remove();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( removeLastBr ) {\n\t\t\t\tvar lastChild = block.getLast();\n\t\t\t\tif ( lastChild && lastChild.type == CKEDITOR.NODE_ELEMENT && lastChild.getName() == 'br' ) {\n\t\t\t\t\t\/\/ Remove br filler on browser which do not need it.\n\t\t\t\t\tif ( !CKEDITOR.env.needsBrFiller || lastChild.getPrevious( bookmarkGuard ) || lastChild.getNext( bookmarkGuard ) )\n\t\t\t\t\t\tlastChild.remove();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t\/\/ Get a reference for the next element. This is important because the\n\t\t\t\/\/ above block can be removed or changed, so we can rely on it for the\n\t\t\t\/\/ next interation.\n\t\t\tif ( !this._.nextNode )\n\t\t\t\tthis._.nextNode = ( isLast || block.equals( lastNode ) || !lastNode ) ? null : getNextSourceNode( block, 1, lastNode );\n\n\t\t\treturn block;\n\t\t}","label":0}
{"text":"func (l *List) Back() *Element {\n\tif l.len == 0 {\n\t\treturn nil\n\t}\n\treturn l.root.prev\n}","label":0}
{"text":"function super_fn() {\n\t\t\t\t\tif (!oldFn) { return }\n\t\t\t\t\teach(arguments, function(arg, i) {\n\t\t\t\t\t\targs[i] = arg\n\t\t\t\t\t})\n\t\t\t\t\treturn oldFn.apply(self, args)\n\t\t\t\t}","label":0}
{"text":"private function insert_default_terms() {\n\t\tglobal $wpdb;\n\n\t\t\/\/ Default category\n\t\t$cat_name = __( 'Uncategorized' );\n\n\t\t\/* translators: Default category slug *\/\n\t\t$cat_slug = sanitize_title( _x( 'Uncategorized', 'Default category slug' ) );\n\n\t\tif ( global_terms_enabled() ) {\n\t\t\t$cat_id = $wpdb->get_var( $wpdb->prepare( \"SELECT cat_ID FROM {$wpdb->sitecategories} WHERE category_nicename = %s\", $cat_slug ) );\n\t\t\tif ( null === $cat_id ) {\n\t\t\t\t$wpdb->insert(\n\t\t\t\t\t$wpdb->sitecategories,\n\t\t\t\t\t[\n\t\t\t\t\t\t'cat_ID'            => 0,\n\t\t\t\t\t\t'cat_name'          => $cat_name,\n\t\t\t\t\t\t'category_nicename' => $cat_slug,\n\t\t\t\t\t\t'last_updated'      => current_time(\n\t\t\t\t\t\t\t'mysql',\n\t\t\t\t\t\t\ttrue\n\t\t\t\t\t\t),\n\t\t\t\t\t]\n\t\t\t\t);\n\t\t\t\t$cat_id = $wpdb->insert_id;\n\t\t\t}\n\t\t\tupdate_option( 'default_category', $cat_id );\n\t\t} else {\n\t\t\t$cat_id = 1;\n\t\t}\n\n\t\t$wpdb->insert(\n\t\t\t$wpdb->terms,\n\t\t\t[\n\t\t\t\t'term_id'    => $cat_id,\n\t\t\t\t'name'       => $cat_name,\n\t\t\t\t'slug'       => $cat_slug,\n\t\t\t\t'term_group' => 0,\n\t\t\t]\n\t\t);\n\t\t$wpdb->insert(\n\t\t\t$wpdb->term_taxonomy,\n\t\t\t[\n\t\t\t\t'term_id'     => $cat_id,\n\t\t\t\t'taxonomy'    => 'category',\n\t\t\t\t'description' => '',\n\t\t\t\t'parent'      => 0,\n\t\t\t\t'count'       => 0,\n\t\t\t]\n\t\t);\n\t}","label":0}
{"text":"protected function setRequiredFieldsConditional()\n    {\n        $requiredFieldsConditional = [\n            'currency' => [\n                'IDR' => ['bank_code'],\n                'CNY' => ['bank_branch', 'bank_name'],\n                'THB' => ['bank_name']\n            ]\n        ];\n\n        $this->requiredFieldsConditional = \\Genesis\\Utils\\Common::createArrayObject($requiredFieldsConditional);\n\n        $requiredFieldValuesConditional = [\n            'currency' => [\n                'CNY' => [\n                    [\n                        'bank_account_number' => new RegexValidator('\/^[0-9]{19}$\/')\n                    ]\n                ]\n            ]\n        ];\n\n        $this->requiredFieldValuesConditional = \\Genesis\\Utils\\Common::createArrayObject($requiredFieldValuesConditional);\n    }","label":0}
{"text":"def erase_device(passcode = '', preserve_data_plan: false)\n      self.class.erase_device @id, passcode: passcode, preserve_data_plan: preserve_data_plan, api: @api\n    end","label":0}
{"text":"def transform(self, m):\n        \"\"\"\"\"\"\n        if not len(m) == 6:\n            raise ValueError(\"bad sequ. length\")\n        self.x0, self.y0, self.x1, self.y1 = TOOLS._transform_rect(self, m)\n        return self","label":0}
{"text":"def _add_app_menu(self):\n        \n        # Set the main menu for the application\n        mainMenu = AppKit.NSMenu.alloc().init()\n        self.app.setMainMenu_(mainMenu)\n\n        # Create an application menu and make it a submenu of the main menu\n        mainAppMenuItem = AppKit.NSMenuItem.alloc().init()\n        mainMenu.addItem_(mainAppMenuItem)\n        appMenu = AppKit.NSMenu.alloc().init()\n        mainAppMenuItem.setSubmenu_(appMenu)\n\n        appMenu.addItemWithTitle_action_keyEquivalent_(self._append_app_name(localization[\"cocoa.menu.about\"]), \"orderFrontStandardAboutPanel:\", \"\")\n\n        appMenu.addItem_(AppKit.NSMenuItem.separatorItem())\n\n        # Set the 'Services' menu for the app and create an app menu item\n        appServicesMenu = AppKit.NSMenu.alloc().init()\n        self.app.setServicesMenu_(appServicesMenu)\n        servicesMenuItem = appMenu.addItemWithTitle_action_keyEquivalent_(localization[\"cocoa.menu.services\"], nil, \"\")\n        servicesMenuItem.setSubmenu_(appServicesMenu)\n\n        appMenu.addItem_(AppKit.NSMenuItem.separatorItem())\n\n        # Append the 'Hide', 'Hide Others', and 'Show All' menu items\n        appMenu.addItemWithTitle_action_keyEquivalent_(self._append_app_name(localization[\"cocoa.menu.hide\"]), \"hide:\", \"h\")\n        hideOthersMenuItem = appMenu.addItemWithTitle_action_keyEquivalent_(localization[\"cocoa.menu.hideOthers\"], \"hideOtherApplications:\", \"h\")\n        hideOthersMenuItem.setKeyEquivalentModifierMask_(AppKit.NSAlternateKeyMask | AppKit.NSCommandKeyMask)\n        appMenu.addItemWithTitle_action_keyEquivalent_(localization[\"cocoa.menu.showAll\"], \"unhideAllApplications:\", \"\")\n\n        appMenu.addItem_(AppKit.NSMenuItem.separatorItem())\n\n        # Append a 'Quit' menu item\n        appMenu.addItemWithTitle_action_keyEquivalent_(self._append_app_name(localization[\"cocoa.menu.quit\"]), \"terminate:\", \"q\")","label":0}
{"text":"public function setHost($host)\n    {\n        if (! (self::_isHostname($host) || self::_isIpAddress($host))) {\n\n            throw new InvalidArgumentException(\"Invalid host ($host)\");\n        }\n\n        $this->_host = strtolower(trim($host));\n    }","label":0}
{"text":"func (e editSet) intersect(x editSet) {\n\tfor pos := range e {\n\t\tif _, ok := x[pos]; !ok {\n\t\t\tdelete(e, pos)\n\t\t}\n\t}\n}","label":0}
{"text":"public function addTranslation(\\Haven\\CoreBundle\\Entity\\CategoryTranslation $translation) {\n        $translation->setParent($this);\n        $this->translations[] = $translation;\n\n        return $this;\n    }","label":0}
{"text":"func (w *WitnessCache) DeleteSha256Witness(hash lntypes.Hash) error {\n\treturn w.deleteWitness(Sha256HashWitness, hash[:])\n}","label":0}
{"text":"protected function processOfferAfterDelete()\n    {\n        $obOfferList = $this->obElement->offer;\n        if ($obOfferList->isEmpty()) {\n            return;\n        }\n\n        foreach ($obOfferList as $obOffer) {\n            $obOffer->active = false;\n            $obOffer->save();\n        }\n    }","label":0}
{"text":"def cli(env, ipv6, test):\n    \"\"\"\"\"\"\n\n    mgr = SoftLayer.NetworkManager(env.client)\n\n    version = 4\n    if ipv6:\n        version = 6\n\n    if not (test or env.skip_confirmations):\n        if not formatting.confirm(\"This action will incur charges on your \"\n                                  \"account. Continue?\"):\n            raise exceptions.CLIAbort('Cancelling order.')\n\n    result = mgr.add_global_ip(version=version, test_order=test)\n\n    table = formatting.Table(['item', 'cost'])\n    table.align['Item'] = 'r'\n    table.align['cost'] = 'r'\n\n    total = 0.0\n    for price in result['orderDetails']['prices']:\n        total += float(price.get('recurringFee', 0.0))\n        rate = \"%.2f\" % float(price['recurringFee'])\n\n        table.add_row([price['item']['description'], rate])\n\n    table.add_row(['Total monthly cost', \"%.2f\" % total])\n    env.fout(table)","label":0}
{"text":"public final AppendableAndOptions applyForJbcSrcStreaming(\n      JbcSrcPluginContext context, Expression delegateAppendable, List<SoyExpression> args) {\n    MethodRef sanitizerMethod = javaStreamingSanitizer;\n    if (sanitizerMethod == null) {\n      \/\/ lazily allocated\n      sanitizerMethod =\n          MethodRef.create(\n                  Sanitizers.class,\n                  name.substring(1) + \"Streaming\",\n                  LoggingAdvisingAppendable.class)\n              .asNonNullable();\n      javaStreamingSanitizer = sanitizerMethod;\n    }\n    Expression streamingSanitizersExpr = sanitizerMethod.invoke(delegateAppendable);\n    if (isCloseable()) {\n      return AppendableAndOptions.createCloseable(streamingSanitizersExpr);\n    } else {\n      return AppendableAndOptions.create(streamingSanitizersExpr);\n    }\n  }","label":0}
{"text":"def normalize(self):\n        \n        self.__v = self.__v - np.amin(self.__v)\n        self.__v = self.__v \/ np.amax(self.__v)","label":0}
{"text":"func (s *CreateApplicationRequest) SetTemplateBody(v string) *CreateApplicationRequest {\n\ts.TemplateBody = &v\n\treturn s\n}","label":0}
{"text":"protected function unloadNailsBower($sAsset, $sForceType)\n    {\n        $sType = $this->determineType($sAsset, $sForceType);\n\n        switch ($sType) {\n\n            case 'CSS':\n\n                unset($this->aCss['NAILS-BOWER-' . $sAsset]);\n                break;\n\n            case 'JS':\n\n                unset($this->aJs['NAILS-BOWER-' . $sAsset]);\n                break;\n        }\n    }","label":0}
{"text":"public static String getJvmProperty(String prop) {\n        return (System.getProperty(prop, System.getenv(prop)));\n    }","label":0}
{"text":"func stripPrefix(key []byte, prefix []byte) (stripped []byte) {\n\tif len(key) < len(prefix) {\n\t\tpanic(\"should not happen\")\n\t}\n\tif !bytes.Equal(key[:len(prefix)], prefix) {\n\t\tpanic(\"should not happne\")\n\t}\n\treturn key[len(prefix):]\n}","label":0}
{"text":"func NewFxFooYARPCProcedures() interface{} {\n\treturn func(params FxFooYARPCProceduresParams) FxFooYARPCProceduresResult {\n\t\treturn FxFooYARPCProceduresResult{\n\t\t\tProcedures: BuildFooYARPCProcedures(params.Server),\n\t\t\tReflectionMeta: reflection.ServerMeta{\n\t\t\t\tServiceName:     \"uber.yarpc.internal.examples.protobuf.example.Foo\",\n\t\t\t\tFileDescriptors: yarpcFileDescriptorClosure43929dec9f67b739,\n\t\t\t},\n\t\t}\n\t}\n}","label":0}
{"text":"private BatchItemResponse getBatchItemResponse(JsonNode jsonNode) throws IOException {\n\t\tObjectMapper mapper = new ObjectMapper();\n\n\t\tSimpleModule simpleModule = new SimpleModule(\"BatchItemResponseDeserializer\", new Version(1, 0, 0, null));\n\t\tsimpleModule.addDeserializer(BatchItemResponse.class, new BatchItemResponseDeserializer());\n\n\t\tmapper.registerModule(simpleModule);\n\t\tmapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n\n\t\treturn mapper.treeToValue(jsonNode, BatchItemResponse.class);\n\t}","label":0}
{"text":"@Override\n    public ParseResult parse(final Source source) {\n        return Util.execute(new ExceptionAction<ParseResult>() {\n            @Override\n            public ParseResult doAction() throws Throwable {\n                logger.fine(\"Parsing \" + source.getSrcInfo());\n                final BufferedReader reader = source.createReader();\n                try {\n                    final ParserImpl impl = factory.create(source.getSrcInfo(),\n                            reader);\n                    final Doc doc = impl.doc();\n                    return new ParseResult(doc, impl.errors());\n                } finally {\n                    reader.close();\n                }\n            }\n        });\n    }","label":0}
{"text":"func (s *CreateGroupInput) SetPath(v string) *CreateGroupInput {\n\ts.Path = &v\n\treturn s\n}","label":0}
{"text":"private function addModuleRules()\n\t{\n\t\t\/\/ Load the routes from cache\n\t\t$moduleRoutes = array();\n\t\t$directories = glob(Yii::getPathOfAlias('application.modules') . '\/*' , GLOB_ONLYDIR);\n\n\t\tforeach ($directories as $dir)\n\t\t{\n\t\t\t$routePath = $dir .DS. 'config' .DS. 'routes.php';\n\t\t\tif (file_exists($routePath))\n\t\t\t{\n\t\t\t\t$routes = require_once($routePath);\n\t\t\t\t\/\/ Unit tests are failing here for some reason\n\t\t\t\tif (!is_array($routes))\n\t\t\t\t\tcontinue;\n\n\t\t\t\tforeach ($routes as $k=>$v)\n\t\t\t\t$moduleRoutes[$k] = $v;\n\t\t\t}\n\t\t}\n\n\t\treturn $moduleRoutes;\n\t}","label":0}
{"text":"func (q *Query) Select(fields ...string) *Query {\n\tfor _, f := range fields {\n\t\tif strings.TrimSpace(f) != \"\" {\n\t\t\tq.addColumns = append(q.addColumns, f)\n\t\t}\n\t}\n\treturn q\n}","label":0}
{"text":"def load_known_hosts(self, filename=None):\n\n        \n\n        if filename is None:\n            filename = os.path.expanduser('~\/.ssh\/known_hosts')\n            try:\n                self._host_keys.load(filename)\n            except IOError:\n                # for windows\n                filename = os.path.expanduser('~\/ssh\/known_hosts')\n                try:\n                    self._host_keys.load(filename)\n                except IOError:\n                    pass\n        else:\n            self._host_keys.load(filename)","label":0}
{"text":"def write(self, chunk):\n        \"\"\"\"\"\"\n        if self.chunked_write and chunk:\n            chunk_size_hex = hex(len(chunk))[2:].encode('ascii')\n            buf = [chunk_size_hex, CRLF, chunk, CRLF]\n            self.conn.wfile.write(EMPTY.join(buf))\n        else:\n            self.conn.wfile.write(chunk)","label":0}
{"text":"public boolean isPermit(boolean reload) {\n        if (reload) {\/\/ \u5224\u65ad\u662f\u5426\u9700\u8981\u91cd\u65b0reload\n            reload();\n        }\n\n        boolean result = channelStatus.isStart() && mainStemStatus.isOverTake();\n        if (existOpposite) {\/\/ \u5224\u65ad\u662f\u5426\u5b58\u5728\u53cd\u5411\u540c\u6b65\n            result &= oppositeMainStemStatus.isOverTake();\n        }\n\n        return result;\n    }","label":0}
{"text":"public void setNomPtSize(Integer newNomPtSize) {\n\t\tInteger oldNomPtSize = nomPtSize;\n\t\tnomPtSize = newNomPtSize;\n\t\tif (eNotificationRequired())\n\t\t\teNotify(new ENotificationImpl(this, Notification.SET, AfplibPackage.FND__NOM_PT_SIZE, oldNomPtSize, nomPtSize));\n\t}","label":0}
{"text":"public function build()\n    {\n        $annotationReader = $this->annotationReader;\n        if (null === $annotationReader) {\n            $annotationReader = new AnnotationReader();\n\n            if (null !== $this->cacheDir) {\n                $this->createDir($this->cacheDir . '\/annotations');\n                $annotationReader = new FileCacheReader($annotationReader, $this->cacheDir . '\/annotations', $this->debug);\n            }\n        }\n\n        $metadataDriver = $this->driverFactory->createDriver($this->metadataDirs, $annotationReader);\n        $metadataFactory = new MetadataFactory($metadataDriver);\n\n        $metadataFactory->setIncludeInterfaces($this->includeInterfaceMetadata);\n\n        if (null !== $this->cacheDir) {\n            $this->createDir($this->cacheDir . '\/metadata');\n            $metadataFactory->setCache(new FileCache($this->cacheDir . '\/metadata'));\n        }\n\n        $schemaRegistry = new SchemaRegistry($this->schemaDirs);\n\n        \/\/ TODO registry caching\n\n        return new Manager($metadataFactory, $schemaRegistry);\n    }","label":0}
{"text":"func (p *Parser) parseKeyAndInferOperator() (string, Operator, error) {\n\tvar operator Operator\n\ttok, literal := p.consume(Values)\n\tif tok == DoesNotExistToken {\n\t\toperator = DoesNotExistOperator\n\t\ttok, literal = p.consume(Values)\n\t}\n\tif tok != IdentifierToken {\n\t\terr := fmt.Errorf(\"found '%s', expected: identifier\", literal)\n\t\treturn \"\", \"\", err\n\t}\n\tif err := validateLabelKey(literal); err != nil {\n\t\treturn \"\", \"\", err\n\t}\n\tif t, _ := p.lookahead(Values); t == EndOfStringToken || t == CommaToken {\n\t\tif operator != DoesNotExistOperator {\n\t\t\toperator = ExistsOperator\n\t\t}\n\t}\n\treturn literal, operator, nil\n}","label":0}
{"text":"def get_today_all(output='pd'):\n    \n\n    data = []\n    today = str(datetime.date.today())\n    codes = QA_fetch_get_stock_list('stock').code.tolist()\n    bestip = select_best_ip()['stock']\n    for code in codes:\n        try:\n            l = QA_fetch_get_stock_day(\n                code, today, today, '00', ip=bestip)\n        except:\n            bestip = select_best_ip()['stock']\n            l = QA_fetch_get_stock_day(\n                code, today, today, '00', ip=bestip)\n        if l is not None:\n            data.append(l)\n\n    res = pd.concat(data)\n    if output in ['pd']:\n        return res\n    elif output in ['QAD']:\n        return QA_DataStruct_Stock_day(res.set_index(['date', 'code'], drop=False))","label":0}
{"text":"public static EnterpriseArchive getModuleDeployment(ModuleType type, String basename, boolean doFiltering) {\n        String name = basename + \".\" + type.getExtension();\n        String testJarName = basename + \"-tests.jar\";\n\/\/        LOG.debug(\"Creating Arquillian deployment for [\" + name + \"]\");\n        try {\n            EarDescriptorBuilder descriptorBuilder = new EarDescriptorBuilder(basename);\n            MavenResolverSystem maven = Maven.resolver();\n            \/\/ConfigurableMavenResolverSystem maven = Maven.configureResolver().workOffline().withMavenCentralRepo(false);\n            EnterpriseArchive ear = ShrinkWrap.create(EnterpriseArchive.class, basename + \"-full.ear\");\n            PomEquippedResolveStage resolveStage = maven.loadPomFromFile(\"pom.xml\");\n\n            \/\/ przejrzenie dependency oznaczonych jako provided w celu znalezienia EJB'k\u00f3w\n            MavenResolvedArtifact[] provided = resolveStage.importRuntimeDependencies().importDependencies(ScopeType.PROVIDED).resolve().using(new AcceptScopesStrategy(ScopeType.PROVIDED)).asResolvedArtifact();\n            for (MavenResolvedArtifact mra : provided) {\n\/\/                System.out.println(\"Checking provided: \" + mra.getCoordinate().toCanonicalForm());\n                if (isArtifactEjb(mra.getCoordinate())) {\n                    ear.addAsModule(mra.as(JavaArchive.class));\n                    \/\/ dodajemy jako modu\u0142\n                    descriptorBuilder.addEjb(mra.asFile().getName());\n                    \/\/ przegl\u0105damy dependency EJB'ka w celu pobrania tak\u017ce zale\u017cno\u015bci z EJB'ka\n                    for (MavenArtifactInfo mai : mra.getDependencies()) {\n\/\/                            LOG.debug(\"Resolved: \" + mai.getCoordinate().getGroupId() + \":\" + mai.getCoordinate().getArtifactId());\n                        \/\/ pomijamy wzajemne zale\u017cno\u015bci do innych EJB'k\u00f3w\n                        if (!isArtifactEjb(mai.getCoordinate())) {\n                            for (MavenResolvedArtifact reqMra : provided) {\n                                if (reqMra.getCoordinate().toCanonicalForm().equals(mai.getCoordinate().toCanonicalForm())) {\n                                    \/\/ dodanie zale\u017cno\u015bci do lib'\u00f3w\n                                    ear.addAsLibrary(reqMra.asFile());\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            MavenResolvedArtifact[] deps = resolveStage.importRuntimeAndTestDependencies().resolve().withTransitivity().asResolvedArtifact();\n\n            for (MavenResolvedArtifact mra : deps) {\n                MavenCoordinate mc = mra.getCoordinate();\n                PackagingType packaging = mc.getPackaging();\n                if (doFiltering && isFiltered(mc)) {\n                    continue;\n                }\n                LOG.log(Level.FINEST, \"Adding: {0}\", mc.toCanonicalForm());\n                if (isArtifactEjb(mc)) {\n                    \/\/ dependency w postaci ejb'k\u00f3w\n                    ear.addAsModule(mra.as(JavaArchive.class));\n                    descriptorBuilder.addEjb(mra.asFile().getName());\n                } else if (packaging.equals(PackagingType.WAR)) {\n                    \/\/ dependency w postaci war'\u00f3w\n                    ear.addAsModule(mra.as(WebArchive.class));\n                    descriptorBuilder.addWeb(mra.asFile().getName());\n                } else {\n                    \/\/ reszt\u0119 dodajemy jako lib\n                    ear.addAsLibrary(mra.asFile());\n                }\n            }\n            \/\/ utworzenie g\u0142\u00f3wnego archiwum\n\/\/            Archive<?> module = ShrinkWrap.create(MavenImporter.class, name)\n\/\/                    .loadPomFromFile(\"pom.xml\")\n\/\/                    .as(type.getType());\n\n            Archive<?> module = ShrinkWrap.create(ExplodedImporter.class, name)\n                    .importDirectory(type.getExplodedDir(basename))\n                    .as(type.getType());\n\n            JavaArchive testJar = ShrinkWrap.create(ExplodedImporter.class, testJarName)\n                    .importDirectory(\"target\/test-classes\")\n                    .as(JavaArchive.class);\n\n            module = module.merge(testJar, type.getMergePoint());\n\/\/            mergeReplace(ear, module, testJar);\n\n            module.add(new StringAsset(RUN_AT_ARQUILLIAN_CONTENT), RUN_AT_ARQUILLIAN_PATH);\n            LOG.log(Level.FINE, module.toString(true));\n\n            addMainModule(ear, type, module, descriptorBuilder);\n            \n            \/\/ Workaround for arquillian bug\n            if (!descriptorBuilder.containsWar()) {\n                String testModuleName = ModuleType.WAR.generateModuleName() + \".war\";\n                ear.addAsModule(ShrinkWrap.create(WebArchive.class, testModuleName));\n                descriptorBuilder.addWeb(testModuleName);\n            }\n\n            ear.setApplicationXML(new StringAsset(descriptorBuilder.render()));\n            ear.addManifest();\n            LOG.log(Level.INFO, \"Created deployment [{0}]\", ear.getName());\n\/\/            System.out.println(ear.toString(true));\n\/\/            System.out.println(descriptorBuilder.render());\n            return ear;\n        } catch (IllegalArgumentException ex) {\n            throw new IllegalStateException(\"Error in creating deployment [\" + ex + \"]\", ex);\n        } catch (InvalidConfigurationFileException ex) {\n            throw new IllegalStateException(\"Error in creating deployment [\" + ex + \"]\", ex);\n        } catch (ArchiveImportException ex) {\n            throw new IllegalStateException(\"Error in creating deployment [\" + ex + \"]\", ex);\n        }\n    }","label":0}
{"text":"def _rewrite_ser_data(self, ser, series_data, date_1904):\n        \n        ser._remove_tx()\n        ser._remove_xVal()\n        ser._remove_yVal()\n\n        xml_writer = _XySeriesXmlWriter(series_data)\n\n        ser._insert_tx(xml_writer.tx)\n        ser._insert_xVal(xml_writer.xVal)\n        ser._insert_yVal(xml_writer.yVal)","label":0}
{"text":"function getAttributeNameValue(node, at) {\n\tconst name = at.name;\n\tlet atnv;\n\n\tif (name.indexOf('href') !== -1 || name.indexOf('src') !== -1) {\n\t\tlet friendly = axe.utils.getFriendlyUriEnd(node.getAttribute(name));\n\t\tif (friendly) {\n\t\t\tlet value = encodeURI(friendly);\n\t\t\tif (value) {\n\t\t\t\tatnv = escapeSelector(at.name) + '$=\"' + escapeSelector(value) + '\"';\n\t\t\t} else {\n\t\t\t\treturn;\n\t\t\t}\n\t\t} else {\n\t\t\tatnv =\n\t\t\t\tescapeSelector(at.name) +\n\t\t\t\t'=\"' +\n\t\t\t\tescapeSelector(node.getAttribute(name)) +\n\t\t\t\t'\"';\n\t\t}\n\t} else {\n\t\tatnv = escapeSelector(name) + '=\"' + escapeSelector(at.value) + '\"';\n\t}\n\treturn atnv;\n}","label":0}
{"text":"public static function _Load ($path)\n\t{\n\t\t\n\t\t\/\/ Check file exists\n\t\t\n\t\tif (!parent::_Exists ($path))\n\t\t{\n\t\t\treturn FALSE;\n\t\t}\n\t\t\n\t\t\/\/ Set image resource\n\t\t\n\t\t$image\t= FALSE;\n\t\t\n\t\t\/\/ Switch image type and load\n\t\t\n\t\tswitch (self::_getMIME ($path))\n\t\t{\n\t\t\t\n\t\t\t\/\/ gif\n\t\t\t\n\t\t\tcase IMAGETYPE_GIF:\n\t\t\t\t$image\t\t= imagecreatefromgif ($path);\n\t\t\t\tbreak;\n\t\t\t\t\n\t\t\t\/\/ png\t\n\t\t\t\n\t\t\tcase IMAGETYPE_PNG:\n\t\t\t\t$resImg\t\t= imagecreatefrompng ($path);\n\t\t\t\tbreak;\n\t\t\t\t\n\t\t\t\/\/ jpeg \/ default\t\n\t\t\t\n\t\t\tdefault:\n\t\t\t\t$image\t\t= imagecreatefromjpeg ($path);\n\t\t\t\tbreak;\t\t\t\n\t\t\t\n\t\t}\n\t\t\n\t\t\/\/ Return image resource\n\t\t\n\t\treturn $image;\n\t\t\n\t}","label":0}
{"text":"def run_migration(data, version_start, version_end):\n    \"\"\"\"\"\"\n    items = []\n    if version_start == 1 and version_end == 2:\n        for item in data['accounts']:\n            items.append(v2.upgrade(item))\n\n    if version_start == 2 and version_end == 1:\n        for item in data:\n            items.append(v2.downgrade(item))\n        items = {'accounts': items}\n    return items","label":0}
{"text":"function ignoreMatch(ignores, pathName) {\n    let result = false;\n\n    ignores.forEach(ignore => {\n        if (minimatch(pathName, ignore)) {\n            result = true;\n        }\n    });\n\n    return result;\n}","label":0}
{"text":"private static void loadDisabledAlgorithmsMap(\n            final String propertyName) {\n\n        String property = AccessController.doPrivileged(\n            new PrivilegedAction<String>() {\n                public String run() {\n                    return Security.getProperty(propertyName);\n                }\n            });\n\n        String[] algorithmsInProperty = null;\n\n        if (property != null && !property.isEmpty()) {\n\n            \/\/ remove double quote marks from beginning\/end of the property\n            if (property.charAt(0) == '\"' &&\n                    property.charAt(property.length() - 1) == '\"') {\n                property = property.substring(1, property.length() - 1);\n            }\n\n            algorithmsInProperty = property.split(\",\");\n            for (int i = 0; i < algorithmsInProperty.length; i++) {\n                algorithmsInProperty[i] = algorithmsInProperty[i].trim();\n            }\n        }\n\n        \/\/ map the disabled algorithms\n        if (algorithmsInProperty == null) {\n            algorithmsInProperty = new String[0];\n        }\n        disabledAlgorithmsMap.put(propertyName, algorithmsInProperty);\n\n        \/\/ map the key constraints\n        KeySizeConstraints keySizeConstraints =\n            new KeySizeConstraints(algorithmsInProperty);\n        keySizeConstraintsMap.put(propertyName, keySizeConstraints);\n    }","label":0}
{"text":"func (c *ContainerServer) Remove(ctx context.Context, container string, force bool) (string, error) {\n\tctr, err := c.LookupContainer(container)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tctrID := ctr.ID()\n\n\tcStatus := ctr.State()\n\tswitch cStatus.Status {\n\tcase oci.ContainerStatePaused:\n\t\treturn \"\", errors.Errorf(\"cannot remove paused container %s\", ctrID)\n\tcase oci.ContainerStateCreated, oci.ContainerStateRunning:\n\t\tif force {\n\t\t\t_, err = c.ContainerStop(ctx, container, 10)\n\t\t\tif err != nil {\n\t\t\t\treturn \"\", errors.Wrapf(err, \"unable to stop container %s\", ctrID)\n\t\t\t}\n\t\t} else {\n\t\t\treturn \"\", errors.Errorf(\"cannot remove running container %s\", ctrID)\n\t\t}\n\t}\n\n\tif err := c.runtime.DeleteContainer(ctr); err != nil {\n\t\treturn \"\", errors.Wrapf(err, \"failed to delete container %s\", ctrID)\n\t}\n\tif err := os.Remove(filepath.Join(c.Config().RuntimeConfig.ContainerExitsDir, ctrID)); err != nil && !os.IsNotExist(err) {\n\t\treturn \"\", errors.Wrapf(err, \"failed to remove container exit file %s\", ctrID)\n\t}\n\tc.RemoveContainer(ctr)\n\n\tif err := c.storageRuntimeServer.DeleteContainer(ctrID); err != nil {\n\t\treturn \"\", errors.Wrapf(err, \"failed to delete storage for container %s\", ctrID)\n\t}\n\n\tc.ReleaseContainerName(ctr.Name())\n\n\tif err := c.ctrIDIndex.Delete(ctrID); err != nil {\n\t\treturn \"\", err\n\t}\n\treturn ctrID, nil\n}","label":0}
{"text":"public function setDialect($dialect)\n    {\n        if (!Type::isStringLike($dialect)) {\n            throw new InvalidArgumentException('Dialect hast to be stringlike, not ' . Type::of($dialect));\n        }\n        $this->dialect = $dialect;\n        return $this;\n    }","label":0}
{"text":"def get_callbacks_from_message(self, msg):\n        \"\"\"\"\"\"\n        callbacks = []\n        for key in self._find_matching_keys(msg):\n            for callback in self[key]:\n                callbacks.append(callback)\n        return callbacks","label":0}
{"text":"func ListSnapshots(dirpath string) ([]string, error) {\n\tdirents, err := ioutil.ReadDir(dirpath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tvar snapshots []string\n\tfor _, dirent := range dirents {\n\t\tif strings.HasSuffix(dirent.Name(), \".snap\") {\n\t\t\tsnapshots = append(snapshots, dirent.Name())\n\t\t}\n\t}\n\n\t\/\/ Sort snapshot filenames in reverse lexical order\n\tsort.Sort(sort.Reverse(sort.StringSlice(snapshots)))\n\treturn snapshots, nil\n}","label":0}
{"text":"public function create(OptionsBag $sessionOptions)\n    {\n        $options = $this->parseOptions($sessionOptions);\n\n        $connections = $this->parse($sessionOptions);\n\n        $persistentId = null;\n        if ($options['persistent']) {\n            $persistentId = $this->parsePersistentId($connections, $options, $sessionOptions);\n        }\n\n        $class = $this->class;\n        \/** @var Memcached $memcached *\/\n        $memcached = new $class(\n            $persistentId,\n            function (Memcached $memcached) use ($connections, $options) {\n                $this->configure($memcached, $connections, $options);\n            }\n        );\n\n        return $memcached;\n    }","label":0}
{"text":"def is_alert_present(self):\n        \n        current_frame = None\n        try:\n            current_frame = self.driver.current_window_handle\n            a = self.driver.switch_to_alert()\n            a.text\n        except NoAlertPresentException:\n            # No alert\n            return False\n        except UnexpectedAlertPresentException:\n            # Alert exists\n            return True\n        finally:\n            if current_frame:\n                self.driver.switch_to_window(current_frame)\n        return True","label":0}
{"text":"public Properties asProperties() {\n        final Properties props = new Properties();\n        other.forEach(props::setProperty);\n        props.setProperty(\"bootstrap.servers\", bootstrapServers);\n        return props;\n    }","label":0}
{"text":"def main():\n    \"\"\"\"\"\"\n    conf = init_and_get_conf()\n    logger = make_logger(__name__)\n    logger.info('YaBT version {}', __version__)\n    handlers = {\n        'build': YabtCommand(func=cmd_build, requires_project=True),\n        'dot': YabtCommand(func=cmd_dot, requires_project=True),\n        'test': YabtCommand(func=cmd_test, requires_project=True),\n        'tree': YabtCommand(func=cmd_tree, requires_project=True),\n        'version': YabtCommand(func=cmd_version, requires_project=False),\n        'list-builders': YabtCommand(func=cmd_list, requires_project=False),\n    }\n    command = handlers[conf.cmd]\n    if command.requires_project and not conf.in_yabt_project():\n        fatal('Not a YABT project (or any of the parent directories): {}',\n              BUILD_PROJ_FILE)\n    try:\n        command.func(conf)\n    except Exception as ex:\n        fatal('{}', ex)","label":0}
{"text":"private function fillDefault(ParameterDefinitionCollectionInterface $definitionCollection): void\n    {\n        foreach ($definitionCollection->getParameterDefinitions() as $name => $definition) {\n            $this->setParameterValue($name, $definition->getDefaultValue());\n\n            if ($definition instanceof CompoundParameterDefinition) {\n                $this->fillDefault($definition);\n            }\n        }\n    }","label":0}
{"text":"public void registerApplicationClasspathSPIs() {\r\n        ClassLoader loader = Thread.currentThread().getContextClassLoader();\r\n        Iterator<Class<?>> categories = categories();\r\n\r\n        while (categories.hasNext()) {\r\n            Class<?> category = categories.next();\r\n\r\n            try {\r\n                \/\/ Find all META-INF\/services\/ + name on class path\r\n                String name = SERVICES + category.getName();\r\n                Enumeration<URL> spiResources = loader.getResources(name);\r\n\r\n                while (spiResources.hasMoreElements()) {\r\n                    URL resource = spiResources.nextElement();\r\n                    registerSPIs(resource, category, loader);\r\n                }\r\n            }\r\n            catch (IOException e) {\r\n                throw new ServiceConfigurationError(e);\r\n            }\r\n        }\r\n    }","label":0}
{"text":"@SuppressWarnings( \"fallthrough\" )\n    private void rollup() {\n        DateTime now = timeFactory.create();\n        Window largest = null;\n        for (DurationHistory history : durations.values()) {\n            largest = history.rollup();\n        }\n        for (ValueHistory history : values.values()) {\n            largest = history.rollup();\n        }\n        if ( largest == null ) return;\n        \/\/ Note that we do expect to fall through, as the 'largest' represents the largest window that was changed,\n        \/\/ while all smaller windows were also changed ...\n        switch (largest) {\n            case PREVIOUS_52_WEEKS:\n                this.weeksStartTime.set(now);\n                \/\/ fall through!!\n            case PREVIOUS_7_DAYS:\n                this.daysStartTime.set(now);\n                \/\/ fall through!!\n            case PREVIOUS_24_HOURS:\n                this.hoursStartTime.set(now);\n                \/\/ fall through!!\n            case PREVIOUS_60_MINUTES:\n                this.minutesStartTime.set(now);\n                \/\/ fall through!!\n            case PREVIOUS_60_SECONDS:\n                this.secondsStartTime.set(now);\n        }\n    }","label":0}
{"text":"public EClass getIfcRadiusDimension() {\r\n\t\tif (ifcRadiusDimensionEClass == null) {\r\n\t\t\tifcRadiusDimensionEClass = (EClass) EPackage.Registry.INSTANCE.getEPackage(Ifc2x3tc1Package.eNS_URI)\r\n\t\t\t\t\t.getEClassifiers().get(419);\r\n\t\t}\r\n\t\treturn ifcRadiusDimensionEClass;\r\n\t}","label":0}
{"text":"def fetch(self, conf):\n        \n        url = conf['url']\n        # If Firefox is broken, it will raise here, causing kibitzr restart:\n        self.driver.set_window_size(1366, 800)\n        self.driver.implicitly_wait(2)\n        self.driver.get(url)\n        try:\n            self._run_automation(conf)\n            html = self._get_html()\n        except:\n            logger.exception(\n                \"Exception occurred while fetching\"\n            )\n            return False, traceback.format_exc()\n        finally:\n            self._close_tab()\n        return True, html","label":0}
{"text":"func Rocr100(real []float64, timePeriod int32) []float64 {\n\tvar outBegIdx C.int\n\tvar outNBElement C.int\n\toutReal := make([]float64, len(real))\n\tC.TA_ROCR100(0, C.int(len(real)-1), (*C.double)(unsafe.Pointer(&real[0])), C.int(timePeriod), &outBegIdx, &outNBElement, (*C.double)(unsafe.Pointer(&outReal[0])))\n\treturn outReal[:outNBElement]\n}","label":0}
{"text":"function(event_name, target) {\n\n\t\tif (this._is_inDOM && event_name == 'click' && !(event_name in this._events)) {\n\t\t\tthis.getDOMElement().onclick = Lava.noop;\n\t\t}\n\t\tthis.addEventTarget_Normal(event_name, target)\n\n\t}","label":0}
{"text":"func PingHandler(w http.ResponseWriter, r *http.Request) {\n\tif methodSupported(w, r) {\n\t\tfmt.Fprintf(w, \"pong\")\n\t}\n\n}","label":0}
{"text":"def actions(*actions_to_keep)\n        raise ArgumentError, 'Wrong number of arguments. You have to provide which actions you want to keep.' if actions_to_keep.empty?\n\n        options = actions_to_keep.extract_options!\n        actions_to_remove = Array(options[:except])\n        actions_to_remove += ACTIONS - actions_to_keep.map { |a| a.to_sym } unless actions_to_keep.first == :all\n        actions_to_remove.map! { |a| a.to_sym }.uniq!\n        (instance_methods.map { |m| m.to_sym } & actions_to_remove).each do |action|\n          undef_method action, \"#{action}!\"\n        end\n      end","label":0}
{"text":"public function render()\n    {\n        $viewPath = $this->getDirectory() . '\/'. $this->getName() . '.' . $this->getExtension();\n        if (!file_exists($viewPath)) {\n            trigger_error('View file \"' . $viewPath . '\" doesn\\'t exist.', E_USER_ERROR);\n            return false;\n        }\n        if (Configuration::read('mvc.autoload_shared_var') && !empty($this->variableList)) {\n            foreach ($this->variableList as $varName => $varValue) {\n                ${$varName} = $varValue;\n            }\n        }\n        ob_start();\n        require($viewPath);\n        echo PHP_EOL;\n        return ob_get_clean();\n    }","label":0}
{"text":"func (_m *FacadeInterface) HasIP(ctx datastore.Context, poolID string, ipAddr string) (bool, error) {\n\tret := _m.Called(ctx, poolID, ipAddr)\n\n\tvar r0 bool\n\tif rf, ok := ret.Get(0).(func(datastore.Context, string, string) bool); ok {\n\t\tr0 = rf(ctx, poolID, ipAddr)\n\t} else {\n\t\tr0 = ret.Get(0).(bool)\n\t}\n\n\tvar r1 error\n\tif rf, ok := ret.Get(1).(func(datastore.Context, string, string) error); ok {\n\t\tr1 = rf(ctx, poolID, ipAddr)\n\t} else {\n\t\tr1 = ret.Error(1)\n\t}\n\n\treturn r0, r1\n}","label":0}
{"text":"public function validate(Validator $validator, $object, $forScenario)\n    {\n        if (!is_array($object) && !$object instanceof \\Traversable) {\n            return false;\n        }\n\n        foreach ($object as $v) {\n            if(!$this->rule->validate($validator, $v, $forScenario)) {\n                return false;\n            }\n        }\n\n        return true;\n    }","label":0}
{"text":"def components\n      return @components if @components\n\n      @components = {}\n      app_folders do |app_folder|\n        Dir[\"#{app_folder}\/*\"].sort.each do |folder|\n          if File.directory?(folder)\n            folder_name = folder[\/[^\\\/]+$\/]\n\n            # Add in the folder if it's not alreay in there\n            folders = (@components[folder_name] ||= [])\n            folders << folder unless folders.include?(folder)\n          end\n        end\n      end\n\n      @components\n    end","label":0}
{"text":"@Override\n\tpublic void eUnset(int featureID)\n\t{\n\t\tswitch (featureID)\n\t\t{\n\t\t\tcase SarlPackage.SARL_BEHAVIOR__EXTENDS:\n\t\t\t\tsetExtends((JvmParameterizedTypeReference)null);\n\t\t\t\treturn;\n\t\t}\n\t\tsuper.eUnset(featureID);\n\t}","label":0}
{"text":"def colorHSB(h, s, b):\n        \n        H, S, B = float(h), float(s\/100), float(b\/100)\n        if S == 0.0:\n            return (B, B, B) # achromatic (grey)\n        h = H \/ 60\n        i = math.floor(h)\n        f = h - i\n        v = B\n        p = v * (1 - S)\n        q = v * (1 - S * f)\n        t = v * (1 - S * (1 - f))\n        if i == 0:\n            return (v, t, b)\n        elif i == 1:\n            return (q, v, p)\n        elif i == 2:\n            return (p, v, t)\n        elif i == 3:\n            return (p, q, v)\n        elif i == 4:\n            return (t, p, v)\n        else: # i == 5 (or i == 6 for the case of H == 360)\n            return (v, p, q)","label":0}
{"text":"def attach(self, remote_entry):\n        \"\"\"\"\"\"\n        self.name = remote_entry.name\n        self.sha = remote_entry.sha\n        self.url = remote_entry.url\n        self.author = remote_entry.author\n        return self","label":0}
{"text":"public static function make_human_readable_filesize($bytes) {\n\t\t$units = array('B', 'KB', 'MB', 'GB', 'TB', 'PB');\n\t\t$num_units = count($units);\n\t\t$size = $bytes;\n\t\tforeach ($units as $i => $unit) {\n\t\t\tif ($size < 1024 || (($i + 1) === $num_units)) {\n\t\t\t\treturn round($size, 2).$unit;\n\t\t\t}\n\t\t\t$size = $size \/ 1024;\n\t\t}\n\t\treturn $size;\n\t}","label":0}
{"text":"public static function getTypes($fid)\n  {\n    $parts = explode(':', $fid);\n    switch(count($parts))\n    {\n      case 5:\n        return [$parts[1], $parts[2]];\n      case 4:\n        return [$parts[1], $parts[1]];\n      default:\n        throw new InvalidFidException(\"Invalid FID Passed '$fid'\", 500);\n    }\n  }","label":0}
{"text":"def _get_cookie_referrer_host(self):\n        ''''''\n        referer = self._original_request.fields.get('Referer')\n\n        if referer:\n            return URLInfo.parse(referer).hostname\n        else:\n            return None","label":0}
{"text":"public final BELScriptParser.set_annotation_return set_annotation() throws RecognitionException {\n        BELScriptParser.set_annotation_return retval = new BELScriptParser.set_annotation_return();\n        retval.start = input.LT(1);\n\n        Object root_0 = null;\n\n        Token vl=null;\n        Token string_literal24=null;\n        Token OBJECT_IDENT25=null;\n        Token char_literal26=null;\n        Token OBJECT_IDENT28=null;\n        BELScriptParser.quoted_value_return quoted_value27 = null;\n\n\n        Object vl_tree=null;\n        Object string_literal24_tree=null;\n        Object OBJECT_IDENT25_tree=null;\n        Object char_literal26_tree=null;\n        Object OBJECT_IDENT28_tree=null;\n\n         paraphrases.push(\"in set annotation.\"); \n        try {\n            \/\/ BELScript.g:73:5: ( 'SET' OBJECT_IDENT '=' ( quoted_value | vl= VALUE_LIST | OBJECT_IDENT ) )\n            \/\/ BELScript.g:74:5: 'SET' OBJECT_IDENT '=' ( quoted_value | vl= VALUE_LIST | OBJECT_IDENT )\n            {\n            root_0 = (Object)adaptor.nil();\n\n            string_literal24=(Token)match(input,24,FOLLOW_24_in_set_annotation277); \n            string_literal24_tree = (Object)adaptor.create(string_literal24);\n            adaptor.addChild(root_0, string_literal24_tree);\n\n            OBJECT_IDENT25=(Token)match(input,OBJECT_IDENT,FOLLOW_OBJECT_IDENT_in_set_annotation279); \n            OBJECT_IDENT25_tree = (Object)adaptor.create(OBJECT_IDENT25);\n            adaptor.addChild(root_0, OBJECT_IDENT25_tree);\n\n            char_literal26=(Token)match(input,25,FOLLOW_25_in_set_annotation281); \n            char_literal26_tree = (Object)adaptor.create(char_literal26);\n            adaptor.addChild(root_0, char_literal26_tree);\n\n            \/\/ BELScript.g:74:28: ( quoted_value | vl= VALUE_LIST | OBJECT_IDENT )\n            int alt5=3;\n            switch ( input.LA(1) ) {\n            case QUOTED_VALUE:\n                {\n                alt5=1;\n                }\n                break;\n            case VALUE_LIST:\n                {\n                alt5=2;\n                }\n                break;\n            case OBJECT_IDENT:\n                {\n                alt5=3;\n                }\n                break;\n            default:\n                NoViableAltException nvae =\n                    new NoViableAltException(\"\", 5, 0, input);\n\n                throw nvae;\n            }\n\n            switch (alt5) {\n                case 1 :\n                    \/\/ BELScript.g:74:29: quoted_value\n                    {\n                    pushFollow(FOLLOW_quoted_value_in_set_annotation284);\n                    quoted_value27=quoted_value();\n\n                    state._fsp--;\n\n                    adaptor.addChild(root_0, quoted_value27.getTree());\n\n                    }\n                    break;\n                case 2 :\n                    \/\/ BELScript.g:74:44: vl= VALUE_LIST\n                    {\n                    vl=(Token)match(input,VALUE_LIST,FOLLOW_VALUE_LIST_in_set_annotation290); \n                    vl_tree = (Object)adaptor.create(vl);\n                    adaptor.addChild(root_0, vl_tree);\n\n\n                    }\n                    break;\n                case 3 :\n                    \/\/ BELScript.g:74:60: OBJECT_IDENT\n                    {\n                    OBJECT_IDENT28=(Token)match(input,OBJECT_IDENT,FOLLOW_OBJECT_IDENT_in_set_annotation294); \n                    OBJECT_IDENT28_tree = (Object)adaptor.create(OBJECT_IDENT28);\n                    adaptor.addChild(root_0, OBJECT_IDENT28_tree);\n\n\n                    }\n                    break;\n\n            }\n\n\n                    \/\/ https:\/\/github.com\/OpenBEL\/openbel-framework\/issues\/14\n                    if (vl != null) vl.setText(vl.getText().replace(\"\\\\\\\\\", \"\\\\\"));\n                \n\n            }\n\n            retval.stop = input.LT(-1);\n\n            retval.tree = (Object)adaptor.rulePostProcessing(root_0);\n            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n\n             paraphrases.pop(); \n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n    \tretval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);\n\n        }\n        finally {\n        }\n        return retval;\n    }","label":0}
{"text":"function resolveFile (dir, file) {\n  return new Promise((resolve, reject) => {\n    resolver.resolve({}, dir, file, (err, result) => {\n      if (err) reject(err)\n      else resolve(result)\n    })\n  })\n}","label":0}
{"text":"function anyBase(srcAlphabet, dstAlphabet) {\n    var converter = new Converter(srcAlphabet, dstAlphabet);\n    \/**\n     * Convert function\n     *\n     * @param {string|Array} number\n     *\n     * @return {string|Array} number\n     *\/\n    return function (number) {\n        return converter.convert(number);\n    }\n}","label":0}
{"text":"def _get_format_module(image_format):\n    \"\"\"\"\"\"\n    format_module = None\n    nag_about_gifs = False\n\n    if detect_format.is_format_selected(image_format,\n                                        Settings.to_png_formats,\n                                        png.PROGRAMS):\n        format_module = png\n    elif detect_format.is_format_selected(image_format, jpeg.FORMATS,\n                                          jpeg.PROGRAMS):\n        format_module = jpeg\n    elif detect_format.is_format_selected(image_format, gif.FORMATS,\n                                          gif.PROGRAMS):\n        # this captures still GIFs too if not caught above\n        format_module = gif\n        nag_about_gifs = True\n\n    return format_module, nag_about_gifs","label":0}
{"text":"public Object evaluate(String expression) throws CompilationFailedException {\n        GroovyShell shell = new GroovyShell(getClass().getClassLoader(), binding);\n        return shell.evaluate(expression);\n    }","label":0}
{"text":"func (l *Live) DescribeLiveStreamRecordIndexFile(streamName, recordID string, resp interface{}) (err error) {\n\treq := l.cloneRequest(DescribeLiveStreamRecordIndexFileAction)\n\tif global.EmptyString == req.AppName || global.EmptyString == streamName {\n\t\treturn errors.New(\" appName|streamName should not to be empty\")\n\t}\n\treq.SetArgs(\"StreamName\", streamName)\n\tif recordID != global.EmptyString {\n\t\treq.SetArgs(\"RecordId\", recordID)\n\t}\n\terr = l.rpc.Query(req, resp)\n\treturn\n}","label":0}
{"text":"public static function launch_automated_backup($course, $starttime, $userid) {\n\n        $outcome = self::BACKUP_STATUS_OK;\n        $config = get_config('backup');\n        $dir = $config->backup_auto_destination;\n        $storage = (int)$config->backup_auto_storage;\n\n        $bc = new backup_controller(backup::TYPE_1COURSE, $course->id, backup::FORMAT_MOODLE, backup::INTERACTIVE_NO,\n                backup::MODE_AUTOMATED, $userid);\n\n        try {\n\n            \/\/ Set the default filename.\n            $format = $bc->get_format();\n            $type = $bc->get_type();\n            $id = $bc->get_id();\n            $users = $bc->get_plan()->get_setting('users')->get_value();\n            $anonymised = $bc->get_plan()->get_setting('anonymize')->get_value();\n            $bc->get_plan()->get_setting('filename')->set_value(backup_plan_dbops::get_default_backup_filename($format, $type,\n                    $id, $users, $anonymised));\n\n            $bc->set_status(backup::STATUS_AWAITING);\n\n            $bc->execute_plan();\n            $results = $bc->get_results();\n            $outcome = self::outcome_from_results($results);\n            $file = $results['backup_destination']; \/\/ May be empty if file already moved to target location.\n\n            \/\/ If we need to copy the backup file to an external dir and it is not writable, change status to error.\n            \/\/ This is a feature to prevent moodledata to be filled up and break a site when the admin misconfigured\n            \/\/ the automated backups storage type and destination directory.\n            if ($storage !== 0 && (empty($dir) || !file_exists($dir) || !is_dir($dir) || !is_writable($dir))) {\n                $bc->log('Specified backup directory is not writable - ', backup::LOG_ERROR, $dir);\n                $dir = null;\n                $outcome = self::BACKUP_STATUS_ERROR;\n            }\n\n            \/\/ Copy file only if there was no error.\n            if ($file && !empty($dir) && $storage !== 0 && $outcome != self::BACKUP_STATUS_ERROR) {\n                $filename = backup_plan_dbops::get_default_backup_filename($format, $type, $course->id, $users, $anonymised,\n                        !$config->backup_shortname);\n                if (!$file->copy_content_to($dir.'\/'.$filename)) {\n                    $bc->log('Attempt to copy backup file to the specified directory failed - ',\n                            backup::LOG_ERROR, $dir);\n                    $outcome = self::BACKUP_STATUS_ERROR;\n                }\n                if ($outcome != self::BACKUP_STATUS_ERROR && $storage === 1) {\n                    if (!$file->delete()) {\n                        $outcome = self::BACKUP_STATUS_WARNING;\n                        $bc->log('Attempt to delete the backup file from course automated backup area failed - ',\n                                backup::LOG_WARNING, $file->get_filename());\n                    }\n                }\n            }\n\n        } catch (moodle_exception $e) {\n            $bc->log('backup_auto_failed_on_course', backup::LOG_ERROR, $course->shortname); \/\/ Log error header.\n            $bc->log('Exception: ' . $e->errorcode, backup::LOG_ERROR, $e->a, 1); \/\/ Log original exception problem.\n            $bc->log('Debug: ' . $e->debuginfo, backup::LOG_DEBUG, null, 1); \/\/ Log original debug information.\n            $outcome = self::BACKUP_STATUS_ERROR;\n        }\n\n        \/\/ Delete the backup file immediately if something went wrong.\n        if ($outcome === self::BACKUP_STATUS_ERROR) {\n\n            \/\/ Delete the file from file area if exists.\n            if (!empty($file)) {\n                $file->delete();\n            }\n\n            \/\/ Delete file from external storage if exists.\n            if ($storage !== 0 && !empty($filename) && file_exists($dir.'\/'.$filename)) {\n                @unlink($dir.'\/'.$filename);\n            }\n        }\n\n        $bc->destroy();\n        unset($bc);\n\n        return $outcome;\n    }","label":0}
{"text":"def load(self, project: typing.Union[projects.Project, None]):\n        \"\"\"\"\"\"\n        self._project = project","label":0}
{"text":"func (c *Call) CloseStream() error {\n\tif !c.Stream {\n\t\treturn errors.New(\"rpc: cannot close non-stream request\")\n\t}\n\t<-c.sent\n\tc.client.sending.Lock()\n\tdefer c.client.sending.Unlock()\n\n\tc.client.mutex.Lock()\n\tif c.client.shutdown {\n\t\tc.client.mutex.Unlock()\n\t\treturn ErrShutdown\n\t}\n\tc.client.mutex.Unlock()\n\n\tc.client.request.ServiceMethod = \"CloseStream\"\n\tc.client.request.Seq = c.seq\n\treturn c.client.codec.WriteRequest(&c.client.request, struct{}{})\n}","label":0}
{"text":"public static <T> Set<T> toSet(Enumeration<T> self) {\n        Set<T> answer = new HashSet<T>();\n        while (self.hasMoreElements()) {\n            answer.add(self.nextElement());\n        }\n        return answer;\n    }","label":0}
{"text":"def _increment(self, what, host):\n        '''  '''\n\n        self.processed[host] = 1\n        prev = (getattr(self, what)).get(host, 0)\n        getattr(self, what)[host] = prev+1","label":0}
{"text":"func (s *Server) GetConnection(connID string) Connection {\n\tconn, ok := s.getConnection(connID)\n\tif !ok {\n\t\treturn nil\n\t}\n\n\treturn conn\n}","label":0}
{"text":"public function validate($schema = '')\n    {\n        \/\/You know sometimes you think you have enough time, but it is not always true ...\n        \/\/(timeout in hudson with the generis-hard test suite)\n        helpers_TimeOutHelper::setTimeOutLimit(helpers_TimeOutHelper::MEDIUM);\n        \n        $content = $this->getContent();\n        if (!empty($content)) {\n            try {\n                libxml_use_internal_errors(true);\n\n                $dom = new DomDocument();\n                $dom->formatOutput = true;\n                $dom->preserveWhiteSpace = false;\n                \n                $this->valid = $dom->loadXML($content);\n\n                if ($this->valid && !empty($schema)) {\n                    $this->valid = $dom->schemaValidate($schema);\n                }\n\n                if (!$this->valid) {\n                    $this->addErrors(libxml_get_errors());\n                }\n                libxml_clear_errors();\n            } catch(DOMException $de) {\n                $this->addError($de);\n            }\n        }\n        \n        \n        helpers_TimeOutHelper::reset();\n        return (bool) $this->valid;\n    }","label":0}
{"text":"func (ncc *SeesawNCC) LBInterfaceInit(iface *ncctypes.LBInterface, out *int) error {\n\tnetIface, err := iface.Interface()\n\tif err != nil {\n\t\treturn fmt.Errorf(\"Failed to get network interface: %v\", err)\n\t}\n\tnodeIface, err := net.InterfaceByName(iface.NodeInterface)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"Failed to get node interface: %v\", err)\n\t}\n\n\tif iface.RoutingTableID < 1 || iface.RoutingTableID > 250 {\n\t\treturn fmt.Errorf(\"Invalid routing table ID: %d\", iface.RoutingTableID)\n\t}\n\n\tvmac, err := net.ParseMAC(vrrpMAC)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"Failed to parse VRRP MAC %q: %v\", vrrpMAC, err)\n\t}\n\n\t\/\/ The last byte of the VRRP MAC is determined by the VRID.\n\tvmac[len(vmac)-1] = iface.VRID\n\tnetIface.HardwareAddr = vmac\n\n\tlog.Infof(\"Initialising load balancing interface %s - VRID %d (VMAC %s)\", iface.Name, iface.VRID, vmac)\n\n\t\/\/ Ensure interface is down and set VMAC address.\n\tif err := ifaceFastDown(netIface); err != nil {\n\t\treturn fmt.Errorf(\"Failed to down interface: %v\", err)\n\t}\n\tif err := ifaceSetMAC(netIface); err != nil {\n\t\treturn fmt.Errorf(\"Failed to set MAC: %v\", err)\n\t}\n\n\t\/\/ Remove VLAN interfaces associated with the load balancing interface.\n\tif err := ifaceFlushVLANs(netIface); err != nil {\n\t\treturn fmt.Errorf(\"Failed to flush VLAN interfaces: %v\", err)\n\t}\n\n\t\/\/ Configure sysctls for load balancing.\n\tif err := sysctlInitLB(nodeIface, netIface); err != nil {\n\t\treturn fmt.Errorf(\"Failed to initialise sysctls: %v\", err)\n\t}\n\n\t\/\/ Flush existing IP addresses and add cluster VIPs.\n\tif err := ifaceFlushIPAddr(netIface); err != nil {\n\t\treturn fmt.Errorf(\"Failed to flush IP addresses: %v\", err)\n\t}\n\n\tif iface.ClusterVIP.IPv4Addr != nil {\n\t\tif err := addClusterVIP(iface, netIface, nodeIface, iface.ClusterVIP.IPv4Addr); err != nil {\n\t\t\treturn fmt.Errorf(\"Failed to add IPv4 cluster VIP: %v\", err)\n\t\t}\n\t}\n\tif iface.ClusterVIP.IPv6Addr != nil {\n\t\tif err := addClusterVIP(iface, netIface, nodeIface, iface.ClusterVIP.IPv6Addr); err != nil {\n\t\t\treturn fmt.Errorf(\"Failed to add IPv6 cluster VIP: %v\", err)\n\t\t}\n\t}\n\n\t\/\/ Initialise iptables rules.\n\tif err := iptablesInit(iface.ClusterVIP); err != nil {\n\t\treturn err\n\t}\n\n\t\/\/ Setup dummy interface.\n\tdummyIface, err := net.InterfaceByName(iface.DummyInterface)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"Failed to get dummy interface: %v\", err)\n\t}\n\tif err := ifaceFastDown(dummyIface); err != nil {\n\t\treturn fmt.Errorf(\"Failed to down dummy interface: %v\", err)\n\t}\n\tif err := ifaceFlushIPAddr(dummyIface); err != nil {\n\t\treturn fmt.Errorf(\"Failed to flush dummy interface: %v\", err)\n\t}\n\tif err := ifaceUp(dummyIface); err != nil {\n\t\treturn fmt.Errorf(\"Failed to up dummy interface: %v\", err)\n\t}\n\n\treturn nil\n}","label":0}
{"text":"public static function addText($project, $target, $text = null)\n    {\n        if ($text === null || strlen(trim($text)) === 0) {\n            return;\n        }\n        $ih = IntrospectionHelper::getHelper(get_class($target));\n        $text = $project->replaceProperties($text);\n        $ih->addText($project, $target, $text);\n    }","label":0}
{"text":"def get_template_info(self, obj):\n        \n        client = self.get_client()\n        client_uid = api.get_uid(client) if client else \"\"\n\n        profile = obj.getAnalysisProfile()\n        profile_uid = api.get_uid(profile) if profile else \"\"\n        profile_title = profile.Title() if profile else \"\"\n\n        sample_type = obj.getSampleType()\n        sample_type_uid = api.get_uid(sample_type) if sample_type else \"\"\n        sample_type_title = sample_type.Title() if sample_type else \"\"\n\n        sample_point = obj.getSamplePoint()\n        sample_point_uid = api.get_uid(sample_point) if sample_point else \"\"\n        sample_point_title = sample_point.Title() if sample_point else \"\"\n\n        service_uids = []\n        analyses_partitions = {}\n        analyses = obj.getAnalyses()\n\n        for record in analyses:\n            service_uid = record.get(\"service_uid\")\n            service_uids.append(service_uid)\n            analyses_partitions[service_uid] = record.get(\"partition\")\n\n        info = self.get_base_info(obj)\n        info.update({\n            \"analyses_partitions\": analyses_partitions,\n            \"analysis_profile_title\": profile_title,\n            \"analysis_profile_uid\": profile_uid,\n            \"client_uid\": client_uid,\n            \"composite\": obj.getComposite(),\n            \"partitions\": obj.getPartitions(),\n            \"remarks\": obj.getRemarks(),\n            \"sample_point_title\": sample_point_title,\n            \"sample_point_uid\": sample_point_uid,\n            \"sample_type_title\": sample_type_title,\n            \"sample_type_uid\": sample_type_uid,\n            \"service_uids\": service_uids,\n        })\n        return info","label":0}
{"text":"def print_yielded(func):\n\t\n\tprint_all = functools.partial(map, print)\n\tprint_results = compose(more_itertools.recipes.consume, print_all, func)\n\treturn functools.wraps(func)(print_results)","label":0}
{"text":"func (s *AutomationExecution) SetOutputs(v map[string][]*string) *AutomationExecution {\n\ts.Outputs = v\n\treturn s\n}","label":0}
{"text":"def remove_reader(self, fd):\n        \"  \"\n        fd = fd_to_int(fd)\n\n        if fd in self._read_fds:\n            del self._read_fds[fd]\n\n        self.selector.unregister(fd)","label":0}
{"text":"function _sign($key, $signatureAlgorithm)\n    {\n        if ($key instanceof RSA) {\n            switch ($signatureAlgorithm) {\n                case 'md2WithRSAEncryption':\n                case 'md5WithRSAEncryption':\n                case 'sha1WithRSAEncryption':\n                case 'sha224WithRSAEncryption':\n                case 'sha256WithRSAEncryption':\n                case 'sha384WithRSAEncryption':\n                case 'sha512WithRSAEncryption':\n                    $key->setHash(preg_replace('#WithRSAEncryption$#', '', $signatureAlgorithm));\n                    $key->setSignatureMode(RSA::SIGNATURE_PKCS1);\n\n                    $this->currentCert['signature'] = base64_encode(\"\\0\" . $key->sign($this->signatureSubject));\n                    return $this->currentCert;\n            }\n        }\n\n        return false;\n    }","label":0}
{"text":"def all(self, **kwargs):\n        \n        items = []\n        for section in self.sections():\n            for item in section.all(**kwargs):\n                items.append(item)\n        return items","label":0}
{"text":"def add(self, cid, price, image, name, desc, major, market_time, property_alias, session, **kwargs):\n        ''''''\n        request = TOPRequest('taobao.product.add')\n        request['cid'] = cid\n        request['price'] = price\n        request['image'] = image\n        request['name'] = name\n        request['desc'] = desc\n        request['major'] = major\n        request['market_time'] = market_time\n        request['property_alias'] = property_alias\n        for k, v in kwargs.iteritems():\n            if k not in ('outer_id', 'props', 'binds', 'sale_props', 'customer_props', 'order_by', 'ww_status', 'post_free', 'location_state', 'location_city', 'is_3D', 'start_score', 'end_score', 'start_volume', 'end_volume', 'one_station', 'is_cod', 'is_mall', 'is_prepay', 'genuine_security', 'promoted_service', 'stuff_status', 'start_price', 'end_price', 'page_no', 'page_size', 'auction_flag', 'auto_post', 'has_discount', 'is_xinpin') and v==None: continue\n            if k == 'location_state': k = 'location.state'\n            if k == 'location_city': k = 'location.city'\n            request[k] = v\n        self.create(self.execute(request, session)['product'])\n        return self","label":0}
{"text":"@Override\r\n\tpublic EEnum getIfcUnitaryEquipmentTypeEnum() {\r\n\t\tif (ifcUnitaryEquipmentTypeEnumEEnum == null) {\r\n\t\t\tifcUnitaryEquipmentTypeEnumEEnum = (EEnum) EPackage.Registry.INSTANCE.getEPackage(Ifc4Package.eNS_URI)\r\n\t\t\t\t\t.getEClassifiers().get(1096);\r\n\t\t}\r\n\t\treturn ifcUnitaryEquipmentTypeEnumEEnum;\r\n\t}","label":0}
{"text":"def custom_str(self, sc_expr_str_fn):\n        \n        return \"\\n\\n\".join(node.custom_str(sc_expr_str_fn)\n                           for node in self.nodes)","label":0}
{"text":"def md5(source):\n    \n    # fix passing char '+' from source\n    source = source.replace(\"%2B\", \"+\")\n    with open(source) as file_to_check:\n        data = file_to_check.read()\n        return hashlib.md5(data).hexdigest()","label":0}
{"text":"def _to_dict(self):\n        \"\"\"\"\"\"\n        _dict = {}\n        if hasattr(self, 'overwrite') and self.overwrite is not None:\n            _dict['overwrite'] = self.overwrite\n        return _dict","label":0}
{"text":"function updateSigninStatus(isSignedIn) {\n\tif (isSignedIn) {\n\t\tauthorizeButton.style.display = 'none';\n\t\tsignoutButton.style.display = 'block';\n\t\tlistFiles();\n\t} else {\n\t\tauthorizeButton.style.display = 'block';\n\t\tsignoutButton.style.display = 'none';\n\t}\n}","label":0}
{"text":"public void reset() {\n        fileLink = null;\n        formFragment = new FormFragment();\n        getSupportFragmentManager()\n                .beginTransaction()\n                .replace(R.id.root, formFragment)\n                .commit();\n    }","label":0}
{"text":"public function createWithUsers(array $data, $users)\n    {\n        $role = $this->create((array) $data);\n\n        if (! empty($users)) {\n            $role->users()->attach($users);\n        }\n    }","label":0}
{"text":"def get_corrections_dict(self, entry):\n        \n        corrections = {}\n        for c in self.corrections:\n            val = c.get_correction(entry)\n            if val != 0:\n                corrections[str(c)] = val\n        return corrections","label":0}
{"text":"public static function match($pattern, $string, $option = 'msr', $encoding = null)\n    {\n        $encoding = $encoding === null ? mb_internal_encoding() : $encoding;\n\n        $encodingBackup = mb_regex_encoding();\n\n        mb_regex_encoding($encoding);\n\n        $result = mb_ereg_match($pattern, $string, $option);\n\n        mb_regex_encoding($encodingBackup);\n\n        return $result;\n    }","label":0}
{"text":"public function createIntegerColumn(string $name, int $size, bool $signed = true): IntegerColumn {\r\n\t\t$column = new SqliteIntegerColumn($name);\r\n\t\t$this->table->addColumn($column);\r\n\t\treturn $column;\r\n\t}","label":0}
{"text":"def get_source_class(self, _class):\n        \n        if not _class.get_name() in self.classes:\n            return \"\"\n        return self.classes[_class.get_name()]","label":0}
{"text":"public function addPath($path)\n    {\n        if (empty($path) || false === ($real_path = realpath($path))) {\n            throw new FileNotFoundException(null, 0, null, $path);\n        }\n        $this->paths[] = $real_path;\n\n        return $this;\n    }","label":0}
{"text":"@Override\n    public InputType getOutputType(InputType... inputType) throws InvalidKerasConfigurationException {\n        if (inputType.length > 1)\n            throw new InvalidKerasConfigurationException(\n                            \"Keras ZeroPadding layer accepts only one input (received \" + inputType.length + \")\");\n        return this.getZeroPadding2DLayer().getOutputType(-1, inputType[0]);\n    }","label":0}
{"text":"func PostingsForMatchers(ix IndexReader, ms ...labels.Matcher) (index.Postings, error) {\n\tvar its, notIts []index.Postings\n\t\/\/ See which label must be non-empty.\n\tlabelMustBeSet := make(map[string]bool, len(ms))\n\tfor _, m := range ms {\n\t\tif !m.Matches(\"\") {\n\t\t\tlabelMustBeSet[m.Name()] = true\n\t\t}\n\t}\n\n\tfor _, m := range ms {\n\t\tmatchesEmpty := m.Matches(\"\")\n\t\tif labelMustBeSet[m.Name()] || !matchesEmpty {\n\t\t\t\/\/ If this matcher must be non-empty, we can be smarter.\n\t\t\tnm, isNot := m.(*labels.NotMatcher)\n\t\t\tif isNot && matchesEmpty { \/\/ l!=\"foo\"\n\t\t\t\t\/\/ If the label can't be empty and is a Not and the inner matcher\n\t\t\t\t\/\/ doesn't match empty, then subtract it out at the end.\n\t\t\t\tit, err := postingsForMatcher(ix, nm.Matcher)\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn nil, err\n\t\t\t\t}\n\t\t\t\tnotIts = append(notIts, it)\n\t\t\t} else if isNot && !matchesEmpty { \/\/ l!=\"\"\n\t\t\t\t\/\/ If the label can't be empty and is a Not, but the inner matcher can\n\t\t\t\t\/\/ be empty we need to use inversePostingsForMatcher.\n\t\t\t\tit, err := inversePostingsForMatcher(ix, nm.Matcher)\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn nil, err\n\t\t\t\t}\n\t\t\t\tits = append(its, it)\n\t\t\t} else { \/\/ l=\"a\"\n\t\t\t\t\/\/ Non-Not matcher, use normal postingsForMatcher.\n\t\t\t\tit, err := postingsForMatcher(ix, m)\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn nil, err\n\t\t\t\t}\n\t\t\t\tits = append(its, it)\n\t\t\t}\n\t\t} else { \/\/ l=\"\"\n\t\t\t\/\/ If the matchers for a labelname selects an empty value, it selects all\n\t\t\t\/\/ the series which don't have the label name set too. See:\n\t\t\t\/\/ https:\/\/github.com\/prometheus\/prometheus\/issues\/3575 and\n\t\t\t\/\/ https:\/\/github.com\/prometheus\/prometheus\/pull\/3578#issuecomment-351653555\n\t\t\tit, err := inversePostingsForMatcher(ix, m)\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\tnotIts = append(notIts, it)\n\t\t}\n\t}\n\n\t\/\/ If there's nothing to subtract from, add in everything and remove the notIts later.\n\tif len(its) == 0 && len(notIts) != 0 {\n\t\tallPostings, err := ix.Postings(index.AllPostingsKey())\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tits = append(its, allPostings)\n\t}\n\n\tit := index.Intersect(its...)\n\n\tfor _, n := range notIts {\n\t\tif _, ok := n.(*index.ListPostings); !ok {\n\t\t\t\/\/ Best to pre-calculate the merged lists via next rather than have a ton\n\t\t\t\/\/ of seeks in Without.\n\t\t\tpl, err := index.ExpandPostings(n)\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\tn = index.NewListPostings(pl)\n\t\t}\n\t\tit = index.Without(it, n)\n\t}\n\n\treturn ix.SortedPostings(it), nil\n}","label":0}
{"text":"func (c *Page) ReloadWithParams(v *PageReloadParams) (*gcdmessage.ChromeResponse, error) {\n\treturn gcdmessage.SendDefaultRequest(c.target, c.target.GetSendCh(), &gcdmessage.ParamRequest{Id: c.target.GetId(), Method: \"Page.reload\", Params: v})\n}","label":0}
{"text":"def get_assembler assembler\n      ret = @assemblers.find do |a|\n        a.name == assembler ||\n        a.shortname == assembler\n      end\n      raise \"couldn't find assembler #{assembler}\" if ret.nil?\n      ret\n    end","label":0}
{"text":"def set_origin(self, new_origin):\n        \n        if not isinstance(new_origin, (tuple, list)):\n            raise ValueError('arg must be tuple or list')\n        if len(new_origin) != self.dimension:\n            raise ValueError('must give a origin value for each dimension (%i)' % self.dimension)\n\n        libfn = utils.get_lib_fn('setOrigin%s'%self._libsuffix)\n        libfn(self.pointer, new_origin)","label":0}
{"text":"func (o *InvitationManager) CountByOrganization(globalid string) (int, error) {\n\tcount, err := o.collection.Find(bson.M{\"organization\": globalid}).Count()\n\treturn count, err\n}","label":0}
{"text":"public void apply()\r\n    {\r\n        String in = readLineWithMessage(\"Delete Product with id:\");\r\n        int id = Integer.parseInt(in);\r\n\r\n        \/\/ We don't have a reference to the selected Product.\r\n        \/\/ So first we have to lookup the object,\r\n        \/\/ we do this by a query by example (QBE):\r\n        \/\/ 1. build an example object with matching primary key values:\r\n        Product example = new Product();\r\n        example.setId(id);\r\n        \/\/ 2. build a QueryByIdentity from this sample instance:\r\n        Query query = new QueryByIdentity(example);\r\n        try\r\n        {\r\n            \/\/ start broker transaction\r\n            broker.beginTransaction();\r\n            \/\/ lookup the product specified by the QBE\r\n            Product toBeDeleted = (Product) broker.getObjectByQuery(query);\r\n            \/\/ now ask broker to delete the object\r\n            broker.delete(toBeDeleted);\r\n            \/\/ commit transaction\r\n            broker.commitTransaction();\r\n        }\r\n        catch (Throwable t)\r\n        {\r\n            \/\/ rollback in case of errors\r\n            broker.abortTransaction();\r\n            t.printStackTrace();\r\n        }\r\n    }","label":0}
{"text":"public static <C extends Comparable> Ordering<Range<C>> reverseOrderingByUpperEndpoint() {\n        Ordering<Range<C>> orderingByUpperEndpoint = orderingByUpperEndpoint();\n        return orderingByUpperEndpoint.reverse();\n    }","label":0}
{"text":"public function populateEntitiesFromInstall()\n    {\n        if ($this->automaticallyPopulated) {\n            \/\/ already run\n            return;\n        }\n\n        foreach (scandir(BASE_PATH) as $key => $entity) {\n            if ($key == \"themes\") {\n                continue;\n            }\n\n            $dir = DocumentationHelper::normalizePath(Controller::join_links(BASE_PATH, $entity));\n\n            if (is_dir($dir)) {\n                \/\/ check to see if it has docs\n                $docs = Controller::join_links($dir, 'docs');\n\n                if (is_dir($docs)) {\n                    $entities[] = array(\n                        'Path' => $docs,\n                        'Title' => DocumentationHelper::clean_page_name($entity),\n                        'Version' => 'master',\n                        'Branch' => 'master',\n                        'Stable' => true\n                    );\n                }\n            }\n        }\n\n        Config::inst()->update(\n            'DocumentationManifest',\n            'register_entities',\n            $entities\n        );\n\n        $this->automaticallyPopulated = true;\n    }","label":0}
{"text":"protected function buildFilter($field, $type, $filter, $value)\n    {\n        if (strlen($field) == 0)\n            throw new \\Exception(\"Empty 'field'\");\n        if (strlen($type) == 0)\n            throw new \\Exception(\"Empty 'type'\");\n\n        if ($type == Table::TYPE_DATETIME) {\n            if ($filter == Table::FILTER_BETWEEN\n                    && is_array($value) && count($value) == 2) {\n                $value = [\n                    $value[0] ? new \\DateTime('@' . $value[0]) : null,\n                    $value[1] ? new \\DateTime('@' . $value[1]) : null,\n                ];\n                if ($value[0] && $this->getDbTimezone())\n                    $value[0]->setTimezone(new \\DateTimeZone($this->getDbTimezone()));\n                if ($value[1] && $this->getDbTimezone())\n                    $value[1]->setTimezone(new \\DateTimeZone($this->getDbTimezone()));\n            } else if ($filter != Table::FILTER_BETWEEN\n                    && !is_array($value)) {\n                $value = new \\DateTime('@' . $value);\n                if ($this->getDbTimezone())\n                    $value->setTimezone(new \\DateTimeZone($this->getDbTimezone()));\n            } else {\n                return false;\n            }\n        } else {\n            if ($filter == Table::FILTER_BETWEEN) {\n                if (!is_array($value) || count($value) != 2)\n                    return false;\n            } else if (is_array($value)) {\n                return false;\n            }\n        }\n\n        if (!isset($this->sqlAnds[$field]))\n            $this->sqlAnds[$field] = [];\n\n        $paramBaseName = 'dt_' . str_replace('.', '_', $field);\n        switch ($filter) {\n            case Table::FILTER_LIKE:\n                $param = ':' . $paramBaseName . '_like';\n                $this->sqlAnds[$field][] = \"$field LIKE $param\";\n                $this->sqlParams[$param] = '%' . $value . '%';\n                break;\n            case Table::FILTER_EQUAL:\n                $param = ':' . $paramBaseName . '_equal';\n                $this->sqlAnds[$field][] = \"$field = $param\";\n                $this->sqlParams[$param] = $value;\n                break;\n            case Table::FILTER_BETWEEN:\n                $ands = [];\n                if ($value[0] !== null) {\n                    $param = ':' . $paramBaseName . '_begin';\n                    $ands[] = \"$field >= $param\";\n                    $this->sqlParams[$param] = $value[0];\n                }\n                if ($value[1] !== null) {\n                    $param = ':' . $paramBaseName . '_end';\n                    $ands[] = \"$field <= $param\";\n                    $this->sqlParams[$param] = $value[1];\n                }\n                $this->sqlAnds[$field][] = join(' AND ', $ands);\n                break;\n            case Table::FILTER_NULL:\n                $this->sqlAnds[$field][] = \"$field IS NULL\";\n                break;\n            default:\n                throw new \\Exception(\"Unknown filter: $filter\");\n        }\n\n        return true;\n    }","label":0}
{"text":"func (s *AwsSecurityFindingFilters) SetProcessName(v []*StringFilter) *AwsSecurityFindingFilters {\n\ts.ProcessName = v\n\treturn s\n}","label":0}
{"text":"public function add(PHPExcel_IComparable $pSource = null)\n    {\n        $hash = $pSource->getHashCode();\n        if (!isset($this->items[$hash])) {\n            $this->items[$hash] = $pSource;\n            $this->keyMap[count($this->items) - 1] = $hash;\n        }\n    }","label":0}
{"text":"def match(self, url: str) -> RouteResolved:\n        \n        url = normalize_url(url)\n        parts = self._deconstruct_url(url)\n        return self._match(parts)","label":0}
{"text":"func IsAllowedNetwork(host string, allowed []string) bool {\n\tif hostNoPort, _, err := net.SplitHostPort(host); err == nil {\n\t\thost = hostNoPort\n\t}\n\n\taddr, err := net.ResolveIPAddr(\"ip\", host)\n\tif err != nil {\n\t\treturn false\n\t}\n\n\tfor _, n := range allowed {\n\t\tresult := true\n\t\tif strings.HasPrefix(n, \"!\") {\n\t\t\tresult = false\n\t\t\tn = n[1:]\n\t\t}\n\t\t_, cidr, err := net.ParseCIDR(n)\n\t\tif err != nil {\n\t\t\tcontinue\n\t\t}\n\t\tif cidr.Contains(addr.IP) {\n\t\t\treturn result\n\t\t}\n\t}\n\n\treturn false\n}","label":0}
{"text":"func GenerateWithPrefix(prefix string, characters uint8) string {\r\n\treturn Prefixed{Prefix: prefix, Len: characters}.Generate()\r\n}","label":0}
{"text":"public void marshall(EndpointSendConfiguration endpointSendConfiguration, ProtocolMarshaller protocolMarshaller) {\n\n        if (endpointSendConfiguration == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(endpointSendConfiguration.getBodyOverride(), BODYOVERRIDE_BINDING);\n            protocolMarshaller.marshall(endpointSendConfiguration.getContext(), CONTEXT_BINDING);\n            protocolMarshaller.marshall(endpointSendConfiguration.getRawContent(), RAWCONTENT_BINDING);\n            protocolMarshaller.marshall(endpointSendConfiguration.getSubstitutions(), SUBSTITUTIONS_BINDING);\n            protocolMarshaller.marshall(endpointSendConfiguration.getTitleOverride(), TITLEOVERRIDE_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }","label":0}
{"text":"def set_oauth_client(self, consumer_key, consumer_secret):\n        \n        self.oauth_client = oauth1.Client(consumer_key, consumer_secret)","label":0}
{"text":"public function isInteger($number, int $min = null, int $max = null): bool\n    {\n        return isset($min) || isset($max)\n            ? filter_var($number, FILTER_VALIDATE_INT, $this->getIntegerOptionsBetween($min, $max))\n            : filter_var($number, FILTER_VALIDATE_INT);\n    }","label":0}
{"text":"def changeGroupApprovalMode(self, require_admin_approval, thread_id=None):\n        \n        thread_id, thread_type = self._getThread(thread_id, None)\n\n        data = {\"set_mode\": int(require_admin_approval), \"thread_fbid\": thread_id}\n        j = self._post(self.req_url.APPROVAL_MODE, data, fix_request=True, as_json=True)","label":0}
{"text":"def compute_invalidation_globs(bootstrap_options):\n    \n    buildroot = get_buildroot()\n    invalidation_globs = []\n    globs = bootstrap_options.pythonpath + \\\n      bootstrap_options.pants_config_files + \\\n      bootstrap_options.pantsd_invalidation_globs\n\n    for glob in globs:\n      glob_relpath = os.path.relpath(glob, buildroot)\n      if glob_relpath and (not glob_relpath.startswith(\"..\/\")):\n        invalidation_globs.extend([glob_relpath, glob_relpath + '\/**'])\n      else:\n        logging.getLogger(__name__).warning(\"Changes to {}, outside of the buildroot\"\n                                            \", will not be invalidated.\".format(glob))\n\n    return invalidation_globs","label":0}
{"text":"def add_version(f):\n    \n    doc = f.__doc__\n    f.__doc__ = \"Version: \" + __version__ + \"\\n\\n\" + doc\n    return f","label":0}
{"text":"public function generate()\n    {\n        $tempPath = sys_get_temp_dir() . '\/';\n\n        \/\/ FastCGI fix for Windows machines, where temp path is not available to\n        \/\/ PHP, and defaults to the unwritable system directory.  If the temp\n        \/\/ path is pointing to the system directory, shift to the 'TEMP'\n        \/\/ sub-folder, which should also exist, but actually be writable.\n        if (IS_WIN && $tempPath == getenv(\"SystemRoot\") . '\/') {\n            $tempPath = getenv(\"SystemRoot\") . '\/TEMP\/';\n        }\n\n        $keyFile = $tempPath . md5(microtime(true));\n\n        if (!is_dir($tempPath)) {\n            mkdir($tempPath);\n        }\n\n        $return = array('private_key' => '', 'public_key' => '');\n\n        $output = @shell_exec('ssh-keygen -t rsa -b 2048 -f '.$keyFile.' -N \"\" -C \"deploy@phpci\"');\n\n        if (!empty($output)) {\n            $pub = file_get_contents($keyFile . '.pub');\n            $prv = file_get_contents($keyFile);\n\n            if (!empty($pub)) {\n                $return['public_key'] = $pub;\n            }\n\n            if (!empty($prv)) {\n                $return['private_key'] = $prv;\n            }\n        }\n\n        return $return;\n    }","label":0}
{"text":"public function getMethodDeclaredReturnType($className, $methodName)\n    {\n        $className = $this->prepareClassReflectionForUsage($className);\n        if (!isset($this->classReflectionData[$className][self::DATA_CLASS_METHODS][$methodName][self::DATA_METHOD_DECLARED_RETURN_TYPE])) {\n            return null;\n        }\n\n        return $this->classReflectionData[$className][self::DATA_CLASS_METHODS][$methodName][self::DATA_METHOD_DECLARED_RETURN_TYPE];\n    }","label":0}
{"text":"private static String encoder(final String toEncode) {\n        try {\n            return URLEncoder.encode(toEncode, URL_ENCODING);\n        } catch (UnsupportedEncodingException ex) {\n            LOG.warn(\"Failed to encode: {}\", ex.getMessage(), ex);\n            return \"\";\n        }\n    }","label":0}
{"text":"public void removeTaskFromQueue(String taskType, String taskId) {\n        Preconditions.checkArgument(StringUtils.isNotBlank(taskType), \"Task type cannot be blank\");\n        Preconditions.checkArgument(StringUtils.isNotBlank(taskId), \"Task id cannot be blank\");\n\n        delete(\"tasks\/queue\/{taskType}\/{taskId}\", taskType, taskId);\n    }","label":0}
{"text":"func (a *Aliases) Close() error {\n\ta.mtx.Lock()\n\tdefer a.mtx.Unlock()\n\n\treturn a.db.Close()\n}","label":0}
{"text":"public function removeBrokenEntityReferences($workspaceName)\n    {\n        $this->dispatch(self::EVENT_NOTICE, 'Checking for broken entity references ...');\n\n        \/** @var \\Neos\\ContentRepository\\Domain\\Model\\Workspace $workspace *\/\n        $workspace = $this->workspaceRepository->findByIdentifier($workspaceName);\n\n        $nodeTypesWithEntityReferences = [];\n        foreach ($this->nodeTypeManager->getNodeTypes() as $nodeType) {\n            \/** @var NodeType $nodeType *\/\n            foreach (array_keys($nodeType->getProperties()) as $propertyName) {\n                $propertyType = $nodeType->getPropertyType($propertyName);\n                if (strpos($propertyType, '\\\\') !== false) {\n                    if (!isset($nodeTypesWithEntityReferences[$nodeType->getName()])) {\n                        $nodeTypesWithEntityReferences[$nodeType->getName()] = [];\n                    }\n                    $nodeTypesWithEntityReferences[$nodeType->getName()][$propertyName] = $propertyType;\n                }\n            }\n        }\n\n        $nodesWithBrokenEntityReferences = [];\n        $brokenReferencesCount = 0;\n        foreach ($nodeTypesWithEntityReferences as $nodeTypeName => $properties) {\n            $nodeDatas = $this->nodeDataRepository->findByParentAndNodeTypeRecursively('\/', $nodeTypeName, $workspace);\n            foreach ($nodeDatas as $nodeData) {\n                \/** @var NodeData $nodeData *\/\n                foreach ($properties as $propertyName => $propertyType) {\n                    $propertyValue = $nodeData->getProperty($propertyName);\n                    $convertedProperty = null;\n\n                    if (is_object($propertyValue)) {\n                        $convertedProperty = $propertyValue;\n                    }\n                    if (is_string($propertyValue) && strlen($propertyValue) === 36) {\n                        $convertedProperty = $this->propertyMapper->convert($propertyValue, $propertyType);\n                        if ($convertedProperty === null) {\n                            $nodesWithBrokenEntityReferences[$nodeData->getIdentifier()][$propertyName] = $nodeData;\n                            $this->dispatch(self::EVENT_NOTICE, sprintf('Broken reference in \"<i>%s<\/i>\", property \"<i>%s<\/i>\" (<i>%s<\/i>) referring to <i>%s<\/i>.', $nodeData->getPath(), $nodeData->getIdentifier(), $propertyName, $propertyType, $propertyValue));\n                            $brokenReferencesCount ++;\n                        }\n                    }\n                    if ($convertedProperty instanceof Proxy) {\n                        try {\n                            $convertedProperty->__load();\n                        } \/** @noinspection PhpRedundantCatchClauseInspection *\/ catch (EntityNotFoundException $e) {\n                            $nodesWithBrokenEntityReferences[$nodeData->getIdentifier()][$propertyName] = $nodeData;\n                            $this->dispatch(self::EVENT_NOTICE, sprintf('Broken reference in \"<i>%s<\/i>\", property \"<i>%s<\/i>\" (<i>%s<\/i>) referring to <i>%s<\/i>.', $nodeData->getPath(), $nodeData->getIdentifier(), $propertyName, $propertyType, $propertyValue));\n                            $brokenReferencesCount ++;\n                        }\n                    }\n                }\n            }\n        }\n\n        if ($brokenReferencesCount === 0) {\n            return;\n        }\n        $taskDescription = sprintf('Remove <i>%d<\/i> broken entity reference%s.', $brokenReferencesCount, $brokenReferencesCount > 1 ? 's' : '');\n        $taskClosure = function () use ($nodesWithBrokenEntityReferences) {\n            foreach ($nodesWithBrokenEntityReferences as $nodeIdentifier => $properties) {\n                foreach ($properties as $propertyName => $nodeData) {\n                    \/** @var NodeData $nodeData *\/\n                    $nodeData->setProperty($propertyName, null);\n                }\n            }\n            $this->persistenceManager->persistAll();\n        };\n        $taskRequiresConfirmation = true;\n        $this->dispatch(self::EVENT_TASK, $taskDescription, $taskClosure, $taskRequiresConfirmation);\n    }","label":0}
{"text":"public function quote($string, $parameter_type = \\PDO::PARAM_STR): string {\n        return $this->connection->quote($string, $parameter_type);\n    }","label":0}
{"text":"public function fetch(string $name)\n    {\n        if (!isset($_COOKIE[$name])) {\n            return null;\n        }\n        try {\n            \/** @var string|array|int|float|bool $stored *\/\n            $stored = $_COOKIE[$name];\n            if (!\\is_string($stored)) {\n                throw new InvalidType('Cookie value is not a string');\n            }\n            $config = self::getConfig($stored);\n            $decrypted = Crypto::decrypt(\n                $stored,\n                $this->key,\n                $config->ENCODING\n            );\n            return \\json_decode($decrypted->getString(), true);\n        } catch (InvalidMessage $e) {\n            return null;\n        }\n    }","label":0}
{"text":"public function getSortStructure()\n    {\n        $sort = [$this->getField() => (object)['order' => $this->getOrder()]];\n\n        if ($this->getMode()) {\n            $sort[$this->getField()]->mode = $this->getMode();\n        }\n        if ($this->getMissing()) {\n            $sort[$this->getField()]->missing = $this->getMissing();\n        }\n\n        return (object)$sort;\n    }","label":0}
{"text":"func (l *b2Objects) GetBucketInfo(ctx context.Context, bucket string) (bi minio.BucketInfo, err error) {\n\tif _, err = l.Bucket(ctx, bucket); err != nil {\n\t\treturn bi, err\n\t}\n\treturn minio.BucketInfo{\n\t\tName:    bucket,\n\t\tCreated: time.Unix(0, 0),\n\t}, nil\n}","label":0}
{"text":"def _create(self):\n        \"\"\"\"\"\"\n        if not os.path.exists(settings.SALMON_WHISPER_DB_PATH):\n            os.makedirs(settings.SALMON_WHISPER_DB_PATH)\n        archives = [whisper.parseRetentionDef(retentionDef)\n                    for retentionDef in settings.ARCHIVES.split(\",\")]\n        whisper.create(self.path, archives,\n                       xFilesFactor=settings.XFILEFACTOR,\n                       aggregationMethod=settings.AGGREGATION_METHOD)","label":0}
{"text":"public static void writeElementList(XMLOutput xmlOutput, String tagName, Iterable<String> listValues) throws IOException {\n        writeElementList(xmlOutput, tagName, listValues.iterator());\n    }","label":0}
{"text":"public JSONObject getMessage() throws ActivityException {\n        String message = null;\n        String slackMessageName = getAttributeValueSmart(SLACK_MESSAGE);\n        if (slackMessageName == null)\n            throw new ActivityException(\"slack message attribute is not set\");\n        Asset template = AssetCache.getAsset(slackMessageName);\n\n        if (template == null) {\n            message = slackMessageName;\n        }\n        else {\n            message = context.evaluateToString(template.getStringContent());\n        }\n\n        JSONObject json = new JSONObject();\n        String env = ApplicationContext.getRuntimeEnvironment().toUpperCase();\n        json.put(\"text\", env + \" - \" + getSlackPrefix() + \" - \" + message);\n\n        String altText = null;\n        if (json.has(\"text\")) {\n            String text = json.getString(\"text\");\n            if (text.length() > 200)\n                altText = text.substring(0, 197) + \"...\";\n        }\n        if (altText != null)\n            json.put(\"text\", altText);\n        return json;\n    }","label":0}
{"text":"protected function registerJs()\n    {\n        $config['options'] = $this->options;\n        $config['layerOptions'] = $this->layerOptions;\n        $config['layerOptions']['layerId'] = $this->layer->getLayerId();\n\n        $config = Json::encode($config);\n        $layerClass = Json::encode($this->layerClass);\n\n        $this->view->registerJs(\"\n            $.ajaxSetup({\n                showNoty: true \/\/ default for all ajax calls\n            });\n            $(document).ajaxComplete(function (event, xhr, settings) {\n                if (settings.showNoty && (settings.type=='POST' || settings.container)) {\n                    $.ajax({\n                        url: '$this->url',\n                        method: 'POST',\n                        cache: false,\n                        showNoty: false,\n                        global: false,\n                        data: {\n                            layerClass: '$layerClass',\n                            config: '$config'\n                        },\n                        success: function(data) {\n                           $('#\" . $this->layer->getLayerId() . \"').html(data);\n                        }\n                    });\n                }\n            });\n        \", View::POS_END);\n    }","label":0}
{"text":"private void initializeYoutubeFragment() {\n    youtubeFragment = new YouTubePlayerSupportFragment();\n    youtubeFragment.initialize(YOUTUBE_API_KEY, new YouTubePlayer.OnInitializedListener() {\n\n      @Override public void onInitializationSuccess(YouTubePlayer.Provider provider,\n          YouTubePlayer player, boolean wasRestored) {\n        if (!wasRestored) {\n          youtubePlayer = player;\n          youtubePlayer.loadVideo(VIDEO_KEY);\n          youtubePlayer.setShowFullscreenButton(true);\n        }\n      }\n\n      @Override public void onInitializationFailure(YouTubePlayer.Provider provider,\n          YouTubeInitializationResult error) {\n      }\n    });\n  }","label":0}
{"text":"private function getFieldsData(\n        Row $row,\n        NodeInterface $node,\n        $document,\n        $fields,\n        $templateKey,\n        $webspaceKey,\n        $locale\n    ) {\n        $fieldsData = [];\n        foreach ($fields as $field) {\n            \/\/ determine target for data in result array\n            if (isset($field['target'])) {\n                if (!isset($fieldsData[$field['target']])) {\n                    $fieldsData[$field['target']] = [];\n                }\n                $target = &$fieldsData[$field['target']];\n            } else {\n                $target = &$fieldsData;\n            }\n\n            \/\/ create target\n            if (!isset($target[$field['name']])) {\n                $target[$field['name']] = '';\n            }\n            if (null !== ($data = $this->getFieldData(\n                    $field,\n                    $row,\n                    $node,\n                    $document,\n                    $templateKey,\n                    $webspaceKey,\n                    $locale\n                ))\n            ) {\n                $target[$field['name']] = $data;\n            }\n        }\n\n        return $fieldsData;\n    }","label":0}
{"text":"private function doTransitionFromC() : self\n    {\n        if ($this->getToken() === Grammar::T_X) {\n            if ($this->hasToken(1) && $this->getToken(1) === Grammar::T_X) {\n                if ($this->hasToken(2) && $this->getToken(2) === Grammar::T_X) {\n                    $this\n                        ->setState(self::STATE_B)\n                        ->addPosition(3)\n                        ->addTokenValue(Grammar::T_X, null, 3);\n                    return $this;\n                }\n\n                $this\n                    ->setState(self::STATE_B)\n                    ->addPosition(2)\n                    ->addTokenValue(Grammar::T_X, null, 2);\n                return $this;\n            }\n\n            $this\n                ->setState(self::STATE_B)\n                ->addPosition(1)\n                ->addTokenValue(Grammar::T_X);\n            return $this;\n        }\n\n        $this->setState(self::STATE_B);\n        return $this;\n    }","label":0}
{"text":"private function skipEmptyLines()\n    {\n        $foundHeartbeat = false;\n        while ($this->offset < $this->bufferSize) {\n            $char = substr($this->buffer, $this->offset, 1);\n            if ($char === \"\\x00\" || $char === \"\\n\" || $char === \"\\r\") {\n                $this->offset++;\n                $foundHeartbeat = true;\n            } else {\n                break;\n            }\n        }\n        if ($foundHeartbeat && $this->observer) {\n            $this->observer->emptyLineReceived();\n        }\n    }","label":0}
{"text":"func (rs *RoleService) Get(ctx context.Context, roleName string) (r *Role, resp *APIResponse, err error) {\n\tr = &Role{}\n\t_, resp, err = rs.client.getAction(ctx, &APIClientRequest{\n\t\tAPIVersion:   apiV1,\n\t\tPath:         fmt.Sprintf(\"admin\/security\/roles\/%s\", roleName),\n\t\tResponseBody: r,\n\t})\n\n\treturn\n}","label":0}
{"text":"public function render(ProjectStatistics $statistics)\n    {\n        $table = new Table($this->output);\n\n        $table\n            ->setHeaders(['Name', 'Classes', 'Methods', 'Methods\/Class', 'Lines', 'LoC', 'LoC\/Method'])\n            ->setRows($statistics->components())\n            ->addRow($statistics->other())\n            ->addRow(new TableSeparator)\n            ->addRow($statistics->total());\n\n        for ($i = 1; $i <= 6; $i++) {\n            $table->setColumnStyle($i, (new TableStyle)->setPadType(STR_PAD_LEFT));\n        }\n\n        $table->render();\n\n        $metaData = array_merge(\n            (new CodeTestRatio($statistics))->summary(),\n            ['Number of Routes: '.app(NumberOfRoutes::class)->get()]\n        );\n\n        $this->output->text(\n            implode('    ', $metaData)\n        );\n    }","label":0}
{"text":"public function isPivotTable($newStatus = false)\n    {\n        $oldStatus = $this->isPivotTable;\n\n        if (func_num_args()) {\n            $this->isPivotTable = $newStatus;\n        } \/\/ if\n\n        return $oldStatus;\n    }","label":0}
{"text":"private static function parseAuthorizationHeader($header)\n    {\n        if (strpos($header, 'Digest') !== 0) {\n            return false;\n        }\n\n        $needed_parts = ['nonce' => 1, 'nc' => 1, 'cnonce' => 1, 'qop' => 1, 'username' => 1, 'uri' => 1, 'response' => 1];\n        $data = [];\n\n        preg_match_all('@('.implode('|', array_keys($needed_parts)).')=(?:([\\'\"])([^\\2]+?)\\2|([^\\s,]+))@', substr($header, 7), $matches, PREG_SET_ORDER);\n\n        if ($matches) {\n            foreach ($matches as $m) {\n                $data[$m[1]] = $m[3] ? $m[3] : $m[4];\n                unset($needed_parts[$m[1]]);\n            }\n        }\n\n        return empty($needed_parts) ? $data : false;\n    }","label":0}
{"text":"@VisibleForTesting\n    public static List<IStruct> getAllTraits(IReferenceableInstance entityDefinition,\n                                              TypeSystem typeSystem) throws AtlasException {\n        List<IStruct> traitInfo = new LinkedList<>();\n        for (String traitName : entityDefinition.getTraits()) {\n            IStruct trait = entityDefinition.getTrait(traitName);\n            String typeName = trait.getTypeName();\n            Map<String, Object> valuesMap = trait.getValuesMap();\n            traitInfo.add(new Struct(typeName, valuesMap));\n            traitInfo.addAll(getSuperTraits(typeName, valuesMap, typeSystem));\n        }\n        return traitInfo;\n    }","label":0}
{"text":"func (c *ChatRPC) ChatAttachmentUploadStart(\n\t_ context.Context, _ chat1.ChatAttachmentUploadStartArg) error {\n\treturn nil\n}","label":0}
{"text":"func Complete(listener func(*vecty.Event)) *vecty.EventListener {\n\treturn &vecty.EventListener{Name: \"complete\", Listener: listener}\n}","label":0}
{"text":"public function getSummary()\n    {\n        $summary = [];\n\n        $name = $this->getName();\n        $message = $this->getMessage();\n\n        if ($name !== $message) {\n            $summary['name'] = $name;\n        }\n\n        $summary['message'] = $message;\n\n        $summary['severity'] = $this->getSeverity();\n\n        return array_filter($summary);\n    }","label":0}
{"text":"def sZ(qubit: Qubit, coefficient: complex = 1.0) -> Pauli:\n    \"\"\"\"\"\"\n    return Pauli.sigma(qubit, 'Z', coefficient)","label":0}
{"text":"public function check()\n    {\n        foreach ($this->target->paths as $path) {\n            if (! $this->getFilesystem()->isWritable($path)) {\n                return $this->makeResult(\n                    false,\n                    sprintf($this->target->getErrorMessage(), $path)\n                );\n            }\n        }\n\n        return $this->makeHealthyResult();\n    }","label":0}
{"text":"func (c *Client) AddToUserAgent(extension string) error {\n\tif extension != \"\" {\n\t\tc.UserAgent = fmt.Sprintf(\"%s %s\", c.UserAgent, extension)\n\t\treturn nil\n\t}\n\treturn fmt.Errorf(\"Extension was empty, User Agent stayed as %s\", c.UserAgent)\n}","label":0}
{"text":"final public function &__get($name)\n    {\n        $value = $this->data[$name];\n\n        \/\/Apply accessor\n        $this->applyModifier($name, $value, 'get');\n\n        return $value;\n    }","label":0}
{"text":"public long[] getChannelIdArray()\n    {\n        long[] ret = new long[channelIds.size()];\n        for(int i = 0; i < channelIds.size(); i++)\n            ret[i] = channelIds.get(i);\n        return ret;\n    }","label":0}
{"text":"@SuppressWarnings(\"SimplifiableIfStatement\")\n  @RestrictTo(RestrictTo.Scope.LIBRARY)\n  public boolean propagateToChildren(String key, int depth) {\n    if (\"__container\".equals(key)) {\n      return true;\n    }\n    return depth < keys.size() - 1 || keys.get(depth).equals(\"**\");\n  }","label":0}
{"text":"public static double volumeScaled(SpatialComparable box, double scale) {\n    final int dim = box.getDimensionality();\n    double vol = 1.;\n    for(int i = 0; i < dim; i++) {\n      double delta = box.getMax(i) - box.getMin(i);\n      if(delta == 0.) {\n        return 0.;\n      }\n      vol *= delta * scale;\n    }\n    return vol;\n  }","label":0}
{"text":"public Request processAuthChallenge(Response response, Request req_msg) {\n    return processAuthChallenge(response, req_msg, null, null);\n  }","label":0}
{"text":"def delete(key, parameters = {})\n      @stores.map {|s| s.delete(key, parameters)}.any?\n    end","label":0}
{"text":"def print_result(result):\n    \"\"\"\"\"\"\n    try:\n        print result\n    except UnicodeEncodeError:\n        if sys.stdout.encoding:\n            print result.encode(sys.stdout.encoding, 'replace')\n        else:\n            print result.encode('utf8')\n    except:\n        print \"Unexpected error attempting to print result\"","label":0}
{"text":"void startInternal() throws LifecycleException {\n        _log.info( getClass().getSimpleName() + \" starts initialization... (configured\" +\n                \" nodes definition \" + _memcachedNodes + \", failover nodes \" + _failoverNodes + \")\" );\n\n        _statistics = Statistics.create( _enableStatistics );\n\n        _memcachedNodesManager = createMemcachedNodesManager( _memcachedNodes, _failoverNodes);\n\n        if(_storage == null) {\n            _storage = createStorageClient( _memcachedNodesManager, _statistics );\n        }\n\n        final String sessionCookieName = _manager.getSessionCookieName();\n        _currentRequest = new CurrentRequest();\n        _trackingHostValve = createRequestTrackingHostValve(sessionCookieName, _currentRequest);\n        final Context context = _manager.getContext();\n        context.getParent().getPipeline().addValve(_trackingHostValve);\n        _trackingContextValve = createRequestTrackingContextValve(sessionCookieName);\n        context.getPipeline().addValve( _trackingContextValve );\n\n        initNonStickyLockingMode( _memcachedNodesManager );\n\n        _transcoderService = createTranscoderService( _statistics );\n\n        _backupSessionService = new BackupSessionService( _transcoderService, _sessionBackupAsync, _sessionBackupTimeout,\n                _backupThreadCount, _storage, _memcachedNodesManager, _statistics );\n\n        _log.info( \"--------\\n- \" + getClass().getSimpleName() + \" finished initialization:\" +\n                \"\\n- sticky: \"+ _sticky +\n                \"\\n- operation timeout: \" + _operationTimeout +\n                \"\\n- node ids: \" + _memcachedNodesManager.getPrimaryNodeIds() +\n                \"\\n- failover node ids: \" + _memcachedNodesManager.getFailoverNodeIds() +\n                \"\\n- storage key prefix: \" + _memcachedNodesManager.getStorageKeyFormat().prefix +\n                \"\\n- locking mode: \" + _lockingMode + \" (expiration: \" + _lockExpiration + \"s)\" +\n                \"\\n--------\");\n\n    }","label":0}
{"text":"def team_required(func=None):\n    \n    def decorator(view_func):\n        @functools.wraps(view_func, assigned=available_attrs(view_func))\n        def _wrapped_view(request, *args, **kwargs):\n            slug = kwargs.pop(\"slug\", None)\n            if not getattr(request, \"team\", None):\n                request.team = get_object_or_404(Team, slug=slug)\n            return view_func(request, *args, **kwargs)\n        return _wrapped_view\n    if func:\n        return decorator(func)\n    return decorator","label":0}
{"text":"func (s *CreateDataSourceInput) SetName(v string) *CreateDataSourceInput {\n\ts.Name = &v\n\treturn s\n}","label":0}
{"text":"private function next($yielded)\n    {\n        if (!$this->generator->valid()) {\n            $result = $this->generator->getReturn();\n\n            if ($result instanceof Awaitable) {\n                $this->reject(new AwaitableReturnedError($result));\n                return;\n            }\n\n            if ($result instanceof Generator) {\n                $this->reject(new GeneratorReturnedError($result));\n                return;\n            }\n\n            $this->resolve($result);\n            return;\n        }\n\n        $this->busy = true;\n\n        if ($yielded instanceof Generator) {\n            $yielded = new self($yielded);\n        }\n\n        $this->current = $yielded;\n\n        if ($yielded instanceof Awaitable) {\n            $yielded->done($this->send, $this->capture);\n        } else {\n            Loop\\queue($this->send, $yielded);\n        }\n\n        $this->busy = false;\n    }","label":0}
{"text":"public function setDefaultLayout($layoutId): bool\n    {\n        $layout = new LayoutRecord();\n        $layout->id = $layoutId;\n        $layout->name = 'Default';\n        $layout->isDefault = true;\n\n        return $layout->save();\n    }","label":0}
{"text":"function(ctx){\n\t\tvar tree = ctx.tree;\n\n\t\t\/\/ Bind init-handler to apply cookie state\n\t\ttree.$div.bind(\"fancytreeinit\", function(event){\n\t\t\ttree.debug(\"COOKIE \" + document.cookie);\n\t\t});\n\t\t\/\/ Init the tree\n\t\tthis._super(ctx);\n\t}","label":0}
{"text":"func (internet Internet) IPv6(v reflect.Value) (interface{}, error) {\n\treturn internet.ipv6(), nil\n}","label":0}
{"text":"def make_request(self, method, *args, **kwargs):\n    \"\"\"\"\"\"\n    if args and not use_signature:\n        raise NotImplementedError(\"Only keyword arguments allowed in Python2\")\n\n    new_kwargs = {kw: unwrap(value) for kw, value in kwargs.items()}\n\n    if use_signature:\n        new_args = tuple(unwrap(value) for value in args)\n        bound_args = method.signature.bind(\n            unwrap(self), *new_args, **new_kwargs).arguments\n\n        # if we encounter any Enum arguments, replace them with their value\n        def translate_enum(arg):\n            return arg.value if isinstance(arg, Enum) else arg\n\n        for k in bound_args:\n            if isinstance(bound_args[k], str):\n                continue\n            if isinstance(bound_args[k], dict):\n                continue\n\n            try:\n                x = [translate_enum(arg) for arg in bound_args[k]]\n                bound_args[k] = x\n            except TypeError:\n                bound_args[k] = translate_enum(bound_args[k])\n\n        # replace `self` with the correct keyword\n        new_kwargs = {(kw if kw != 'self' else method.field_name): v\n                      for kw, v in bound_args.items()}\n        # args = tuple(x.value if isinstance(x, Enum) else x for x in args)\n\n    else:\n        new_kwargs[self.field_name] = unwrap(self)\n\n    return method.request_type(**new_kwargs)","label":0}
{"text":"public function findAllReversed($name, $reload = false, $type = 'all')\n\t{\n\t\treturn $this->findAll($name, $reload, true, $type);\n\t}","label":0}
{"text":"function(el, prevSelector) {\n\n        var selector;\n\n        if (el === this.el) {\n            if (typeof prevSelector === 'string') selector = '> ' + prevSelector;\n            return selector;\n        }\n\n        if (el) {\n\n            var nthChild = V(el).index() + 1;\n            selector = el.tagName + ':nth-child(' + nthChild + ')';\n\n            if (prevSelector) {\n                selector += ' > ' + prevSelector;\n            }\n\n            selector = this.getSelector(el.parentNode, selector);\n        }\n\n        return selector;\n    }","label":0}
{"text":"public function query($statement, $params = array())\r\n    {\r\n        $returnValue = null;\r\n\r\n        \r\n\/\/         $trace=debug_backtrace();\r\n\/\/         $caller=array_shift($trace);\r\n\/\/         $caller=array_shift($trace);\r\n\/\/         common_Logger::d('trace : '. $caller['function'] .$caller['class'] );\r\n\/\/         common_Logger::d($statement . implode('|', $params));\r\n       \t$sth = $this->persistence->query($statement,$params);\r\n\t\t\r\n        if (!empty($sth)){\r\n        \t$returnValue = $sth;\r\n        }\r\n\r\n        $this->incrementNrOfQueries();\r\n        return $returnValue;\r\n    }","label":0}
{"text":"public JsonObject export() {\n        JsonObject result = JsonObject.create();\n        for (MutationToken token : tokens) {\n            JsonObject bucket = result.getObject(token.bucket());\n            if (bucket == null) {\n                bucket = JsonObject.create();\n                result.put(token.bucket(), bucket);\n            }\n\n            bucket.put(\n                String.valueOf(token.vbucketID()),\n                JsonArray.from(token.sequenceNumber(), String.valueOf(token.vbucketUUID()))\n            );\n        }\n        return result;\n    }","label":0}
{"text":"def _symbols():\n    \n    global _SYMBOLS\n    if _SYMBOLS is None:\n        tmp = [(s, 'symbol') for s in _data()['symbol'].keys()]\n        tmp += [(s, 'alpha3') for s in _data()['alpha3'].keys()]\n        tmp += [(s.name, 'name') for s in _data()['alpha3'].values()]\n        _SYMBOLS = sorted(\n            tmp,\n            key=lambda s: (len(s[0]), ord(s[0][0])),\n            reverse=True)\n\n    return _SYMBOLS","label":0}
{"text":"@Override\n    public Predicate or(Expression<Boolean> arg0, Expression<Boolean> arg1)\n    {\n        \/\/ TODO Auto-generated method stub\n        if (arg0 != null && arg1 != null)\n        {\n            if (arg0.getClass().isAssignableFrom(ComparisonPredicate.class) && arg1.getClass().isAssignableFrom(ComparisonPredicate.class))\n            {\n                return new DisjunctionPredicate((Predicate)arg0, (Predicate)arg1);\n            }\n        }\n        return null;\n    }","label":0}
{"text":"public JobClient getJobClient(JobGraph jobGraph) throws Exception {\n\t\tConfiguration configuration = jobGraph.getJobConfiguration();\n\t\tconfiguration.setString(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY, \"localhost\");\n\t\tconfiguration.setInteger(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY, jobManagerRpcPort);\n\t\treturn new JobClient(jobGraph, configuration);\n\t}","label":0}
{"text":"def get(self, ip_address):\n        \n        address = ipaddress.ip_address(ip_address)\n\n        if address.version == 6 and self._metadata.ip_version == 4:\n            raise ValueError('Error looking up {0}. You attempted to look up '\n                             'an IPv6 address in an IPv4-only database.'.format(\n                                 ip_address))\n        pointer = self._find_address_in_tree(address)\n\n        return self._resolve_data_pointer(pointer) if pointer else None","label":0}
{"text":"def setup_smp(self):\n        \n        if self.obssim_smp_pairs is None:\n            return\n        if len(self.obssim_smp_pairs) == 2:\n            if isinstance(self.obssim_smp_pairs[0],str):\n                self.obssim_smp_pairs = [self.obssim_smp_pairs]\n        for obs_smp,sim_smp in self.obssim_smp_pairs:\n            self.log(\"processing {0} and {1} smp files\".format(obs_smp,sim_smp))\n            if not os.path.exists(obs_smp):\n                self.logger.lraise(\"couldn't find obs smp: {0}\".format(obs_smp))\n            if not os.path.exists(sim_smp):\n                self.logger.lraise(\"couldn't find sim smp: {0}\".format(sim_smp))\n            new_obs_smp = os.path.join(self.m.model_ws,\n                                              os.path.split(obs_smp)[-1])\n            shutil.copy2(obs_smp,new_obs_smp)\n            new_sim_smp = os.path.join(self.m.model_ws,\n                                              os.path.split(sim_smp)[-1])\n            shutil.copy2(sim_smp,new_sim_smp)\n            pyemu.smp_utils.smp_to_ins(new_sim_smp)","label":0}
{"text":"func (s *schedule) GetOption(timestamp uint32, length uint32) (id string, score uint) {\n\tid = random.String(32)\n\tscore = s.getConflicts(timestamp, length)\n\titem := &scheduledItem{\n\t\tid:         id,\n\t\tdeadlineAt: s.realtime(timestamp).Add(-1 * Deadline),\n\t\ttimestamp:  timestamp,\n\t\tlength:     length,\n\t\tscore:      score,\n\t}\n\ts.Lock()\n\tdefer s.Unlock()\n\ts.items[id] = item\n\treturn id, score\n}","label":0}
{"text":"private static Parser<Expression> compare(\n      Parser<Expression> operand, String name, Op op) {\n    return Parsers.sequence(\n        operand, term(name).retn(op), operand,\n        BinaryExpression::new);\n  }","label":0}
{"text":"public static void interruptedException(String msg, InterruptedException e)\n      throws IOException {\n    Thread.currentThread().interrupt();\n    LOG.error(msg, e);\n    throw new IOException(msg, e);\n  }","label":0}
{"text":"public static <A> FutureCallback<A> futureCallback(final Action<A> success, final Action<Throwable> failure) {\n        return new FutureCallback<A>() {\n            @Override public void onSuccess(A result) {\n                checkNotNull(success).apply(result);\n            }\n\n            @Override public void onFailure(Throwable t) {\n                checkNotNull(failure).apply(t);\n            }\n        };\n    }","label":0}
{"text":"func (c *Ctx) SetClientCAList(caList *StackOfX509Name) {\n\tC.SSL_CTX_set_client_CA_list(c.ctx, caList.stack)\n\tcaList.shared = true\n}","label":0}
{"text":"func (s *DescribeAutoScalingInstancesInput) SetInstanceIds(v []*string) *DescribeAutoScalingInstancesInput {\n\ts.InstanceIds = v\n\treturn s\n}","label":0}
{"text":"func (w *Watcher) forceAdd(dID string) (*deploymentWatcher, error) {\n\tsnap, err := w.state.Snapshot()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tdeployment, err := snap.DeploymentByID(nil, dID)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tif deployment == nil {\n\t\treturn nil, fmt.Errorf(\"unknown deployment %q\", dID)\n\t}\n\n\treturn w.addLocked(deployment)\n}","label":0}
{"text":"func (s tcSubs) send(tc uint64, underrun bool) {\n\tfor sub := range s {\n\t\tselect {\n\t\tcase <-sub.rpcSub.Err():\n\t\t\tdelete(s, sub)\n\t\tcase <-sub.notifier.Closed():\n\t\t\tdelete(s, sub)\n\t\tdefault:\n\t\t\tif underrun || !sub.onlyUnderrun {\n\t\t\t\tsub.notifier.Notify(sub.rpcSub.ID, tc)\n\t\t\t}\n\t\t}\n\t}\n}","label":0}
{"text":"public function check(MvcEvent $event)\n    {\n        foreach ($this->limits as $limit) {\n            if ($this->storage->check($this->remoteAddress->getIpAddress(), $limit)) {\n                foreach ($limit->getActions() as $action) {\n                    $action($event);\n                }\n            }\n        }\n    }","label":0}
{"text":"def update_constants(nmrstar2cfg=\"\", nmrstar3cfg=\"\", resonance_classes_cfg=\"\", spectrum_descriptions_cfg=\"\"):\n    \n    nmrstar_constants = {}\n    resonance_classes = {}\n    spectrum_descriptions = {}\n\n    this_directory = os.path.dirname(__file__)\n\n    nmrstar2_config_filepath = os.path.join(this_directory, \"conf\/constants_nmrstar2.json\")\n    nmrstar3_config_filepath = os.path.join(this_directory, \"conf\/constants_nmrstar3.json\")\n    resonance_classes_config_filepath = os.path.join(this_directory, \"conf\/resonance_classes.json\")\n    spectrum_descriptions_config_filepath = os.path.join(this_directory, \"conf\/spectrum_descriptions.json\")\n\n    with open(nmrstar2_config_filepath, \"r\") as nmrstar2config, open(nmrstar3_config_filepath, \"r\") as nmrstar3config:\n        nmrstar_constants[\"2\"] = json.load(nmrstar2config)\n        nmrstar_constants[\"3\"] = json.load(nmrstar3config)\n\n    with open(resonance_classes_config_filepath, \"r\") as config:\n        resonance_classes.update(json.load(config))\n\n    with open(spectrum_descriptions_config_filepath, \"r\") as config:\n        spectrum_descriptions.update(json.load(config))\n\n    if nmrstar2cfg:\n        with open(nmrstar2cfg, \"r\") as nmrstar2config:\n            nmrstar_constants[\"2\"].update(json.load(nmrstar2config))\n\n    if nmrstar3cfg:\n        with open(nmrstar2cfg, \"r\") as nmrstar3config:\n            nmrstar_constants[\"3\"].update(json.load(nmrstar3config))\n\n    if resonance_classes_cfg:\n        with open(nmrstar2cfg, \"r\") as config:\n            resonance_classes.update(json.load(config))\n\n    if spectrum_descriptions_cfg:\n        with open(spectrum_descriptions_cfg, \"r\") as config:\n            spectrum_descriptions.update(json.load(config))\n\n    NMRSTAR_CONSTANTS.update(nmrstar_constants)\n    RESONANCE_CLASSES.update(resonance_classes)\n    SPECTRUM_DESCRIPTIONS.update(spectrum_descriptions)","label":0}
{"text":"func Dial(hsAddress string) (*grpc.ClientConn, error) {\n\tmu.Lock()\n\tdefer mu.Unlock()\n\n\tif hsConn == nil {\n\t\t\/\/ Create a new connection to the handshaker service. Note that\n\t\t\/\/ this connection stays open until the application is closed.\n\t\tvar err error\n\t\thsConn, err = hsDialer(hsAddress, grpc.WithInsecure())\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\treturn hsConn, nil\n}","label":0}
{"text":"public function getDays(Month $month)\n    {\n        $days = array();\n\n        for ($dayNo = 1; $dayNo <= $month->numberOfDays(); $dayNo++) {\n            $days[$dayNo] = $this->getDay($month, $dayNo);\n        }\n\n        return $days;\n    }","label":0}
{"text":"def inverse(self):\n        \"\"\"\"\"\"\n        op = self\n\n        class ShearlabOperatorInverse(odl.Operator):\n\n            \"\"\"Inverse of the shearlet transform.\n\n            See Also\n            --------\n            odl.contrib.shearlab.ShearlabOperator\n            \"\"\"\n\n            def __init__(self):\n                \"\"\"Initialize a new instance.\"\"\"\n                self.mutex = op.mutex\n                self.shearlet_system = op.shearlet_system\n                super(ShearlabOperatorInverse, self).__init__(\n                    op.range, op.domain, True)\n\n            def _call(self, x):\n                \"\"\"``self(x)``.\"\"\"\n                with op.mutex:\n                    x = np.moveaxis(x, 0, -1)\n                    return shearrec2D(x, op.shearlet_system)\n\n            @property\n            def adjoint(self):\n                \"\"\"\"\"\"\n                op = self\n\n                class ShearlabOperatorInverseAdjoint(odl.Operator):\n\n                    \"\"\"\n                    Adjoint of the inverse\/Inverse of the adjoint\n                    of shearlet transform.\n\n                    See Also\n                    --------\n                    odl.contrib.shearlab.ShearlabOperator\n                    \"\"\"\n\n                    def __init__(self):\n                        \"\"\"Initialize a new instance.\"\"\"\n\n                        self.mutex = op.mutex\n                        self.shearlet_system = op.shearlet_system\n                        super(ShearlabOperatorInverseAdjoint, self).__init__(\n                            op.range, op.domain, True)\n\n                    def _call(self, x):\n                        \"\"\"``self(x)``.\"\"\"\n                        with op.mutex:\n                            result = shearrecadjoint2D(x, op.shearlet_system)\n                            return np.moveaxis(result, -1, 0)\n\n                    @property\n                    def adjoint(self):\n                        \"\"\"The adjoint operator.\"\"\"\n                        return op\n\n                    @property\n                    def inverse(self):\n                        \"\"\"\"\"\"\n                        return op.inverse.adjoint\n\n                return ShearlabOperatorInverseAdjoint()\n\n            @property\n            def inverse(self):\n                \"\"\"\"\"\"\n                return op\n\n        return ShearlabOperatorInverse()","label":0}
{"text":"def set_pair(self, term1, term2, value, **kwargs):\n\n        \n\n        key = self.key(term1, term2)\n        self.keys.update([term1, term2])\n        self.pairs[key] = value","label":0}
{"text":"func (s *RespondActivityTaskCanceledInput) SetTaskToken(v string) *RespondActivityTaskCanceledInput {\n\ts.TaskToken = &v\n\treturn s\n}","label":0}
{"text":"public function listAction() {\n        $entities = $this->container->get(\"haven_core.category.read_handler\")->getAll();\n\n        foreach ($entities as $entity) {\n            $delete_forms[$entity->getId()] = $this->container->get(\"haven_core.category.form_handler\")->createDeleteForm($entity->getId())->createView();\n        }\n\n        return array(\"entities\" => $entities\n            , 'delete_forms' => isset($delete_forms) && is_array($delete_forms) ? $delete_forms : array()\n            , \"entities\" => $entities);\n    }","label":0}
{"text":"def _folder_item_uncertainty(self, analysis_brain, item):\n        \n\n        item[\"Uncertainty\"] = \"\"\n\n        if not self.has_permission(ViewResults, analysis_brain):\n            return\n\n        result = analysis_brain.getResult\n\n        obj = self.get_object(analysis_brain)\n        formatted = format_uncertainty(obj, result, decimalmark=self.dmk,\n                                       sciformat=int(self.scinot))\n        if formatted:\n            item[\"Uncertainty\"] = formatted\n        else:\n            item[\"Uncertainty\"] = obj.getUncertainty(result)\n\n        if self.is_uncertainty_edition_allowed(analysis_brain):\n            item[\"allow_edit\"].append(\"Uncertainty\")","label":0}
{"text":"public function deleteFile()\n    {\n        if (!$this->getManager()->deleteModel($this->owner->{$this->idAttribute})) {\n            throw new CException('Failed to delete file.');\n        }\n        $this->owner->{$this->idAttribute} = null;\n        if (!$this->owner->save(false)) {\n            throw new CException('Failed to remove file id from owner.');\n        }\n    }","label":0}
{"text":"protected function success($message = null, $results = null)\n    {\n        if($message) {\n            $_SESSION['flash']['message'] = $message;\n            $_SESSION['flash']['type'] = 'success';\n        }\n\n        $this->trigger('html-success', $this, $message, $results);\n        $this->trigger('response-success', $this, $message, $results);\n\n        if(is_string($results)) {\n            \/\/redirect will forcefully exit\n            return (string) eve()->redirect($results);\n        }\n\n        if(!is_null($results)) {\n            $this->body['results'] = $results;\n        }\n\n        return $this->build($this->getTemplate());\n    }","label":0}
{"text":"func (s *Recipes) SetSetup(v []*string) *Recipes {\n\ts.Setup = v\n\treturn s\n}","label":0}
{"text":"public function setup(): Result\n    {\n        $result = new Result();\n        try {\n            $this->connect();\n            $connection = DriverManager::getConnection(['pdo' => $this->databaseHandle]);\n        } catch (Exception | FilesException |DBALException $exception) {\n            $result->addError(new Error($exception->getMessage(), $exception->getCode(), [], 'Connection failed'));\n            return $result;\n        }\n\n        try {\n            $tablesExist = $connection->getSchemaManager()->tablesExist([$this->cacheTableName, $this->tagsTableName]);\n        } \/** @noinspection PhpRedundantCatchClauseInspection *\/ catch (DBALException $exception) {\n            $result->addError(new Error($exception->getMessage(), $exception->getCode(), [], 'Connection failed'));\n            return $result;\n        }\n        if ($tablesExist) {\n            $result->addNotice(new Notice('Tables \"%s\" and \"%s\" (already exists)', null, [$this->cacheTableName, $this->tagsTableName]));\n        } else {\n            $result->addNotice(new Notice('Creating database tables \"%s\" & \"%s\"...', null, [$this->cacheTableName, $this->tagsTableName]));\n        }\n\n        $fromSchema = $connection->getSchemaManager()->createSchema();\n        $schemaDiff = (new Comparator())->compare($fromSchema, $this->getCacheTablesSchema());\n\n        try {\n            $statements = $schemaDiff->toSaveSql($connection->getDatabasePlatform());\n        } catch (DBALException $exception) {\n            $result->addError(new Error($exception->getMessage(), $exception->getCode(), [], 'Connection failed'));\n            return $result;\n        }\n        if ($statements === []) {\n            $result->addNotice(new Notice('Table schema is up to date, no migration required'));\n            return $result;\n        }\n        $connection->beginTransaction();\n        try {\n            foreach ($statements as $statement) {\n                $result->addNotice(new Notice('<info>++<\/info> %s', null, [$statement]));\n                $connection->exec($statement);\n            }\n            $connection->commit();\n        } catch (\\Exception $exception) {\n            try {\n                $connection->rollBack();\n            } catch (\\Exception $exception) {\n            }\n            $result->addError(new Error('Exception while trying to setup PdoBackend: %s', $exception->getCode(), [$exception->getMessage()]));\n        }\n        return $result;\n    }","label":0}
{"text":"public function decrypt(string $value, string $key, bool $base64 = false)\n    {\n        if ($base64) {\n            $value = base64_decode($value);\n        }\n        $ret = $this->decryptBinary($value, $key);\n        return unserialize($ret);\n    }","label":0}
{"text":"def export_data(self):\n        \n\n        def export_field(value):\n            \"\"\"\n            Export item\n            \"\"\"\n            try:\n                return value.export_data()\n            except AttributeError:\n                return value\n\n        if self.__modified_data__ is not None:\n            return [export_field(value) for value in self.__modified_data__]\n        return [export_field(value) for value in self.__original_data__]","label":0}
{"text":"def include(self, target):\n        \n        for target_ in listify(target):\n            if isinstance(target_, Section):\n                target_ = ':' + target_.name\n\n            self._set('ini', target_, multi=True)\n\n        return self","label":0}
{"text":"func TexturedPolygon(renderer *sdl.Renderer, vx, vy []int16, surface *sdl.Surface, textureDX, textureDY int) bool {\n\t_len := C.int(min(len(vx), len(vy)))\n\tif _len == 0 {\n\t\treturn true\n\t}\n\t_vx := (*C.Sint16)(unsafe.Pointer(&vx[0]))\n\t_vy := (*C.Sint16)(unsafe.Pointer(&vy[0]))\n\t_surface := (*C.SDL_Surface)(unsafe.Pointer(surface))\n\t_textureDX := C.int(textureDX)\n\t_textureDY := C.int(textureDY)\n\treturn C.texturedPolygon((*C.SDL_Renderer)(unsafe.Pointer(renderer)), _vx, _vy, _len, _surface, _textureDX, _textureDY) == 0\n}","label":0}
{"text":"func NewMockAccessTokenStorage(ctrl *gomock.Controller) *MockAccessTokenStorage {\n\tmock := &MockAccessTokenStorage{ctrl: ctrl}\n\tmock.recorder = &MockAccessTokenStorageMockRecorder{mock}\n\treturn mock\n}","label":0}
{"text":"func (p *PUContext) RetrieveCachedExternalFlowPolicy(id string) (interface{}, error) {\n\treturn p.externalIPCache.Get(id)\n}","label":0}
{"text":"public void marshall(Player player, ProtocolMarshaller protocolMarshaller) {\n\n        if (player == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(player.getPlayerId(), PLAYERID_BINDING);\n            protocolMarshaller.marshall(player.getPlayerAttributes(), PLAYERATTRIBUTES_BINDING);\n            protocolMarshaller.marshall(player.getTeam(), TEAM_BINDING);\n            protocolMarshaller.marshall(player.getLatencyInMs(), LATENCYINMS_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }","label":0}
{"text":"public static function getResourcesFolder(string $extensionKey, string $prefix = 'EXT:'): string {\n    return self::resourcesFolder($extensionKey, $prefix);\n  }","label":0}
{"text":"func (s *CreateReplicationTaskInput) SetCdcStartTime(v time.Time) *CreateReplicationTaskInput {\n\ts.CdcStartTime = &v\n\treturn s\n}","label":0}
{"text":"public int unprotect(RtpPacket packet) {\n\t\tif (txSessAuthKey == null) {\n\t\t\t\/\/ Only the tx session key is set at session start, rx is done when\n\t\t\t\/\/ 1st packet received\n\t\t\tlog(\"unprotect() called out of session\");\n\t\t\treturn UNPROTECT_SESSION_NOT_STARTED;\n\t\t}\n\t\tif (packet == null) {\n\t\t\tlogWarning(\"unprotect() called with null RtpPacket\");\n\t\t\treturn UNPROTECT_NULL_PACKET;\n\t\t}\n\t\tif (previousSSRC != packet.getSscr()) {\n\t\t\tpreviousSSRC = packet.getSscr();\n\t\t\t\/\/ reset indexes & Seq\n\t\t\trxRoc = 0;\n\t\t\trxSeq = packet.getSequenceNumber();\n\t\t\treplayWindow.removeAllElements();\n\t\t\tlogWarning(\"New SSRC detected. Resetting SRTP replay protection\");\n\t\t}\n\t\tif (!receivedFirst) {\n\t\t\treceivedFirst = true;\n\t\t\trxSeq = packet.getSequenceNumber();\n\t\t\tif (VERBOSE) {\n\t\t\t\tlog(\"unprotect() iRxSeq = \" + rxSeq);\n\t\t\t}\n\t\t\tif (!rxSessionKeyDerivation()) {\n\t\t\t\tlogWarning(\"unprotect() unable to create session keys\");\n\t\t\t\treturn UNPROTECT_ERROR_DECRYPTING;\n\t\t\t}\n\t\t}\n\t\t\/\/ First need to work out the implicit srtp sequence number,\n\t\t\/\/ see rfc3711 appendix A & section 3.3.1\n\t\t\/\/ Using same naming convention as in rfc for ROC estimate (v)\n\t\t\/\/ Needs to be done before authentication as v is used as part of auth\n\t\tlong v;\n\t\tint seq = packet.getSequenceNumber();\n\t\tif (rxSeq < 0x8000) {\n\t\t\tif ((seq - rxSeq) > 0x8000) {\n\t\t\t\tv = rxRoc - 0x10000L;\n\t\t\t} else {\n\t\t\t\tv = rxRoc;\n\t\t\t}\n\t\t} else {\n\t\t\tif ((rxSeq - 0x8000) > seq) {\n\t\t\t\tv = rxRoc + 0x10000L;\n\t\t\t} else {\n\t\t\t\tv = rxRoc;\n\t\t\t}\n\t\t}\n\n\t\tlong index = v + seq;\n\t\tif (SUPER_VERBOSE) {\n\t\t\tlog(\"unprotect(), seq = \" + seq);\n\t\t\tlogBuffer(\"unprotect(), rcvd pkt = \", packet.getPacket());\n\t\t}\n\t\tif (isReplayedPacket(index)) {\n\t\t\tlogWarning(\"Replayed packet received, sequence number=#\" + seq\n\t\t\t\t\t+ \", index=\" + index);\n\t\t\treturn UNPROTECT_REPLAYED_PACKET;\n\t\t}\n\n\t\t\/\/ Now need to check authentication & remove auth bytes from payload\n\t\tint originalLen = packet.getPayloadLength();\n\t\tint newLen = originalLen - getHmacAuthSizeBytes();\n\n\t\t\/\/ we'll reduce the payload length but the auth-code will still be\n\t\t\/\/ present after the payload for comparison\n\t\tint pktAuthCodePos = packet.getHeaderLength() + newLen;\n\t\tpacket.setPayloadLength(newLen);\n\t\tbyte[] authCode = null;\n\t\ttry {\n\t\t\tauthCode = getAuthentication(packet, v, false); \/\/ iRxSessAuthKey);\n\t\t} catch (Throwable e) {\n\t\t\tlogError(\"unprotect() error getting authCode EX: \" + e);\n\t\t\te.printStackTrace();\n\t\t\treturn UNPROTECT_ERROR_DECRYPTING;\n\t\t}\n\n\t\tif (!platform.getUtils().equals(authCode, 0, packet.getPacket(),\n\t\t\t\tpktAuthCodePos, getHmacAuthSizeBytes())) {\n\t\t\t\/\/ Auth failed\n\t\t\tlogWarning(\"unprotect() Authentication failed\");\n\t\t\tlogBuffer(\"authCode:\", authCode);\n\t\t\tbyte[] pktAuthCode = new byte[getHmacAuthSizeBytes()];\n\t\t\tSystem.arraycopy(packet.getPacket(), pktAuthCodePos, pktAuthCode,\n\t\t\t\t\t0, getHmacAuthSizeBytes());\n\t\t\tlogBuffer(\"pktAuthCode:\", pktAuthCode);\n\t\t\tlogBuffer(\"iRxSessAuthKey:\", rxSessAuthKey);\n\t\t\tlog(\"v = \" + Integer.toHexString((int) v) + \" (\" + v + \")\");\n\t\t\treturn UNPROTECT_INVALID_PACKET;\n\t\t}\n\n\t\tif (VERBOSE) {\n\t\t\tlog(\"unprotect() -------- Authenticated OK --------\");\n\t\t}\n\n\t\t\/\/ Authenticated, now unprotect the payload\n\t\t\/\/ Note the use of encryptIV() in transformPayload is correct\n\t\t\/\/ At 1st sight, might expect to use decrypt but unprotection consists\n\t\t\/\/ of XORing payload with an encrypted IV to obtain original payload\n\t\t\/\/ data\n\n\t\tif (!transformPayload(packet, v, seq, rxSessSaltKey, false)) {\n\t\t\tlog(\"unprotect() transformPayload error, decryption failed\");\n\t\t\treturn UNPROTECT_ERROR_DECRYPTING;\n\t\t}\n\n\t\t\/\/ Payload now unprotected. Update the latest seq & ROC ready for next\n\t\t\/\/ packet\n\t\tif (v == rxRoc) {\n\t\t\tif (seq > rxSeq) {\n\t\t\t\trxSeq = seq;\n\t\t\t}\n\t\t} else if (v == rxRoc + 0x10000L) {\n\t\t\trxRoc += 0x10000L;\n\t\t\trxSeq = seq;\n\t\t}\n\n\t\tif (SUPER_VERBOSE) {\n\t\t\tlogBuffer(\"unprotect(), new packet - \", packet.getPacket());\n\t\t}\n\t\treturn UNPROTECT_OK;\n\t}","label":0}
{"text":"@Override\n    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        preProcessRequest(request);\n\n        DefaultServerDolphin serverDolphin = resolveServerDolphin(request);\n\n        String input = readInput(request);\n        if (LOG.isLoggable(Level.FINEST)) {\n            LOG.finest(\"received json: \" + input);\n        }\n\n        List<Command> commands = decodeInput(serverDolphin.getServerConnector().getCodec(), input);\n\n        List<Command> results = handleCommands(serverDolphin.getServerConnector(), commands);\n\n        String output = encodeOutput(serverDolphin.getServerConnector().getCodec(), results);\n\n        writeHeaders(request, response, results);\n\n        if (LOG.isLoggable(Level.FINEST)) {\n            LOG.finest(\"sending json response: \" + output);\n        }\n        writeOutput(response, output);\n\n        postProcessResponse(response);\n    }","label":0}
{"text":"private function saveStringToLocales()\n    {\n        $gettextEntries = $this->extractGettextStrings();\n\n        $root = Strata::getRootPath();\n\n        foreach ($gettextEntries as $translation) {\n            $references = $translation->getReferences();\n            $translation->deleteReferences();\n\n            foreach ($references as $idx => $context) {\n                $translation->addReference(str_replace($root, \"~\", $context[0]), $context[1]);\n            }\n        }\n\n        foreach ($this->getLocales() as $locale) {\n            $this->addGettextEntriesToLocale($locale, $gettextEntries);\n        }\n    }","label":0}
{"text":"def get_q_home(env):\n    \"\"\"\"\"\"\n    q_home = env.get('QHOME')\n    if q_home:\n        return q_home\n    for v in ['VIRTUAL_ENV', 'HOME']:\n        prefix = env.get(v)\n        if prefix:\n            q_home = os.path.join(prefix, 'q')\n            if os.path.isdir(q_home):\n                return q_home\n    if WINDOWS:\n        q_home = os.path.join(env['SystemDrive'], r'\\q')\n        if os.path.isdir(q_home):\n            return q_home\n    raise RuntimeError('No suitable QHOME.')","label":0}
{"text":"public function up()\n    {\n        $table = file_get_contents(dirname(__FILE__) . '\/media.sql');\n        return $this->db->createCommand($table)->execute();\n    }","label":0}
{"text":"function Heatmap() {\n    var canvas = zrUtil.createCanvas();\n    this.canvas = canvas;\n\n    this.blurSize = 30;\n    this.pointSize = 20;\n\n    this.maxOpacity = 1;\n    this.minOpacity = 0;\n\n    this._gradientPixels = {};\n}","label":0}
{"text":"function( cb ){\n\t\t\tvar resolvedHref = ss.href;\n\t\t\tvar i = sheets.length;\n\t\t\twhile( i-- ){\n\t\t\t\tif( sheets[ i ].href === resolvedHref ){\n\t\t\t\t\treturn cb();\n\t\t\t\t}\n\t\t\t}\n\t\t\tsetTimeout(function() {\n\t\t\t\tonloadcssdefined( cb );\n\t\t\t});\n\t\t}","label":0}
{"text":"def to_gufunc_string(self):\n        \n        all_dims = self.all_core_dims\n        dims_map = dict(zip(sorted(all_dims), range(len(all_dims))))\n        input_core_dims = [['dim%d' % dims_map[dim] for dim in core_dims]\n                           for core_dims in self.input_core_dims]\n        output_core_dims = [['dim%d' % dims_map[dim] for dim in core_dims]\n                            for core_dims in self.output_core_dims]\n        alt_signature = type(self)(input_core_dims, output_core_dims)\n        return str(alt_signature)","label":0}
{"text":"public synchronized void push(@Nullable T item) {\n        if( waiting == null ) {\n            throw new IllegalStateException(\"Invalid attempt to add an item to a completed list.\");\n        }\n        if( filter != null ) {\n            try {\n                if( !filter.filter(item) ) {\n                    return;\n                }\n            }\n            catch( Throwable t ) {\n                logger.error(\"[\" + this + \"] Error filtering \" + item + \": \" + t.getMessage());\n                Exception e;\n                \n                if( t instanceof Exception ) {\n                    e = (Exception)t;\n                }\n                else {\n                    e = new RuntimeException(t);\n                }\n                setLoadException(e);\n                return;\n            }\n        }\n        waiting.add(item);\n        lastTouch = System.currentTimeMillis();\n        notifyAll();\n    }","label":0}
{"text":"private function getRFC1123DateString() {\n        $date = new \\DateTime(null, new \\DateTimeZone(\"UTC\"));\n        return str_replace(\"+0000\", \"GMT\", $date->format(\\DateTime::RFC1123));\n    }","label":0}
{"text":"public void handleInitiateResponseMessage(InitiateResponseMessage message)\n    {\n        final VoltTrace.TraceEventBatch traceLog = VoltTrace.log(VoltTrace.Category.MPI);\n        if (traceLog != null) {\n            traceLog.add(() -> VoltTrace.endAsync(\"initmp\", message.getTxnId()));\n        }\n\n        DuplicateCounter counter = m_duplicateCounters.get(message.getTxnId());\n\n        \/\/ A transaction may be routed back here for EveryPartitionTask via leader migration\n        if (counter != null && message.isMisrouted()) {\n            tmLog.info(\"The message on the partition is misrouted. TxnID: \" + TxnEgo.txnIdToString(message.getTxnId()));\n            Long newLeader = m_leaderMigrationMap.get(message.m_sourceHSId);\n            if (newLeader != null) {\n                \/\/ Update the DuplicateCounter with new replica\n                counter.updateReplica(message.m_sourceHSId, newLeader);\n                m_leaderMigrationMap.remove(message.m_sourceHSId);\n\n                \/\/ Leader migration has updated the leader, send the request to the new leader\n                m_mailbox.send(newLeader, counter.getOpenMessage());\n            } else {\n                \/\/ Leader migration not done yet.\n                m_mailbox.send(message.m_sourceHSId, counter.getOpenMessage());\n            }\n            return;\n        }\n\n        if (counter != null) {\n            int result = counter.offer(message);\n            if (result == DuplicateCounter.DONE) {\n                m_duplicateCounters.remove(message.getTxnId());\n                \/\/ Only advance the truncation point on committed transactions that sent fragments to SPIs.\n                \/\/ See ENG-4211 & ENG-14563\n                if (message.shouldCommit() && message.haveSentMpFragment()) {\n                    m_repairLogTruncationHandle = m_repairLogAwaitingCommit;\n                    m_repairLogAwaitingCommit = message.getTxnId();\n                }\n                m_outstandingTxns.remove(message.getTxnId());\n\n                m_mailbox.send(counter.m_destinationId, message);\n            }\n            else if (result == DuplicateCounter.MISMATCH) {\n                VoltDB.crashLocalVoltDB(\"HASH MISMATCH running every-site system procedure.\", true, null);\n            } else if (result == DuplicateCounter.ABORT) {\n                VoltDB.crashLocalVoltDB(\"PARTIAL ROLLBACK\/ABORT running every-site system procedure.\", true, null);\n            }\n            \/\/ doing duplicate suppresion: all done.\n        }\n        else {\n            \/\/ Only advance the truncation point on committed transactions that sent fragments to SPIs.\n            if (message.shouldCommit() && message.haveSentMpFragment()) {\n                m_repairLogTruncationHandle = m_repairLogAwaitingCommit;\n                m_repairLogAwaitingCommit = message.getTxnId();\n            }\n            MpTransactionState txn = (MpTransactionState)m_outstandingTxns.remove(message.getTxnId());\n            assert(txn != null);\n            \/\/ the initiatorHSId is the ClientInterface mailbox. Yeah. I know.\n            m_mailbox.send(message.getInitiatorHSId(), message);\n            \/\/ We actually completed this MP transaction.  Create a fake CompleteTransactionMessage\n            \/\/ to send to our local repair log so that the fate of this transaction is never forgotten\n            \/\/ even if all the masters somehow die before forwarding Complete on to their replicas.\n            CompleteTransactionMessage ctm = new CompleteTransactionMessage(m_mailbox.getHSId(),\n                    message.m_sourceHSId, message.getTxnId(), message.isReadOnly(), 0,\n                    !message.shouldCommit(), false, false, false, txn.isNPartTxn(),\n                    message.m_isFromNonRestartableSysproc, false);\n            ctm.setTruncationHandle(m_repairLogTruncationHandle);\n            \/\/ dump it in the repair log\n            \/\/ hacky castage\n            ((MpInitiatorMailbox)m_mailbox).deliverToRepairLog(ctm);\n        }\n    }","label":0}
{"text":"def moments(self):\n        \"\"\"\"\"\"\n        moment1 = statstools.calc_mean_time(self.delays, self.coefs)\n        moment2 = statstools.calc_mean_time_deviation(\n            self.delays, self.coefs, moment1)\n        return numpy.array([moment1, moment2])","label":0}
{"text":"public static boolean isAuthenticatingAtPublicWorkstation(final RequestContext ctx) {\n        if (ctx.getFlowScope().contains(PUBLIC_WORKSTATION_ATTRIBUTE)) {\n            LOGGER.debug(\"Public workstation flag detected. SSO session will be considered renewed.\");\n            return true;\n        }\n        return false;\n    }","label":0}
{"text":"func (s *sample) Drive() {\n\tdegree++\n\tif degree >= 360 {\n\t\tdegree = 0\n\t}\n\n\tp := s.ball.GetPosition()\n\tswitch s.buttonState {\n\tcase ctrlUp:\n\t\ts.ball.SetPositionY(p.Y + 1)\n\tcase ctrlDown:\n\t\ts.ball.SetPositionY(p.Y - 1)\n\t}\n\n\ts.ball.SetRotate(degree * math.Pi \/ 180)\n}","label":0}
{"text":"func (p Parameters) Encode() string {\n\tvar buf bytes.Buffer\n\tkeys := make([]string, 0, len(p))\n\tfor k := range p {\n\t\tkeys = append(keys, k)\n\t}\n\tsort.Strings(keys)\n\tfor _, k := range keys {\n\t\tif buf.Len() > 0 {\n\t\t\tbuf.WriteByte('&')\n\t\t}\n\t\tbuf.WriteString(url.QueryEscape(k) + \"=\")\n\t\tbuf.WriteString(url.QueryEscape(p[k]))\n\t}\n\treturn buf.String()\n}","label":0}
{"text":"function lookup(tag, range) {\n  var pos\n\n  tag = lower(tag)\n  range = lower(range)\n\n  while (true) {\n    if (range === asterisk || tag === range) {\n      return true\n    }\n\n    pos = range.lastIndexOf(dash)\n\n    if (pos === -1) {\n      return false\n    }\n\n    if (pos > 3 && range.charAt(pos - 2) === dash) {\n      pos -= 2\n    }\n\n    range = range.substring(0, pos)\n  }\n}","label":0}
{"text":"func (s *ListResolverRuleAssociationsInput) SetFilters(v []*Filter) *ListResolverRuleAssociationsInput {\n\ts.Filters = v\n\treturn s\n}","label":0}
{"text":"def _getStrips(self, scraperobj):\n        \"\"\"\"\"\"\n        if self.options.all or self.options.cont:\n            numstrips = None\n        elif self.options.numstrips:\n            numstrips = self.options.numstrips\n        else:\n            # get current strip\n            numstrips = 1\n        try:\n            if scraperobj.isComplete(self.options.basepath):\n                out.info(u\"All comics are already downloaded.\")\n                return 0\n            for strip in scraperobj.getStrips(numstrips):\n                skipped = self.saveComicStrip(strip)\n                if skipped and self.options.cont:\n                    # stop when retrieval skipped an image for one comic strip\n                    out.info(u\"Stop retrieval because image file already exists\")\n                    break\n                if self.stopped:\n                    break\n            if self.options.all and not (self.errors or self.options.dry_run or\n                                    self.options.cont or scraperobj.indexes):\n                scraperobj.setComplete(self.options.basepath)\n        except Exception as msg:\n            out.exception(msg)\n            self.errors += 1","label":0}
{"text":"def import_field(field_classpath):\n    \n    if '.' in field_classpath:\n        fully_qualified = field_classpath\n    else:\n        fully_qualified = \"django.db.models.%s\" % field_classpath\n    try:\n        return import_dotted_path(fully_qualified)\n    except ImportError:\n        raise ImproperlyConfigured(\"The EXTRA_MODEL_FIELDS setting contains \"\n                                   \"the field '%s' which could not be \"\n                                   \"imported.\" % field_classpath)","label":0}
{"text":"public function setLanguage($lang = 'en', $langDir = __DIR__ . '\/lang\/')\n    {\n        $this->lang    = $lang;\n        $this->langDir = $langDir;\n\n        $langFile = realpath($langDir . $lang . '.php');\n        if (!file_exists($langFile)) {\n            throw new \\InvalidArgumentException('No such file: ' . $langDir . $lang . '.php');\n        }\n\n        $callable = require $langFile;\n        $callable($this);\n\n        return $this;\n    }","label":0}
{"text":"function getPixelArray() {\n  var gl = store.get('gl')\n  var w = this._.texture.width;\n  var h = this._.texture.height;\n  var array = new Uint8Array(w * h * 4);\n  this._.texture.drawTo(function() {\n    gl.readPixels(0, 0, w, h, gl.RGBA, gl.UNSIGNED_BYTE, array);\n  });\n  return array;\n}","label":0}
{"text":"def get_object(self, queryset=None):\n        \n        profile, dummy = ForumProfile.objects.get_or_create(user=self.request.user)\n        return profile","label":0}
{"text":"def _from_objects(cls, objects):\n        \n        vertices = ElementTransformSet(transform=id)\n        out_edges = KeyTransformDict(transform=id)\n        in_edges = KeyTransformDict(transform=id)\n        for obj in objects:\n            vertices.add(obj)\n            out_edges[obj] = []\n            in_edges[obj] = []\n\n        # Edges are identified by simple integers, so\n        # we can use plain dictionaries for mapping\n        # edges to their heads and tails.\n        edge_label = itertools.count()\n        edges = set()\n        head = {}\n        tail = {}\n\n        for referrer in vertices:\n            for referent in gc.get_referents(referrer):\n                if referent not in vertices:\n                    continue\n                edge = next(edge_label)\n                edges.add(edge)\n                tail[edge] = referrer\n                head[edge] = referent\n                out_edges[referrer].append(edge)\n                in_edges[referent].append(edge)\n\n        return cls._raw(\n            vertices=vertices,\n            edges=edges,\n            out_edges=out_edges,\n            in_edges=in_edges,\n            head=head,\n            tail=tail,\n        )","label":0}
{"text":"function minify(src) {\n       \/\/ remove comments\n       src = src.replace(\/\\\/\\*[\\s\\S]*?\\*\\\/|([^\\\\:]|^)\\\/\\\/.*$\/gm, \"$1\"); \/\/ Remove leading and trailing whitespace from lines\n\n       src = src.replace(\/(\\\\n\\s+)|(\\s+\\\\n)\/g, \"\"); \/\/ Remove line breaks\n\n       src = src.replace(\/(\\\\r|\\\\n)+\/g, \"\"); \/\/ Remove unnecessary whitespace\n\n       src = src.replace(\/\\s*([;,[\\](){}\\\\\\\/\\-+*|^&!=<>?~%])\\s*\/g, \"$1\");\n       return src;\n     }","label":0}
{"text":"public static DeploymentEntry create(Map<String, Object> config) {\n\t\treturn new DeploymentEntry(ConfigUtil.normalizeYaml(config));\n\t}","label":0}
{"text":"public static Module combineAndOverride(List<? extends Module> modules) {\n        Iterator<? extends Module> iter = modules.iterator();\n        Module current = Modules.EMPTY_MODULE;\n        if (iter.hasNext()) {\n            current = iter.next();\n            if (iter.hasNext()) {\n                current = Modules.override(current).with(iter.next());\n            }\n        }\n        \n        return current;\n    }","label":0}
{"text":"public int getDataTransferProtocolVersion() throws IOException {\n    synchronized (dataTransferVersion) {\n      if (dataTransferVersion == -1) {\n        \/\/ Get the version number from NN\n        try {\n          int remoteDataTransferVersion = namenode.getDataTransferProtocolVersion();\n          updateDataTransferProtocolVersionIfNeeded(remoteDataTransferVersion);\n        } catch (RemoteException re) {\n          IOException ioe = re.unwrapRemoteException(IOException.class);\n          if (ioe.getMessage().startsWith(IOException.class.getName() + \": \" +\n              NoSuchMethodException.class.getName())) {\n            dataTransferVersion = 14; \/\/ last version not supportting this RPC\n          } else {\n            throw ioe;\n          }\n        }\n        if (LOG.isDebugEnabled()) {\n\t\tLOG.debug(\"Data Transfer Protocal Version is \"+ dataTransferVersion);\n        }\n      }\n      return dataTransferVersion;\n    }\n  }","label":0}
{"text":"public function release(): bool\n    {\n        $success = true;\n        if (is_resource($this->filePointer)) {\n            \/\/ FIXME: The lockfile should be unlocked at this point but this will again lead to race conditions,\n            \/\/ so we need to find out how to do this in a safe way. Keeping the lock files is very inode intensive\n            \/\/ and should therefore change ASAP.\n            if (flock($this->filePointer, LOCK_UN) === false) {\n                $success = false;\n            }\n            fclose($this->filePointer);\n        }\n\n        return $success;\n    }","label":0}
{"text":"public function buildCriteria()\n    {\n        $criteria = new Criteria(C2PTableMap::DATABASE_NAME);\n\n        if ($this->isColumnModified(C2PTableMap::COL_CATEGORY_ID)) {\n            $criteria->add(C2PTableMap::COL_CATEGORY_ID, $this->category_id);\n        }\n        if ($this->isColumnModified(C2PTableMap::COL_PAGE_ID)) {\n            $criteria->add(C2PTableMap::COL_PAGE_ID, $this->page_id);\n        }\n\n        return $criteria;\n    }","label":0}
{"text":"private static List<Column> getAncestorColumns(Resource currentResource, Resource rootResource) {\n    List<Column> columns = new ArrayList<>();\n    List<Resource> ancestors = getAncestors(currentResource, rootResource);\n    for (int i = 0; i < ancestors.size(); i++) {\n      Resource r = ancestors.get(i);\n\n      String activeId;\n      if (i < ancestors.size() - 1) {\n        activeId = ancestors.get(i + 1).getPath();\n      }\n      else {\n        activeId = currentResource.getPath();\n      }\n\n      Column column = new Column()\n          .columnId(r.getPath())\n          .lazy(true)\n          .activeId(activeId);\n      columns.add(column);\n    }\n    return columns;\n  }","label":0}
{"text":"public function signup() : Response\n    {\n        $user = $this->userModel;\n\n        $request = $this->request->getPost();\n\n        if (empty($request)) {\n            $request = $this->request->getJsonRawBody(true);\n        }\n\n        $user->email = $this->request->getPost('email', 'email');\n        $user->firstname = ltrim(trim($this->request->getPost('firstname', 'string')));\n        $user->lastname = ltrim(trim($this->request->getPost('lastname', 'string')));\n        $user->password = ltrim(trim($this->request->getPost('password', 'string')));\n        $userIp = !defined('API_TESTS') ? $this->request->getClientAddress() : '127.0.0.1'; \/\/help getting the client ip on scrutinizer :(\n        $user->displayname = ltrim(trim($this->request->getPost('displayname', 'string')));\n        $user->defaultCompanyName = ltrim(trim($this->request->getPost('default_company', 'string')));\n\n        \/\/Ok let validate user password\n        $validation = new Validation();\n        $validation->add('password', new PresenceOf(['message' => _('The password is required.')]));\n        $validation->add('firstname', new PresenceOf(['message' => _('The firstname is required.')]));\n        $validation->add('email', new EmailValidator(['message' => _('The email is not valid.')]));\n\n        $validation->add(\n            'password',\n            new StringLength([\n                'min' => 8,\n                'messageMinimum' => _('Password is too short. Minimum 8 characters.'),\n            ])\n        );\n\n        $validation->add('password', new Confirmation([\n            'message' => _('Password and confirmation do not match.'),\n            'with' => 'verify_password',\n        ]));\n\n        \/\/validate this form for password\n        $messages = $validation->validate($this->request->getPost());\n        if (count($messages)) {\n            foreach ($messages as $message) {\n                throw new Exception($message);\n            }\n        }\n\n        \/\/user registration\n        try {\n            $this->db->begin();\n\n            $user->signup();\n\n            $this->db->commit();\n        } catch (Exception $e) {\n            $this->db->rollback();\n\n            throw new Exception($e->getMessage());\n        }\n\n        \/\/login the user\n        $random = new \\Phalcon\\Security\\Random();\n\n        $sessionId = $random->uuid();\n\n        \/\/save in user logs\n        $payload = [\n            'sessionId' => $sessionId,\n            'email' => $user->getEmail(),\n            'iat' => time(),\n        ];\n\n        $token = $this->auth->make($payload);\n\n        \/\/start session\n        $session = new Sessions();\n        $session->start($user, $sessionId, $token, $userIp, 1);\n\n        $authSession = [\n            'token' => $token,\n            'time' => date('Y-m-d H:i:s'),\n            'expires' => date('Y-m-d H:i:s', time() + $this->config->jwt->payload->exp),\n            'id' => $user->getId(),\n        ];\n\n        $user->password = null;\n        $this->sendEmail($user, 'signup');\n\n        return $this->response([\n            'user' => $user,\n            'session' => $authSession\n        ]);\n    }","label":0}
{"text":"def combine(self, pubkeys):\n        \"\"\"\"\"\"\n        assert len(pubkeys) > 0\n\n        outpub = ffi.new('secp256k1_pubkey *')\n        for item in pubkeys:\n            assert ffi.typeof(item) is ffi.typeof('secp256k1_pubkey *')\n\n        res = lib.secp256k1_ec_pubkey_combine(\n            self.ctx, outpub, pubkeys, len(pubkeys))\n        if not res:\n            raise Exception('failed to combine public keys')\n\n        self.public_key = outpub\n        return outpub","label":0}
{"text":"public static CalibrationDetectorCircleHexagonalGrid circleHexagonalGrid( @Nullable ConfigCircleHexagonalGrid config ,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t ConfigGridDimen configGrid ) {\n\t\tif( config == null )\n\t\t\tconfig = new ConfigCircleHexagonalGrid();\n\t\tconfig.checkValidity();\n\n\t\treturn new CalibrationDetectorCircleHexagonalGrid(config,configGrid);\n\t}","label":0}
{"text":"public function setValue($name, $value) {\n        $this->_states[count($this->_states) - 1][1][$name] = $value;\n    }","label":0}
{"text":"public static <T> T retry(final Callable<T> f, Predicate<Throwable> shouldRetry, final int maxTries) throws Exception\n  {\n    return retry(f, shouldRetry, 0, maxTries);\n  }","label":0}
{"text":"function getScheduledName(arr) {\n    var name = arr.slice(0).shift()\n    return [`${app}-production-${name}`, `${app}-staging-${name}`]\n  }","label":0}
{"text":"public double tune(AbstractStochasticCachingDiffUpdateFunction function, double[] initial, int sampleSize, double seta)\r\n  {\r\n    Timing timer = new Timing();\r\n    int[] sample = function.getSample(sampleSize);\r\n    double sobj = getObjective(function, initial, 1, sample);\r\n    double besteta = 1;\r\n    double bestobj = sobj;\r\n    double eta = seta;\r\n    int totest = 10;\r\n    double factor = 2;\r\n    boolean phase2 = false;\r\n    while (totest > 0 || !phase2)\r\n    {\r\n      double obj = tryEta(function, initial, sample, eta);\r\n      boolean okay = (obj < sobj);\r\n      sayln(\"  Trying eta=\" + eta + \"  obj=\" + obj + ((okay)? \"(possible)\":\"(too large)\"));\r\n      if (okay)\r\n      {\r\n        totest -= 1;\r\n        if (obj < bestobj) {\r\n          bestobj = obj;\r\n          besteta = eta;\r\n        }\r\n      }\r\n      if (! phase2)\r\n      {\r\n        if (okay) {\r\n          eta = eta * factor;\r\n        } else {\r\n          phase2 = true;\r\n          eta = seta;\r\n        }\r\n      }\r\n      if (phase2) {\r\n        eta = eta \/ factor;\r\n      }\r\n    }\r\n    \/\/ take it on the safe side (implicit regularization)\r\n    besteta \/= factor;\r\n    \/\/ determine t\r\n    t0 = (int) (1 \/ (besteta * lambda));\r\n    sayln(\"  Taking eta=\" + besteta + \" t0=\" + t0);\r\n    sayln(\"  Tuning completed in: \" + Timing.toSecondsString(timer.report()) + \" s\");\r\n    return besteta;\r\n  }","label":0}
{"text":"public function isFamily($name)\n    {\n        if ($this->getName() == $name) {\n            return true;\n        }\n\n        if (isset($this->family)) {\n            if ($this->family->getName() == $name) {\n                return true;\n            }\n        }\n\n        return false;\n    }","label":0}
{"text":"def randdict(self):\n        \n        return {\n            self.randstr: self._map_type(int)\n            for x in range(self.random.randint(3, 10))}","label":0}
{"text":"public function addToAttribute($name, $value)\n    {\n        $attr = $this->getAttribute($name);\n        $this->setAttribute($name, $attr . $value);\n\n        return $this;\n    }","label":0}
{"text":"public static event[] get_filtered(nitro_service service, String filter) throws Exception\r\n\t{\r\n\t\tevent obj = new event();\r\n\t\toptions option = new options();\r\n\t\toption.set_filter(filter);\r\n\t\tevent[] response = (event[]) obj.getfiltered(service, option);\r\n\t\treturn response;\r\n\t}","label":0}
{"text":"def cli(env):\n    \"\"\"\"\"\"\n    filtered_vars = dict([(k, v)\n                          for k, v in env.vars.items()\n                          if not k.startswith('_')])\n    env.fout(formatting.iter_to_table(filtered_vars))","label":0}
{"text":"protected Operation httpOp(String method, HttpUrl url) {\n        return new Operation(httpClient).method(method).httpUrl(url);\n    }","label":0}
{"text":"public function byFunction(\n        string $function,\n        string $order\n    ): SortBy {\n        $this->sortsBy[] = [\n            'type' => self::TYPE_FUNCTION,\n            'function' => $function,\n            'order' => $order,\n        ];\n\n        return $this;\n    }","label":0}
{"text":"def copy_fields(self, model):\n        \n        fields = {'__module__' : model.__module__}\n\n        for field in model._meta.fields:\n\n            if not field.name in self._exclude:\n\n                field  = copy.deepcopy(field)\n\n                if isinstance(field, models.AutoField):\n                    #we replace the AutoField of the original model\n                    #with an IntegerField because a model can\n                    #have only one autofield.\n\n                    field.__class__ = models.IntegerField\n\n                if field.primary_key:\n                    field.serialize = True\n\n                #OneToOne fields should really be tracked\n                #as ForeignKey fields\n                if isinstance(field, models.OneToOneField):\n                    field.__class__ = models.ForeignKey\n\n\n                if field.primary_key or field.unique:\n                    #unique fields of the original model\n                    #can not be guaranteed to be unique\n                    #in the audit log entry but they\n                    #should still be indexed for faster lookups.\n\n                    field.primary_key = False\n                    field._unique = False\n                    field.db_index = True\n\n\n                if field.remote_field and field.remote_field.related_name:\n                    field.remote_field.related_name = '_auditlog_{}_{}'.format(\n                        model._meta.model_name,\n                        field.remote_field.related_name\n                    )\n                elif field.remote_field:\n                    try:\n                        if field.remote_field.get_accessor_name():\n                            field.remote_field.related_name = '_auditlog_{}_{}'.format(\n                                model._meta.model_name,\n                                field.remote_field.get_accessor_name()\n                            )\n                    except e:\n                        pass\n\n                fields[field.name] = field\n\n        return fields","label":0}
{"text":"protected void invalidateConnection(boolean notifyPeer, Throwable throwable, String debugReason)\n   {\n       if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled()) SibTr.entry(tc, \"invalidateConnection\", new Object[]{new Boolean(notifyPeer),\n                                                                                     throwable,\n                                                                                     debugReason});\n       if (con != null)\n       {\n           ConnectionInterface connection = con.getConnectionReference();\n           if (connection != null)\n           {\n               connection.invalidate(notifyPeer, throwable, debugReason);\n           }         \n       }\n       if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled()) SibTr.exit(tc, \"invalidateConnection\");\n   }","label":0}
{"text":"func ParseCiphers(tlsConfig *config.TLSConfig) ([]uint16, error) {\n\tsuites := []uint16{}\n\n\tcipherStr := strings.TrimSpace(tlsConfig.TLSCipherSuites)\n\n\tvar parsedCiphers []string\n\tif cipherStr == \"\" {\n\t\tparsedCiphers = defaultTLSCiphers\n\n\t} else {\n\t\tparsedCiphers = strings.Split(tlsConfig.TLSCipherSuites, \",\")\n\t}\n\tfor _, cipher := range parsedCiphers {\n\t\tc, ok := supportedTLSCiphers[cipher]\n\t\tif !ok {\n\t\t\treturn suites, fmt.Errorf(\"unsupported TLS cipher %q\", cipher)\n\t\t}\n\t\tsuites = append(suites, c)\n\t}\n\n\t\/\/ Ensure that the specified cipher suite list is supported by the TLS\n\t\/\/ Certificate signature algorithm. This is a check for user error, where a\n\t\/\/ TLS certificate could support RSA but a user has configured a cipher suite\n\t\/\/ list of ciphers where only ECDSA is supported.\n\tkeyLoader := tlsConfig.GetKeyLoader()\n\n\t\/\/ Ensure that the keypair has been loaded before continuing\n\tkeyLoader.LoadKeyPair(tlsConfig.CertFile, tlsConfig.KeyFile)\n\n\tif keyLoader.GetCertificate() != nil {\n\t\tsupportedSignatureAlgorithm, err := getSignatureAlgorithm(keyLoader.GetCertificate())\n\t\tif err != nil {\n\t\t\treturn []uint16{}, err\n\t\t}\n\n\t\tfor _, cipher := range parsedCiphers {\n\t\t\tif supportedCipherSignatures[cipher] == supportedSignatureAlgorithm {\n\t\t\t\t\/\/ Positive case, return the matched cipher suites as the signature\n\t\t\t\t\/\/ algorithm is also supported\n\t\t\t\treturn suites, nil\n\t\t\t}\n\t\t}\n\n\t\t\/\/ Negative case, if this is reached it means that none of the specified\n\t\t\/\/ cipher suites signature algorithms match the signature algorithm\n\t\t\/\/ for the certificate.\n\t\treturn []uint16{}, fmt.Errorf(\"Specified cipher suites don't support the certificate signature algorithm %s, consider adding more cipher suites to match this signature algorithm.\", supportedSignatureAlgorithm)\n\t}\n\n\t\/\/ Default in case this function is called but TLS is not actually configured\n\t\/\/ This is only reached if the TLS certificate is nil\n\treturn []uint16{}, nil\n}","label":0}
{"text":"public static function getField($owningEntity, $key)\n    {\n        $entity = $owningEntity->getNonemptyCustomFields()->get($key);\n\n        if (!$entity) {\n            self::checkCustomFieldExists($owningEntity, $key);\n        }\n\n        return $entity;\n    }","label":0}
{"text":"def cd(cls, directory):\n        \"\"\"\"\"\"\n        Log.debug('CMD: cd {0}'.format(directory))\n        os.chdir(directory)","label":0}
{"text":"def pre_dissect(self, s):\n        \n        if len(s) < 1:\n            raise Exception(\"Invalid InnerPlaintext (too short).\")\n\n        tmp_len = len(s) - 1\n        if s[-1] != b\"\\x00\":\n            msg_len = tmp_len\n        else:\n            n = 1\n            while s[-n] != b\"\\x00\" and n < tmp_len:\n                n += 1\n            msg_len = tmp_len - n\n        self.fields_desc[0].length_from = lambda pkt: msg_len\n\n        self.type = struct.unpack(\"B\", s[msg_len:msg_len + 1])[0]\n\n        return s","label":0}
{"text":"public function setParentControl(Control $parentControl = null)\n    {\n        $this->parentControl = $parentControl;\n        $this->matcher->setParentControl($parentControl);\n    }","label":0}
{"text":"public void marshall(DescribeParametersRequest describeParametersRequest, ProtocolMarshaller protocolMarshaller) {\n\n        if (describeParametersRequest == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(describeParametersRequest.getParameterGroupName(), PARAMETERGROUPNAME_BINDING);\n            protocolMarshaller.marshall(describeParametersRequest.getSource(), SOURCE_BINDING);\n            protocolMarshaller.marshall(describeParametersRequest.getMaxResults(), MAXRESULTS_BINDING);\n            protocolMarshaller.marshall(describeParametersRequest.getNextToken(), NEXTTOKEN_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }","label":0}
{"text":"func (c *requestContext) ok() {\n\tc.Writer.Header().Set(\"Content-Type\", \"text\/plain; charset=utf-8\")\n\tc.Writer.WriteHeader(200)\n\tfmt.Fprintln(c.Writer, \"OK\")\n}","label":0}
{"text":"public function hasDocumentDeclaration($entity)\n    {\n        if ($rootDocument = $this->getClassAnnotation($entity, self::DOCUMENT_CLASS)) {\n            return true;\n        }\n\n        if ($this->isNested($entity)) {\n            return true;\n        }\n\n        return false;\n    }","label":0}
{"text":"function(next) {\n            fs.readFile(path.join(config.root_out, config.akashacmsEPUB.bookmetadata.toc.href), 'utf8',\n                function(err, data) {\n                    if (err) next(err);\n                    else {\n                        \/\/ logger.info('read '+ path.join(config.root_out, config.akashacmsEPUB.bookmetadata.toc.href));\n                        tocHtml = data;\n                        next();\n                    }\n                });\n        }","label":0}
{"text":"func Action(a func(*cli.Context)) Option {\n\treturn func(o *Options) {\n\t\to.Action = a\n\t}\n}","label":0}
{"text":"func (service *VboxPortType) IConsolereset(request *IConsolereset) (*IConsoleresetResponse, error) {\n\tresponse := new(IConsoleresetResponse)\n\terr := service.client.Call(\"\", request, response)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn response, nil\n}","label":0}
{"text":"func (bu *Binutils) update(fn func(r *binrep)) {\n\tr := &binrep{}\n\tbu.mu.Lock()\n\tdefer bu.mu.Unlock()\n\tif bu.rep == nil {\n\t\tinitTools(r, \"\")\n\t} else {\n\t\t*r = *bu.rep\n\t}\n\tfn(r)\n\tbu.rep = r\n}","label":0}
{"text":"def grad_to_image(gradient):\n    \"\"\"\"\"\"\n    gradient = gradient - gradient.min()\n    gradient \/= gradient.max()\n    gradient = np.uint8(gradient * 255).transpose(1, 2, 0)\n    gradient = gradient[..., ::-1]\n    return gradient","label":0}
{"text":"func (opts *Options) SetMaxLogFileSize(value int) {\n\tC.rocksdb_options_set_max_log_file_size(opts.c, C.size_t(value))\n}","label":0}
{"text":"private void postPlugin(final boolean isPing) throws IOException {\n        String serverVersion = getFullServerVersion();\n        int playersOnline = getPlayersOnline();\n\n        \/\/ END server software specific section -- all code below does not use any code outside of this class \/ Java\n\n        \/\/ Construct the post data\n        StringBuilder json = new StringBuilder(1024);\n        json.append('{');\n\n        \/\/ The plugin's description file containg all of the plugin data such as name, version, author, etc\n        appendJSONPair(json, \"guid\", guid);\n        appendJSONPair(json, \"plugin_version\", pluginVersion);\n        appendJSONPair(json, \"server_version\", serverVersion);\n        appendJSONPair(json, \"players_online\", Integer.toString(playersOnline));\n\n        \/\/ New data as of R6\n        String osname = System.getProperty(\"os.name\");\n        String osarch = System.getProperty(\"os.arch\");\n        String osversion = System.getProperty(\"os.version\");\n        String java_version = System.getProperty(\"java.version\");\n        int coreCount = Runtime.getRuntime().availableProcessors();\n\n        \/\/ normalize os arch .. amd64 -> x86_64\n        if (osarch.equals(\"amd64\")) {\n            osarch = \"x86_64\";\n        }\n\n        appendJSONPair(json, \"osname\", osname);\n        appendJSONPair(json, \"osarch\", osarch);\n        appendJSONPair(json, \"osversion\", osversion);\n        appendJSONPair(json, \"cores\", Integer.toString(coreCount));\n        \/\/ appendJSONPair(json, \"auth_mode\", onlineMode ? \"1\" : \"0\");\n        appendJSONPair(json, \"java_version\", java_version);\n\n        \/\/ If we're pinging, append it\n        if (isPing) {\n            appendJSONPair(json, \"ping\", \"1\");\n        }\n\n        if (graphs.size() > 0) {\n            synchronized (graphs) {\n                json.append(',');\n                json.append('\"');\n                json.append(\"graphs\");\n                json.append('\"');\n                json.append(':');\n                json.append('{');\n\n                boolean firstGraph = true;\n\n                final Iterator<Graph> iter = graphs.iterator();\n\n                while (iter.hasNext()) {\n                    Graph graph = iter.next();\n\n                    StringBuilder graphJson = new StringBuilder();\n                    graphJson.append('{');\n\n                    for (Plotter plotter : graph.getPlotters()) {\n                        appendJSONPair(graphJson, plotter.getColumnName(), Integer.toString(plotter.getValue()));\n                    }\n\n                    graphJson.append('}');\n\n                    if (!firstGraph) {\n                        json.append(',');\n                    }\n\n                    json.append(escapeJSON(graph.getName()));\n                    json.append(':');\n                    json.append(graphJson);\n\n                    firstGraph = false;\n                }\n\n                json.append('}');\n            }\n        }\n\n        \/\/ close json\n        json.append('}');\n\n        \/\/ Create the url\n        URL url = new URL(BASE_URL + String.format(REPORT_URL, urlEncode(pluginName)));\n\n        \/\/ Connect to the website\n        URLConnection connection;\n\n        \/\/ Mineshafter creates a socks proxy, so we can safely bypass it\n        \/\/ It does not reroute POST requests so we need to go around it\n        if (isMineshafterPresent()) {\n            connection = url.openConnection(Proxy.NO_PROXY);\n        } else {\n            connection = url.openConnection();\n        }\n\n        byte[] uncompressed = json.toString().getBytes();\n        byte[] compressed = gzip(json.toString());\n\n        \/\/ Headers\n        connection.addRequestProperty(\"User-Agent\", \"MCStats\/\" + REVISION);\n        connection.addRequestProperty(\"Content-Type\", \"application\/json\");\n        connection.addRequestProperty(\"Content-Encoding\", \"gzip\");\n        connection.addRequestProperty(\"Content-Length\", Integer.toString(compressed.length));\n        connection.addRequestProperty(\"Accept\", \"application\/json\");\n        connection.addRequestProperty(\"Connection\", \"close\");\n\n        connection.setDoOutput(true);\n\n        if (debug) {\n            System.out.println(\"[Metrics] Prepared request for \" + pluginName + \" uncompressed=\" + uncompressed.length + \" compressed=\" + compressed.length);\n        }\n\n        \/\/ Write the data\n        OutputStream os = connection.getOutputStream();\n        os.write(compressed);\n        os.flush();\n\n        \/\/ Now read the response\n        final BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));\n        String response = reader.readLine();\n\n        \/\/ close resources\n        os.close();\n        reader.close();\n\n        if (response == null || response.startsWith(\"ERR\") || response.startsWith(\"7\")) {\n            if (response == null) {\n                response = \"null\";\n            } else if (response.startsWith(\"7\")) {\n                response = response.substring(response.startsWith(\"7,\") ? 2 : 1);\n            }\n\n            throw new IOException(response);\n        } else {\n            \/\/ Is this the first update this hour?\n            if (response.equals(\"1\") || response.contains(\"This is your first update this hour\")) {\n                synchronized (graphs) {\n                    final Iterator<Graph> iter = graphs.iterator();\n\n                    while (iter.hasNext()) {\n                        final Graph graph = iter.next();\n\n                        for (Plotter plotter : graph.getPlotters()) {\n                            plotter.reset();\n                        }\n                    }\n                }\n            }\n        }\n    }","label":0}
{"text":"public static function get($url, $headers = [], $parameters = null)\n    {\n        return Request::create('default')->get($url, $headers, $parameters);\n    }","label":0}
{"text":"public function getTaggedQuestions($tag)\n    {\n        $question = new Question($this->di->get(\"db\"));\n\n        $questions = $question->getQuestions();\n\n\n\n        $filteredQuestions = array_filter($questions, function ($value) use ($tag) {\n            return in_array($tag, $value->tags);\n        });\n\n        $views = [\n            [\"comment\/question\/view-all\", [\"questions\" => $filteredQuestions,\n             \"headerTitle\" => \"Fr\u00e5gor med taggen $tag\"], \"main\"]\n        ];\n\n        $this->di->get(\"pageRenderComment\")->renderPage([\n            \"views\" => $views,\n            \"title\" => \"Questions | $tag\"\n        ]);\n    }","label":0}
{"text":"func GetDefaultInterfaces() (IfAddrs, error) {\n\tri, err := NewRouteInfo()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tdefaultIfName, err := ri.GetDefaultInterfaceName()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tvar defaultIfs, ifAddrs IfAddrs\n\tifAddrs, err = GetAllInterfaces()\n\tfor _, ifAddr := range ifAddrs {\n\t\tif ifAddr.Name == defaultIfName {\n\t\t\tdefaultIfs = append(defaultIfs, ifAddr)\n\t\t}\n\t}\n\n\treturn defaultIfs, nil\n}","label":0}
{"text":"func (g *GraphQuery) Normalize() error {\n\tif err := g.AttemptList.Normalize(); err != nil {\n\t\treturn err\n\t}\n\tif len(g.AttemptRange) > 0 {\n\t\tlme := errors.NewLazyMultiError(len(g.AttemptRange))\n\t\tfor i, rng := range g.AttemptRange {\n\t\t\tlme.Assign(i, rng.Normalize())\n\t\t}\n\t\tif err := lme.Get(); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\tif len(g.Search) > 0 {\n\t\tlme := errors.NewLazyMultiError(len(g.Search))\n\t\tfor i, s := range g.Search {\n\t\t\tlme.Assign(i, s.Normalize())\n\t\t}\n\t\tif err := lme.Get(); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\treturn nil\n}","label":0}
{"text":"private void updateJobWithSplit(final JobConf job, InputSplit inputSplit) {\n    if (inputSplit instanceof FileSplit) {\n      FileSplit fileSplit = (FileSplit) inputSplit;\n      job.set(\"map.input.file\", fileSplit.getPath().toString());\n      job.setLong(\"map.input.start\", fileSplit.getStart());\n      job.setLong(\"map.input.length\", fileSplit.getLength());\n    }\n    LOG.info(\"split: \" + inputSplit.toString());\n  }","label":0}
{"text":"private function internalDataListUpdateValueIfNeeded(&$data, $index)\n    {\n        $value = $data[$index];\n        if (is_callable($value)) {\n            $value = call_user_func($value);\n            $data[$index] = $value;\n        }\n        if (is_object($value)) {\n            return $value;\n        }\n        $value = (object) $value;\n        $data[$index] = $value;\n        return $value;\n    }","label":0}
{"text":"def equals(self, actual_seq):\n    \n\n    try:\n      expected = dict([(element, None) for element in self._expected_seq])\n      actual = dict([(element, None) for element in actual_seq])\n    except TypeError:\n      # Fall back to slower list-compare if any of the objects are unhashable.\n      expected = list(self._expected_seq)\n      actual = list(actual_seq)\n      expected.sort()\n      actual.sort()\n    return expected == actual","label":0}
{"text":"public void marshall(DeleteApnsChannelRequest deleteApnsChannelRequest, ProtocolMarshaller protocolMarshaller) {\n\n        if (deleteApnsChannelRequest == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(deleteApnsChannelRequest.getApplicationId(), APPLICATIONID_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }","label":0}
{"text":"func pastActiveDeadline(job *batch.Job) bool {\n\tif job.Spec.ActiveDeadlineSeconds == nil || job.Status.StartTime == nil {\n\t\treturn false\n\t}\n\tnow := metav1.Now()\n\tstart := job.Status.StartTime.Time\n\tduration := now.Time.Sub(start)\n\tallowedDuration := time.Duration(*job.Spec.ActiveDeadlineSeconds) * time.Second\n\treturn duration >= allowedDuration\n}","label":0}
{"text":"public VariableDecls declareVar(String bootiqueVariable) {\n\t\tthis.extender.declareVar(bootiqueVariable, VariableNames.toEnvironmentVariableName(bootiqueVariable));\n\t\treturn this;\n\t}","label":0}
{"text":"private int getTagSize(TagValue tag) {\n    int n = tag.getCardinality();\n    int id = tag.getId();\n\n    \/\/ Calculate tag size\n    int type = tag.getType();\n\n    if (id == 330) {\n      \/\/ SubIFD\n      n = 1000;\n    }\n    if (id == 700) {\n      \/\/ XMP\n      if (tag.getValue().size() > 0)\n        n = tag.getValue().get(0).toString().length();\n    }\n    if (id == 33723) {\n      \/\/ IPTC\n      n = tag.getReadlength();\n    }\n    if (id == 34665) {\n      \/\/ EXIF\n      n = 1000;\n    }\n    if (id == 34675) {\n      \/\/ ICC\n      n = tag.getReadlength();\n    }\n\n    int typeSize = TiffTags.getTypeSize(type);\n    int tagSize = typeSize * n;\n    return tagSize;\n  }","label":0}
{"text":"public byte[] sendUnbind(OutputStream os, int sequenceNumber)\n            throws IOException {\n        byte[] b = pduComposer.unbind(sequenceNumber);\n        writeAndFlush(os, b);\n        return b;\n    }","label":0}
{"text":"function leftButtonSelect(cm,event,start,behavior){var display=cm.display,doc=cm.doc;e_preventDefault(event);var ourRange,ourIndex,startSel=doc.sel,ranges=startSel.ranges;if(behavior.addNew&&!behavior.extend){ourIndex=doc.sel.contains(start);if(ourIndex>-1){ourRange=ranges[ourIndex];}else{ourRange=new Range(start,start);}}else{ourRange=doc.sel.primary();ourIndex=doc.sel.primIndex;}if(behavior.unit==\"rectangle\"){if(!behavior.addNew){ourRange=new Range(start,start);}start=posFromMouse(cm,event,true,true);ourIndex=-1;}else{var range$$1=rangeForUnit(cm,start,behavior.unit);if(behavior.extend){ourRange=extendRange(ourRange,range$$1.anchor,range$$1.head,behavior.extend);}else{ourRange=range$$1;}}if(!behavior.addNew){ourIndex=0;setSelection(doc,new Selection([ourRange],0),sel_mouse);startSel=doc.sel;}else if(ourIndex==-1){ourIndex=ranges.length;setSelection(doc,normalizeSelection(ranges.concat([ourRange]),ourIndex),{scroll:false,origin:\"*mouse\"});}else if(ranges.length>1&&ranges[ourIndex].empty()&&behavior.unit==\"char\"&&!behavior.extend){setSelection(doc,normalizeSelection(ranges.slice(0,ourIndex).concat(ranges.slice(ourIndex+1)),0),{scroll:false,origin:\"*mouse\"});startSel=doc.sel;}else{replaceOneSelection(doc,ourIndex,ourRange,sel_mouse);}var lastPos=start;function extendTo(pos){if(cmp(lastPos,pos)==0){return;}lastPos=pos;if(behavior.unit==\"rectangle\"){var ranges=[],tabSize=cm.options.tabSize;var startCol=countColumn(getLine(doc,start.line).text,start.ch,tabSize);var posCol=countColumn(getLine(doc,pos.line).text,pos.ch,tabSize);var left=Math.min(startCol,posCol),right=Math.max(startCol,posCol);for(var line=Math.min(start.line,pos.line),end=Math.min(cm.lastLine(),Math.max(start.line,pos.line));line<=end;line++){var text=getLine(doc,line).text,leftPos=findColumn(text,left,tabSize);if(left==right){ranges.push(new Range(Pos(line,leftPos),Pos(line,leftPos)));}else if(text.length>leftPos){ranges.push(new Range(Pos(line,leftPos),Pos(line,findColumn(text,right,tabSize))));}}if(!ranges.length){ranges.push(new Range(start,start));}setSelection(doc,normalizeSelection(startSel.ranges.slice(0,ourIndex).concat(ranges),ourIndex),{origin:\"*mouse\",scroll:false});cm.scrollIntoView(pos);}else{var oldRange=ourRange;var range$$1=rangeForUnit(cm,pos,behavior.unit);var anchor=oldRange.anchor,head;if(cmp(range$$1.anchor,anchor)>0){head=range$$1.head;anchor=minPos(oldRange.from(),range$$1.anchor);}else{head=range$$1.anchor;anchor=maxPos(oldRange.to(),range$$1.head);}var ranges$1=startSel.ranges.slice(0);ranges$1[ourIndex]=bidiSimplify(cm,new Range(_clipPos(doc,anchor),head));setSelection(doc,normalizeSelection(ranges$1,ourIndex),sel_mouse);}}var editorSize=display.wrapper.getBoundingClientRect();\/\/ Used to ensure timeout re-tries don't fire when another extend\n\/\/ happened in the meantime (clearTimeout isn't reliable -- at\n\/\/ least on Chrome, the timeouts still happen even when cleared,\n\/\/ if the clear happens after their scheduled firing time).\nvar counter=0;function extend(e){var curCount=++counter;var cur=posFromMouse(cm,e,true,behavior.unit==\"rectangle\");if(!cur){return;}if(cmp(cur,lastPos)!=0){cm.curOp.focus=activeElt();extendTo(cur);var visible=visibleLines(display,doc);if(cur.line>=visible.to||cur.line<visible.from){setTimeout(operation(cm,function(){if(counter==curCount){extend(e);}}),150);}}else{var outside=e.clientY<editorSize.top?-20:e.clientY>editorSize.bottom?20:0;if(outside){setTimeout(operation(cm,function(){if(counter!=curCount){return;}display.scroller.scrollTop+=outside;extend(e);}),50);}}}function done(e){cm.state.selectingText=false;counter=Infinity;e_preventDefault(e);display.input.focus();off(document,\"mousemove\",move);off(document,\"mouseup\",up);doc.history.lastSelOrigin=null;}var move=operation(cm,function(e){if(!e_button(e)){done(e);}else{extend(e);}});var up=operation(cm,done);cm.state.selectingText=up;on(document,\"mousemove\",move);on(document,\"mouseup\",up);}","label":0}
{"text":"protected function extract()\n\t{\n\t\t$magic = $this->readInt( 'V' );\n\n\t\tif( ( $magic === self::MAGIC1 ) || ( $magic === self::MAGIC3 ) ) { \/\/to make sure it works for 64-bit platforms\n\t\t\t$byteOrder = 'V'; \/\/low endian\n\t\t} elseif( $magic === ( self::MAGIC2 & 0xFFFFFFFF ) ) {\n\t\t\t$byteOrder = 'N'; \/\/big endian\n\t\t} else {\n\t\t\tthrow new \\Aimeos\\MW\\Translation\\Exception( 'Invalid MO file' );\n\t\t}\n\n\t\t$this->readInt( $byteOrder );\n\t\t$total = $this->readInt( $byteOrder ); \/\/total string count\n\t\t$originals = $this->readInt( $byteOrder ); \/\/offset of original table\n\t\t$trans = $this->readInt( $byteOrder ); \/\/offset of translation table\n\n\t\t$this->seekto( $originals );\n\t\t$originalTable = $this->readIntArray( $byteOrder, $total * 2 );\n\t\t$this->seekto( $trans );\n\t\t$translationTable = $this->readIntArray( $byteOrder, $total * 2 );\n\n\t\treturn $this->extractTable( $originalTable, $translationTable, $total );\n\t}","label":0}
{"text":"def get_tile_image(self, x, y, l):\n        \n        # disabled for now, re-enable when support for generic maps is restored\n        # # since the tile has been queried, assume it wants to be checked\n        # # for animations sometime in the future\n        # if self._animation_queue:\n        #     self._tracked_tiles.add((x, y, l))\n\n        try:\n            # animated, so return the correct frame\n            return self._animated_tile[(x, y, l)]\n\n        except KeyError:\n\n            # not animated, so return surface from data, if any\n            return self._get_tile_image(x, y, l)","label":0}
{"text":"func (s *AlarmIdentifier) SetName(v string) *AlarmIdentifier {\n\ts.Name = &v\n\treturn s\n}","label":0}
{"text":"public function log_http_response( $response, array $args, $url ) {\n\t\t$this->data['http'][ $args['_qm_key'] ]['end']      = microtime( true );\n\t\t$this->data['http'][ $args['_qm_key'] ]['response'] = $response;\n\t\t$this->data['http'][ $args['_qm_key'] ]['args']     = $args;\n\t\tif ( isset( $args['_qm_original_key'] ) ) {\n\t\t\t$this->data['http'][ $args['_qm_original_key'] ]['end']      = $this->data['http'][ $args['_qm_original_key'] ]['start'];\n\t\t\t$this->data['http'][ $args['_qm_original_key'] ]['response'] = new WP_Error( 'http_request_not_executed', sprintf(\n\t\t\t\t\/* translators: %s: Hook name *\/\n\t\t\t\t__( 'Request not executed due to a filter on %s', 'query-monitor' ),\n\t\t\t\t'pre_http_request'\n\t\t\t) );\n\t\t}\n\n\t\t$this->data['http'][ $args['_qm_key'] ]['info']      = $this->info;\n\t\t$this->data['http'][ $args['_qm_key'] ]['transport'] = $this->transport;\n\t\t$this->info      = null;\n\t\t$this->transport = null;\n\t}","label":0}
{"text":"func (m *Machine) StopMongoUntilVersion() (mongo.Version, error) {\n\treturn mongo.NewVersion(m.doc.StopMongoUntilVersion)\n}","label":0}
{"text":"public static LensDistortionNarrowFOV narrow(CameraModel param) {\n\t\tif( param instanceof CameraPinholeBrown) {\n\t\t\tCameraPinholeBrown c = (CameraPinholeBrown)param;\n\n\t\t\tif (c.isDistorted())\n\t\t\t\treturn new LensDistortionBrown(c);\n\t\t\telse\n\t\t\t\treturn new LensDistortionPinhole(c);\n\t\t} else if( param instanceof CameraPinhole) {\n\t\t\tCameraPinhole c = (CameraPinhole)param;\n\n\t\t\treturn new LensDistortionPinhole(c);\n\t\t} else {\n\t\t\tthrow new IllegalArgumentException(\"Unknown camera model \"+param.getClass().getSimpleName());\n\t\t}\n\t}","label":0}
{"text":"func getLayerDetails(folder string) (*layerDetails, error) {\n\tvar fileInfo os.FileInfo\n\tld := &layerDetails{\n\t\tisSandbox: false,\n\t\tfilename:  filepath.Join(folder, layerFilename),\n\t}\n\n\tfileInfo, err := os.Stat(ld.filename)\n\tif err != nil {\n\t\tld.filename = filepath.Join(folder, sandboxFilename)\n\t\tif fileInfo, err = os.Stat(ld.filename); err != nil {\n\t\t\treturn nil, fmt.Errorf(\"failed to locate layer or sandbox in %s\", folder)\n\t\t}\n\t\tld.isSandbox = true\n\t}\n\tld.size = fileInfo.Size()\n\n\treturn ld, nil\n}","label":0}
{"text":"public function createClassBinding($binding)\n    {\n        return function ($value, $route) use ($binding)\n        {\n            \/\/ If the binding has an @ sign, we will assume it's being used to delimit\n            \/\/ the class name from the bind method name. This allows for bindings\n            \/\/ to run multiple bind methods in a single class for convenience.\n            list($className, $method) = array_pad(explode('@', $binding, 2), 2, 'bind');\n\n            $instance = $this->container->make($className);\n\n            return call_user_func(array($instance, $method), $value, $route);\n        };\n    }","label":0}
{"text":"public function addParameter($name, $parameter)\n  {\n    if ($this->isLocked()) {\n      return $this->getObj()->addParameter($name, $parameter)->setLocked();\n    } else {\n      return parent::addParameter($name, $parameter);\n    }\n  }","label":0}
{"text":"public boolean containsPoint(INDArray point) {\n        double first = point.getDouble(0), second = point.getDouble(1);\n        return x - hw <= first && x + hw >= first && y - hh <= second && y + hh >= second;\n    }","label":0}
{"text":"int removeRef()\n  {\n    if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled())\n      SibTr.entry(tc, \"removeRef\");\n\n    int ret = NOP;\n\n    \/\/ If this is the last reference, then the operation is unsubscribe.\n\n    if (--_refCount == 0)\n      ret = UNSUBSCRIBE;\n\n    checkRefCount();\n\n    if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled())\n      SibTr.exit(tc, \"removeRef\", String.valueOf(ret) +\":\"+ String.valueOf(_refCount));\n\n    return ret;\n  }","label":0}
{"text":"func HasCorrectColors(c *chronograf.DashboardCell) error {\n\tfor _, color := range c.CellColors {\n\t\tif !oneOf(color.Type, \"max\", \"min\", \"threshold\", \"text\", \"background\", \"scale\") {\n\t\t\treturn chronograf.ErrInvalidColorType\n\t\t}\n\t\tif len(color.Hex) != 7 {\n\t\t\treturn chronograf.ErrInvalidColor\n\t\t}\n\t}\n\treturn nil\n}","label":0}
{"text":"function GLTFLightsExtension( json ) {\n\n\t\tthis.name = EXTENSIONS.KHR_LIGHTS;\n\n\t\tthis.lights = {};\n\n\t\tvar extension = ( json.extensions && json.extensions[ EXTENSIONS.KHR_LIGHTS ] ) || {};\n\t\tvar lights = extension.lights || {};\n\n\t\tfor ( var lightId in lights ) {\n\n\t\t\tvar light = lights[ lightId ];\n\t\t\tvar lightNode;\n\n\t\t\tvar color = new THREE.Color().fromArray( light.color );\n\n\t\t\tswitch ( light.type ) {\n\n\t\t\t\tcase 'directional':\n\t\t\t\t\tlightNode = new THREE.DirectionalLight( color );\n\t\t\t\t\tlightNode.target.position.set( 0, 0, 1 );\n\t\t\t\t\tlightNode.add( lightNode.target );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'point':\n\t\t\t\t\tlightNode = new THREE.PointLight( color );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'spot':\n\t\t\t\t\tlightNode = new THREE.SpotLight( color );\n\t\t\t\t\t\/\/ Handle spotlight properties.\n\t\t\t\t\tlight.spot = light.spot || {};\n\t\t\t\t\tlight.spot.innerConeAngle = light.spot.innerConeAngle !== undefined ? light.spot.innerConeAngle : 0;\n\t\t\t\t\tlight.spot.outerConeAngle = light.spot.outerConeAngle !== undefined ? light.spot.outerConeAngle : Math.PI \/ 4.0;\n\t\t\t\t\tlightNode.angle = light.spot.outerConeAngle;\n\t\t\t\t\tlightNode.penumbra = 1.0 - light.spot.innerConeAngle \/ light.spot.outerConeAngle;\n\t\t\t\t\tlightNode.target.position.set( 0, 0, 1 );\n\t\t\t\t\tlightNode.add( lightNode.target );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ambient':\n\t\t\t\t\tlightNode = new THREE.AmbientLight( color );\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tif ( lightNode ) {\n\n\t\t\t\tlightNode.decay = 2;\n\n\t\t\t\tif ( light.intensity !== undefined ) {\n\n\t\t\t\t\tlightNode.intensity = light.intensity;\n\n\t\t\t\t}\n\n\t\t\t\tlightNode.name = light.name || ( 'light_' + lightId );\n\t\t\t\tthis.lights[ lightId ] = lightNode;\n\n\t\t\t}\n\n\t\t}\n\n\t}","label":0}
{"text":"func (mysqld *Mysqld) executeSchemaCommands(sql string) error {\n\tparams, err := dbconfigs.WithCredentials(mysqld.dbcfgs.Dba())\n\tif err != nil {\n\t\treturn err\n\t}\n\n\treturn mysqld.executeMysqlScript(params, strings.NewReader(sql))\n}","label":0}
{"text":"def stage_config(self):\n        \n\n        def get_stage_setting(stage, extended_stages=None):\n            if extended_stages is None:\n                extended_stages = []\n\n            if stage in extended_stages:\n                raise RuntimeError(stage + \" has already been extended to these settings. \"\n                                           \"There is a circular extends within the settings file.\")\n            extended_stages.append(stage)\n\n            try:\n                stage_settings = dict(self.zappa_settings[stage].copy())\n            except KeyError:\n                raise ClickException(\"Cannot extend settings for undefined stage '\" + stage + \"'.\")\n\n            extends_stage = self.zappa_settings[stage].get('extends', None)\n            if not extends_stage:\n                return stage_settings\n            extended_settings = get_stage_setting(stage=extends_stage, extended_stages=extended_stages)\n            extended_settings.update(stage_settings)\n            return extended_settings\n\n        settings = get_stage_setting(stage=self.api_stage)\n\n        # Backwards compatible for delete_zip setting that was more explicitly named delete_local_zip\n        if u'delete_zip' in settings:\n            settings[u'delete_local_zip'] = settings.get(u'delete_zip')\n\n        settings.update(self.stage_config_overrides)\n\n        return settings","label":0}
{"text":"public static <K, V> KeyAffinityService<K> newLocalKeyAffinityService(Cache<K, V> cache, KeyGenerator<K> keyGenerator, Executor ex, int keyBufferSize, boolean start) {\n      Address localAddress = cache.getAdvancedCache().getRpcManager().getTransport().getAddress();\n      Collection<Address> forAddresses = Collections.singletonList(localAddress);\n      return newKeyAffinityService(cache, forAddresses, keyGenerator, ex, keyBufferSize, start);\n   }","label":0}
{"text":"protected function carry()\n    {\n        return function ($stack, $pipe) {\n            return function ($passable) use ($stack, $pipe) {\n                $method = $this->method;\n                if (is_callable($pipe)) {\n                    \/\/ If the pipe is an instance of a Closure, we will just call it directly but\n                    \/\/ otherwise we'll resolve the pipes out of the container and call it with\n                    \/\/ the appropriate method and arguments, returning the results back out.\n                    return $pipe($passable, $stack);\n                } elseif (is_object($pipe)) {\n                    \/\/ If the pipe is already an object we'll just make a callable and pass it to\n                    \/\/ the pipe as-is. There is no need to do any extra parsing and formatting\n                    \/\/ since the object we're given was already a fully instantiated object.\n                    $parameters = [$passable, $stack];\n                } else {\n                    list($name, $methodFromString, $parameters, $needContainer) = $this->parsePipeData($pipe);\n                    if ($methodFromString) {\n                        $method = $methodFromString;\n                    }\n\n                    if (!$parameters) {\n                        $parameters = [];\n                    }\n\n                    \/\/ If the pipe is a string we will parse the string and resolve the class out\n                    \/\/ of the dependency injection container. We can then build a callable and\n                    \/\/ execute the pipe function giving in the parameters that are required.\n                    if (is_string($name)) {\n                        \/\/$pipe = $this->getContainer()->get($name);\n                        $pipe = $this->getPipeStageFromContainer($name);\n                    } else {\n                        $pipe = $name;\n                    }\n\n                    $parameters = array_merge([$passable, $stack], $parameters);\n                    \/\/\n                    if ($needContainer) {\n                        $this->initialize($pipe);\n                        $pipeReturn = function ($data, $next) use ($pipe, $method) {\n                            if ($method) {\n                                $data = $pipe->{$method}($data);\n                            } else {\n                                $data = $pipe($data);\n                            }\n                            return $next($data);\n                        };\n                        return $pipeReturn(...$parameters);\n                    }\n                }\n\n                $this->initialize($pipe);\n\n                if ($method) {\n                    if (method_exists($pipe, $method)) {\n                        return $pipe->{$method}(...$parameters);\n                    }\n                    throw new Exception('Method ' . $method . ' does not exist in stage with class ' . get_class($pipe));\n                } else if ($pipe instanceof StageInterface) {\n                    return $pipe->execute(...$parameters);\n                } else {\n                    return $pipe(...$parameters);\n                }\n            };\n        };\n    }","label":0}
{"text":"def iter_fields(self, schema: Schema) -> Iterable[Tuple[str, Field]]:\n        \n        for name in sorted(schema.fields.keys()):\n            field = schema.fields[name]\n            yield field.dump_to or name, field","label":0}
{"text":"def node_name(node):\n    \n    return hasattr(node, 'id') and node.id or hasattr(node, 'name') and node.name","label":0}
{"text":"def send_location(self, chat_id, latitude, longitude, live_period=None, reply_to_message_id=None, reply_markup=None,\n                      disable_notification=None):\n        \n        return types.Message.de_json(\n            apihelper.send_location(self.token, chat_id, latitude, longitude, live_period, reply_to_message_id,\n                                    reply_markup,\n                                    disable_notification))","label":0}
{"text":"public function toArray()\n\t{\n\t\t$list = parent::toArray();\n\n\t\t$list['order.base.coupon.baseid'] = $this->getBaseId();\n\t\t$list['order.base.coupon.productid'] = $this->getProductId();\n\t\t$list['order.base.coupon.code'] = $this->getCode();\n\n\t\treturn $list;\n\t}","label":0}
{"text":"public function withDate(LocalDate $date) : LocalDateTime\n    {\n        if ($date->isEqualTo($this->date)) {\n            return $this;\n        }\n\n        return new LocalDateTime($date, $this->time);\n    }","label":0}
{"text":"func cloneRequest(r *http.Request, body []byte) *http.Request {\n\t\/\/ shallow copy of the struct\n\tr2 := new(http.Request)\n\t*r2 = *r\n\t\/\/ deep copy of the Header\n\tr2.Header = make(http.Header, len(r.Header))\n\tfor k, s := range r.Header {\n\t\tr2.Header[k] = append([]string(nil), s...)\n\t}\n\tif len(body) > 0 {\n\t\tr2.Body = ioutil.NopCloser(bytes.NewReader(body))\n\t}\n\treturn r2\n}","label":0}
{"text":"protected function getValue($event)\n    {\n        if ($this->value === null && Yii::getApp()->has('user')) {\n            $userId = Yii::getApp()->get('user')->id;\n            if ($userId === null) {\n                return $this->getDefaultValue($event);\n            }\n\n            return $userId;\n        }\n\n        return parent::getValue($event);\n    }","label":0}
{"text":"public void closePoolTracer() {\r\n    this.poolWriteLock.lock();\r\n    try {\r\n      for (AbstractTracer tracer : this.tracerPool.values()) {\r\n        tracer.close();\r\n      }\r\n    }\r\n    finally {\r\n      this.poolWriteLock.unlock();\r\n    }\r\n  }","label":0}
{"text":"func Home() echo.HandlerFunc {\n\n\t\/\/ swagger:route GET \/me\/home me post home getMeHome\n\t\/\/\n\t\/\/ Shows the homepage of the current user, mixing projects and users posts\n\t\/\/\n\t\/\/ You can personalize the request via query string parameters\n\t\/\/\n\t\/\/\tProduces:\n\t\/\/\t- application\/json\n\t\/\/\n\t\/\/\tSecurity:\n\t\/\/\t\toauth: profile:read\n\t\/\/\n\t\/\/\tResponses:\n\t\/\/\t\tdefault: MeHome\n\n\treturn func(c echo.Context) error {\n\t\tif !rest.IsGranted(\"messages:read\", c) {\n\t\t\treturn rest.InvalidScopeResponse(\"messages:read\", c)\n\t\t}\n\n\t\tme := c.Get(\"me\").(*nerdz.User)\n\t\toptions := c.Get(\"postlistOptions\").(*nerdz.PostlistOptions)\n\t\tposts := me.Home(*options)\n\n\t\tif posts == nil {\n\t\t\terrstr := \"Unable to fetch home page for the specified user\"\n\t\t\tc.JSON(http.StatusBadRequest, &rest.Response{\n\t\t\t\tHumanMessage: errstr,\n\t\t\t\tMessage:      \"me.Home error\",\n\t\t\t\tStatus:       http.StatusBadRequest,\n\t\t\t\tSuccess:      false,\n\t\t\t})\n\t\t\treturn errors.New(errstr)\n\t\t}\n\n\t\tvar postsAPI []*nerdz.PostTO\n\t\tfor _, p := range *posts {\n\t\t\tpostsAPI = append(postsAPI, p.GetTO(me))\n\t\t}\n\n\t\treturn rest.SelectFields(postsAPI, c)\n\t}\n}","label":0}
{"text":"public function supports(IRoute $route) {\n        list($controller, $method) = $this->extractControllerAndMethod(\n            $route->getAction()\n        );\n\n        if ($controller !== null && $method !== null) {\n            return true;\n        }\n\n        return false;\n    }","label":0}
{"text":"func StringToDurationValueFunc() mapstructure.DecodeHookFunc {\n\treturn func(\n\t\tf reflect.Type,\n\t\tt reflect.Type,\n\t\tdata interface{}) (interface{}, error) {\n\t\tif f.Kind() != reflect.String {\n\t\t\treturn data, nil\n\t\t}\n\n\t\tval := DurationValue{}\n\t\tif t != reflect.TypeOf(val) {\n\t\t\treturn data, nil\n\t\t}\n\t\tif err := val.Set(data.(string)); err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\treturn val, nil\n\t}\n}","label":0}
{"text":"public function actionSubmit()\n    {\n        if (\\Yii::$app->request->isAjax && !\\Yii::$app->request->isPjax) {\n            \\Yii::$app->response->format = Response::FORMAT_JSON;\n\n            $response = [\n                'success' => false,\n                'message' => '\u041f\u0440\u043e\u0438\u0437\u043e\u0448\u043b\u0430 \u043e\u0448\u0438\u0431\u043a\u0430',\n            ];\n\n            if (\\Yii::$app->request->post('sx-model') && \\Yii::$app->request->post('sx-model-value')) {\n                $modelClass = \\Yii::$app->request->post('sx-model');\n                $modelValue = \\Yii::$app->request->post('sx-model-value');\n                \/**\n                 * @var RelatedElementModel $modelForm\n                 *\/\n                $modelForm = $modelClass::find()->where(['id' => $modelValue])->one();\n\n                if (method_exists($modelForm, \"createPropertiesValidateModel\")) {\n                    $validateModel = $modelForm->createPropertiesValidateModel();\n                } else {\n                    $validateModel = $modelForm->getRelatedPropertiesModel();\n                }\n\n                if ($validateModel->load(\\Yii::$app->request->post()) && $validateModel->validate()) {\n                    $validateModel->save();\n                    $response['success'] = true;\n                    $response['message'] = '\u0423\u0441\u043f\u0435\u0448\u043d\u043e \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0430';\n\n                } else {\n                    $response['message'] = '\u0424\u043e\u0440\u043c\u0430 \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0430 \u043d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e';\n                }\n\n                return $response;\n            }\n        }\n    }","label":0}
{"text":"public function get()\n    {\n        $schemeCollection = new SchemeCollection();\n        $pageAdapter = new AppAdapter($this->injector, $this->appName, 'Resource\\Page', $this->resourceDir . '\/Page');\n        $appAdapter = new AppAdapter($this->injector, $this->appName, 'Resource\\App', $this->resourceDir . '\/App');\n        $schemeCollection->scheme('page')->host('self')->toAdapter($pageAdapter);\n        $schemeCollection->scheme('app')->host('self')->toAdapter($appAdapter);\n        $schemeCollection->scheme('http')->host('*')->toAdapter(new Http());\n\n        return $schemeCollection;\n    }","label":0}
{"text":"func (l *Logger) TraceMsg(message string, keyvals ...interface{}) error {\n\treturn Msg(l.Trace, message, keyvals...)\n}","label":0}
{"text":"def parse_reports(self):\n    \n\n    # Set up vars\n    self.junction_saturation_all = dict()\n    self.junction_saturation_known = dict()\n    self.junction_saturation_novel = dict()\n\n    # Go through files and parse data\n    for f in self.find_log_files('rseqc\/junction_saturation'):\n        parsed = dict()\n        for l in f['f'].splitlines():\n            r = re.search(r\"^([xyzw])=c\\(([\\d,]+)\\)$\", l)\n            if r:\n                parsed[r.group(1)] = [float(i) for i in r.group(2).split(',')]\n        if len(parsed) == 4:\n            if parsed['z'][-1] == 0:\n                log.warn(\"Junction saturation data all zeroes, skipping: '{}'\".format(f['s_name']))\n            else:\n                if f['s_name'] in self.junction_saturation_all:\n                    log.debug(\"Duplicate sample name found! Overwriting: {}\".format(f['s_name']))\n                self.add_data_source(f, section='junction_saturation')\n                self.junction_saturation_all[f['s_name']] = OrderedDict()\n                self.junction_saturation_known[f['s_name']] = OrderedDict()\n                self.junction_saturation_novel[f['s_name']] = OrderedDict()\n                for k, v in enumerate(parsed['x']):\n                    self.junction_saturation_all[f['s_name']][v] = parsed['z'][k]\n                    self.junction_saturation_known[f['s_name']][v] = parsed['y'][k]\n                    self.junction_saturation_novel[f['s_name']][v] = parsed['w'][k]\n\n    # Filter to strip out ignored sample names\n    self.junction_saturation_all = self.ignore_samples(self.junction_saturation_all)\n    self.junction_saturation_known = self.ignore_samples(self.junction_saturation_known)\n    self.junction_saturation_novel = self.ignore_samples(self.junction_saturation_novel)\n\n    if len(self.junction_saturation_all) > 0:\n\n        # Add line graph to section\n        pconfig = {\n            'id': 'rseqc_junction_saturation_plot',\n            'title': 'RSeQC: Junction Saturation',\n            'ylab': 'Number of Junctions',\n            'ymin': 0,\n            'xlab': \"Percent of reads\",\n            'xmin': 0,\n            'xmax': 100,\n            'tt_label': \"<strong>{point.x}% of reads<\/strong>: {point.y:.2f}\",\n            'data_labels': [\n                {'name': 'Known Junctions'},\n                {'name': 'Novel Junctions'},\n                {'name': 'All Junctions'}\n            ],\n            'cursor': 'pointer',\n            'click_func': plot_single()\n        }\n        self.add_section (\n            name = 'Junction Saturation',\n            anchor = 'rseqc-junction_saturation',\n            description = '''<a href=\"http:\/\/rseqc.sourceforge.net\/#junction-saturation-py\" target=\"_blank\">Junction Saturation<\/a>\n                counts the number of known splicing junctions that are observed\n                in each dataset. If sequencing depth is sufficient, all (annotated) splice junctions should\n                be rediscovered, resulting in a curve that reaches a plateau. Missing low abundance splice\n                junctions can affect downstream analysis.<\/p>\n                <div class=\"alert alert-info\" id=\"rseqc-junction_sat_single_hint\">\n                  <span class=\"glyphicon glyphicon-hand-up\"><\/span>\n                  Click a line to see the data side by side (as in the original RSeQC plot).\n                <\/div><p>''',\n            plot = linegraph.plot([\n                    self.junction_saturation_known,\n                    self.junction_saturation_novel,\n                    self.junction_saturation_all\n                ], pconfig)\n        )\n\n    # Return number of samples found\n    return len(self.junction_saturation_all)","label":0}
{"text":"private void calcRmsd(Point3d[] x, Point3d[] y) {\n\t\tif (centered) {\n\t\t\tinnerProduct(y, x);\n\t\t} else {\n\t\t\t\/\/ translate to origin\n\t\t\txref = CalcPoint.clonePoint3dArray(x);\n\t\t\txtrans = CalcPoint.centroid(xref);\n\t\t\tlogger.debug(\"x centroid: \" + xtrans);\n\t\t\txtrans.negate();\n\t\t\tCalcPoint.translate(new Vector3d(xtrans), xref);\n\n\t\t\tyref = CalcPoint.clonePoint3dArray(y);\n\t\t\tytrans = CalcPoint.centroid(yref);\n\t\t\tlogger.debug(\"y centroid: \" + ytrans);\n\t\t\tytrans.negate();\n\t\t\tCalcPoint.translate(new Vector3d(ytrans), yref);\n\t\t\tinnerProduct(yref, xref);\n\t\t}\n\t\tcalcRmsd(wsum);\n\t}","label":0}
{"text":"public function isRoute($route, $active = NULL)\n\t{\n\t\t$this->setActive($active);\n\t\treturn ($this->request->routeIs($route) ? $this->active : '');\n\t}","label":0}
{"text":"def add_mpl_colorscale(fig, heatmap_gs, ax_map, params, title=None):\n    \"\"\"\"\"\"\n    # Set tick intervals\n    cbticks = [params.vmin + e * params.vdiff for e in (0, 0.25, 0.5, 0.75, 1)]\n    if params.vmax > 10:\n        exponent = int(floor(log10(params.vmax))) - 1\n        cbticks = [int(round(e, -exponent)) for e in cbticks]\n\n    scale_subplot = gridspec.GridSpecFromSubplotSpec(\n        1, 3, subplot_spec=heatmap_gs[0, 0], wspace=0.0, hspace=0.0\n    )\n    scale_ax = fig.add_subplot(scale_subplot[0, 1])\n    cbar = fig.colorbar(ax_map, scale_ax, ticks=cbticks)\n    if title:\n        cbar.set_label(title, fontsize=6)\n    cbar.ax.yaxis.set_ticks_position(\"left\")\n    cbar.ax.yaxis.set_label_position(\"left\")\n    cbar.ax.tick_params(labelsize=6)\n    cbar.outline.set_linewidth(0)\n    return cbar","label":0}
{"text":"public static function store_default_php_timezone() {\n        if ((defined('PHPUNIT_TEST') and PHPUNIT_TEST)\n            or defined('BEHAT_SITE_RUNNING') or defined('BEHAT_TEST') or defined('BEHAT_UTIL')) {\n            \/\/ We want all test sites to be consistent by default.\n            self::$defaultphptimezone = 'Australia\/Perth';\n            return;\n        }\n        if (!isset(self::$defaultphptimezone)) {\n            self::$defaultphptimezone = date_default_timezone_get();\n        }\n    }","label":0}
{"text":"def lbrt(self):\n        \"\"\"\"\"\"\n        return self._left, self._bottom, self._right, self._top","label":0}
{"text":"protected function renderModel(ModelInterface $model, EnvironmentInterface $environment)\n    {\n        $event = new FormatModelLabelEvent($environment, $model);\n        $environment->getEventDispatcher()->dispatch(\n            DcGeneralEvents::FORMAT_MODEL_LABEL,\n            $event\n        );\n\n        $model->setMeta($model::LABEL_VALUE, $event->getLabel());\n    }","label":0}
{"text":"func (self *StandardFilterer) RemoveFilter(filter Filter) {\n\tif self.filters.SetContains(filter) {\n\t\tself.filters.SetRemove(filter)\n\t}\n}","label":0}
{"text":"private DNode calculateSourceNode() {\r\n        DNode result = DNode.NOT_FOUND;\r\n        \r\n        for (DNode node : nodes) {\r\n            List<DLink> links = getLinksTo(node);\r\n            if (links.size() == 0) {\r\n                result = node;\r\n                break;\r\n            }\r\n        }\r\n        return result;\r\n    }","label":0}
{"text":"func (s *ScalableTarget) SetRoleARN(v string) *ScalableTarget {\n\ts.RoleARN = &v\n\treturn s\n}","label":0}
{"text":"def read_pipe(pipe_out):\n    \n    out = b''\n    while more_data(pipe_out):\n        out += os.read(pipe_out, 1024)\n\n    return out.decode('utf-8')","label":0}
{"text":"public function fire()\n    {\n        $this->line('Sending SMS via Twilio to: '.$this->argument('phone'));\n\n        \/\/ Grab the text option if specified\n        $text = $this->option('text');\n\n        \/\/ If we havent specified a message, setup a default one\n        if (is_null($text)) {\n            $text = 'This is a test message sent from the artisan console';\n        }\n\n        $this->line($text);\n\n        $this->twilio->message($this->argument('phone'), $text);\n    }","label":0}
{"text":"func (c *Conn) NewMasterParticipation(name, id string) (topo.MasterParticipation, error) {\n\tc.factory.mu.Lock()\n\tdefer c.factory.mu.Unlock()\n\n\t\/\/ Make sure the global path exists.\n\telectionPath := path.Join(electionsPath, name)\n\tif n := c.factory.getOrCreatePath(c.cell, electionPath); n == nil {\n\t\treturn nil, topo.NewError(topo.NoNode, electionPath)\n\t}\n\n\treturn &cMasterParticipation{\n\t\tc:    c,\n\t\tname: name,\n\t\tid:   id,\n\t\tstop: make(chan struct{}),\n\t\tdone: make(chan struct{}),\n\t}, nil\n}","label":0}
{"text":"def ACC_calc(TP, TN, FP, FN):\n    \n    try:\n        result = (TP + TN) \/ (TP + TN + FN + FP)\n        return result\n    except ZeroDivisionError:\n        return \"None\"","label":0}
{"text":"public void setOmega(double omega)\n    {\n        if(omega <= 0 || Double.isNaN(omega) || Double.isInfinite(omega))\n            throw new ArithmeticException(\"omega must be positive, not \" + omega);\n        this.omega = omega;\n        this.cnst = Math.sqrt(Math.pow(2, 1\/omega)-1);\n    }","label":0}
{"text":"public function createFilteringInterface()\n    {\n        \/\/Check if section has filtering enabled\n        $context = $this->getContext();\n        $handle = $context['section_handle'];\n        $section_id = SectionManager::fetchIDFromHandle($handle);\n        $section = SectionManager::fetch($section_id);\n        $filter = $section->get('filter');\n        $count = EntryManager::fetchCount($section_id);\n\n        if ($filter !== 'no' && $count > 1) {\n            $drawer = Widget::Drawer('filtering-' . $section_id, __('Filter Entries'), $this->createFilteringDrawer($section));\n            $drawer->addClass('drawer-filtering');\n            $this->insertDrawer($drawer);\n        }\n    }","label":0}
{"text":"func (clnt *Client) ListUDF(policy *BasePolicy) ([]*UDF, error) {\n\tpolicy = clnt.getUsablePolicy(policy)\n\n\tvar strCmd bytes.Buffer\n\t\/\/ errors are to remove errcheck warnings\n\t\/\/ they will always be nil as stated in golang docs\n\t_, err := strCmd.WriteString(\"udf-list\")\n\n\t\/\/ Send command to one node. That node will distribute it to other nodes.\n\tresponseMap, err := clnt.sendInfoCommand(policy.TotalTimeout, strCmd.String())\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tresponse := responseMap[strCmd.String()]\n\tvals := strings.Split(response, \";\")\n\tres := make([]*UDF, 0, len(vals))\n\n\tfor _, udfInfo := range vals {\n\t\tif strings.Trim(udfInfo, \" \") == \"\" {\n\t\t\tcontinue\n\t\t}\n\t\tudfParts := strings.Split(udfInfo, \",\")\n\n\t\tudf := &UDF{}\n\t\tfor _, values := range udfParts {\n\t\t\tvalueParts := strings.Split(values, \"=\")\n\t\t\tif len(valueParts) == 2 {\n\t\t\t\tswitch valueParts[0] {\n\t\t\t\tcase \"filename\":\n\t\t\t\t\tudf.Filename = valueParts[1]\n\t\t\t\tcase \"hash\":\n\t\t\t\t\tudf.Hash = valueParts[1]\n\t\t\t\tcase \"type\":\n\t\t\t\t\tudf.Language = Language(valueParts[1])\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tres = append(res, udf)\n\t}\n\n\treturn res, nil\n}","label":0}
{"text":"def parse_template_dir\n        @dir_list = []\n        file_list = []\n        @append_templates = []\n        @line_templates = []\n        @whole_templates = []\n        Find.find(@template_path) do |x|\n          case\n          when File.file?(x) && x !~ \/\\\/jumpstart_config\/ then\n            file_list << x.sub!(@template_path, '')\n          when File.directory?(x) && x !~ \/\\\/jumpstart_config\/ then\n            @dir_list << x.sub!(@template_path, '')\n          when File.file?(x) && x =~ \/\\\/jumpstart_config\\\/nginx.local.conf\/ then\n            @nginx_local_template = x\n          when File.file?(x) && x =~ \/\\\/jumpstart_config\\\/nginx.remote.conf\/ then\n            @nginx_remote_template = x\n          end\n        end\n        file_list.each do |file|\n          if file =~ \/_([lL]?)\\._{1}\\w*\/\n            @append_templates << file\n          elsif file =~ \/_(\\d+)\\._{1}\\w*\/\n            @line_templates << file\n          else\n            @whole_templates << file\n          end\n        end\n      end","label":0}
{"text":"public function attach(ObserverInterface $observer): SubjectInterface\r\n   {\r\n       if ($observer instanceof PDFTemplate) {\r\n           parent::attach($observer);\r\n       }\r\n       return $this;\r\n   }","label":0}
{"text":"public synchronized boolean add(SpdData data) {\n        if (data == null) {\n            return false;\n        } else if (members.contains(data)) {\n            return false;\n        } else {\n            return members.add(data);\n        }\n    }","label":0}
{"text":"public function setAttribute($key, $value)\n    {\n        if ($value !== null && $this->hasEnumCast($key)) {\n            $enum = $this->enumCasts[$key];\n\n            if ($value instanceOf $enum) {\n                $this->attributes[$key] = $value->value;\n            } else {\n                $this->attributes[$key] = $enum::getInstance($value)->value;\n            }\n\n            return $this;\n        }\n\n        parent::setAttribute($key, $value);\n    }","label":0}
{"text":"func mainCopy(ctx *cli.Context) error {\n\t\/\/ Parse encryption keys per command.\n\tencKeyDB, err := getEncKeys(ctx)\n\tfatalIf(err, \"Unable to parse encryption keys.\")\n\n\t\/\/ Parse metadata.\n\tuserMetaMap := make(map[string]string)\n\tif ctx.String(\"attr\") != \"\" {\n\t\tuserMetaMap, err = getMetaDataEntry(ctx.String(\"attr\"))\n\t\tfatalIf(err, \"Unable to parse attribute %v\", ctx.String(\"attr\"))\n\t}\n\n\t\/\/ check 'copy' cli arguments.\n\tcheckCopySyntax(ctx, encKeyDB)\n\n\t\/\/ Additional command speific theme customization.\n\tconsole.SetColor(\"Copy\", color.New(color.FgGreen, color.Bold))\n\n\trecursive := ctx.Bool(\"recursive\")\n\tolderThan := ctx.String(\"older-than\")\n\tnewerThan := ctx.String(\"newer-than\")\n\tstorageClass := ctx.String(\"storage-class\")\n\tsseKeys := os.Getenv(\"MC_ENCRYPT_KEY\")\n\tif key := ctx.String(\"encrypt-key\"); key != \"\" {\n\t\tsseKeys = key\n\t}\n\tsse := ctx.String(\"encrypt\")\n\n\tsession := newSessionV8()\n\tsession.Header.CommandType = \"cp\"\n\tsession.Header.CommandBoolFlags[\"recursive\"] = recursive\n\tsession.Header.CommandStringFlags[\"older-than\"] = olderThan\n\tsession.Header.CommandStringFlags[\"newer-than\"] = newerThan\n\tsession.Header.CommandStringFlags[\"storage-class\"] = storageClass\n\tsession.Header.CommandStringFlags[\"encrypt-key\"] = sseKeys\n\tsession.Header.CommandStringFlags[\"encrypt\"] = sse\n\tsession.Header.UserMetaData = userMetaMap\n\n\tvar e error\n\tif session.Header.RootPath, e = os.Getwd(); e != nil {\n\t\tsession.Delete()\n\t\tfatalIf(probe.NewError(e), \"Unable to get current working folder.\")\n\t}\n\n\t\/\/ extract URLs.\n\tsession.Header.CommandArgs = ctx.Args()\n\te = doCopySession(session, encKeyDB)\n\tsession.Delete()\n\n\treturn e\n}","label":0}
{"text":"def add(self, level, message, extra_tags='', *args, **kwargs):\n        \n        if not message:\n            return\n            # Check that the message level is not less than the recording level.\n        level = int(level)\n        if level < self.level:\n            return\n            # Add the message.\n        self.added_new = True\n        message = Message(level, message, extra_tags=extra_tags)\n        message = self.process_message(message, *args, **kwargs)\n        if message:\n            self._queued_messages.append(message)","label":0}
{"text":"protected function interact(InputInterface $input, OutputInterface $output)\n    {\n        if (!$input->getArgument('pool')) {\n            $pool = (new InteractHelper())->askForPool($this, $input, $output);\n            $input->setArgument('pool', $pool);\n        }\n    }","label":0}
{"text":"def quantitate(data):\n    \n    data = to_single_data(to_single_data(data))\n    data = generate_transcript_counts(data)[0][0]\n    data[\"quant\"] = {}\n    if \"sailfish\" in dd.get_expression_caller(data):\n        data = to_single_data(sailfish.run_sailfish(data)[0])\n        data[\"quant\"][\"tsv\"] = data[\"sailfish\"]\n        data[\"quant\"][\"hdf5\"] = os.path.join(os.path.dirname(data[\"sailfish\"]), \"abundance.h5\")\n    if (\"kallisto\" in dd.get_expression_caller(data) or \"pizzly\" in dd.get_fusion_caller(data, [])):\n        data = to_single_data(kallisto.run_kallisto_rnaseq(data)[0])\n        data[\"quant\"][\"tsv\"] = os.path.join(data[\"kallisto_quant\"], \"abundance.tsv\")\n        data[\"quant\"][\"hdf5\"] = os.path.join(data[\"kallisto_quant\"], \"abundance.h5\")\n    if (os.path.exists(os.path.join(data[\"kallisto_quant\"], \"fusion.txt\"))):\n        data[\"quant\"][\"fusion\"] = os.path.join(data[\"kallisto_quant\"], \"fusion.txt\")\n    else:\n        data[\"quant\"][\"fusion\"] = None\n    if \"salmon\" in dd.get_expression_caller(data):\n        data = to_single_data(salmon.run_salmon_reads(data)[0])\n        data[\"quant\"][\"tsv\"] = data[\"salmon\"]\n        data[\"quant\"][\"hdf5\"] = os.path.join(os.path.dirname(data[\"salmon\"]), \"abundance.h5\")\n    return [[data]]","label":0}
{"text":"public AroundTimeoutType<SessionBeanType<T>> getOrCreateAroundTimeout()\n   {\n      List<Node> nodeList = childNode.get(\"around-timeout\");\n      if (nodeList != null &&  nodeList.size() > 0)\n      {\n         return new AroundTimeoutTypeImpl<SessionBeanType<T>>(this, \"around-timeout\", childNode, nodeList.get(0));\n      }\n      return createAroundTimeout();\n   }","label":0}
{"text":"func IsVendorDir(dir string) bool {\n\treturn strings.HasPrefix(dir, \"vendor\/\") || strings.Contains(dir, \"\/vendor\/\")\n}","label":0}
{"text":"protected function addPluginMethods(&$data) {\n    \/\/ Set an empty array at the least.\n    $data['plugin_interface_methods'] = [];\n\n    if (empty($data['plugin_interface'])) {\n      \/\/ If we didn't find an interface for the plugin, we can't do anything\n      \/\/ here.\n      return;\n    }\n\n    \/\/ Analyze the interface, if there is one.\n    $reflection = new \\ReflectionClass($data['plugin_interface']);\n    $methods = $reflection->getMethods();\n\n    $data['plugin_interface_methods'] = [];\n\n    \/\/ Check each method from the plugin interface for suitability.\n    foreach ($methods as $method_reflection) {\n      \/\/ Start by assuming we won't include it.\n      $include_method = FALSE;\n\n      \/\/ Get the actual class\/interface that declares the method, as the\n      \/\/ plugin interface will in most cases inherit from one or more\n      \/\/ interfaces.\n      $declaring_class = $method_reflection->getDeclaringClass()->getName();\n      \/\/ Get the namespace of the component the class belongs to.\n      $declaring_class_component_namespace = $this->getClassComponentNamespace($declaring_class);\n\n      if ($declaring_class_component_namespace == $data['service_component_namespace']) {\n        \/\/ The plugin interface method is declared in the same component as\n        \/\/ the plugin manager service.\n        \/\/ Add it to the list of methods a plugin should implement.\n        $include_method = TRUE;\n      }\n      else {\n        \/\/ The plugin interface method is declared in a namespace other\n        \/\/ than the plugin manager. Therefore it's something from a base\n        \/\/ interface, e.g. from PluginInspectionInterface, and we shouldn't\n        \/\/ add it to the list of methods a plugin should implement...\n        \/\/ except for a few special cases.\n\n        if ($declaring_class == 'Drupal\\Core\\Plugin\\PluginFormInterface') {\n          $include_method = TRUE;\n        }\n        if ($declaring_class == 'Drupal\\Core\\Cache\\CacheableDependencyInterface') {\n          $include_method = TRUE;\n        }\n      }\n\n      if ($include_method) {\n        $data['plugin_interface_methods'][$method_reflection->getName()] = $this->methodCollector->getMethodData($method_reflection);\n      }\n    }\n  }","label":0}
{"text":"def get_batches(qp_pairs, batch_size, need_sort=True):\n    '''\n    \n    '''\n    if need_sort:\n        qp_pairs = sorted(qp_pairs, key=lambda qp: (\n            len(qp['passage_tokens']), qp['id']), reverse=True)\n    batches = [{'qp_pairs': qp_pairs[i:(i + batch_size)]}\n               for i in range(0, len(qp_pairs), batch_size)]\n    shuffle(batches)\n    return batches","label":0}
{"text":"protected function setDefaultLabels()\n    {\n        $this->labels = [\n            'name'                  => _x($this->many, 'Post type general name', $this->i18n),\n            'singular_name'         => _x($this->one, 'Post type singular name', $this->i18n),\n            'menu_name'             => _x($this->many, 'Admin Menu text', $this->i18n),\n            'name_admin_bar'        => _x($this->one, 'Add New on Toolbar', $this->i18n),\n            'add_new_item'          => __('Add New ' . $this->one, $this->i18n),\n            'edit_item'             => __('Edit ' . $this->one, $this->i18n),\n            'new_item'              => __('New ' . $this->one, $this->i18n),\n            'view_item'             => __('View ' . $this->one, $this->i18n),\n            'view_items'            => __('View ' . $this->many, $this->i18n),\n            'search_items'          => __('Search ' . $this->many, $this->i18n),\n            'not_found'             => __('No ' . strtolower($this->many) . ' found.', $this->i18n),\n            'not_found_in_trash'    => __('No ' . strtolower($this->many) . ' found in Trash.', $this->i18n),\n            'parent_item_colon'     => __('Parent ' . $this->many . ':', $this->i18n),\n            'all_items'             => __('All ' . $this->many, $this->i18n),\n            'archives'              => __($this->one . ' Archives', $this->i18n),\n            'attributes'            => __($this->one . ' Attributes', $this->i18n),\n            'insert_into_item'      => __('Insert into ' . strtolower($this->one), $this->i18n),\n            'uploaded_to_this_item' => __('Uploaded to this ' . strtolower($this->one), $this->i18n),\n            'filter_items_list'     => __('Filter ' . strtolower($this->many) . ' list', $this->i18n),\n            'items_list_navigation' => __($this->many . ' list navigation', $this->i18n),\n            'items_list'            => __($this->many . ' list', $this->i18n)\n        ];\n\n        return $this;\n    }","label":0}
{"text":"boolean setGroup(char group[], byte groupstring[])\n    {\n        if (group != null && groupstring != null && group.length > 0 &&\n            groupstring.length > 0) {\n            m_groupinfo_ = group;\n            m_groupstring_ = groupstring;\n            return true;\n        }\n        return false;\n    }","label":0}
{"text":"def rewrite_refs( targets, old,new, index, key='refs', single_ref=False ):\n    \"\"\"\"\"\"\n    for parent in targets:\n        if not isinstance( parent, dict ):\n            try:\n                parent = index[parent]\n            except KeyError, err:\n                continue \n        rewrite_references( parent[key], old, new, single_ref=single_ref )","label":0}
{"text":"func (d *Death) listenForSignal() {\n\tdefer d.wg.Done()\n\tfor {\n\t\tselect {\n\t\tcase <-d.sigChannel:\n\t\t\treturn\n\t\tcase <-d.callChannel:\n\t\t\treturn\n\t\t}\n\t}\n}","label":0}
{"text":"func (s *BatchDeleteTableVersionInput) SetDatabaseName(v string) *BatchDeleteTableVersionInput {\n\ts.DatabaseName = &v\n\treturn s\n}","label":0}
{"text":"protected function setEntityBehaviors($behaviors)\n    {\n        $this->entityLocalBehaviors = $behaviors;\n        $cache = $this->getCache();\n        if ($cache) {\n            $tagDependencyConfig = ['tags' => [$this->getEntityBehaviorsCacheTag()]];\n            $tagDependency = new TagDependency($tagDependencyConfig);\n            $cache->set($this->getEntityBehaviorsCacheKey(), $behaviors, 0, $tagDependency);\n        }\n    }","label":0}
{"text":"func (he *he_IL) MonthNarrow(month time.Month) string {\n\treturn he.monthsNarrow[month]\n}","label":0}
{"text":"public void copyFileFrom(InputStream src, boolean append) throws CopyFileFromException {\n        ChannelSftp sftp;\n\n        try {\n            sftp = alloc();\n            try {\n                sftp.put(src, escape(slashPath), append ? ChannelSftp.APPEND : ChannelSftp.OVERWRITE);\n            } finally {\n                free(sftp);\n            }\n        } catch (SftpException | JSchException e) {\n            throw new CopyFileFromException(this, e);\n        }\n    }","label":0}
{"text":"public function replaceTypeHintsInFile(\n        string $filePath,\n        string $type,\n        string $dbalType,\n        bool $isNullable\n    ): void {\n        $contents = \\ts\\file_get_contents($filePath);\n\n        $search = [\n            ': string;',\n            '(string $',\n            ': string {',\n            '@var string',\n            '@return string',\n            '@param string',\n\n        ];\n\n        $replaceNormal   = [\n            \": $type;\",\n            \"($type $\",\n            \": $type {\",\n            \"@var $type\",\n            \"@return $type\",\n            \"@param $type\",\n        ];\n        $replaceNullable = [\n            \": ?$type;\",\n            \"(?$type $\",\n            \": ?$type {\",\n            \"@var $type|null\",\n            \"@return $type|null\",\n            \"@param $type|null\",\n        ];\n        $replaceRemove   = [\n            ';',\n            '($',\n            ' {',\n            '',\n            '',\n            '',\n        ];\n\n        $replace = $replaceNormal;\n\n        if (\\in_array($dbalType, MappingHelper::MIXED_TYPES, true)) {\n            $replace = $replaceRemove;\n        } elseif ($isNullable) {\n            $replace = $replaceNullable;\n        }\n\n        $contents = \\str_replace(\n            $search,\n            $replace,\n            $contents\n        );\n\n        \\file_put_contents($filePath, $contents);\n    }","label":0}
{"text":"def use_plenary_resource_view(self):\n        \"\"\"\"\"\"\n        self._object_views['resource'] = PLENARY\n        # self._get_provider_session('resource_lookup_session') # To make sure the session is tracked\n        for session in self._get_provider_sessions():\n            try:\n                session.use_plenary_resource_view()\n            except AttributeError:\n                pass","label":0}
{"text":"public static double[][] convertFrontToArray(Front front) {\n    if (front == null) {\n      throw new NullFrontException();\n    }\n\n    double[][] arrayFront = new double[front.getNumberOfPoints()][] ;\n\n    for (int i = 0; i < front.getNumberOfPoints(); i++) {\n      arrayFront[i] = new double[front.getPoint(i).getDimension()] ;\n      for (int j = 0 ; j < front.getPoint(i).getDimension(); j++) {\n        arrayFront[i][j] = front.getPoint(i).getValue(j) ;\n      }\n    }\n\n    return arrayFront ;\n  }","label":0}
{"text":"func New(auth Auth, region string) *Kinesis {\n\tendpoint := fmt.Sprintf(kinesisURL, region)\n\treturn NewWithEndpoint(auth, region, endpoint)\n}","label":0}
{"text":"public function emit(ResponseInterface $response, EmitterInterface $emitter = null)\n    {\n        if (!$emitter) {\n            $emitter = new ResponseEmitter();\n        }\n        $emitter->emit($response);\n    }","label":0}
{"text":"public void selectExample(final ExampleData example) {\n\t\ttry {\n\t\t\tStringBuilder exampleName = new StringBuilder();\n\t\t\tif (example.getExampleGroupName() != null && !example.getExampleGroupName().equals(\"\")) {\n\t\t\t\texampleName.append(example.getExampleGroupName()).append(\" - \");\n\t\t\t}\n\t\t\texampleName.append(example.getExampleName());\n\t\t\tselectExample(example.getExampleClass().newInstance(), exampleName.toString());\n\t\t} catch (Exception e) {\n\t\t\tWMessages.getInstance(this).error(\"Error selecting example \\\"\" + example.\n\t\t\t\t\tgetExampleName() + '\"');\n\t\t\tselectExample(new ErrorComponent(e.getMessage(), e), \"Error\");\n\t\t}\n\t}","label":0}
{"text":"def _decode_bytes(self, bytestring):\n        \n        if not bytestring:\n            return u''\n        try:\n            return bytestring.decode('utf-8')\n        except UnicodeDecodeError:\n            self.close(1007)\n            raise","label":0}
{"text":"func (feature *Feature) IDStr() string {\n\tif feature.ID == nil {\n\t\treturn \"\"\n\t}\n\treturn fmt.Sprintf(\"%v\", feature.ID)\n}","label":0}
{"text":"public function toXML(DOMElement $parent) : DOMElement\n    {\n        $e = $this->toXMLInternal($parent, Constants::NS_MD, 'md:RequestedAttribute');\n\n        if (is_bool($this->isRequired)) {\n            $e->setAttribute('isRequired', $this->isRequired ? 'true' : 'false');\n        }\n\n        return $e;\n    }","label":0}
{"text":"def do_running_tasks(self, arg):\n        \n        for task in asyncio.Task.all_tasks(loop=self.loop):\n            _LOGGING.info(task)","label":0}
{"text":"public UUID getUUID(FastTrackField type)\n   {\n      String value = getString(type);\n      UUID result = null;\n      if (value != null && !value.isEmpty() && value.length() >= 36)\n      {\n         if (value.startsWith(\"{\"))\n         {\n            value = value.substring(1, value.length() - 1);\n         }\n         if (value.length() > 16)\n         {\n            value = value.substring(0, 36);\n         }\n         result = UUID.fromString(value);\n      }\n      return result;\n   }","label":0}
{"text":"public void setScriptWait(int scriptTimeout) {\n        try {\n            driver().manage().timeouts().setScriptTimeout(scriptTimeout, TimeUnit.MILLISECONDS);\n        } catch (Exception e) {\n            \/\/ https:\/\/code.google.com\/p\/selenium\/issues\/detail?id=6015\n            System.err.println(\"Unable to set script timeout (known issue for Safari): \" + e.getMessage());\n        }\n    }","label":0}
{"text":"func (s *Session) ChannelTyping(channelID string) (err error) {\n\n\t_, err = s.RequestWithBucketID(\"POST\", EndpointChannelTyping(channelID), nil, EndpointChannelTyping(channelID))\n\treturn\n}","label":0}
{"text":"private String getPathRelativeToSourceSet(File file) {\n    Path absolutePath = Paths.get(file.getAbsolutePath());\n    Path basePath = Paths.get(task.getProject().file(\"src\").getAbsolutePath() + File.separator + getSourceSetNameFromFile(file));\n    return basePath.relativize(absolutePath).toString();\n  }","label":0}
{"text":"def ParseIfaddrs(ifaddrs):\n  \n  precondition.AssertOptionalType(ifaddrs, ctypes.POINTER(Ifaddrs))\n\n  ifaces = {}\n\n  for ifaddr in IterIfaddrs(ifaddrs):\n    ifname = ctypes.string_at(ifaddr.ifa_name).decode(\"utf-8\")\n    iface = ifaces.setdefault(ifname, rdf_client_network.Interface())\n    iface.ifname = ifname\n\n    if not ifaddr.ifa_addr:\n      continue\n\n    sockaddr = ctypes.cast(ifaddr.ifa_addr, ctypes.POINTER(Sockaddr))\n    iffamily = sockaddr.contents.sa_family\n    if iffamily == AF_INET:\n      sockaddrin = ctypes.cast(ifaddr.ifa_addr, ctypes.POINTER(Sockaddrin))\n\n      address = rdf_client_network.NetworkAddress()\n      address.address_type = rdf_client_network.NetworkAddress.Family.INET\n      address.packed_bytes = struct.pack(\"=L\", sockaddrin.contents.sin_addr)\n      iface.addresses.append(address)\n    elif iffamily == AF_INET6:\n      sockaddrin = ctypes.cast(ifaddr.ifa_addr, ctypes.POINTER(Sockaddrin6))\n\n      address = rdf_client_network.NetworkAddress()\n      address.address_type = rdf_client_network.NetworkAddress.Family.INET6\n      address.packed_bytes = bytes(list(sockaddrin.contents.sin6_addr))\n      iface.addresses.append(address)\n    elif iffamily == AF_LINK:\n      sockaddrdl = ctypes.cast(ifaddr.ifa_addr, ctypes.POINTER(Sockaddrdl))\n\n      nlen = sockaddrdl.contents.sdl_nlen\n      alen = sockaddrdl.contents.sdl_alen\n      iface.mac_address = bytes(sockaddrdl.contents.sdl_data[nlen:nlen + alen])\n    else:\n      raise ValueError(\"Unexpected socket address family: %s\" % iffamily)\n\n  return itervalues(ifaces)","label":0}
{"text":"def list_tokens(self, request, **kwargs):\n        \n\n        # no date checking is done here to make it more obvious if there's an issue with the\n        # number of records. Date filtering will be done on the frontend.\n        infos = [ObfuscatedUrlInfoSerializer(info).data\n                 for info in ObfuscatedUrlInfo.objects.filter(content=self.get_object())]\n        return Response(infos, status=status.HTTP_200_OK, content_type=\"application\/json\")","label":0}
{"text":"def set_relay_off(self):\n        \"\"\"\"\"\"\n        if self.get_relay_state():\n            try:\n                request = requests.get(\n                    '{}\/relay'.format(self.resource), params={'state': '0'},\n                    timeout=self.timeout)\n                if request.status_code == 200:\n                    self.data['relay'] = False\n            except requests.exceptions.ConnectionError:\n                raise exceptions.MyStromConnectionError()","label":0}
{"text":"func Button(name string, text string) *Field {\n\tret := FieldWithType(name, formcommon.BUTTON)\n\tret.SetText(text)\n\treturn ret\n}","label":0}
{"text":"public function addElement($tag, array $attributes = [])\n    {\n        if ($tag instanceof self) {\n            $htmlTag      = $tag;\n            $htmlTag->top = $this->top;\n            $htmlTag->attrs($attributes);\n            $this->elements->add($htmlTag);\n\n            return $htmlTag;\n        }\n\n        return self::make(\n            $tag,\n            $attributes,\n            $this->hasParent() ? $this->parent : $this\n        );\n    }","label":0}
{"text":"func isPathInPrefixList(path string, prefix []string) bool {\n\tfor _, p := range prefix {\n\t\tif strings.HasPrefix(path, p+\"\/\") {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}","label":0}
{"text":"public static function saveConfig($theme_name)\n    {\n        if (!$theme_name) {\n            return false;\n        }\n\n        $grav = Grav::instance();\n        $locator = $grav['locator'];\n        $filename = 'config:\/\/themes\/' . $theme_name . '.yaml';\n        $file = YamlFile::instance($locator->findResource($filename, true, true));\n        $content = $grav['config']->get('themes.' . $theme_name);\n        $file->save($content);\n        $file->free();\n\n        return true;\n    }","label":0}
{"text":"void recordPassStop(String passName, long runtime) {\n    int allocMem = getAllocatedMegabytes();\n    Stats logStats = this.currentPass.pop();\n    checkState(passName.equals(logStats.pass));\n    this.log.add(logStats);\n\n    \/\/ Update fields that aren't related to code size\n    logStats.runtime = runtime;\n    logStats.allocMem = allocMem;\n    logStats.runs = 1;\n    if (this.codeChange.hasCodeChanged()) {\n      logStats.changes = 1;\n    }\n    if (passName.equals(PassNames.PARSE_INPUTS)) {\n      recordParsingStop(logStats);\n    } else if (this.codeChange.hasCodeChanged() && tracksAstSize()) {\n      recordOtherPassStop(logStats);\n    }\n  }","label":0}
{"text":"def wheel(self, direction, steps):\n        \n        self._lock.acquire()\n        if direction == 1:\n            wheel_moved = steps\n        elif direction == 0:\n            wheel_moved = -1*steps\n        else:\n            raise ValueError(\"Expected direction to be 1 or 0\")\n        self._lock.release()\n        return mouse.wheel(wheel_moved)","label":0}
{"text":"protected function getToday() {\n        if (!$this->_today) {\n            $this->_today = new TodayList($this->version, $this->solution['accountSid']);\n        }\n\n        return $this->_today;\n    }","label":0}
{"text":"@Synchronized\n    @SneakyThrows(Exception.class)\n    private void tryInit() {\n        if (!zkInit) {\n            \/\/ we are making remote calls under a lock but this is only done for initialization at \n            \/\/ the start of controller process.\n            ZKUtils.createPathIfNotExists(zkClient, zkPath, HostContainerMap.EMPTY.toBytes());\n            hostContainerMapNode.getListenable().addListener(this::updateMap);\n            hostContainerMapNode.start(true);\n            updateMap();\n            zkInit = true;\n        }\n    }","label":0}
{"text":"def write_csv(file_name, records)\n      line_number = exporter.connection_adapter.write(local_file(file_name), records)\n    end","label":0}
{"text":"public static function cleanField($field) {\n        if ('*' == $field) {\n            return $field;\n        }\n        $strings = explode('.', $field);\n        $fields  = [];\n        foreach ($strings as $str) {\n            $strs = preg_split('#\\bas\\b#i', $str);\n            $fs   = [];\n            foreach ($strs as $s) {\n                if ($s == '*') {\n                    $fs [] = '*';\n                } else {\n                    $fs [] = '`' . trim(trim(trim($s), '`')) . '`';\n                }\n            }\n            $fields [] = implode(' AS ', $fs);\n        }\n\n        return implode('.', $fields);\n    }","label":0}
{"text":"protected function _saveDeliveryAddressState()\n    {\n        $oSession = \\OxidEsales\\Eshop\\Core\\Registry::getSession();\n\n        $blShow = \\OxidEsales\\Eshop\\Core\\Registry::getConfig()->getRequestParameter('blshowshipaddress');\n        if (!isset($blShow)) {\n            $blShow = $oSession->getVariable('blshowshipaddress');\n        }\n\n        $oSession->setVariable('blshowshipaddress', $blShow);\n    }","label":0}
{"text":"def _max_lengths():\n    \n    max_header_length = max([len(x.byte_match) + x.offset\n                             for x in magic_header_array])\n    max_footer_length = max([len(x.byte_match) + abs(x.offset)\n                             for x in magic_footer_array])\n    return max_header_length, max_footer_length","label":0}
{"text":"public function buttons($buttons)\n    {\n        if ($buttons instanceof Closure) {\n            $buttons = $buttons($this);\n        }\n\n        if (!is_array($buttons)) {\n            exit('\u5b50\u83dc\u5355\u5fc5\u987b\u662f\u6570\u7ec4\u6216\u8005\u533f\u540d\u51fd\u6570\u8fd4\u56de\u6570\u7ec4');\n        }\n\n        $this->with('sub_button', $buttons);\n\n        return $this;\n    }","label":0}
{"text":"public function onBootstrap(EventInterface $e)\n    {\n        \/** @var EventManagerInterface $eventManager *\/\n        $eventManager = $e->getApplication()->getEventManager();\n        $eventManager->attach(MvcEvent::EVENT_RENDER, function (MvcEvent $event) {\n            \/** @var HelperPluginManager $viewHelperManager *\/\n            $viewHelperManager = $event->getApplication()->getServiceManager()->get('ViewHelperManager');\n            \/** @var BasePath $basePath *\/\n            $basePath = $viewHelperManager->get('basePath');\n            $viewHelperManager->get('inlineScript')->prependFile($basePath() . '\/js\/kmb.cache.js');\n        });\n    }","label":0}
{"text":"function ($oneSibling, siblingCount, existingSibligCount) {\n      var lines = '';\n      for (var i = 0; i < existingSibligCount; i++) {\n        lines += '<td class=\"leftLine topLine\"><\/td><td class=\"rightLine topLine\"><\/td>';\n      }\n      $oneSibling.parent().prevAll('tr:gt(0)').children().attr('colspan', siblingCount * 2)\n        .end().next().children(':first').after(lines);\n    }","label":0}
{"text":"public boolean put(final int key) {\n\t\tif (isFull()) { \/\/ full\n\t\t\tresizeArray();\n\t\t}\n\t\tint slot = findSlotByKey(key);\n\t\tif (slot >= 0) {\n\t\t\tif (log.isDebugEnabled()) {\n\t\t\t\tlog.debug(\"key already exists: \" + key);\n\t\t\t}\n\t\t\treturn false; \/\/ key already exist\n\t\t}\n\t\tslot = ((-slot) - 1);\n\t\treturn addSlot(slot, key);\n\t}","label":0}
{"text":"def encode(self):\n        \n\n        match_id = self.match_id\n        if match_id is None:\n            match_id = (1 << 11) - 1\n\n        return (self.match_type << 12) | DataStreamSelector.SpecifierEncodings[self.match_spec] | match_id","label":0}
{"text":"def rtree_filter(self):\n        \n        return RtreeFilter(self.src_filter.sitecol,\n                           self.oqparam.maximum_distance,\n                           self.src_filter.filename)","label":0}
{"text":"@Deprecated\n    public static Part<String> param(String name, String value) {\n        return text(name, value);\n    }","label":0}
{"text":"func (c *cookieCsrf) Generate(w http.ResponseWriter, req *http.Request) string {\n\t\/\/ reuse the session cookie if we already have one\n\t\/\/ this makes us more tolerant of multiple clicks against the login page\n\tcookie, err := req.Cookie(c.name)\n\tif err == nil && len(cookie.Value) > 0 {\n\t\treturn cookie.Value\n\t}\n\n\t\/\/ do not set Expires or MaxAge to make this a session cookie\n\tcookie = &http.Cookie{\n\t\tName:     c.name,\n\t\tValue:    crypto.Random256BitsString(),\n\t\tPath:     c.path,\n\t\tDomain:   c.domain,\n\t\tSecure:   c.secure,\n\t\tHttpOnly: true,\n\t}\n\thttp.SetCookie(w, cookie)\n\n\treturn cookie.Value\n}","label":0}
{"text":"public function set($index, $value) : Vector\n    {\n        $values = $this->_set($index, $value, true);\n        $this->setValues($values);\n        return $this;\n    }","label":0}
{"text":"private char readEscapeCharacter() throws JSONException {\n        char escaped = in.charAt(pos++);\n        switch (escaped) {\n            case 'u':\n                if (pos + 4 > in.length()) {\n                    throw syntaxError(\"Unterminated escape sequence\");\n                }\n                String hex = in.substring(pos, pos + 4);\n                pos += 4;\n                try {\n                    return (char) Integer.parseInt(hex, 16);\n                } catch (NumberFormatException nfe) {\n                    throw syntaxError(\"Invalid escape sequence: \" + hex);\n                }\n\n            case 't':\n                return '\\t';\n\n            case 'b':\n                return '\\b';\n\n            case 'n':\n                return '\\n';\n\n            case 'r':\n                return '\\r';\n\n            case 'f':\n                return '\\f';\n\n            case '\\'':\n            case '\"':\n            case '\\\\':\n            default:\n                return escaped;\n        }\n    }","label":0}
{"text":"public static IntStreamEx constant(int value, long length) {\n        return of(new ConstSpliterator.OfInt(value, length, false));\n    }","label":0}
{"text":"public void cleanup() {\n        if (this.childStorages != null) {\n            for (FileTempStorage storage : this.childStorages) {\n                storage.cleanup();\n            }\n        }\n\n        for (File file : this.files.values()) {\n            FileUtils.deleteQuietly(file);\n        }\n        this.files.clear();\n    }","label":0}
{"text":"func (glpeer *GLPeer) Reset() {\n\tsimlog.FuncIn()\n\n\tglpeer.mu.Lock()\n\tdefer glpeer.mu.Unlock()\n\tglpeer.initEng()\n\n\tsimlog.FuncOut()\n}","label":0}
{"text":"function arcLines()\n  {\n    $colors = explode(',', $this->arc_line_colors);\n    imagesetthickness($this->im, 3);\n\n    $color = $colors[rand(0, sizeof($colors) - 1)];\n    $linecolor = imagecolorallocate($this->im, hexdec(substr($color, 1, 2)), hexdec(substr($color, 3, 2)), hexdec(substr($color, 5, 2)));\n\n    $xpos   = $this->text_x_start + ($this->font_size * 2) + rand(-5, 5);\n    $width  = $this->image_width \/ 2.66 + rand(3, 10);\n    $height = $this->font_size * 2.14 - rand(3, 10);\n\n    if ( rand(0,100) % 2 == 0 ) {\n      $start = rand(0,66);\n      $ypos  = $this->image_height \/ 2 - rand(5, 15);\n      $xpos += rand(5, 15);\n    } else {\n      $start = rand(180, 246);\n      $ypos  = $this->image_height \/ 2 + rand(5, 15);\n    }\n\n    $end = $start + rand(75, 110);\n\n    imagearc($this->im, $xpos, $ypos, $width, $height, $start, $end, $linecolor);\n\n    $color = $colors[rand(0, sizeof($colors) - 1)];\n    $linecolor = imagecolorallocate($this->im, hexdec(substr($color, 1, 2)), hexdec(substr($color, 3, 2)), hexdec(substr($color, 5, 2)));\n\n    if ( rand(1,75) % 2 == 0 ) {\n      $start = rand(45, 111);\n      $ypos  = $this->image_height \/ 2 - rand(5, 15);\n      $xpos += rand(5, 15);\n    } else {\n      $start = rand(200, 250);\n      $ypos  = $this->image_height \/ 2 + rand(5, 15);\n    }\n\n    $end = $start + rand(75, 100);\n\n    imagearc($this->im, $this->image_width * .75, $ypos, $width, $height, $start, $end, $linecolor);\n  }","label":0}
{"text":"public void setLabels(INDArray... labels) {\n        if (labels != null && labels.length != this.numOutputArrays) {\n            throw new IllegalArgumentException(\"Invalid output array: network has \" + numOutputArrays\n                    + \" outputs, but array is of length \" + labels.length);\n        }\n        this.labels = labels;\n    }","label":0}
{"text":"public void removePeer(Peer peer) throws InvalidArgumentException {\n        if (shutdown) {\n            throw new InvalidArgumentException(format(\"Can not remove peer from channel %s already shutdown.\", name));\n        }\n        logger.debug(format(\"removePeer %s from channel %s\", peer, toString()));\n\n        checkPeer(peer);\n        removePeerInternal(peer);\n        peer.shutdown(true);\n\n    }","label":0}
{"text":"public function decrementQuantity(int $count = 1)\n    {\n        $this->updateQuantity(max(1, $this->quantity - $count));\n\n        return $this;\n    }","label":0}
{"text":"protected function dirname($path)\n    {\n        if (is_file($path)) {\n            return dirname($path);\n        }\n\n        if (is_dir($path)) {\n            return rtrim($path, '\/');\n        }\n\n        \/\/ no known file\/dir, start making assumptions\n\n        \/\/ ends in \/ = dir\n        if (mb_substr($path, -1) === '\/') {\n            return rtrim($path, '\/');\n        }\n\n        \/\/ has a dot in the name, likely a file\n        if (preg_match('\/.*\\..*$\/', basename($path)) !== 0) {\n            return dirname($path);\n        }\n\n        \/\/ you're on your own here!\n        return $path;\n    }","label":0}
{"text":"def create_empty(cls, tstart, tstop, fill=0.0, nside=64):\n        \"\"\"\"\"\"\n        cth_edges = np.linspace(0, 1.0, 41)\n        domega = utils.edge_to_width(cth_edges) * 2.0 * np.pi\n        hpx = HPX(nside, True, 'CEL', ebins=cth_edges)\n        data = np.ones((len(cth_edges) - 1, hpx.npix)) * fill\n        return cls(data, hpx, cth_edges, tstart=tstart, tstop=tstop)","label":0}
{"text":"def is_python(text, filename='<string>'):\n    \"\"\n    try:\n        compile(text, filename, 'exec')\n    except (SyntaxError, TypeError):\n        return False\n    else:\n        return True","label":0}
{"text":"def _prepare_nameparser_constants():\n    \n    constants = Constants()\n    roman_numeral_suffixes = [u'v', u'vi', u'vii', u'viii', u'ix', u'x',\n                              u'xii', u'xiii', u'xiv', u'xv']\n    titles = [u'Dr', u'Prof', u'Professor', u'Sir', u'Editor', u'Ed', u'Mr',\n              u'Mrs', u'Ms', u'Chair', u'Co-Chair', u'Chairs', u'co-Chairs']\n    constants.titles.remove(*constants.titles).add(*titles)\n    constants.suffix_not_acronyms.add(*roman_numeral_suffixes)\n    return constants","label":0}
{"text":"def compose (composite_property_s, component_properties_s):\n    \n    from . import property\n\n    component_properties_s = to_seq (component_properties_s)\n    composite_property = property.create_from_string(composite_property_s)\n    f = composite_property.feature\n\n    if len(component_properties_s) > 0 and isinstance(component_properties_s[0], property.Property):\n        component_properties = component_properties_s\n    else:\n        component_properties = [property.create_from_string(p) for p in component_properties_s]\n\n    if not f.composite:\n        raise BaseException (\"'%s' is not a composite feature\" % f)\n\n    if property in __composite_properties:\n        raise BaseException ('components of \"%s\" already set: %s' % (composite_property, str (__composite_properties[composite_property])))\n\n    if composite_property in component_properties:\n        raise BaseException ('composite property \"%s\" cannot have itself as a component' % composite_property)\n\n    __composite_properties[composite_property] = component_properties","label":0}
{"text":"public String getI18nPropertiesString() throws IOException {\n    \/\/ Load all properties\n    Properties i18nProps = new Properties();\n\n    \/\/ add entries\n    for (Entry<String, String> entry : properties.entrySet()) {\n      String key = entry.getKey();\n      String escapedKey = validName(key);\n      i18nProps.put(escapedKey, entry.getValue());\n    }\n\n    try (ByteArrayOutputStream outStream = new ByteArrayOutputStream()) {\n      i18nProps.store(outStream, null);\n      \/\/ Property files are always ISO 8859 encoded\n      return outStream.toString(CharEncoding.ISO_8859_1);\n    }\n  }","label":0}
{"text":"def reset(self):\n        \n        if self.running:\n            raise RuntimeError('paco: executor is still running')\n\n        self.pool.clear()\n        self.observer.clear()\n        self.semaphore = asyncio.Semaphore(self.limit, loop=self.loop)","label":0}
{"text":"public function getEmbedHtml () : string\n    {\n        if (null === $this->assetHelper && null === $this->packages)\n        {\n            throw new AssetIntegrationFailedException(\"No asset integration extension found. Please either install `becklyn\/assets-bundle` or `symfony\/asset` to use this bundle.\");\n        }\n\n        $trackJsToken = $this->hostingConfig->getTrackJsToken();\n\n        \/\/ only embed if token is set, in production and not in debug\n        if (null === $trackJsToken || $this->isDebug || \"prod\" !== $this->environment)\n        {\n            return \"\";\n        }\n\n        $assetUrl = null !== $this->assetHelper\n            ? $this->assetHelper->getUrl(\"@hosting\/js\/trackjs.js\")\n            : $this->packages->getUrl(\"bundles\/becklynhosting\/js\/trackjs.js\");\n\n        return \\sprintf(\n            '<script src=\"%s\"><\/script><script>window.TrackJS && TrackJS.install(%s)<\/script>',\n            $assetUrl,\n            \\json_encode([\n                \"token\" => $trackJsToken,\n                \"application\" => $this->hostingConfig->getProjectName(),\n                \"version\" => $this->hostingConfig->getGitCommit(),\n                \"console\" => [\n                    \"display\" => false,\n                ],\n            ])\n        );\n\n    }","label":0}
{"text":"def fullpath(relpath):\n    ''''''\n    if (type(relpath) is object or type(relpath) is file):\n        relpath = relpath.name\n    return os.path.abspath(os.path.expanduser(relpath))","label":0}
{"text":"public static boolean isDateStart1904(final Sheet sheet) {\r\n        ArgUtils.notNull(sheet, \"sheet\");\r\n        \r\n        if(sheet instanceof SheetImpl) {\r\n            try {\r\n                Field field = SheetImpl.class.getDeclaredField(\"nineteenFour\");\r\n                field.setAccessible(true);\r\n                \r\n                boolean value = field.getBoolean(sheet);\r\n                return value;\r\n                \r\n            } catch (NoSuchFieldException | SecurityException e) {\r\n                logger.warn(\"fail access field SheetImpl#nineteenFour\", e);\r\n                return false;\r\n                \r\n            } catch (IllegalArgumentException | IllegalAccessException e) {\r\n                logger.warn(\"fail invoke field SheetImpl#nineteenFour\", e);\r\n                return false;\r\n            }\r\n            \r\n        }\r\n        \r\n        return false;\r\n    }","label":0}
{"text":"public void login(AuthenticatedUser user) throws AuthenticationException\n    {\n        if (!user.isAnonymous() && !Auth.isExistingUser(user.getName()))\n           throw new AuthenticationException(String.format(\"User %s doesn't exist - create it with CREATE USER query first\",\n                                                           user.getName()));\n        this.user = user;\n    }","label":0}
{"text":"func (c *Client) TermVectors(index, typ string) *TermvectorsService {\n\tbuilder := NewTermvectorsService(c)\n\tbuilder = builder.Index(index).Type(typ)\n\treturn builder\n}","label":0}
{"text":"static HandlerRegistration capturePageEvent (String name, EventHandler handler) {\n    return addEventListener(Document.get(), name, handler, true);\n  }","label":0}
{"text":"func (u *User) GetPublicRepos() int {\n\tif u == nil || u.PublicRepos == nil {\n\t\treturn 0\n\t}\n\treturn *u.PublicRepos\n}","label":0}
{"text":"def execute_command(self, *args, **options):\n        \"\"\"\"\"\"\n        pool = self.connection_pool\n        command_name = args[0]\n        for i in _xrange(self.execution_attempts):\n            connection = pool.get_connection(command_name, **options)\n            try:\n                connection.send_command(*args)\n                res = self.parse_response(connection, command_name, **options)\n                pool.release(connection)\n                return res\n            except ConnectionError:\n                pool.purge(connection)\n                if i >= self.execution_attempts - 1:\n                    raise","label":0}
{"text":"func (m *MockConnector) TruncateScope(arg0 context.Context, arg1 string) error {\n\tret := m.ctrl.Call(m, \"TruncateScope\", arg0, arg1)\n\tret0, _ := ret[0].(error)\n\treturn ret0\n}","label":0}
{"text":"public function authorize(\n        array $options = [],\n        callable $redirectHandler = null\n    ) {\n        $url = $this->getAuthorizationUrl($options);\n        if ($redirectHandler) {\n            return $redirectHandler($url, $this);\n        }\n\n        \/\/ @codeCoverageIgnoreStart\n        header('Location: ' . $url);\n        exit;\n        \/\/ @codeCoverageIgnoreEnd\n    }","label":0}
{"text":"def get_settings_by_keyword(keyword=None):\n    \n    settings = []\n    if keyword is None:\n        # iterate over all the schemas to return all settings\n        for key, ischemas in CONTROLPANEL_INTERFACE_MAPPING.items():\n            settings_from_ifaces = map(get_settings_from_interface, ischemas)\n            settings_from_key = {k: v for d in settings_from_ifaces for k, v in d.items()}\n            settings.append({key: settings_from_key,\n                             \"api_url\": url_for(\"senaite.jsonapi.v1.settings\", key=key)})\n        return settings\n    # if keyword has value then get only the settings associated to the key\n    settings_from_ifaces = map(get_settings_from_interface, CONTROLPANEL_INTERFACE_MAPPING[keyword])\n    settings_from_key = {k: v for d in settings_from_ifaces for k, v in d.items()}\n    settings.append({keyword: settings_from_key,\n                     \"api_url\": url_for(\"senaite.jsonapi.v1.settings\", key=keyword)})\n    return settings","label":0}
{"text":"protected CommandServices getCommandServices() {\n\t\tif (commandServices == null) {\n\t\t\tcommandServices = ValkyrieRepository.getInstance().getApplicationConfig().commandServices();\n\t\t}\n\t\treturn this.commandServices;\n\t}","label":0}
{"text":"def make_iml4(R, iml_disagg, imtls=None, poes_disagg=(None,), curves=()):\n    \n    if imtls is None:\n        imtls = {imt: [iml] for imt, iml in iml_disagg.items()}\n    N = len(curves) or 1\n    M = len(imtls)\n    P = len(poes_disagg)\n    arr = numpy.zeros((N, R, M, P))\n    imts = [from_string(imt) for imt in imtls]\n    for m, imt in enumerate(imtls):\n        imls = imtls[imt]\n        for p, poe in enumerate(poes_disagg):\n            for r in range(R):\n                arr[:, r, m, p] = _imls(curves, poe, imt, imls, r)\n    return ArrayWrapper(arr, dict(poes_disagg=poes_disagg, imts=imts))","label":0}
{"text":"public function getMaxDepth()\n    {\n        if (0 === func_num_args() || func_get_arg(0)) {\n            @trigger_error(sprintf('%s is deprecated since version 2.1 and will be removed in 3.0. Use %s::isMaxDepthEnabled() instead.', __METHOD__, __CLASS__), E_USER_DEPRECATED);\n        }\n\n        return $this->maxDepth;\n    }","label":0}
{"text":"public function cache_prune() {\n\t\t$cache = WP_CLI::get_cache();\n\n\t\tif ( ! $cache->is_enabled() ) {\n\t\t\tWP_CLI::error( 'Cache directory does not exist.' );\n\t\t}\n\n\t\t$cache->prune();\n\n\t\tWP_CLI::success( 'Cache pruned.' );\n\t}","label":0}
{"text":"public function getControllerSubpackageKey()\n    {\n        $controllerObjectName = $this->getControllerObjectName();\n        if ($this->controllerSubpackageKey !== null && $controllerObjectName !== '') {\n\n            \/\/ Extract the subpackage key from the controller object name to assure that the case is correct.\n            return substr($controllerObjectName, strlen($this->controllerPackageKey) + 1, strlen($this->controllerSubpackageKey));\n        } else {\n            return $this->controllerSubpackageKey;\n        }\n    }","label":0}
{"text":"def manhattan(h1, h2): # # 7 us @array, 31 us @list \\w 100 bins\n    \n    \"\"\"\n    h1, h2 = __prepare_histogram(h1, h2)\n    return scipy.sum(scipy.absolute(h1 - h2))","label":0}
{"text":"def expansion_attribute(styles={})\n      return nil if styles.nil?\n      return nil if styles[:expansion].nil?\n      value = styles[:expansion]\n      return 0 if [0, :default].include?(value)\n      return nil unless value.respond_to?(:to_f)\n      return value.to_f\n    end","label":0}
{"text":"func NewRepoServerClientset(address string, timeoutSeconds int) Clientset {\n\treturn &clientSet{address: address, timeoutSeconds: timeoutSeconds}\n}","label":0}
{"text":"public Set<OWLClass> getRootUnsatisfiableClasses() throws ExplanationException {\n        StructuralRootDerivedReasoner srd = new StructuralRootDerivedReasoner(manager, baseReasoner, reasonerFactory);\n        Set<OWLClass> estimatedRoots = srd.getRootUnsatisfiableClasses();\n        cls2JustificationMap = new HashMap<OWLClass, Set<Explanation<OWLAxiom>>>();\n        Set<OWLAxiom> allAxioms = new HashSet<OWLAxiom>();\n        for (OWLOntology ont : baseReasoner.getRootOntology().getImportsClosure()) {\n            allAxioms.addAll(ont.getLogicalAxioms());\n        }\n\n        for (OWLClass cls : estimatedRoots) {\n            cls2JustificationMap.put(cls, new HashSet<Explanation<OWLAxiom>>());\n            System.out.println(\"POTENTIAL ROOT: \" + cls);\n        }\n        System.out.println(\"Finding real roots from \" + estimatedRoots.size() + \" estimated roots\");\n\n        int done = 0;\n        roots.addAll(estimatedRoots);\n        for (final OWLClass estimatedRoot : estimatedRoots) {\n            ExplanationGeneratorFactory<OWLAxiom> genFac = ExplanationManager.createExplanationGeneratorFactory(reasonerFactory);\n            ExplanationGenerator<OWLAxiom> gen = genFac.createExplanationGenerator(allAxioms);\n            OWLDataFactory df = manager.getOWLDataFactory();\n            Set<Explanation<OWLAxiom>> expls = gen.getExplanations(df.getOWLSubClassOfAxiom(estimatedRoot, df.getOWLNothing()));\n            cls2JustificationMap.get(estimatedRoot).addAll(expls);\n            done++;\n            System.out.println(\"Done \" + done);\n        }\n        for(OWLClass clsA : estimatedRoots) {\n            for(OWLClass clsB : estimatedRoots) {\n                if (!clsA.equals(clsB)) {\n                    Set<Explanation<OWLAxiom>> clsAExpls = cls2JustificationMap.get(clsA);\n                    Set<Explanation<OWLAxiom>> clsBExpls = cls2JustificationMap.get(clsB);\n                    boolean clsARootForClsB = false;\n                    boolean clsBRootForClsA = false;\n                    \/\/ Be careful of cyclic dependencies!\n                    for(Explanation<OWLAxiom> clsAExpl : clsAExpls) {\n                        for(Explanation<OWLAxiom> clsBExpl : clsBExpls) {\n                            if(isRootFor(clsAExpl, clsBExpl)) {\n                                \/\/ A is a root of B\n                                clsARootForClsB = true;\n\/\/                                System.out.println(clsB + \"  --- depends --->  \" + clsA);\n                            }\n                            else if(isRootFor(clsBExpl, clsAExpl)) {\n                                \/\/ B is a root of A\n                                clsBRootForClsA = true;\n\/\/                                System.out.println(clsA + \"  --- depends --->  \" + clsB);\n                            }\n                        }\n                    }\n                    if (!clsARootForClsB || !clsBRootForClsA) {\n                        if(clsARootForClsB) {\n                            roots.remove(clsB);\n                        }\n                        else if(clsBRootForClsA) {\n                            roots.remove(clsA);\n                        }\n                    }\n                }\n            }\n        }\n        return roots;\n    }","label":0}
{"text":"function iszero(x, tolerance) {\n    if (tolerance === void 0) { tolerance = constants_1.EPSILON; }\n    \/\/ the 'less-than-equal' comparision is necessary for correct result\n    \/\/ when tolerance = 0\n    return Math.abs(x) <= tolerance;\n}","label":0}
{"text":"func (s *Service) AppListOwnedAndCollaborated(ctx context.Context, accountIdentity string, lr *ListRange) (AppListOwnedAndCollaboratedResult, error) {\n\tvar app AppListOwnedAndCollaboratedResult\n\treturn app, s.Get(ctx, &app, fmt.Sprintf(\"\/users\/%v\/apps\", accountIdentity), nil, lr)\n}","label":0}
{"text":"def daemon_context_entry(process_name,\n                         classname,\n                         token,\n                         exchange=EXCHANGE_UTILS,\n                         present_on_boxes=None,\n                         arguments=None,\n                         queue=None,\n                         routing=None,\n                         pid_file=None,\n                         log_file=None):\n    \n    _ROUTING_PREFIX = 'routing_'\n    _QUEUE_PREFIX = 'queue_'\n    _SUFFIX = '_daemon'\n\n    if arguments is not None:\n        assert isinstance(arguments, dict)\n\n    process_entry = DaemonProcessEntry(\n        process_name=process_name,\n        classname=classname,\n        token=token,\n        mq_queue=queue if queue is not None else _QUEUE_PREFIX + token + _SUFFIX,\n        mq_routing_key=routing if routing is not None else _ROUTING_PREFIX + token + _SUFFIX,\n        mq_exchange=exchange,\n        present_on_boxes=present_on_boxes,\n        arguments=arguments if arguments is not None else dict(),\n        log_filename=log_file if log_file is not None else token + _SUFFIX + '.log',\n        pid_filename=pid_file if pid_file is not None else token + _SUFFIX + '.pid')\n    return process_entry","label":0}
{"text":"public function setTagName($tagName)\n\t{\n\t\tif(is_string($tagName))\n\t\t{\n\t\t\t$this->tagName = $tagName;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->tagName = substr(get_called_class(),4);\n\t\t}\n\t}","label":0}
{"text":"protected function generateDataList($namedRoute, array $list = []): string\n    {\n        $routes = $this->parseRoutePattern($namedRoute);\n\n        foreach ($routes as $route) {\n            $url = '';\n            $paramIdx = 0;\n            foreach ($route as $part) {\n                if (is_string($part)) {\n                    $url .= $part;\n                    continue;\n                }\n\n                if ($paramIdx === count($list)) {\n                    throw new Exception('Not enough parameters given');\n                }\n                $url .= $list[$paramIdx++];\n            }\n\n            if ($paramIdx === count($list)) {\n                return $url;\n            }\n        }\n\n        throw new Exception('Too many parameters given');\n    }","label":0}
{"text":"def get_alternative(self, client, dt=None, prefetch=False):\n        \n\n        if self.is_archived() or self.is_paused():\n            return self.control\n\n        if self.is_client_excluded(client):\n            return self.control\n\n        chosen_alternative = self.existing_alternative(client)\n        if not chosen_alternative:\n            chosen_alternative, participate = self.choose_alternative(client)\n            if participate and not prefetch:\n                chosen_alternative.record_participation(client, dt=dt)\n\n        return chosen_alternative","label":0}
{"text":"public function offsetExists( common_Object $key)\r\n    {\r\n        $returnValue = (bool) false;\r\n\r\n        \r\n        $returnValue = isset($this->sequence[$key]);\r\n        \r\n\r\n        return (bool) $returnValue;\r\n    }","label":0}
{"text":"func (p *Processor) Route(msg interface{}, userData interface{}) error {\n\t\/\/ raw\n\tif msgRaw, ok := msg.(MsgRaw); ok {\n\t\ti, ok := p.msgInfo[msgRaw.msgID]\n\t\tif !ok {\n\t\t\treturn fmt.Errorf(\"message %v not registered\", msgRaw.msgID)\n\t\t}\n\t\tif i.msgRawHandler != nil {\n\t\t\ti.msgRawHandler([]interface{}{msgRaw.msgID, msgRaw.msgRawData, userData})\n\t\t}\n\t\treturn nil\n\t}\n\n\t\/\/ json\n\tmsgType := reflect.TypeOf(msg)\n\tif msgType == nil || msgType.Kind() != reflect.Ptr {\n\t\treturn errors.New(\"json message pointer required\")\n\t}\n\tmsgID := msgType.Elem().Name()\n\ti, ok := p.msgInfo[msgID]\n\tif !ok {\n\t\treturn fmt.Errorf(\"message %v not registered\", msgID)\n\t}\n\tif i.msgHandler != nil {\n\t\ti.msgHandler([]interface{}{msg, userData})\n\t}\n\tif i.msgRouter != nil {\n\t\ti.msgRouter.Go(msgType, msg, userData)\n\t}\n\treturn nil\n}","label":0}
{"text":"def create_api_network_ipv6(self):\n        \"\"\"\"\"\"\n\n        return ApiNetworkIPv6(\n            self.networkapi_url,\n            self.user,\n            self.password,\n            self.user_ldap)","label":0}
{"text":"public function toLevel(Experiences $experiences): Level\n    {\n        $woundsBonus = $this->toWoundsBonus($experiences);\n\n        return new Level($this->bonusToLevelValue($woundsBonus), $this);\n    }","label":0}
{"text":"public boolean isSet(_Fields field) {\n    if (field == null) {\n      throw new IllegalArgumentException();\n    }\n\n    switch (field) {\n    case NAME:\n      return is_set_name();\n    case PARALLEL:\n      return is_set_parallel();\n    case TYPE:\n      return is_set_type();\n    case TASK_IDS:\n      return is_set_taskIds();\n    case ERRORS:\n      return is_set_errors();\n    }\n    throw new IllegalStateException();\n  }","label":0}
{"text":"public function handle()\n    {\n        if (! $this->confirmToProceed()) {\n            return;\n        }\n\n        $this->migrator->setConnection($this->option('database'));\n\n        $this->migrator->reset(\n            $this->getMigrationPaths(), $this->option('pretend')\n        );\n\n        \/\/ Once the migrator has run we will grab the note output and send it out to\n        \/\/ the console screen, since the migrator itself functions without having\n        \/\/ any instances of the OutputInterface contract passed into the class.\n        foreach ($this->migrator->getNotes() as $note) {\n            $this->output->writeln($note);\n        }\n    }","label":0}
{"text":"def __write_funding(self):\n        \n        self.__reorganize_funding()\n        # if funding is empty, insert a blank entry so that it'll still write the empty section on the template.\n        if not self.noaa_data_sorted[\"Funding_Agency\"]:\n            self.noaa_data_sorted[\"Funding_Agency\"].append({\"grant\": \"\", \"agency\": \"\"})\n        for idx, entry in enumerate(self.noaa_data_sorted[\"Funding_Agency\"]):\n            logger_lpd_noaa.info(\"funding: {}\".format(idx))\n            self.__write_generic('Funding_Agency', entry)\n        return","label":0}
{"text":"def atlas_get_zonefile_inventory( offset=None, length=None ):\n    \n    global ZONEFILE_INV, ZONEFILE_INV_LOCK\n\n    with ZONEFILE_INV_LOCK:\n        try:\n            assert ZONEFILE_INV is not None\n        except AssertionError:\n            log.error(\"FATAL: zonefile inventory not loaded\")\n            os.abort()\n\n        if offset is None:\n            offset = 0\n\n        if length is None:\n            length = len(ZONEFILE_INV) - offset\n\n        if offset >= len(ZONEFILE_INV):\n            return \"\"\n\n        if offset + length > len(ZONEFILE_INV):\n            length = len(ZONEFILE_INV) - offset\n            \n        ret = ZONEFILE_INV[offset:offset+length]\n        return ret","label":0}
{"text":"def addTurtlePathToSVG(self, svgContainer):\n        \n        for element in self.getSVGElements():\n            svgContainer.addElement(element)\n        return svgContainer","label":0}
{"text":"func (self *InvoiceItemClient) CustomerListN(id string, count int, offset int) ([]*InvoiceItem, error) {\n\treturn self.list(id, count, offset)\n}","label":0}
{"text":"def run(self):\n        \n\n        while (True):\n            if (self.sp):\n                break\n            try:\n                # Blocking until USB data available\n                data = self.cfusb.receive_packet()\n                if len(data) > 0:\n                    pk = CRTPPacket(data[0], list(data[1:]))\n                    self.in_queue.put(pk)\n            except Exception as e:\n                import traceback\n\n                self.link_error_callback(\n                    'Error communicating with the Crazyflie'\n                    ' ,it has probably been unplugged!\\n'\n                    'Exception:%s\\n\\n%s' % (e,\n                                            traceback.format_exc()))","label":0}
{"text":"def dump_database(self):\n        \n        db_file = self.create_file_name(self.databases['source']['name'])\n        self.print_message(\"Dumping postgres database '%s' to file '%s'\"\n                           % (self.databases['source']['name'], db_file))\n        self.export_pgpassword('source')\n        args = [\n            \"pg_dump\",\n            \"-Fc\",\n            \"--no-acl\",\n            \"--no-owner\",\n            \"--dbname=%s\" % self.databases['source']['name'],\n            \"--file=%s\" % db_file,\n        ]\n        args.extend(self.databases['source']['args'])\n        subprocess.check_call(args)\n        return db_file","label":0}
{"text":"func Errorf(ctx context.Context, format string, v ...interface{}) {\n\tinstance.Errorf(ctx, format, v...)\n}","label":0}
{"text":"def clause(grouped_columns_calculations = nil)\n      return nil if sorts_by_method? || default_sorting?\n\n      # unless the sorting is by method, create the sql string\n      order = []\n      each do |sort_column, sort_direction|\n        next if constraint_columns.include? sort_column.name\n        sql = grouped_columns_calculations&.dig(sort_column.name) || sort_column.sort[:sql]\n        next if sql.blank?\n        sql = sql.to_sql if sql.respond_to?(:to_sql)\n\n        parts = Array(sql).map do |column|\n          mongoid? ? [column, sort_direction] : \"#{column} #{sort_direction}\"\n        end\n        order << parts\n      end\n\n      order << @primary_key_order_clause if @sorting_by_primary_key\n      order.flatten!(1)\n      order unless order.empty?\n    end","label":0}
{"text":"func NewDriver() (Driver, error) {\n\tvar drivers map[string]Driver\n\tvar prlctlPath string\n\tvar prlsrvctlPath string\n\tvar supportedVersions []string\n\tDHCPLeaseFile := \"\/Library\/Preferences\/Parallels\/parallels_dhcp_leases\"\n\n\tif runtime.GOOS != \"darwin\" {\n\t\treturn nil, fmt.Errorf(\n\t\t\t\"Parallels builder works only on \\\"darwin\\\" platform!\")\n\t}\n\n\tif prlctlPath == \"\" {\n\t\tvar err error\n\t\tprlctlPath, err = exec.LookPath(\"prlctl\")\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\n\tlog.Printf(\"prlctl path: %s\", prlctlPath)\n\n\tif prlsrvctlPath == \"\" {\n\t\tvar err error\n\t\tprlsrvctlPath, err = exec.LookPath(\"prlsrvctl\")\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\n\tlog.Printf(\"prlsrvctl path: %s\", prlsrvctlPath)\n\n\tdrivers = map[string]Driver{\n\t\t\"11\": &Parallels11Driver{\n\t\t\tParallels9Driver: Parallels9Driver{\n\t\t\t\tPrlctlPath:    prlctlPath,\n\t\t\t\tPrlsrvctlPath: prlsrvctlPath,\n\t\t\t\tdhcpLeaseFile: DHCPLeaseFile,\n\t\t\t},\n\t\t},\n\t\t\"10\": &Parallels10Driver{\n\t\t\tParallels9Driver: Parallels9Driver{\n\t\t\t\tPrlctlPath:    prlctlPath,\n\t\t\t\tPrlsrvctlPath: prlsrvctlPath,\n\t\t\t\tdhcpLeaseFile: DHCPLeaseFile,\n\t\t\t},\n\t\t},\n\t\t\"9\": &Parallels9Driver{\n\t\t\tPrlctlPath:    prlctlPath,\n\t\t\tPrlsrvctlPath: prlsrvctlPath,\n\t\t\tdhcpLeaseFile: DHCPLeaseFile,\n\t\t},\n\t}\n\n\tfor v, d := range drivers {\n\t\tversion, _ := d.Version()\n\t\tif strings.HasPrefix(version, v) {\n\t\t\tif err := d.Verify(); err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\treturn d, nil\n\t\t}\n\t\tsupportedVersions = append(supportedVersions, v)\n\t}\n\n\tlatestDriver := 11\n\tversion, _ := drivers[strconv.Itoa(latestDriver)].Version()\n\tmajVer, _ := strconv.Atoi(strings.SplitN(version, \".\", 2)[0])\n\tlog.Printf(\"Parallels version: %s\", version)\n\tif majVer > latestDriver {\n\t\tlog.Printf(\"Your version of Parallels Desktop for Mac is %s, Packer will use driver for version %d.\", version, latestDriver)\n\t\treturn drivers[strconv.Itoa(latestDriver)], nil\n\t}\n\n\treturn nil, fmt.Errorf(\n\t\t\"Unable to initialize any driver. Supported Parallels Desktop versions: \"+\n\t\t\t\"%s\\n\", strings.Join(supportedVersions, \", \"))\n}","label":0}
{"text":"func (s *ListInstancesOutput) SetNextToken(v string) *ListInstancesOutput {\n\ts.NextToken = &v\n\treturn s\n}","label":0}
{"text":"func FindUserBySlackID(userID string) *bot.User {\n\tslackUser, err := api.GetUserInfo(userID)\n\tif err != nil {\n\t\tfmt.Printf(\"Error retrieving slack user: %s\\n\", err)\n\t\treturn &bot.User{\n\t\t\tID:    userID,\n\t\t\tIsBot: false}\n\t}\n\treturn &bot.User{\n\t\tID:       userID,\n\t\tNick:     slackUser.Name,\n\t\tRealName: slackUser.Profile.RealName,\n\t\tIsBot:    slackUser.IsBot}\n}","label":0}
{"text":"function getView(t, v) {\n                    if (v !== null && v !== undefined && this.numPrecision !== -1 && zebkit.isNumber(v)) {\n                        v = v.toFixed(this.numPrecision);\n                    }\n                    return this.$super(t, v);\n                }","label":0}
{"text":"protected void clientObjectDidChange (ClientObject clobj)\n    {\n        _clobj = clobj;\n        _cloid = _clobj.getOid();\n\n        \/\/ report to our observers\n        notifyObservers(new ObserverOps.Session(this) {\n            @Override protected void notify (SessionObserver obs) {\n                obs.clientObjectDidChange(_client);\n            }\n        });\n    }","label":0}
{"text":"function Animation(modelGeometry) {\n  var geometry = new BAS.ModelBufferGeometry(modelGeometry);\n\n  var i, j;\n\n  var aOffsetAmplitude = geometry.createAttribute('aOffsetAmplitude', 2);\n  var positionBuffer = geometry.getAttribute('position').array;\n  var x, y, distance;\n\n  for (i = 0; i < aOffsetAmplitude.array.length; i += 12) { \/\/ 6 * 2\n    var offset = THREE.Math.randFloat(1, 4);\n    var amplitude = THREE.Math.randFloat(0.5, 1.0);\n\n    x = 0;\n    y = 0;\n\n    \/\/ x\/y position of the corresponding vertex from the position buffer\n    for (j = 0; j < 6; j += 2) {\n      x += positionBuffer[(i + j) \/ 2 * 3];\n      y += positionBuffer[(i + j) \/ 2 * 3 + 1];\n    }\n\n    x \/= 3;\n    y \/= 3;\n\n    distance = Math.sqrt(x * x + y * y);\n\n    for (j = 0; j < 12; j += 2) {\n      aOffsetAmplitude.array[i + j]     = (distance + offset) * (1.0 + THREE.Math.randFloatSpread(0.0125));\n      aOffsetAmplitude.array[i + j + 1] = amplitude;\n    }\n  }\n\n  var aColor = geometry.createAttribute('color', 3);\n  var color = new THREE.Color();\n\n  for (i = 0; i < aColor.array.length; i += 18) { \/\/ 6 * 3\n    color.setHSL(0, 0, THREE.Math.randFloat(0.5, 1.0));\n\n    for (j = 0; j < 18; j += 3) {\n      aColor.array[i + j]     = color.r;\n      aColor.array[i + j + 1] = color.g;\n      aColor.array[i + j + 2] = color.b;\n    }\n  }\n\n  var material = new BAS.StandardAnimationMaterial({\n    flatShading: true,\n    vertexColors: THREE.VertexColors,\n    transparent: true,\n    side: THREE.DoubleSide,\n    uniforms: {\n      uTime: {value: 0},\n      uD: {value: 4.4},\n      uA: {value: 3.2}\n    },\n    uniformValues: {\n      diffuse: new THREE.Color(0x9B111E),\n      roughness: 0.2,\n      metalness: 0.8,\n      opacity: 0.8\n    },\n    vertexFunctions: [\n      BAS.ShaderChunk['ease_cubic_in_out']\n    ],\n    vertexParameters: [\n      'uniform float uTime;',\n      'uniform float uD;',\n      'uniform float uA;',\n      'attribute vec2 aOffsetAmplitude;'\n    ],\n    vertexPosition: [\n      'float tProgress = sin(uTime + aOffsetAmplitude.x \/ uD);',\n      'tProgress = easeCubicInOut(tProgress);',\n      'transformed.z += aOffsetAmplitude.y * uA * tProgress;'\n    ]\n  });\n\n  geometry.computeVertexNormals();\n\n  THREE.Mesh.call(this, geometry, material);\n\n  this.frustumCulled = false;\n}","label":0}
{"text":"public function rewind()\n    {\n        rewind($this->file_handle);\n        $this->line_number = 0;\n        $this->current_line = null;\n        $this->header = null;\n    }","label":0}
{"text":"public void associateAllToDetected() {\n\t\t\/\/ initialize data structures\n\t\tList<CombinedTrack<TD>> all = new ArrayList<>();\n\t\tall.addAll(tracksReactivated);\n\t\tall.addAll(tracksDormant);\n\t\tall.addAll(tracksPureKlt);\n\n\t\tint numTainted = tracksReactivated.size() + tracksDormant.size();\n\n\t\ttracksReactivated.clear();\n\t\ttracksDormant.clear();\n\n\t\t\/\/ detect features\n\t\tdetector.detect(input);\n\t\t\/\/ associate features\n\t\tassociateToDetected(all);\n\n\t\tFastQueue<AssociatedIndex> matches = associate.getMatches();\n\n\t\t\/\/ See which features got respawned and which ones are made dormant\n\t\tfor( int i = 0; i < numTainted; i++ ) {\n\t\t\tassociated[i] = false;\n\t\t}\n\n\t\tfor( AssociatedIndex a : matches.toList() ) {\n\t\t\t\/\/ don't mess with pure-KLT tracks\n\t\t\tif( a.src >= numTainted )\n\t\t\t\tcontinue;\n\n\t\t\tCombinedTrack<TD> t = all.get(a.src);\n\n\t\t\tt.set(detector.getLocation(a.dst));\n\t\t\ttrackerKlt.setDescription((float) t.x, (float) t.y, t.track);\n\t\t\ttracksReactivated.add(t);\n\t\t\tassociated[a.src] = true;\n\t\t}\n\n\t\tfor( int i = 0; i < numTainted; i++ ) {\n\t\t\tif( !associated[i] ) {\n\t\t\t\ttracksDormant.add(all.get(i));\n\t\t\t}\n\t\t}\n\t}","label":0}
{"text":"public function enumValues($hasEmpty = false)\n    {\n        return ($hasEmpty)\n            ? array_merge(array('' => ''), ArrayLib::valuekey($this->getEnum()))\n            : ArrayLib::valuekey($this->getEnum());\n    }","label":0}
{"text":"private function precheckStorage($storage)\n    {\n        if (is_string($storage)) {\n            switch ($storage) {\n                case self::OSS_STORAGE_ARCHIVE:\n                    return;\n                case self::OSS_STORAGE_IA:\n                    return;\n                case self::OSS_STORAGE_STANDARD:\n                    return;\n                default:\n                    break;\n            }\n        }\n        throw new OssException('storage name is invalid');\n    }","label":0}
{"text":"def nn_x(self, x, k=1, radius=np.inf, eps=0.0, p=2):\n        \n        assert len(x) == self.dim_x\n        k_x = min(k, self.size)\n        # Because linear models requires x vector to be extended to [1.0]+x\n        # to accomodate a constant, we store them that way.\n        return self._nn(DATA_X, x, k=k_x, radius=radius, eps=eps, p=p)","label":0}
{"text":"def get_route(self, file_id):\r\n\r\n        ''' \r\n        '''\r\n\r\n        title = '%s.get_route' % self.__class__.__name__\r\n\r\n    # validate inputs\r\n        input_fields = {\r\n            'file_id': file_id,\r\n        }\r\n        for key, value in input_fields.items():\r\n            if value:\r\n                object_title = '%s(%s=%s)' % (title, key, str(value))\r\n                self.fields.validate(value, '.%s' % key, object_title)\r\n\r\n    # construct key word arguments\r\n        request_kwargs = {\r\n            'url': '%s\/getFile' % self.api_endpoint,\r\n            'data': {\r\n                'file_id': file_id\r\n            }\r\n        }\r\n\r\n    # send request\r\n        response_details = self._post_request(**request_kwargs)\r\n\r\n        return response_details","label":0}
{"text":"func (s *StanServer) clearSentAndAck(sub *subState) {\n\tsr := s.ssarepl\n\tsr.waiting.Delete(sub)\n\tsr.ready.Delete(sub)\n\tsub.replicate = nil\n}","label":0}
{"text":"int removeExpired(TimeoutHandler expireHandler)\n    {\n        \/\/ ensure the clock never goes backwards\n        long t = ticker.currentTimeMillis();\n\n        int expired = 0;\n        for (int i = 0; i < slotCount; i++)\n        {\n            expired += slots[i].removeExpired(t, expireHandler);\n        }\n        return expired;\n    }","label":0}
{"text":"def validate(self):\n        \n        dns.rdata.from_text(self.rdclass, self.rdtype, self.to_text())","label":0}
{"text":"public Where<T, ID> exists(QueryBuilder<?, ?> subQueryBuilder) {\n\t\t\/\/ we do this to turn off the automatic addition of the ID column in the select column list\n\t\tsubQueryBuilder.enableInnerQuery();\n\t\taddClause(new Exists(new InternalQueryBuilderWrapper(subQueryBuilder)));\n\t\treturn this;\n\t}","label":0}
{"text":"function after_process() {\n    global $insert_id, $db, $order;\n    if ($_SESSION['paypal_transaction_PDT_passed'] != true) {\n      $_SESSION['order_created'] = '';\n      unset($_SESSION['paypal_transaction_PDT_passed']);\n      return false;\n    } else {\n    \/\/ PDT found order to be approved, so add a new OSH record for this order's PP details\n      unset($_SESSION['paypal_transaction_PDT_passed']);\n      $sql_data_array= array(array('fieldName'=>'orders_id', 'value'=>$insert_id, 'type'=>'integer'),\n                             array('fieldName'=>'orders_status_id', 'value'=>$this->order_status, 'type'=>'integer'),\n                             array('fieldName'=>'date_added', 'value'=>'now()', 'type'=>'noquotestring'),\n                             array('fieldName'=>'customer_notified', 'value'=>0, 'type'=>'integer'),\n                             array('fieldName'=>'comments', 'value'=>'PayPal status: ' . $this->pdtData['payment_status'] . ' ' . ' @ ' . $this->pdtData['payment_date'] . \"\\n\" . ' Trans ID:' . $this->pdtData['txn_id'] . \"\\n\" . ' Amount: ' . $this->pdtData['mc_gross'] . ' ' . $this->pdtData['mc_currency'] . '.', 'type'=>'string'));\n      $db->perform(TABLE_ORDERS_STATUS_HISTORY, $sql_data_array);\n      ipn_debug_email('PDT NOTICE :: Order added: ' . $insert_id . \"\\n\" . 'PayPal status: ' . $this->pdtData['payment_status'] . ' ' . ' @ ' . $this->pdtData['payment_date'] . \"\\n\" . ' Trans ID:' . $this->pdtData['txn_id'] . \"\\n\" . ' Amount: ' . $this->pdtData['mc_gross'] . ' ' . $this->pdtData['mc_currency']);\n\n      \/\/ store the PayPal order meta data -- used for later matching and back-end processing activities\n      $sql_data_array = array('order_id' => $insert_id,\n                          'txn_type' => $this->pdtData['txn_type'],\n                          'module_name' => $this->code . ' ' . $this->codeVersion,\n                          'module_mode' => 'PDT',\n                          'reason_code' => $this->pdtData['reasoncode'],\n                          'payment_type' => $this->pdtData['payment_type'],\n                          'payment_status' => $this->pdtData['payment_status'],\n                          'pending_reason' => $this->pdtData['pendingreason'],\n                          'invoice' => $this->pdtData['invoice'],\n                          'first_name' => $this->pdtData['first_name'],\n                          'last_name' => $this->pdtData['last_name'],\n                          'payer_business_name' => $order->billing['company'],\n                          'address_name' => $order->billing['name'],\n                          'address_street' => $order->billing['street_address'],\n                          'address_city' => $order->billing['city'],\n                          'address_state' => $order->billing['state'],\n                          'address_zip' => $order->billing['postcode'],\n                          'address_country' => $this->pdtData['residence_country'], \/\/ $order->billing['country']\n                          'address_status' => $this->pdtData['address_status'],\n                          'payer_email' => $this->pdtData['payer_email'],\n                          'payer_id' => $this->pdtData['payer_id'],\n                          'payer_status' => $this->pdtData['payer_status'],\n                          'payment_date' => datetime_to_sql_format($this->pdtData['payment_date']),\n                          'business' => $this->pdtData['business'],\n                          'receiver_email' => $this->pdtData['receiver_email'],\n                          'receiver_id' => $this->pdtData['receiver_id'],\n                          'txn_id' => $this->pdtData['txn_id'],\n                          'parent_txn_id' => $this->pdtData['parent_txn_id'],\n                          'num_cart_items' => (float)$this->pdtData['num_cart_items'],\n                          'mc_gross' => (float)$this->pdtData['mc_gross'],\n                          'mc_fee' => (float)$this->pdtData['mc_fee'],\n                          'mc_currency' => $this->pdtData['mc_currency'],\n                          'settle_amount' => (float)$this->pdtData['settle_amount'],\n                          'settle_currency' => $this->pdtData['settle_currency'],\n                          'exchange_rate' => ($this->pdtData['exchange_rate'] > 0 ? $this->pdtData['exchange_rate'] : 1.0),\n                          'notify_version' => (float)$this->pdtData['notify_version'],\n                          'verify_sign' => $this->pdtData['verify_sign'],\n                          'date_added' => 'now()',\n                          'memo' => '{Successful PDT Confirmation - Record auto-generated by payment module}'\n                         );\n\/\/TODO: $db->perform vs zen_db_perform\n      zen_db_perform(TABLE_PAYPAL, $sql_data_array);\n      ipn_debug_email('PDT NOTICE :: paypal table updated: ' . print_r($sql_data_array, true));\n    }\n  }","label":0}
{"text":"@Override\n    public ChronoLocalDateTime<D> with(TemporalAdjuster adjuster) {\n        return toLocalDate().getChronology().ensureChronoLocalDateTime(super.with(adjuster));\n    }","label":0}
{"text":"public static function object_get($object, $key, $default = null)\n    {\n        if (\\is_null($key) || trim($key) === '') {\n            return $object;\n        }\n\n        foreach (explode('.', $key) as $segment) {\n            if (! \\is_object($object) || ! isset($object->{$segment})) {\n                return self::value($default);\n            }\n\n            $object = $object->{$segment};\n        }\n\n        return $object;\n    }","label":0}
{"text":"public function countEntries($searchResults)\n    {\n        if ($this->suppressErrors) {\n            return @ldap_count_entries($this->getConnection(), $searchResults);\n        }\n\n        return ldap_count_entries($this->getConnection(), $searchResults);\n    }","label":0}
{"text":"public function generateDigest($nonce, $createdAt, $password)\n    {\n        return base64_encode(sha1(base64_decode($nonce) . $createdAt . $password, true));\n    }","label":0}
{"text":"function next() {\n        $this->unmoved = false;\n        if ($this->valid()) {\n            $this->currentInstance++;\n            if (!isset($this->instanceCache[$this->currentInstance])) {\n                \/\/ try to load next block (unless we know it's empty)\n                $remainingInstances = !$this->endOfResource && $this->load($this->resourceIterator->current(), $this->currentInstance);\n\n                \/\/ endOfClass or failed loading\n                if (!$remainingInstances) {\n                    $this->resourceIterator->next();\n                    $this->ensureNotEmpty();\n                }\n            }\n            $this->ensureValidResult();\n        }\n    }","label":0}
{"text":"def make_filenames(self, **kwargs):\n        \n        out_dict = dict(ft1file=self.ft1file(**kwargs),\n                        ltcube=self.ltcube(**kwargs),\n                        ccube=self.ccube(**kwargs),\n                        bexpcube=self.bexpcube(**kwargs),\n                        srcmaps=self.srcmaps(**kwargs),\n                        mcube=self.mcube(**kwargs))\n        return out_dict","label":0}
{"text":"public boolean checkWrite()\n    {\n        if (!outActive || state != State.ACTIVE) {\n            return false;\n        }\n\n        \/\/ TODO DIFF V4 small change, it is done like this in 4.2.2\n        boolean full = !checkHwm();\n\n        if (full) {\n            outActive = false;\n            return false;\n        }\n\n        return true;\n    }","label":0}
{"text":"public String getDecodedMessage()\n    {\n        if (message == null)\n        {\n            return null;\n        }\n        return new String(Base64.base64ToByteArray(message), Charset.forName(\"UTF-8\"));\n    }","label":0}
{"text":"private String getStatusCode(DecisionType decision) {\n        if (fXACMLParsingError) {\n            return STATUS_CODE_SYNTAX_ERROR;\n        } else if (fProcessingError) {\n            return STATUS_CODE_PROCESSING_ERROR;\n        } else if (decision == DecisionType.Deny ||\n                decision == DecisionType.Permit) {\n            return STATUS_CODE_OK;\n        } else if (decision == DecisionType.Indeterminate ||\n                decision == DecisionType.Indeterminate_D ||\n                decision == DecisionType.Indeterminate_P ||\n                decision == DecisionType.Indeterminate_DP) {\n            return STATUS_CODE_MISSING_ATTRIBUTE;\n        } else {\n            logger.debug(\"Unknown status code decision\");\n            return STATUS_CODE_PROCESSING_ERROR;\n        }\n    }","label":0}
{"text":"def extract_key_value(line, environ):\n    \n    segments = line.split(\"=\", 1)\n    if len(segments) < 2:\n        return None\n    key, value = segments\n    # foo passes through as-is (with spaces stripped)\n    # '{foo}' passes through literally\n    # \"{foo}\" substitutes from environ's foo\n    value = value.strip()\n    if value[0] == \"'\" and _SQUOTE_RE.match(value):\n        value = value[1:-1]\n    elif value[0] == '\"' and _DQUOTE_RE.match(value):\n        template = value[1:-1]\n        value = template.format(**environ)\n    key = key.strip()\n    value = value.strip()\n    return key, value","label":0}
{"text":"def _initialize_pop(self, pop_size):\n        \"\"\"\"\"\"\n        self.toolbox.register(\"individual\", self._generate)\n        self.toolbox.register(\"population\", tools.initRepeat,\n                              list, self.toolbox.individual)\n        self.population = self.toolbox.population(n=pop_size)\n        if self.neighbours:\n            for i in range(len(self.population)):\n                self.population[i].ident = i\n                self.population[i].neighbours = list(\n                    set(\n                        [(i - x) % len(self.population)\n                         for x in range(1, self.neighbours + 1)] +\n                        [(i + x) % len(self.population)\n                         for x in range(1, self.neighbours + 1)]\n                    ))\n        self.assign_fitnesses(self.population)\n        return","label":0}
{"text":"public function getPaginator( $where        = null,\n                                  $order        = null,\n                                  $columns      = null,\n                                  $joins        = null,\n                                  $quantifier   = null )\n    {\n        $joins = array_merge( (array) $joins, array(\n            'user_group' => array(\n                'table'     => $this->getTableInSchema( 'user_group' ),\n                'where'     => 'user.groupId = user_group.id',\n                'columns'   => array(\n                    'groupName' => 'name',\n                ),\n            ),\n        ) );\n\n        return parent::getPaginator( $where, $order, $columns, $joins, $quantifier );\n    }","label":0}
{"text":"@Override\n  public void validateUpdate(ResourcePool newPool) {\n    \/\/ Replacement must be of the same ResourceType\n    if (!this.getType().equals(newPool.getType())) {\n      throw new IllegalArgumentException(\"ResourceType \" + newPool.getType() + \" can not replace \" + this.getType());\n    }\n    \/\/ Replacement must have the same persistence\n    if (this.isPersistent() != newPool.isPersistent()) {\n      throw new IllegalArgumentException(\"ResourcePool for \" + newPool.getType() + \" with isPersistent=\"\n          + newPool.isPersistent() + \" can not replace isPersistent=\" + this.isPersistent());\n    }\n  }","label":0}
{"text":"private Map<String, Map<String, List<String>>> transformHighlighting() {\r\n\r\n        Map<String, Map<String, List<String>>> result = new HashMap<String, Map<String, List<String>>>();\r\n        if (m_queryResponse.getHighlighting() != null) {\r\n            for (String key : m_queryResponse.getHighlighting().keySet()) {\r\n                Map<String, ?> value = m_queryResponse.getHighlighting().get(key);\r\n                Map<String, List<String>> innerResult = new HashMap<String, List<String>>();\r\n                for (String innerKey : value.keySet()) {\r\n                    Object entry = value.get(innerKey);\r\n                    List<String> innerList = new ArrayList<String>();\r\n                    if (entry instanceof String) {\r\n                        innerResult.put(innerKey, Collections.singletonList((String)entry));\r\n                    } else if (entry instanceof String[]) {\r\n                        String[] li = (String[])entry;\r\n                        for (Object lo : li) {\r\n                            String s = (String)lo;\r\n                            innerList.add(s);\r\n                        }\r\n                        innerResult.put(innerKey, innerList);\r\n                    } else if (entry instanceof List<?>) {\r\n                        List<?> li = (List<?>)entry;\r\n                        for (Object lo : li) {\r\n                            String s = (String)lo;\r\n                            innerList.add(s);\r\n                        }\r\n                        innerResult.put(innerKey, innerList);\r\n                    }\r\n                }\r\n                result.put(key, innerResult);\r\n            }\r\n        }\r\n        return result;\r\n    }","label":0}
{"text":"public void removeLast() {\n\t\tif (this.numTypesProperty.get()>0) {\n\t\t\tswitch(this.types[this.numTypesProperty.get()-1]) {\n\t\t\tcase CLOSE:\n\t\t\t\t\/\/ no coord to remove\n\t\t\t\tbreak;\n\t\t\tcase MOVE_TO:\n\t\t\tcase LINE_TO:\n\t\t\t\tthis.numCoordsProperty.set(this.numCoordsProperty.get()-3);\n\t\t\t\tbreak;\n\t\t\tcase CURVE_TO:\n\t\t\t\tthis.numCoordsProperty.set(this.numCoordsProperty.get()-9);\n\t\t\t\tthis.isPolylineProperty = null;\n\t\t\t\tbreak;\n\t\t\tcase QUAD_TO:\n\t\t\t\tthis.numCoordsProperty.set(this.numCoordsProperty.get()-6);\n\t\t\t\tthis.isPolylineProperty = null;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new IllegalStateException();\n\t\t\t}\n\t\t\tthis.numTypesProperty.set(this.numTypesProperty.get()-1);\n\t\t\tthis.isEmptyProperty = null;\n\t\t\tthis.graphicalBounds = null;\n\t\t\tthis.logicalBounds = null;\n\t\t}\n\t}","label":0}
{"text":"public URL buildUrl(final TmdbParameters params) {\n        StringBuilder urlString = new StringBuilder(TMDB_API_BASE);\n\n        LOG.trace(\"Method: '{}', Sub-method: '{}', Params: {}\", method.getValue(), submethod.getValue(),\n                ToStringBuilder.reflectionToString(params, ToStringStyle.SHORT_PREFIX_STYLE));\n\n        \/\/ Get the start of the URL, substituting TV for the season or episode methods\n        if (method == MethodBase.SEASON || method == MethodBase.EPISODE) {\n            urlString.append(MethodBase.TV.getValue());\n        } else {\n            urlString.append(method.getValue());\n        }\n\n        \/\/ We have either a queury, or a ID request\n        if (params.has(Param.QUERY)) {\n            urlString.append(queryProcessing(params));\n        } else {\n            urlString.append(idProcessing(params));\n        }\n\n        urlString.append(otherProcessing(params));\n\n        try {\n            LOG.trace(\"URL: {}\", urlString.toString());\n            return new URL(urlString.toString());\n        } catch (MalformedURLException ex) {\n            LOG.warn(\"Failed to create URL {} - {}\", urlString.toString(), ex.getMessage());\n            return null;\n        }\n    }","label":0}
{"text":"public static function removeDatabase($dbid, $kphpdbPwd)\r\n\t{\r\n\t\tif(!self::$_started)\r\n\t\t{\r\n\t\t\tself::addDebug(\"KeepassPHP is not started!\");\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\ttry\r\n\t\t{\r\n\t\t\t$kphpdb = self::openKphpDB($dbid, $kphpdbPwd);\r\n\t\t\t$hash = $kphpdb->getDBFileHash();\r\n\t\t\tif($hash !== null)\r\n\t\t\t{\r\n\t\t\t\tif(!self::$_databaseManager->remove($hash))\r\n\t\t\t\t\tself::addDebug(\"Cannot delete database '\" . $hash . \"'.\");\r\n\t\t\t}\r\n\t\t\t$hash = $kphpdb->getKeyFileHash();\r\n\t\t\tif($hash !== null)\r\n\t\t\t{\r\n\t\t\t\tif(!self::$_keyManager->remove($hash))\r\n\t\t\t\t\tself::addDebug(\"Cannot delete key file '\" . $hash . \"'.\");\r\n\t\t\t}\r\n\t\t\treturn self::$_kphpdbManager->removeFromKey($dbid);\r\n\t\t}\r\n\t\tcatch(KeePassPHPException $exception)\r\n\t\t{\r\n\t\t\tself::raiseError($exception);\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}","label":0}
{"text":"public static long count_filtered(nitro_service service, String monitorname, String filter) throws Exception{\n\t\tlbmonbindings_service_binding obj = new lbmonbindings_service_binding();\n\t\tobj.set_monitorname(monitorname);\n\t\toptions option = new options();\n\t\toption.set_count(true);\n\t\toption.set_filter(filter);\n\t\tlbmonbindings_service_binding[] response = (lbmonbindings_service_binding[]) obj.getfiltered(service, option);\n\t\tif (response != null) {\n\t\t\treturn response[0].__count;\n\t\t}\n\t\treturn 0;\n\t}","label":0}
{"text":"function(map, attr, val) {\n\tvar serializer = attr === \"*\" ? false : getPropDefineBehavior(\"serialize\", attr, map.define);\n\tif (serializer === undefined) {\n\t\treturn oldSingleSerialize.call(map, attr, val);\n\t} else if (serializer !== false) {\n\t\treturn typeof serializer === \"function\" ? serializer.call(map, val, attr) : oldSingleSerialize.call(map, attr, val);\n\t}\n}","label":0}
{"text":"public static function instance() : StringSyntax\n    {\n        if (self::$instance === null)\n            self::$instance = new StringSyntax;\n        return self::$instance;\n    }","label":0}
{"text":"public function deleteContact(Contact $contact)\n    {\n        if ($this !== $contact->contactable()->first())\n            return false;\n\n        return $contact->delete();\n    }","label":0}
{"text":"protected function getParams($key = null)\n    {\n        $params = $this->session->get(uri());\n        return !is_null($key) ? array_get($params, $key) : $params;\n    }","label":0}
{"text":"private static EndpointReferenceType createEPR(Server server, String address, SLProperties props) {\n        EndpointReferenceType sourceEPR = server.getEndpoint().getEndpointInfo().getTarget();\n        EndpointReferenceType targetEPR = WSAEndpointReferenceUtils.duplicate(sourceEPR);\n        WSAEndpointReferenceUtils.setAddress(targetEPR, address);\n\n        if (props != null) {\n            addProperties(targetEPR, props);\n        }\n        return targetEPR;\n    }","label":0}
{"text":"public function findPageIdsOfExistingMountPagesByMountIdentifier(string $identifier) : array\n    {\n        $queryBuilder = $this->getQueryBuilder();\n        $resultSet = $queryBuilder\n            ->select('item_uid')\n            ->add('select', $queryBuilder->expr()->count('*', 'queueItemCount'), true)\n            ->from($this->table)\n            ->where(\n                $queryBuilder->expr()->eq('item_type', $queryBuilder->createNamedParameter('pages')),\n                $queryBuilder->expr()->eq('pages_mountidentifier', $queryBuilder->createNamedParameter($identifier))\n            )\n            ->groupBy('item_uid')\n            ->execute();\n\n        $mountedPagesIdsWithQueueItems = [];\n        while ($record = $resultSet->fetch()) {\n            if ($record['queueItemCount'] > 0) {\n                $mountedPagesIdsWithQueueItems[] = $record['item_uid'];\n            }\n        }\n\n        return $mountedPagesIdsWithQueueItems;\n    }","label":0}
{"text":"protected function drawPageHeader()\n    {\n        $data = $this->data;\n\n        $title = utf8_decode($data['header_title'] ?? '');\n        $body = utf8_decode($data['header_body'] ?? '');\n        $info = utf8_decode($this->simpleTemplate($data['header_info'] ?? ''));\n\n        $this->billetSetFont('cell_data');\n\n        if (strlen($title)) {\n            $this->Cell(177, 3, $title, 0, 1, 'C');\n            $this->Ln(2);\n        }\n\n        if (strlen($body)) {\n            $this->MultiCell(177, 3, $body);\n            $this->Ln(2);\n        }\n\n        $this->billetSetFont('digitable');\n        $this->MultiCell(177, 3.5, $info);\n        $this->Ln(4);\n    }","label":0}
{"text":"func (cipher CipherFunction) blockSize() int {\n\tswitch cipher {\n\tcase Cipher3DES:\n\t\treturn des.BlockSize\n\tcase CipherCAST5:\n\t\treturn 8\n\tcase CipherAES128, CipherAES192, CipherAES256:\n\t\treturn 16\n\t}\n\treturn 0\n}","label":0}
{"text":"func (r *BulkIndexRequest) Pipeline(pipeline string) *BulkIndexRequest {\n\tr.pipeline = pipeline\n\tr.source = nil\n\treturn r\n}","label":0}
{"text":"private function ConsumeQName()\r\n\t{\r\n\t\t$c;\r\n\t\t$sb = array();\r\n\t\t$this->BeginToken();\r\n\t\twhile ( ( $c = $this->Peek( 0 ) ) && ord( $c ) != 0 && preg_match( \"\/^[\\p{L}\\p{N}_\\-.:]\/u\", $c ) )\r\n\t\t{\r\n\t\t\t$sb[] = $this->Read();\r\n\t\t}\r\n\t\t$this->EndToken();\r\n\t\t$this->ConsumeToken2( Token::QName, implode( \"\", $sb ) );\r\n\t}","label":0}
{"text":"@FFDCIgnore({ IOException.class })\n    private boolean acceptAndExecuteCommand() {\n        boolean socketValid = false;\n        try {\n            \/\/exceptions thrown by accept are assumed to mean the channel is no longer usable.\n            SocketChannel sc = serverSocketChannel.accept();\n            socketValid = true;\n            if (sc != null) {\n                if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {\n                    Tr.debug(tc, \"accepted socket\", sc);\n                }\n\n                try {\n                    String uuidAndCommand = read(sc);\n                    ServerCommandID commandID = new ServerCommandID(uuidAndCommand);\n                    String command = commandID.getOperation();\n\n                    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {\n                        \/\/ Don't trace uuidAndCommand to avoid putting it in logs\n                        \/\/ (not as secure as the workarea).\n                        Tr.debug(tc, \"read UUID and command\", command);\n                    }\n\n                    \/\/ As a first level of security, require that the user has read access to the .sCommand file.\n                    if (!commandID.validate()) {\n                        if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {\n                            Tr.debug(tc, \"invalid UUID\", uuidAndCommand);\n                        }\n                    } else {\n                        \/\/ As a second level of security, ensure that the client has write access to the workarea. We do\n                        \/\/ this because by default, many umasks create world-readable files, which means everyone on a\n                        \/\/ system can read the .sCommand file.\n                        \/\/\n                        \/\/ Generate a unique filename in .sCommandAuth and request that the client create the named file.\n                        String authID;\n                        File authFile;\n                        do {\n                            authID = Integer.toString(nextCommandAuthID++);\n                            authFile = new File(commandAuthDir, authID);\n                        } while (authFile.exists());\n\n                        \/\/ The server is going to create the file (to ensure server ownership bits are preserved),\n                        authFile.createNewFile();\n\n                        \/\/ write the authId: the client will delete the file to prove write-access\n                        write(sc, authID);\n\n                        if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {\n                            Tr.debug(tc, \"wrote authorization challenge\", authID, authFile);\n                        }\n\n                        \/\/ Read the response: the caller should have deleted the file.\n                        String authIDResponse = read(sc);\n                        if (!authIDResponse.equals(authID) || authFile.exists()) {\n                            if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {\n                                Tr.debug(tc, \"authorization failed\");\n                            }\n                        } else {\n                            if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {\n                                Tr.debug(tc, \"authorization succeeded\");\n                            }\n\n                            sc = executeCommand(sc, command);\n                        }\n                    }\n                } finally {\n                    \/\/ Close the socket: one command per connection.\n                    Utils.tryToClose(sc);\n                }\n            }\n        } catch (IOException ex) {\n            \/\/ FFDCIgnore of IOExceptions: some expected due to async close\n        } catch (Throwable t) {\n            \/\/ Don't allow an exception from a single command to\n            \/\/ break the entire command listener.\n        }\n        return socketValid;\n    }","label":0}
{"text":"public function delete(DocumentReference $document, array $options = [])\n    {\n        $this->writer->delete($document->name(), $options);\n\n        return $this;\n    }","label":0}
{"text":"func (service *VboxPortType) IVBoxSVCAvailabilityChangedEventgetAvailable(request *IVBoxSVCAvailabilityChangedEventgetAvailable) (*IVBoxSVCAvailabilityChangedEventgetAvailableResponse, error) {\n\tresponse := new(IVBoxSVCAvailabilityChangedEventgetAvailableResponse)\n\terr := service.client.Call(\"\", request, response)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn response, nil\n}","label":0}
{"text":"public static boolean is_jhaladi(String str)\n    {\n        String s1 = VarnaUtil.getAdiVarna(str);\n        if (is_jhal(s1)) return true;\n        return false;\n    }","label":0}
{"text":"func TopLevelContext(ctx IndexReaderContext) IndexReaderContext {\n\tfor ctx.Parent() != nil {\n\t\tctx = ctx.Parent()\n\t}\n\treturn ctx\n}","label":0}
{"text":"def receive(\n            self,\n            request: RequestType,\n            user: UserType = None,\n            sender_key_fetcher: Callable[[str], str] = None,\n            skip_author_verification: bool = False) -> Tuple[str, dict]:\n        \n        self.user = user\n        self.get_contact_key = sender_key_fetcher\n        self.payload = json.loads(decode_if_bytes(request.body))\n        self.request = request\n        self.extract_actor()\n        # Verify the message is from who it claims to be\n        if not skip_author_verification:\n            self.verify_signature()\n        return self.actor, self.payload","label":0}
{"text":"function bin(argv) {\n  var uri = argv[2]\n  if (!uri) {\n    console.error('uri is required')\n  }\n  shell.ls(uri, function(err, arr) {\n    for (i=0; i<arr.length; i++) {\n      console.log(arr[i])\n    }\n  })\n}","label":0}
{"text":"public function createStructure(array $options): ItemInterface\n    {\n        $menu = $this->factory->createItem('root');\n\n        $menuItems = [\n            self::ITEM__SEARCH => $this->createMenuItem(\n                self::ITEM__SEARCH,\n                [\n                    'route' => 'ezplatform.search',\n                    'extras' => ['icon' => 'search'],\n                ]\n            ),\n            self::ITEM__BROWSE => $this->createMenuItem(\n                self::ITEM__BROWSE,\n                [\n                    'extras' => ['icon' => 'browse'],\n                    'attributes' => [\n                        'type' => 'button',\n                        'class' => 'btn--udw-browse',\n                        'data-udw-config' => $this->udwExtension->renderUniversalDiscoveryWidgetConfig('single', [\n                            'type' => 'content_create',\n                        ]),\n                        'data-starting-location-id' => $this->configResolver->getParameter(\n                            'universal_discovery_widget_module.default_location_id'\n                        ),\n                    ],\n                ]\n            ),\n            self::ITEM__TREE => $this->createMenuItem(\n                self::ITEM__TREE,\n                [\n                    'extras' => ['icon' => 'content-tree'],\n                    'attributes' => [\n                        'type' => 'button',\n                        'class' => 'ez-btn ez-btn--toggle-content-tree',\n                    ],\n                ]\n            ),\n            self::ITEM__BOOKMARK => $this->createMenuItem(\n                self::ITEM__BOOKMARK,\n                [\n                    'route' => 'ezplatform.bookmark.list',\n                    'extras' => ['icon' => 'bookmark-manager'],\n                ]\n            ),\n        ];\n\n        if ($this->permissionResolver->hasAccess('content', 'restore')) {\n            $menuItems[self::ITEM__TRASH] = $this->createMenuItem(\n                self::ITEM__TRASH,\n                [\n                    'route' => 'ezplatform.trash.list',\n                    'extras' => ['icon' => 'trash'],\n                ]\n            );\n        }\n\n        $menu->setChildren($menuItems);\n\n        return $menu;\n    }","label":0}
{"text":"func (m *mapper) infoForObject(obj runtime.Object, typer runtime.ObjectTyper, preferredGVKs []schema.GroupVersionKind) (*Info, error) {\n\tgroupVersionKinds, _, err := typer.ObjectKinds(obj)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"unable to get type info from the object %q: %v\", reflect.TypeOf(obj), err)\n\t}\n\n\tgvk := groupVersionKinds[0]\n\tif len(groupVersionKinds) > 1 && len(preferredGVKs) > 0 {\n\t\tgvk = preferredObjectKind(groupVersionKinds, preferredGVKs)\n\t}\n\n\tname, _ := metadataAccessor.Name(obj)\n\tnamespace, _ := metadataAccessor.Namespace(obj)\n\tresourceVersion, _ := metadataAccessor.ResourceVersion(obj)\n\tret := &Info{\n\t\tNamespace:       namespace,\n\t\tName:            name,\n\t\tResourceVersion: resourceVersion,\n\n\t\tObject: obj,\n\t}\n\n\tif m.localFn == nil || !m.localFn() {\n\t\trestMapper, err := m.restMapperFn()\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tmapping, err := restMapper.RESTMapping(gvk.GroupKind(), gvk.Version)\n\t\tif err != nil {\n\t\t\treturn nil, fmt.Errorf(\"unable to recognize %v\", err)\n\t\t}\n\t\tret.Mapping = mapping\n\n\t\tclient, err := m.clientFn(gvk.GroupVersion())\n\t\tif err != nil {\n\t\t\treturn nil, fmt.Errorf(\"unable to connect to a server to handle %q: %v\", mapping.Resource, err)\n\t\t}\n\t\tret.Client = client\n\t}\n\n\treturn ret, nil\n}","label":0}
{"text":"def download(self):\n        \n        if not self.can_update():\n            self._tcex.handle_error(910, [self.type])\n\n        return self.tc_requests.download(self.api_type, self.api_sub_type, self.unique_id)","label":0}
{"text":"func (s ServerSpec) WithSkipGetServer(b bool) ServerSpec {\n\ts.connectionArgs.SkipGetServer = b\n\treturn s\n}","label":0}
{"text":"function isDelimiter(code) {\n  return code === 0x22                \/\/ '\"'\n    || code === 0x28                  \/\/ '('\n    || code === 0x29                  \/\/ ')'\n    || code === 0x2C                  \/\/ ','\n    || code === 0x2F                  \/\/ '\/'\n    || code >= 0x3A && code <= 0x40   \/\/ ':', ';', '<', '=', '>', '?' '@'\n    || code >= 0x5B && code <= 0x5D   \/\/ '[', '\\', ']'\n    || code === 0x7B                  \/\/ '{'\n    || code === 0x7D;                 \/\/ '}'\n}","label":0}
{"text":"protected function autoCompleteData($auto = [])\n    {\n        foreach ($auto as $field => $value) {\n            if (is_integer($field)) {\n                $field = $value;\n                $value = null;\n            }\n\n            if (!isset($this->data[$field])) {\n                $default = null;\n            } else {\n                $default = $this->data[$field];\n            }\n\n            $this->setAttr($field, !is_null($value) ? $value : $default);\n        }\n    }","label":0}
{"text":"public function find($fileId, $type = null)\n\t{\n\t\tif (! is_string($fileId)) {\n\t\t\treturn null;\n\t\t}\n\n\t\tif (empty($type)) {\n\t\t\t$type = FileAbstraction::CN();\n\t\t}\n\t\t\n\t\treturn $this->getDoctrineEntityManager()\n\t\t\t\t->find($type, $fileId);\n\t}","label":0}
{"text":"public function add_url_params(moodle_url $url) {\n        if (empty($this->type)) {\n            return $url;\n        }\n\n        $url->param('gpr_type', $this->type);\n\n        if (!empty($this->plugin)) {\n            $url->param('gpr_plugin', $this->plugin);\n        }\n\n        if (!empty($this->courseid)) {\n            $url->param('gpr_courseid' ,$this->courseid);\n        }\n\n        if (!empty($this->userid)) {\n            $url->param('gpr_userid', $this->userid);\n        }\n\n        if (!empty($this->groupid)) {\n            $url->param('gpr_groupid', $this->groupid);\n        }\n\n        if (!empty($this->page)) {\n            $url->param('gpr_page', $this->page);\n        }\n\n        return $url;\n    }","label":0}
{"text":"def load_exchange_word_vectors(\n    filename                 = \"database.db\",\n    maximum_number_of_events = None\n    ):\n    \n    log.info(\"load word vectors of database {filename}\".format(\n        filename = filename\n    ))\n    # Ensure that the database exists.\n    if not os.path.isfile(filename):\n        log.info(\"database {filename} nonexistent\".format(\n            filename = filename\n        ))\n        program.terminate()\n        raise Exception\n    # Access the database.\n    database = access_database(filename = filename)\n    # Access or create the exchanges table.\n    table_exchanges = database[\"exchanges\"]\n    # Access exchanges.\n    table_name = \"exchanges\"\n    # Create a datavision dataset.\n    data = datavision.Dataset()\n    # progress\n    progress = shijian.Progress()\n    progress.engage_quick_calculation_mode()\n    number_of_entries = len(database[table_name])\n    index = 0\n    for index_entry, entry in enumerate(database[table_name].all()):\n        if maximum_number_of_events is not None and\\\n            index >= int(maximum_number_of_events):\n            log.info(\n                \"loaded maximum requested number of events \" +\n                \"({maximum_number_of_events})\\r\".format(\n                    maximum_number_of_events = maximum_number_of_events\n                )\n            )\n            break\n        #unique_identifier = str(entry[\"id\"])\n        utteranceWordVector = str(entry[\"utteranceWordVector\"])\n        responseWordVector = str(entry[\"responseWordVector\"])\n        if utteranceWordVector != \"None\" and responseWordVector != \"None\":\n            index += 1\n\n            utteranceWordVector = eval(\"np.\" + utteranceWordVector.replace(\"float32\", \"np.float32\"))\n            responseWordVector  = eval(\"np.\" + responseWordVector.replace(\"float32\", \"np.float32\"))\n            data.variable(index = index, name = \"utteranceWordVector\", value = utteranceWordVector)\n            data.variable(index = index, name = \"responseWordVector\",  value = responseWordVector )\n\n            #utteranceWordVector = list(eval(\"np.\" + utteranceWordVector.replace(\"float32\", \"np.float32\")))\n            #responseWordVector  = list(eval(\"np.\" + responseWordVector.replace(\"float32\", \"np.float32\")))\n            #for index_component, component in enumerate(utteranceWordVector):\n            #    data.variable(index = index, name = \"uwv\" + str(index_component), value = component)\n            #for index_component, component in enumerate(responseWordVector):\n            #    data.variable(index = index, name = \"rwv\" + str(index_component), value = component)\n\n        print progress.add_datum(fraction = index_entry \/ number_of_entries),\n    return data","label":0}
{"text":"protected function doSet(string $srcKey, $data, int $expire = self::EXPIRE): bool\n    {\n        \/\/ \u83b7\u53d6\u6587\u4ef6\u540d\u4e0e\u6587\u4ef6\u4f4d\u7f6e\n        list ($key, $path, $sqlPath) = $this->getFile($srcKey);\n\n        \/\/ \u521b\u5efa\u76ee\u5f55\n        makeDir(dirname($path));\n\n        \/\/ \u4fdd\u5b58\u7f13\u5b58\u6570\u636e\n        write($path, serialize($data), LOCK_EX);\n\n        \/\/ \u4fdd\u5b58\u7f13\u5b58\u7684\u952e\n        write($sqlPath, $srcKey, LOCK_EX);\n\n        \/\/ \u53d6\u51fa\u76ee\u5f55,\u4fee\u6539,\u4fdd\u5b58\u56de\u53bb\n        $fileList = $this->getFileList();\n        $fileList[$key] = $expire + time();\n        $this->setFileList($fileList);\n\n        return true;\n    }","label":0}
{"text":"def post_build(self, pkt, pay):\n        \n        if conf.contribs['CAN']['swap-bytes']:\n            return CAN.inv_endianness(pkt) + pay\n        return pkt + pay","label":0}
{"text":"func SendError(w http.ResponseWriter, data interface{}, rCode int) {\n\trw := responseWriter{\n\t\tResponseWriter: w,\n\t\tcode:           rCode,\n\t}\n\n\terr := json.NewEncoder(rw).Encode(errOutput{data, rCode})\n\tif err != nil {\n\t\t\/*\n\t\t\tIn case of encoding error, send \"internal server error\" after\n\t\t\tlogging the actual error.\n\t\t*\/\n\t\tLOGHANDLER.Error(err)\n\t\tR500(w, ErrInternalServer)\n\t}\n}","label":0}
{"text":"public function queue($ts = null)\n    {\n        $recipients = $this->to();\n        $author     = $this->from();\n        $subject    = $this->subject();\n        $msgHtml    = $this->msgHtml();\n        $msgTxt     = $this->msgTxt();\n        $campaign   = $this->campaign();\n        $queueId    = $this->queueId();\n\n        foreach ($recipients as $to) {\n            $queueItem = $this->queueItemFactory()->create(EmailQueueItem::class);\n\n            $queueItem->setTo($to);\n            $queueItem->setFrom($author);\n            $queueItem->setSubject($subject);\n            $queueItem->setMsgHtml($msgHtml);\n            $queueItem->setMsgTxt($msgTxt);\n            $queueItem->setCampaign($campaign);\n            $queueItem->setProcessingDate($ts);\n            $queueItem->setQueueId($queueId);\n\n            $res = $queueItem->save();\n        }\n\n        return true;\n    }","label":0}
{"text":"func NewSalt() ([]byte, error) {\n\tsalt := make([]byte, 20)\n\tif _, err := rand.Read(salt); err != nil {\n\t\treturn nil, err\n\t}\n\n\t\/\/ Salt must be a legal UTF8 string.\n\tfor i := 0; i < len(salt); i++ {\n\t\tsalt[i] &= 0x7f\n\t\tif salt[i] == '\\x00' || salt[i] == '$' {\n\t\t\tsalt[i]++\n\t\t}\n\t}\n\n\treturn salt, nil\n}","label":0}
{"text":"protected static function configure(AspectKernel $kernel, string $filterName, CachePathManager $cacheManager): void\n    {\n        if (self::$kernel !== null) {\n            throw new RuntimeException('Filter injector can be configured only once.');\n        }\n        self::$kernel           = $kernel;\n        self::$options          = $kernel->getOptions();\n        self::$filterName       = $filterName;\n        self::$cachePathManager = $cacheManager;\n    }","label":0}
{"text":"private Sentence constructSentence(List<Token> tokens) throws IOException {\n        Sentence sentence;\n        try {\n            sentence = new SimpleSentence(tokens, strict);\n        } catch (IllegalArgumentException e) {\n            throw new IOException(e.getMessage());\n        }\n        return sentence;\n    }","label":0}
{"text":"public void init(MDatabase pDatabase, FieldList record, Object key)\n    {\n        super.init(pDatabase, record, key);\n    }","label":0}
{"text":"private void lazyClassInit() {\n        if (lazyInitDone) return;\n        synchronized (lazyInitLock) {\n            if (redirect!=null) {\n                throw new GroovyBugError(\"lazyClassInit called on a proxy ClassNode, that must not happen.\"+\n                                         \"A redirect() call is missing somewhere!\");\n            }   \n            if (lazyInitDone) return;\n            VMPluginFactory.getPlugin().configureClassNode(compileUnit,this);\n            lazyInitDone = true;\n        }\n    }","label":0}
{"text":"public function destroy(AttributeGroup $attribute)\n    {\n        $deleted = $this->repository->delete($attribute);\n\n        return response()->json([\n            'error' => !$deleted,\n        ]);\n    }","label":0}
{"text":"func getWorkItemsByFilterExpression(ctx context.Context, db application.DB, filterExpression string, filterParentexists *bool, offset *int, limit *int) ([]workitem.WorkItem, link.WorkItemLinkList, link.AncestorList, error) {\n\tvar result []workitem.WorkItem\n\tvar childLinks link.WorkItemLinkList\n\tvar parents link.AncestorList\n\terr := application.Transactional(db, func(appl application.Application) error {\n\t\tvar err error\n\t\t\/\/ add tree option to query if not already present\n\t\tvar reqMap map[string]interface{}\n\t\terr = json.Unmarshal([]byte(filterExpression), &reqMap)\n\t\tif err != nil {\n\t\t\treturn errs.Errorf(\"error unmarshalling query expression for CSV filtering: %s\", filterExpression)\n\t\t}\n\t\tif _, ok := reqMap[\"$OPTS\"]; !ok {\n\t\t\treqMap[\"$OPTS\"] = make(map[string]interface{})\n\t\t}\n\t\t\/\/ Set \"tree-view\" to true. We always want tree-view to be enabled\n\t\t(reqMap[\"$OPTS\"].(map[string]interface{}))[\"tree-view\"] = true\n\t\tupdatedFilterExpression, err := json.Marshal(reqMap)\n\t\tif err != nil {\n\t\t\treturn errs.Errorf(\"error adding tree opt to query expression for CSV filtering: %s\", filterExpression)\n\t\t}\n\t\t\/\/ execute query\n\t\tresult, _, parents, childLinks, err = appl.SearchItems().Filter(ctx, string(updatedFilterExpression), filterParentexists, offset, limit)\n\t\tif err != nil {\n\t\t\tlog.Error(ctx, map[string]interface{}{\n\t\t\t\t\"err\":               err,\n\t\t\t\t\"filter_expression\": filterExpression,\n\t\t\t}, \"unable to list the work items\")\n\t\t\treturn errs.Wrapf(err, \"error executing filter expression for CSV filtering: %s\", filterExpression)\n\t\t}\n\t\treturn nil\n\t})\n\treturn result, childLinks, parents, err\n}","label":0}
{"text":"public function setSession(string $shop, string $accessToken)\n    {\n        $this->setShop($shop);\n        $this->setAccessToken($accessToken);\n\n        return $this;\n    }","label":0}
{"text":"protected function buildException(string $key, int $limit, bool $headers)\n    {\n        $after = $this->limiter->availableIn($key);\n\n        $exception = new ThrottlingException($after, 'Rate limit exceeded.');\n\n        $headers = $this->getHeaders($key, $limit, $headers, $after, $exception->getHeaders());\n\n        $exception->setHeaders($headers);\n\n        return $exception;\n    }","label":0}
{"text":"def _target_chroms_and_header(bam_file, data):\n    \n    special_remaps = {\"chrM\": \"MT\", \"MT\": \"chrM\"}\n    target_chroms = dict([(x.name, i) for i, x in enumerate(ref.file_contigs(dd.get_ref_file(data)))\n                          if chromhacks.is_autosomal_or_sex(x.name)])\n    out_chroms = []\n    with pysam.Samfile(bam_file, \"rb\") as bamfile:\n        for bami, bam_contig in enumerate([c[\"SN\"] for c in bamfile.header[\"SQ\"]]):\n            if bam_contig in target_chroms:\n                target_chrom = bam_contig\n            elif bam_contig in special_remaps and special_remaps[bam_contig] in target_chroms:\n                target_chrom = special_remaps[bam_contig]\n            elif bam_contig.startswith(\"chr\") and bam_contig.replace(\"chr\", \"\") in target_chroms:\n                target_chrom = bam_contig.replace(\"chr\", \"\")\n            elif \"chr%s\" % bam_contig in target_chroms:\n                target_chrom = \"chr%s\" % bam_contig\n            else:\n                target_chrom = None\n            # target_chrom == bam_contig ensures we don't try chr1 -> 1 style remapping\n            if target_chrom and target_chrom == bam_contig:\n                # Order not required if dealing with SAM file header fixing\n                #assert bami == target_chroms[target_chrom], \\\n                #    (\"remove_extracontigs: Non-matching order of standard contig: %s %s (%s vs %s)\" %\n                #     (bam_file, target_chrom, bami, target_chroms[target_chrom]))\n                out_chroms.append(target_chrom)\n    assert out_chroms, (\"remove_extracontigs: Did not find any chromosomes in reference file: %s %s\" %\n                        (bam_file, target_chroms))\n    return out_chroms","label":0}
{"text":"func NewUserinfoController(service *goa.Service, app application.Application, tokenManager manager.TokenManager) *UserinfoController {\n\treturn &UserinfoController{\n\t\tController:   service.NewController(\"UserinfoController\"),\n\t\tapp:          app,\n\t\ttokenManager: tokenManager,\n\t}\n}","label":0}
{"text":"function LocationHashbangUrl(url, hashPrefix, appBaseUrl) {\n  var basePath;\n\n  \/**\n   * Parse given hashbang url into properties\n   * @param {string} url Hashbang url\n   * @private\n   *\/\n  this.$$parse = function(url) {\n    var match = matchUrl(url, this);\n\n\n    if (match.hash && match.hash.indexOf(hashPrefix) !== 0) {\n      throw Error('Invalid url \"' + url + '\", missing hash prefix \"' + hashPrefix + '\" !');\n    }\n\n    basePath = match.path + (match.search ? '?' + match.search : '');\n    match = HASH_MATCH.exec((match.hash || '').substr(hashPrefix.length));\n    if (match[1]) {\n      this.$$path = (match[1].charAt(0) == '\/' ? '' : '\/') + decodeURIComponent(match[1]);\n    } else {\n      this.$$path = '';\n    }\n\n    this.$$search = parseKeyValue(match[3]);\n    this.$$hash = match[5] && decodeURIComponent(match[5]) || '';\n\n    this.$$compose();\n  };\n\n  \/**\n   * Compose hashbang url and update `absUrl` property\n   * @private\n   *\/\n  this.$$compose = function() {\n    var search = toKeyValue(this.$$search),\n        hash = this.$$hash ? '#' + encodeUriSegment(this.$$hash) : '';\n\n    this.$$url = encodePath(this.$$path) + (search ? '?' + search : '') + hash;\n    this.$$absUrl = composeProtocolHostPort(this.$$protocol, this.$$host, this.$$port) +\n                    basePath + (this.$$url ? '#' + hashPrefix + this.$$url : '');\n  };\n\n  this.$$rewriteAppUrl = function(absoluteLinkUrl) {\n    if(absoluteLinkUrl.indexOf(appBaseUrl) == 0) {\n      return absoluteLinkUrl;\n    }\n  }\n\n\n  this.$$parse(url);\n}","label":0}
{"text":"func (f *flatFormatter) Format(format string, args ...interface{}) (n int, errno error) {\n\treturn (*indentFormatter)(f).format(true, format, args...)\n}","label":0}
{"text":"func Implements(expectedValue interface{}) *implementsMatcher {\n\tm := new(implementsMatcher)\n\tm.expectedValue = expectedValue\n\treturn m\n}","label":0}
{"text":"def get_queues(*queue_names, **kwargs):\n    \n    from .settings import QUEUES\n\n    if len(queue_names) <= 1:\n        # Return \"default\" queue if no queue name is specified\n        # or one queue with specified name\n        return [get_queue(*queue_names, **kwargs)]\n\n    # will return more than one queue\n    # import job class only once for all queues\n    kwargs['job_class'] = get_job_class(kwargs.pop('job_class', None))\n\n    queue_params = QUEUES[queue_names[0]]\n    connection_params = filter_connection_params(queue_params)\n    queues = [get_queue(queue_names[0], **kwargs)]\n\n    # do consistency checks while building return list\n    for name in queue_names[1:]:\n        queue = get_queue(name, **kwargs)\n        if type(queue) is not type(queues[0]):\n            raise ValueError(\n                'Queues must have the same class.'\n                '\"{0}\" and \"{1}\" have '\n                'different classes'.format(name, queue_names[0]))\n        if connection_params != filter_connection_params(QUEUES[name]):\n            raise ValueError(\n                'Queues must have the same redis connection.'\n                '\"{0}\" and \"{1}\" have '\n                'different connections'.format(name, queue_names[0]))\n        queues.append(queue)\n\n    return queues","label":0}
{"text":"protected function addColumnAttributeComment(&$script, Column $column)\n    {\n        if ($column->isTemporalType()) {\n            $cptype = $this->getDateTimeClass($column);\n        } else {\n            $cptype = $column->getPhpType();\n        }\n        $clo = $column->getLowercasedName();\n\n        $script .= \"\n    \/**\n     * The value for the $clo field.\n     * \".$column->getDescription();\n        if ($column->getDefaultValue()) {\n            if ($column->getDefaultValue()->isExpression()) {\n                $script .= \"\n     * Note: this column has a database default value of: (expression) \".$column->getDefaultValue()->getValue();\n            } else {\n                $script .= \"\n     * Note: this column has a database default value of: \". $this->getDefaultValueString($column);\n            }\n        }\n        $script .= \"\n     * @var        $cptype\n     *\/\";\n    }","label":0}
{"text":"public function extractOrder()\n    {\n        $this->order = new $this->clsIpnOrders;\n        \/\/ First extract the actual order record itself\n        foreach ($this->ipnData as $key=>$value) {\n            \/\/ This is very simple: the order fields are any fields which do not end in a number\n            \/\/ (because those fields belong to the order items)\n            \/\/ period, amount, mcAmount ends with number and belongs to order. Think condition line should be commented\n            if (preg_match(\"\/.*?(\\d+)$\/\", $key) == 0){\n                \/\/this code iterate over ipnData fields, check if order have related field and set it\n                $parts = explode('_',$key);\n                foreach($parts as $i => $part)\n                    $parts[$i] = ucfirst ($part);\n                $method = join('',$parts);\n                $method = 'set'.$method;\n                if(method_exists($this->order, $method))\n                    $this->order->$method($value);\n            }\n        }\n\n        \/\/ Let's store the payment status too\n        $this->order->setOrderStatus($this->orderStatus);\n        \n        \/\/Updating dates\n        if(!$this->order->getCreatedAt())\n            $this->order->setCreatedAt(new \\DateTime());\n        $this->order->setUpdatedAt(new \\DateTime());\n\n    \n        \/\/ Now retrieve the line items which belong to this order\n        $hasCart = ($this->order->getTxnType() == 'cart');\n        $numItems = $hasCart ? (int)$this->order->getNumCartItems() : 1;\n\n        $totalBeforeDiscount = 0;\n        for ($i = 0; $i < $numItems; $i++) {\n            \n            \/\/ Suffixes are different depending on whether there are multiple items (a cart) or not\n            $suffix = $hasCart ? ($i + 1) : '';\n            $suffixUnderscore = $hasCart ? '_' . $suffix : $suffix;\n\n            $this->orderItems[$i] = new $this->clsIpnOrderItems;\n            if(isset($this->ipnData['item_name' . $suffix]))\n                $this->orderItems[$i]->setItemName($this->ipnData['item_name' . $suffix]);\n            if(isset($this->ipnData['item_number' . $suffix]))\n                $this->orderItems[$i]->setItemNumber($this->ipnData['item_number' . $suffix]);\n            if(isset($this->ipnData['quantity' . $suffix]))\n                $this->orderItems[$i]->setQuantity($this->ipnData['quantity' . $suffix]);\n            if(isset($this->ipnData['mc_gross' . $suffixUnderscore]))\n                $this->orderItems[$i]->setMcGross($this->ipnData['mc_gross' . $suffixUnderscore]);\n            if(isset($this->ipnData['mc_gross' . $suffixUnderscore]) && isset($this->ipnData['quantity' . $suffix]))\n                $this->orderItems[$i]->setCostPerItem(floatval($this->ipnData['mc_gross' . $suffixUnderscore]) \/ intval($this->ipnData['quantity' . $suffix])); \/\/ Should be fine because quantity can never be 0\n            \n            \/\/ Update the total before the discount was applied\n            $totalBeforeDiscount +=  $this->orderItems[$i]->getMcGross();\n            \n            if(isset($this->ipnData['mc_handling' . $suffix]))\n                $this->orderItems[$i]->setMcHandling($this->ipnData['mc_handling' . $suffix]);\n            if(isset($this->ipnData['mc_shipping' . $suffix]))\n                $this->orderItems[$i]->setMcShipping($this->ipnData['mc_shipping' . $suffix]);\n            if(isset($this->ipnData['tax' . $suffix]))\n                $this->orderItems[$i]->setTax($this->ipnData['tax' . $suffix]); \/\/ Tax is not always set on an item\n                        \n            \n            \/\/ Set the order item options if any\n            \/\/ $count = 7 because PayPal allows you to set a maximum of 7 options per item\n            \/\/ Reference: https:\/\/cms.paypal.com\/us\/cgi-bin\/?cmd=_render-content&content_ID=developer\/e_howto_html_Appx_websitestandard_htmlvariables\n            for ($ii = 1, $count = 7; $ii < $count; $ii++)\n            {\n                if(isset($this->ipnData['option_name'.$ii.$suffixUnderscore])) {\n                    $method = 'setOptionName' . $ii;\n                    $this->orderItems[$i]->$method($this->ipnData['option_name'.$ii.$suffixUnderscore]);\n                }\n                if(isset($this->ipnData['option_selection'.$ii.$suffixUnderscore])) {\n                    $method = 'setOptionSelection' . $ii;\n                    $this->orderItems[$i]->$method($this->ipnData['option_selection'.$ii.$suffixUnderscore]);\n                }\n            }\n            \n            \/\/Updating dates\n            if(!$this->orderItems[$i]->getCreatedAt())\n                $this->orderItems[$i]->setCreatedAt(new \\DateTime());\n            $this->orderItems[$i]->setUpdatedAt(new \\DateTime());\n        }\n\n        \/\/ And calculate the discount, as it's useful to add this into emails etc\n        $this->order->setDiscount($totalBeforeDiscount - $this->order->getMcGross());\n    }","label":0}
{"text":"public static function paraFilter($para)\n    {\n        $para_filter = array();\n        while (list ($key, $val) = each($para)) {\n            if (strtolower(trim($key)) === \"sign\" || trim($val) === \"\")\n                continue;\n            else\n                $para_filter[$key] = $para[$key];\n        }\n        return $para_filter;\n    }","label":0}
{"text":"func (service *VboxPortType) IStorageControllersetControllerType(request *IStorageControllersetControllerType) (*IStorageControllersetControllerTypeResponse, error) {\n\tresponse := new(IStorageControllersetControllerTypeResponse)\n\terr := service.client.Call(\"\", request, response)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn response, nil\n}","label":0}
{"text":"public function sortRecords(array $sorting)\n    {\n        $this->flushCacheBeforeChange();\n\n        $result = parent::sortRecords($sorting);\n        $this->flushCacheAfterChange();\n\n        return $result;\n    }","label":0}
{"text":"function() {\n      var response = true;\n      \n      \/\/ Validate all the sub fields\n      for (var i = 0 ; i < this.inputs.length ; i++) {\n   \t   var input = this.inputs[i];\n   \t   input.setClassFromState(); \/\/ update field classes (mark invalid fields...)\n   \t   var state = input.getState();\n   \t   if( state == inputEx.stateRequired || state == inputEx.stateInvalid ) {\n   \t\t   response = false; \/\/ but keep looping on fields to set classes\n   \t   }\n      }\n      return response;\n   }","label":0}
{"text":"protected function getUserConfig(User $user, AreaContract $area)\n    {\n        $provider   = $this->twoFactorProvidersService->getEnabledInArea($area);\n        $userConfig = $this->userConfigRepository->findByUserIdAndProviderId($user->id, $provider->getId());\n\n        if ($userConfig) {\n            return $userConfig;\n        }\n\n        $data = [\n            'user_id'     => $user->id,\n            'provider_id' => $provider->getId(),\n        ];\n\n        return $this->userConfigRepository->save($data);\n    }","label":0}
{"text":"public function setPrimaryKey($name, $type = 'int') {\n        $column = $this->createColumnDef($type, false);\n        $column['autoIncrement'] = true;\n        $column['primary'] = true;\n\n        $this->columns[$name] = $column;\n\n        \/\/ Add the pk index.\n        $this->addIndex(Db::INDEX_PK, $name);\n\n        return $this;\n    }","label":0}
{"text":"def save_as(self, name=None, close=False):\r\n        \"\"\"\"\"\"\r\n        current_client = self.get_current_client()\r\n        current_client.save()\r\n        original_path = current_client.get_filename()\r\n        if not name:\r\n            original_name = osp.basename(original_path)\r\n        else:\r\n            original_name = name\r\n        filename, _selfilter = getsavefilename(self, _(\"Save notebook\"),\r\n                                               original_name, FILES_FILTER)\r\n        if filename:\r\n            nb_contents = nbformat.read(original_path, as_version=4)\r\n            nbformat.write(nb_contents, filename)\r\n            if not close:\r\n                self.close_client(save=True)\r\n            self.create_new_client(filename=filename)","label":0}
{"text":"function( context, target ) {\n    var $$target = $.qsa( target || 'u, ins', context )\n    var i = $$target.length\n\n    traverse: while ( i-- ) {\n      var $this = $$target[ i ]\n      var $prev = null\n\n      \/\/ Ignore all `<wbr>` and comments in between,\n      \/\/ and add class `.adjacent` once two targets\n      \/\/ are next to each other.\n      ignore: do {\n        $prev = ( $prev || $this ).previousSibling\n\n        if ( !$prev ) {\n          continue traverse\n        } else if ( $$target[ i-1 ] === $prev ) {\n          $this.classList.add( 'adjacent' )\n        }\n      } while ( $.isIgnorable( $prev ))\n    }\n  }","label":0}
{"text":"public function current()\n    {\n        $keys = array_keys($this->items);\n        $var = $this->items[$keys[$this->index]];\n\n        return $var;\n    }","label":0}
{"text":"func (s *ModifyClusterSnapshotInput) SetForce(v bool) *ModifyClusterSnapshotInput {\n\ts.Force = &v\n\treturn s\n}","label":0}
{"text":"public void marshall(RemotePortDetails remotePortDetails, ProtocolMarshaller protocolMarshaller) {\n\n        if (remotePortDetails == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(remotePortDetails.getPort(), PORT_BINDING);\n            protocolMarshaller.marshall(remotePortDetails.getPortName(), PORTNAME_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }","label":0}
{"text":"function () {\n\t    eventPluginOrder = null;\n\t    for (var pluginName in namesToPlugins) {\n\t      if (namesToPlugins.hasOwnProperty(pluginName)) {\n\t        delete namesToPlugins[pluginName];\n\t      }\n\t    }\n\t    EventPluginRegistry.plugins.length = 0;\n\t\n\t    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;\n\t    for (var eventName in eventNameDispatchConfigs) {\n\t      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {\n\t        delete eventNameDispatchConfigs[eventName];\n\t      }\n\t    }\n\t\n\t    var registrationNameModules = EventPluginRegistry.registrationNameModules;\n\t    for (var registrationName in registrationNameModules) {\n\t      if (registrationNameModules.hasOwnProperty(registrationName)) {\n\t        delete registrationNameModules[registrationName];\n\t      }\n\t    }\n\t\n\t    if (false) {\n\t      var possibleRegistrationNames = EventPluginRegistry.possibleRegistrationNames;\n\t      for (var lowerCasedName in possibleRegistrationNames) {\n\t        if (possibleRegistrationNames.hasOwnProperty(lowerCasedName)) {\n\t          delete possibleRegistrationNames[lowerCasedName];\n\t        }\n\t      }\n\t    }\n\t  }","label":0}
{"text":"def gff(args):\n    \n    align_choices = (\"left\", \"center\", \"right\")\n    p = OptionParser(gff.__doc__)\n    p.add_option(\"--align\", default=\"left\", choices=align_choices,\n                 help=\"Horizontal alignment [default: %default]\")\n    p.add_option(\"--noUTR\", default=False, action=\"store_true\",\n                 help=\"Do not plot UTRs [default: %default]\")\n    opts, args = p.parse_args(args)\n\n    if len(args) < 1:\n        sys.exit(not p.print_help())\n\n    fig = plt.figure(1, (8, 5))\n    root = fig.add_axes([0, 0, 1, 1])\n\n    gffiles = args\n    ngenes = len(gffiles)\n\n    canvas = .6\n    setups, ratio = get_setups(gffiles, canvas=canvas, noUTR=opts.noUTR)\n    align = opts.align\n    xs = .2 if align == \"left\" else .8\n    yinterval = canvas \/ ngenes\n    ys = .8\n    tip = .01\n    for genename, mrnabed, cdsbeds in setups:\n        ExonGlyph(root, xs, ys, mrnabed, cdsbeds, ratio=ratio, align=align)\n        if align == \"left\":\n            root.text(xs - tip, ys, genename, ha=\"right\", va=\"center\")\n        elif align == \"right\":\n            root.text(xs + tip, ys, genename, ha=\"left\", va=\"center\")\n        ys -= yinterval\n\n    root.set_xlim(0, 1)\n    root.set_ylim(0, 1)\n    root.set_axis_off()\n\n    figname = \"exons.pdf\"\n    savefig(figname, dpi=300)","label":0}
{"text":"private function reconnect()\n    {\n        $auto = $this->_auto_reconnect;\n        $this->disconnect();\n        $this->auto_reconnect = $auto;\n        $this->connect();\n    }","label":0}
{"text":"function (separator, page, args) {\n\n        \/\/ By default, we return page name without arguments.\n        var ret = page;\n        if (typeof args !== 'undefined') {\n            if (args && args.length) {\n                \/\/ Some arguments have been provided, add them.\n                if (args.length !== 0) {\n                    ret = page + separator + args.join(separator);\n                }\n            } else {\n                \/\/ Argument isn't an array, add it.\n                ret = page + separator + args;\n            }\n        }\n        return ret;\n    }","label":0}
{"text":"protected function compileDo(Node $node)\n    {\n\n        $subject = $node->subject;\n\n        if (!empty($subject))\n            $this->throwException(\n                \"Do-loops can't have a subject, they only accept children to repeat.\",\n                $node\n            );\n\n        if (!$node->next() || $node->next()->type !== 'while')\n            $this->throwException(\n                \"A do-statement needs a while-statement with a condition following immediately, {$node->next()->type} was provided\"\n            );\n\n        \/\/Notice that the } wont have closing ? >, php needs this.\n        \/\/Check compileWhile to see the combination of both\n        $phtml = $this->createCode(\"do {\").$this->newLine();\n        $phtml .= $this->compileChildren($node->children).$this->newLine();\n        $phtml .= $this->indent().$this->createCode('}', '<?php ', '').$this->newLine();\n\n        return $phtml;\n    }","label":0}
{"text":"private static void buildMatchVariables(\n      TypeSpec.Builder type, Map<String, Set<String>> territoryData, LanguageMatchingData data) {\n    \n    Map<String, Set<String>> territories = flatten(territoryData);\n    \n    CodeBlock.Builder code = CodeBlock.builder();\n    code.add(\"new $T<$T, $T<$T>>() {{\\n\", HASHMAP, STRING, SET, STRING);\n    for (Map.Entry<String, Set<String>> entry : territories.entrySet()) {\n      code.add(\"  put($S, new $T<>(\", entry.getKey(), HASHSET);\n      List<String> list = new ArrayList<>(entry.getValue());\n      Collections.sort(list);\n      addStringList(code, list, \"    \");\n      code.add(\"));\\n\");\n    }\n    code.add(\"\\n}}\");\n    \n    TypeName typeName = ParameterizedTypeName.get(MAP, STRING, SET_STRING);\n    type.addField(FieldSpec.builder(typeName, \"TERRITORIES\", PROTECTED, STATIC, FINAL)\n        .initializer(code.build())\n        .build());\n\n    \/\/ Generate mapping for each variable and its inverse.\n    Map<String, Set<String>> variables = new LinkedHashMap<>();\n    \n    for (Pair<String, String> pair : data.matchVariables) {\n      String variable = pair._1;\n      \n      Set<String> countries = new HashSet<>();\n      for (String regionId : pair._2.split(\"\\\\+\")) {\n        Set<String> children = territories.get(regionId);\n        if (children != null) {\n          countries.addAll(children);\n        } else {\n          countries.add(regionId);\n        }\n      }\n\n      variables.put(variable, countries);\n    }\n\n    \/\/ Build the final variable tables.\n    code = CodeBlock.builder();\n    code.add(\"new $T<$T, $T<$T>>() {{\\n\", HASHMAP, STRING, SET, STRING);\n    for (Map.Entry<String, Set<String>> entry : variables.entrySet()) {\n      code.add(\"  put($S, new $T<>(\", entry.getKey(), HASHSET);\n      List<String> list = new ArrayList<>(entry.getValue());\n      Collections.sort(list);\n      addStringList(code, list, \"    \");\n      code.add(\"));\\n\");\n    }\n    code.add(\"\\n}}\");\n    \n    type.addField(FieldSpec.builder(typeName, \"VARIABLES\", PROTECTED, STATIC, FINAL)\n        .initializer(code.build())\n        .build());\n  }","label":0}
{"text":"public function getResolved($id)\n    {\n        if (isset($this->extensions[$id])) {\n            return $this->extensions[$id];\n        } elseif (isset($this->composerNames[$id])) {\n            $id = (string) $this->composerNames[$id];\n\n            return $this->extensions[$id];\n        }\n\n        return null;\n    }","label":0}
{"text":"public function awaitingAuthorization()\n    {\n        $deliveryExecution = $this->getCurrentDeliveryExecution();\n        $deliveryExecutionStateService = $this->getServiceManager()->get(DeliveryExecutionStateService::SERVICE_ID);\n        $executionState = $deliveryExecution->getState()->getUri();\n\n        $runDeliveryUrl = _url('runDeliveryExecution', null, null, array('deliveryExecution' => $deliveryExecution->getIdentifier()));\n\n        \/\/ if the test is in progress, first pause it to avoid inconsistent storage state\n        if (DeliveryExecutionState::STATE_ACTIVE == $executionState) {\n            $deliveryExecutionStateService->pauseExecution($deliveryExecution, [\n                'reasons' => ['category' => 'System'],\n                'comment' => __('System generated pause.'),\n            ]);\n        }\n\n        \/\/ we need to change the state of the delivery execution\n        if (!in_array($executionState , array(DeliveryExecutionState::STATE_FINISHED, DeliveryExecutionState::STATE_TERMINATED))) {\n            if (DeliveryExecutionState::STATE_AUTHORIZED !== $executionState) {\n                $deliveryExecutionStateService->waitExecution($deliveryExecution);\n            }\n\n            $this->setData('deliveryExecution', $deliveryExecution->getIdentifier());\n            $this->setData('deliveryLabel', addslashes($deliveryExecution->getLabel()));\n            $this->setData('returnUrl', $this->getReturnUrl());\n            $this->setData('cancelUrl', _url('cancelExecution', 'DeliveryServer', 'taoProctoring', ['deliveryExecution' => $deliveryExecution->getIdentifier()]));\n            $this->setData('cancelable', $deliveryExecutionStateService->isCancelable($deliveryExecution));\n            $this->setData('userLabel', common_session_SessionManager::getSession()->getUserLabel());\n            $this->setData('client_config_url', $this->getClientConfigUrl());\n            $this->setData('showControls', true);\n            $this->setData('runDeliveryUrl', $runDeliveryUrl);\n\n            \/\/set template\n            $this->setData('homeUrl', $this->getServiceManager()->get(DefaultUrlService::SERVICE_ID)->getUrl('ProctoringHome'));\n            $this->setData('logout', $this->getServiceManager()->get(DefaultUrlService::SERVICE_ID)->getUrl('ProctoringLogout'));\n            $this->setData('content-template', 'DeliveryServer\/awaiting.tpl');\n            $this->setData('content-extension', 'taoProctoring');\n            $this->setView('DeliveryServer\/layout.tpl', 'taoDelivery');\n        } else {\n            \/\/ inconsistent state\n            common_Logger::i(get_called_class() . '::awaitingAuthorization(): cannot wait authorization for delivery execution ' . $deliveryExecution->getIdentifier() . ' with state ' . $executionState);\n            return $this->redirect($this->getReturnUrl());\n        }\n    }","label":0}
{"text":"protected function maturity_warning($maturity) {\n        if ($maturity == MATURITY_STABLE) {\n            return ''; \/\/ No worries.\n        }\n\n        $maturitylevel = get_string('maturity' . $maturity, 'admin');\n        return $this->warning(\n                    $this->container(get_string('maturitycorewarning', 'admin', $maturitylevel)) .\n                    $this->container($this->doc_link('admin\/versions', get_string('morehelp'))),\n                'error');\n    }","label":0}
{"text":"def make_oracle(input_qubits, output_qubit, x_bits):\n    \"\"\"\"\"\"\n    # Make oracle.\n    # for (1, 1) it's just a Toffoli gate\n    # otherwise negate the zero-bits.\n    yield(cirq.X(q) for (q, bit) in zip(input_qubits, x_bits) if not bit)\n    yield(cirq.TOFFOLI(input_qubits[0], input_qubits[1], output_qubit))\n    yield(cirq.X(q) for (q, bit) in zip(input_qubits, x_bits) if not bit)","label":0}
{"text":"protected function initEditor(): void\n    {\n        $view = $this->getView();\n\n        CKEditorAsset::register($view);\n        CKEditorAssetAddition::register($view);\n\n        $id = $this->options['id'];\n\n        $clientOptions = !empty($this->clientOptions) ? Json::encode($this->clientOptions) : '{}';\n\n        $js = [];\n\n        $js[] = \"CKEDITOR.replace('$id', $clientOptions);\";\n        $js[] = \"initItstructureOnChangeHandler('$id');\";\n\n        if (array_key_exists('filebrowserUploadUrl', $this->clientOptions) ||\n            array_key_exists('filebrowserImageUploadUrl', $this->clientOptions)) {\n            $js[] = \"initItstructureCsrfHandler();\";\n        }\n\n        $view->registerJs(implode(\"\\n\", $js));\n    }","label":0}
{"text":"public function addRadioGroup(string $name) : Group\\RadioGroup\n    {\n        $radioGroup = new Group\\RadioGroup($this, $name);\n        $this->addComponent($name, $radioGroup);\n\n        return $radioGroup;\n    }","label":0}
{"text":"public void setExternalFrame(Shape current) {\r\n\t\tthis.current = current;\r\n\t\tnext = (Shape) shapes.get(0);\r\n\t\toffset = 0;\r\n\t}","label":0}
{"text":"def sourcess_list(self, *args):\n        \"\"\"\"\"\"\n\n        from pprint import pprint\n\n        sources = {}\n        sources.update(self.authorized_events)\n        sources.update(self.anonymous_events)\n\n        for source in sources:\n            pprint(source)","label":0}
{"text":"def get_schema(self, schema_id):\n        \n        res = requests.get(self._url('\/schemas\/ids\/{}', schema_id))\n        raise_if_failed(res)\n        return json.loads(res.json()['schema'])","label":0}
{"text":"def RMSError(self):\n        \n        tss = 0.0\n        size = 0\n        for layer in self.layers:\n            if layer.type == 'Output':\n                tss += layer.TSSError()\n                size += layer.size\n        return math.sqrt( tss \/ size )","label":0}
{"text":"protected function memoryToString($mem)\n    {\n        $abs = abs($mem);\n        if ($abs < 1024) {\n            return \"$mem Bytes\";\n        } elseif ($abs < 1048576) {\n            return round($mem \/ 1024, 2).\" KB\";\n        } else {\n            return round($mem \/ 1048576, 2).\" MB\";\n        }\n    }","label":0}
{"text":"func (l *Hierarchy) Set(logger Logger) {\n\tl.logger.Store(atomicStruct{logger})\n}","label":0}
{"text":"func (m *Map) Flush() int {\n\tif m.v4 {\n\t\treturn int(doFlush4(m).deleted)\n\t}\n\treturn int(doFlush6(m).deleted)\n}","label":0}
{"text":"func (c *ClusterManager) SchedPolicyGet(name string) (*sched.SchedPolicy, error) {\n\treturn c.schedManager.SchedPolicyGet(name)\n}","label":0}
{"text":"public function getAtomicType( $type )\r\n\t{\r\n\t\tif ( $type instanceof QName )\r\n\t\t{\r\n\t\t\t$type = \"{$type->prefix}:{$type->localName}\";\r\n\t\t}\r\n\t\telse if ( is_array( $type ) && isset( $type['prefix'] ) && isset( $type['prefix'] ) )\r\n\t\t{\r\n\t\t\t$type = \"{$type['prefix']}:{$type['name']}\";\r\n\t\t}\r\n\t\telse if ( ! is_string( $type ) ) return false;\r\n\r\n\t\t\/\/ If its not then look to see if there are ancestral types\r\n\t\t\/\/ BMS 2018-04-09 Test candidates changed.\r\n\t\tif ( $type == \"xs:anyType\" ) return \"xs:anyType\";\r\n\r\n\t\t\/\/ If its not then look to see if there are ancestral types\r\n\t\t\/\/ BMS 2018-04-09 Test candidates changed.\r\n\t\tif ( $type == \"xs:anyComplexType\" ) return false;\r\n\r\n\t\t\/\/ anyAtomicType is an alias for anySimpleType\r\n\t\t\/\/ BMS 2018-04-09 Test candidates changed.\r\n\t\tif ( $type == \"xs:anyAtomicType\" )\r\n\t\t{\r\n\t\t\t$type = \"xs:anySimpleType\";\r\n\t\t}\r\n\t\t\/\/ Is the $type already in $xsTypes\r\n\t\tif ( isset( SchemaTypes::$xsTypes[ $type ] ) )\r\n\t\t{\r\n\t\t\treturn $type;\r\n\t\t}\r\n\r\n\t\tif ( ! isset( $this->types[ $type ] ) ) return false;\r\n\r\n\t\t$t = $this->types[ $type ];\r\n\t\tif ( isset( $t['parent'] ) )\r\n\t\t{\r\n\t\t\t\/\/ There are so repeat the test with the ancestor element\r\n\t\t\treturn $this->getAtomicType( $t['parent'] );\r\n\t\t}\r\n\t\t\/\/ else if ( isset( $t['types'] ) )\r\n\t\t\/\/ {\r\n\t\t\/\/ \t\/\/ It may be necessary to consider types if $t is defined as a union such as xbrli:dateTimeItemType\r\n\t\t\/\/ \tforeach ( $t['types'] as $parentType )\r\n\t\t\/\/ \t{\r\n\t\t\/\/ \t\t$result = $this->getAtomicType( $parentType );\r\n\t\t\/\/ \t\tif ( $result )\r\n\t\t\/\/ \t\t{\r\n\t\t\/\/ \t\t\treturn $t;\r\n\t\t\/\/ \t\t}\r\n\t\t\/\/ \t}\r\n\t\t\/\/ }\r\n\t\telse\r\n\t\t{\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t}","label":0}
{"text":"func BuildIdentityConfigFromOptions(opts ...interface{}) (msp.IdentityConfig, error) {\n\t\/\/ build a new IdentityConfig with overridden function implementations\n\tc := &IdentityConfigOptions{}\n\tfor _, option := range opts {\n\t\terr := setIdentityConfigWithOptionInterface(c, option)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\n\treturn c, nil\n\n}","label":0}
{"text":"private void winCancelFaxJob(String serverName,int faxJobID)\n    {\n        synchronized(WindowsFaxClientSpiHelper.NATIVE_LOCK)\n        {\n            \/\/pre native call\n            this.preNativeCall();\n            \n            \/\/invoke native\n            WindowsJNIFaxClientSpi.cancelFaxJobNative(serverName,faxJobID);\n        }\n    }","label":0}
{"text":"func (in *EnvVarSource) DeepCopyInto(out *EnvVarSource) {\n\t*out = *in\n\tif in.FieldRef != nil {\n\t\tin, out := &in.FieldRef, &out.FieldRef\n\t\t*out = new(ObjectFieldSelector)\n\t\t**out = **in\n\t}\n\tif in.ResourceFieldRef != nil {\n\t\tin, out := &in.ResourceFieldRef, &out.ResourceFieldRef\n\t\t*out = new(ResourceFieldSelector)\n\t\t(*in).DeepCopyInto(*out)\n\t}\n\tif in.ConfigMapKeyRef != nil {\n\t\tin, out := &in.ConfigMapKeyRef, &out.ConfigMapKeyRef\n\t\t*out = new(ConfigMapKeySelector)\n\t\t(*in).DeepCopyInto(*out)\n\t}\n\tif in.SecretKeyRef != nil {\n\t\tin, out := &in.SecretKeyRef, &out.SecretKeyRef\n\t\t*out = new(SecretKeySelector)\n\t\t(*in).DeepCopyInto(*out)\n\t}\n\treturn\n}","label":0}
{"text":"function toAllPadding(padding) {\n    var top = 0;\n    var left = 0;\n    var right = 0;\n    var bottom = 0;\n\n    if (Util.isNumber(padding) || Util.isString(padding)) {\n      top = left = right = bottom = padding;\n    } else if (Util.isArray(padding)) {\n      top = padding[0];\n      right = !Util.isNil(padding[1]) ? padding[1] : padding[0];\n      bottom = !Util.isNil(padding[2]) ? padding[2] : padding[0];\n      left = !Util.isNil(padding[3]) ? padding[3] : right;\n    } else if (Util.isObject(padding)) {\n      top = padding.top || 0;\n      right = padding.right || 0;\n      bottom = padding.bottom || 0;\n      left = padding.left || 0;\n    }\n    return [top, right, bottom, left];\n  }","label":0}
{"text":"def get_saml_slos(cls, logout_request):\n        \"\"\"\"\"\"\n        try:\n            root = etree.fromstring(logout_request)\n            return root.xpath(\n                \"\/\/samlp:SessionIndex\",\n                namespaces={'samlp': \"urn:oasis:names:tc:SAML:2.0:protocol\"})\n        except etree.XMLSyntaxError:\n            return None","label":0}
{"text":"def post(self, url, postParameters=None, urlParameters=None):\n        \n        if self._action_token == None:\n            self._action_token = self.get(ReaderUrl.ACTION_TOKEN_URL)\n\n        if self._http == None:\n            self._setupHttp()\n        uri = url + \"?\" + self.getParameters(urlParameters)\n        postParameters.update({'T':self._action_token})\n        body = self.postParameters(postParameters)\n        response, content = self._http.request(uri, \"POST\", body=body)\n        return content","label":0}
{"text":"func OrganizationsInterfaceRoutes(r *mux.Router, i OrganizationsInterface) {\n\tr.Handle(\"\/organizations\", alice.New(newOauth2oauth_2_0Middleware([]string{}).Handler).Then(http.HandlerFunc(i.CreateNewOrganization))).Methods(\"POST\")\n\tr.Handle(\"\/organizations\/{globalid}\", alice.New(newOauth2oauth_2_0Middleware([]string{\"organization:member\", \"organization:owner\"}).Handler).Then(http.HandlerFunc(i.GetOrganization))).Methods(\"GET\")\n\tr.Handle(\"\/organizations\/{globalid}\", alice.New(newOauth2oauth_2_0Middleware([]string{\"organization:owner\"}).Handler).Then(http.HandlerFunc(i.CreateNewSubOrganization))).Methods(\"POST\")\n\tr.Handle(\"\/organizations\/{globalid}\", alice.New(newOauth2oauth_2_0Middleware([]string{\"organization:owner\"}).Handler).Then(http.HandlerFunc(i.DeleteOrganization))).Methods(\"DELETE\")\n\tr.Handle(\"\/organizations\/{globalid}\/apikeys\", alice.New(newOauth2oauth_2_0Middleware([]string{\"organization:owner\"}).Handler).Then(http.HandlerFunc(i.GetAPIKeyLabels))).Methods(\"GET\")\n\tr.Handle(\"\/organizations\/{globalid}\/apikeys\", alice.New(newOauth2oauth_2_0Middleware([]string{\"organization:owner\"}).Handler).Then(http.HandlerFunc(i.CreateNewAPIKey))).Methods(\"POST\")\n\tr.Handle(\"\/organizations\/{globalid}\/apikeys\/{label}\", alice.New(newOauth2oauth_2_0Middleware([]string{\"organization:owner\"}).Handler).Then(http.HandlerFunc(i.GetAPIKey))).Methods(\"GET\")\n\tr.Handle(\"\/organizations\/{globalid}\/apikeys\/{label}\", alice.New(newOauth2oauth_2_0Middleware([]string{\"organization:owner\"}).Handler).Then(http.HandlerFunc(i.UpdateAPIKey))).Methods(\"PUT\")\n\tr.Handle(\"\/organizations\/{globalid}\/apikeys\/{label}\", alice.New(newOauth2oauth_2_0Middleware([]string{\"organization:owner\"}).Handler).Then(http.HandlerFunc(i.DeleteAPIKey))).Methods(\"DELETE\")\n\tr.Handle(\"\/organizations\/{globalid}\/tree\", alice.New(newOauth2oauth_2_0Middleware([]string{\"organization:member\", \"organization:owner\"}).Handler).Then(http.HandlerFunc(i.GetOrganizationTree))).Methods(\"GET\")\n\tr.Handle(\"\/organizations\/{globalid}\/members\", alice.New(newOauth2oauth_2_0Middleware([]string{\"organization:owner\"}).Handler).Then(http.HandlerFunc(i.AddOrganizationMember))).Methods(\"POST\")\n\tr.Handle(\"\/organizations\/{globalid}\/members\", alice.New(newOauth2oauth_2_0Middleware([]string{\"organization:owner\"}).Handler).Then(http.HandlerFunc(i.UpdateOrganizationMemberShip))).Methods(\"PUT\")\n\tr.Handle(\"\/organizations\/{globalid}\/members\/{username}\", alice.New(newOauth2oauth_2_0Middleware([]string{\"organization:owner\"}).Handler).Then(http.HandlerFunc(i.RemoveOrganizationMember))).Methods(\"DELETE\")\n\tr.Handle(\"\/organizations\/{globalid}\/owners\", alice.New(newOauth2oauth_2_0Middleware([]string{\"organization:owner\"}).Handler).Then(http.HandlerFunc(i.AddOrganizationOwner))).Methods(\"POST\")\n\tr.Handle(\"\/organizations\/{globalid}\/owners\/{username}\", alice.New(newOauth2oauth_2_0Middleware([]string{\"organization:owner\"}).Handler).Then(http.HandlerFunc(i.RemoveOrganizationOwner))).Methods(\"DELETE\")\n\tr.Handle(\"\/organizations\/{globalid}\/contracts\", alice.New(newOauth2oauth_2_0Middleware([]string{\"organization:owner\", \"organization:contracts:read\"}).Handler).Then(http.HandlerFunc(i.GetContracts))).Methods(\"GET\")\n\tr.Handle(\"\/organizations\/{globalid}\/contracts\", alice.New(newOauth2oauth_2_0Middleware([]string{\"organization:owner\", \"organization:contracts:read\"}).Handler).Then(http.HandlerFunc(i.RegisterNewContract))).Methods(\"POST\")\n\tr.Handle(\"\/organizations\/{globalid}\/invitations\", alice.New(newOauth2oauth_2_0Middleware([]string{\"organization:owner\"}).Handler).Then(http.HandlerFunc(i.GetInvitations))).Methods(\"GET\")\n\tr.Handle(\"\/organizations\/{globalid}\/invitations\/{searchstring}\", alice.New(newOauth2oauth_2_0Middleware([]string{\"organization:owner\"}).Handler).Then(http.HandlerFunc(i.RemovePendingInvitation))).Methods(\"DELETE\")\n\tr.Handle(\"\/organizations\/{globalid}\/suborganizations\", alice.New(newOauth2oauth_2_0Middleware([]string{\"organization:owner\"}).Handler).Then(http.HandlerFunc(i.CreateNewSubOrganization))).Methods(\"POST\")\n\tr.Handle(\"\/organizations\/{globalid}\/dns\", alice.New(newOauth2oauth_2_0Middleware([]string{\"organization:owner\"}).Handler).Then(http.HandlerFunc(i.CreateOrganizationDns))).Methods(\"POST\")\n\tr.Handle(\"\/organizations\/{globalid}\/dns\/{dnsname}\", alice.New(newOauth2oauth_2_0Middleware([]string{\"organization:owner\"}).Handler).Then(http.HandlerFunc(i.UpdateOrganizationDns))).Methods(\"PUT\")\n\tr.Handle(\"\/organizations\/{globalid}\/dns\/{dnsname}\", alice.New(newOauth2oauth_2_0Middleware([]string{\"organization:owner\"}).Handler).Then(http.HandlerFunc(i.DeleteOrganizationDns))).Methods(\"DELETE\")\n\tr.Handle(\"\/organizations\/{globalid}\/tree\", alice.New(newOauth2oauth_2_0Middleware([]string{}).Handler).Then(http.HandlerFunc(i.GetOrganizationTree))).Methods(\"GET\")\n\tr.Handle(\"\/organizations\/{globalid}\/registry\", alice.New(newOauth2oauth_2_0Middleware([]string{\"organization:owner\"}).Handler).Then(http.HandlerFunc(i.ListOrganizationRegistry))).Methods(\"GET\")\n\tr.Handle(\"\/organizations\/{globalid}\/registry\", alice.New(newOauth2oauth_2_0Middleware([]string{\"organization:owner\"}).Handler).Then(http.HandlerFunc(i.AddOrganizationRegistryEntry))).Methods(\"POST\")\n\tr.Handle(\"\/organizations\/{globalid}\/registry\/{key}\", alice.New(newOauth2oauth_2_0Middleware([]string{}).Handler).Then(http.HandlerFunc(i.GetOrganizationRegistryEntry))).Methods(\"GET\")\n\tr.Handle(\"\/organizations\/{globalid}\/registry\/{key}\", alice.New(newOauth2oauth_2_0Middleware([]string{\"organization:owner\"}).Handler).Then(http.HandlerFunc(i.DeleteOrganizationRegistryEntry))).Methods(\"DELETE\")\n\tr.Handle(\"\/organizations\/{globalid}\/logo\", alice.New(newOauth2oauth_2_0Middleware([]string{\"organization:owner\"}).Handler).Then(http.HandlerFunc(i.SetOrganizationLogo))).Methods(\"PUT\")\n\tr.Handle(\"\/organizations\/{globalid}\/logo\", http.HandlerFunc(i.GetOrganizationLogo)).Methods(\"GET\")\n\tr.Handle(\"\/organizations\/{globalid}\/logo\", alice.New(newOauth2oauth_2_0Middleware([]string{\"organization:owner\"}).Handler).Then(http.HandlerFunc(i.DeleteOrganizationLogo))).Methods(\"DELETE\")\n\tr.Handle(\"\/organizations\/{globalid}\/2fa\/validity\", http.HandlerFunc(i.Get2faValidityTime)).Methods(\"GET\")\n\tr.Handle(\"\/organizations\/{globalid}\/2fa\/validity\", alice.New(newOauth2oauth_2_0Middleware([]string{\"organization:owner\"}).Handler).Then(http.HandlerFunc(i.Set2faValidityTime))).Methods(\"PUT\")\n\tr.Handle(\"\/organizations\/{globalid}\/orgmembers\", alice.New(newOauth2oauth_2_0Middleware([]string{\"organization:owner\"}).Handler).Then(http.HandlerFunc(i.SetOrgMember))).Methods(\"POST\")\n\tr.Handle(\"\/organizations\/{globalid}\/orgowners\", alice.New(newOauth2oauth_2_0Middleware([]string{\"organization:owner\"}).Handler).Then(http.HandlerFunc(i.SetOrgOwner))).Methods(\"POST\")\n\tr.Handle(\"\/organizations\/{globalid}\/orgmembers\/{globalid2}\", alice.New(newOauth2oauth_2_0Middleware([]string{\"organization:owner\"}).Handler).Then(http.HandlerFunc(i.DeleteOrgMember))).Methods(\"DELETE\")\n\tr.Handle(\"\/organizations\/{globalid}\/orgowners\/{globalid2}\", alice.New(newOauth2oauth_2_0Middleware([]string{\"organization:owner\"}).Handler).Then(http.HandlerFunc(i.DeleteOrgOwner))).Methods(\"DELETE\")\n\tr.Handle(\"\/organizations\/{globalid}\/orgmembers\", alice.New(newOauth2oauth_2_0Middleware([]string{\"organization:owner\"}).Handler).Then(http.HandlerFunc(i.UpdateOrganizationOrgMemberShip))).Methods(\"PUT\")\n\tr.Handle(\"\/organizations\/{globalid}\/requiredscopes\", alice.New(newOauth2oauth_2_0Middleware([]string{\"organization:owner\"}).Handler).Then(http.HandlerFunc(i.AddRequiredScope))).Methods(\"POST\")\n\tr.Handle(\"\/organizations\/{globalid}\/requiredscopes\/{requiredscope}\", alice.New(newOauth2oauth_2_0Middleware([]string{\"organization:owner\"}).Handler).Then(http.HandlerFunc(i.UpdateRequiredScope))).Methods(\"PUT\")\n\tr.Handle(\"\/organizations\/{globalid}\/requiredscopes\/{requiredscope}\", alice.New(newOauth2oauth_2_0Middleware([]string{\"organization:owner\"}).Handler).Then(http.HandlerFunc(i.DeleteRequiredScope))).Methods(\"DELETE\")\n\tr.Handle(\"\/organizations\/{globalid}\/users\", alice.New(newOauth2oauth_2_0Middleware([]string{\"organization:owner\", \"organization:member\"}).Handler).Then(http.HandlerFunc(i.GetOrganizationUsers))).Methods(\"GET\")\n\tr.Handle(\"\/organizations\/{globalid}\/description\/{langkey}\", http.HandlerFunc(i.GetDescription)).Methods(\"GET\")\n\tr.Handle(\"\/organizations\/{globalid}\/description\/{langkey}\/withfallback\", http.HandlerFunc(i.GetDescriptionWithFallback)).Methods(\"GET\")\n\tr.Handle(\"\/organizations\/{globalid}\/description\/{langkey}\", alice.New(newOauth2oauth_2_0Middleware([]string{\"organization:owner\"}).Handler).Then(http.HandlerFunc(i.DeleteDescription))).Methods(\"DELETE\")\n\tr.Handle(\"\/organizations\/{globalid}\/description\", alice.New(newOauth2oauth_2_0Middleware([]string{\"organization:owner\"}).Handler).Then(http.HandlerFunc(i.SetDescription))).Methods(\"POST\")\n\tr.Handle(\"\/organizations\/{globalid}\/description\", alice.New(newOauth2oauth_2_0Middleware([]string{\"organization:owner\"}).Handler).Then(http.HandlerFunc(i.UpdateDescription))).Methods(\"PUT\")\n\tr.Handle(\"\/organizations\/{globalid}\/organizations\/{invitingorg}\/roles\/{role}\", alice.New(newOauth2oauth_2_0Middleware([]string{\"organization:owner\"}).Handler).Then(http.HandlerFunc(i.AcceptOrganizationInvite))).Methods(\"POST\")\n\tr.Handle(\"\/organizations\/{globalid}\/organizations\/{invitingorg}\/roles\/{role}\", alice.New(newOauth2oauth_2_0Middleware([]string{\"organization:owner\"}).Handler).Then(http.HandlerFunc(i.RejectOrganizationInvite))).Methods(\"DELETE\")\n\tr.Handle(\"\/organizations\/{globalid}\/orgmembers\/includesuborgs\", alice.New(newOauth2oauth_2_0Middleware([]string{\"organization:owner\"}).Handler).Then(http.HandlerFunc(i.AddIncludeSubOrgsOf))).Methods(\"POST\")\n\tr.Handle(\"\/organizations\/{globalid}\/orgmembers\/includesuborgs\/{orgmember}\", alice.New(newOauth2oauth_2_0Middleware([]string{\"organization:owner\"}).Handler).Then(http.HandlerFunc(i.RemoveIncludeSubOrgsOf))).Methods(\"DELETE\")\n\tr.Handle(\"\/organizations\/{globalid}\/users\/ismember\/{username}\", alice.New(newOauth2oauth_2_0Middleware([]string{\"organization:owner\"}).Handler).Then(http.HandlerFunc(i.UserIsMember))).Methods(\"GET\")\n\tr.Handle(\"\/organizations\/{globalid}\/grants\/{username}\", alice.New(newOauth2oauth_2_0Middleware([]string{\"organization:owner\"}).Handler).Then(http.HandlerFunc(i.GetUserGrants))).Methods(\"GET\")\n\tr.Handle(\"\/organizations\/{globalid}\/grants\/{username}\", alice.New(newOauth2oauth_2_0Middleware([]string{\"organization:owner\"}).Handler).Then(http.HandlerFunc(i.DeleteAllUserGrants))).Methods(\"DELETE\")\n\tr.Handle(\"\/organizations\/{globalid}\/grants\/{username}\/{grant}\", alice.New(newOauth2oauth_2_0Middleware([]string{\"organization:owner\"}).Handler).Then(http.HandlerFunc(i.DeleteUserGrant))).Methods(\"DELETE\")\n\tr.Handle(\"\/organizations\/{globalid}\/grants\", alice.New(newOauth2oauth_2_0Middleware([]string{\"organization:owner\"}).Handler).Then(http.HandlerFunc(i.CreateUserGrant))).Methods(\"POST\")\n\tr.Handle(\"\/organizations\/{globalid}\/grants\", alice.New(newOauth2oauth_2_0Middleware([]string{\"organization:owner\"}).Handler).Then(http.HandlerFunc(i.UpdateUserGrant))).Methods(\"PUT\")\n\tr.Handle(\"\/organizations\/{globalid}\/grants\/havegrant\/{grant}\", alice.New(newOauth2oauth_2_0Middleware([]string{\"organization:owner\"}).Handler).Then(http.HandlerFunc(i.ListUsersWithGrant))).Methods(\"GET\")\n}","label":0}
{"text":"function scoresProvider(publicAPI, model) {\n  publicAPI.setScores = (scores) => {\n    model.scores = [].concat(scores);\n    const scoreMapByValue = {};\n    model.scores.forEach((score) => {\n      scoreMapByValue[score.value] = score;\n    });\n    model.scoreMapByValue = scoreMapByValue;\n    publicAPI.fireScoresChange(model.scores);\n  };\n\n  publicAPI.getScoreColor = (value) => {\n    const score = model.scoreMapByValue[value];\n    return score ? score.color : undefined;\n  };\n\n  publicAPI.getScoreName = (value) => {\n    const score = model.scoreMapByValue[value];\n    return score ? score.name : undefined;\n  };\n  publicAPI.getDefaultScore = () => {\n    if (model.scores) {\n      const index = model.scores.findIndex((score) => !!score.isDefault);\n      return index === -1 ? 0 : index;\n    }\n    return 0;\n  };\n  publicAPI.setDefaultScore = (value) => {\n    if (model.scores) {\n      model.scores[publicAPI.getDefaultScore()].isDefault = false;\n      model.scores[value].isDefault = true;\n    }\n  };\n}","label":0}
{"text":"protected ConditionOperator setupConditionOperator(final ConditionFormatter formatter, final Token.Condition token) {\r\n\r\n        final Matcher matcher = PATTERN_CONDITION_OPERATOR.matcher(token.getValue());\r\n        if(!matcher.matches()) {\r\n            throw new IllegalArgumentException(\"not match condition:\" + token.getValue());\r\n        }\r\n\r\n        final String operator = matcher.group(1);\r\n        final String number = matcher.group(2);\r\n        final double condition = Double.valueOf(number);\r\n\r\n        final ConditionOperator conditionOperator;\r\n        switch(operator) {\r\n            case \"=\":\r\n                conditionOperator = new ConditionOperator.Equal(condition);\r\n                break;\r\n            case \"<>\":\r\n                conditionOperator = new ConditionOperator.NotEqual(condition);\r\n                break;\r\n            case \">\":\r\n                conditionOperator = new ConditionOperator.GreaterThan(condition);\r\n                break;\r\n            case \"<\":\r\n                conditionOperator = new ConditionOperator.LessThan(condition);\r\n                break;\r\n            case \">=\":\r\n                conditionOperator = new ConditionOperator.GreaterEqual(condition);\r\n                break;\r\n            case \"<=\":\r\n                conditionOperator = new ConditionOperator.LessEqual(condition);\r\n                break;\r\n            default:\r\n                logger.warn(\"unknown operator : {}\", operator);\r\n                conditionOperator = ConditionOperator.ALL;\r\n                break;\r\n\r\n        }\r\n\r\n        formatter.setOperator(conditionOperator);\r\n        return conditionOperator;\r\n    }","label":0}
{"text":"public function getRemoteUrl() {\n\t\ttry {\n\t\t\t$values = $this->extractFromCommand ( 'git config --get remote.origin.url', function ($str) {\n\t\t\t\treturn trim ( $str );\n\t\t\t} );\n\t\t\tif (isset ( $values )) {\n\t\t\t\treturn implode ( \" \", $values );\n\t\t\t}\n\t\t} catch ( \\Cz\\Git\\GitException $e ) {\n\t\t\treturn \"\";\n\t\t}\n\t\treturn \"\";\n\t}","label":0}
{"text":"public function addResourceProvider(ResourceProvider $provider)\n    {\n        $this->loaded && $this->loaded->__invoke();\n\n        $this->resourceProviders[] = $provider;\n\n        return $this;\n    }","label":0}
{"text":"public static String escapeAppVersion(String s) {\n        s = cleanWS(s);\n        s = replaceAll(s, BackSlashPtn, EscBackSlash);\n        s = replaceAll(s, LParenPtn, EscLParen);\n        return s;\n    }","label":0}
{"text":"public static void install(Node node, JFXTooltip tooltip, Pos pos) {\n        tooltip.setPos(pos);\n        BEHAVIOR.install(node, tooltip);\n    }","label":0}
{"text":"def searchTag(self,HTAG=\"#python\"):\n        \"\"\"\"\"\"\n        self.t = Twython(app_key           =self.app_key           ,\n                        app_secret         =self.app_secret        ,\n                        oauth_token        =self.oauth_token       ,\n                        oauth_token_secret =self.oauth_token_secret)\n\n        search =self.t.search(q=HTAG,count=100,result_type=\"recent\")\n        ss=search[:]\n        search = self.t.search(q=HTAG,count=150,max_id=ss[-1]['id']-1,result_type=\"recent\")\n        #search = t.search(q=HTAG,count=150,since_id=ss[-1]['id'],result_type=\"recent\")\n        while seach:\n            ss+=search[:]\n            search = self.t.search(q=HTAG,count=150,max_id=ss[-1]['id']-1,result_type=\"recent\")\n        self.ss=ss","label":0}
{"text":"public function getPairedDevices($refresh = false)\n    {\n        if ($refresh === false) {\n            $device = Discovery::lookupDevice('ip', $this->ip);\n            if (isset($device['device']) && is_array($device['device'])) {\n                return $device['device'];\n            }\n        }\n\n        $service = $this->services['BridgeService']['serviceType'];\n        $controlUrl = $this->services['BridgeService']['controlURL'];\n        $method = 'GetEndDevices';\n        $arguments = [\n            'DevUDN'      => $this->getUDN($refresh),\n            'ReqListType' => 'PAIRED_LIST'\n        ];\n\n        $rs = $this->client->request($controlUrl, $service, $method, $arguments);\n        $rs = $this->unwrapResponse($rs);\n        $rs = WemoClient::xmlToArray($rs['u:GetEndDevicesResponse']['DeviceLists']);\n\n        \/\/ Standalone devices.\n        $devices = $rs['DeviceLists']['DeviceList']['DeviceInfos'];\n        if(static::isArrayAssoc($devices)) {\n            $devices = $rs['DeviceLists']['DeviceList']['DeviceInfos']['DeviceInfo'];\n        }\n        foreach ($devices as $k => $d) {\n            $d['IsGroupAction'] = 'NO';\n            $devices[$k] = $d;\n        }\n        \/\/ Grouped devices.\n        $groupedDeviceList = [];\n        $groupedDevices = $rs['DeviceLists']['DeviceList']['GroupInfos'];\n        if(static::isArrayAssoc($groupedDevices)) {\n            $groupedDeviceList[] = $rs['DeviceLists']['DeviceList']['GroupInfos']['GroupInfo'];\n        }\n        foreach ($groupedDeviceList as $gd) {\n            if(!empty($gd['GroupID']) && !empty($gd['GroupName']) && !empty($gd['GroupCapabilityValues'])) {\n                $devices[] = [\n                    'DeviceID'      => $gd['GroupID'],\n                    'FriendlyName'  => $gd['GroupName'],\n                    'CurrentState'  => $gd['GroupCapabilityValues'],\n                    'productName'   => $gd['DeviceInfos']['DeviceInfo'][0]['productName'],\n                    'IsGroupAction' => 'YES'\n                ];\n                if(isset($gd['DeviceInfos']) && isset($gd['DeviceInfos']['DeviceInfo'])){\n                    foreach($gd['DeviceInfos']['DeviceInfo'] as $gdi){\n                        $gdi['IsGroupAction'] = 'NO';\n                        $devices[] = $gdi;\n                    }\n                }\n            }\n        }\n        return $devices;\n    }","label":0}
{"text":"public function write()\n    {\n        foreach (config('squanto.locales', []) as $locale) {\n            $this->writeLocale($locale, Line::getValuesByLocale($locale));\n        }\n\n        return $this;\n    }","label":0}
{"text":"@Override\n\tpublic boolean eIsSet(int featureID)\n\t{\n\t\tswitch (featureID)\n\t\t{\n\t\t\tcase XbasePackage.XABSTRACT_FEATURE_CALL__FEATURE:\n\t\t\t\treturn feature != null;\n\t\t\tcase XbasePackage.XABSTRACT_FEATURE_CALL__TYPE_ARGUMENTS:\n\t\t\t\treturn typeArguments != null && !typeArguments.isEmpty();\n\t\t\tcase XbasePackage.XABSTRACT_FEATURE_CALL__IMPLICIT_RECEIVER:\n\t\t\t\treturn implicitReceiver != null;\n\t\t\tcase XbasePackage.XABSTRACT_FEATURE_CALL__INVALID_FEATURE_ISSUE_CODE:\n\t\t\t\treturn INVALID_FEATURE_ISSUE_CODE_EDEFAULT == null ? invalidFeatureIssueCode != null : !INVALID_FEATURE_ISSUE_CODE_EDEFAULT.equals(invalidFeatureIssueCode);\n\t\t\tcase XbasePackage.XABSTRACT_FEATURE_CALL__VALID_FEATURE:\n\t\t\t\treturn validFeature != VALID_FEATURE_EDEFAULT;\n\t\t\tcase XbasePackage.XABSTRACT_FEATURE_CALL__IMPLICIT_FIRST_ARGUMENT:\n\t\t\t\treturn implicitFirstArgument != null;\n\t\t}\n\t\treturn super.eIsSet(featureID);\n\t}","label":0}
{"text":"func WithIPv6Mask(mask net.IPMask) Option {\n\treturn func(o *Options) {\n\t\to.IPv6Mask = mask\n\t}\n}","label":0}
{"text":"func (l *Listener) listen() {\n\tfor {\n\t\tselect {\n\t\tcase <-l.handshakeSema:\n\t\tcase <-l.quit:\n\t\t\treturn\n\t\t}\n\n\t\tconn, err := l.tcp.Accept()\n\t\tif err != nil {\n\t\t\tl.rejectConn(err)\n\t\t\tl.handshakeSema <- struct{}{}\n\t\t\tcontinue\n\t\t}\n\n\t\tgo l.doHandshake(conn)\n\t}\n}","label":0}
{"text":"def as_boolean(value)\n      res = false\n\n      if value\n        if value.is_a?(TrueClass) || value.is_a?(FalseClass)\n          res = value\n        elsif value.is_a?(Fixnum)\n          res = value != 0\n        elsif value.respond_to?(:to_s)\n          value = value.to_s.downcase\n\n          res = (value == 't' || value == 'true')\n        end\n      end\n\n      res\n    end","label":0}
{"text":"public ExecutionReference getReference(final int executionId) {\n    if (hasExecution(executionId)) {\n      return this.queuedFlowMap.get(executionId).getFirst();\n    }\n    return null;\n  }","label":0}
{"text":"public function escape()\n\t{\n\t\t$length\t\t\t= $this->getLength();\n\t\t$this->string\t= addslashes( $this->string );\n\t\treturn $this->getLength() - $length;\n\t}","label":0}
{"text":"def FilterFnTable(fn_table, symbol):\n  \"\"\"\"\"\"\n  new_table = list()\n  for entry in fn_table:\n    # symbol[0] is a str with the symbol name\n    if entry[0] != symbol:\n      new_table.append(entry)\n  return new_table","label":0}
{"text":"def get(self, layout, default=None):\n        \n\n        try:\n            return self.__getitem__(layout)\n        except KeyError as error:\n            return default","label":0}
{"text":"func (s *IdentityDescription) SetCreationDate(v time.Time) *IdentityDescription {\n\ts.CreationDate = &v\n\treturn s\n}","label":0}
{"text":"@SuppressWarnings(\"unchecked\")\r\n\tpublic <T> T rpoplpush(Object srcKey, Object dstKey) {\r\n\t\tJedis jedis = getJedis();\r\n\t\ttry {\r\n\t\t\treturn (T)valueFromBytes(jedis.rpoplpush(keyToBytes(srcKey), keyToBytes(dstKey)));\r\n\t\t}\r\n\t\tfinally {close(jedis);}\r\n\t}","label":0}
{"text":"func (s *HypervisorService) NewUpdateHypervisorCapabilitiesParams() *UpdateHypervisorCapabilitiesParams {\n\tp := &UpdateHypervisorCapabilitiesParams{}\n\tp.p = make(map[string]interface{})\n\treturn p\n}","label":0}
{"text":"def match_xxx_for_country_n_adm1( name, xxx ) # xxx e.g. parts|counties|etc.\n\n    # auto-add required country n states (from folder structure)\n    #\n    #  e.g.  de-deutschland!\/3--by-bayern\/parts  (regierungsbezirke)\n    #        europe\/de-deutschland!\/3--by-bayern\/parts\n    #\n    #    at-austria!\/1--n-niederoesterreich\/counties  (bezirke)\n\n    xxx_pattern           = \"#{xxx}\"\n\n    if name =~ \/(?:^|\\\/)#{WORLD_COUNTRY_CLASSIC_PATTERN}\\\/#{WORLD_STATE_MODERN_PATTERN}\\\/#{xxx_pattern}\/  ||\n       name =~ \/(?:^|\\\/)#{WORLD_COUNTRY_CLASSIC_PATTERN}\\\/#{WORLD_STATE_CLASSIC_PATTERN}\\\/#{xxx_pattern}\/\n\n      country_key = $1.dup\n      state_key  = $2.dup\n      yield( country_key, state_key )\n      true # bingo - match found\n    else\n      false # no match found\n    end\n  end","label":0}
{"text":"protected void findLocations(BootstrapConfig bootProps, String processName) {\n        \/\/ Check for environment variables...\n        String userDirStr = getEnv(BootstrapConstants.ENV_WLP_USER_DIR);\n        String serversDirStr = getEnv(bootProps.getOutputDirectoryEnvName());\n\n        \/\/ Check for the variable calculated by the shell script first (X_LOG_DIR)\n        \/\/ If that wasn't found, check for LOG_DIR set for java -jar invocation\n        String logDirStr = getEnv(BootstrapConstants.ENV_X_LOG_DIR);\n        if (logDirStr == null)\n            logDirStr = getEnv(BootstrapConstants.ENV_LOG_DIR);\n\n        \/\/ Likewise for X_LOG_FILE and LOG_FILE.\n        String consoleLogFileStr = getEnv(BootstrapConstants.ENV_X_LOG_FILE);\n        if (consoleLogFileStr == null)\n            consoleLogFileStr = getEnv(BootstrapConstants.ENV_LOG_FILE);\n\n        \/\/ Do enough processing to know where the directories should be..\n        \/\/ this should not cause any directories to be created\n        bootProps.findLocations(processName, userDirStr, serversDirStr, logDirStr, consoleLogFileStr);\n    }","label":0}
{"text":"def set_typ(self, refobj, typ):\n        \n        try:\n            enum = JB_ReftrackNode.types.index(typ)\n        except ValueError:\n            raise ValueError(\"The given type %s could not be found in available types: %\" % (typ, JB_ReftrackNode.types))\n        cmds.setAttr(\"%s.type\" % refobj, enum)","label":0}
{"text":"public function tick()\n    {\n        while (!$this->queue->isEmpty() && $this->loop->isRunning())\n        {\n            $this->callback = $this->queue->dequeue();\n            $callback = $this->callback; \/\/ without this proxy PHPStorm marks line as fatal error.\n            $callback($this->loop);\n        }\n    }","label":0}
{"text":"private <T> T getFirstHeaderValue(List<T> internalValue) {\n    return internalValue == null ? null : internalValue.get(0);\n  }","label":0}
{"text":"def transitions_up_to(to, from = nil)\n      raise ArgumentError, 'to must be specified' unless to\n      to_timestamp = Timestamp.for(to)\n      from_timestamp = from && Timestamp.for(from)\n\n      begin\n        info.transitions_up_to(to_timestamp, from_timestamp)\n      rescue ArgumentError => e\n        raise ArgumentError, e.message.gsub('_timestamp', '')\n      end\n    end","label":0}
{"text":"public function get($name)\n    {\n        if (empty($this->data[$name])) {\n            return null;\n        }\n\n        return $this->data[$name];\n    }","label":0}
{"text":"private function getTransformedImage($sourceModel, $transform)\n    {\n        \/** @var ConfigModel $settings *\/\n        $config = ImagerService::getConfig();\n\n        if ($config->getSetting('noop', $transform)) {\n            \/\/ todo : just return source image unmodified\n        }\n\n        if ($this->imagineInstance === null) {\n            $msg = Craft::t('imager', 'Imagine instance was not created for driver \u201c{driver}\u201d.', ['driver' => ImagerService::$imageDriver]);\n            Craft::error($msg, __METHOD__);\n            throw new ImagerException($msg);\n        }\n\n        \/\/ Create target model\n        $targetModel = new LocalTargetImageModel($sourceModel, $transform);\n\n        \/\/ Set save options\n        $saveOptions = $this->getSaveOptions($targetModel->extension, $transform);\n\n        \/\/ Do transform if transform doesn't exist, cache is disabled, or cache expired\n        if (!$config->getSetting('cacheEnabled', $transform) ||\n            !file_exists($targetModel->getFilePath()) ||\n            (($config->getSetting('cacheDuration', $transform) !== false) && (FileHelper::lastModifiedTime($targetModel->getFilePath()) + $config->getSetting('cacheDuration', $transform) < time()))\n        ) {\n            \/\/ Make sure that we have a local copy.\n            $sourceModel->getLocalCopy();\n\n            \/\/ Check all the things that could go wrong(tm)\n            if (!realpath($sourceModel->path)) {\n                $msg = Craft::t('imager', 'Source folder \u201c{sourcePath}\u201d does not exist', ['sourcePath' => $sourceModel->path]);\n                Craft::error($msg, __METHOD__);\n                throw new ImagerException($msg);\n            }\n\n            if (!realpath($targetModel->path)) {\n                try {\n                    FileHelper::createDirectory($targetModel->path);\n                } catch (Exception $e) {\n                    \/\/ ignore for now, trying to create\n                }\n\n                if (!realpath($targetModel->path)) {\n                    $msg = Craft::t('imager', 'Target folder \u201c{targetPath}\u201d does not exist and could not be created', ['targetPath' => $targetModel->path]);\n                    Craft::error($msg, __METHOD__);\n                    throw new ImagerException($msg);\n                }\n\n                $targetModel->path = realpath($targetModel->path);\n            }\n\n            try {\n                $targetPathIsWriteable = FileHelper::isWritable($targetModel->path);\n            } catch (ErrorException $e) {\n                $targetPathIsWriteable = false;\n            }\n\n            if ($targetModel->path && !$targetPathIsWriteable) {\n                $msg = Craft::t('imager', 'Target folder \u201c{targetPath}\u201d is not writeable', ['targetPath' => $targetModel->path]);\n                Craft::error($msg, __METHOD__);\n                throw new ImagerException($msg);\n            }\n\n            if (!file_exists($sourceModel->getFilePath())) {\n                $msg = Craft::t('imager', 'Requested image \u201c{fileName}\u201d does not exist in path \u201c{sourcePath}\u201d', ['fileName' => $sourceModel->filename, 'sourcePath' => $sourceModel->path]);\n                Craft::error($msg, __METHOD__);\n                throw new ImagerException($msg);\n            }\n\n            if (!Craft::$app->images->checkMemoryForImage($sourceModel->getFilePath())) {\n                $msg = Craft::t('imager', 'Not enough memory available to perform this image operation.');\n                Craft::error($msg, __METHOD__);\n                throw new ImagerException($msg);\n            }\n\n            \/\/ Create the imageInstance. only once if reuse is enabled, or always\n            if ($this->imageInstance === null || !$config->getSetting('instanceReuseEnabled', $transform)) {\n                $this->imageInstance = $this->imagineInstance->open($sourceModel->getFilePath());\n            }\n\n            $animated = false;\n\n            \/\/ Check if this is an animated gif and we're using Imagick\n            if ($sourceModel->extension === 'gif' && ImagerService::$imageDriver !== 'gd' && $this->imageInstance->layers()) {\n                $animated = true;\n            }\n\n            \/\/ Run tranforms, either on each layer of an animated gif, or on the whole image.\n            if ($animated) {\n                if ($this->imageInstance->layers()) {\n                    $this->imageInstance->layers()->coalesce();\n                }\n\n                \/\/ We need to create a new image instance with the target size, or letterboxing will be wrong.\n                $originalSize = $this->imageInstance->getSize();\n                $resizeSize = ImagerHelpers::getResizeSize($originalSize, $transform, $config->getSetting('allowUpscale', $transform));\n                $layers = $this->imageInstance->layers() ?? [];\n                $gif = $this->imagineInstance->create($resizeSize);\n\n                if ($gif->layers()) {\n                    $gif->layers()->remove(0);\n                }\n\n                list($startFrame, $endFrame, $interval) = $this->getFramesVars($layers, $transform);\n\n                for ($i = $startFrame; $i <= $endFrame; $i += $interval) {\n                    if (isset($layers[$i])) {\n                        $layer = $layers[$i];\n                        $this->transformLayer($layer, $transform, $sourceModel->extension);\n                        $gif->layers()->add($layer);\n                    }\n                }\n\n                $this->imageInstance = $gif;\n            } else {\n                $this->transformLayer($this->imageInstance, $transform, $sourceModel->extension);\n            }\n\n            \/\/ If Image Driver is imagick and removeMetadata is true, remove meta data\n            if (ImagerService::$imageDriver === 'imagick' && $config->getSetting('removeMetadata', $transform)) {\n                $this->imageInstance->strip();\n            }\n\n            \/\/ Convert the image to RGB before converting to webp\/saving\n            if ($config->getSetting('convertToRGB', $transform)) {\n                $this->imageInstance->usePalette(new RGB());\n            }\n\n            \/\/ Save the transform\n            if ($targetModel->extension === 'webp') {\n                if (ImagerService::hasSupportForWebP()) {\n                    $this->saveAsWebp($this->imageInstance, $targetModel->getFilePath(), $sourceModel->extension, $saveOptions);\n                } else {\n                    $msg = Craft::t('imager', 'This version of {imageDriver} does not support the webp format. You should use \u201ccraft.imager.serverSupportsWebp\u201d in your templates to test for it.', ['imageDriver' => ImagerService::$imageDriver === 'gd' ? 'GD' : 'Imagick']);\n                    Craft::error($msg, __METHOD__);\n                    throw new ImagerException($msg);\n                }\n            } else {\n                $this->imageInstance->save($targetModel->getFilePath(), $saveOptions);\n            }\n\n            $targetModel->isNew = true;\n        }\n\n        \/\/ create CraftTransformedImageModel for transformed image\n        $imageModel = new CraftTransformedImageModel($targetModel, $sourceModel, $transform);\n\n        return $imageModel;\n    }","label":0}
{"text":"def _match_serializers_by_query_arg(self, serializers):\n        \"\"\"\"\"\"\n        # if the format query argument is present, match the serializer\n        arg_name = current_app.config.get('REST_MIMETYPE_QUERY_ARG_NAME')\n        if arg_name:\n            arg_value = request.args.get(arg_name, None)\n\n            if arg_value is None:\n                return None\n            # Search for the serializer matching the format\n            try:\n                return serializers[\n                    self.serializers_query_aliases[arg_value]]\n            except KeyError:  # either no serializer for this format\n                return None\n\n        return None","label":0}
{"text":"public String formatKey(URI uri) throws URISyntaxException\n\t{\n\t\tif (uri == null) {\n\t\t\tthrow new URISyntaxException(\"\",\"URI specified is null\");\n\t\t}\n\t\treturn formatKey(uri.getHost(), uri.getPort());\n\t}","label":0}
{"text":"function readInteger(width, reader) {\n    return function (start, cb) {\n      var i = Math.floor(start\/block_size)\n      var _i = start%block_size\n\n      \/\/if the UInt32BE aligns with in a block\n      \/\/read directly and it's 3x faster.\n      if(_i < block_size - width)\n        get(i, function (err, block) {\n          if(err) return cb(err)\n          var value = reader(block, start%block_size)\n          cb(null, value)\n        })\n      \/\/but handle overlapping reads this easier way\n      \/\/instead of messing around with bitwise ops\n      else\n        read(start, start+width, function (err, buf, bytes_read) {\n          if(err) return cb(err)\n          var value = reader(buf, 0);\n          cb(isNaN(value) ? new Error('Number is too large') : null, value)\n        })\n    }\n  }","label":0}
{"text":"protected function connection()\n\t{\n\t\t\/\/ If no a protocol in URL, assume its a local link\n\t\t! preg_match('!^\\w+:\/\/! i', $this->resource) and $this->resource = Uri::create($this->resource);\n\n\t\treturn curl_init($this->resource);\n\t}","label":0}
{"text":"def list_services(self, namespace=None):\n        \n\n        if namespace:\n            return [Service(name=s.metadata.name,\n                            ports=k8s_ports_to_metadata_ports(s.spec.ports),\n                            namespace=s.metadata.namespace,\n                            labels=s.metadata.labels, selector=s.spec.selector, spec=s.spec)\n                    for s in self.core_api.list_namespaced_service(namespace, watch=False).items]\n\n        return [Service(name=s.metadata.name,\n                        ports=k8s_ports_to_metadata_ports(s.spec.ports),\n                        namespace=s.metadata.namespace,\n                        labels=s.metadata.labels, selector=s.spec.selector, spec=s.spec)\n                for s in self.core_api.list_service_for_all_namespaces(watch=False).items]","label":0}
{"text":"public static String getParametersAsString(final Object... parameters) {\n        if (parameters == null || parameters.length == 0) {\n            return \"\";\n        }\n        final StringBuilder builder = new StringBuilder();\n        builder.append('[');\n        for (int i = 0; i < parameters.length; i++) {\n            builder.append(arrayToString(parameters[i]));\n            if (i < parameters.length - 1) {\n                builder.append(\", \");\n            }\n        }\n        return builder.append(']').toString();\n    }","label":0}
{"text":"func (m *Smart) getAttributes(acc telegraf.Accumulator, devices []string) {\n\n\tvar wg sync.WaitGroup\n\twg.Add(len(devices))\n\n\tfor _, device := range devices {\n\t\tgo gatherDisk(acc, m.UseSudo, m.Attributes, m.Path, m.Nocheck, device, &wg)\n\t}\n\n\twg.Wait()\n}","label":0}
{"text":"public java.util.List<ElasticInferenceAcceleratorAssociation> getElasticInferenceAcceleratorAssociations() {\n        if (elasticInferenceAcceleratorAssociations == null) {\n            elasticInferenceAcceleratorAssociations = new com.amazonaws.internal.SdkInternalList<ElasticInferenceAcceleratorAssociation>();\n        }\n        return elasticInferenceAcceleratorAssociations;\n    }","label":0}
{"text":"public static <E extends Comparable<E>> void sort(List<E> list) {\n        Merge.sort(list, 0, list.size()-1, false);\n    }","label":0}
{"text":"function(attrs) {\n      if (attrs.sessionToken) {\n        this._sessionToken = attrs.sessionToken;\n        delete attrs.sessionToken;\n      }\n      Parse.User.__super__._mergeMagicFields.call(this, attrs);\n    }","label":0}
{"text":"private List<Map.Entry<Long, Double>> getSortedCRF() {\n    List<Map.Entry<Long, Double>> sortedCRF = new ArrayList<>(mBlockIdToCRFValue.entrySet());\n    sortedCRF.sort(Comparator.comparingDouble(Entry::getValue));\n    return sortedCRF;\n  }","label":0}
{"text":"func (r *Store) GetInt8(key string) (int8, error) {\n\tv, ok := r.GetEntry(key)\n\tif !ok {\n\t\treturn -1, errFindParse.Format(\"int8\", key)\n\t}\n\treturn v.Int8Default(-1)\n}","label":0}
{"text":"function(el, name) {\n  var readAll = arguments.length === 1;\n  var domNames, domName, jsNames, jsName, value, idx, length;\n\n  if (readAll) {\n    domNames = Object.keys(el.attribs).filter(function(attrName) {\n      return attrName.slice(0, dataAttrPrefix.length) === dataAttrPrefix;\n    });\n    jsNames = domNames.map(function(_domName) {\n      return camelCase(_domName.slice(dataAttrPrefix.length));\n    });\n  } else {\n    domNames = [dataAttrPrefix + cssCase(name)];\n    jsNames = [name];\n  }\n\n  for (idx = 0, length = domNames.length; idx < length; ++idx) {\n    domName = domNames[idx];\n    jsName = jsNames[idx];\n    if (hasOwn.call(el.attribs, domName)) {\n      value = el.attribs[domName];\n\n      if (hasOwn.call(primitives, value)) {\n        value = primitives[value];\n      } else if (value === String(Number(value))) {\n        value = Number(value);\n      } else if (rbrace.test(value)) {\n        try {\n          value = JSON.parse(value);\n        } catch(e){ }\n      }\n\n      el.data[jsName] = value;\n    }\n  }\n\n  return readAll ? el.data : value;\n}","label":0}
{"text":"def prices(self):\n        \n        # if accessing and stale - update first\n        if self._needupdate or self.now != self.parent.now:\n            self.update(self.root.now)\n        return self._prices.loc[:self.now]","label":0}
{"text":"public boolean hasMenuEntry(AdminComponent component, MenuEntry activeMenue) {\n\t\tif (null != component && null != component.getMainMenu()) {\n\t\t\tOptional<MenuEntry> result = component.getMainMenu().flattened()\n\t\t\t\t\t.filter(menu -> checkForNull(menu, activeMenue) ? menu.getName().equals(activeMenue.getName()): false)\n\t\t\t\t\t.findFirst();\n\t\t\treturn result.isPresent();\n\t\t}\n\t\treturn false;\n\t}","label":0}
{"text":"def get_form_language(self, request, obj=None):\n        \n        if self._has_translatable_parent_model():\n            return super(TranslatableInlineModelAdmin, self).get_form_language(request, obj=obj)\n        else:\n            # Follow the ?language parameter\n            return self._language(request)","label":0}
{"text":"public static Token newIdentifier(String text, int startLine, int startColumn) {\n        return new Token(Types.IDENTIFIER, text, startLine, startColumn);\n    }","label":0}
{"text":"public function getUsername($username)\n    {\n        if ($this->isValidUserDn($username)) {\n            return $username;\n        }\n        $replacements = [\n            $username,\n            $this->config->getDomainName(),\n        ];\n\n        return preg_replace($this->params, $replacements, $this->bindFormat);\n    }","label":0}
{"text":"def expect_optional_token(lexer: Lexer, kind: TokenKind) -> Optional[Token]:\n    \n    token = lexer.token\n    if token.kind == kind:\n        lexer.advance()\n        return token\n\n    return None","label":0}
{"text":"private static function routeAction()\n    {\n        $actionQueryString = Request::getInputValue(\"do\", false, true);\n        $actionQuery = Actions::parseActionQueryString($actionQueryString);\n        \n        Addons::executeComponentFunction($actionQuery->name, $actionQuery->method, @$actionQuery->arguments);\n    }","label":0}
{"text":"@Override\n\tpublic void eUnset(int featureID) {\n\t\tswitch (featureID) {\n\t\t\tcase AfplibPackage.MPS__RG_LENGTH:\n\t\t\t\tsetRGLength(RG_LENGTH_EDEFAULT);\n\t\t\t\treturn;\n\t\t\tcase AfplibPackage.MPS__RESERVED:\n\t\t\t\tsetReserved(RESERVED_EDEFAULT);\n\t\t\t\treturn;\n\t\t\tcase AfplibPackage.MPS__FIXED_LENGTH_RG:\n\t\t\t\tgetFixedLengthRG().clear();\n\t\t\t\treturn;\n\t\t}\n\t\tsuper.eUnset(featureID);\n\t}","label":0}
{"text":"def add_computer(self, ip, hostname, domain, os, instances):\n        \n        cur = self.conn.cursor()\n\n        cur.execute('SELECT * FROM computers WHERE ip LIKE ?', [ip])\n        results = cur.fetchall()\n\n        if not len(results):\n            cur.execute(\"INSERT INTO computers (ip, hostname, domain, os, instances) VALUES (?,?,?,?,?)\", [ip, hostname, domain, os, instances])\n\n        cur.close()","label":0}
{"text":"func (e *executor) executeSumCountShard(ctx context.Context, index string, c *pql.Call, shard uint64) (ValCount, error) {\n\tspan, ctx := tracing.StartSpanFromContext(ctx, \"Executor.executeSumCountShard\")\n\tdefer span.Finish()\n\n\tvar filter *Row\n\tif len(c.Children) == 1 {\n\t\trow, err := e.executeBitmapCallShard(ctx, index, c.Children[0], shard)\n\t\tif err != nil {\n\t\t\treturn ValCount{}, errors.Wrap(err, \"executing bitmap call\")\n\t\t}\n\t\tfilter = row\n\t}\n\n\tfieldName, _ := c.Args[\"field\"].(string)\n\n\tfield := e.Holder.Field(index, fieldName)\n\tif field == nil {\n\t\treturn ValCount{}, nil\n\t}\n\n\tbsig := field.bsiGroup(fieldName)\n\tif bsig == nil {\n\t\treturn ValCount{}, nil\n\t}\n\n\tfragment := e.Holder.fragment(index, fieldName, viewBSIGroupPrefix+fieldName, shard)\n\tif fragment == nil {\n\t\treturn ValCount{}, nil\n\t}\n\n\tvsum, vcount, err := fragment.sum(filter, bsig.BitDepth())\n\tif err != nil {\n\t\treturn ValCount{}, errors.Wrap(err, \"computing sum\")\n\t}\n\treturn ValCount{\n\t\tVal:   int64(vsum) + (int64(vcount) * bsig.Min),\n\t\tCount: int64(vcount),\n\t}, nil\n}","label":0}
{"text":"def _nodetool(cmd):\n    '''\n    \n    '''\n    nodetool = __salt__['config.option']('cassandra.nodetool')\n    host = __salt__['config.option']('cassandra.host')\n    return __salt__['cmd.run_stdout']('{0} -h {1} {2}'.format(nodetool, host, cmd))","label":0}
{"text":"function server(tpl, options) {\n  options = options || {};\n\n  \/**\n   * The template render method which uses the compiled React-template to do all\n   * the things.\n   *\n   * @param {Object} data Template variables that should be introduced.\n   * @param {Object} config Override configuration.\n   * @returns {String}\n   * @api public\n   *\/\n  return (new Function('React', 'ReactDOM', 'return '+ transform(tpl, {\n    filename: options.filename,\n    sourceMaps: !!options.debug,\n    presets: ['react'],\n  }, {\n    render: options.render || (options.raw ? 'renderToStaticMarkup' : 'renderToString')\n  })))(React, ReactDOM);\n}","label":0}
{"text":"public function generateNonceField($action)\n    {\n        $nonceName = $this->namespace . '_' . $action;\n\n        return wp_nonce_field(md5($nonceName), $nonceName, true, false);\n    }","label":0}
{"text":"func (_m *ClientInterface) HostsAuthenticated(hostIDs []string) (map[string]bool, error) {\n\tret := _m.Called(hostIDs)\n\n\tvar r0 map[string]bool\n\tif rf, ok := ret.Get(0).(func([]string) map[string]bool); ok {\n\t\tr0 = rf(hostIDs)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(map[string]bool)\n\t\t}\n\t}\n\n\tvar r1 error\n\tif rf, ok := ret.Get(1).(func([]string) error); ok {\n\t\tr1 = rf(hostIDs)\n\t} else {\n\t\tr1 = ret.Error(1)\n\t}\n\n\treturn r0, r1\n}","label":0}
{"text":"public function callbackItemClick(ManialinkInterface $manialink, $login, $params, $args)\n    {\n        $this->menuContentFactory->create($login);\n\n        \/** @var ItemInterface $item *\/\n        $item = $args['item'];\n        $item->execute($this->menuContentFactory, $manialink, $login, $params, $args);\n    }","label":0}
{"text":"def top10(rest):\n\t\n\tif rest:\n\t\ttopn = int(rest)\n\telse:\n\t\ttopn = 10\n\tselection = Karma.store.list(topn)\n\tres = ' '.join('(%s: %s)' % (', '.join(n), k) for n, k in selection)\n\treturn res","label":0}
{"text":"func deriveClonePoint(src *Point) *Point {\n\tif src == nil {\n\t\treturn nil\n\t}\n\tdst := new(Point)\n\tderiveDeepCopy_6(dst, src)\n\treturn dst\n}","label":0}
{"text":"def get_key(self, fileobj):\n        \n        mapping = self.get_map()\n        if mapping is None:\n            raise RuntimeError(\"Selector is closed\")\n        try:\n            return mapping[fileobj]\n        except KeyError:\n            raise KeyError(\"{0!r} is not registered\".format(fileobj))","label":0}
{"text":"func (c *CSS) CollectClassNames(styleSheetId string) ([]string, error) {\n\tvar v CSSCollectClassNamesParams\n\tv.StyleSheetId = styleSheetId\n\treturn c.CollectClassNamesWithParams(&v)\n}","label":0}
{"text":"public function detectHttpClientHandler()\n    {\n        $handler = null;\n        if (class_exists('GuzzleHttp\\Client')) {\n            $handler = new GuzzleHttpClient();\n        } elseif (function_exists('curl_init')) {\n            $handler = new CurlHttpClient();\n        } else {\n            $handler = new StreamHttpClient();\n        }\n        return $handler;\n    }","label":0}
{"text":"func (l *ECSTaskDefinitionHealthCheckList) UnmarshalJSON(buf []byte) error {\n\t\/\/ Cloudformation allows a single object when a list of objects is expected\n\titem := ECSTaskDefinitionHealthCheck{}\n\tif err := json.Unmarshal(buf, &item); err == nil {\n\t\t*l = ECSTaskDefinitionHealthCheckList{item}\n\t\treturn nil\n\t}\n\tlist := []ECSTaskDefinitionHealthCheck{}\n\terr := json.Unmarshal(buf, &list)\n\tif err == nil {\n\t\t*l = ECSTaskDefinitionHealthCheckList(list)\n\t\treturn nil\n\t}\n\treturn err\n}","label":0}
{"text":"func (el EntityList) KeysById(id uint64) (keys []Key) {\n\tfor _, e := range el {\n\t\tif e.PrimaryKey.KeyId == id {\n\t\t\tvar selfSig *packet.Signature\n\t\t\tfor _, ident := range e.Identities {\n\t\t\t\tif selfSig == nil {\n\t\t\t\t\tselfSig = ident.SelfSignature\n\t\t\t\t} else if ident.SelfSignature.IsPrimaryId != nil && *ident.SelfSignature.IsPrimaryId {\n\t\t\t\t\tselfSig = ident.SelfSignature\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t\tkeys = append(keys, Key{e, e.PrimaryKey, e.PrivateKey, selfSig})\n\t\t}\n\n\t\tfor _, subKey := range e.Subkeys {\n\t\t\tif subKey.PublicKey.KeyId == id {\n\t\t\t\tkeys = append(keys, Key{e, subKey.PublicKey, subKey.PrivateKey, subKey.Sig})\n\t\t\t}\n\t\t}\n\t}\n\treturn\n}","label":0}
{"text":"def inv_std_norm_cdf(x):\n    \n    z = 2*x -1\n    ln1z2 = np.log(1-z**2)\n    a = 8*(np.pi -3)\/(3*np.pi*(4-np.pi))\n    b = 2\/(np.pi * a) + ln1z2\/2\n    inv_erf = np.sign(z) * np.sqrt( np.sqrt(b**2 - ln1z2\/a) - b )\n    return np.sqrt(2) * inv_erf","label":0}
{"text":"public function extract(Listener $listener, $category = null, array $input)\n    {\n\n        try {\n            $subdir = !is_null($category) ? $category : 'addons';\n            $target = realpath(app_path() . \"\/..\/src\/modules\/{$subdir}\");\n            if (!is_dir($target)) {\n                throw new \\Exception('Invalid path of module provided');\n            }\n\n            $name = $input['name'];\n            $path = storage_path() . '\/app\/uploads\/' . $name;\n            if (!file_exists($path)) {\n                throw new \\Exception('Invalid path of module package');\n            }\n\n            if ($this->unzip($path, $target)) {\n                return $listener->moduleExtracted($category);\n            }\n            return $listener->moduleExtractionError($category);\n        } catch (\\Exception $e) {\n            Log::emergency($e);\n            return $listener->moduleExtractionError($category);\n        }\n    }","label":0}
{"text":"public function stop()\n    {\n        if (is_null($this->sectionName)) {\n            throw new LogicException(\n                'You must start a section before you can stop it.'\n            );\n        }\n\n        $content = ob_get_clean();\n\n        if ($this->appendSection && isset($this->sections[$this->sectionName])) {\n            $this->sections[$this->sectionName] = $this->sections[$this->sectionName] .ob_get_clean();\n        } elseif ($this->prependSection && isset($this->sections[$this->sectionName])) {\n            $this->sections[$this->sectionName] = ob_get_clean() . $this->sections[$this->sectionName];\n        } else {\n            $this->sections[$this->sectionName] = $content;\n        }\n\n        $this->sectionName = null;\n        $this->appendSection  = false;\n        $this->prependSection = false;\n    }","label":0}
{"text":"def str2dict_values(str_in):\n    '''\n    \n    '''\n    tmp_dict = str2dict(str_in)\n    if tmp_dict is None:\n        return None\n    return [tmp_dict[key] for key in sorted(k for k in tmp_dict)]","label":0}
{"text":"public function getModuleName()\n    {\n        $module = $this->argument('module') ?: app('modules')->getUsedNow();\n\n        $module = app('modules')->findOrFail($module);\n\n        return $module->getStudlyName();\n    }","label":0}
{"text":"func (s *BatchDeleteTableVersionInput) Validate() error {\n\tinvalidParams := request.ErrInvalidParams{Context: \"BatchDeleteTableVersionInput\"}\n\tif s.CatalogId != nil && len(*s.CatalogId) < 1 {\n\t\tinvalidParams.Add(request.NewErrParamMinLen(\"CatalogId\", 1))\n\t}\n\tif s.DatabaseName == nil {\n\t\tinvalidParams.Add(request.NewErrParamRequired(\"DatabaseName\"))\n\t}\n\tif s.DatabaseName != nil && len(*s.DatabaseName) < 1 {\n\t\tinvalidParams.Add(request.NewErrParamMinLen(\"DatabaseName\", 1))\n\t}\n\tif s.TableName == nil {\n\t\tinvalidParams.Add(request.NewErrParamRequired(\"TableName\"))\n\t}\n\tif s.TableName != nil && len(*s.TableName) < 1 {\n\t\tinvalidParams.Add(request.NewErrParamMinLen(\"TableName\", 1))\n\t}\n\tif s.VersionIds == nil {\n\t\tinvalidParams.Add(request.NewErrParamRequired(\"VersionIds\"))\n\t}\n\n\tif invalidParams.Len() > 0 {\n\t\treturn invalidParams\n\t}\n\treturn nil\n}","label":0}
{"text":"private function paintReportHeader()\n    {\n        $isAggregateReport = !empty($this->reportMetadata['dimension']);\n\n        \/\/ Graph-only report\n        static $graphOnlyReportCount = 0;\n        $graphOnlyReport = $isAggregateReport && $this->displayGraph && !$this->displayTable;\n\n        \/\/ Table-only report\n        $tableOnlyReport = $isAggregateReport\n            && !$this->displayGraph\n            && $this->displayTable;\n\n        $columnCount = count($this->reportColumns);\n\n        \/\/ Table-only 2-column report\n        static $tableOnly2ColumnReportCount = 0;\n        $tableOnly2ColumnReport = $tableOnlyReport\n            && $columnCount == 2;\n\n        \/\/ Table-only report with more than 2 columns\n        static $tableOnlyManyColumnReportRowCount = 0;\n        $tableOnlyManyColumnReport = $tableOnlyReport\n            && $columnCount > 3;\n\n        $reportHasData = $this->reportHasData();\n\n        $rowCount = $reportHasData ? $this->report->getRowsCount() + self::TABLE_HEADER_ROW_COUNT : self::NO_DATA_ROW_COUNT;\n\n        \/\/ Only a page break before if the current report has some data\n        if ($reportHasData &&\n            \/\/ and\n            (\n                \/\/ it is the first report\n                $this->currentPage == 0\n                \/\/ or, it is a graph-only report and it is the first of a series of self::MAX_GRAPH_REPORTS\n                || ($graphOnlyReport && $graphOnlyReportCount == 0)\n                \/\/ or, it is a table-only 2-column report and it is the first of a series of self::MAX_2COL_TABLE_REPORTS\n                || ($tableOnly2ColumnReport && $tableOnly2ColumnReportCount == 0)\n                \/\/ or it is a table-only report with more than 2 columns and it is the first of its series or there isn't enough space left on the page\n                || ($tableOnlyManyColumnReport && ($tableOnlyManyColumnReportRowCount == 0 || $tableOnlyManyColumnReportRowCount + $rowCount >= self::MAX_ROW_COUNT))\n                \/\/ or it is a report with both a table and a graph\n                || !$graphOnlyReport && !$tableOnlyReport\n            )\n        ) {\n            $this->currentPage++;\n            $this->TCPDF->AddPage();\n\n            \/\/ Table-only reports with more than 2 columns are always landscape\n            if ($tableOnlyManyColumnReport) {\n                $tableOnlyManyColumnReportRowCount = 0;\n                $this->orientation = self::LANDSCAPE;\n            } else {\n                \/\/ Graph-only reports are always portrait\n                $this->orientation = $graphOnlyReport ? self::PORTRAIT : ($columnCount > $this->maxColumnCountPortraitOrientation ? self::LANDSCAPE : self::PORTRAIT);\n            }\n\n            $this->TCPDF->setPageOrientation($this->orientation, '', $this->bottomMargin);\n        }\n\n        $graphOnlyReportCount = ($graphOnlyReport && $reportHasData) ? ($graphOnlyReportCount + 1) % self::MAX_GRAPH_REPORTS : 0;\n        $tableOnly2ColumnReportCount = ($tableOnly2ColumnReport && $reportHasData) ? ($tableOnly2ColumnReportCount + 1) % self::MAX_2COL_TABLE_REPORTS : 0;\n        $tableOnlyManyColumnReportRowCount = $tableOnlyManyColumnReport ? ($tableOnlyManyColumnReportRowCount + $rowCount) : 0;\n\n        $title = $this->formatText($this->reportMetadata['name']);\n        $this->TCPDF->SetFont($this->reportFont, $this->reportFontStyle, $this->reportHeaderFontSize);\n        $this->TCPDF->SetTextColor($this->headerTextColor[0], $this->headerTextColor[1], $this->headerTextColor[2]);\n        $this->TCPDF->Bookmark($title);\n        $this->TCPDF->Cell(40, 15, $title);\n        $this->TCPDF->Ln();\n        $this->TCPDF->SetFont($this->reportFont, '', $this->reportSimpleFontSize);\n        $this->TCPDF->SetTextColor($this->reportTextColor[0], $this->reportTextColor[1], $this->reportTextColor[2]);\n    }","label":0}
{"text":"public function convertQueryCondition($value)\n    {\n        \/\/ First fetch the type\n        if (null === $value) {\n            return 0;\n        }\n\n        if (!is_array($value)) {\n            $value = [$value];\n        }\n\n        $hasOperator = false;\n\n        \/\/ FIXME Sorry for this\n        if (!Misc::isIndexed($value)) {\n            \/\/ We have an operator.\n            $operator = array_keys($value)[0];\n            $values = $value[$operator][0];\n            $hasOperator = true;\n        } else {\n            $values = $value;\n        }\n\n        foreach ($values as $key => $type) {\n            if (null === $type) {\n                $values[$key] = 0;\n            } else if ($typeId = $this->getTypeId($type, false)) {\n                $values[$key] = $typeId;\n            } else {\n                unset($values[$key]);\n            }\n        }\n\n        if (empty($values)) {\n            \/\/ It should not have been empty, this is an impossible\n            \/\/ condition\n            $values = [-1];\n        }\n\n        if ($hasOperator) {\n            return [$operator => $values];\n        } else {\n            return $values;\n        }\n    }","label":0}
{"text":"protected function hydratePivotRelation(array $models)\n\t{\n\t\t\/\/ To hydrate the pivot relationship, we will just gather the pivot attributes\n\t\t\/\/ and create a new Pivot model, which is basically a dynamic model that we\n\t\t\/\/ will set the attributes, table, and connections on so it they be used.\n\t\tforeach ($models as $model)\n\t\t{\n\t\t\t$pivot = $this->newExistingPivot($this->cleanPivotAttributes($model));\n\n\t\t\t$model->setRelation('pivot', $pivot);\n\t\t}\n\t}","label":0}
{"text":"def successors(self, state, successor_func=None, **run_args):\n        \n        if successor_func is not None:\n            return successor_func(state, **run_args)\n        return self._project.factory.successors(state, **run_args)","label":0}
{"text":"func (c *GroupDeleteCall) OemBlacklist(oemBlacklist string) *GroupDeleteCall {\n\tc.urlParams_.Set(\"oemBlacklist\", oemBlacklist)\n\treturn c\n}","label":0}
{"text":"public function get($key = null, $cache_cb = null, &$cas_token = null)\n    {\n\n        if (isset($this->cacheListing [$key])) {\n            return parent::get($key, $cache_cb, $cas_token);\n        }\n\n        return false;\n    }","label":0}
{"text":"func (ipr *IPRange) Overlaps(o *IPRange) bool {\n\t\/\/ if the start of o is less than our start, we need to make sure the end of o\n\t\/\/ is less than our start\n\tif bytes.Compare([]byte(o.Start), []byte(ipr.Start)) < 0 {\n\t\treturn bytes.Compare([]byte(o.End), []byte(ipr.Start)) >= 0\n\t}\n\t\/\/ if the start of o is greater than our end, then no overlap\n\tif bytes.Compare([]byte(o.Start), []byte(ipr.End)) > 0 {\n\t\treturn false\n\t}\n\t\/\/ otherwise, their start is within our range, and thus there is overlap\n\treturn true\n}","label":0}
{"text":"func (s *DeleteSuggesterInput) SetSuggesterName(v string) *DeleteSuggesterInput {\n\ts.SuggesterName = &v\n\treturn s\n}","label":0}
{"text":"static public function getResizedImageSize($file, $target=25){\n\t\tlist($width, $height, , ) = getimagesize($file);\n\t\t$max = max($width, $height);\n\t\t$rapp = $target \/ $max;\n\t\t$width = intval($rapp * $width);\n\t\t$height = intval($rapp * $height);\n\t\treturn array($width, $height);\n\t}","label":0}
{"text":"def scan(self, paths=None, depth=2):\n        \n        song_exts = ['mp3', 'ogg', 'wma', 'm4a']\n        exts = song_exts\n        paths = paths or [Library.DEFAULT_MUSIC_FOLDER]\n        depth = depth if depth <= 3 else 3\n        media_files = []\n        for directory in paths:\n            logger.debug('\u6b63\u5728\u626b\u63cf\u76ee\u5f55(%s)...', directory)\n            media_files.extend(scan_directory(directory, exts, depth))\n        logger.info('\u5171\u626b\u63cf\u5230 %d \u4e2a\u97f3\u4e50\u6587\u4ef6\uff0c\u51c6\u5907\u5c06\u5176\u5f55\u5165\u672c\u5730\u97f3\u4e50\u5e93', len(media_files))\n\n        for fpath in media_files:\n            add_song(fpath, self._songs, self._artists, self._albums)\n        logger.info('\u5f55\u5165\u672c\u5730\u97f3\u4e50\u5e93\u5b8c\u6bd5')","label":0}
{"text":"public function throwException(\n        $message,\n        $code,\n        $connectionErrorNumber = null,\n        $httpStatusCode = null,\n        $previousException = null\n    ) {\n        throw new PhpCapException(\n            $message,\n            $code,\n            $connectionErrorNumber,\n            $httpStatusCode,\n            $previousException\n        );\n    }","label":0}
{"text":"public function maybeAddRatingPrompt( $activity, $config_path ) {\n\t\t$added = false;\n\n\t\t$configs = $this->getActivityConfigs( $activity, $config_path );\n\n\t\tif ( isset( $configs['threshold'] ) && $this->getActivityCount( $activity ) >= $configs['threshold'] ) {\n\t\t\t$rating_prompt = new \\Boldgrid\\Library\\Library\\RatingPrompt();\n\t\t\t$added = $rating_prompt->addPrompt( $configs['prompt'] );\n\t\t}\n\n\t\treturn $added;\n\t}","label":0}
{"text":"def get_amount_arrears_transactions(self, billing_cycle):\n        \"\"\"\"\"\"\n        previous_billing_cycle = billing_cycle.get_previous()\n        if not previous_billing_cycle:\n            return Decimal(0)\n        return self.to_account.balance(\n            transaction__date__lt=previous_billing_cycle.date_range.upper,\n            transaction__date__gte=previous_billing_cycle.date_range.lower,\n        )","label":0}
{"text":"func MaybeSaveHostFile(c *cli.Context, hostfile *Hostfile) {\n\t\/\/ If -n is passed, no-op and output the resultant hosts file to stdout.\n\t\/\/ Otherwise it's for real and we're going to write it.\n\tif AnyBool(c, \"n\") {\n\t\tfmt.Printf(\"%s\", hostfile.Format())\n\t} else {\n\t\terr := hostfile.Save()\n\t\tif err != nil {\n\t\t\tMaybeError(c, ErrCantWriteHostFile.Error())\n\t\t}\n\t}\n}","label":0}
{"text":"function initVar (key, envKey, def) {\n        var negate = !def;\n        switch (true) {\n            case cacheObj.hasOwnProperty(key):\n                return cacheObj[key];\n            case process.env.hasOwnProperty(envGlobalCacheKey):\n                return process.env[envGlobalCacheKey] !== '';\n            case process.env.hasOwnProperty(envKey):\n                return negate ? process.env[envKey] === 'YES' : process.env[envKey] !== 'NO';\n            default:\n                return def;\n        }\n    }","label":0}
{"text":"public function onUploadFileStart($in)\n    {\n        $this->freezeInput();\n        FileSystem::tempnam(ini_get('upload_tmp_dir'), 'php', function ($fp) use ($in) {\n            if (!$fp) {\n                $in->curPart['fp'] = false;\n                $in->curPart['error'] = UPLOAD_ERR_NO_TMP_DIR;\n            } else {\n                $in->curPart['fp'] = $fp;\n                $in->curPart['tmp_name'] = $fp->path;\n            }\n            $this->unfreezeInput();\n        });\n    }","label":0}
{"text":"public function setApiClient($api_client)\n    {\n        if (! class_exists($api_client) || ! method_exists($api_client, 'call')) {\n            throw new DataSift_Exception_InvalidData('Class \"' . $api_client . '\" does not exist');\n        }\n\n        $this->_api_client = $api_client;\n    }","label":0}
{"text":"public static function copy($start_path, $copy_path, $dir_mode = 0777)\n    {\n        $return = mkdir($copy_path, $dir_mode, true);\n        $files = self::getContent($start_path);\n        foreach ($files as $file) {\n            if (is_dir($start_path.DIRECTORY_SEPARATOR.$file)) {\n                $return = self::copy(rtrim($start_path, DIRECTORY_SEPARATOR).DIRECTORY_SEPARATOR.$file, $copy_path.DIRECTORY_SEPARATOR.$file, $dir_mode);\n            } else {\n                $return = copy(rtrim($start_path, DIRECTORY_SEPARATOR).DIRECTORY_SEPARATOR.$file, $copy_path.DIRECTORY_SEPARATOR.$file);\n            }\n        }\n\n        return $return;\n    }","label":0}
{"text":"private static CpuAcctMetric parse(final List<String> lines)\n  {\n    \/\/ File has a header. We skip it\n    \/\/ See src\/test\/resources\/cpuacct.usage_all for an example\n    final int ncpus = lines.size() - 1;\n    final long[] usrTime = new long[ncpus];\n    final long[] sysTime = new long[ncpus];\n    for (int i = 1; i < lines.size(); i++) {\n      final String[] splits = lines.get(i).split(CgroupUtil.SPACE_MATCH, 3);\n      if (splits.length != 3) {\n        throw new RE(\"Error parsing [%s]\", lines.get(i));\n      }\n      final int cpuNum = Integer.parseInt(splits[0]);\n      usrTime[cpuNum] = Long.parseLong(splits[1]);\n      sysTime[cpuNum] = Long.parseLong(splits[2]);\n    }\n    return new CpuAcctMetric(usrTime, sysTime);\n  }","label":0}
{"text":"func (s *CreateIdentityProviderInput) SetProviderDetails(v map[string]*string) *CreateIdentityProviderInput {\n\ts.ProviderDetails = v\n\treturn s\n}","label":0}
{"text":"public function setMeta($content)\n    {\n        $key = '_meta_tags';\n\n        if (!isset($this->data[$key])) {\n            $this->data[$key] = array();\n        }\n\n        $this->data[$key][] = $content;\n    }","label":0}
{"text":"def make(parser):\n    \n\n    action = parser.add_mutually_exclusive_group()\n\n    action.add_argument(\n        '--install',\n        metavar='PKG(s)',\n        help='Comma-separated package(s) to install',\n    )\n\n    action.add_argument(\n        '--remove',\n        metavar='PKG(s)',\n        help='Comma-separated package(s) to remove',\n    )\n\n    parser.add_argument(\n        'hosts',\n        nargs='+',\n    )\n\n    parser.set_defaults(\n        func=pkg,\n    )","label":0}
{"text":"func validateCloudWatchEventPermissionPrincipal(v interface{}, k string) (ws []string, es []error) {\n\tvalue := v.(string)\n\tif !regexp.MustCompile(`^(\\d{12}|\\*)$`).MatchString(value) {\n\t\tes = append(es, fmt.Errorf(\"%q must be * or a 12 digit AWS account ID\", k))\n\t}\n\treturn\n}","label":0}
{"text":"@Override\n  protected HashMap<String, Object> getDistribution(String argument) {\n    HashMap<String, Object> result = new LinkedHashMap<>();\n    Long start = null;\n    Long end = null;\n    Long step = null;\n    Integer number = null;\n    if (argument != null) {\n      Matcher m = fpArgument.matcher(argument);\n      \/\/ get settings\n      while (m.find()) {\n        if (m.group(1).trim().equals(\"start\")) {\n          start = Long.parseLong(m.group(2));\n        } else if (m.group(1).trim().equals(\"end\")) {\n          end = Long.parseLong(m.group(2));\n        } else if (m.group(1).trim().equals(\"step\")) {\n          step = Long.parseLong(m.group(2));\n        } else if (m.group(1).trim().equals(\"number\")) {\n          number = Integer.parseInt(m.group(2));\n        }\n      }\n    }\n    \/\/ always exactly one of (positive) number and (positive) step, other null\n    if ((number == null || number < 1) && (step == null || step < 1)) {\n      number = 10;\n      step = null;\n    } else if (step != null && step < 1) {\n      step = null;\n    } else if (number != null && number < 1) {\n      number = null;\n    } else if (step != null) {\n      number = null;\n    }\n    \/\/ sanity checks start\/end\n    createStats();\n    long tmpStart = Double.valueOf(Math.floor(stats.getMin())).longValue();\n    long tmpEnd = Double.valueOf(Math.ceil(stats.getMax())).longValue();\n    if (start != null && end != null && start > end) {\n      return null;\n    } else if (start != null && start > tmpEnd) {\n      return null;\n    } else if (end != null && end < tmpStart) {\n      return null;\n    }\n    \/\/ check start and end\n    if (start == null && end == null) {\n      if (step == null) {\n        step = -Math.floorDiv((tmpStart - tmpEnd - 1), number);\n      }\n      number = Long.valueOf(-Math.floorDiv((tmpStart - tmpEnd - 1), step))\n          .intValue();\n      start = tmpStart;\n      end = start + (number * step);\n    } else if (start == null) {\n      if (step == null) {\n        step = -Math.floorDiv((tmpStart - end - 1), number);\n      }\n      number = Long.valueOf(-Math.floorDiv((tmpStart - end - 1), step))\n          .intValue();\n      start = end - (number * step);\n    } else if (end == null) {\n      if (step == null) {\n        step = -Math.floorDiv((start - tmpEnd - 1), number);\n      }\n      number = Long.valueOf(-Math.floorDiv((start - tmpEnd - 1), step))\n          .intValue();\n      end = start + (number * step);\n    } else {\n      if (step == null) {\n        step = -Math.floorDiv((start - end - 1), number);\n      }\n      number = Long.valueOf(-Math.floorDiv((start - end - 1), step)).intValue();\n    }\n    long[] list = new long[number];\n    for (Long v : fullValues) {\n      if (v >= start && v <= end) {\n        int i = Long.valueOf(Math.floorDiv((v - start), step)).intValue();\n        list[i]++;\n      }\n    }\n    for (int i = 0; i < number; i++) {\n      Long l = start + i * step;\n      Long r = Math.min(end, l + step - 1);\n      String key;\n      if (step > 1 && r > l) {\n        key = \"[\" + l + \",\" + r + \"]\";\n      } else {\n        key = \"[\" + l + \"]\";\n      }\n      result.put(key, list[i]);\n    }\n    return result;\n  }","label":0}
{"text":"func Convert_v1_ImageConfig_To_config_ImageConfig(in *v1.ImageConfig, out *config.ImageConfig, s conversion.Scope) error {\n\treturn autoConvert_v1_ImageConfig_To_config_ImageConfig(in, out, s)\n}","label":0}
{"text":"function prepareTemplates(templates){\n  var valueGeneratorsDict = {\n    select: function(obj){\n      var types = {\n        random:function(){\n          return obj.choice[Math.floor(Math.random() * obj.choice.length)];\n        },\n        liner: function(){\n          var el = obj.choice.shift();\n          obj.choice.push(el);\n          return el;\n        },\n        random_unique: function(){\n          function shuffle(o) {\n            for(var j, x, i = o.length; i; j = parseInt(Math.random() * i), x = o[--i], o[i] = o[j], o[j] = x);\n            return o;\n          };\n          if(!obj.randomized){obj.randomized = shuffle(obj.choice.slice());}\n          var el = obj.randomized.shift();\n          if(el===undefined){\n            log.notEnoughChoice('random_unique','choice');\n            process.exit()\n          }\n          return el;\n        }\n      }\n      if(!types[obj.type]){\n        return log.noTemplateType('select', obj.type, Object.keys(types))\n      }\n      return types[obj.type]\n    },\n    lipsum: function(obj){\n      if(!(obj.max_char_length&&obj.min_char_length)){\n        return log.missingSettings('lipsum', '', ['max_char_length','mim_char_length'])\n      }\n      var lorem = 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.'\n      return function(){\n        var chars = Math.floor(Math.random()*(obj.max_char_length-obj.min_char_length)+obj.min_char_length)\n        var str = lorem.slice(0, chars)\n        while(str.length < chars){\n          var len = chars - str.length\n          str += ' '+lorem.slice(0, len)\n        }\n        return str\n      }\n    },\n    number: function(obj){\n      var types = {\n        random:function(){\n          return Math.floor(Math.random()*(obj.max_num-obj.min_num)+obj.min_num);\n        },\n        incremental: function(){\n          tempdata += obj.increments\n          return tempdata;\n        }\n      }\n\n      if(!types[obj.type]){\n        return log.noTemplateType('number', obj.type, Object.keys(types))\n      }\n      if(obj.type == 'random' && !(obj.max_num&&obj.min_num)){\n        return log.missingSettings('number', 'random', ['max_num','min_num'])\n      }\n      if(obj.type == 'incremental'){\n        if(!(obj.starting_num&&obj.increments)){\n          return log.missingSettings('number', 'incremental', ['starting_num','increments'])\n        }\n        var tempdata = this[obj.id] = obj.starting_num - obj.increments\n      }\n\n      return types[obj.type]\n    },\n    datetime: function(obj){\n      var types = {\n        random:function(){\n          return output[obj.output_format](new Date(Math.floor(Math.random()*(max-min)+min)));\n        },\n        incremental: function(){\n          tempdata += obj.increments\n          return output[obj.output_format](new Date(tempdata));\n        }\n      }\n      var output = {\n        toString: function(d){ return d.toString(); },\n        toDateString: function(d){ return d.toDateString(); },\n        toISOString: function(d){ return d.toISOString(); },\n        toJSON: function(d){ return d.toJSON(); },\n        toGMTString: function(d){ return d.toGMTString(); },\n        toLocaleDateString: function(d){ return d.toLocaleDateString(); },\n        toLocaleString: function(d){ return d.toLocaleString(); },\n        toLocaleTimeString: function(d){ return d.toLocaleTimeString(); },\n        toTimeString: function(d){ return d.toTimeString(); },\n        toUTCString: function(d){ return d.toUTCString(); },\n        toYMDString:function(d){\n          return d.toJSON().split('T')[0]\n        }\n      }\n\n      if(!types[obj.type]){\n        return log.noTemplateType('date', obj.type, Object.keys(types))\n      }\n      if(obj.type == 'random'){\n        if(!(obj.max_datetime&&obj.min_datetime&&obj.output_format)){\n          return log.missingSettings('date', 'random', ['max_datetime','min_datetime','output_format'])\n        }\n        var min = Date.parse(obj.min_datetime)\n        var max = Date.parse(obj.max_datetime)\n        if(isNaN(min)){\n          return log.notParseableDatetime('min_datetime', obj.min_datetime)\n        }else if(isNaN(max)){\n          return log.notParseableDatetime('max_datetime', obj.max_datetime)\n        }\n      }\n      if(obj.type == 'incremental'){\n        if(!(obj.starting_datetime&&obj.increments&&obj.output_format)){\n          return log.missingSettings('number', 'incremental', ['starting_datetime','increments','output_format'])\n        }\n        var tempdata = this[obj.id] = Date.parse(obj.starting_datetime) - obj.increments\n        if(isNaN(tempdata)){\n          return log.notParseableDatetime('starting_datetime', obj.starting_datetime)\n        }\n      }\n\n      return types[obj.type]\n    }\n  }\n\n  \/*\n  Recursively iterate each key in template object to find `stub_type` key.\n  If the object has `stub_type` key, replace itself with corresponding\n  function in valueGenerators valid\n  Arg:\n    - obj (Object)\n  *\/\n  function parseTemplate(obj) {\n    for (var key in obj) {\n      if (obj[key] !== null && typeof(obj[key])==\"object\") {\n        if(obj[key].stub_type){\n          if(!valueGeneratorsDict[obj[key].stub_type]){\n            log.stubTypeNotFound(obj[key].stub_type)\n          }else{\n            obj[key].id = crypto.randomBytes(16).toString('hex');\n            obj[key] = valueGeneratorsDict[obj[key].stub_type](obj[key])\n          }\n        }else{\n          parseTemplate(obj[key]);\n        }\n      }\n    }\n  }\n\n  if(templates){\n    Object.keys(templates).map(function(t){\n      parseTemplate(templates[t]);\n    })\n    return templates;\n  }else{\n    return [];\n  }\n}","label":0}
{"text":"protected function userDefinedVars($file)\n    {\n        $start = $this->delimiter[0];\n        $end = $this->delimiter[1];\n\n        if ($this->customData !== null) {\n            $customVars = explode(';', $this->customData);\n            foreach ($customVars as $rawVar) {\n                $arrayVar = explode('=', $rawVar);\n                File::put($file, str_replace($start . $arrayVar[0] . $end, $arrayVar[1], File::get($file)));\n            }\n        }\n    }","label":0}
{"text":"void setParent (Context2 parent)\n    {\n        this.parent = parent;\n        parent.child = this;        \/\/ JJK: Doubly-linked\n        declarations = null;\n        prefixTable = parent.prefixTable;\n        uriTable = parent.uriTable;\n        elementNameTable = parent.elementNameTable;\n        attributeNameTable = parent.attributeNameTable;\n        defaultNS = parent.defaultNS;\n        tablesDirty = false;\n    }","label":0}
{"text":"public function toNative(ParamBag $paramBag)\n\t{\n\t\t\/\/ We can assume the extension exists, since it has already been used\n\t\t$ext = $this->extensionMap->get($this->extension);\n\t\t$native = $ext->load($paramBag->all())->toNative();\n\n\t\treturn $native;\n\t}","label":0}
{"text":"func (c *Compactor) compact(fast bool, tsmFiles []string) ([]string, error) {\n\tsize := c.Size\n\tif size <= 0 {\n\t\tsize = MaxPointsPerBlock\n\t}\n\n\tc.mu.RLock()\n\tintC := c.compactionsInterrupt\n\tc.mu.RUnlock()\n\n\t\/\/ The new compacted files need to added to the max generation in the\n\t\/\/ set.  We need to find that max generation as well as the max sequence\n\t\/\/ number to ensure we write to the next unique location.\n\tvar maxGeneration, maxSequence int\n\tfor _, f := range tsmFiles {\n\t\tgen, seq, err := c.parseFileName(f)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\n\t\tif gen > maxGeneration {\n\t\t\tmaxGeneration = gen\n\t\t\tmaxSequence = seq\n\t\t}\n\n\t\tif gen == maxGeneration && seq > maxSequence {\n\t\t\tmaxSequence = seq\n\t\t}\n\t}\n\n\t\/\/ For each TSM file, create a TSM reader\n\tvar trs []*TSMReader\n\tfor _, file := range tsmFiles {\n\t\tselect {\n\t\tcase <-intC:\n\t\t\treturn nil, errCompactionAborted{}\n\t\tdefault:\n\t\t}\n\n\t\ttr := c.FileStore.TSMReader(file)\n\t\tif tr == nil {\n\t\t\t\/\/ This would be a bug if this occurred as tsmFiles passed in should only be\n\t\t\t\/\/ assigned to one compaction at any one time.  A nil tr would mean the file\n\t\t\t\/\/ doesn't exist.\n\t\t\treturn nil, errCompactionAborted{fmt.Errorf(\"bad plan: %s\", file)}\n\t\t}\n\t\tdefer tr.Unref() \/\/ inform that we're done with this reader when this method returns.\n\t\ttrs = append(trs, tr)\n\t}\n\n\tif len(trs) == 0 {\n\t\treturn nil, nil\n\t}\n\n\ttsm, err := NewTSMBatchKeyIterator(size, fast, intC, trs...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn c.writeNewFiles(maxGeneration, maxSequence, tsmFiles, tsm, true)\n}","label":0}
{"text":"public function getChannelType()\n    {\n        switch ($this->type) {\n            case self::TYPE_TEXT:\n            case self::TYPE_VOICE:\n                return $this->type;\n                break;\n            default:\n                return self::TYPE_TEXT;\n                break;\n        }\n    }","label":0}
{"text":"func (m *memoryMailBox) ResetPackets() error {\n\tpktDone := make(chan struct{})\n\tselect {\n\tcase m.pktReset <- pktDone:\n\t\treturn m.signalUntilReset(pktCourier, pktDone)\n\tcase <-m.quit:\n\t\treturn ErrMailBoxShuttingDown\n\t}\n}","label":0}
{"text":"function getTemplateTags(start, end) {\n            const results = []\n            for (const token of microTemplateService.getMicroTemplateTokens()) {\n                if (token.range[1] <= start) {\n                    continue\n                }\n                if (end <= token.range[0]) {\n                    break\n                }\n                results.push(token)\n            }\n            return results\n        }","label":0}
{"text":"def one_banner(slug):\n    \n    place = BannerPlace.objects.published().get(slug=slug)\n    banner = place.banner_set.published().order_by('?').first()\n    renderer = get_renderer(banner)\n    return renderer(banner)","label":0}
{"text":"func NewRow(ratio float64, i ...interface{}) GridItem {\n\t_, ok := i[0].(Drawable)\n\tentry := i[0]\n\tif !ok {\n\t\tentry = i\n\t}\n\treturn GridItem{\n\t\tType:   row,\n\t\tEntry:  entry,\n\t\tIsLeaf: ok,\n\t\tratio:  ratio,\n\t}\n}","label":0}
{"text":"private FilterChangeUserAgentDialog getFilterChangeUserAgentDialog() {\r\n\t\tif (filterChangeUserAgentDialog == null) {\r\n\t\t    filterChangeUserAgentDialog  = new FilterChangeUserAgentDialog(getView().getMainFrame(), true);\r\n\t\t}\r\n\t\treturn filterChangeUserAgentDialog ;\r\n\t}","label":0}
{"text":"func (fbs *FileBackupStorage) RemoveBackup(ctx context.Context, dir, name string) error {\n\tp := path.Join(*FileBackupStorageRoot, dir, name)\n\treturn os.RemoveAll(p)\n}","label":0}
{"text":"def alignment_ranges(self):\n     \"\"\"\"\"\"\n     if not self.is_aligned(): raise ValueError(\"you can't get alignment ranges from something that didn't align\")\n     if self._alignment_ranges: return self._alignment_ranges\n     self._alignment_ranges = self._get_alignment_ranges()\n     return self._alignment_ranges","label":0}
{"text":"protected function serializeWith($instance, string $name)\n    {\n        $serializer = $this->getVersionedResourceClassName('Serializers', $name);\n\n        if (\\class_exists($serializer)) {\n            return \\call_user_func(app($serializer), $instance);\n        }\n\n        if ($instance instanceof Fluent) {\n            return $instance->getAttributes();\n        } elseif ($instance instanceof Collection) {\n            return $instance->all();\n        } elseif ($instance instanceof Arrayable) {\n            return $instance->toArray();\n        }\n\n        return $instance;\n    }","label":0}
{"text":"func inSelectIM(p *parser) bool {\n\tswitch p.tok.Type {\n\tcase ErrorToken:\n\t\t\/\/ Stop parsing.\n\t\treturn true\n\tcase TextToken:\n\t\tp.addText(strings.Replace(p.tok.Data, \"\\x00\", \"\", -1))\n\tcase StartTagToken:\n\t\tswitch p.tok.DataAtom {\n\t\tcase a.Html:\n\t\t\treturn inBodyIM(p)\n\t\tcase a.Option:\n\t\t\tif p.top().DataAtom == a.Option {\n\t\t\t\tp.oe.pop()\n\t\t\t}\n\t\t\tp.addElement()\n\t\tcase a.Optgroup:\n\t\t\tif p.top().DataAtom == a.Option {\n\t\t\t\tp.oe.pop()\n\t\t\t}\n\t\t\tif p.top().DataAtom == a.Optgroup {\n\t\t\t\tp.oe.pop()\n\t\t\t}\n\t\t\tp.addElement()\n\t\tcase a.Select:\n\t\t\tp.tok.Type = EndTagToken\n\t\t\treturn false\n\t\tcase a.Input, a.Keygen, a.Textarea:\n\t\t\tif p.elementInScope(selectScope, a.Select) {\n\t\t\t\tp.parseImpliedToken(EndTagToken, a.Select, a.Select.String())\n\t\t\t\treturn false\n\t\t\t}\n\t\t\t\/\/ In order to properly ignore <textarea>, we need to change the tokenizer mode.\n\t\t\tp.tokenizer.NextIsNotRawText()\n\t\t\t\/\/ Ignore the token.\n\t\t\treturn true\n\t\tcase a.Script:\n\t\t\treturn inHeadIM(p)\n\t\t}\n\tcase EndTagToken:\n\t\tswitch p.tok.DataAtom {\n\t\tcase a.Option:\n\t\t\tif p.top().DataAtom == a.Option {\n\t\t\t\tp.oe.pop()\n\t\t\t}\n\t\tcase a.Optgroup:\n\t\t\ti := len(p.oe) - 1\n\t\t\tif p.oe[i].DataAtom == a.Option {\n\t\t\t\ti--\n\t\t\t}\n\t\t\tif p.oe[i].DataAtom == a.Optgroup {\n\t\t\t\tp.oe = p.oe[:i]\n\t\t\t}\n\t\tcase a.Select:\n\t\t\tif p.popUntil(selectScope, a.Select) {\n\t\t\t\tp.resetInsertionMode()\n\t\t\t}\n\t\t}\n\tcase CommentToken:\n\t\tp.addChild(&Node{\n\t\t\tType: CommentNode,\n\t\t\tData: p.tok.Data,\n\t\t})\n\tcase DoctypeToken:\n\t\t\/\/ Ignore the token.\n\t\treturn true\n\t}\n\n\treturn true\n}","label":0}
{"text":"public final void pextrw(Register dst, MMRegister src, Immediate imm8)\n  {\n    emitX86(INST_PEXTRW, dst, src, imm8);\n  }","label":0}
{"text":"def create_default_config():\n    \n    config = configparser.RawConfigParser()\n    config.add_section('global')\n    config.set('global', 'env_source_rc', False)\n    config.add_section('shell')\n    config.set('shell', 'bash', \"true\")\n    config.set('shell', 'zsh', \"true\")\n    config.set('shell', 'gui', \"true\")\n    return config","label":0}
{"text":"public function actionView(int $id)\n    {\n        $model = $this->findModel($id);\n\n        return $this->render('view', [\n            'model' => $model,\n            'usernameField' => $this->usernameField,\n        ]);\n    }","label":0}
{"text":"def _feed_line(self, line):\n        \"\"\"\"\"\"\n        if line is None:\n            self.set_result(self._callback(self.__spooled_lines))\n        else:\n            self.__spooled_lines.append(line)","label":0}
{"text":"def get_auth_instance(credentials, auth_type):\n    \n    model = AUTH_TYPE_MAP[auth_type]\n    if model is None:\n        return None\n    username = credentials.username\n    if auth_type == NTLM and credentials.type == credentials.EMAIL:\n        username = '\\\\' + username\n    if auth_type == GSSAPI:\n        # Kerberos auth relies on credentials supplied via a ticket available externally to this library\n        return model()\n    return model(username=username, password=credentials.password)","label":0}
{"text":"public function run() {\n\t\t\/\/ initializing\n\t\t$this->max_processes = Config::$max_processes;\n\n\t\t\/\/ unlocking all transactions in case the process did not stop properly\n\t\tTransaction::unlock_all();\n\n\t\t\/\/ initializing the processes array to free slots\n\t\tfor ($i = 0; $i <= $this->max_processes; $i++) {\n\t\t\t$this->processes[$i] = -1;\n\t\t}\n\n\t\t\/\/ run forever\n\t\twhile (true) {\n\n\t\t\t\/\/ counters for parallels and non-parallel transactions\n\t\t\t$not_parallel_free = 0;\n\t\t\t$parallels_free = 0;\n\n\t\t\t\/\/ cleaning processes array before to begin\n\t\t\t$this->clean_slots($not_parallel_free, $parallels_free);\n\t\t\twhile ($not_parallel_free + $parallels_free == 0) {\t\t\t\t\/\/ if all slots are used then sleep\n\t\t\t\tusleep(100000);\t\t\t\t\t\t\t\t\t\t\t\t\/\/ for 1\/10 second and see if one or\n\t\t\t\t$this->clean_slots($not_parallel_free, $parallels_free);\t\/\/ more slot got freed\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\t$transactions = Transaction::get_runnable();\n\t\t\t} catch (\\ErrorException $e) {\n\t\t\t\t\/\/ FIXME: this doesn't work as expected, impossible to catch database server off and retry in a second\n\t\t\t\tprintf(\"%s\\n\", $e->getMessage());\n\t\t\t\tsleep(1);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (count($transactions) == 0) {\t\/\/ if there is no transaction to\n\t\t\t\tsleep(1);\t\t\t\t\t\t\/\/ process then sleep for a second\n\t\t\t\tcontinue;\t\t\t\t\t\t\/\/ and start over\n\t\t\t}\n\n\t\t\t\/\/ testing every slot and if empty looking for a transaction to start\n\t\t\tfor ($i = 0; $i < $this->max_processes; $i++) {\n\t\t\t\tif ($this->is_slot_free($i)) {\n\t\t\t\t\tif ($i == 0) {\n\t\t\t\t\t\t$transaction = $this->get_first_transaction($transactions, false);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$transaction = $this->get_first_transaction($transactions, true);\n\t\t\t\t\t}\n\t\t\t\t\tif ($transaction != null) {\n\/\/printf(\"Slot %d -> %s (%d)\\n\", $i, $transaction->classname, $transaction->id);\n\t\t\t\t\t\t$sleep = 0; \/\/ as the queue of transactions is not empty, we won't sleep\n\t\t\t\t\t\t\\Skeleton\\Database\\Database::reset();\n\t\t\t\t\t\t$pid = pcntl_fork();\n\t\t\t\t\t\tif ($pid == -1) {\n\t\t\t\t\t\t\tdie('Could not fork');\n\t\t\t\t\t\t} else if ($pid) {\n\t\t\t\t\t\t\t\/\/ PARENT\n\t\t\t\t\t\t\t$this->lock_slot($i, $pid);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\/\/ CHILD\n\t\t\t\t\t\t\tcli_set_process_title(strtolower($transaction->classname) . ' (' . $transaction->id . ')');\n\t\t\t\t\t\t\t$runner = new Runner();\n\t\t\t\t\t\t\t$runner->run_transaction($transaction);\n\t\t\t\t\t\t\t$transaction->unlock();\n\t\t\t\t\t\t\texit;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}","label":0}
{"text":"public void setResultValue(String actionId, Object resultValue) {\n        if (actionId == null || !actionId.contains(ActivityContext.ID_SEPARATOR)) {\n            this.actionId = actionId;\n            this.resultValue = resultValue;\n        } else {\n            String[] ids = StringUtils.tokenize(actionId, ActivityContext.ID_SEPARATOR, true);\n            if (ids.length == 1) {\n                this.actionId = null;\n                this.resultValue = resultValue;\n            } else if (ids.length == 2) {\n                ResultValueMap resultValueMap = new ResultValueMap();\n                resultValueMap.put(ids[1], resultValue);\n                this.actionId = ids[0];\n                this.resultValue = resultValueMap;\n            } else {\n                ResultValueMap resultValueMap = new ResultValueMap();\n                for (int i = 1; i < ids.length - 1; i++) {\n                    ResultValueMap resultValueMap2 = new ResultValueMap();\n                    resultValueMap.put(ids[i], resultValueMap2);\n                    resultValueMap = resultValueMap2;\n                }\n                resultValueMap.put(ids[ids.length - 1], resultValue);\n                this.actionId = actionId;\n                this.resultValue = resultValueMap;\n            }\n        }\n    }","label":0}
{"text":"function mergeBlocks(blocks) {\n  let finalBlock;\n  for (const block of blocks) {\n    if (!finalBlock) finalBlock = block;\n    else {\n      block.nodes.forEach(node => finalBlock.push(node));\n    }\n  }\n  return finalBlock;\n}","label":0}
{"text":"func (h *mutFileHandle) Release(ctx context.Context, req *fuse.ReleaseRequest) error {\n\th.tmp.Close()\n\tos.Remove(h.tmp.Name())\n\th.tmp = nil\n\n\treturn nil\n}","label":0}
{"text":"func Run() {\n\tmux := NewServeMux(viper.GetString(\"static\"))\n\terr := ServeMux(\n\t\tmux,\n\t\tviper.GetString(\"addr\"),\n\t\tviper.GetString(\"port\"),\n\t\tviper.GetString(\"cert\"),\n\t\tviper.GetString(\"key\"),\n\t)\n\tif err != nil {\n\t\tlog.Println(err)\n\t\treturn\n\t}\n}","label":0}
{"text":"def server(self):\n        \n        if self._server is None:\n            self._server = bugzilla.Bugzilla(url=self.parent.url)\n        return self._server","label":0}
{"text":"def get_ra(self):\n        \n\n        try:\n\n            return self.ra.value\n\n        except AttributeError:\n\n            # Transform from L,B to R.A., Dec\n\n            return self.sky_coord.transform_to('icrs').ra.value","label":0}
{"text":"function setParameters(params) {\n  \/\/ Use default `inputValidator` for supported input types if not provided\n  if (!params.inputValidator) {\n    Object.keys(defaultInputValidators).forEach(function (key) {\n      if (params.input === key) {\n        params.inputValidator = params.expectRejections ? defaultInputValidators[key] : Swal.adaptInputValidator(defaultInputValidators[key]);\n      }\n    });\n  } \/\/ params.extraParams is @deprecated\n\n\n  if (params.validationMessage) {\n    if (_typeof(params.extraParams) !== 'object') {\n      params.extraParams = {};\n    }\n\n    params.extraParams.validationMessage = params.validationMessage;\n  } \/\/ Determine if the custom target element is valid\n\n\n  if (!params.target || typeof params.target === 'string' && !document.querySelector(params.target) || typeof params.target !== 'string' && !params.target.appendChild) {\n    warn('Target parameter is not valid, defaulting to \"body\"');\n    params.target = 'body';\n  } \/\/ Animation\n\n\n  if (typeof params.animation === 'function') {\n    params.animation = params.animation.call();\n  }\n\n  var popup;\n  var oldPopup = getPopup();\n  var targetElement = typeof params.target === 'string' ? document.querySelector(params.target) : params.target; \/\/ If the model target has changed, refresh the popup\n\n  if (oldPopup && targetElement && oldPopup.parentNode !== targetElement.parentNode) {\n    popup = init(params);\n  } else {\n    popup = oldPopup || init(params);\n  } \/\/ Set popup width\n\n\n  if (params.width) {\n    popup.style.width = typeof params.width === 'number' ? params.width + 'px' : params.width;\n  } \/\/ Set popup padding\n\n\n  if (params.padding) {\n    popup.style.padding = typeof params.padding === 'number' ? params.padding + 'px' : params.padding;\n  } \/\/ Set popup background\n\n\n  if (params.background) {\n    popup.style.background = params.background;\n  }\n\n  var popupBackgroundColor = window.getComputedStyle(popup).getPropertyValue('background-color');\n  var successIconParts = popup.querySelectorAll('[class^=swal2-success-circular-line], .swal2-success-fix');\n\n  for (var i = 0; i < successIconParts.length; i++) {\n    successIconParts[i].style.backgroundColor = popupBackgroundColor;\n  }\n\n  var container = getContainer();\n  var closeButton = getCloseButton();\n  var footer = getFooter(); \/\/ Title\n\n  renderTitle(params); \/\/ Content\n\n  renderContent(params); \/\/ Backdrop\n\n  if (typeof params.backdrop === 'string') {\n    getContainer().style.background = params.backdrop;\n  } else if (!params.backdrop) {\n    addClass([document.documentElement, document.body], swalClasses['no-backdrop']);\n  }\n\n  if (!params.backdrop && params.allowOutsideClick) {\n    warn('\"allowOutsideClick\" parameter requires `backdrop` parameter to be set to `true`');\n  } \/\/ Position\n\n\n  if (params.position in swalClasses) {\n    addClass(container, swalClasses[params.position]);\n  } else {\n    warn('The \"position\" parameter is not valid, defaulting to \"center\"');\n    addClass(container, swalClasses.center);\n  } \/\/ Grow\n\n\n  if (params.grow && typeof params.grow === 'string') {\n    var growClass = 'grow-' + params.grow;\n\n    if (growClass in swalClasses) {\n      addClass(container, swalClasses[growClass]);\n    }\n  } \/\/ Close button\n\n\n  if (params.showCloseButton) {\n    closeButton.setAttribute('aria-label', params.closeButtonAriaLabel);\n    show(closeButton);\n  } else {\n    hide(closeButton);\n  } \/\/ Default Class\n\n\n  popup.className = swalClasses.popup;\n\n  if (params.toast) {\n    addClass([document.documentElement, document.body], swalClasses['toast-shown']);\n    addClass(popup, swalClasses.toast);\n  } else {\n    addClass(popup, swalClasses.modal);\n  } \/\/ Custom Class\n\n\n  if (params.customClass) {\n    addClass(popup, params.customClass);\n  } \/\/ Progress steps\n\n\n  renderProgressSteps(params); \/\/ Icon\n\n  renderIcon(params); \/\/ Image\n\n  renderImage(params); \/\/ Actions (buttons)\n\n  renderActions(params); \/\/ Footer\n\n  parseHtmlToContainer(params.footer, footer); \/\/ CSS animation\n\n  if (params.animation === true) {\n    removeClass(popup, swalClasses.noanimation);\n  } else {\n    addClass(popup, swalClasses.noanimation);\n  } \/\/ showLoaderOnConfirm && preConfirm\n\n\n  if (params.showLoaderOnConfirm && !params.preConfirm) {\n    warn('showLoaderOnConfirm is set to true, but preConfirm is not defined.\\n' + 'showLoaderOnConfirm should be used together with preConfirm, see usage example:\\n' + 'https:\/\/sweetalert2.github.io\/#ajax-request');\n  }\n}","label":0}
{"text":"func relationalFieldDefinition(failIfNotSD bool) (*gorma.RelationalFieldDefinition, bool) {\n\ta, ok := dslengine.CurrentDefinition().(*gorma.RelationalFieldDefinition)\n\tif !ok && failIfNotSD {\n\t\tdslengine.IncompatibleDSL()\n\t}\n\treturn a, ok\n}","label":0}
{"text":"def content_ids(params):\n    \n    # set up default values\n    default_from, default_to, yesterday, _ = make_default_times()\n\n    # get params\n    try:\n        series = params.get(\"site\", [DEFAULT_SERIES])[0]\n        from_date = params.get(\"from\", [default_from])[0]\n        to_date = params.get(\"to\", [default_to])[0]\n        group_by = params.get(\"group_by\", [DEFAULT_GROUP_BY])[0]\n        ids = params.get(\"content_id\", [])\n    except Exception as e:\n        LOGGER.exception(e)\n        return json.dumps({\"error\": e.message}), \"500 Internal Error\"\n\n    # check the cache\n    cache_key = \"{}:{}:{}:{}:{}:{}:{}\".format(\n        memcached_prefix, \"contentids.json\", series, from_date, to_date, group_by, ids)\n    try:\n        data = MEMCACHED_CLIENT.get(cache_key)\n        if data:\n            return data, \"200 OK\"\n    except Exception as e:\n        LOGGER.exception(e)\n\n    # enforce content ids\n    if not len(ids):\n        return json.dumps({\"error\": \"you must pass at least one content id'\"}), \"400 Bad Request\"\n\n    # parse from date\n    from_date = parse_datetime(from_date)\n    if from_date is None:\n        LOGGER.error(\"could not parse 'from'\")\n        return json.dumps({\"error\": \"could not parse 'from'\"}), \"400 Bad Request\"\n\n    # parse to date\n    to_date = parse_datetime(to_date)\n    if to_date is None:\n        LOGGER.error(\"could not parse 'to'\")\n        return json.dumps({\"error\": \"could not parse 'to'\"}), \"400 Bad Request\"\n\n    # influx will only keep non-aggregated data for a day, so if the from param is beyond that point\n    # we need to update the series name to use the rolled up values\n    if from_date < yesterday:\n        series = update_series(series, \"pageviews\", \"content_id\")\n\n    # format times\n    from_date = format_datetime(from_date)\n    to_date = format_datetime(to_date)\n\n    # start building the query\n    query = \"SELECT content_id, sum(value) as value \" \\\n            \"FROM {series} \" \\\n            \"WHERE time > '{from_date}' AND time < '{to_date}' \" \\\n            \"GROUP BY content_id, time({group_by}) \" \\\n            \"fill(0);\"\n    args = {\"series\": series, \"from_date\": from_date, \"to_date\": to_date, \"group_by\": group_by}\n\n    # send the request\n    try:\n        res = INFLUXDB_CLIENT.query(query.format(**args))\n\n    # capture errors and send them back along with the query (for inspection\/debugging)\n    except Exception as e:\n        LOGGER.exception(e)\n        return json.dumps({\"error\": e.message, \"query\": query.format(**args)}), \"500 Internal Error\"\n\n    # build the response object\n    response = flatten_response(res)\n\n    # filter by content ids\n    if len(ids):\n        for site, points in response.items():\n            filtered = filter(lambda p: p[\"content_id\"] in ids, points)\n            response[site] = filtered\n    res = json.dumps(response)\n\n    # cache the response\n    try:\n        MEMCACHED_CLIENT.set(cache_key, res, time=MEMCACHED_EXPIRATION)\n    except Exception as e:\n        LOGGER.exception(e)\n\n    return res, \"200 OK\"","label":0}
{"text":"@Override\n    public void execute() throws BuildException {\n        if (path == null)\n            throw new BuildException(\"Path isn't defined\");\n\n        if (descriptors == null)\n            throw new BuildException(\"Descriptors isn't defined\");\n\n        if (descriptors.getData() == null)\n            throw new BuildException(\"No descriptor defined\");\n\n        ClassLoader oldCl = Thread.currentThread().getContextClassLoader();\n        try {\n            if (classpathRef != null || classpath != null) {\n                org.apache.tools.ant.types.Path p = new org.apache.tools.ant.types.Path(getProject());\n\n                if (classpathRef != null) {\n                    org.apache.tools.ant.types.Reference reference = new org.apache.tools.ant.types.Reference(\n                        getProject(), classpathRef);\n                    p.setRefid(reference);\n                }\n\n                if (classpath != null) {\n                    p.append(classpath);\n                }\n\n                ClassLoader cl = getProject().createClassLoader(oldCl, p);\n                Thread.currentThread().setContextClassLoader(cl);\n            }\n\n            final List<Descriptor> data = descriptors.getData();\n            for (Descriptor d : data) {\n                d.applyNamespaces();\n            }\n\n            List<Javadoc> javadoc = null;\n            if (javadocs != null) {\n                javadoc = javadocs.getData();\n            }\n\n            final MetadataParser metadataParser = new MetadataParser();\n            metadataParser.parse(path, data, javadoc, verbose);\n        } catch (Throwable t) {\n            throw new BuildException(t.getMessage(), t);\n        } finally {\n            Thread.currentThread().setContextClassLoader(oldCl);\n        }\n    }","label":0}
{"text":"def start(name, call=None):\n    '''\n    \n    '''\n    if call != 'action':\n        raise SaltCloudSystemExit(\n            'The start action must be called with -a or --action.'\n        )\n\n    log.info('Starting node %s', name)\n\n    return vm_action(name, kwargs={'action': 'resume'}, call=call)","label":0}
{"text":"def google_get_data(self, config, response):\n        \"\"\"\"\"\"\n        params = {\n            'access_token': response['access_token'],\n        }\n        payload = urlencode(params)\n        url = self.google_api_url + 'userinfo?' + payload\n        req = Request(url)\n        json_str = urlopen(req).read()\n        return json.loads(json_str.decode('utf-8'))","label":0}
{"text":"public function encodeModeAn($version)\n        {\n            try {\n                $words = (int)($this->size \/ 2);\n                $bs = new QRbitstream();\n                \n                $bs->appendNum(4, 0x02);\n                $bs->appendNum(QRspec::lengthIndicator(QR_MODE_AN, $version), $this->size);\n\n                for($i=0; $i<$words; $i++) {\n                    $val  = (int)QRinput::lookAnTable(ord($this->data[$i*2  ])) * 45;\n                    $val += (int)QRinput::lookAnTable(ord($this->data[$i*2+1]));\n\n                    $bs->appendNum(11, $val);\n                }\n\n                if($this->size & 1) {\n                    $val = QRinput::lookAnTable(ord($this->data[$words * 2]));\n                    $bs->appendNum(6, $val);\n                }\n        \n                $this->bstream = $bs;\n                return 0;\n            \n            } catch (Exception $e) {\n                return -1;\n            }\n        }","label":0}
{"text":"public boolean shouldScanPackage(String pkg)\n    {\n        \/\/ assume an empty string if it wasn't specified\n        if (pkg == null)\n        {\n            pkg = \"\";\n        }\n        WindupJavaConfigurationModel configuration = getJavaConfigurationModel(getGraphContext());\n        for (PackageModel pkgModel : configuration.getExcludeJavaPackages())\n        {\n            String excludePkg = pkgModel.getPackageName();\n            if (pkg.startsWith(excludePkg))\n            {\n                return false;\n            }\n        }\n\n        \/\/ if the list is empty, assume it is intended to just accept all packages\n        if (!configuration.getScanJavaPackages().iterator().hasNext())\n        {\n            return true;\n        }\n\n        for (PackageModel pkgModel : configuration.getScanJavaPackages())\n        {\n            String includePkg = pkgModel.getPackageName();\n            if (pkg.startsWith(includePkg))\n            {\n                return true;\n            }\n        }\n\n        return false;\n    }","label":0}
{"text":"func (s *Session) NoReplyWait() error {\n\ts.mu.RLock()\n\tdefer s.mu.RUnlock()\n\n\tif s.closed {\n\t\treturn ErrConnectionClosed\n\t}\n\n\treturn s.cluster.Exec(nil, Query{ \/\/ nil = connection opts' defaults\n\t\tType: p.Query_NOREPLY_WAIT,\n\t})\n}","label":0}
{"text":"private function _buildRaw()\n    {\n        $boundary = md5(uniqid(rand(), true));\n        $raw_message = 'From: ' . $this->_encodeHeader($this->_source) . \"\\n\";\n        if (!empty($this->_to)) {\n            $raw_message .= 'To: ' . $this->_encodeHeader($this->_to) . \"\\n\";\n        }\n        if (!empty($this->_cc)) {\n            $raw_message .= 'cc: ' . $this->_encodeHeader($this->_cc) . \"\\n\";\n        }\n        if (!empty($this->_bcc)) {\n            $raw_message .= 'Bcc: ' . $this->_encodeHeader($this->_cc) . \"\\n\";\n        }\n        if (!empty($this->_replyTo)) {\n            $raw_message .= 'Reply-To: ' . $this->_encodeHeader($this->_replyTo) . \"\\n\";\n        }\n\n        $raw_message .= 'Subject: =?' . $this->_charset . '?B?' . base64_encode($this->_subject) . \"?=\\n\";\n        $raw_message .= 'MIME-Version: 1.0' . \"\\n\";\n\n        $raw_message .= 'Content-Type: multipart\/mixed; boundary=\"' . $boundary . '\"' . \"\\n\"; \n        $raw_message .= \"\\n--{$boundary}\\n\";\n        $raw_message .= 'Content-Type: multipart\/alternative; boundary=\"alt-' . $boundary . '\"' . \"\\n\";\n\n        if (strlen($this->_body) > 0) {\n            $raw_message .= \"\\n--alt-{$boundary}\\n\";\n            $raw_message .= 'Content-Type: text\/plain; charset=\"' . $this->_charset . '\"' . \"\\n\\n\";\n            $raw_message .= $this->_body . \"\\n\";\n        }\n\n        if (strlen($this->_htmlBody) > 0) {\n            $raw_message .= \"\\n--alt-{$boundary}\\n\";\n            $raw_message .= 'Content-Type: text\/html; charset=\"' . $this->_charset . '\"' . \"\\n\\n\";\n            $raw_message .= $this->_htmlBody . \"\\n\";\n        }\n        $raw_message .= \"\\n--alt-{$boundary}--\\n\";\n\n        foreach ($this->_attachments as $attachment) {\n            $raw_message .= \"\\n--{$boundary}\\n\";\n            $raw_message .= 'Content-Type: ' . $attachment['mimeType'] . '; name=\"' . $attachment['name'] . '\"' . \"\\n\";\n            if (!empty($attachment['contentId'])) {\n                $raw_message .= 'Content-ID' . $attachment['contentId'] . \"\\n\";\n            }\n            $raw_message .= 'Content-Transfer-Encoding: base64' . \"\\n\";\n            $raw_message .= \"\\n\" . chunk_split(base64_encode($attachment['data']), 76, \"\\n\") . \"\\n\";\n        }\n\n        $raw_message .= \"\\n--{$boundary}--\\n\";\n\n        return base64_encode($raw_message);\n    }","label":0}
{"text":"func (decoder *HTTPDecoder) Register(f DecoderFunc, contentTypes ...string) {\n\tp := newDecodePool(f)\n\n\tfor _, contentType := range contentTypes {\n\t\tmediaType, _, err := mime.ParseMediaType(contentType)\n\t\tif err != nil {\n\t\t\tmediaType = contentType\n\t\t}\n\t\tdecoder.pools[mediaType] = p\n\t}\n}","label":0}
{"text":"static int hash(double d) {\n\t\tlong bits = Double.doubleToLongBits(d);\n\t\tint hc = (int) (bits ^ (bits >>> 32));\n\t\treturn hash(hc);\n\t}","label":0}
{"text":"function create_node_in_parent(error, parentDirectoryNode) {\n    if(error) {\n      callback(error);\n    } else if(parentDirectoryNode.type !== NODE_TYPE_DIRECTORY) {\n      callback(new Errors.ENOTDIR('a component of the path prefix is not a directory', path));\n    } else {\n      parentNode = parentDirectoryNode;\n      find_node(context, path, check_if_node_exists);\n    }\n  }","label":0}
{"text":"def _build(self, build_method):\n        \n        logger.info(\"building image '%s'\", self.image)\n        self.ensure_not_built()\n        self.temp_dir = tempfile.mkdtemp()\n        temp_path = os.path.join(self.temp_dir, BUILD_JSON)\n        try:\n            with open(temp_path, 'w') as build_json:\n                json.dump(self.build_args, build_json)\n            self.build_container_id = build_method(self.build_image, self.temp_dir)\n            try:\n                logs_gen = self.dt.logs(self.build_container_id, stream=True)\n                wait_for_command(logs_gen)\n                return_code = self.dt.wait(self.build_container_id)\n            except KeyboardInterrupt:\n                logger.info(\"killing build container on user's request\")\n                self.dt.remove_container(self.build_container_id, force=True)\n                results = BuildResults()\n                results.return_code = 1\n                return results\n            else:\n                results = self._load_results(self.build_container_id)\n                results.return_code = return_code\n                return results\n        finally:\n            shutil.rmtree(self.temp_dir)","label":0}
{"text":"public function register(Renderer $renderer) {\n        $this->registerTokenRenderer(LinkInlineRule::NAME, 'renderInline', $renderer);\n        $this->registerTokenRenderer(LinkReferenceRule::NAME, 'renderReference', $renderer);\n        $this->registerTokenRenderer(LinkAutoRule::NAME, 'renderAuto', $renderer);\n    }","label":0}
{"text":"def _parse_crontab(self, which, entry):\n        '''\n        \n        '''\n\n        # this handles day of week\/month abbreviations\n        def _fix(it):\n            if which in _alternate and not it.isdigit():\n                if it in _alternate[which]:\n                    return _alternate[which][it]\n            _assert(it.isdigit(),\n                \"invalid range specifier: %r (%r)\", it, entry)\n            it = int(it, 10)\n            _assert(_start <= it <= _end_limit,\n                \"item value %r out of range [%r, %r]\",\n                it, _start, _end_limit)\n            return it\n\n        # this handles individual items\/ranges\n        def _parse_piece(it):\n            if '-' in it:\n                start, end = map(_fix, it.split('-'))\n                # Allow \"sat-sun\"\n                if which in (DAY_OFFSET, WEEK_OFFSET) and end == 0:\n                    end = 7\n            elif it == '*':\n                start = _start\n                end = _end\n            else:\n                start = _fix(it)\n                end = _end\n                if increment is None:\n                    return set([start])\n\n            _assert(_start <= start <= _end_limit,\n                \"%s range start value %r out of range [%r, %r]\",\n                _attribute[which], start, _start, _end_limit)\n            _assert(_start <= end <= _end_limit,\n                \"%s range end value %r out of range [%r, %r]\",\n                _attribute[which], end, _start, _end_limit)\n            _assert(start <= end,\n                \"%s range start value %r > end value %r\",\n                _attribute[which], start, end)\n\n            if increment:\n                next_value = start + increment\n                _assert(next_value <= _end_limit,\n                        \"first next value %r is out of range [%r, %r]\",\n                        next_value, start, _end_limit)\n            return set(range(start, end+1, increment or 1))\n\n        _start, _end = _ranges[which]\n        _end_limit = _end\n        # wildcards\n        if entry in ('*', '?'):\n            if entry == '?':\n                _assert(which in (DAY_OFFSET, WEEK_OFFSET),\n                    \"cannot use '?' in the %r field\", _attribute[which])\n            return None, _end\n\n        # last day of the month\n        if entry == 'l':\n            _assert(which == DAY_OFFSET,\n                \"you can only specify a bare 'L' in the 'day' field\")\n            return None, _end\n\n        # for the last 'friday' of the month, for example\n        elif entry.startswith('l'):\n            _assert(which == WEEK_OFFSET,\n                \"you can only specify a leading 'L' in the 'weekday' field\")\n            es, _, ee = entry[1:].partition('-')\n            _assert((entry[1:].isdigit() and 0 <= int(es) <= 7) or\n                    (_ and es.isdigit() and ee.isdigit() and 0 <= int(es) <= 7 and 0 <= int(ee) <= 7),\n                \"last <day> specifier must include a day number or range in the 'weekday' field, you entered %r\", entry)\n            return None, _end\n\n        # allow Sunday to be specified as weekday 7\n        if which == WEEK_OFFSET:\n            _end_limit = 7\n\n        increment = None\n        # increments\n        if '\/' in entry:\n            entry, increment = entry.split('\/')\n            increment = int(increment, 10)\n            _assert(increment > 0,\n                \"you can only use positive increment values, you provided %r\",\n                increment)\n            _assert(increment <= _end_limit,\n                    \"increment value must be less than %r, you provided %r\",\n                    _end_limit, increment)\n\n        # handle singles and ranges\n        good = _parse_piece(entry)\n\n        # change Sunday to weekday 0\n        if which == WEEK_OFFSET and 7 in good:\n            good.discard(7)\n            good.add(0)\n\n        return good, _end","label":0}
{"text":"func (vi *VoteInfo) VotesOnBlock(blockHash string) bool {\n\treturn vi.Validation.ForBlock(blockHash)\n}","label":0}
{"text":"@Override protected void handleEvents(final String EVENT_TYPE) {\n        super.handleEvents(EVENT_TYPE);\n        if (\"VISIBILITY\".equals(EVENT_TYPE)) {\n            chart.setSymbolsVisible(tile.getDataPointsVisible());\n        } else if (\"SERIES\".equals(EVENT_TYPE)) {\n            switch(tile.getChartType()) {\n                case AREA: chart.setChartType(SmoothedChart.ChartType.AREA); break;\n                default  : chart.setChartType(SmoothedChart.ChartType.LINE); break;\n            }\n            if (chart.getData().isEmpty()) {\n                chart.getData().setAll(tile.getTilesFXSeries().stream().map(tilesFxSeries -> tilesFxSeries.getSeries()).collect(Collectors.toList()));\n                tile.getTilesFXSeries()\n                    .stream()\n                    .forEach(series -> chart.setSeriesColor(series.getSeries(), series.getStroke(), series.getFill(), series.getSymbolBackground(), series.getLegendSymbolFill()));\n            }\n        }\n    }","label":0}
{"text":"def validate_cmap(val):\n    \"\"\"\"\"\"\n    from matplotlib.colors import Colormap\n    try:\n        return validate_str(val)\n    except ValueError:\n        if not isinstance(val, Colormap):\n            raise ValueError(\n                \"Could not find a valid colormap!\")\n        return val","label":0}
{"text":"public final void restore(List<DataSlice> dataSlices)\n  {\n    if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled())\n      SibTr.entry(tc, \"restore\", dataSlices);\n\n    try\n    {\n      DataSlice slice = dataSlices.get(0);\n\n      ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(slice.getBytes()));\n\n      \/\/ First object stored should always be the version integer.\n      restore(ois, ois.readInt());\n\n      ois.close();\n    }\n    catch (IOException e)\n    {\n      FFDCFilter.processException(\n        e,\n        \"com.ibm.ws.sib.processor.impl.store.itemstreams.SIMPItemStream.restore\",\n        \"1:372:1.54\",\n        this);\n\n      SibTr.exception(tc, e);\n\n      if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled())\n        SibTr.exit(tc, \"restore\", e);\n\n      throw new SIErrorException(e);\n    }\n\n    if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled())\n      SibTr.exit(tc, \"restore\");\n  }","label":0}
{"text":"public function prependEntities (array $prepended, array $where = []) : void\n    {\n        $all = $this->getAllEntities($where);\n        $index = 0;\n\n        \/\/ first prepend\n        foreach ($prepended as $prependedEntity)\n        {\n            $prependedEntity->setSortOrder($index);\n            ++$index;\n        }\n\n        \/\/ then sort the rest\n        foreach ($all as $entity)\n        {\n            if (\\in_array($entity, $prepended, true))\n            {\n                continue;\n            }\n\n            $entity->setSortOrder($index);\n            ++$index;\n        }\n    }","label":0}
{"text":"public function setInvoice($iInvoiceId)\n    {\n        \/\/  Validate\n        $oModel   = $this->oInvoiceModel;\n        $oInvoice = $oModel->getById(\n            $iInvoiceId,\n            ['expand' => $oModel::EXPAND_ALL]\n        );\n\n        if (empty($oInvoice)) {\n            throw new RequestException('Invalid invoice ID.');\n        }\n\n        $this->oInvoice = $oInvoice;\n        return $this;\n    }","label":0}
{"text":"public function addAddition($value)\n    {\n        $this->data->amount->subtotals->addition += $this->convertAmount($value);\n\n        return $this;\n    }","label":0}
{"text":"public function extend($source, $destination)\n    {\n        foreach($source as $key => $value)\n        {\n            $destination->{$key} = $value;\n        }\n\n        return $destination;\n    }","label":0}
{"text":"func MustAsset(name string) []byte {\n\ta, err := Asset(name)\n\tif (err != nil) {\n\t\tpanic(\"asset: Asset(\" + name + \"): \" + err.Error())\n\t}\n\n\treturn a\n}","label":0}
{"text":"func percentToString(f float64) string {\n\tfInt := int64(f * 1000)\n\tif fInt == 0 {\n\t\treturn \"0\"\n\t}\n\tif fInt == 1000 {\n\t\treturn \"100\"\n\t}\n\tif fInt < 0 || fInt > 1000 {\n\t\treturn \"INVALID\"\n\t}\n\tr := strconv.FormatInt(fInt, 10)\n\tr = strings.TrimRight(r, \"0\")\n\tfor len(r) < 2 {\n\t\tr = r + \"0\"\n\t}\n\treturn r\n}","label":0}
{"text":"public FeatureList selectByUserData(String key) {\n\t\tFeatureList list = new FeatureList();\n\t\tfor (FeatureI f : this) {\n\t\t\tif (f.userData().containsKey(key)) {\n\t\t\t\tlist.add(f);\n\t\t\t}\n\t\t}\n\t\treturn list;\n\t}","label":0}
{"text":"def power_off(self):\n        \"\"\"\"\"\"\n        try:\n            if self.send_get_command(self._urls.command_power_standby):\n                self._power = POWER_STANDBY\n                self._state = STATE_OFF\n                return True\n            else:\n                return False\n        except requests.exceptions.RequestException:\n            _LOGGER.error(\"Connection error: power off command not sent.\")\n            return False","label":0}
{"text":"@Override\r\n\tpublic void configLoaded(IConfig config, long sequence) {\r\n\t\tfinal String sourceMethod = \"configLoaded\"; \/\/$NON-NLS-1$\r\n\t\tfinal boolean isTraceLogging = log.isLoggable(Level.FINER);\r\n\t\tif (isTraceLogging) {\r\n\t\t\tlog.entering(sourceClass, sourceMethod, new Object[] { aggregator });\r\n\t\t}\r\n\t\t\/\/ update the config property\r\n\t\tisIncludeAMDPaths = TypeUtil.asBoolean(\r\n\t\t\t\tconfig.getProperty(CSSModuleBuilder.INCLUDEAMDPATHS_CONFIGPARAM, Boolean.class)\r\n\t\t);\r\n\t\tif (isTraceLogging) {\r\n\t\t\tlog.exiting(sourceClass, sourceMethod);\r\n\t\t}\r\n\t}","label":0}
{"text":"function ( relationships, geoNode, deformers ) {\n\n\t\t\tvar skeletons = deformers.skeletons;\n\t\t\tvar morphTargets = deformers.morphTargets;\n\n\t\t\tvar modelNodes = relationships.parents.map( function ( parent ) {\n\n\t\t\t\treturn fbxTree.Objects.Model[ parent.ID ];\n\n\t\t\t} );\n\n\t\t\t\/\/ don't create geometry if it is not associated with any models\n\t\t\tif ( modelNodes.length === 0 ) return;\n\n\t\t\tvar skeleton = relationships.children.reduce( function ( skeleton, child ) {\n\n\t\t\t\tif ( skeletons[ child.ID ] !== undefined ) skeleton = skeletons[ child.ID ];\n\n\t\t\t\treturn skeleton;\n\n\t\t\t}, null );\n\n\t\t\tvar morphTarget = relationships.children.reduce( function ( morphTarget, child ) {\n\n\t\t\t\tif ( morphTargets[ child.ID ] !== undefined ) morphTarget = morphTargets[ child.ID ];\n\n\t\t\t\treturn morphTarget;\n\n\t\t\t}, null );\n\n\t\t\t\/\/ TODO: if there is more than one model associated with the geometry, AND the models have\n\t\t\t\/\/ different geometric transforms, then this will cause problems\n\t\t\t\/\/ if ( modelNodes.length > 1 ) { }\n\n\t\t\t\/\/ For now just assume one model and get the preRotations from that\n\t\t\tvar modelNode = modelNodes[ 0 ];\n\n\t\t\tvar transformData = {};\n\n\t\t\tif ( 'RotationOrder' in modelNode ) transformData.eulerOrder = modelNode.RotationOrder.value;\n\t\t\tif ( 'GeometricTranslation' in modelNode ) transformData.translation = modelNode.GeometricTranslation.value;\n\t\t\tif ( 'GeometricRotation' in modelNode ) transformData.rotation = modelNode.GeometricRotation.value;\n\t\t\tif ( 'GeometricScaling' in modelNode ) transformData.scale = modelNode.GeometricScaling.value;\n\n\t\t\tvar transform = generateTransform( transformData );\n\n\t\t\treturn this.genGeometry( geoNode, skeleton, morphTarget, transform );\n\n\t\t}","label":0}
{"text":"function catchResults (resolve, reject, err, client, done) {\n\t\/\/debug.log('catchResults()...');\n\tif (err) {\n\t\treturn reject(err);\n\t}\n\tresolve({\"client\":client, \"done\":done});\n}","label":0}
{"text":"public static Object decode(Object value, Type type) {\n        if (value instanceof Integer) {\n            int i = (Integer) value;\n            switch (type.getTag()) {\n            case BOOLEAN:  return i != 0;\n            case CHAR:     return (char) i;\n            case BYTE:     return (byte) i;\n            case SHORT:    return (short) i;\n            }\n        }\n        return value;\n    }","label":0}
{"text":"protected void checkCacheControlHeaders(final Request request,\n                                                   final HttpServletResponse servletResponse,\n                                                   final FedoraResource resource,\n                                                   final HttpSession session) {\n        evaluateRequestPreconditions(request, servletResponse, resource, session, true);\n        addCacheControlHeaders(servletResponse, resource, session);\n    }","label":0}
{"text":"private void apply(HyphenationPattern pattern, int pos) {\r\n\r\n    int internalOffset = pos - 2;\r\n    HyphenationPatternPosition[] positions = pattern.getHyphenationPositions();\r\n    for (HyphenationPatternPosition hyphenationPosition : positions) {\r\n      int i = hyphenationPosition.index + internalOffset;\r\n      if ((i >= 0) && (i < this.rankings.length) && (hyphenationPosition.ranking > this.rankings[i])) {\r\n        this.rankings[i] = hyphenationPosition.ranking;\r\n      }\r\n    }\r\n  }","label":0}
{"text":"private void extractArticle(StringBuilder article) {\n        \/\/ remove all html tags before we unescape the text itself\n        \/\/ and possibly introduce non-html < characters\n        int startOfTextTag = article.indexOf(\"<text\");\n        int endOfStart  = article.indexOf(\">\", startOfTextTag);        \n        int closingTextTag = article.indexOf(\"<\/text\");\n        \/\/ Remove the ending content.  Some rare, malformatted articles do not\n        \/\/ contain the ending text tag, so just leave whatever was at the end of\n        \/\/ the text.\n        if (closingTextTag >= 0)\n            article.delete(closingTextTag, article.length());\n        \/\/ Then anything occurring before the text\n        article.delete(0, endOfStart + 1);\n    }","label":0}
{"text":"def to_jd(year, month, day):\n    ''''''\n    return (day + ceil(29.5 * (month - 1)) + (year - 1) * 354 + trunc((3 + (11 * year)) \/ 30) + EPOCH) - 1","label":0}
{"text":"def width_aware_splitlines(self, columns):\n        # type: (int) -> Iterator[FmtStr]\n        \n        if columns < 2:\n            raise ValueError(\"Column width %s is too narrow.\" % columns)\n        if wcswidth(self.s) == -1:\n            raise ValueError('bad values for width aware slicing')\n        return self._width_aware_splitlines(columns)","label":0}
{"text":"private void wireBdas(Collection<WebSphereBeanDeploymentArchive> wireFromBdas, Collection<WebSphereBeanDeploymentArchive> wireToBdas) {\n        for (WebSphereBeanDeploymentArchive wireFromBda : wireFromBdas) {\n            Collection<BeanDeploymentArchive> accessibleBdas = wireFromBda.getBeanDeploymentArchives();\n            for (WebSphereBeanDeploymentArchive wireToBda : wireToBdas) {\n                if ((wireToBda != wireFromBda) && ((accessibleBdas == null) || !accessibleBdas.contains(wireToBda))) {\n                    wireFromBda.addBeanDeploymentArchive(wireToBda);\n                }\n            }\n        }\n    }","label":0}
{"text":"func (s *serverConfig) ConfigDiff(t *serverConfig) string {\n\tswitch {\n\tcase t == nil:\n\t\treturn \"Given configuration is empty\"\n\tcase s.Credential != t.Credential:\n\t\treturn \"Credential configuration differs\"\n\tcase s.Region != t.Region:\n\t\treturn \"Region configuration differs\"\n\tcase s.StorageClass != t.StorageClass:\n\t\treturn \"StorageClass configuration differs\"\n\tcase !reflect.DeepEqual(s.Cache, t.Cache):\n\t\treturn \"Cache configuration differs\"\n\tcase !reflect.DeepEqual(s.Compression, t.Compression):\n\t\treturn \"Compression configuration differs\"\n\tcase !reflect.DeepEqual(s.Notify.AMQP, t.Notify.AMQP):\n\t\treturn \"AMQP Notification configuration differs\"\n\tcase !reflect.DeepEqual(s.Notify.NATS, t.Notify.NATS):\n\t\treturn \"NATS Notification configuration differs\"\n\tcase !reflect.DeepEqual(s.Notify.NSQ, t.Notify.NSQ):\n\t\treturn \"NSQ Notification configuration differs\"\n\tcase !reflect.DeepEqual(s.Notify.Elasticsearch, t.Notify.Elasticsearch):\n\t\treturn \"ElasticSearch Notification configuration differs\"\n\tcase !reflect.DeepEqual(s.Notify.Redis, t.Notify.Redis):\n\t\treturn \"Redis Notification configuration differs\"\n\tcase !reflect.DeepEqual(s.Notify.PostgreSQL, t.Notify.PostgreSQL):\n\t\treturn \"PostgreSQL Notification configuration differs\"\n\tcase !reflect.DeepEqual(s.Notify.Kafka, t.Notify.Kafka):\n\t\treturn \"Kafka Notification configuration differs\"\n\tcase !reflect.DeepEqual(s.Notify.Webhook, t.Notify.Webhook):\n\t\treturn \"Webhook Notification configuration differs\"\n\tcase !reflect.DeepEqual(s.Notify.MySQL, t.Notify.MySQL):\n\t\treturn \"MySQL Notification configuration differs\"\n\tcase !reflect.DeepEqual(s.Notify.MQTT, t.Notify.MQTT):\n\t\treturn \"MQTT Notification configuration differs\"\n\tcase !reflect.DeepEqual(s.Logger, t.Logger):\n\t\treturn \"Logger configuration differs\"\n\tcase !reflect.DeepEqual(s.KMS, t.KMS):\n\t\treturn \"KMS configuration differs\"\n\tcase reflect.DeepEqual(s, t):\n\t\treturn \"\"\n\tdefault:\n\t\t\/\/ This case will not happen unless this comparison\n\t\t\/\/ function has become stale.\n\t\treturn \"Configuration differs\"\n\t}\n}","label":0}
{"text":"func (c *UsersProfileSetCall) User(user string) *UsersProfileSetCall {\n\tc.user = user\n\treturn c\n}","label":0}
{"text":"def _extract(filename):\n        \n        random_string = '{:0d}'.format(randint(0, 10**6))\n        tmp = '\/tmp\/kytos-napp-' + Path(filename).stem + '-' + random_string\n        os.mkdir(tmp)\n        with tarfile.open(filename, 'r:xz') as tar:\n            tar.extractall(tmp)\n        return Path(tmp)","label":0}
{"text":"func (self *ConstraintGroup) AddConstraint(constraint ...*Constraint) {\n\tif self.constraints == nil {\n\t\tself.constraints = make([]*Constraint, 0)\n\t}\n\n\tself.constraints = append(self.constraints, constraint...)\n}","label":0}
{"text":"protected function fail($message = null, $validation = null)\n    {\n        $this->trigger('json-fail', $this, $message, $validation);\n        $this->trigger('response-fail', $this, $message, $validation);\n\n        $json = array('error' => true);\n\n        if($message) {\n            $json['message'] = $message;\n        }\n\n        if($validation) {\n            $json['validation'] = $validation;\n        }\n\n        $body = json_encode($json, JSON_PRETTY_PRINT);\n\n        $this->response\n            ->set('headers', 'Content-Type', 'text\/json')\n            ->set('body', $body);\n\n        return $body;\n    }","label":0}
{"text":"def run():\n    \"\"\"\"\"\"\n\n    # Grab server args\n    args = client_helper.grab_server_args()\n\n    # Start up workbench connection\n    workbench = zerorpc.Client(timeout=300, heartbeat=60)\n    workbench.connect('tcp:\/\/'+args['server']+':'+args['port'])\n\n    # Test out PEFile -> pe_deep_sim -> pe_jaccard_sim -> graph\n    data_path = os.path.join(os.path.dirname(os.path.realpath(__file__)),'..\/data\/pe\/bad')\n    bad_files = [os.path.join(data_path, child) for child in os.listdir(data_path)][:5]\n    data_path = os.path.join(os.path.dirname(os.path.realpath(__file__)),'..\/data\/pe\/good')\n    good_files = [os.path.join(data_path, child) for child in os.listdir(data_path)][:5]\n\n    # Clear any graph in the Neo4j database\n    workbench.clear_graph_db()\n\n    # First throw them into workbench and add them as nodes into the graph\n    all_md5s = add_it(workbench, bad_files, ['exe', 'bad']) + add_it(workbench, good_files, ['exe', 'good'])\n\n    # Make a sample set\n    sample_set = workbench.store_sample_set(all_md5s)\n\n    # Compute pe_features on all files of type pe, just pull back the sparse features\n    import_gen = workbench.set_work_request('pe_features', sample_set, ['md5', 'sparse_features.imported_symbols'])\n    imports = [{'md5': r['md5'], 'features': r['imported_symbols']} for r in import_gen]\n\n    # Compute pe_features on all files of type pe, just pull back the sparse features\n    warning_gen = workbench.set_work_request('pe_features', sample_set, ['md5', 'sparse_features.pe_warning_strings'])\n    warnings = [{'md5': r['md5'], 'features': r['pe_warning_strings']} for r in warning_gen]\n\n    # Compute strings on all files of type pe, just pull back the string_list\n    string_gen = workbench.set_work_request('strings', sample_set, ['md5', 'string_list'])\n    strings = [{'md5': r['md5'], 'features': r['string_list']} for r in string_gen]\n\n    # Compute pe_peid on all files of type pe, just pull back the match_list\n    # Fixme: commenting this out until we figure out why peid is SO slow\n    '''\n    peid_gen = workbench.set_work_request('pe_peid', sample_set, ['md5', 'match_list']})\n    peids = [{'md5': r['md5'], 'features': r['match_list']} for r in peid_gen]\n    '''\n\n    # Compute the Jaccard Index between imported systems and store as relationships\n    sims = jaccard_sims(imports)\n    for sim_info in sims:\n        workbench.add_rel(sim_info['source'], sim_info['target'], 'imports')\n\n    # Compute the Jaccard Index between warnings and store as relationships\n    sims = jaccard_sims(warnings)\n    for sim_info in sims:\n        workbench.add_rel(sim_info['source'], sim_info['target'], 'warnings')\n\n    # Compute the Jaccard Index between strings and store as relationships\n    sims = jaccard_sims(strings)\n    for sim_info in sims:\n        workbench.add_rel(sim_info['source'], sim_info['target'], 'strings')\n\n    # Compute the Jaccard Index between peids and store as relationships\n    # Fixme: commenting this out until we figure out why peid is SO slow\n    '''\n    sims = jaccard_sims(peids)\n    for sim_info in sims:\n        workbench.add_rel(sim_info['source'], sim_info['target'], 'peids')\n    '''\n\n    # Compute pe_deep_sim on all files of type pe\n    results = workbench.set_work_request('pe_deep_sim', sample_set)\n\n    # Store the ssdeep sims as relationships\n    for result in list(results):\n        for sim_info in result['sim_list']:\n            workbench.add_rel(result['md5'], sim_info['md5'], 'ssdeep')\n\n    # Let them know where they can get there graph\n    print 'All done: go to http:\/\/localhost:7474\/browser and execute this query: \"%s\"' % \\\n        ('match (n)-[r]-() return n,r')","label":0}
{"text":"def skesa_assemble(self):\n        \n        with progressbar(self.metadata) as bar:\n            for sample in bar:\n                # Initialise the assembly command\n                sample.commands.assemble = str()\n                try:\n                    if sample.general.trimmedcorrectedfastqfiles:\n                        # If the sample is a pure isolate, assemble it. Otherwise, run the pre-metagenome pipeline\n                        try:\n                            status = sample.run.Description\n                        except AttributeError:\n                            status = 'unknown'\n                        if status == 'metagenome':\n                            self.merge(sample)\n                        else:\n                            # Set the output directory\n                            sample.general.assembly_output = os.path.join(sample.general.outputdirectory,\n                                                                          'assembly_output')\n                            make_path(sample.general.assembly_output)\n                            sample.general.assemblyfile = os.path.join(sample.general.assembly_output,\n                                                                       '{name}_unfiltered.fasta'\n                                                                       .format(name=sample.name))\n                            sample.general.bestassemblyfile = os.path.join(sample.general.assembly_output,\n                                                                           '{name}.fasta'\n                                                                           .format(name=sample.name))\n                            fastqfiles = sample.general.trimmedcorrectedfastqfiles\n\n                            # Set the the forward fastq files\n                            sample.general.assemblyfastq = fastqfiles\n                            forward = fastqfiles[0]\n                            gz = True if '.gz' in forward else False\n                            # If there are two fastq files\n                            if len(fastqfiles) == 2:\n                                # Set the reverse fastq name https:\/\/github.com\/ncbi\/SKESA\/issues\/7\n                                sample.commands.assemble = 'skesa --fastq {fastqfiles} --cores {threads} ' \\\n                                                           '--use_paired_ends --vector_percent 1 ' \\\n                                                           '--contigs_out {contigs}'\\\n                                    .format(fastqfiles=','.join(fastqfiles),\n                                            threads=self.cpus,\n                                            contigs=sample.general.assemblyfile)\n                            # Same as above, but use single read settings for the assembler\n                            else:\n                                sample.commands.assemble = 'skesa --fastq {fastqfiles} --cores {threads} ' \\\n                                                           '--vector_percent 1 --contigs_out {contigs}'\\\n                                    .format(fastqfiles=','.join(fastqfiles),\n                                            threads=self.cpus,\n                                            contigs=sample.general.assemblyfile)\n                    # If there are no fastq files, populate the metadata appropriately\n                    else:\n                        sample.general.assembly_output = 'NA'\n                        sample.general.assemblyfastq = 'NA'\n                        sample.general.bestassemblyfile = 'NA'\n                except AttributeError:\n                    sample.general.assembly_output = 'NA'\n                    sample.general.assemblyfastq = 'NA'\n                    sample.general.trimmedcorrectedfastqfiles = 'NA'\n                    sample.general.bestassemblyfile = 'NA'\n                if sample.commands.assemble and not os.path.isfile(sample.general.assemblyfile):\n                    # Run the assembly\n                    out, err = run_subprocess(sample.commands.assemble)\n                    write_to_logfile(sample.commands.assemble,\n                                     sample.commands.assemble,\n                                     self.logfile,\n                                     sample.general.logout,\n                                     sample.general.logerr,\n                                     None,\n                                     None)\n                    write_to_logfile(out,\n                                     err,\n                                     self.logfile,\n                                     sample.general.logout,\n                                     sample.general.logerr,\n                                     None,\n                                     None)","label":0}
{"text":"def disassembler(co, lasti= -1):\n    \n\n    code = co.co_code\n    labels = dis.findlabels(code)\n    linestarts = dict(dis.findlinestarts(co))\n    i = 0\n    extended_arg = 0\n    lineno = 0\n    free = None\n    for i, op, oparg in _walk_ops(co):\n        if i in linestarts:\n            lineno = linestarts[i]\n        instr = Instruction(i=i, op=op, lineno=lineno)\n        instr.linestart = i in linestarts\n\n        if i == lasti:\n            instr.lasti = True\n        else:\n            instr.lasti = False\n\n        if i in labels:\n            instr.label = True\n        else:\n            instr.label = False\n\n        instr.oparg = oparg\n        extended_arg = 0\n        if op == dis.EXTENDED_ARG:\n            extended_arg = oparg * 65536\n        instr.extended_arg = extended_arg\n        if op >= dis.HAVE_ARGUMENT:\n            if op in dis.hasconst:\n                instr.arg = co.co_consts[oparg]\n            elif op in dis.hasname:\n                instr.arg = co.co_names[oparg]\n            elif op in dis.hasjrel:\n                instr.arg = i + oparg\n            elif op in dis.haslocal:\n                instr.arg = co.co_varnames[oparg]\n            elif op in dis.hascompare:\n                instr.arg = dis.cmp_op[oparg]\n            elif op in dis.hasfree:\n                if free is None:\n                    free = co.co_cellvars + co.co_freevars\n                instr.arg = free[oparg]\n\n        yield instr","label":0}
{"text":"@Override\n    public String toCanonicalForm() {\n        return new StringBuilder(groupId).append(SEPARATOR_COORDINATE).append(artifactId).toString();\n    }","label":0}
{"text":"func (s *CreateAliasOutput) SetAlias(v *Alias) *CreateAliasOutput {\n\ts.Alias = v\n\treturn s\n}","label":0}
{"text":"protected void visitChildren(ParentNode<? extends N> node) {\n    List<? extends N> children = node.getChildren();\n    int size = children.size();\n    for (int i = 0; i < size; i++) {\n      visit(children.get(i));\n    }\n  }","label":0}
{"text":"public function findByLocale(array $params = [])\n    {\n        return (empty($params)) ? $this->fetchAll() : $this->makeModel()->whereIn('code', array_values($params))->get();\n    }","label":0}
{"text":"func (c *remoteConn) ChannelConn(channel ssh.Channel) net.Conn {\n\treturn utils.NewChConn(c.sconn, channel)\n}","label":0}
{"text":"public static String compressHexString(String inString) {\r\n    String in = inString + \"^\"; \/\/ Add this onto the end since the last group of\r\n    \/\/ characters is always dropped... This carat\r\n    \/\/ will be dropped from the output string.\r\n    StringBuilder out = new StringBuilder();\r\n    char lastChar = ' ';\r\n    int count = 0;\r\n    for (int i = 0; i < in.length(); i++) {\r\n      char thisChar = in.charAt(i);\r\n      if (thisChar == lastChar && count < 35) { \/\/ Maybe we're starting a string\r\n        \/\/ of repeating chars...\r\n        count++;\r\n      } else {\r\n        if (count > 3) {\r\n          out.append('^');\r\n          out.append(lastChar);\r\n          out.append(\"abcdefghijklmnopqrstuvwxyz01234567890\".charAt(count));\r\n        } else {\r\n          for (int j = 0; j < count; j++)\r\n            out.append(lastChar);\r\n        }\r\n        count = 1;\r\n        lastChar = thisChar;\r\n      }\r\n    }\r\n    String outString = out.toString();\r\n    return outString;\r\n  }","label":0}
{"text":"public function select($query, $bindings = array(), $useReadPdo = true)\n\t{\n\t\treturn $this->run($query, $bindings, function($me, $query, $bindings) use ($useReadPdo)\n\t\t{\n\t\t\tif ($me->pretending()) return array();\n\n\t\t\t\/\/ For select statements, we'll simply execute the query and return an array\n\t\t\t\/\/ of the database result set. Each element in the array will be a single\n\t\t\t\/\/ row from the database table, and will either be an array or objects.\n\t\t\t$statement = $this->getPdoForSelect($useReadPdo)->prepare($query);\n\n\t\t\t$statement->execute($me->prepareBindings($bindings));\n\n\t\t\treturn $statement->fetchAll($me->getFetchMode());\n\t\t});\n\t}","label":0}
{"text":"public String removeAlias(String indice,String alias){\n\t\tString removeAlias = new StringBuilder().append(\"{\\\"actions\\\": [{\\\"remove\\\": {\\\"index\\\":\\\"\").append(indice).append(\"\\\",\\\"alias\\\": \\\"\").append(alias).append(\"\\\"}}]}\").toString();\n\t\treturn this.client.executeHttp(\"_aliases\",removeAlias,ClientUtil.HTTP_POST);\n\t}","label":0}
{"text":"public function render()\n    {\n        echo '<!DOCTYPE html>', $this->html->value($this->head)->value($this->body)->render();\n    }","label":0}
{"text":"func (scope *EvalScope) Locals() ([]*Variable, error) {\n\tif scope.Fn == nil {\n\t\treturn nil, errors.New(\"unable to find function context\")\n\t}\n\n\tvar vars []*Variable\n\tvar depths []int\n\tvarReader := reader.Variables(scope.BinInfo.dwarf, scope.Fn.offset, reader.ToRelAddr(scope.PC, scope.BinInfo.staticBase), scope.Line, true)\n\thasScopes := false\n\tfor varReader.Next() {\n\t\tentry := varReader.Entry()\n\t\tval, err := scope.extractVarInfoFromEntry(entry)\n\t\tif err != nil {\n\t\t\t\/\/ skip variables that we can't parse yet\n\t\t\tcontinue\n\t\t}\n\t\tvars = append(vars, val)\n\t\tdepth := varReader.Depth()\n\t\tif entry.Tag == dwarf.TagFormalParameter {\n\t\t\tif depth <= 1 {\n\t\t\t\tdepth = 0\n\t\t\t}\n\t\t\tisret, _ := entry.Val(dwarf.AttrVarParam).(bool)\n\t\t\tif isret {\n\t\t\t\tval.Flags |= VariableReturnArgument\n\t\t\t} else {\n\t\t\t\tval.Flags |= VariableArgument\n\t\t\t}\n\t\t}\n\t\tdepths = append(depths, depth)\n\t\tif depth > 1 {\n\t\t\thasScopes = true\n\t\t}\n\t}\n\n\tif err := varReader.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\tif len(vars) <= 0 {\n\t\treturn vars, nil\n\t}\n\n\tif hasScopes {\n\t\tsort.Stable(&variablesByDepth{vars, depths})\n\t}\n\n\tlvn := map[string]*Variable{} \/\/ lvn[n] is the last variable we saw named n\n\n\tfor i, v := range vars {\n\t\tif name := v.Name; len(name) > 1 && name[0] == '&' {\n\t\t\tv = v.maybeDereference()\n\t\t\tif v.Addr == 0 {\n\t\t\t\tv.Unreadable = fmt.Errorf(\"no address for escaped variable\")\n\t\t\t}\n\t\t\tv.Name = name[1:]\n\t\t\tv.Flags |= VariableEscaped\n\t\t\tvars[i] = v\n\t\t}\n\t\tif hasScopes {\n\t\t\tif otherv := lvn[v.Name]; otherv != nil {\n\t\t\t\totherv.Flags |= VariableShadowed\n\t\t\t}\n\t\t\tlvn[v.Name] = v\n\t\t}\n\t}\n\n\treturn vars, nil\n}","label":0}
{"text":"public void setEventTopics(java.util.Collection<EventTopic> eventTopics) {\n        if (eventTopics == null) {\n            this.eventTopics = null;\n            return;\n        }\n\n        this.eventTopics = new com.amazonaws.internal.SdkInternalList<EventTopic>(eventTopics);\n    }","label":0}
{"text":"public function columns(array $columns)\n    {\n        $this->collection = new Collection;\n\n        foreach ($columns as $key => $value) {\n            if (! is_a($value, Column::class)) {\n                if (is_array($value)) {\n                    $attributes = array_merge(\n                        [\n                            'name' => $value['name'] ?? $value['data'] ?? $key,\n                            'data' => $value['data'] ?? $key,\n                        ],\n                        $this->setTitle($key, $value)\n                    );\n                } else {\n                    $attributes = [\n                        'name' => $value,\n                        'data' => $value,\n                        'title' => $this->getQualifiedTitle($value),\n                    ];\n                }\n\n                $this->collection->push(new Column($attributes));\n            } else {\n                $this->collection->push($value);\n            }\n        }\n\n        return $this;\n    }","label":0}
{"text":"def validatePrivate(self, field, value) :\n        \"\"\"\"\"\"\n        if field not in self.arangoPrivates :\n            raise ValueError(\"%s is not a private field of collection %s\" % (field, self))\n\n        if field in self._fields :\n            self._fields[field].validate(value)\n        return True","label":0}
{"text":"func ErrorLogging(l *log.Logger) Decorator {\n\treturn func(ex Exchanger) Exchanger {\n\t\treturn Func(func(m *dns.Msg, a string) (r *dns.Msg, rtt time.Duration, err error) {\n\t\t\tdefer func() {\n\t\t\t\tif err != nil {\n\t\t\t\t\tl.Printf(\"%v: exchanging %#v with %q\", err, m, a)\n\t\t\t\t}\n\t\t\t}()\n\t\t\treturn ex.Exchange(m, a)\n\t\t})\n\t}\n}","label":0}
{"text":"func (s *CreateJobInput) SetDocument(v string) *CreateJobInput {\n\ts.Document = &v\n\treturn s\n}","label":0}
{"text":"func (s *CreateEventSubscriptionInput) Validate() error {\n\tinvalidParams := request.ErrInvalidParams{Context: \"CreateEventSubscriptionInput\"}\n\tif s.SnsTopicArn == nil {\n\t\tinvalidParams.Add(request.NewErrParamRequired(\"SnsTopicArn\"))\n\t}\n\tif s.SubscriptionName == nil {\n\t\tinvalidParams.Add(request.NewErrParamRequired(\"SubscriptionName\"))\n\t}\n\n\tif invalidParams.Len() > 0 {\n\t\treturn invalidParams\n\t}\n\treturn nil\n}","label":0}
{"text":"public ArrayList<OvhCity> eligibility_cities_GET(String zipCode) throws IOException {\n\t\tString qPath = \"\/xdsl\/eligibility\/cities\";\n\t\tStringBuilder sb = path(qPath);\n\t\tquery(sb, \"zipCode\", zipCode);\n\t\tString resp = exec(qPath, \"GET\", sb.toString(), null);\n\t\treturn convertTo(resp, t2);\n\t}","label":0}
{"text":"public function loadData()\n    {\n        try {\n            LoggerFactory::$file = $this->config['logFile'];\n            LoggerFactory::$level = $this->config['logLevel'];\n            $data = $this->getDataSync();\n            $data->setDefaults();\n            $data->cacheDir = $this->config['cacheDir'];\n            $data->cacheOnly = $this->config['cacheOnly'];\n            $data->dataExpire = $this->config['dataExpire'];\n            $data->refreshInterval = $this->config['dataRefresh'];\n            $data->forceRefresh = $this->config['forceDataRefresh'];\n\n            \/\/ use statussync for non-cache mode\n            if (!$data->cacheOnly) {\n                $status = $this->prepareSync();\n                $data->registerUrlFromStatus($status, 'dataUrls');\n            }\n\n            $this->results = $data->loadData();\n        } catch (\\Exception $e) {\n            $this->exceptionStack[] = $e;\n\n            return false;\n        }\n\n        return true;\n    }","label":0}
{"text":"def assemble(input_):\n    \n    global MEMORY\n\n    if MEMORY is None:\n        MEMORY = Memory()\n\n    parser.parse(input_, lexer=LEXER, debug=OPTIONS.Debug.value > 2)\n    if len(MEMORY.scopes):\n        error(MEMORY.scopes[-1], 'Missing ENDP to close this scope')\n\n    return gl.has_errors","label":0}
{"text":"public function getMediaBuilder($formMapper)\n    {\n        $admin_pool = $this->getContainer()->get('sonata.admin.pool');\n\n        $admin = $admin_pool->getAdminByAdminCode('compo_core.admin.settings');\n        \/\/ simulate an association ...\n        $fieldDescription = $this->getMediaAdmin()->getModelManager()->getNewFieldDescriptionInstance(\n            $this->mediaAdmin->getClass(),\n            'media',\n            [\n                'translation_domain' => 'SonataMediaBundle',\n            ]\n        );\n        $fieldDescription->setAssociationAdmin($this->getMediaAdmin());\n        $fieldDescription->setAdmin($admin);\n        $fieldDescription->setOption('edit', 'list');\n        $fieldDescription->setAssociationMapping(\n            [\n                'fieldName' => 'media',\n                'type' => ClassMetadataInfo::MANY_TO_ONE,\n            ]\n        );\n\n        return $formMapper->add(\n            'mediaId',\n            'sonata_type_model_list',\n            [\n                'sonata_field_description' => $fieldDescription,\n                'class' => $this->getMediaAdmin()->getClass(),\n                'model_manager' => $this->getMediaAdmin()->getModelManager(),\n                'label' => 'form.label_media',\n                'required' => false,\n            ]\n        );\n    }","label":0}
{"text":"func (m *Match) NotEmpty() *Match {\n\tif len(m.submatches) == 0 {\n\t\tm.chain.fail(\"expected non-zero submatches\")\n\t}\n\treturn m\n}","label":0}
{"text":"public static function groupByType(array $objects)\n    {\n        $perType = [];\n        foreach ($objects as $object) {\n            $type = $object->getType();\n            if (!isset($perType[$type])) {\n                $perType[$type] = [];\n            }\n            $perType[$type][] = $object;\n        }\n        return $perType;\n    }","label":0}
{"text":"@Override\n    public StreamT<W,T> takeUntil(final Predicate<? super T> p) {\n\n        return (StreamT<W,T>) FoldableTransformerSeq.super.takeUntil(p);\n    }","label":0}
{"text":"protected final void broadcastProgress(final long uploadedBytes, final long totalBytes) {\n\n        long currentTime = System.currentTimeMillis();\n        if (uploadedBytes < totalBytes && currentTime < lastProgressNotificationTime + UploadService.PROGRESS_REPORT_INTERVAL) {\n            return;\n        }\n\n        setLastProgressNotificationTime(currentTime);\n\n        Logger.debug(LOG_TAG, \"Broadcasting upload progress for \" + params.id\n                + \": \" + uploadedBytes + \" bytes of \" + totalBytes);\n\n        final UploadInfo uploadInfo = new UploadInfo(params.id, startTime, uploadedBytes,\n                totalBytes, (attempts - 1),\n                successfullyUploadedFiles,\n                pathStringListFrom(params.files));\n\n        BroadcastData data = new BroadcastData()\n                .setStatus(BroadcastData.Status.IN_PROGRESS)\n                .setUploadInfo(uploadInfo);\n\n        final UploadStatusDelegate delegate = UploadService.getUploadStatusDelegate(params.id);\n        if (delegate != null) {\n            mainThreadHandler.post(new Runnable() {\n                @Override\n                public void run() {\n                    delegate.onProgress(service, uploadInfo);\n                }\n            });\n        } else {\n            service.sendBroadcast(data.getIntent());\n        }\n\n        updateNotificationProgress(uploadInfo);\n    }","label":0}
{"text":"protected function getDisabledCommands() {\n    $disabled_commands_config = $this->getConfigValue('disable-targets');\n    if ($disabled_commands_config) {\n      $disabled_commands = ArrayManipulator::flattenMultidimensionalArray($disabled_commands_config, ':');\n      return $disabled_commands;\n    }\n    return [];\n  }","label":0}
{"text":"public function setPassword($password, $algorithm = PasswordFile::ALG_MD5, array $options = null)\n    {\n        $this->hash = Crypt::hash($password, $algorithm, $options);\n    }","label":0}
{"text":"public function checksum()\n    {\n        if (null === $this->checksum) {\n            $this->checksum = md5(json_encode($this->files) . $this->version);\n        }\n\n        return $this->checksum;\n    }","label":0}
{"text":"func (c *ServerConn) Quit() error {\n\tc.conn.Cmd(\"QUIT\")\n\treturn c.conn.Close()\n}","label":0}
{"text":"public function remove($owner, $type = 'default')\n    {\n        $owner_id = spl_object_id($owner);\n\n        if (!isset($this->_pool[$owner_id])) {\n            return $this;\n        }\n\n        foreach ($type === null ? array_keys($this->_pool[$owner_id]) : [$type] as $current) {\n            $queue = $this->_pool[$owner_id][$current];\n\n            while (!$queue->isEmpty()) {\n                $instance = $queue->pop();\n                unset($instance);\n            }\n\n            unset($this->_pool[$owner_id][$current]);\n        }\n\n        if (count($this->_pool[$owner_id]) === 0) {\n            unset($this->_pool[$owner_id]);\n        }\n\n        return $this;\n    }","label":0}
{"text":"public function editBtn($type = null, $id = null, $class=\"btn-outline-secondary\")\n    {\n        if (Gate::allows('cms', Auth::user())) {\n            if (!is_null($id)) {\n                return '<a href=\"'.url($this->backendRoute.'\/'.$type.'\/'.$id.'\/edit').'\" class=\"btn btn-sm '.$class.'\"><span class=\"fa fa-edit\"><\/span> Edit<\/a>';\n            } else {\n                return '<a href=\"'.url($this->backendRoute.'\/'.$type).'\" class=\"btn btn-sm '.$class.'\"><span class=\"fa fa-edit\"><\/span> Edit<\/a>';\n            }\n        }\n\n        return '';\n    }","label":0}
{"text":"public function getControllerName()\n    {\n        $controller = Str::studly($this->getEntities()).'Controller';\n\n        if ($this->console->option('prefix')) {\n            $controller = Str::studly($this->getPrefix('\/')).$controller;\n        }\n\n        return str_replace('\/', '\\\\', $controller);\n    }","label":0}
{"text":"public function dropdown($commands, $config = array())\n    {\n        $config['commands'] = $commands;\n\n        if (!isset($config['icon'])) {\n            $config['icon'] = 'cog';\n        }\n\n        return $this->_render('dropdown', $config);\n    }","label":0}
{"text":"public <V> V executeAndFetchFirst(Class<V> returnType) {\n        Object o = executeScalar();\n        if (null == o) {\n            return null;\n        }\n        return convert(o, returnType);\n    }","label":0}
{"text":"public function updateRelativeLink(&$base, &$action)\n    {\n        \/\/ Don't inject locale to subpages\n        if ($this->owner->ParentID && SiteTree::config()->get('nested_urls')) {\n            return;\n        }\n\n        \/\/ Get appropriate locale for this record\n        $localeObj = $this->getRecordLocale();\n        if (!$localeObj) {\n            return;\n        }\n\n        \/\/ For blank\/temp pages such as Security controller fallback to querystring\n        if (!$this->owner->exists()) {\n            $base = Controller::join_links(\n                $base,\n                '?' . FluentDirectorExtension::config()->get('query_param') . '=' . urlencode($localeObj->Locale)\n            );\n            return;\n        }\n\n        \/\/ Check if this locale is the default for its own domain\n        if ($localeObj->getIsDefault()) {\n            \/\/ For home page in the default locale, do not alter home URL\n            if ($base === null || $base === RootURLController::get_homepage_link()) {\n                return;\n            }\n\n            \/\/ If default locale shouldn't have prefix, then don't add prefix\n            if (FluentDirectorExtension::config()->get('disable_default_prefix')) {\n                return;\n            }\n\n            \/\/ For all pages on a domain where there is only a single locale,\n            \/\/ then the domain itself is sufficient to distinguish that domain\n            \/\/ See https:\/\/github.com\/tractorcow\/silverstripe-fluent\/issues\/75\n            if ($localeObj->getIsOnlyLocale()) {\n                return;\n            }\n        }\n\n        \/\/ Simply join locale root with base relative URL\n        $base = Controller::join_links($localeObj->getURLSegment(), $base);\n    }","label":0}
{"text":"public IOProvider.Readable getIOProviderFrom(String name, AbstractClassLoader first) {\r\n\t\tif (name.length() == 0) return null;\r\n\t\tif (name.charAt(0) == '\/') name = name.substring(1);\r\n\t\tIOProvider.Readable provider = null;\r\n    \t\/\/ try with the first one\r\n    \tif (first != null)\r\n   \t\t\tprovider = first.get(name);\r\n    \t\/\/ then, try on other libraries\r\n    \tif (provider == null) {\r\n        \tfor (int i = 0; i < libs.size(); i++) {\r\n        \t\tAbstractClassLoader cl = libs.get(i);\r\n        \t\tif (cl == first) continue;\r\n       \t\t\tprovider = cl.get(name);\r\n        \t\tif (provider != null) break;\r\n        \t}\r\n        }\r\n        if (provider != null)\r\n        \treturn provider;\r\n       \t\/\/ then try on the core one\r\n        return coreIOProvider.get(name);\r\n\t}","label":0}
{"text":"def dereference(self, data, host=None):\n        \"\"\"\"\"\"\n        return self.deep_decode(self.deep_encode(data, host), deref=True)","label":0}
{"text":"public function getServersAsync($org_id = null, $name = null)\n    {\n        return $this->getServersAsyncWithHttpInfo($org_id, $name)\n            ->then(\n                function ($response) {\n                    return $response[0];\n                }\n            );\n    }","label":0}
{"text":"function read(workorderId) {\n  var donePromise = mediator.promise(workorderSyncSubscribers.getTopic(CONSTANTS.TOPICS.READ, CONSTANTS.DONE_PREFIX, workorderId));\n\n  var errorPromise = mediator.promise(workorderSyncSubscribers.getTopic(CONSTANTS.TOPICS.READ, CONSTANTS.ERROR_PREFIX, workorderId));\n\n  mediator.publish(workorderSyncSubscribers.getTopic(CONSTANTS.TOPICS.READ), {id: workorderId, topicUid: workorderId});\n\n  return getTopicPromises(donePromise, errorPromise);\n}","label":0}
{"text":"public function refreshEntities()\n    {\n\n        $metadatas = $this->clearCacheAndProxies();\n\n        \/\/ Finally, we update the schema\n        $tool = new SchemaTool($this->entityManager);\n        $tool->updateSchema($metadatas, true);\n    }","label":0}
{"text":"func (s *UserPoolType) SetStatus(v string) *UserPoolType {\n\ts.Status = &v\n\treturn s\n}","label":0}
{"text":"function ModelType(name, prefix, endp) {\n  this.name = name;\n  this.prefix = prefix;\n  this.endp = endp;\n}","label":0}
{"text":"public function setClause(string $name, ClauseStrategy $query)\n    {\n        $this->clauses[$name] = $query;\n\n        return $this;\n    }","label":0}
{"text":"func (wsc *wsConnection) WriteRPCResponse(resp types.RPCResponse) {\n\tselect {\n\tcase <-wsc.Quit():\n\t\treturn\n\tcase wsc.writeChan <- resp:\n\t}\n}","label":0}
{"text":"protected function setDefaults()\n    {\n        $this->setBankLeftAttr(3, 8, 50, 4);\n        $this->setBankRightAttr(66, 8, 50, 4);\n        $this->setRecipientLeftAttr(3, 23, 50, 4);\n        $this->setRecipientRightAttr(66, 23, 50, 4);\n        $this->setAccountLeftAttr(27, 43, 30, 4);\n        $this->setAccountRightAttr(90, 43, 30, 4);\n        $this->setAmountFrancsLeftAttr(5, 50.5, 35, 4);\n        $this->setAmountFrancsRightAttr(66, 50.5, 35, 4);\n        $this->setAmountCentsLeftAttr(50, 50.5, 6, 4);\n        $this->setAmountCentsRightAttr(111, 50.5, 6, 4);\n        $this->setPayerLeftAttr(3, 65, 50, 4);\n        $this->setPayerRightAttr(125, 48, 50, 4);\n\n        return $this;\n    }","label":0}
{"text":"public function GetShopInfo($sShopInfoName)\n    {\n        $oInfo = TdbShopSystemInfo::GetNewInstance();\n        if (!$oInfo->LoadFromFields(array('shop_id' => $this->id, 'name_internal' => $sShopInfoName))) {\n            $oInfo = null;\n        }\n\n        return $oInfo;\n    }","label":0}
{"text":"@Override\n\tprotected void engineInit(KeyStore keyStore) throws KeyStoreException {\n\t\ttry {\n\t\t\tthis\n\t\t\t\t\t.engineInit(new CertPathTrustManagerParameters(\n\t\t\t\t\t\t\tnew X509ProxyCertPathParameters(keyStore, null,\n\t\t\t\t\t\t\t\t\tnull, false)));\n\t\t} catch (InvalidAlgorithmParameterException e) {\n\t\t\tthrow new KeyStoreException(e);\n\t\t}\n\t}","label":0}
{"text":"private List<Map<String, Result<R>>> handleRetcodeBatchingHack(List<Map<String, Result<R>>> list, Type xor) {\n        return list.stream().map(m -> {\n            return m.entrySet().stream().collect(Collectors.toMap(e -> e.getKey(), e -> {\n                return e.getValue().fold(err -> {\n                    return err.<Result<R>>fold(\n                            Result::error,\n                            Result::error,\n                            parsingError -> {\n                                if (parsingError.getJson().isJsonObject()) {\n                                    JsonObject jsonObject = parsingError.getJson().getAsJsonObject();\n                                    if (jsonObject.has(\"retcode\")) {\n                                        jsonObject.remove(\"retcode\");\n                                        return JsonParser.GSON.fromJson(jsonObject, xor);\n                                    } else {\n                                        return Result.error(parsingError);\n                                    }\n                                } else {\n                                    return Result.error(parsingError);\n                                }\n                            },\n                            Result::error\n                    );\n                }, Result::success);\n            }));\n        }).collect(Collectors.toList());\n    }","label":0}
{"text":"private static function terminate(): Promise\n    {\n        if (self::$onClose === null) {\n            return Promise\\any([]);\n        }\n\n        if (self::$signalWatchers) {\n            foreach (self::$signalWatchers as $watcher) {\n                Loop::cancel($watcher);\n            }\n        }\n\n        $onClose = self::$onClose;\n        self::$onClose = null;\n\n        $promises = [];\n        foreach ($onClose as $callable) {\n            $promises[] = call($callable);\n        }\n\n        return Promise\\any($promises);\n    }","label":0}
{"text":"private function prepareListResponse(DoctrineListBuilder $listBuilder, $locale)\n    {\n        $listResponse = $listBuilder->execute();\n        $listResponse = $this->addAvatars($listResponse, $locale);\n\n        $ids = $listBuilder->getIds();\n        if (null !== $ids) {\n            $comparator = $this->getComparator();\n            \/\/ the @ is necessary in case of a PHP bug https:\/\/bugs.php.net\/bug.php?id=50688\n            @usort(\n                $listResponse,\n                function($a, $b) use ($comparator, $ids) {\n                    return $comparator->compare($a['id'], $b['id'], $ids);\n                }\n            );\n        }\n\n        return $listResponse;\n    }","label":0}
{"text":"func (s *GetFindingsInput) Validate() error {\n\tinvalidParams := request.ErrInvalidParams{Context: \"GetFindingsInput\"}\n\tif s.DetectorId == nil {\n\t\tinvalidParams.Add(request.NewErrParamRequired(\"DetectorId\"))\n\t}\n\tif s.DetectorId != nil && len(*s.DetectorId) < 1 {\n\t\tinvalidParams.Add(request.NewErrParamMinLen(\"DetectorId\", 1))\n\t}\n\tif s.FindingIds == nil {\n\t\tinvalidParams.Add(request.NewErrParamRequired(\"FindingIds\"))\n\t}\n\n\tif invalidParams.Len() > 0 {\n\t\treturn invalidParams\n\t}\n\treturn nil\n}","label":0}
{"text":"protected function getRegisteredPaymentMethodMapper($paymentMethodName)\n    {\n        $paymentMethodMapper = $this->findPaymentMethodMapperByName($paymentMethodName);\n        if ($paymentMethodMapper === null) {\n            throw new InvalidPaymentMethodException(\n                sprintf('No registered payment method mapper found for given method name %s', $paymentMethodName)\n            );\n        }\n\n        return $paymentMethodMapper;\n    }","label":0}
{"text":"def _triggering_ctx(self):\n        \n        if self._is_triggering:\n            raise RuntimeError('{} cannot be triggered while it is being handled'.format(self))\n        self._is_triggering = True\n        try:\n            yield self\n        finally:\n            self._is_triggering = False","label":0}
{"text":"public function read(string $file): string\n    {\n        $destFile = tempnam(sys_get_temp_dir(), 'pdf_to_text_');\n\n        $command = sprintf(\n            'pdftotext -layout %s %s',\n            escapeshellarg(realpath($file)),\n            escapeshellarg($destFile)\n        );\n\n        $return = 0;\n        $output = system($command, $return);\n\n        $content = file_get_contents($destFile);\n        unlink($destFile);\n\n        switch ($return) {\n            case 0:\n                return $content;\n\n            default:\n                throw new \\Exception($command . PHP_EOL . $output, $return);\n        }\n    }","label":0}
{"text":"public function addSegment($segment, $other = null){\n\t\tif(!$segment instanceof Segment){\n\t\t\t$segment = new Segment($segment);\n\t\t}\n\t\tif($this->getIndexOf($segment->getName())) throw new \\Exception('Section with this name already exists');\n\t\tif($other){\n\t\t\tif(($index = $this->getIndexOf($other))===false) throw new \\Exception('Segment not found');\n\t\t\tarray_splice($this->segments, $index, 0, [$segment]);\n\t\t}else{\n\t\t\t$this->segments[] = $segment;\n\t\t}\n\t\treturn $segment;\n\t}","label":0}
{"text":"def parse(binary, **params):\n    \"\"\"\"\"\"\n    encoding = params.get('charset', 'UTF-8')\n    return json.loads(binary, encoding=encoding)","label":0}
{"text":"public function set($name, $value = null)\n    {\n        if (is_array($name)) {\n            foreach ($name as $innerName => $innerValue) {\n                $this->replace($innerName, $this->formatValue($innerValue));\n            }\n        } else {\n            $this->replace($name, $this->formatValue($value));\n        }\n\n        \/\/ return is for chaining\n        return $this;\n    }","label":0}
{"text":"protected function createErrorPageInDebugMode(\\Throwable $e){\n        $response   = $this->createErrorPage($e);\n        $context    = [\n            \"errors\"    => [],\n        ];\n\n        do{\n            $context[\"errors\"][]    = $this->analysisError($e);\n        }while(($e = $e->getPrevious()) !== null);\n\n        $response->getBody()->write($this->twig->render(\"error.twig\", $context));\n\n        return $response;\n    }","label":0}
{"text":"public function store(string $key, $object)\n    {\n        if (isset($this->aliases[$key])) {\n            $key = $this->aliases[$key];\n        }\n\n        $this->store[$key] = $object;\n    }","label":0}
{"text":"def _supported_rule(protocol, ethertype):\n        \"\"\"\"\"\"\n        if not protocol or protocol not in utils.SUPPORTED_SG_PROTOCOLS:\n            return False\n\n        if ethertype != n_const.IPv4:\n            return False\n\n        return True","label":0}
{"text":"def stem(self, word):\n\n        \n        word = word.lower()\n\n        if len(word) <= 2:\n            return word\n\n        elif word in self.__special_words:\n            return self.__special_words[word]\n\n        # Map the different apostrophe characters to a single consistent one\n        word = (word.replace(\"\\u2019\", \"\\x27\")\n                    .replace(\"\\u2018\", \"\\x27\")\n                    .replace(\"\\u201B\", \"\\x27\"))\n\n        if word.startswith(\"\\x27\"):\n            word = word[1:]\n\n        if word.startswith(\"y\"):\n            word = \"\".join((\"Y\", word[1:]))\n\n        for i in range(1, len(word)):\n            if word[i-1] in self.__vowels and word[i] == \"y\":\n                word = \"\".join((word[:i], \"Y\", word[i+1:]))\n\n        step1a_vowel_found = False\n        step1b_vowel_found = False\n\n        r1 = \"\"\n        r2 = \"\"\n\n        if word.startswith((\"gener\", \"commun\", \"arsen\")):\n            if word.startswith((\"gener\", \"arsen\")):\n                r1 = word[5:]\n            else:\n                r1 = word[6:]\n\n            for i in range(1, len(r1)):\n                if r1[i] not in self.__vowels and r1[i-1] in self.__vowels:\n                    r2 = r1[i+1:]\n                    break\n        else:\n            r1, r2 = self._r1r2_standard(word, self.__vowels)\n\n\n        # STEP 0\n        for suffix in self.__step0_suffixes:\n            if word.endswith(suffix):\n                word = word[:-len(suffix)]\n                r1 = r1[:-len(suffix)]\n                r2 = r2[:-len(suffix)]\n                break\n\n        # STEP 1a\n        for suffix in self.__step1a_suffixes:\n            if word.endswith(suffix):\n\n                if suffix == \"sses\":\n                    word = word[:-2]\n                    r1 = r1[:-2]\n                    r2 = r2[:-2]\n\n                elif suffix in (\"ied\", \"ies\"):\n                    if len(word[:-len(suffix)]) > 1:\n                        word = word[:-2]\n                        r1 = r1[:-2]\n                        r2 = r2[:-2]\n                    else:\n                        word = word[:-1]\n                        r1 = r1[:-1]\n                        r2 = r2[:-1]\n\n                elif suffix == \"s\":\n                    for letter in word[:-2]:\n                        if letter in self.__vowels:\n                            step1a_vowel_found = True\n                            break\n\n                    if step1a_vowel_found:\n                        word = word[:-1]\n                        r1 = r1[:-1]\n                        r2 = r2[:-1]\n                break\n\n        # STEP 1b\n        for suffix in self.__step1b_suffixes:\n            if word.endswith(suffix):\n                if suffix in (\"eed\", \"eedly\"):\n\n                    if r1.endswith(suffix):\n                        word = \"\".join((word[:-len(suffix)], \"ee\"))\n\n                        if len(r1) >= len(suffix):\n                            r1 = \"\".join((r1[:-len(suffix)], \"ee\"))\n                        else:\n                            r1 = \"\"\n\n                        if len(r2) >= len(suffix):\n                            r2 = \"\".join((r2[:-len(suffix)], \"ee\"))\n                        else:\n                            r2 = \"\"\n                else:\n                    for letter in word[:-len(suffix)]:\n                        if letter in self.__vowels:\n                            step1b_vowel_found = True\n                            break\n\n                    if step1b_vowel_found:\n                        word = word[:-len(suffix)]\n                        r1 = r1[:-len(suffix)]\n                        r2 = r2[:-len(suffix)]\n\n                        if word.endswith((\"at\", \"bl\", \"iz\")):\n                            word = \"\".join((word, \"e\"))\n                            r1 = \"\".join((r1, \"e\"))\n\n                            if len(word) > 5 or len(r1) >=3:\n                                r2 = \"\".join((r2, \"e\"))\n\n                        elif word.endswith(self.__double_consonants):\n                            word = word[:-1]\n                            r1 = r1[:-1]\n                            r2 = r2[:-1]\n\n                        elif ((r1 == \"\" and len(word) >= 3 and\n                               word[-1] not in self.__vowels and\n                               word[-1] not in \"wxY\" and\n                               word[-2] in self.__vowels and\n                               word[-3] not in self.__vowels)\n                              or\n                              (r1 == \"\" and len(word) == 2 and\n                               word[0] in self.__vowels and\n                               word[1] not in self.__vowels)):\n\n                            word = \"\".join((word, \"e\"))\n\n                            if len(r1) > 0:\n                                r1 = \"\".join((r1, \"e\"))\n\n                            if len(r2) > 0:\n                                r2 = \"\".join((r2, \"e\"))\n                break\n\n        # STEP 1c\n        if len(word) > 2 and word[-1] in \"yY\" and word[-2] not in self.__vowels:\n            word = \"\".join((word[:-1], \"i\"))\n            if len(r1) >= 1:\n                r1 = \"\".join((r1[:-1], \"i\"))\n            else:\n                r1 = \"\"\n\n            if len(r2) >= 1:\n                r2 = \"\".join((r2[:-1], \"i\"))\n            else:\n                r2 = \"\"\n\n        # STEP 2\n        for suffix in self.__step2_suffixes:\n            if word.endswith(suffix):\n                if r1.endswith(suffix):\n                    if suffix == \"tional\":\n                        word = word[:-2]\n                        r1 = r1[:-2]\n                        r2 = r2[:-2]\n\n                    elif suffix in (\"enci\", \"anci\", \"abli\"):\n                        word = \"\".join((word[:-1], \"e\"))\n\n                        if len(r1) >= 1:\n                            r1 = \"\".join((r1[:-1], \"e\"))\n                        else:\n                            r1 = \"\"\n\n                        if len(r2) >= 1:\n                            r2 = \"\".join((r2[:-1], \"e\"))\n                        else:\n                            r2 = \"\"\n\n                    elif suffix == \"entli\":\n                        word = word[:-2]\n                        r1 = r1[:-2]\n                        r2 = r2[:-2]\n\n                    elif suffix in (\"izer\", \"ization\"):\n                        word = \"\".join((word[:-len(suffix)], \"ize\"))\n\n                        if len(r1) >= len(suffix):\n                            r1 = \"\".join((r1[:-len(suffix)], \"ize\"))\n                        else:\n                            r1 = \"\"\n\n                        if len(r2) >= len(suffix):\n                            r2 = \"\".join((r2[:-len(suffix)], \"ize\"))\n                        else:\n                            r2 = \"\"\n\n                    elif suffix in (\"ational\", \"ation\", \"ator\"):\n                        word = \"\".join((word[:-len(suffix)], \"ate\"))\n\n                        if len(r1) >= len(suffix):\n                            r1 = \"\".join((r1[:-len(suffix)], \"ate\"))\n                        else:\n                            r1 = \"\"\n\n                        if len(r2) >= len(suffix):\n                            r2 = \"\".join((r2[:-len(suffix)], \"ate\"))\n                        else:\n                            r2 = \"e\"\n\n                    elif suffix in (\"alism\", \"aliti\", \"alli\"):\n                        word = \"\".join((word[:-len(suffix)], \"al\"))\n\n                        if len(r1) >= len(suffix):\n                            r1 = \"\".join((r1[:-len(suffix)], \"al\"))\n                        else:\n                            r1 = \"\"\n\n                        if len(r2) >= len(suffix):\n                            r2 = \"\".join((r2[:-len(suffix)], \"al\"))\n                        else:\n                            r2 = \"\"\n\n                    elif suffix == \"fulness\":\n                        word = word[:-4]\n                        r1 = r1[:-4]\n                        r2 = r2[:-4]\n\n                    elif suffix in (\"ousli\", \"ousness\"):\n                        word = \"\".join((word[:-len(suffix)], \"ous\"))\n\n                        if len(r1) >= len(suffix):\n                            r1 = \"\".join((r1[:-len(suffix)], \"ous\"))\n                        else:\n                            r1 = \"\"\n\n                        if len(r2) >= len(suffix):\n                            r2 = \"\".join((r2[:-len(suffix)], \"ous\"))\n                        else:\n                            r2 = \"\"\n\n                    elif suffix in (\"iveness\", \"iviti\"):\n                        word = \"\".join((word[:-len(suffix)], \"ive\"))\n\n                        if len(r1) >= len(suffix):\n                            r1 = \"\".join((r1[:-len(suffix)], \"ive\"))\n                        else:\n                            r1 = \"\"\n\n                        if len(r2) >= len(suffix):\n                            r2 = \"\".join((r2[:-len(suffix)], \"ive\"))\n                        else:\n                            r2 = \"e\"\n\n                    elif suffix in (\"biliti\", \"bli\"):\n                        word = \"\".join((word[:-len(suffix)], \"ble\"))\n\n                        if len(r1) >= len(suffix):\n                            r1 = \"\".join((r1[:-len(suffix)], \"ble\"))\n                        else:\n                            r1 = \"\"\n\n                        if len(r2) >= len(suffix):\n                            r2 = \"\".join((r2[:-len(suffix)], \"ble\"))\n                        else:\n                            r2 = \"\"\n\n                    elif suffix == \"ogi\" and word[-4] == \"l\":\n                        word = word[:-1]\n                        r1 = r1[:-1]\n                        r2 = r2[:-1]\n\n                    elif suffix in (\"fulli\", \"lessli\"):\n                        word = word[:-2]\n                        r1 = r1[:-2]\n                        r2 = r2[:-2]\n\n                    elif suffix == \"li\" and word[-3] in self.__li_ending:\n                        word = word[:-2]\n                        r1 = r1[:-2]\n                        r2 = r2[:-2]\n                break\n\n        # STEP 3\n        for suffix in self.__step3_suffixes:\n            if word.endswith(suffix):\n                if r1.endswith(suffix):\n                    if suffix == \"tional\":\n                        word = word[:-2]\n                        r1 = r1[:-2]\n                        r2 = r2[:-2]\n\n                    elif suffix == \"ational\":\n                        word = \"\".join((word[:-len(suffix)], \"ate\"))\n\n                        if len(r1) >= len(suffix):\n                            r1 = \"\".join((r1[:-len(suffix)], \"ate\"))\n                        else:\n                            r1 = \"\"\n\n                        if len(r2) >= len(suffix):\n                            r2 = \"\".join((r2[:-len(suffix)], \"ate\"))\n                        else:\n                            r2 = \"\"\n\n                    elif suffix == \"alize\":\n                        word = word[:-3]\n                        r1 = r1[:-3]\n                        r2 = r2[:-3]\n\n                    elif suffix in (\"icate\", \"iciti\", \"ical\"):\n                        word = \"\".join((word[:-len(suffix)], \"ic\"))\n\n                        if len(r1) >= len(suffix):\n                            r1 = \"\".join((r1[:-len(suffix)], \"ic\"))\n                        else:\n                            r1 = \"\"\n\n                        if len(r2) >= len(suffix):\n                            r2 = \"\".join((r2[:-len(suffix)], \"ic\"))\n                        else:\n                            r2 = \"\"\n\n                    elif suffix in (\"ful\", \"ness\"):\n                        word = word[:-len(suffix)]\n                        r1 = r1[:-len(suffix)]\n                        r2 = r2[:-len(suffix)]\n\n                    elif suffix == \"ative\" and r2.endswith(suffix):\n                        word = word[:-5]\n                        r1 = r1[:-5]\n                        r2 = r2[:-5]\n                break\n\n        # STEP 4\n        for suffix in self.__step4_suffixes:\n            if word.endswith(suffix):\n                if r2.endswith(suffix):\n                    if suffix == \"ion\":\n                        if word[-4] in \"st\":\n                            word = word[:-3]\n                            r1 = r1[:-3]\n                            r2 = r2[:-3]\n                    else:\n                        word = word[:-len(suffix)]\n                        r1 = r1[:-len(suffix)]\n                        r2 = r2[:-len(suffix)]\n                break\n\n        # STEP 5\n        if r2.endswith(\"l\") and word[-2] == \"l\":\n            word = word[:-1]\n        elif r2.endswith(\"e\"):\n            word = word[:-1]\n        elif r1.endswith(\"e\"):\n            if len(word) >= 4 and (word[-2] in self.__vowels or\n                                   word[-2] in \"wxY\" or\n                                   word[-3] not in self.__vowels or\n                                   word[-4] in self.__vowels):\n                word = word[:-1]\n\n\n        word = word.replace(\"Y\", \"y\")\n\n\n        return word","label":0}
{"text":"func SetFileLabel(fpath string, label string) error {\n\tif fpath == \"\" {\n\t\treturn ErrEmptyPath\n\t}\n\treturn lsetxattr(fpath, xattrNameSelinux, []byte(label), 0)\n}","label":0}
{"text":"def sorted_files_from_bucket(bucket, keys=None):\n    \n    keys = keys or []\n    total = len(keys)\n    sortby = dict(zip(keys, range(total)))\n    values = ObjectVersion.get_by_bucket(bucket).all()\n    return sorted(values, key=lambda x: sortby.get(x.key, total))","label":0}
{"text":"function makeHref(to, params, query) {\n        var path = Router.makePath(to, params, query);\n        return location === HashLocation ? '#' + path : path;\n      }","label":0}
{"text":"@Column(header = Messages.GUI_HISTORY_DIALOG_COL_PROPERTY_0, order = 10)\n    public String getProperty() {\n\n        String result = m_comp.getName();\n        if (result.startsWith(\"GUI_\")) {\n            result = CmsVaadinUtils.getMessageText(result);\n        }\n        return result;\n    }","label":0}
{"text":"public function getRateModel($base = null, $date = null) : Rates\n    {\n        $base = strtoupper($base);\n        if (empty($base)) {\n            $base = 'USD';\n        }\n        if (empty($date)) {\n            $date = date('Y-m-d');\n        }\n        $this->fromCache = false;\n        $api = $this->api;\n\n        if ($this->cacheEnabled) {\n            $cachekey = \"cc-$api-$base-$date\";\n\n            $rates = Cache::get($cachekey);\n            if (is_object($rates) and isset($rates->rates)) {\n                $this->fromCache = true;\n                if ($this->logEnabled) {\n                    Log::debug(\"Got currency rates from cache: $cachekey\");\n                }\n            }\n            else {\n                $rates = $this->provider->rates($base, $date);\n                if (!empty($rates->rates)) {\n                    if(Cache::add($cachekey, $rates, $this->cacheMinutes) and $this->logEnabled) {\n                        Log::debug('Added new currency rates to cache: '.$cachekey.' for '.$this->cacheMinutes.' min.');\n                    }\n                }\n            }\n        }\n        else {\n            $rates = $this->provider->rates($base, $date);\n        }\n\n        if (empty($rates->rates)) {\n            Log::warning(\"$rates->error -> $rates->url\");\n        }\n\n        return $rates;\n    }","label":0}
{"text":"func (gitter *Gitter) GetMessages(roomID string, params *Pagination) ([]Message, error) {\n\n\tvar messages []Message\n\turl := gitter.config.apiBaseURL + \"rooms\/\" + roomID + \"\/chatMessages\"\n\tif params != nil {\n\t\turl += \"?\" + params.encode()\n\t}\n\tresponse, err := gitter.get(url)\n\tif err != nil {\n\t\tgitter.log(err)\n\t\treturn nil, err\n\t}\n\n\terr = json.Unmarshal(response, &messages)\n\tif err != nil {\n\t\tgitter.log(err)\n\t\treturn nil, err\n\t}\n\n\treturn messages, nil\n}","label":0}
{"text":"private HttpRequest buildHTTPRequest(final Query<?, ?> query) {\n\t\tfinal String url = API_ENDPOINT + query.getPath();\n\n\t\tHttpRequest request;\n\t\tswitch (query.getHttpRequestMethod()) {\n\t\t\tcase GET:\n\t\t\t\trequest = Unirest.get(url);\n\n\t\t\t\tif ((query.getQueryParameters() != null) && !query.getQueryParameters().isEmpty()) {\n\t\t\t\t\t((GetRequest) request).queryString(query.getQueryParameters());\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase POST:\n\t\t\t\trequest = Unirest.post(url);\n\n\t\t\t\tif ((query.getQueryParameters() != null) && !query.getQueryParameters().isEmpty()) {\n\t\t\t\t\t((HttpRequestWithBody) request).fields(query.getQueryParameters());\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\trequest = Unirest.get(url);\n\t\t}\n\n\t\t\/*\n\t\t * Add any named route parameters to the request (i.e. elements used to build the URI, such as\n\t\t * '\/sound\/{sound_id}' would have a parameter named 'sound_id').\n\t\t *\/\n\t\tif ((query.getRouteParameters() != null) && !query.getRouteParameters().isEmpty()) {\n\t\t\tfor (final Entry<String, String> routeParameter : query.getRouteParameters().entrySet()) {\n\t\t\t\trequest.routeParam(routeParameter.getKey(), routeParameter.getValue());\n\t\t\t}\n\t\t}\n\n\t\treturn request;\n\t}","label":0}
{"text":"private function handleRestoredModelMetas()\n\t{\n\t\tif (!$this->metableTableSoftDeletes()) {\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tforeach ($this->metas as $meta) {\n\t\t\t$this->syncMetableTableAttributes();\n\t\t\t$meta->increment('num_items');\n\t\t}\n\t}","label":0}
{"text":"public MPConnection getMPConnection(MEConnection conn)\n  {\n    if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled())\n      SibTr.entry(tc, \"getMPConnection\", new Object[] { conn });\n\n    MPConnection mpConn;\n    synchronized(_mpConnectionsByMEConnection)\n    {\n      \/\/look up the MPConnection based on the MEConnection\n      mpConn = _mpConnectionsByMEConnection.get(conn);      \n    }\n\n    if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled())\n      SibTr.exit(tc, \"getMPConnection\", mpConn);\n  \n    return mpConn;\n  }","label":0}
{"text":"public static function embedded(Factory $factory, $class, $value = null)\n    {\n        if ( !$value ) $value = array();\n        else if ( $value instanceOf $class ) return $value->toArray()   ;\n\n        $bp = new Blueprint($factory, $class);\n\n        return $bp->build($value, false);\n    }","label":0}
{"text":"def get_connection_state(self, connection: str) -> Dict[str, Any]:\n        \n        if connection not in self.connections:\n            raise ConnectionNotOpen(connection)\n\n        return self.connections[connection].state","label":0}
{"text":"def get_selection_bounds(self):\r\n        \"\"\"\"\"\"\r\n        cursor = self.textCursor()\r\n        start, end = cursor.selectionStart(), cursor.selectionEnd()\r\n        block_start = self.document().findBlock(start)\r\n        block_end = self.document().findBlock(end)\r\n        return sorted([block_start.blockNumber(), block_end.blockNumber()])","label":0}
{"text":"private static boolean isTargetValid(File fi, boolean ignoreCase, String... fileExt) {\n        if (fi == null || fileExt == null || fileExt.length == 0)\n            return true;\n\n        String ext = getExtension(fi);\n\n        for (String str : fileExt) {\n            if (ignoreCase ? ext.equalsIgnoreCase(str) : ext.equals(str))\n                return true;\n        }\n\n        return false;\n    }","label":0}
{"text":"func Print() {\n\tpayload, err := json.Marshal(Get())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Printf(\"%s\", payload)\n}","label":0}
{"text":"public void marshall(UpdateFileSystemLustreConfiguration updateFileSystemLustreConfiguration, ProtocolMarshaller protocolMarshaller) {\n\n        if (updateFileSystemLustreConfiguration == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(updateFileSystemLustreConfiguration.getWeeklyMaintenanceStartTime(), WEEKLYMAINTENANCESTARTTIME_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }","label":0}
{"text":"def calibrate(self, data, calibration):\n        \"\"\"\"\"\"\n        tic = datetime.now()\n\n        if calibration == 'counts':\n            return data\n        elif calibration == 'radiance':\n            raise NotImplementedError(\"Can't calibrate to radiance.\")\n        else:\n            cal = self.calibration_table\n            res = data.data.map_blocks(self._interp, cal, dtype=cal[:, 0].dtype)\n            res = xr.DataArray(res,\n                               dims=data.dims, attrs=data.attrs,\n                               coords=data.coords)\n        res = res.where(data > 0)\n        logger.debug(\"Calibration time \" + str(datetime.now() - tic))\n        return res","label":0}
{"text":"public static function parse($oid) {\n    \/\/ fast checks first\n    if ($oid instanceof ObjectId) {\n      return $oid;\n    }\n\n    $oidParts = self::parseOidString($oid);\n    $type = $oidParts['type'];\n    $ids = $oidParts['id'];\n    $prefix = $oidParts['prefix'];\n\n    \/\/ check the type\n    if (!ObjectFactory::getInstance('persistenceFacade')->isKnownType($type)) {\n      return null;\n    }\n\n    \/\/ check if number of ids match the type\n    $numPks = self::getNumberOfPKs($type);\n    if ($numPks == null || $numPks != sizeof($ids)) {\n      return null;\n    }\n\n    return new ObjectID($type, $ids, $prefix);\n  }","label":0}
{"text":"def _check_update_(self):\n        \"\"\"\"\"\"\n        try:\n            data = requests.get(\"https:\/\/pypi.python.org\/pypi\/jira\/json\", timeout=2.001).json()\n\n            released_version = data['info']['version']\n            if parse_version(released_version) > parse_version(__version__):\n                warnings.warn(\n                    \"You are running an outdated version of JIRA Python %s. Current version is %s. Do not file any bugs against older versions.\" % (\n                        __version__, released_version))\n        except requests.RequestException:\n            pass\n        except Exception as e:\n            logging.warning(e)","label":0}
{"text":"private Long getMinTransformedProcessId(Long loadedProcessId) {\n        ProcessMonitor processMonitor = ArbitrateFactory.getInstance(getPipelineId(), ProcessMonitor.class);\n        List<Long> processIds = processMonitor.getCurrentProcessIds();\n        \/\/ \u5982\u679c\u9700\u8981\u5f53\u524dnode\u5904\u7406\u5f53\u524dprocess\u7684load\u65f6\uff0crpc\u8bf7\u6c42\u4e00\u5b9a\u4f1a\u5c06\u5bf9\u5e94\u7684stage\u72b6\u6001\u53d1\u5230\u8fd9\u673a\u5668\u4e0a\uff0c\u5e76\u4fdd\u5b58\u5230progress\u4e2d\n        if (!CollectionUtils.isEmpty(processIds) && !CollectionUtils.isEmpty(progress)) {\n            \/\/ \u4e0a\u4e00\u6b21load\u6210\u529f\u7684\u5728\u5f53\u524d\u7684processId\u4e2d\u4e0d\u5b58\u5728\uff0c\u53ef\u80fd\u6709\u4e24\u79cd\u60c5\u51b5:\n            \/\/ 1. zk\u8fd8\u672a\u5c06\u6570\u636e\u901a\u77e5\u8fc7\u6765\uff0c\u5f53\u524dcurrent processIds\u8fd8\u662f\u4e3a\u8001\u7248\u672c\u7684\u503c\n            \/\/ 2. processId\u5df2\u7ecf\u88ab\u5220\u9664\uff0c\u6bd4\u5982\u597d\u4e45\u6ca1\u6709\u6570\u636e\u540c\u6b65\u4e86\uff0c\u5b9a\u65f6\u89e6\u53d1\u65f6\u53d1\u89c9\u5217\u8868\u4e00\u76f4\u4e3a\u7a7a\n            \/\/ if (loadedProcessId != null && !processIds.contains(loadedProcessId)) {\n            \/\/ \/\/ \u5f3a\u5236\u5237\u65b0\u4e00\u6b21\uff0c\u4e0d\u8fc7\u4e5f\u53ef\u80fd\u662f\u5237\u5230\u8001\u7248\u672c\u7684\u503c\uff0c\u676d\u5ddeleader\u8fd8\u6ca1\u540c\u6b65\u5230\u7f8e\u56fd\n            \/\/ processIds = processMonitor.getCurrentProcessIds(true);\n            \/\/ }\n\n            Long result = null;\n            \/\/ \u505a\u7684\u4e00\u4e2a\u4f18\u5316\uff0c\u5982\u679c\u4e0a\u4e00\u4e2aprocessId load\u6210\u529f\u662f\u5728\u672c\u673a\uff0c\u76f4\u63a5\u5ffd\u7565\n            \/\/ \u56e0\u4e3a\u5b58\u5728\u4e00\u4e2a\u95ee\u9898\uff1a\u6bd4\u5982\u4e24\u4e2aprocess\uff0c\u90fd\u5148\u5b8c\u6210\u4e86T\u6a21\u5757\uff0c\u7136\u540e\u9010\u4e2a\u89e6\u53d1L\u6a21\u5757\uff0c\u6b64\u65f6\u7b2c\u4e8c\u4e2aprocess\u9700\u8981\u7b49zookeeper\u56de\u8c03watcher\u65f6\u624d\u4f1a\u88ab\u89e6\u53d1\n            for (Long processId : processIds) {\n                if (loadedProcessId == null || processId > loadedProcessId) {\n                    result = processId;\n                    break;\n                }\n            }\n\n            \/\/ \u5982\u679c\u4e0d\u5b58\u5728\u7b26\u5408>loadedProcessId\u7684\u8bb0\u5f55\uff0c\u76f4\u63a5\u5047\u8bbe\u4e0b\u4e00\u4e2aprocessId\u5c31\u662f\u4e0a\u4e00\u4e2aid+1\n            \/\/ \u56e0\u4e3aprocessId\u76ee\u524d\u7684\u673a\u5236\u6c38\u8fdc\u53ea\u4f1a\u9012\u589e\n            if (result == null) {\n                result = loadedProcessId + 1;\n            }\n\n            if (result != null) {\n                StageProgress stage = progress.get(result);\n                if (stage != null && stage.getStage().isTransform()) {\n                    return result;\n                } else {\n                    logger.info(\"rpc compute [{}] but stage [{}]\", result, stage == null ? null : stage.getStage());\n                    return null;\n                }\n            }\n        }\n\n        return null;\n    }","label":0}
{"text":"@SuppressWarnings(\"unchecked\")\n\t@Override\n\tpublic void eSet(int featureID, Object newValue) {\n\t\tswitch (featureID) {\n\t\t\tcase AfplibPackage.MCF__RG:\n\t\t\t\tgetRG().clear();\n\t\t\t\tgetRG().addAll((Collection<? extends MCFRG>)newValue);\n\t\t\t\treturn;\n\t\t}\n\t\tsuper.eSet(featureID, newValue);\n\t}","label":0}
{"text":"public function clean()\n    {\n        $cleanCallback = function ($allCleaned, $cache) {\n            return $allCleaned && $cache->clean();\n        };\n        return array_reduce($this->caches, $cleanCallback, true);\n    }","label":0}
{"text":"function(element) {\n        element = $(element);\n\n        \/\/ Pass the element since it gets removed\n        this.fireEvent('hiding', [element]);\n\n        element.transitionend(function() {\n            element.remove();\n            this.fireEvent('hidden');\n        }.bind(this)).conceal();\n    }","label":0}
{"text":"protected function execute(Input\\InputInterface $input, Output\\OutputInterface $output)\n    {\n        $this->generatorService->process($input->getOption('force'));\n        $output->writeln('Completed');\n    }","label":0}
{"text":"void printBootstrapInfo(BootstrapInfo bsInfo) {\n    if (bsInfo == null) return;\n\n    Log.d(LOGTAG, \"printBootstrapInfo\");\n    List<BootstrapProfile> profiles = bsInfo.getProfiles();\n    if (profiles != null) {\n      for (BootstrapProfile profile : profiles) {\n        Log.d(LOGTAG, profile.toString());\n      }\n    } else {\n      Log.d(LOGTAG, \"Profiles are null\");\n    }\n  }","label":0}
{"text":"@Override\n    public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {\n        registerObject(bean);\n        return bean;\n    }","label":0}
{"text":"def apply_fixes(args, tmpdir):\n  \"\"\"\"\"\"\n  invocation = [args.clang_apply_replacements_binary]\n  if args.format:\n    invocation.append('-format')\n  if args.style:\n    invocation.append('-style=' + args.style)\n  invocation.append(tmpdir)\n  subprocess.call(invocation)","label":0}
{"text":"func TrimSpace(str cty.Value) (cty.Value, error) {\n\treturn TrimSpaceFunc.Call([]cty.Value{str})\n}","label":0}
{"text":"private static @Nullable\n    User getOrCreateById(@Nonnull String id, @Nonnull String fullName, boolean create) {\n        User u = AllUsers.get(id);\n        if (u == null && (create || UserIdMapper.getInstance().isMapped(id))) {\n            u = new User(id, fullName);\n            AllUsers.put(id, u);\n            if (!id.equals(fullName) && !UserIdMapper.getInstance().isMapped(id)) {\n                try {\n                    u.save();\n                } catch (IOException x) {\n                    LOGGER.log(Level.WARNING, \"Failed to save user configuration for \" + id, x);\n                }\n            }\n        }\n        return u;\n    }","label":0}
{"text":"public function database($database, $wrap = true)\n    {\n        $database = $this->connection->{$database};\n\n        return $wrap ? new Database($database, $this) : $database;\n    }","label":0}
{"text":"public static String getKeysWhereSQL(Class<?> clazz) \n\t\t\tthrows NoKeyColumnAnnotationException {\n\t\tList<Field> keyFields = DOInfoReader.getKeyColumns(clazz);\n\t\tString where = joinWhere(keyFields, \"AND\");\n\t\treturn autoSetSoftDeleted(\"WHERE \" + where, clazz);\n\t}","label":0}
{"text":"func (s *KeyPhrasesDetectionJobFilter) SetSubmitTimeAfter(v time.Time) *KeyPhrasesDetectionJobFilter {\n\ts.SubmitTimeAfter = &v\n\treturn s\n}","label":0}
{"text":"def validate(self, value):\n        \n        if '.' not in value:\n            self.error_message = '%s is not a fully qualified domain name.' % \\\n                                 value\n            return False\n        try:\n            ipaddress = socket.gethostbyname(value)\n        except socket.gaierror:\n            self.error_message = '%s does not resolve.' % value\n            return False\n        try:\n            socket.gethostbyaddr(ipaddress)\n        except socket.herror:\n            self.error_message = \\\n                '%s reverse address (%s) does not resolve.' % \\\n                (value, ipaddress)\n            return False\n        self._choice = value\n        return True","label":0}
{"text":"func LogReleaseMetadata(metadatas []Metadata) {\n\tfor _, metadata := range metadatas {\n\t\tlogrus.Infof(\"Layer %s cleaned up\", metadata.ChainID)\n\t}\n}","label":0}
{"text":"def toeplitz(vect):\n  \n  return [[vect[abs(i-j)] for i in xrange(len(vect))]\n                          for j in xrange(len(vect))]","label":0}
{"text":"function depthFirstSearch(obj, handler) {\n  var childrenKey = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'children';\n  var reverse = arguments[3];\n\n  var rootChildren = hp.isArray(obj) ? obj : [obj];\n  \/\/\n  var StopException = function StopException() {};\n  var func = function func(children, parent) {\n    if (reverse) {\n      children = children.slice();\n      children.reverse();\n    }\n    var len = children.length;\n    for (var i = 0; i < len; i++) {\n      var item = children[i];\n      var r = handler(item, i, parent);\n      if (r === false) {\n        \/\/ stop\n        throw new StopException();\n      } else if (r === 'skip children') {\n        continue;\n      } else if (r === 'skip siblings') {\n        break;\n      }\n      if (item[childrenKey] != null) {\n        func(item[childrenKey], item);\n      }\n    }\n  };\n  try {\n    func(rootChildren);\n  } catch (e) {\n    if (e instanceof StopException) {\n      \/\/ stop\n    } else {\n      throw e;\n    }\n  }\n}","label":0}
{"text":"func HackerPhrase() string {\n\twords := strings.Split(Generate(getRandValue([]string{\"hacker\", \"phrase\"})), \" \")\n\twords[0] = strings.Title(words[0])\n\treturn strings.Join(words, \" \")\n}","label":0}
{"text":"function() {\n\t\tvar defaultProps = {\n\t\t\tglEventHub: this._container.layoutManager.eventHub,\n\t\t\tglContainer: this._container,\n\t\t\tref: this._gotReactComponent.bind( this )\n\t\t};\n\t\tvar props = $.extend( defaultProps, this._container._config.props );\n\t\treturn React.createElement( this._reactClass, props );\n\t}","label":0}
{"text":"public function listAppend($operand)\n    {\n        $operand = $this->path->getExpr()->value($operand);\n\n        return new ListAppend($this, $operand);\n    }","label":0}
{"text":"def source_getattr():\n    \n\n    def source_getattr(_value, context, **_params):\n        value = getattr(context[\"model\"].source, context[\"key\"])\n        return _attr(value)\n\n    return source_getattr","label":0}
{"text":"public function getParams(array $rewrite = []): array\n    {\n        $params = $this->params;\n\n        \/\/ change page to first for each new grid (with new filters or orders, or other stuff)\n        $page = $rewrite['page'] ?? 1;\n\n        if ($page > 1) {\n            $params[$this->prefix . 'page'] = $page;\n        }\n\n        \/\/ change limit\n        $limit = $rewrite['limit'] ?? $this->getLimit();\n\n        if ($limit !== $this->defaultLimit) {\n            $params[$this->prefix . 'limit'] = $limit;\n        }\n\n        \/\/ change orders\n        $orders = $rewrite['orders'] ?? $this->getOrders();\n\n        foreach ($orders as $column => $order) {\n            $column = $this->applyAlias($column);\n            $params[$this->prefix . 'order-' . $column] = $order;\n        }\n\n        \/\/ change filters\n        $filters = $rewrite['filters'] ?? $this->getFilters();\n\n        foreach ($filters as $column => $columnFilters) {\n            \/** @var array $columnFilters *\/\n            $column = $this->applyAlias($column);\n            if (\\count($columnFilters) === 1 && isset($columnFilters[self::FILTER_EQ])) {\n                $params[$this->prefix . 'filter-' . $column] = $columnFilters[self::FILTER_EQ];\n                continue;\n            }\n\n            $columnFilter = [];\n            foreach ($columnFilters as $filterName => $filterValue) {\n                $columnFilter[] = $filterName . '-' . $filterValue;\n            }\n            $params[$this->prefix . 'filter-' . $column] = implode('_', $columnFilter);\n        }\n        return $params;\n    }","label":0}
{"text":"def on_download_to_activated(self, menu_item):\n        ''''''\n        tree_paths = self.iconview.get_selected_items()\n        if not tree_paths:\n            return\n\n        dialog = Gtk.FileChooserDialog(_('Save to...'), self.app.window,\n                Gtk.FileChooserAction.SELECT_FOLDER,\n                (Gtk.STOCK_CANCEL, Gtk.ResponseType.CANCEL,\n                 Gtk.STOCK_OK, Gtk.ResponseType.OK))\n        response = dialog.run()\n        if response != Gtk.ResponseType.OK:\n            dialog.destroy()\n            return\n        dirname = dialog.get_filename()\n        dialog.destroy()\n\n        pcs_files = [self.get_pcs_file(p) for p in tree_paths]\n        self.app.blink_page(self.app.download_page)\n        self.app.download_page.add_tasks(pcs_files, dirname)","label":0}
{"text":"public function receiveSignedAuthnRequestFrom(Request $request)\n    {\n        if (!$this->entityRepository) {\n            throw new LogicException(\n                'Could not receive AuthnRequest from HTTP Request: a ServiceProviderRepository must be configured'\n            );\n        }\n\n        if (!$request->isMethod(Request::METHOD_GET)) {\n            throw new BadRequestHttpException(sprintf(\n                'Could not receive AuthnRequest from HTTP Request: expected a GET method, got %s',\n                $request->getMethod()\n            ));\n        }\n\n        $requestUri = $request->getRequestUri();\n        if (strpos($requestUri, '?') === false) {\n            throw new BadRequestHttpException(\n                'Could not receive AuthnRequest from HTTP Request: expected query parameters, none found'\n            );\n        }\n\n        list(, $rawQueryString) = explode('?', $requestUri);\n        $query = ReceivedAuthnRequestQueryString::parse($rawQueryString);\n\n        if (!$query->isSigned()) {\n            throw new UnsignedRequestException('The SAMLRequest is expected to be signed but it was not');\n        }\n\n        if (!$this->signatureVerifier->verifySignatureAlgorithmSupported($query)) {\n            throw new UnsupportedSignatureException(\n                $query->getSignatureAlgorithm()\n            );\n        }\n\n        $authnRequest = ReceivedAuthnRequest::from($query->getDecodedSamlRequest());\n\n        $currentUri = $this->getFullRequestUri($request);\n        if (!$authnRequest->getDestination() === $currentUri) {\n            throw new BadRequestHttpException(sprintf(\n                'Actual Destination \"%s\" does not match the AuthnRequest Destination \"%s\"',\n                $currentUri,\n                $authnRequest->getDestination()\n            ));\n        }\n\n        if (!$this->entityRepository->hasServiceProvider($authnRequest->getServiceProvider())) {\n            throw new UnknownServiceProviderException($authnRequest->getServiceProvider());\n        }\n\n        $serviceProvider = $this->entityRepository->getServiceProvider($authnRequest->getServiceProvider());\n\n        \/\/ Note: verifyIsSignedBy throws an Exception when the signature does not match.\n        if (!$this->signatureVerifier->verifyIsSignedBy($query, $serviceProvider)) {\n            throw new SignatureValidationFailedException(\n                'Validation of the signature in the AuthnRequest failed'\n            );\n        }\n\n        return $authnRequest;\n    }","label":0}
{"text":"public function changeColumn($columnName, $newColumnType, array $options = [])\n    {\n        if ($newColumnType instanceof Column) {\n            $action = new ChangeColumn($this->table, $columnName, $newColumnType);\n        } else {\n            $action = ChangeColumn::build($this->table, $columnName, $newColumnType, $options);\n        }\n        $this->actions->addAction($action);\n\n        return $this;\n    }","label":0}
{"text":"protected function success()\n    {\n        $this->cleanup();\n\n        if (empty($this->incidents)) {\n            Log::warning(\n                'The collector ' . config(\"{$this->configBase}.collector.name\") . ' did not return any incidents ' .\n                'which should be investigated for collector and\/or configuration errors'\n            );\n        }\n\n        Log::info(\n            get_class($this) . ': ' .\n            'Collector run completed for collector : ' . config(\"{$this->configBase}.collector.name\")\n        );\n\n        return [\n            'errorStatus'   => false,\n            'errorMessage'  => 'Data successfully collected',\n            'warningCount'  => $this->warningCount,\n            'data'          => $this->incidents,\n        ];\n    }","label":0}
{"text":"private function isEventEmitterEnabled()\n    {\n        if (! isset($this->isEmitterEnabled)) {\n            $this->isEmitterEnabled = $this->getConfig('event_emitter') != false;\n        }\n\n        return $this->isEmitterEnabled;\n    }","label":0}
{"text":"function TouchMouseInput() {\n  Input.apply(this, arguments);\n\n  var handler = this.handler.bind(this);\n  this.touch = new TouchInput(this.manager, handler);\n  this.mouse = new MouseInput(this.manager, handler);\n}","label":0}
{"text":"public function _bootstrapActions()\n    {\n        if (empty($this->config['bootstrapActions'])) {\n            return;\n        }\n\n        foreach ($this->config['bootstrapActions'] as $action) {\n            if (!is_callable($action)) {\n                do_action($action);\n            } else {\n                call_user_func($action);\n            }\n        }\n    }","label":0}
{"text":"public static function getFromCache(RequestBag $requestBag)\n    {\n        \/\/ check if we have cache in settings\n        if (!$requestBag->getApiConfig()->get('Cache', false) || $requestBag->getMethodData()['cache']['ttl'] <= 0) {\n            return false;\n        }\n\n        $instance = new self($requestBag);\n\n        return $instance->getCallbackResultFromCache();\n    }","label":0}
{"text":"func (s *String) Schema(schema interface{}) *String {\n\tcheckSchema(&s.chain, s.value, schema)\n\treturn s\n}","label":0}
{"text":"private boolean estimateMotion() {\n\t\t\/\/ organize the data\n\t\tList<Stereo2D3D> data = new ArrayList<>();\n\n\t\tfor( PointTrack l : candidates ) {\n\t\t\tLeftTrackInfo info = l.getCookie();\n\t\t\tPointTrack r = info.right;\n\n\t\t\tStereo2D3D stereo = info.location;\n\t\t\t\/\/ compute normalized image coordinate for track in left and right image\n\t\t\tleftImageToNorm.compute(l.x,l.y,info.location.leftObs);\n\t\t\trightImageToNorm.compute(r.x,r.y,info.location.rightObs);\n\n\t\t\tdata.add(stereo);\n\t\t}\n\n\t\t\/\/ Robustly estimate left camera motion\n\t\tif( !matcher.process(data) )\n\t\t\treturn false;\n\n\t\tSe3_F64 keyToCurr = matcher.getModelParameters();\n\t\tkeyToCurr.invert(currToKey);\n\n\t\t\/\/ mark tracks that are in the inlier set\n\t\tint N = matcher.getMatchSet().size();\n\t\tfor( int i = 0; i < N; i++ ) {\n\t\t\tint index = matcher.getInputIndex(i);\n\t\t\tLeftTrackInfo info = candidates.get(index).getCookie();\n\t\t\tinfo.lastInlier = tick;\n\t\t}\n\n\/\/\t\tSystem.out.println(\"Inlier set size: \"+N);\n\n\t\treturn true;\n\t}","label":0}
{"text":"@NonNull @UiThread\n  public static Unbinder bind(@NonNull Activity target) {\n    View sourceView = target.getWindow().getDecorView();\n    return bind(target, sourceView);\n  }","label":0}
{"text":"public void marshall(DescribeExclusionsRequest describeExclusionsRequest, ProtocolMarshaller protocolMarshaller) {\n\n        if (describeExclusionsRequest == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(describeExclusionsRequest.getExclusionArns(), EXCLUSIONARNS_BINDING);\n            protocolMarshaller.marshall(describeExclusionsRequest.getLocale(), LOCALE_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }","label":0}
{"text":"def on_command_call(*args)\n    if args.last && :args == args.last[0]\n      args_add = args.pop\n      call = on_call(*args)\n      on_method_add_arg(call, args_add)\n    else\n      super\n    end\n  end","label":0}
{"text":"private void handleCompleter( CountedCompleter cc ) {\n    assert cc instanceof H2OCountedCompleter;\n    if( _fjtasks == null || !_fjtasks.contains(cc) )\n      addCompleter((H2OCountedCompleter)cc);\n    _dt.setCompleter(null);\n  }","label":0}
{"text":"def generate_sample_cdk_cs_module(env_root, module_dir=None):\n    \"\"\"\"\"\"\n    if module_dir is None:\n        module_dir = os.path.join(env_root, 'sampleapp.cdk')\n    generate_sample_module(module_dir)\n    for i in ['add-project.hook.d.ts', 'cdk.json', 'package.json',\n              'runway.module.yml', 'README.md']:\n        shutil.copyfile(\n            os.path.join(ROOT,\n                         'templates',\n                         'cdk-csharp',\n                         i),\n            os.path.join(module_dir, i),\n        )\n    shutil.copyfile(\n        os.path.join(ROOT,\n                     'templates',\n                     'cdk-csharp',\n                     'dot_gitignore'),\n        os.path.join(module_dir, '.gitignore'),\n    )\n    os.mkdir(os.path.join(module_dir, 'src'))\n    shutil.copyfile(\n        os.path.join(ROOT,\n                     'templates',\n                     'cdk-csharp',\n                     'src',\n                     'HelloCdk.sln'),\n        os.path.join(module_dir, 'src', 'HelloCdk.sln'),\n    )\n    os.mkdir(os.path.join(module_dir, 'src', 'HelloCdk'))\n    for i in ['HelloCdk.csproj', 'HelloConstruct.cs', 'HelloStack.cs',\n              'Program.cs']:\n        shutil.copyfile(\n            os.path.join(ROOT,\n                         'templates',\n                         'cdk-csharp',\n                         'src',\n                         'HelloCdk',\n                         i),\n            os.path.join(module_dir, 'src', 'HelloCdk', i),\n        )\n    LOGGER.info(\"Sample C# CDK module created at %s\", module_dir)\n    LOGGER.info('To finish its setup, change to the %s directory and execute '\n                '\"npm install\" to generate its lockfile.', module_dir)","label":0}
{"text":"public function bindRequest(Request $request)\n    {\n        $changes = $request->request->get('permission-hidden-fields');\n\n        if (empty($changes)) {\n            return true;\n        }\n\n        \/\/ Just apply the changes to the current node (non recursively)\n        $this->applyAclChangeset($this->resource, $changes, false);\n\n        \/\/ Apply recursively (on request)\n        $applyRecursive = $request->request->get('applyRecursive');\n        if ($applyRecursive) {\n            \/\/ Serialize changes & store them in DB\n            $user = $this->tokenStorage->getToken()->getUser();\n            $this->createAclChangeSet($this->resource, $changes, $user);\n\n            $cmd = 'php ' . $this->kernel->getRootDir() . '\/..\/bin\/console kuma:acl:apply';\n            $cmd .= ' --env=' . $this->kernel->getEnvironment();\n\n            $this->shellHelper->runInBackground($cmd);\n        }\n\n        return true;\n    }","label":0}
{"text":"def visit_arg(self, node, parent):\n        \"\"\"\"\"\"\n        return self.visit_assignname(node, parent, node.arg)","label":0}
{"text":"func NewSwiftBackend(conf map[string]string, logger log.Logger) (physical.Backend, error) {\n\tvar ok bool\n\n\tusername := os.Getenv(\"OS_USERNAME\")\n\tif username == \"\" {\n\t\tusername = conf[\"username\"]\n\t\tif username == \"\" {\n\t\t\treturn nil, fmt.Errorf(\"missing username\")\n\t\t}\n\t}\n\tpassword := os.Getenv(\"OS_PASSWORD\")\n\tif password == \"\" {\n\t\tpassword = conf[\"password\"]\n\t\tif password == \"\" {\n\t\t\treturn nil, fmt.Errorf(\"missing password\")\n\t\t}\n\t}\n\tauthUrl := os.Getenv(\"OS_AUTH_URL\")\n\tif authUrl == \"\" {\n\t\tauthUrl = conf[\"auth_url\"]\n\t\tif authUrl == \"\" {\n\t\t\treturn nil, fmt.Errorf(\"missing auth_url\")\n\t\t}\n\t}\n\tcontainer := os.Getenv(\"OS_CONTAINER\")\n\tif container == \"\" {\n\t\tcontainer = conf[\"container\"]\n\t\tif container == \"\" {\n\t\t\treturn nil, fmt.Errorf(\"missing container\")\n\t\t}\n\t}\n\tproject := os.Getenv(\"OS_PROJECT_NAME\")\n\tif project == \"\" {\n\t\tif project, ok = conf[\"project\"]; !ok {\n\t\t\t\/\/ Check for KeyStone naming prior to V3\n\t\t\tproject = os.Getenv(\"OS_TENANT_NAME\")\n\t\t\tif project == \"\" {\n\t\t\t\tproject = conf[\"tenant\"]\n\t\t\t}\n\t\t}\n\t}\n\n\tdomain := os.Getenv(\"OS_USER_DOMAIN_NAME\")\n\tif domain == \"\" {\n\t\tdomain = conf[\"domain\"]\n\t}\n\tprojectDomain := os.Getenv(\"OS_PROJECT_DOMAIN_NAME\")\n\tif projectDomain == \"\" {\n\t\tprojectDomain = conf[\"project-domain\"]\n\t}\n\n\tregion := os.Getenv(\"OS_REGION_NAME\")\n\tif region == \"\" {\n\t\tregion = conf[\"region\"]\n\t}\n\ttenantID := os.Getenv(\"OS_TENANT_ID\")\n\tif tenantID == \"\" {\n\t\ttenantID = conf[\"tenant_id\"]\n\t}\n\ttrustID := os.Getenv(\"OS_TRUST_ID\")\n\tif trustID == \"\" {\n\t\ttrustID = conf[\"trust_id\"]\n\t}\n\tstorageUrl := os.Getenv(\"OS_STORAGE_URL\")\n\tif storageUrl == \"\" {\n\t\tstorageUrl = conf[\"storage_url\"]\n\t}\n\tauthToken := os.Getenv(\"OS_AUTH_TOKEN\")\n\tif authToken == \"\" {\n\t\tauthToken = conf[\"auth_token\"]\n\t}\n\n\tc := swift.Connection{\n\t\tDomain:       domain,\n\t\tUserName:     username,\n\t\tApiKey:       password,\n\t\tAuthUrl:      authUrl,\n\t\tTenant:       project,\n\t\tTenantDomain: projectDomain,\n\t\tRegion:       region,\n\t\tTenantId:     tenantID,\n\t\tTrustId:      trustID,\n\t\tStorageUrl:   storageUrl,\n\t\tAuthToken:    authToken,\n\t\tTransport:    cleanhttp.DefaultPooledTransport(),\n\t}\n\n\terr := c.Authenticate()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t_, _, err = c.Container(container)\n\tif err != nil {\n\t\treturn nil, errwrap.Wrapf(fmt.Sprintf(\"Unable to access container %q: {{err}}\", container), err)\n\t}\n\n\tmaxParStr, ok := conf[\"max_parallel\"]\n\tvar maxParInt int\n\tif ok {\n\t\tmaxParInt, err = strconv.Atoi(maxParStr)\n\t\tif err != nil {\n\t\t\treturn nil, errwrap.Wrapf(\"failed parsing max_parallel parameter: {{err}}\", err)\n\t\t}\n\t\tif logger.IsDebug() {\n\t\t\tlogger.Debug(\"max_parallel set\", \"max_parallel\", maxParInt)\n\t\t}\n\t}\n\n\ts := &SwiftBackend{\n\t\tclient:     &c,\n\t\tcontainer:  container,\n\t\tlogger:     logger,\n\t\tpermitPool: physical.NewPermitPool(maxParInt),\n\t}\n\treturn s, nil\n}","label":0}
{"text":"public boolean isInitialized() {\n        WeakReference<Holder> ref = local.get();\n        if (ref != null) {\n            Holder holder = ref.get();\n            return holder != null && holder.value != UNINITIALISED;\n        } else {\n            return false;\n        }\n    }","label":0}
{"text":"public function getImageInfo($filename)\n\t{\n\t\tif ($filename instanceof Image) {\n\t\t\t$filename = $this->adapter->getFileStorage()->getImagePath($filename);\n\t\t}\n\n\t\t$info = new ImageInfo($filename);\n\n\t\tif ($info->hasError()) {\n\t\t\tthrow new ImageProcessorException('File ' . $filename . ' not found or is not readable. ' . $info->getError());\n\t\t}\n\n\t\treturn $info;\n\t}","label":0}
{"text":"def char(self):\n        \n        # Read a new chunk from the input stream if necessary\n        if self.chunkOffset >= self.chunkSize:\n            if not self.readChunk():\n                return EOF\n\n        chunkOffset = self.chunkOffset\n        char = self.chunk[chunkOffset]\n        self.chunkOffset = chunkOffset + 1\n\n        return char","label":0}
{"text":"protected function getDropdownConfig() {\n    $config = $this->dropdown;\n    $config['id'] = ArrayHelper::getValue($config, 'id', null);\n    $config['clientOptions'] = false;\n    $config['view'] = $this->getView();\n    \n    return $config;\n  }","label":0}
{"text":"func (bv Values) Has(value interface{}) bool {\n\treturn bv.valueTypeExists(reflect.TypeOf(value))\n}","label":0}
{"text":"def get_nearest_points(self, center_point, radius, unit='km'):\n        \n        assert isinstance(center_point, GeoPoint), \\\n            'point should be GeoPoint instance'\n        for point in self.get_nearest_points_dirty(center_point, radius):\n            distance = point.distance_to(center_point, unit)\n            if distance <= radius:\n                yield point, distance","label":0}
{"text":"function getPointFromLargestVarianceCluster(clusters) {\n    var maxVariance = -Number.MAX_VALUE;\n    var selected = null;\n    for (var clusterIndex = 0; clusterIndex < clusters.length; clusterIndex++) {\n      var cluster = clusters[clusterIndex];\n\n      if (cluster.getPoints().length > 0) {\n\n        \/\/ compute the distance variance of the current cluster\n        var center = cluster.getCenter();\n        var points = cluster.getPoints();\n        var distances = new Float32Array(points.length);\n        for (var i = 0; i < points.length; i++) {\n          distances[i] = distance(points[i], center);\n        }\n        var variance = morpheus.Variance(morpheus.VectorUtil.arrayAsVector(distances));\n\n        \/\/ select the cluster with the largest variance\n        if (variance > maxVariance) {\n          maxVariance = variance;\n          selected = cluster;\n        }\n      }\n    }\n\n    \/\/ did we find at least one non-empty cluster ?\n    if (selected == null) {\n      throw 'All clusters are empty';\n    }\n\n    \/\/ extract a random point from the cluster\n    var selectedPoints = selected.getPoints();\n    return selectedPoints.splice(nextInt(selectedPoints.length), 1);\n\n  }","label":0}
{"text":"def amplify!(user)\n      base = self.find_user(user.username)\n      return user unless base\n\n      user.extend UserExt\n      user.ldap_attributes = base.ldap_attributes\n\n      user.merge!(base)\n    end","label":0}
{"text":"def parse_args():\n    \n    parser = argparse.ArgumentParser(description = \"Generate secrets for YubiKeys using YubiHSM\",\n                                     add_help=True,\n                                     formatter_class = argparse.ArgumentDefaultsHelpFormatter,\n                                     )\n    parser.add_argument('-D', '--device',\n                        dest='device',\n                        default=default_device,\n                        required=False,\n                        help='YubiHSM device',\n                        )\n    parser.add_argument('-O', '--output-dir', '--aead-dir',\n                        dest='output_dir',\n                        default=default_dir,\n                        required=False,\n                        help='Output directory (AEAD base dir)',\n                        )\n    parser.add_argument('-c', '--count',\n                        dest='count',\n                        type=int, default=1,\n                        required=False,\n                        help='Number of secrets to generate',\n                        )\n    parser.add_argument('-v', '--verbose',\n                        dest='verbose',\n                        action='store_true', default=False,\n                        help='Enable verbose operation',\n                        )\n    parser.add_argument('--public-id-chars',\n                        dest='public_id_chars',\n                        type=int, default=12,\n                        required=False,\n                        help='Number of chars in generated public ids',\n                        )\n    parser.add_argument('--key-handles',\n                        dest='key_handles',\n                        nargs='+',\n                        required=True,\n                        help='Key handles to encrypt the generated secrets with',\n                        )\n    parser.add_argument('--start-public-id',\n                        dest='start_id',\n                        required=True,\n                        help='The first public id to generate AEAD for',\n                        )\n\n    parser.add_argument('--random-nonce',\n                        dest='random_nonce',\n                        required=False,\n                        action='store_true', default=False,\n                        help='Let the HSM generate nonce',\n                        )\n\n    return parser.parse_args()","label":0}
{"text":"public boolean restoreLastMapFromArchive() {\n\t\tboolean success = false;\n\t\tList<Map<Object, Object>> object = null;\n\t\tif (oldBlockHierarchy.size() > 0) {\n\t\t\tobject = oldBlockHierarchy.remove(oldBlockHierarchy.size() - 1);\n\t\t\tif (object != null) {\n\t\t\t\tworking = object;\n\t\t\t\tsuccess = true;\n\t\t\t}\n\t\t}\n\t\treturn success;\n\t}","label":0}
{"text":"protected function setResponseData(Response $response, array $data)\n    {\n        if ($response instanceof JsonResponse) {\n            \/** @var $response JsonResponse *\/\n            return $response->setData($data);\n        }\n\n        $content = json_encode($data, JsonResponse::DEFAULT_ENCODING_OPTIONS);\n\n        return $response->setContent($content);\n    }","label":0}
{"text":"func (m *GormResourceTypeScopeRepository) List(ctx context.Context, resourceType *ResourceType) ([]ResourceTypeScope, error) {\n\tdefer goa.MeasureSince([]string{\"goa\", \"db\", \"resource_type_scope\", \"list\"}, time.Now())\n\tvar rows []ResourceTypeScope\n\n\tvar err error\n\tif resourceType != nil {\n\t\terr = m.db.Where(\"resource_type_id = ?\", resourceType.ResourceTypeID).Order(\"name\").Find(&rows).Error\n\t} else {\n\t\terr = m.db.Order(\"name\").Find(&rows).Error\n\t}\n\tif err != nil && err != gorm.ErrRecordNotFound {\n\t\treturn nil, errs.WithStack(err)\n\t}\n\treturn rows, nil\n}","label":0}
{"text":"function tryCreateRegexp(src, flags, throwErrorAt, parser) {\n  try {\n    return new RegExp(src, flags);\n  } catch (e) {\n    if (throwErrorAt !== undefined) {\n      if (e instanceof SyntaxError) parser.raise(throwErrorAt, \"Error parsing regular expression: \" + e.message);\n      throw e;\n    }\n  }\n}","label":0}
{"text":"func (msp *bccspmsp) DeserializeIdentity(serializedID []byte) (Identity, error) {\n\tmspLogger.Debug(\"Obtaining identity\")\n\n\t\/\/ We first deserialize to a SerializedIdentity to get the MSP ID\n\tsId := &m.SerializedIdentity{}\n\terr := proto.Unmarshal(serializedID, sId)\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, \"could not deserialize a SerializedIdentity\")\n\t}\n\n\tif sId.Mspid != msp.name {\n\t\treturn nil, errors.Errorf(\"expected MSP ID %s, received %s\", msp.name, sId.Mspid)\n\t}\n\n\treturn msp.deserializeIdentityInternal(sId.IdBytes)\n}","label":0}
{"text":"function type(char) {\n  switch (char) {\n    case c.letter.d: \/\/ d\n      return c.type.DICT\n    case c.letter.l: \/\/ l\n      return c.type.LIST\n    case c.letter.i: \/\/ i\n      return c.type.INT\n    case c.letter.e: \/\/ e\n      return c.type.END\n    case c.digit.NUM0:\n    case c.digit.NUM1:\n    case c.digit.NUM2:\n    case c.digit.NUM3:\n    case c.digit.NUM4:\n    case c.digit.NUM5:\n    case c.digit.NUM6:\n    case c.digit.NUM7:\n    case c.digit.NUM8:\n    case c.digit.NUM9:\n    case c.MINUS:\n      return c.type.STR\n    default:\n      break\n  }\n\n  return c.type.UNDEFINED\n}","label":0}
{"text":"public function exportToExcel(Driver $driver, array $columns)\n    {\n        $csvData = $this->findAllRecords($driver, $columns);\n        $response = new StreamedResponse(function () use ($csvData) {\n            $resources = fopen('php:\/\/output', 'w');\n\n            foreach ($csvData as $item) {\n                fputcsv($resources, $item);\n            }\n        });\n\n        $dispositionHeader = $response->headers->makeDisposition(ResponseHeaderBag::DISPOSITION_ATTACHMENT, sprintf('%s.csv', date('YmdHis')));\n\n        $response->headers->set('Content-Type', 'text\/csv; charset=utf-8');\n        $response->headers->set('Pragma', 'public');\n        $response->headers->set('Cache-Control', 'maxage=1');\n        $response->headers->set('Content-Disposition', $dispositionHeader);\n\n        return $response;\n    }","label":0}
{"text":"public function setRightTitle($title)\n    {\n        foreach ($this->getChildren() as $field) {\n            \/** @var FormField $field *\/\n            $field->setRightTitle($title);\n        }\n\n        return $this;\n    }","label":0}
{"text":"public long getDoneSaving(Configuration conf) {\n    try {\n      DFSClient dfs = ((DistributedFileSystem)FileSystem.get(conf)).getClient();\n      Counters raidedCounters = stateToSourceCounters.get(RaidState.RAIDED);\n      Counters shouldRaidCounters =\n          stateToSourceCounters.get(RaidState.NOT_RAIDED_BUT_SHOULD);\n      long physical = estimatedDoneSourceSize + estimatedDoneParitySize;\n      long logical = raidedCounters.getNumLogical() +\n          shouldRaidCounters.getNumLogical();\n      return logical * dfs.getDefaultReplication() - physical;\n    } catch (Exception e) {\n      return -1;\n    }\n  }","label":0}
{"text":"def to_array(self):\n        \n        array = super(StickerSet, self).to_array()\n        array['name'] = u(self.name)  # py2: type unicode, py3: type str\n\n        array['title'] = u(self.title)  # py2: type unicode, py3: type str\n\n        array['contains_masks'] = bool(self.contains_masks)  # type bool\n        array['stickers'] = self._as_array(self.stickers)  # type list of Sticker\n\n        return array","label":0}
{"text":"def before(base=_datetime, diff=None):\n    \n    _base = parse(base)\n    if isinstance(_base, datetime.date):\n        _base = midnight(_base)\n    if not diff:\n        return _base\n    result_dict = dp(diff)\n    # weeks already convert to days in diff_parse function(dp)\n    for unit in result_dict:\n        _val = result_dict[unit]\n        if not _val:\n            continue\n        if unit == 'years':\n            _base = _base.replace(year=(_base.year - _val))\n        elif unit == 'months':\n            if _base.month <= _val:\n                _month_diff = 12 - (_val - _base.month)\n                _base = _base.replace(year=_base.year - 1).replace(month=_month_diff)\n            else:\n                _base = _base.replace(month=_base.month - _val)\n        elif unit in ['days', 'hours', 'minutes', 'seconds']:\n            _base = _base - datetime.timedelta(**{unit: _val})\n    return _base","label":0}
{"text":"public function execute($inputParams = [])\n    {\n        $bingID = $this->pdo->getBingId();\n        $pool = $this->pdo->pool;\n        if(!empty($inputParams)){\n            $this->_boundColumns = $inputParams;\n        }\n        if(!empty($this->_boundColumns)){\n            $this->prepareParamName();\n            $this->_resultData = $pool->prepareAndExecute($this->statement,$this->_boundColumns,$bingID);\n            $this->pdo->setLastInsertId($this->_resultData->insert_id);\n        }else{\n            $this->_resultData = $pool->doQuery($this->statement,$bingID);\n        }\n        if($this->_resultData->result === false){\n            throw new PDOException($this->_resultData->error);\n        }\n        return true;\n    }","label":0}
{"text":"public function render($page, array $params = null)\n    {\n        $this->setFile($page);\n\n        try {\n            if (! file_exists($file = $this->getFile())) {\n                throw new NotFoundException(\"Template file couldn't be found: \" . $file);\n            }\n\n            if (! empty($params)) {\n                $this->assign($params);\n            }\n            \n            $template = $this->tryCompile($file);\n        } catch (Exception $e) {\n            $this->flushSections();\n\n            $this->dispatchEvent('exception', $e);\n\n            throw $e;\n        } catch (Throwable $e) {\n            $this->flushSections();\n\n            $this->dispatchEvent('fatal.error', $e);\n\n            throw $e;\n        } finally {\n            $this->renderingCompleted(function () {\n                $this->dispatchEvent('rendering.completed');\n\n                $this->flushSections();\n\n                $this->onEventEmitterEnabled(function ($emitter) {\n                    $emitter->removeAllListeners();\n                });\n\n                unset($this->vars, $this->shared, $this->customDirectives); \/\/ Free the memory\n            });\n        }\n\n        return $template;\n    }","label":0}
{"text":"def get_parent_parser():\n    \n    parent_parser = argparse.ArgumentParser(add_help=False)\n\n    log_level_group = parent_parser.add_mutually_exclusive_group()\n    log_level_group.add_argument(\n        \"-q\", \"--quiet\", action=\"store_true\", default=False, help=\"Be quiet.\"\n    )\n    log_level_group.add_argument(\n        \"-v\",\n        \"--verbose\",\n        action=\"store_true\",\n        default=False,\n        help=\"Be verbose.\",\n    )\n\n    return parent_parser","label":0}
{"text":"func NewTimer(interval time.Duration) *Timer {\n\ttm := &Timer{\n\t\tmsg: make(chan typeAction),\n\t}\n\ttm.interval.Set(interval)\n\treturn tm\n}","label":0}
{"text":"public function num_rows()\n\t{\n\t\t\/\/ sqlsrv_num_rows() doesn't work with the FORWARD and DYNAMIC cursors (FALSE is the same as FORWARD)\n\t\tif ( ! in_array($this->scrollable, array(FALSE, SQLSRV_CURSOR_FORWARD, SQLSRV_CURSOR_DYNAMIC), TRUE))\n\t\t{\n\t\t\treturn parent::num_rows();\n\t\t}\n\n\t\treturn is_int($this->num_rows)\n\t\t\t? $this->num_rows\n\t\t\t: $this->num_rows = sqlsrv_num_rows($this->result_id);\n\t}","label":0}
{"text":"public function expand(array $options = array(), $dynamic = false)\n    {\n        $mux   = new Mux();\n        $target = $dynamic ? $this : $this->getClass();\n        $mux->add('\/:id', [$target, 'updateAction'], array_merge($options, array('method' => REQUEST_METHOD_POST   )));\n        $mux->add('\/:id', [$target, 'loadAction'],   array_merge($options, array('method' => REQUEST_METHOD_GET    )));\n        $mux->add('\/:id', [$target, 'deleteAction'], array_merge($options, array('method' => REQUEST_METHOD_DELETE )));\n        $mux->add('', [$target, 'createAction'],     array_merge($options, array('method' => REQUEST_METHOD_POST   )));\n        $mux->add('', [$target, 'collectionAction'], array_merge($options, array('method' => REQUEST_METHOD_GET    )));\n        return $mux;\n    }","label":0}
{"text":"function onServices() {\n  \/\/debug('onServices');\n  var numServices = Object.keys(this.services).length;\n  if (!this.properties.tethering && numServices > 0) {\n    \/\/debug('update servicesCache');\n    _servicesCache = this.services;\n  }\n}","label":0}
{"text":"public static String readResource(String path)\n    {\n        Class<?> callerClass = resolveCaller();\n        if (callerClass == null)\n        {\n            return null;\n        }\n\n        return readResource(resolveCaller(), path);\n    }","label":0}
{"text":"private function checkFieldsMapType($fieldsMap)\n    {\n        if (!is_array($fieldsMap) && !$fieldsMap instanceof \\ArrayAccess) {\n            throw new \\InvalidArgumentException(sprintf(\n                'Parameter fieldsMap passed to %s should be an array or \\ArrayAccess.'\n                .' Given: %s',\n                __CLASS__,\n                is_object($fieldsMap) ? get_class($fieldsMap) : gettype($fieldsMap)\n            ));\n        }\n    }","label":0}
{"text":"public function doFinalInitialization()\n    {\n        \/\/ add the referrers for the foreign keys\n        $this->setupTableReferrers();\n\n        \/\/ execute database behaviors\n        foreach ($this->getBehaviors() as $behavior) {\n            $behavior->modifyDatabase();\n        }\n\n        \/\/ execute table behaviors (may add new tables and new behaviors)\n        while ($behavior = $this->getNextTableBehavior()) {\n            $behavior->getTableModifier()->modifyTable();\n            $behavior->setTableModified(true);\n        }\n\n        \/\/ do naming and heavy indexing\n        foreach ($this->tables as $table) {\n            $table->doFinalInitialization();\n            \/\/ setup referrers again, since final initialization may have added columns\n            $table->setupReferrers(true);\n        }\n    }","label":0}
{"text":"def main():\n    \"\"\"\"\"\"\n\n    desc = 'Converts between geodetic, modified apex, quasi-dipole and MLT'\n    parser = argparse.ArgumentParser(description=desc, prog='apexpy')\n\n    parser.add_argument('source', metavar='SOURCE',\n                        choices=['geo', 'apex', 'qd', 'mlt'],\n                        help='Convert from {geo, apex, qd, mlt}')\n    parser.add_argument('dest', metavar='DEST',\n                        choices=['geo', 'apex', 'qd', 'mlt'],\n                        help='Convert to {geo, apex, qd, mlt}')\n    desc = 'YYYY[MM[DD[HHMMSS]]] date\/time for IGRF coefficients, time part '\n    desc += 'required for MLT calculations'\n    parser.add_argument('date', metavar='DATE', help=desc)\n    parser.add_argument('--height', dest='height', default=0, metavar='HEIGHT',\n                        type=float, help='height for conversion')\n    parser.add_argument('--refh', dest='refh', metavar='REFH', type=float,\n                        default=0,\n                        help='reference height for modified apex coordinates')\n\n    parser.add_argument('-i', '--input', dest='file_in', metavar='FILE_IN',\n                        type=argparse.FileType('r'), default=STDIN,\n                        help='input file (stdin if none specified)')\n    parser.add_argument('-o', '--output', dest='file_out', metavar='FILE_OUT',\n                        type=argparse.FileType('wb'), default=STDOUT,\n                        help='output file (stdout if none specified)')\n\n    args = parser.parse_args()\n\n    array = np.loadtxt(args.file_in, ndmin=2)\n\n    if 'mlt' in [args.source, args.dest] and len(args.date) < 14:\n        desc = 'full date\/time YYYYMMDDHHMMSS required for MLT calculations'\n        raise ValueError(desc)\n    if 9 <= len(args.date) <= 13:\n        desc = 'full date\/time must be given as YYYYMMDDHHMMSS, not ' + \\\n               'YYYYMMDDHHMMSS'[:len(args.date)]\n        raise ValueError(desc)\n    datetime = dt.datetime.strptime(args.date,\n                                    '%Y%m%d%H%M%S'[:len(args.date)-2])\n    A = apexpy.Apex(date=datetime, refh=args.refh)\n    lats, lons = A.convert(array[:, 0], array[:, 1], args.source, args.dest,\n                           args.height, datetime=datetime)\n    np.savetxt(args.file_out, np.column_stack((lats, lons)), fmt='%.8f')","label":0}
{"text":"def _collate(self, batch):\n        \n\n        Y_batch = None\n        if isinstance(batch[0], tuple):\n            batch, Y_batch = list(zip(*batch))\n            Y_batch = self._cuda(torch.Tensor(Y_batch))\n\n        f_batch, v_batch = list(zip(*batch))\n\n        f_batch, _ = pad_batch(f_batch, 0)\n        v_batch, _ = pad_batch(v_batch, 0, type=\"float\")\n\n        f_batch = self._cuda(f_batch)\n        v_batch = self._cuda(v_batch)\n\n        if Y_batch is not None:\n            return [f_batch, v_batch], Y_batch\n        else:\n            return [f_batch, v_batch]","label":0}
{"text":"private String getUserFromUniqueID(String id) {\n        if (id == null) {\n            return \"\";\n        }\n        id = id.trim();\n        int realmDelimiterIndex = id.indexOf(\"\/\");\n        if (realmDelimiterIndex < 0) {\n            return \"\";\n        } else {\n            return id.substring(realmDelimiterIndex + 1);\n        }\n    }","label":0}
{"text":"protected function changeQueueCount($queueCounter)\n    {\n        if ($queueCounter < 0) {\n            $queueCounter = 0;\n        }\n        $this->_poolClientQueueCounter = $queueCounter;\n        \/\/Automatically change client state to `ClientInterface::CLIENT_POOL_STATE_READY` on empty queue\n        if ($this->_poolClientQueueCounter === 0 && $this->_poolClientState === PoolClientInterface::CLIENT_POOL_STATE_BUSY) {\n            $this->changeState(PoolClientInterface::CLIENT_POOL_STATE_READY);\n        } elseif ($this->_poolClientQueueCounter > 0 && $this->_poolClientState === PoolClientInterface::CLIENT_POOL_STATE_READY) {\n            $this->changeState(PoolClientInterface::CLIENT_POOL_STATE_BUSY);\n        }\n        $this->emit(PoolClientInterface::CLIENT_POOL_EVENT_CHANGE_QUEUE, [$queueCounter]);\n    }","label":0}
{"text":"func (s *Store) IsDir(ctx context.Context, name string) bool {\n\tpath := filepath.Join(s.path, filepath.Clean(name))\n\tisDir := fsutil.IsDir(path)\n\tout.Debug(ctx, \"fs.Isdir(%s) - %s -> %t\", name, path, isDir)\n\treturn isDir\n}","label":0}
{"text":"def update_callback(self, handle, events):\n        \"\"\"\"\"\"\n        if self._poll is None:\n            raise RuntimeError('poll instance is closed')\n        if not has_callback(self, handle):\n            raise ValueError('no such callback')\n        if events & ~(READABLE|WRITABLE):\n            raise ValueError('illegal event mask: {}'.format(events))\n        if handle.extra == events:\n            return\n        if handle.extra & READABLE:\n            self._readers -= 1\n        if handle.extra & WRITABLE:\n            self._writers -= 1\n        if events & READABLE:\n            self._readers += 1\n        if events & WRITABLE:\n            self._writers += 1\n        handle.extra = events\n        self._sync()","label":0}
{"text":"@Nonnull\n  public CSSExpression addNumber (@Nonnegative final int nIndex, final float fValue)\n  {\n    return addMember (nIndex, new CSSExpressionMemberTermSimple (fValue));\n  }","label":0}
{"text":"func compareSegmentType(a, b segment) int {\n\tsegs := []segment{a, b}\n\tranks := make([]int, 2)\n\tfor i, seg := range segs {\n\t\tswitch seg.(type) {\n\t\tcase literal:\n\t\t\tranks[i] = 3\n\t\tcase glob:\n\t\t\tranks[i] = 2\n\t\tcase alternation:\n\t\t\tranks[i] = 1\n\t\tcase fullglob:\n\t\t\tranks[i] = 0\n\t\tdefault:\n\t\t\tpanic(\"Bad type for segment!\")\n\t\t}\n\t}\n\n\tswitch {\n\tcase ranks[0] < ranks[1]:\n\t\treturn -1\n\tcase ranks[0] > ranks[1]:\n\t\treturn 1\n\tdefault:\n\t\treturn 0\n\t}\n}","label":0}
{"text":"function handlePlainCharacter(element, char) {\n  const prefix = element[typedPrefixKey] || '';\n  element[typedPrefixKey] = prefix + char;\n  element.selectItemWithTextPrefix(element[typedPrefixKey]);\n  setPrefixTimeout(element);\n}","label":0}
{"text":"public function handle()\n    {\n        $prefix = trim($this->option('prefix'));\n        $max = trim($this->option('max'));\n        $next = trim($this->option('next'));\n\n        \/**\n         * @var Client\n         *\/\n        $client = $this->mns;\n        if (!$client) {\n            $this->error('\u8bf7\u5148\u914d\u7f6e\u963f\u91cc\u4e91MSN\u670d\u52a1\uff0c\u5e76\u5728DI\u91cc\u9762\u6ce8\u518c');\n\n            return;\n        }\n\n        $request = new ListTopicRequest($max, $prefix, $next);\n        try {\n            $data = [];\n            $res = $client->listTopic($request);\n            if ($res->isSucceed()) {\n                foreach ($res->getTopicNames() as $topicName) {\n                    $topic['name'] = $topicName;\n                    $topicRef = $client->getTopicRef($topicName);\n\n                    \/* @var \\AliyunMNS\\Model\\TopicAttributes $attr *\/\n                    $attr = $topicRef->getAttribute()->getTopicAttributes();\n\n                    $topic['msgCount'] = $attr->getMessageCount();\n                    $topic['maxSize'] = $attr->getMaximumMessageSize();\n                    $topic['ttl'] = $attr->getMessageRetentionPeriod();\n                    $topic['createTime'] = date('Y-m-d H:i:s', $attr->getCreateTime());\n                    $topic['updateTime'] = date('Y-m-d H:i:s', $attr->getLastModifyTime());\n                    $topic['loggingEnabled'] = $attr->getLoggingEnabled() ? 'Y' : 'N';\n                    $data[] = $topic;\n                }\n            }\n\n\n            $topicHeaders = ['Name', 'MsgCount', 'MaxSize', 'TTL', 'CreateTime', 'UpdateTime', 'EnableLog'];\n            $this->line('List of Topics:');\n            $this->table($topicHeaders, $data);\n        } catch (\\Exception $e) {\n            $this->error($e->getMessage());\n        }\n    }","label":0}
{"text":"private void visit_OP_ADD_or_OP_CLOSE(FSEditLogOpCodes editsOpCode)\n      throws IOException {\n      visitTxId();\n      if (!LayoutVersion.supports(Feature.EDITLOG_OP_OPTIMIZATION, editsVersion)) {\n        IntToken opAddLength = v.visitInt(EditsElement.LENGTH);\n        \/\/ this happens if the edits is not properly ended (-1 op code),\n        \/\/ it is padded at the end with all zeros, OP_ADD is zero so\n        \/\/ without this check we would treat all zeros as empty OP_ADD)\n        if (opAddLength.value == 0) {\n          throw new IOException(\"OpCode \" + editsOpCode\n              + \" has zero length (corrupted edits)\");\n        }\n      }\n      \n      v.visitStringUTF8(EditsElement.PATH);\n      \n      if (LayoutVersion.supports(Feature.ADD_INODE_ID, editsVersion)) {\n        v.visitLong(EditsElement.INODE_ID);\n      }\n      \n      if (LayoutVersion.supports(Feature.EDITLOG_OP_OPTIMIZATION, editsVersion)) {\n        v.visitShort(EditsElement.REPLICATION);\n        v.visitLong(EditsElement.MTIME);\n        v.visitLong(EditsElement.ATIME);\n        v.visitLong(EditsElement.BLOCKSIZE);\n      } else {\n        v.visitStringUTF8(EditsElement.REPLICATION);\n        v.visitStringUTF8(EditsElement.MTIME);\n        v.visitStringUTF8(EditsElement.ATIME);\n        v.visitStringUTF8(EditsElement.BLOCKSIZE);\n      }\n      \/\/ now read blocks\n      visit_Blocks();\n      \n      \/\/ PERMISSION_STATUS\n      v.visitEnclosingElement(EditsElement.PERMISSION_STATUS);\n\n      v.visitStringText( EditsElement.USERNAME);\n      v.visitStringText( EditsElement.GROUPNAME);\n      v.visitShort(      EditsElement.FS_PERMISSIONS);\n\n      v.leaveEnclosingElement();\n      if(editsOpCode == FSEditLogOpCodes.OP_ADD) {\n        v.visitStringUTF8(EditsElement.CLIENT_NAME);\n        v.visitStringUTF8(EditsElement.CLIENT_MACHINE);\n      }\n    }","label":0}
{"text":"def create_calcs(self):\n        \"\"\"\"\"\"\n        specs = self._combine_core_aux_specs()\n        for spec in specs:\n            spec['dtype_out_time'] = _prune_invalid_time_reductions(spec)\n        return [Calc(**sp) for sp in specs]","label":0}
{"text":"def _cli_check_ref_format(fmt):\n    ''''''\n\n    if fmt is None:\n        return None\n\n    fmt = fmt.lower()\n    if not fmt in api.get_reference_formats():\n        errstr = \"Reference format '\" + fmt + \"' does not exist.\\n\"\n        errstr += \"For a complete list of formats, use the 'bse list-ref-formats' command\"\n        raise RuntimeError(errstr)\n\n    return fmt","label":0}
{"text":"function (options, iterationInfo) {\n        var files;\n        var modules = {};\n\n        \/\/ check if the counter has reached the desired depth indicated in options.depth\n        if (typeof options.depth !== 'undefined' &&\n            iterationInfo.currentDepth >= options.depth) {\n            return;\n        }\n\n        \/\/ remember the starting directory\n        try {\n            files = fs.readdirSync(iterationInfo.dirName);\n        } catch (e) {\n            if (options.optional)\n                return {};\n            else\n                throw new Error('Directory not found: ' + iterationInfo.dirName);\n        }\n\n        \/\/ iterate through files in the current directory\n        files.forEach(function (fileName) {\n            iterationInfo.fileName = fileName;\n            \/\/get absolute path\n            iterationInfo.absolutePath = rtrim(iterationInfo.dirName, '\/');\n            iterationInfo.absoluteFullPath = iterationInfo.absolutePath + '\/' + fileName;\n            \/\/get relative path\n            iterationInfo.relativePath = iterationInfo.absolutePath.replace(iterationInfo.initialDirName, '');\n            iterationInfo.relativeFullPath = iterationInfo.absoluteFullPath.replace(iterationInfo.initialDirName, '');\n            \/\/ make sure a slash exists on the left side of relative paths\n            iterationInfo.relativePath = '\/' + ltrim(iterationInfo.relativePath, '\/');\n            iterationInfo.relativeFullPath = '\/' + ltrim(iterationInfo.relativeFullPath, '\/');\n\n            if (fs.statSync(iterationInfo.absoluteFullPath).isDirectory()) {\n                processDirectory(options, iterationInfo, modules)\n            }\n            else {\n                processFile(options, iterationInfo, modules);\n            }\n        });\n\n        return modules;\n    }","label":0}
{"text":"def diffs\n      params[:sort] ||= \"image_file_size desc\"\n      @diffs = UiChanged::Screenshot.search(params[:search]).not_in_ignored.where(:diff_found => true).paginate(:page => params[:page],\n                                                                                  :per_page => params[:per_page],\n                                                                                  :order => params[:sort])\n      @all_screenshots = []\n      @diffs.each do |diff|\n        control = UiChanged::Screenshot.find(diff.control_id)\n        test = UiChanged::Screenshot.find(diff.test_id)\n        @all_screenshots << UiChanged::AllScreenshot.new(control, test, diff)\n      end\n    end","label":0}
{"text":"private void setTutionRequestedYears(Budget budget) {\n        ProposalDevelopmentBudgetExtContract budgetEx = s2SCommonBudgetService.getBudget(pdDoc.getDevelopmentProposal());\n\t\tif (budgetEx == null) {\n\t\t\treturn;\n\t\t}\n\t\tScaleTwoDecimal tutionTotal = ScaleTwoDecimal.ZERO;\n\t\tfor (BudgetPeriodContract budgetPeriod : budgetEx\n\t\t\t\t.getBudgetPeriods()) {\n\t\t\tScaleTwoDecimal tution = ScaleTwoDecimal.ZERO;\n\t\t\tfor (BudgetLineItemContract budgetLineItem : budgetPeriod.getBudgetLineItems()) {\n\t\t\t\tif (getCostElementsByParam(ConfigurationConstants.TUITION_COST_ELEMENTS).contains(budgetLineItem.getCostElementBO().getCostElement())) {\n\t\t\t\t\ttution = tution.add(budgetLineItem.getLineItemCost());\n\t\t\t\t}\n\t\t\t}\n\t\t\ttutionTotal = tutionTotal.add(tution);\n\t\t\tswitch (budgetPeriod.getBudgetPeriod()) {\n\t\t\tcase 1:\n\t\t\t\tbudget.setTuitionRequestedYear1(tution.bigDecimalValue());\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tbudget.setTuitionRequestedYear2(tution.bigDecimalValue());\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\tbudget.setTuitionRequestedYear3(tution.bigDecimalValue());\n\t\t\t\tbreak;\n\t\t\tcase 4:\n\t\t\t\tbudget.setTuitionRequestedYear4(tution.bigDecimalValue());\n\t\t\t\tbreak;\n\t\t\tcase 5:\n\t\t\t\tbudget.setTuitionRequestedYear5(tution.bigDecimalValue());\n\t\t\t\tbreak;\n\t\t\tcase 6:\n\t\t\t\tbudget.setTuitionRequestedYear6(tution.bigDecimalValue());\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tbudget.setTuitionRequestedTotal(tutionTotal.bigDecimalValue());\n\t\tif (!tutionTotal.equals(ScaleTwoDecimal.ZERO)) {\n\t\t\tbudget.setTuitionAndFeesRequested(YesNoDataType.Y_YES);\n\t\t}\n\t}","label":0}
{"text":"def get_degree_cols(df):\n    \n    vals = ['lon_w', 'lon_e', 'lat_lon_precision', 'pole_lon',\n            'paleolon', 'paleolon_sigma',\n            'lon', 'lon_sigma', 'vgp_lon', 'paleo_lon', 'paleo_lon_sigma',\n            'azimuth', 'azimuth_dec_correction', 'dir_dec',\n            'geographic_precision', 'bed_dip_direction']\n    relevant_cols = list(set(vals).intersection(df.columns))\n    return relevant_cols","label":0}
{"text":"protected function _read($length = null) {\n\t\tif (!$this->connected) {\n\t\t\t$message = 'No connection found while reading data from socket.';\n\t\t\tthrow new RuntimeException($message);\n\t\t}\n\t\tif ($length) {\n\t\t\tif (feof($this->_connection)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t$data = stream_get_contents($this->_connection, $length + 2);\n\t\t\t$meta = stream_get_meta_data($this->_connection);\n\n\t\t\tif ($meta['timed_out']) {\n\t\t\t\t$message = 'Connection timed out while reading data from socket.';\n\t\t\t\tthrow new RuntimeException($message);\n\t\t\t}\n\t\t\t$packet = rtrim($data, \"\\r\\n\");\n\t\t} else {\n\t\t\t$packet = stream_get_line($this->_connection, 16384, \"\\r\\n\");\n\t\t}\n\t\treturn $packet;\n\t}","label":0}
{"text":"def time_sp(self):\n        \n        self._time_sp, value = self.get_attr_int(self._time_sp, 'time_sp')\n        return value","label":0}
{"text":"func (in *DeploymentTriggerPolicy) DeepCopyInto(out *DeploymentTriggerPolicy) {\n\t*out = *in\n\tif in.ImageChangeParams != nil {\n\t\tin, out := &in.ImageChangeParams, &out.ImageChangeParams\n\t\t*out = new(DeploymentTriggerImageChangeParams)\n\t\t(*in).DeepCopyInto(*out)\n\t}\n\treturn\n}","label":0}
{"text":"func timeRangesCoverEntries(merger timeRangeMerger, entries []IndexEntry) (covers bool) {\n\tif len(entries) == 0 {\n\t\treturn true\n\t}\n\n\tmustCover := entries[0].MinTime\n\tts, ok := merger.Pop()\n\n\tfor len(entries) > 0 && ok {\n\t\tswitch {\n\t\t\/\/ If the tombstone does not include mustCover, we\n\t\t\/\/ know we do not fully cover every entry.\n\t\tcase ts.Min > mustCover:\n\t\t\treturn false\n\n\t\t\/\/ Otherwise, if the tombstone covers the rest of\n\t\t\/\/ the entry, consume it and bump mustCover to the\n\t\t\/\/ start of the next entry.\n\t\tcase ts.Max >= entries[0].MaxTime:\n\t\t\tentries = entries[1:]\n\t\t\tif len(entries) > 0 {\n\t\t\t\tmustCover = entries[0].MinTime\n\t\t\t}\n\n\t\t\/\/ Otherwise, we're still inside of an entry, and\n\t\t\/\/ so the tombstone must adjoin the current tombstone.\n\t\tdefault:\n\t\t\tif ts.Max >= mustCover {\n\t\t\t\tmustCover = ts.Max + 1\n\t\t\t}\n\t\t\tts, ok = merger.Pop()\n\t\t}\n\t}\n\n\treturn len(entries) == 0\n}","label":0}
{"text":"function $rands(params) {\n    if (\n        Array.isArray(params) &&\n        params.length === 2 &&\n        Array.isArray(params[0]) &&\n        typeof params[1] === 'number'\n    ) {\n        return Array(params[1])\n            .fill()\n            .map(() =>\n                params[0].splice(\n                    Math.floor(Math.random() * params[0].length),\n                    1\n                )\n            )[0];\n    }\n    throw new Error(\n        '$rands expects an array of two elements of which the first must be an array and the second be a number'\n    );\n}","label":0}
{"text":"public function toStorageValue(FieldValue $value, StorageFieldValue $storageFieldValue)\n    {\n        $storageFieldValue->dataInt = $value->data ? 1 : null;\n    }","label":0}
{"text":"protected function getListBackup()\n    {\n        $options = $this->query_filter;\n        $options['limit'] = $this->data_limit;\n        return $this->backup->getList($options);\n    }","label":0}
{"text":"public function addHashPrefixes($prefixes, $list)\n  {\n    $listdir=$this->getListStorageDir($list);\n    if(!is_dir($listdir)){\n      mkdir($listdir, 0777, true);\n    }\n    $new_prefixes=array_map('bin2hex',$prefixes);\n    if(is_file($listdir.$this->prefixes_filename)){\n      $existing_prefixes=explode(\"\\n\",file_get_contents($listdir.$this->prefixes_filename));\n      foreach($new_prefixes as $new_prefix){\n        $existing_prefixes[]=$new_prefix;\n      }\n      sort($existing_prefixes,SORT_STRING);\n      file_put_contents($listdir.'prefixes', implode(\"\\n\",$existing_prefixes));\n    }else{\n      sort($new_prefixes,SORT_STRING);\n      file_put_contents($listdir.'prefixes', implode(\"\\n\",$new_prefixes));\n    }\n    $this->debugLog('addHashPrefixes() added '.count($new_prefixes).' prefixes to list '.$list);\n  }","label":0}
{"text":"protected final String getDate(final Attribute attr) {\n        final GetDateVisitor visitor = new GetDateVisitor();\n        attr.accept(visitor);\n        return visitor.getDate();\n    }","label":0}
{"text":"@Nonnull\n\tpublic static LDblToCharFunction dblToCharFunctionFrom(Consumer<LDblToCharFunctionBuilder> buildingFunction) {\n\t\tLDblToCharFunctionBuilder builder = new LDblToCharFunctionBuilder();\n\t\tbuildingFunction.accept(builder);\n\t\treturn builder.build();\n\t}","label":0}
{"text":"func (s *NodeSummary) SetStatus(v string) *NodeSummary {\n\ts.Status = &v\n\treturn s\n}","label":0}
{"text":"private void parseAttributeStatements(BufferedReader br, ArrayList<String> names, ArrayList<String> types) throws IOException {\n    String line;\n    \/\/ Load attribute metadata\n    while(true) {\n      line = br.readLine();\n      if(line == null) {\n        throw new AbortException(ARFF_HEADER_DATA + \" not found in file.\");\n      }\n      \/\/ Skip comments and empty lines\n      if(ARFF_COMMENT.reset(line).matches() || EMPTY.reset(line).matches()) {\n        continue;\n      }\n      \/\/ Break on data statement to continue\n      if(ARFF_HEADER_DATA.reset(line).matches()) {\n        break;\n      }\n      \/\/ Expect an attribute specification\n      Matcher matcher = ARFF_HEADER_ATTRIBUTE.reset(line);\n      if(matcher.matches()) {\n        String name = matcher.group(1);\n        if(name.charAt(0) == '\\'' && name.charAt(name.length() - 1) == '\\'') {\n          name = name.substring(1, name.length() - 1);\n        }\n        else if(name.charAt(0) == '\"' && name.charAt(name.length() - 1) == '\"') {\n          name = name.substring(1, name.length() - 1);\n        }\n        String type = matcher.group(2);\n        names.add(name);\n        types.add(type);\n        \/\/ logger.warning(\"Attribute name: \" + name + \" type: \" + type);\n        continue;\n      }\n      throw new AbortException(\"Unrecognized line: \" + line);\n    }\n    assert (names.size() == types.size());\n  }","label":0}
{"text":"private void processFile(InputStream is) throws MPXJException\n   {\n      int line = 1;\n\n      try\n      {\n         \/\/\n         \/\/ Test the header and extract the separator. If this is successful,\n         \/\/ we reset the stream back as far as we can. The design of the\n         \/\/ BufferedInputStream class means that we can't get back to character\n         \/\/ zero, so the first record we will read will get \"RMHDR\" rather than\n         \/\/ \"ERMHDR\" in the first field position.\n         \/\/\n         BufferedInputStream bis = new BufferedInputStream(is);\n         byte[] data = new byte[6];\n         data[0] = (byte) bis.read();\n         bis.mark(1024);\n         bis.read(data, 1, 5);\n\n         if (!new String(data).equals(\"ERMHDR\"))\n         {\n            throw new MPXJException(MPXJException.INVALID_FILE);\n         }\n\n         bis.reset();\n\n         InputStreamReader reader = new InputStreamReader(bis, getCharset());\n         Tokenizer tk = new ReaderTokenizer(reader);\n         tk.setDelimiter('\\t');\n         List<String> record = new ArrayList<String>();\n\n         while (tk.getType() != Tokenizer.TT_EOF)\n         {\n            readRecord(tk, record);\n            if (!record.isEmpty())\n            {\n               if (processRecord(record))\n               {\n                  break;\n               }\n            }\n            ++line;\n         }\n      }\n\n      catch (Exception ex)\n      {\n         throw new MPXJException(MPXJException.READ_ERROR + \" (failed at line \" + line + \")\", ex);\n      }\n   }","label":0}
{"text":"public function changeNotifications(Request $request)\n    {\n        $this->validate(\n            $request,\n            [\n                'notifications' => 'required|array',\n            ]\n        );\n\n        foreach ($request->input('notifications') as $notification => $enable) {\n            Auth::user()->setNotification($notification, $enable);\n        }\n\n        Auth::user()->save();\n\n        return redirect()->back()->withStatus(trans('mustard::account.notifications_changed'));\n    }","label":0}
{"text":"private void initializeLandscapeListListener() {\n    instructionLayoutText.setOnClickListener(new OnClickListener() {\n      @Override\n      public void onClick(View instructionLayoutText) {\n        boolean instructionsVisible = instructionListLayout.getVisibility() == VISIBLE;\n        if (!instructionsVisible) {\n          showInstructionList();\n        } else {\n          hideInstructionList();\n        }\n      }\n    });\n  }","label":0}
{"text":"func init() {\n\tKindBinders[reflect.Int] = IntBinder\n\tKindBinders[reflect.Int8] = IntBinder\n\tKindBinders[reflect.Int16] = IntBinder\n\tKindBinders[reflect.Int32] = IntBinder\n\tKindBinders[reflect.Int64] = IntBinder\n\n\tKindBinders[reflect.Uint] = UintBinder\n\tKindBinders[reflect.Uint8] = UintBinder\n\tKindBinders[reflect.Uint16] = UintBinder\n\tKindBinders[reflect.Uint32] = UintBinder\n\tKindBinders[reflect.Uint64] = UintBinder\n\n\tKindBinders[reflect.Float32] = FloatBinder\n\tKindBinders[reflect.Float64] = FloatBinder\n\n\tKindBinders[reflect.String] = StringBinder\n\tKindBinders[reflect.Bool] = BoolBinder\n\tKindBinders[reflect.Slice] = Binder{bindSlice, unbindSlice}\n\tKindBinders[reflect.Struct] = Binder{bindStruct, unbindStruct}\n\tKindBinders[reflect.Ptr] = PointerBinder\n\tKindBinders[reflect.Map] = MapBinder\n\n\tTypeBinders[reflect.TypeOf(time.Time{})] = TimeBinder\n\n\t\/\/ Uploads\n\tTypeBinders[reflect.TypeOf(&os.File{})] = Binder{bindFile, nil}\n\tTypeBinders[reflect.TypeOf([]byte{})] = Binder{bindByteArray, nil}\n\tTypeBinders[reflect.TypeOf((*io.Reader)(nil)).Elem()] = Binder{bindReadSeeker, nil}\n\tTypeBinders[reflect.TypeOf((*io.ReadSeeker)(nil)).Elem()] = Binder{bindReadSeeker, nil}\n\n\tOnAppStart(func() {\n\t\tDateTimeFormat = Config.StringDefault(\"format.datetime\", DefaultDateTimeFormat)\n\t\tDateFormat = Config.StringDefault(\"format.date\", DefaultDateFormat)\n\t\tTimeFormats = append(TimeFormats, DateTimeFormat, DateFormat)\n\t})\n}","label":0}
{"text":"private String[] getColumnNames(ResultSetMetaData rsmd) throws Exception {\n        ArrayList<String> names = new ArrayList<String>();\n\n        \/\/ Get result set meta data\n        int numColumns = rsmd.getColumnCount();\n\n        \/\/ Get the column names; column indices start from 1\n        for (int i = 1; i < numColumns + 1; i++) {\n            String columnName = rsmd.getColumnName(i);\n\n            names.add(columnName);\n        }\n\n        return names.toArray(new String[0]);\n    }","label":0}
{"text":"public static StanzaIdElement getStanzaId(Message message) {\n        return message.getExtension(StanzaIdElement.ELEMENT, StableUniqueStanzaIdManager.NAMESPACE);\n    }","label":0}
{"text":"public static function getUrlQuery(array $array_query)\n    {\n        $tmp = [];\n        foreach ($array_query as $name => $value) {\n            if (is_array($value)) {\n                foreach ($value as $k => $v) {\n                    $tmp[] = \"{$name}[{$k}]={$v}\";\n                }\n            } else {\n                $tmp[] = \"{$name}={$value}\";\n            }\n        }\n        \n        return implode('&', $tmp);\n    }","label":0}
{"text":"public function send()\n    {\n        $responses = new \\StdClass();\n\n        foreach ($this->resources as $key => $promise) {\n            $response = $promise->wait();\n            $responses->{$key} = $this->parse($response->getBody());\n        }\n\n        return $responses;\n    }","label":0}
{"text":"protected static function renderXML($file, $params)\n    {\n        \/\/ check if already loaded\n        if (empty(static::$xml[$file])) {\n            \/\/ load if file not loaded\n            static::$xml[$file] = file_get_contents(__DIR__ . '\/xml\/'.$file.'.xml');\n        }\n\n        \/\/ build the search and replace arrays\n        $search = [];\n        $replace = [];\n\n        foreach ($params as $key => $value) {\n            $search[] = ':'.$key;\n            $replace[] = $value;\n        }\n\n        \/\/ return the rendered file\n        return str_replace($search, $replace, static::$xml[$file]);\n    }","label":0}
{"text":"func (s *Hdr10Metadata) SetWhitePointY(v int64) *Hdr10Metadata {\n\ts.WhitePointY = &v\n\treturn s\n}","label":0}
{"text":"def create\n      @workflow = Workflow.new(workflow_params)\n\n\n      respond_to do |format|\n        if @workflow.save\n          format.html {\n            if(@workflow.stages.count > 1)\n              redirect_to configure_stages_workflow_path(@workflow), notice: 'Workflow was successfully created. Please configure transitions.'\n            else\n              redirect_to @workflow, notice: 'Workflow was successfully created.'\n            end\n\n          }\n          format.json { render json: @workflow, status: :created, location: @workflow }\n        else\n          format.html { render action: \"new\" }\n          format.json { render json: @workflow.errors, status: :unprocessable_entity }\n        end\n      end\n    end","label":0}
{"text":"def set_cache_impl(self, cache_impl, maxsize, **kwargs):\n        \n        new_cache = self._get_cache_impl(cache_impl, maxsize, **kwargs)\n        self._populate_new_cache(new_cache)\n        self.cache = new_cache","label":0}
{"text":"private function _serializeCallback( $callback )\n    {\n        $retVal = $callback;\n\n        if ( is_array( $callback ) && 2 === count( $callback ) )\n        {\n            $retVal = get_class( $callback[ 0 ] ) . '\/' . $callback[ 1 ];\n        }\n\n        return $retVal;\n    }","label":0}
{"text":"public static byte[] decodeToBytes(CharSequence in) throws IOException{\n\t\tif(in == null) return null;\n\t\tByteArrayOutputStream baos = new ByteArrayOutputStream(in.length());\n\t\tdecode(in, baos);\n\t\treturn baos.toByteArray();\n\t}","label":0}
{"text":"func (u *marshalInfo) appendExtensions(b []byte, ext *XXX_InternalExtensions, deterministic bool) ([]byte, error) {\n\tm, mu := ext.extensionsRead()\n\tif m == nil {\n\t\treturn b, nil\n\t}\n\tmu.Lock()\n\tdefer mu.Unlock()\n\n\tvar err error\n\tvar nerr nonFatal\n\n\t\/\/ Fast-path for common cases: zero or one extensions.\n\t\/\/ Don't bother sorting the keys.\n\tif len(m) <= 1 {\n\t\tfor _, e := range m {\n\t\t\tif e.value == nil || e.desc == nil {\n\t\t\t\t\/\/ Extension is only in its encoded form.\n\t\t\t\tb = append(b, e.enc...)\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\t\/\/ We don't skip extensions that have an encoded form set,\n\t\t\t\/\/ because the extension value may have been mutated after\n\t\t\t\/\/ the last time this function was called.\n\n\t\t\tei := u.getExtElemInfo(e.desc)\n\t\t\tv := e.value\n\t\t\tp := toAddrPointer(&v, ei.isptr, ei.deref)\n\t\t\tb, err = ei.marshaler(b, p, ei.wiretag, deterministic)\n\t\t\tif !nerr.Merge(err) {\n\t\t\t\treturn b, err\n\t\t\t}\n\t\t}\n\t\treturn b, nerr.E\n\t}\n\n\t\/\/ Sort the keys to provide a deterministic encoding.\n\t\/\/ Not sure this is required, but the old code does it.\n\tkeys := make([]int, 0, len(m))\n\tfor k := range m {\n\t\tkeys = append(keys, int(k))\n\t}\n\tsort.Ints(keys)\n\n\tfor _, k := range keys {\n\t\te := m[int32(k)]\n\t\tif e.value == nil || e.desc == nil {\n\t\t\t\/\/ Extension is only in its encoded form.\n\t\t\tb = append(b, e.enc...)\n\t\t\tcontinue\n\t\t}\n\n\t\t\/\/ We don't skip extensions that have an encoded form set,\n\t\t\/\/ because the extension value may have been mutated after\n\t\t\/\/ the last time this function was called.\n\n\t\tei := u.getExtElemInfo(e.desc)\n\t\tv := e.value\n\t\tp := toAddrPointer(&v, ei.isptr, ei.deref)\n\t\tb, err = ei.marshaler(b, p, ei.wiretag, deterministic)\n\t\tif !nerr.Merge(err) {\n\t\t\treturn b, err\n\t\t}\n\t}\n\treturn b, nerr.E\n}","label":0}
{"text":"@Override\n    protected void onPersist(EntityMetadata metadata, Object entity, Object id, List<RelationHolder> rlHolders)\n    {\n\n        if (!isOpen())\n        {\n            throw new PersistenceException(\"PelopsClient is closed.\");\n        }\n\n        \/\/ check for counter column\n        if (isUpdate && metadata.isCounterColumnType())\n        {\n            throw new UnsupportedOperationException(\"Invalid operation! Merge is not possible over counter column.\");\n        }\n\n        String insert_Query = null;\n        if (isCql3Enabled(metadata))\n        {\n            Cassandra.Client client = getRawClient(metadata.getSchema());\n            try\n            {\n                cqlClient.persist(metadata, entity, client, rlHolders, getTtlValues().get(metadata.getTableName()));\n            }\n            catch (InvalidRequestException e)\n            {\n                log.error(\"Error during persist while executing query {}, Caused by: .\", insert_Query, e);\n                throw new KunderaException(e);\n            }\n            catch (TException e)\n            {\n                log.error(\"Error during persist while executing query {}, Caused by: .\", insert_Query, e);\n                throw new KunderaException(e);\n            }\n            catch (UnsupportedEncodingException e)\n            {\n                log.error(\"Error during persist while executing query {}, Caused by: .\", insert_Query, e);\n                throw new KunderaException(e);\n            }\n        }\n        else\n        {\n            Collection<ThriftRow> tfRows = null;\n            try\n            {\n                String columnFamily = metadata.getTableName();\n                tfRows = dataHandler.toThriftRow(entity, id, metadata, columnFamily, getTtlValues().get(columnFamily));\n            }\n            catch (Exception e)\n            {\n                log.error(\"Error during persist, Caused by: .\", e);\n                throw new KunderaException(e);\n            }\n            for (ThriftRow tf : tfRows)\n            {\n\n                if (tf.getColumnFamilyName().equals(metadata.getTableName()))\n                {\n                    addRelationsToThriftRow(metadata, tf, rlHolders);\n                }\n                Mutator mutator = clientFactory.getMutator(pool);\n                if (metadata.isCounterColumnType())\n                {\n                    if (log.isInfoEnabled())\n                    {\n                        log.info(\"Persisting counter column family record for row key {}\", tf.getId());\n                    }\n                    List<CounterColumn> thriftCounterColumns = tf.getCounterColumns();\n                    List<CounterSuperColumn> thriftCounterSuperColumns = tf.getCounterSuperColumns();\n                    if (thriftCounterColumns != null && !thriftCounterColumns.isEmpty())\n                    {\n                        mutator.writeCounterColumns(tf.getColumnFamilyName(),\n                                Bytes.fromByteBuffer(CassandraUtilities.toBytes(tf.getId(), tf.getId().getClass())),\n                                Arrays.asList(tf.getCounterColumns().toArray(new CounterColumn[0])));\n                    }\n\n                    if (thriftCounterSuperColumns != null && !thriftCounterSuperColumns.isEmpty())\n                    {\n                        for (CounterSuperColumn sc : thriftCounterSuperColumns)\n                        {\n                            mutator.writeSubCounterColumns(\n                                    tf.getColumnFamilyName(),\n                                    Bytes.fromByteBuffer(CassandraUtilities.toBytes(tf.getId(), tf.getId().getClass())),\n                                    Bytes.fromByteArray(sc.getName()), sc.getColumns());\n                        }\n                    }\n                }\n                else\n                {\n                    List<Column> thriftColumns = tf.getColumns();\n                    List<SuperColumn> thriftSuperColumns = tf.getSuperColumns();\n                    if (thriftColumns != null && !thriftColumns.isEmpty())\n                    {\n                        \/\/ Bytes.from\n                        mutator.writeColumns(tf.getColumnFamilyName(),\n                                Bytes.fromByteBuffer(CassandraUtilities.toBytes(tf.getId(), tf.getId().getClass())),\n                                tf.getColumns());\n                    }\n\n                    if (thriftSuperColumns != null && !thriftSuperColumns.isEmpty())\n                    {\n                        for (SuperColumn sc : thriftSuperColumns)\n                        {\n                            if (log.isInfoEnabled())\n                            {\n                                log.info(\"Persisting super column family record for row key {}\", tf.getId());\n                            }\n\n                            mutator.writeSubColumns(\n                                    tf.getColumnFamilyName(),\n                                    Bytes.fromByteBuffer(CassandraUtilities.toBytes(tf.getId(), tf.getId().getClass())),\n                                    Bytes.fromByteArray(sc.getName()), sc.getColumns());\n                        }\n                    }\n                }\n                mutator.execute(getConsistencyLevel());\n            }\n            tfRows = null;\n            if (isTtlPerRequest())\n            {\n                getTtlValues().clear();\n            }\n        }\n    }","label":0}
{"text":"public function createLink($label, $href = null)\n    {\n        $link = new Link($label, $href);\n        $link->attributes->addAttributeClass('nav-link');\n\n        return $this->createList($link);\n    }","label":0}
{"text":"func (c *Cursor) First() *Position {\n\treturn &Position{IP: c.ps[0].IP, Prefix: c.ps[0]}\n}","label":0}
{"text":"protected function findTableFromName($name)\n    {\n        foreach ($this->tables as $table) {\n            if ($table->getName() === $name) {\n                return $table;\n            }\n        }\n\n        return null;\n    }","label":0}
{"text":"protected function registerQueueWorker()\n    {\n        $this->app->singleton('queue.worker', function () {\n            if ($this->eye->laravelVersionIs('>=', '5.3.0')) {\n                return new Worker($this->app['queue'], $this->app['events'], $this->app[ExceptionHandler::class]);\n            } else {\n                return new WorkerLegacy($this->app['queue'], $this->app['queue.failer'], $this->app['events']);\n            }\n        });\n    }","label":0}
{"text":"public static function isAbsolute($path)\n    {\n        if (($position = strpos($path, '.\/')) !== false && $position <= 2) {\n            return false;\n        }\n        if (strpos($path, ':') !== false) {\n            return true;\n        }\n        if (substr($path, 0, 1) === '\/') {\n            return true;\n        }\n        return false;\n    }","label":0}
{"text":"def render_nocache(self):\n        \n        tmpl = template.Template(''.join([\n            # start by loading the cache library\n            template.BLOCK_TAG_START,\n            'load %s' % self.get_templatetag_module(),\n            template.BLOCK_TAG_END,\n            # and surround the cached template by \"raw\" tags\n            self.RAW_TOKEN_START,\n            self.content,\n            self.RAW_TOKEN_END,\n        ]))\n        return tmpl.render(self.context)","label":0}
{"text":"def create(ctx):\n    \n    import shutil\n\n    this_dir, this_filename = os.path.split(__file__)\n    default_config_file = os.path.join(this_dir, \"apis\/example-config.yaml\")\n    config_file = ctx.obj[\"configfile\"]\n    shutil.copyfile(default_config_file, config_file)\n    print_message(\"Config file created: {}\".format(config_file))","label":0}
{"text":"func (e *executor) executeBulkSetRowAttrs(ctx context.Context, index string, calls []*pql.Call, opt *execOptions) ([]interface{}, error) {\n\tspan, ctx := tracing.StartSpanFromContext(ctx, \"Executor.executeBulkSetRowAttrs\")\n\tdefer span.Finish()\n\n\t\/\/ Collect attributes by field\/id.\n\tm := make(map[string]map[uint64]map[string]interface{})\n\tfor i, c := range calls {\n\t\tif i%10 == 0 {\n\t\t\tif err := validateQueryContext(ctx); err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t}\n\n\t\tfield, ok := c.Args[\"_field\"].(string)\n\t\tif !ok {\n\t\t\treturn nil, errors.New(\"SetRowAttrs() field required\")\n\t\t}\n\n\t\t\/\/ Retrieve field.\n\t\tf := e.Holder.Field(index, field)\n\t\tif f == nil {\n\t\t\treturn nil, ErrFieldNotFound\n\t\t}\n\n\t\trowID, ok, err := c.UintArg(\"_\" + rowLabel)\n\t\tif err != nil {\n\t\t\treturn nil, errors.Wrap(err, \"reading SetRowAttrs() row\")\n\t\t} else if !ok {\n\t\t\treturn nil, fmt.Errorf(\"SetRowAttrs row field '%v' required\", rowLabel)\n\t\t}\n\n\t\t\/\/ Copy args and remove reserved fields.\n\t\tattrs := pql.CopyArgs(c.Args)\n\t\tdelete(attrs, \"_field\")\n\t\tdelete(attrs, \"_\"+rowLabel)\n\n\t\t\/\/ Create field group, if not exists.\n\t\tfieldMap := m[field]\n\t\tif fieldMap == nil {\n\t\t\tfieldMap = make(map[uint64]map[string]interface{})\n\t\t\tm[field] = fieldMap\n\t\t}\n\n\t\t\/\/ Set or merge attributes.\n\t\tattr := fieldMap[rowID]\n\t\tif attr == nil {\n\t\t\tfieldMap[rowID] = cloneAttrs(attrs)\n\t\t} else {\n\t\t\tfor k, v := range attrs {\n\t\t\t\tattr[k] = v\n\t\t\t}\n\t\t}\n\t}\n\n\t\/\/ Bulk insert attributes by field.\n\tfor name, fieldMap := range m {\n\t\t\/\/ Retrieve field.\n\t\tfield := e.Holder.Field(index, name)\n\t\tif field == nil {\n\t\t\treturn nil, ErrFieldNotFound\n\t\t}\n\n\t\t\/\/ Set attributes.\n\t\tif err := field.RowAttrStore().SetBulkAttrs(fieldMap); err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tfield.Stats.Count(\"SetRowAttrs\", 1, 1.0)\n\t}\n\n\t\/\/ Do not forward call if this is already being forwarded.\n\tif opt.Remote {\n\t\treturn make([]interface{}, len(calls)), nil\n\t}\n\n\t\/\/ Execute on remote nodes in parallel.\n\tnodes := Nodes(e.Cluster.nodes).FilterID(e.Node.ID)\n\tresp := make(chan error, len(nodes))\n\tfor _, node := range nodes {\n\t\tgo func(node *Node) {\n\t\t\t_, err := e.remoteExec(ctx, node, index, &pql.Query{Calls: calls}, nil)\n\t\t\tresp <- err\n\t\t}(node)\n\t}\n\n\t\/\/ Return first error.\n\tfor range nodes {\n\t\tif err := <-resp; err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\n\t\/\/ Return a set of nil responses to match the non-optimized return.\n\treturn make([]interface{}, len(calls)), nil\n}","label":0}
{"text":"def findSynonyms(self, word, num):\n        \n        if not isinstance(word, basestring):\n            word = _convert_to_vector(word)\n        words, similarity = self.call(\"findSynonyms\", word, num)\n        return zip(words, similarity)","label":0}
{"text":"@SuppressWarnings({\"unchecked\", \"rawtypes\"})\n    protected void registerDependency(List additionalList, GrailsPlugin plugin) {\n        if (!addedNames.contains(plugin.getName())) {\n            addedNames.add(plugin.getName());\n            additionalList.add(plugin);\n            addPluginDependencies(additionalList, plugin);\n        }\n    }","label":0}
{"text":"public void marshall(TerminologyData terminologyData, ProtocolMarshaller protocolMarshaller) {\n\n        if (terminologyData == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(terminologyData.getFile(), FILE_BINDING);\n            protocolMarshaller.marshall(terminologyData.getFormat(), FORMAT_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }","label":0}
{"text":"function(evt, data) {\n\t\t\tvar list = this.list[evt];\n\t\t\tif(!list) {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t\tlist.state = 1; \/\/\u6807\u6ce8\u4e3a\u53ef\u4ee5fire\n\t\t\tlist.data = data || '';\n\t\t\tvar handlers = list.handlers;\n\t\t\thandlers = this._findCanCallbacks(handlers);\n\t\t\twhile(handlers[0]) {\n\t\t\t\tvar cb = handlers.shift();\n\n\t\t\t\tvar scope = cb.scope;\n\t\t\t\tvar args = cb.args;\n\n\t\t\t\tcb.fn.apply(scope, args)\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}","label":0}
{"text":"public function isISOBlocked($ip){\n        return $this->db->select($this->getBlockedISOTable(), ['iso' => $this->getIPCountryISO($ip)]);\n    }","label":0}
{"text":"private function serviceExtensionMap(array $providers): array\n    {\n        $wrap = function ($factory) { return [$factory]; };\n\n        return array_reduce($providers, function ($extensions, ServiceProviderInterface $provider) use ($wrap) {\n\n            return array_merge_recursive($extensions, array_map($wrap, $provider->getExtensions()));\n\n        }, []);\n    }","label":0}
{"text":"public static void main(String[] args) throws Exception {\n    ArgP argp = new ArgP();\n    CliOptions.addCommon(argp);\n    argp.addOption(\"--use-data-table\",\n        \"Scan against the raw data table instead of the meta data table.\");\n    args = CliOptions.parse(argp, args);\n    if (args == null) {\n      usage(argp, \"Invalid usage\");\n      System.exit(2);\n    } else if (args.length < 1) {\n      usage(argp, \"Not enough arguments\");\n      System.exit(2);\n    }\n    \n    final boolean use_data_table = argp.has(\"--use-data-table\");\n    \n    Config config = CliOptions.getConfig(argp);\n    final TSDB tsdb = new TSDB(config);\n    tsdb.checkNecessaryTablesExist().joinUninterruptibly();\n    \n    int rc;\n    try {\n      rc = runCommand(tsdb, use_data_table, args);\n    } finally {\n      try {\n        tsdb.getClient().shutdown().joinUninterruptibly();\n        LOG.info(\"Gracefully shutdown the TSD\");\n      } catch (Exception e) {\n        LOG.error(\"Unexpected exception while shutting down\", e);\n        rc = 42;\n      }\n    }\n    System.exit(rc);\n  }","label":0}
{"text":"func (p *Pool) Put(x interface{}) {\n\tif x == nil {\n\t\treturn\n\t}\n\tp.store = append(p.store, x)\n}","label":0}
{"text":"def results(self):\n        \"\"\"\"\"\"\n        if self.deriv == 0:\n            return self.v,\n        if self.deriv == 1:\n            return self.v, self.d\n        if self.deriv == 2:\n            return self.v, self.d, self.dd","label":0}
{"text":"public function addDataTypeDefinition($typeName, $typeClass, $classpath = null)\n    {\n        ComponentHelper::getComponentHelper($this)->addDataTypeDefinition($typeName, $typeClass, $classpath);\n    }","label":0}
{"text":"public static function fromCode($val)\n    {\n        $val = strtoupper($val);\n        if (array_key_exists($val, self::$_languages)) {\n            return self::$_languages[$val];\n        }\n        return null;\n    }","label":0}
{"text":"protected function flushApiCache($folderId = 0, $page = 0)\n    {\n        Yii::$app->storage->flushArrays();\n        $this->deleteHasCache('storageApiDataFolders');\n        $this->deleteHasCache(['storageApiDataFiles', (int) $folderId, (int) $page]);\n    }","label":0}
{"text":"func (s *CreateSecretInput) SetTags(v []*Tag) *CreateSecretInput {\n\ts.Tags = v\n\treturn s\n}","label":0}
{"text":"public function editAction($id)\n    {\n        $em = $this->getDoctrine()->getManager();\n\n        $user = $em->getRepository('ChillMainBundle:User')->find($id);\n\n        if (!$user) {\n            throw $this->createNotFoundException('Unable to find User entity.');\n        }\n\n        $editForm = $this->createEditForm($user);\n\n        return $this->render('ChillMainBundle:User:edit.html.twig', array(\n            'entity'      => $user,\n            'edit_form'   => $editForm->createView(),\n            'add_groupcenter_form' => $this->createAddLinkGroupCenterForm($user)->createView(),\n            'delete_groupcenter_form' => array_map( \n                    function(\\Symfony\\Component\\Form\\Form $form) {\n                        return $form->createView();\n                \n                    },\n                    iterator_to_array($this->getDeleteLinkGroupCenterByUser($user), true))\n        ));\n    }","label":0}
{"text":"public void stepSucceeded(StepSucceededMessage stepSuccessMessage) {\n        ExecutingStep s = executingStep.get();\n        if ( ! s.getExecutionUUID().equals(stepSuccessMessage.getExecutionId())) {\n            \/\/This could happen if chorus interpreter timed out the previous step while waiting for the reply\n            \/\/Hence log to debug rather than error\n            log.debug(\"Received a StepSucceededMessage for a step execution id \" + stepSuccessMessage.getExecutionId() + \" which did not match the currently executing step \" + s.getExecutionUUID());\n        } else {\n            s.getCompletableFuture().complete(stepSuccessMessage);\n        }\n    }","label":0}
{"text":"func noAcceptableAuth(conn io.Writer) error {\n\tconn.Write([]byte{socks5Version, noAcceptable})\n\treturn NoSupportedAuth\n}","label":0}
{"text":"func (s *Session) RequestPty(term string, h, w int, termmodes TerminalModes) error {\n\tvar tm []byte\n\tfor k, v := range termmodes {\n\t\tkv := struct {\n\t\t\tKey byte\n\t\t\tVal uint32\n\t\t}{k, v}\n\n\t\ttm = append(tm, Marshal(&kv)...)\n\t}\n\ttm = append(tm, tty_OP_END)\n\treq := ptyRequestMsg{\n\t\tTerm:     term,\n\t\tColumns:  uint32(w),\n\t\tRows:     uint32(h),\n\t\tWidth:    uint32(w * 8),\n\t\tHeight:   uint32(h * 8),\n\t\tModelist: string(tm),\n\t}\n\tok, err := s.ch.SendRequest(\"pty-req\", true, Marshal(&req))\n\tif err == nil && !ok {\n\t\terr = errors.New(\"ssh: pty-req failed\")\n\t}\n\treturn err\n}","label":0}
{"text":"protected function prepend(array $item)\n    {\n        if (! $this->isEnabled()) {\n            $this->enable();\n        }\n\n        $container  = $this->getContainer();\n        $currentArr = $container->getArrayCopy();\n\n        array_unshift($currentArr, $item);\n        $container->exchangeArray($currentArr);\n    }","label":0}
{"text":"function show_copyright(comments) {\n        var ret = \"\";\n        for (var i = 0; i < comments.length; ++i) {\n                var c = comments[i];\n                if (c.type == \"comment1\") {\n                        ret += \"\/\/\" + c.value + \"\\n\";\n                } else {\n                        ret += \"\/*\" + c.value + \"*\/\";\n                }\n        }\n        return ret;\n}","label":0}
{"text":"function delThread(pid) {\n    \/\/Delete worker entry from worker\n\n    delete workers[pid];\n\n    \/\/Remove pid from pid array\n    var position = pids.indexOf(pid);\n    if (~position) pids.splice(position, 1);\n\n    \/\/Reset array index\n    pids = pids.filter(function(){return true;});\n}","label":0}
{"text":"public JSONToken yylex() throws java.io.IOException, ParseException {\n        int zzInput;\n        int zzAction;\n\n        \/\/ cached fields:\n        int zzCurrentPosL;\n        int zzMarkedPosL;\n        int zzEndReadL = zzEndRead;\n        char[] zzBufferL = zzBuffer;\n        char[] zzCMapL = ZZ_CMAP;\n\n        int[] zzTransL = ZZ_TRANS;\n        int[] zzRowMapL = ZZ_ROWMAP;\n        int[] zzAttrL = ZZ_ATTRIBUTE;\n\n        while (true) {\n            zzMarkedPosL = zzMarkedPos;\n\n            zzAction = -1;\n\n            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;\n\n            zzState = ZZ_LEXSTATE[zzLexicalState];\n\n            zzForAction:\n            {\n                while (true) {\n\n                    if (zzCurrentPosL < zzEndReadL)\n                        zzInput = zzBufferL[zzCurrentPosL++];\n                    else if (zzAtEOF) {\n                        zzInput = YYEOF;\n                        break zzForAction;\n                    } else {\n                        \/\/ store back cached positions\n                        zzCurrentPos = zzCurrentPosL;\n                        zzMarkedPos = zzMarkedPosL;\n                        boolean eof = zzRefill();\n                        \/\/ get translated positions and possibly new buffer\n                        zzCurrentPosL = zzCurrentPos;\n                        zzMarkedPosL = zzMarkedPos;\n                        zzBufferL = zzBuffer;\n                        zzEndReadL = zzEndRead;\n                        if (eof) {\n                            zzInput = YYEOF;\n                            break zzForAction;\n                        } else {\n                            zzInput = zzBufferL[zzCurrentPosL++];\n                        }\n                    }\n                    int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];\n                    if (zzNext == -1)\n                        break zzForAction;\n                    zzState = zzNext;\n\n                    int zzAttributes = zzAttrL[zzState];\n                    if ((zzAttributes & 1) == 1) {\n                        zzAction = zzState;\n                        zzMarkedPosL = zzCurrentPosL;\n                        if ((zzAttributes & 8) == 8)\n                            break zzForAction;\n                    }\n\n                }\n            }\n\n            \/\/ store back cached position\n            zzMarkedPos = zzMarkedPosL;\n\n            switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {\n                case 25: {\n                    return new JSONToken(JSONToken.NULL, null);\n                }\n                case 29:\n                    break;\n                case 13: {\n                    sb.append(yytext());\n                }\n                case 30:\n                    break;\n                case 18: {\n                    sb.append('\\b');\n                }\n                case 31:\n                    break;\n                case 9: {\n                    return new JSONToken(JSONToken.LSQUARE);\n                }\n                case 32:\n                    break;\n                case 2: {\n                    Long val = Long.valueOf(yytext());\n                    return new JSONToken(JSONToken.INT, val);\n                }\n                case 33:\n                    break;\n                case 16: {\n                    sb.append('\\\\');\n                }\n                case 34:\n                    break;\n                case 8: {\n                    return new JSONToken(JSONToken.RBRACE);\n                }\n                case 35:\n                    break;\n                case 26: {\n                    return new JSONToken(JSONToken.BOOL, Boolean.TRUE);\n                }\n                case 36:\n                    break;\n                case 23: {\n                    sb.append('\\'');\n                }\n                case 37:\n                    break;\n                case 5: {\n                    sb = new StringBuffer();\n                    yybegin(STR2);\n                }\n                case 38:\n                    break;\n                case 27: {\n                    return new JSONToken(JSONToken.BOOL, Boolean.FALSE);\n                }\n                case 39:\n                    break;\n                case 12: {\n                    return new JSONToken(JSONToken.COLON);\n                }\n                case 40:\n                    break;\n                case 21: {\n                    sb.append('\\r');\n                }\n                case 41:\n                    break;\n                case 3: {\n                    return new JSONToken(JSONToken.IDENT, yytext());\n                }\n                case 42:\n                    break;\n                case 28: {\n                    try {\n                        sb.append((char) Integer\n                                .parseInt(yytext().substring(2), 16));\n                    } catch (Exception e) {\n                        throw new ParseException(e.getMessage(), 0);\n                    }\n                }\n                case 43:\n                    break;\n                case 10: {\n                    return new JSONToken(JSONToken.RSQUARE);\n                }\n                case 44:\n                    break;\n                case 17: {\n                    sb.append('\/');\n                }\n                case 45:\n                    break;\n                case 11: {\n                    return new JSONToken(JSONToken.COMMA);\n                }\n                case 46:\n                    break;\n                case 15: {\n                    sb.append('\"');\n                }\n                case 47:\n                    break;\n                case 24: {\n                    Double val = Double.valueOf(yytext());\n                    return new JSONToken(JSONToken.FLOAT, val);\n                }\n                case 48:\n                    break;\n                case 1: {\n                    throw new ParseException(\"Unexpected char [\" + yytext() + \"]\",\n                            0);\n                }\n                case 49:\n                    break;\n                case 19: {\n                    sb.append('\\f');\n                }\n                case 50:\n                    break;\n                case 7: {\n                    return new JSONToken(JSONToken.LBRACE);\n                }\n                case 51:\n                    break;\n                case 14: {\n                    yybegin(YYINITIAL);\n                    return new JSONToken(JSONToken.STRING, sb.toString());\n                }\n                case 52:\n                    break;\n                case 22: {\n                    sb.append('\\t');\n                }\n                case 53:\n                    break;\n                case 4: {\n                    sb = new StringBuffer();\n                    yybegin(STR1);\n                }\n                case 54:\n                    break;\n                case 20: {\n                    sb.append('\\n');\n                }\n                case 55:\n                    break;\n                case 6: {\n                }\n                case 56:\n                    break;\n                default:\n                    if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {\n                        zzAtEOF = true;\n                        return null;\n                    } else {\n                        zzScanError(ZZ_NO_MATCH);\n                    }\n            }\n        }\n    }","label":0}
{"text":"public function saveConfigAction() {\n        $cfgr = Mage::getModel('turpentine\/varnish_admin')->getConfigurator();\n        if (is_null($cfgr)) {\n            $this->_getSession()->addError(\n                $this->__('Failed to load configurator') );\n        } else {\n            Mage::dispatchEvent('turpentine_varnish_save_config',\n                array('cfgr' => $cfgr));\n            $result = $cfgr->save($cfgr->generate(\n                Mage::helper('turpentine')->shouldStripVclWhitespace('save') ));\n            if ($result[0]) {\n                $this->_getSession()\n                    ->addSuccess(Mage::helper('turpentine')\n                        ->__('The VCL file has been saved.'));\n            } else {\n                $this->_getSession()\n                    ->addError(Mage::helper('turpentine')\n                        ->__('Failed to save the VCL file: '.$result[1]['message']));\n            }\n        }\n        $this->_redirect('*\/cache');\n    }","label":0}
{"text":"public static function generate_pin($length = 8)\n    {\n        $factory = new \\RandomLib\\Factory;\n        $generator = $factory->getLowStrengthGenerator();\n        #--with easy to speak letters\n        #$alfabet = range('A', 'Z');\n        #$consonants = array_diff($alfabet, array('Y', 'H', 'W', 'Q', 'C')) ;\n        #$chars = implode('',$consonants);\n        #--full\n        #$chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-#';\n        #--only numbers\n        $chars = '0123456789';\n        $randomString = $generator->generateString($length, $chars);\n        return $randomString;\n    }","label":0}
{"text":"func (f *gzipWriter) Close() error {\n\tvar errors []error\n\tif f.Writer != nil {\n\t\terrors = append(errors, f.Writer.Close())\n\t\tf.Writer.Reset(ioutil.Discard)\n\t\twriterPool.Put(f.Writer)\n\t\tf.Writer = nil\n\t}\n\tif f.file != nil {\n\t\terrors = append(errors, f.file.Close())\n\t\tf.file = nil\n\t}\n\treturn trace.NewAggregate(errors...)\n}","label":0}
{"text":"func (e EmptyElement) Merge(v Strategy) (Result, error) {\n\treturn v.MergeEmpty(e)\n}","label":0}
{"text":"public final ProtoParser.ignore_block_return ignore_block() throws RecognitionException {\n        ProtoParser.ignore_block_return retval = new ProtoParser.ignore_block_return();\n        retval.start = input.LT(1);\n\n        Object root_0 = null;\n\n        Token LEFTCURLY166=null;\n        Token RIGHTCURLY168=null;\n        ProtoParser.ignore_block_body_return ignore_block_body167 = null;\n\n\n        Object LEFTCURLY166_tree=null;\n        Object RIGHTCURLY168_tree=null;\n\n        try {\n            \/\/ com\/dyuproject\/protostuff\/parser\/ProtoParser.g:642:5: ( LEFTCURLY ( ignore_block_body )* RIGHTCURLY )\n            \/\/ com\/dyuproject\/protostuff\/parser\/ProtoParser.g:642:9: LEFTCURLY ( ignore_block_body )* RIGHTCURLY\n            {\n            root_0 = (Object)adaptor.nil();\n\n            LEFTCURLY166=(Token)match(input,LEFTCURLY,FOLLOW_LEFTCURLY_in_ignore_block2623); if (state.failed) return retval;\n            if ( state.backtracking==0 ) {\n            LEFTCURLY166_tree = (Object)adaptor.create(LEFTCURLY166);\n            adaptor.addChild(root_0, LEFTCURLY166_tree);\n            }\n            \/\/ com\/dyuproject\/protostuff\/parser\/ProtoParser.g:642:19: ( ignore_block_body )*\n            loop38:\n            do {\n                int alt38=2;\n                switch ( input.LA(1) ) {\n                case ASSIGN:\n                case AT:\n                case LEFTCURLY:\n                case LEFTPAREN:\n                case RIGHTPAREN:\n                case LEFTSQUARE:\n                case RIGHTSQUARE:\n                case SEMICOLON:\n                case COMMA:\n                case PLUS:\n                case MINUS:\n                case TO:\n                case TRUE:\n                case FALSE:\n                case PKG:\n                case SYNTAX:\n                case IMPORT:\n                case OPTION:\n                case MESSAGE:\n                case SERVICE:\n                case ENUM:\n                case REQUIRED:\n                case OPTIONAL:\n                case REPEATED:\n                case EXTENSIONS:\n                case EXTEND:\n                case GROUP:\n                case RPC:\n                case RETURNS:\n                case INT32:\n                case INT64:\n                case UINT32:\n                case UINT64:\n                case SINT32:\n                case SINT64:\n                case FIXED32:\n                case FIXED64:\n                case SFIXED32:\n                case SFIXED64:\n                case FLOAT:\n                case DOUBLE:\n                case BOOL:\n                case STRING:\n                case BYTES:\n                case DEFAULT:\n                case MAX:\n                case VOID:\n                case ID:\n                case FULL_ID:\n                case NUMINT:\n                case EXP:\n                case NUMFLOAT:\n                case NUMDOUBLE:\n                case HEX_DIGIT:\n                case HEX:\n                case OCTAL:\n                case COMMENT:\n                case WS:\n                case ESC_SEQ:\n                case STRING_LITERAL:\n                case UNICODE_ESC:\n                case OCTAL_ESC:\n                    {\n                    alt38=1;\n                    }\n                    break;\n\n                }\n\n                switch (alt38) {\n            \tcase 1 :\n            \t    \/\/ com\/dyuproject\/protostuff\/parser\/ProtoParser.g:642:19: ignore_block_body\n            \t    {\n            \t    pushFollow(FOLLOW_ignore_block_body_in_ignore_block2625);\n            \t    ignore_block_body167=ignore_block_body();\n\n            \t    state._fsp--;\n            \t    if (state.failed) return retval;\n            \t    if ( state.backtracking==0 ) adaptor.addChild(root_0, ignore_block_body167.getTree());\n\n            \t    }\n            \t    break;\n\n            \tdefault :\n            \t    break loop38;\n                }\n            } while (true);\n\n            RIGHTCURLY168=(Token)match(input,RIGHTCURLY,FOLLOW_RIGHTCURLY_in_ignore_block2628); if (state.failed) return retval;\n            if ( state.backtracking==0 ) {\n            RIGHTCURLY168_tree = (Object)adaptor.create(RIGHTCURLY168);\n            adaptor.addChild(root_0, RIGHTCURLY168_tree);\n            }\n\n            }\n\n            retval.stop = input.LT(-1);\n\n            if ( state.backtracking==0 ) {\n\n            retval.tree = (Object)adaptor.rulePostProcessing(root_0);\n            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n            }\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n    \tretval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);\n\n        }\n        finally {\n        }\n        return retval;\n    }","label":0}
{"text":"private int skipLineSpace(int index) {\n\t\twhile (index < tokens.size() && isLineSpace(tokens.get(index))) {\n\t\t\tindex++;\n\t\t}\n\t\treturn index;\n\t}","label":0}
{"text":"public function sendGetCipherKeysFromUser($numbers, $replaceKey = false)\n    {\n        if (!is_array($numbers)) {\n            $numbers = [$numbers];\n        }\n\n        $this->replaceKey = $replaceKey;\n        $msgId = $this->nodeId['cipherKeys'] = $this->createIqId();\n\n        $userNode = [];\n        foreach ($numbers as $number) {\n            $userNode[] = new ProtocolNode('user',\n              [\n                  'jid' => $this->getJID($number),\n              ], null, null);\n        }\n        $keyNode = new ProtocolNode('key', null, $userNode, null);\n        $node = new ProtocolNode('iq',\n            [\n                'id'    => $msgId,\n                'xmlns' => 'encrypt',\n                'type'  => 'get',\n                'to'    => Constants::WHATSAPP_SERVER,\n            ], [$keyNode], null);\n\n        $this->sendNode($node);\n        $this->waitForServer($msgId);\n    }","label":0}
{"text":"public void marshall(ListRecoveryPointsByResourceRequest listRecoveryPointsByResourceRequest, ProtocolMarshaller protocolMarshaller) {\n\n        if (listRecoveryPointsByResourceRequest == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(listRecoveryPointsByResourceRequest.getResourceArn(), RESOURCEARN_BINDING);\n            protocolMarshaller.marshall(listRecoveryPointsByResourceRequest.getNextToken(), NEXTTOKEN_BINDING);\n            protocolMarshaller.marshall(listRecoveryPointsByResourceRequest.getMaxResults(), MAXRESULTS_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }","label":0}
{"text":"func (s *GetGeoMatchSetInput) Validate() error {\n\tinvalidParams := request.ErrInvalidParams{Context: \"GetGeoMatchSetInput\"}\n\tif s.GeoMatchSetId == nil {\n\t\tinvalidParams.Add(request.NewErrParamRequired(\"GeoMatchSetId\"))\n\t}\n\tif s.GeoMatchSetId != nil && len(*s.GeoMatchSetId) < 1 {\n\t\tinvalidParams.Add(request.NewErrParamMinLen(\"GeoMatchSetId\", 1))\n\t}\n\n\tif invalidParams.Len() > 0 {\n\t\treturn invalidParams\n\t}\n\treturn nil\n}","label":0}
{"text":"private void updateState(CmsShellCommandResult result) {\n\n        m_errorCode = result.getErrorCode();\n        m_prompt = result.getPrompt();\n        m_exitCalled = result.isExitCalled();\n        m_hasError = result.hasError();\n        m_echo = result.hasEcho();\n    }","label":0}
{"text":"public void visit(boolean depthFirst, Consumer<? super XElement> action) {\n        Deque<XElement> queue = new LinkedList<>();\n        queue.add(this);\n        while (!queue.isEmpty()) {\n            XElement x = queue.removeFirst();\n            action.accept(x);\n            if (depthFirst) {\n                ListIterator<XElement> li = x.children.listIterator(x.children.size());\n                while (li.hasPrevious()) {\n                    queue.addFirst(li.previous());\n                }\n            } else {\n                for (XElement c : x.children) {\n                    queue.addLast(c);\n                }\n            }\n        }\n    }","label":0}
{"text":"function() {\n        if (!this.type) {\n            this.type = G_NORMAL_MAP;\n        }\n        var mapObject, termsOfUse, poweredBy;\n        var cache = OpenLayers.Layer.Google.cache[this.map.id];\n        if (cache) {\n            \/\/ there are already Google layers added to this map\n            mapObject = cache.mapObject;\n            termsOfUse = cache.termsOfUse;\n            poweredBy = cache.poweredBy;\n            \/\/ increment the layer count\n            ++cache.count;\n        } else {\n            \/\/ this is the first Google layer for this map\n\n            var container = this.map.viewPortDiv;\n            var div = document.createElement(\"div\");\n            div.id = this.map.id + \"_GMap2Container\";\n            div.style.position = \"absolute\";\n            div.style.width = \"100%\";\n            div.style.height = \"100%\";\n            container.appendChild(div);\n\n            \/\/ create GMap and shuffle elements\n            try {\n                mapObject = new GMap2(div);\n                \n                \/\/ move the ToS and branding stuff up to the container div\n                termsOfUse = div.lastChild;\n                container.appendChild(termsOfUse);\n                termsOfUse.style.zIndex = \"1100\";\n                termsOfUse.style.right = \"\";\n                termsOfUse.style.bottom = \"\";\n                termsOfUse.className = \"olLayerGoogleCopyright\";\n\n                poweredBy = div.lastChild;\n                container.appendChild(poweredBy);\n                poweredBy.style.zIndex = \"1100\";\n                poweredBy.style.right = \"\";\n                poweredBy.style.bottom = \"\";\n                poweredBy.className = \"olLayerGooglePoweredBy gmnoprint\";\n                \n            } catch (e) {\n                throw(e);\n            }\n            \/\/ cache elements for use by any other google layers added to\n            \/\/ this same map\n            OpenLayers.Layer.Google.cache[this.map.id] = {\n                mapObject: mapObject,\n                termsOfUse: termsOfUse,\n                poweredBy: poweredBy,\n                count: 1\n            };\n        }\n\n        this.mapObject = mapObject;\n        this.termsOfUse = termsOfUse;\n        this.poweredBy = poweredBy;\n        \n        \/\/ ensure this layer type is one of the mapObject types\n        if (OpenLayers.Util.indexOf(this.mapObject.getMapTypes(),\n                                    this.type) === -1) {\n            this.mapObject.addMapType(this.type);\n        }\n\n        \/\/since v 2.93 getDragObject is now available.\n        if(typeof mapObject.getDragObject == \"function\") {\n            this.dragObject = mapObject.getDragObject();\n        } else {\n            this.dragPanMapObject = null;\n        }\n        \n        if(this.isBaseLayer === false) {\n            this.setGMapVisibility(this.div.style.display !== \"none\");\n        }\n\n    }","label":0}
{"text":"def ReadUntilClose(self):\n        \"\"\"\"\"\"\n        while True:\n            cmd, data = self.ReadUntil(b'CLSE', b'WRTE')\n            if cmd == b'CLSE':\n                self._Send(b'CLSE', arg0=self.local_id, arg1=self.remote_id)\n                break\n            if cmd != b'WRTE':\n                if cmd == b'FAIL':\n                    raise usb_exceptions.AdbCommandFailureException(\n                        'Command failed.', data)\n                raise InvalidCommandError('Expected a WRITE or a CLOSE, got %s (%s)',\n                                          cmd, data)\n            yield data","label":0}
{"text":"static function createForText( $text, &$font, $widthAdjustment, $heightAdjustment, $angle,\n                             $absoluteWidth = false, $absoluteHeight = false )\n    {\n        $Return = false;\n        if ( !( $font instanceof eZImageFont ) )\n            return $Return;\n        if ( !function_exists( 'ImageTTFBBox' ) )\n        {\n            eZDebug::writeError( 'ImageTTFBBox function not in PHP, check PHP compilation', 'ezimagetextlayer.php' );\n            return $Return;\n        }\n        $bbox = ImageTTFBBox( $font->pointSize(), $angle, $font->realFile(), $text );\n\n        if ( !$bbox )\n            return $Return;\n\n        $xmin = min( $bbox[0], $bbox[2], $bbox[4], $bbox[6] );\n        $xmax = max( $bbox[0], $bbox[2], $bbox[4], $bbox[6] );\n        $ymin = min( $bbox[1], $bbox[3], $bbox[5], $bbox[7] );\n        $ymax = max( $bbox[1], $bbox[3], $bbox[5], $bbox[7] );\n\n        $width = abs( $xmax - $xmin );\n        $height = abs( $ymax - $ymin );\n        $width += $widthAdjustment;\n        $height += $heightAdjustment;\n\n        if ( $absoluteWidth !== false )\n            $width = $absoluteWidth;\n        if ( $absoluteHeight !== false)\n            $height = $absoluteHeight;\n\n        $layer = new eZImageTextLayer( null, null, $width, $height,\n                                       $font, $bbox, $text, $angle );\n        $layer->create( $width, $height, null );\n        return $layer;\n    }","label":0}
{"text":"public function createRequest() {\n        $request = new \\Amp\\Artax\\Request();\n        $url = null;\n        $request->setMethod('');\n\n\n\n        \/\/Parameters are parsed and set, lets prepare the request\n        if ($url == null) {\n            $url = \"https:\/\/api.github.com\";\n        }\n        $request->setUri($url);\n\n        return $request;\n    }","label":0}
{"text":"public function processCommands($commands)\n    {\n        $separator = $this->environment->getSeparator();\n        $shell = $this->config->getContextually('remote.shell');\n        $shelled = $this->config->getContextually('remote.shelled');\n        $sudo = $this->config->getContextually('remote.sudo');\n        $sudoed = $this->config->getContextually('remote.sudoed');\n\n        \/\/ Prepare paths replacer\n        $pattern = sprintf('#\\%s([\\w\\d\\s])#', DS);\n        $replacement = sprintf('\\%s$1', $separator);\n\n        \/\/ Cast commands to array\n        if (!is_array($commands)) {\n            $commands = [$commands];\n        }\n\n        \/\/ Flatten and process commands\n        $commands = Arr::flatten($commands);\n        foreach ($commands as &$command) {\n            \/\/ Replace directory separators\n            if (DS !== $separator) {\n                $command = preg_replace($pattern, $replacement, $command);\n            }\n\n            \/\/ Let framework process commands\n            if ($framework = $this->getFramework()) {\n                $command = $framework->processCommand($command);\n            }\n\n            \/\/ Create shell if asked\n            $forceShell = $this->modulable->getOption('shelled', true);\n            if ($forceShell || $shell && Str::contains($command, $shelled)) {\n                $command = $this->shellCommand($command);\n            }\n\n            if ($sudo && Str::contains($command, $sudoed)) {\n                $command = $this->sudoCommand($sudo, $command);\n            }\n        }\n\n        return $commands;\n    }","label":0}
{"text":"final public function isGranted(array $roles, array $resources, array $modules, array $accesses)\n    {\n        \/\/ Find a user which matches the required roles.\n        $user = $this->checkRole($roles);\n\n        if (null === $user) {\n            return false;\n        } else {\n            return $this->isUserGranted($roles, $resources, $modules, $accesses, $user);\n        }\n    }","label":0}
{"text":"func Float(min, max float64) (float64, error) {\n\treturn min + Rnd.Float64()*(max-min), nil\n}","label":0}
{"text":"func NewCmdConfigUnset(out io.Writer, configAccess clientcmd.ConfigAccess) *cobra.Command {\n\toptions := &unsetOptions{configAccess: configAccess}\n\n\tcmd := &cobra.Command{\n\t\tUse:                   \"unset PROPERTY_NAME\",\n\t\tDisableFlagsInUseLine: true,\n\t\tShort:                 i18n.T(\"Unsets an individual value in a kubeconfig file\"),\n\t\tLong:                  unsetLong,\n\t\tExample:               unsetExample,\n\t\tRun: func(cmd *cobra.Command, args []string) {\n\t\t\tcmdutil.CheckErr(options.complete(cmd, args))\n\t\t\tcmdutil.CheckErr(options.run(out))\n\n\t\t},\n\t}\n\n\treturn cmd\n}","label":0}
{"text":"def add_full_state_methods(class_with_globalize_methods):\n    \n    assert hasattr(class_with_globalize_methods, 'active_set')\n    assert hasattr(class_with_globalize_methods, 'nstates_full')\n\n    for name, method in class_with_globalize_methods.__dict__.copy().items():\n        if isinstance(method, property) and hasattr(method.fget, '_map_to_full_state_def_arg'):\n            default_value = method.fget._map_to_full_state_def_arg\n            axis = method.fget._map_to_full_state_along_axis\n            new_getter = _wrap_to_full_state(name, default_value, axis)\n            alias_to_full_state_inst = property(new_getter)\n        elif hasattr(method, '_map_to_full_state_def_arg'):\n            default_value = method._map_to_full_state_def_arg\n            axis = method._map_to_full_state_along_axis\n            alias_to_full_state_inst = _wrap_to_full_state(name, default_value, axis)\n        else:\n            continue\n\n        name += \"_full_state\"\n        setattr(class_with_globalize_methods, name, alias_to_full_state_inst)\n\n    return class_with_globalize_methods","label":0}
{"text":"func ParseProtoAddr(protoAddr string) (proto string, addr string, err error) {\n\n\tif emptyRX.MatchString(protoAddr) {\n\t\treturn \"\", \"\", ErrParseProtoAddrRequired\n\t}\n\n\t\/\/ If the provided network address does not begin with one\n\t\/\/ of the valid network protocols then treat the string as a\n\t\/\/ file path.\n\t\/\/\n\t\/\/ First check to see if the file exists at the specified path.\n\t\/\/ If it does then assume it's a valid file path and return it.\n\t\/\/\n\t\/\/ Otherwise attempt to create the file. If the file can be created\n\t\/\/ without error then remove the file and return the result a UNIX\n\t\/\/ socket file path.\n\tif !protoAddrGuessRX.MatchString(protoAddr) {\n\n\t\t\/\/ If the file already exists then assume it's a valid sock\n\t\t\/\/ file and return it.\n\t\tif _, err := os.Stat(protoAddr); !os.IsNotExist(err) {\n\t\t\treturn \"unix\", protoAddr, nil\n\t\t}\n\n\t\tf, err := os.Create(protoAddr)\n\t\tif err != nil {\n\t\t\treturn \"\", \"\", fmt.Errorf(\n\t\t\t\t\"invalid implied sock file: %s: %v\", protoAddr, err)\n\t\t}\n\t\tif err := f.Close(); err != nil {\n\t\t\treturn \"\", \"\", fmt.Errorf(\n\t\t\t\t\"failed to verify network address as sock file: %s\", protoAddr)\n\t\t}\n\t\tif err := os.RemoveAll(protoAddr); err != nil {\n\t\t\treturn \"\", \"\", fmt.Errorf(\n\t\t\t\t\"failed to remove verified sock file: %s\", protoAddr)\n\t\t}\n\t\treturn \"unix\", protoAddr, nil\n\t}\n\n\t\/\/ Parse the provided network address into the protocol and address parts.\n\tm := protoAddrExactRX.FindStringSubmatch(protoAddr)\n\tif m == nil {\n\t\treturn \"\", \"\", fmt.Errorf(\"invalid network address: %s\", protoAddr)\n\t}\n\treturn m[1], m[2], nil\n}","label":0}
{"text":"func getKeyVal(s string) (key, value string) {\n\tp := strings.SplitN(s, keySep, 2)\n\treturn p[0], icsReplacer.Replace(p[1])\n}","label":0}
{"text":"public static dnssuffix[] get(nitro_service service, String Dnssuffix[]) throws Exception{\n\t\tif (Dnssuffix !=null && Dnssuffix.length>0) {\n\t\t\tdnssuffix response[] = new dnssuffix[Dnssuffix.length];\n\t\t\tdnssuffix obj[] = new dnssuffix[Dnssuffix.length];\n\t\t\tfor (int i=0;i<Dnssuffix.length;i++) {\n\t\t\t\tobj[i] = new dnssuffix();\n\t\t\t\tobj[i].set_Dnssuffix(Dnssuffix[i]);\n\t\t\t\tresponse[i] = (dnssuffix) obj[i].get_resource(service);\n\t\t\t}\n\t\t\treturn response;\n\t\t}\n\t\treturn null;\n\t}","label":0}
{"text":"public Number getMinutesPerMonth()\n   {\n      return Integer.valueOf(NumberHelper.getInt(getMinutesPerDay()) * NumberHelper.getInt(getDaysPerMonth()));\n   }","label":0}
{"text":"public function trackMatchedRoute(Route $route, Request $request)\n    {\n        if ( ! $this->isEnabled()) return;\n\n        $tracker = $this->getRouteTracker();\n\n        if ($tracker->isTrackable($route)) {\n            $this->mergeVisitorActivityData([\n                'route_path_id' => $tracker->track($route, $request),\n            ]);\n        }\n        else\n            $this->disable();\n    }","label":0}
{"text":"public function getUnseenNotifications(NotifiableInterface $notifiable, $order = 'DESC', $limit = null,\n                                           $offset = null)\n    {\n        return $this->notifiableNotificationRepository->findAllByNotifiable(\n            $this->generateIdentifier($notifiable),\n            ClassUtils::getRealClass(get_class($notifiable)),\n            false,\n            $order,\n            $limit,\n            $offset\n        );\n    }","label":0}
{"text":"public boolean checkIndexField(BaseField field)\n    {\n        for (int iKeySeq = 0; iKeySeq < this.getRecord().getKeyAreaCount(); iKeySeq++)\n        {\n            KeyArea keyArea = this.getRecord().getKeyArea(iKeySeq);\n            if (keyArea.getField(0) == field)\n                if (field != this.getRecord().getCounterField())\n                    return true;\n        }\n        return false;\n    }","label":0}
{"text":"public void setThreshold(final Level level) {\n        Level oldValue = this.thresholdLevel;\n        thresholdLevel = level;\n        firePropertyChange(\"threshold\", oldValue, this.thresholdLevel);\n    }","label":0}
{"text":"def _import_data(self, import_header_only=False):\n        \n        # perform checks on the file before opening it.\n        assert os.path.isfile(self._file_path), 'Cannot find an epw file at {}'.format(\n            self._file_path)\n        assert self._file_path.lower().endswith('epw'), '{} is not an .epw file. \\n' \\\n            'It does not possess the .epw file extension.'.format(self._file_path)\n\n        with open(self._file_path, readmode) as epwin:\n            line = epwin.readline()\n            original_header_load = bool(self._is_header_loaded)\n\n            if not self._is_header_loaded:\n                # import location data\n                # first line has location data - Here is an example\n                # LOCATION,Denver Golden Nr,CO,USA,TMY3,724666,39.74,-105.18,-7.0,1829.0\n                location_data = line.strip().split(',')\n                self._location = Location()\n                self._location.city = location_data[1].replace('\\\\', ' ') \\\n                    .replace('\/', ' ')\n                self._location.state = location_data[2]\n                self._location.country = location_data[3]\n                self._location.source = location_data[4]\n                self._location.station_id = location_data[5]\n                self._location.latitude = location_data[6]\n                self._location.longitude = location_data[7]\n                self._location.time_zone = location_data[8]\n                self._location.elevation = location_data[9]\n\n                # asemble a dictionary of metadata\n                self._metadata = {\n                    'source': self._location.source,\n                    'country': self._location.country,\n                    'city': self._location.city\n                }\n\n                self._header = [line] + [epwin.readline() for i in xrange(7)]\n\n                # parse the heating, cooling and extreme design conditions.\n                dday_data = self._header[1].strip().split(',')\n                if len(dday_data) >= 2 and int(dday_data[1]) == 1:\n                    if dday_data[4] == 'Heating':\n                        for key, val in zip(DesignDay.heating_keys, dday_data[5:20]):\n                            self._heating_dict[key] = val\n                    if dday_data[20] == 'Cooling':\n                        for key, val in zip(DesignDay.cooling_keys, dday_data[21:53]):\n                            self._cooling_dict[key] = val\n                    if dday_data[53] == 'Extremes':\n                        for key, val in zip(DesignDay.extreme_keys, dday_data[54:70]):\n                            self._extremes_dict[key] = val\n\n                # parse typical and extreme periods into analysis periods.\n                week_data = self._header[2].split(',')\n                num_weeks = int(week_data[1]) if len(week_data) >= 2 else 0\n                st_ind = 2\n                for i in xrange(num_weeks):\n                    week_dat = week_data[st_ind:st_ind + 4]\n                    st_ind += 4\n                    st = [int(num) for num in week_dat[2].split('\/')]\n                    end = [int(num) for num in week_dat[3].split('\/')]\n                    if len(st) == 3:\n                        a_per = AnalysisPeriod(st[1], st[2], 0, end[1], end[2], 23)\n                    elif len(st) == 2:\n                        a_per = AnalysisPeriod(st[0], st[1], 0, end[0], end[1], 23)\n                    if 'Max' in week_dat[0] and week_dat[1] == 'Extreme':\n                        self._extreme_hot_weeks[week_dat[0]] = a_per\n                    elif 'Min' in week_dat[0] and week_dat[1] == 'Extreme':\n                        self._extreme_cold_weeks[week_dat[0]] = a_per\n                    elif week_dat[1] == 'Typical':\n                        self._typical_weeks[week_dat[0]] = a_per\n\n                # parse the monthly ground temperatures in the header.\n                grnd_data = self._header[3].strip().split(',')\n                num_depths = int(grnd_data[1]) if len(grnd_data) >= 2 else 0\n                st_ind = 2\n                for i in xrange(num_depths):\n                    header_meta = dict(self._metadata)  # copying the metadata dictionary\n                    header_meta['depth'] = float(grnd_data[st_ind])\n                    header_meta['soil conductivity'] = grnd_data[st_ind + 1]\n                    header_meta['soil density'] = grnd_data[st_ind + 2]\n                    header_meta['soil specific heat'] = grnd_data[st_ind + 3]\n                    grnd_header = Header(temperature.GroundTemperature(), 'C',\n                                         AnalysisPeriod(), header_meta)\n                    grnd_vlas = [float(x) for x in grnd_data[st_ind + 4: st_ind + 16]]\n                    self._monthly_ground_temps[float(grnd_data[st_ind])] = \\\n                        MonthlyCollection(grnd_header, grnd_vlas, list(xrange(12)))\n                    st_ind += 16\n\n                # parse leap year, daylight savings and comments.\n                leap_dl_sav = self._header[4].strip().split(',')\n                self._is_leap_year = True if leap_dl_sav[1] == 'Yes' else False\n                self.daylight_savings_start = leap_dl_sav[2]\n                self.daylight_savings_end = leap_dl_sav[3]\n                comments_1 = self._header[5].strip().split(',')\n                if len(comments_1) > 0:\n                    self.comments_1 = ','.join(comments_1[1:])\n                comments_2 = self._header[6].strip().split(',')\n                if len(comments_2) > 0:\n                    self.comments_2 = ','.join(comments_2[1:])\n\n                self._is_header_loaded = True\n\n            if import_header_only:\n                return\n\n            # read first line of data to overwrite the number of fields\n            if original_header_load is True:\n                for i in xrange(7):\n                    epwin.readline()\n            line = epwin.readline()\n            self._num_of_fields = min(len(line.strip().split(',')), 35)\n\n            # create an annual analysis period\n            analysis_period = AnalysisPeriod(is_leap_year=self.is_leap_year)\n\n            # create headers and an empty list for each field in epw file\n            headers = []\n            for field_number in xrange(self._num_of_fields):\n                field = EPWFields.field_by_number(field_number)\n                header = Header(data_type=field.name, unit=field.unit,\n                                analysis_period=analysis_period,\n                                metadata=dict(self._metadata))\n                headers.append(header)\n                self._data.append([])\n\n            # collect hourly data\n            while line:\n                data = line.strip().split(',')\n\n                for field_number in xrange(self._num_of_fields):\n                    value_type = EPWFields.field_by_number(field_number).value_type\n                    try:\n                        value = value_type(data[field_number])\n                    except ValueError as e:\n                        # failed to convert the value for the specific TypeError\n                        if value_type != int:\n                            raise ValueError(e)\n                        value = int(round(float(data[field_number])))\n\n                    self._data[field_number].append(value)\n\n                line = epwin.readline()\n\n            # if the first value is at 1 AM, move last item to start position\n            for field_number in xrange(self._num_of_fields):\n                point_in_time = headers[field_number].data_type.point_in_time\n                if point_in_time is True:\n                    # move the last hour to first position\n                    last_hour = self._data[field_number].pop()\n                    self._data[field_number].insert(0, last_hour)\n\n            # finally, build the data collection objects from the headers and data\n            for i in xrange(self._num_of_fields):\n                self._data[i] = HourlyContinuousCollection(headers[i], self._data[i])\n\n            self._is_data_loaded = True","label":0}
{"text":"func XslRr(state Uint128) uint64 {\n  h, l := state.H, state.L\n  shift := l ^ h;\n  rot := h >> 58;\n  return (shift >> rot) | (shift << (64 - rot));\n}","label":0}
{"text":"function limitArray()\n    {\n        $limitValues = $this->attribute( 'values' );\n\n        $valueArray = array();\n\n        foreach ( array_keys( $limitValues ) as $valueKey )\n        {\n            $valueArray[] = $limitValues[$valueKey]->attribute( 'value' );\n        }\n\n        return array( $this->attribute( 'identifier' ) => $valueArray );\n    }","label":0}
{"text":"public float conditionalLogProb(int[] given, int of) {\r\n    if (given.length != windowSize - 1) {\r\n      System.err.println(\"error computing conditional log prob\");\r\n      System.exit(0);\r\n    }\r\n    int[] label = indicesFront(given);\r\n    float[] masses = new float[label.length];\r\n    for (int i = 0; i < masses.length; i++) {\r\n      masses[i] = table[label[i]];\r\n    }\r\n    float z = ArrayMath.logSum(masses);\r\n\r\n    return table[indexOf(given, of)] - z;\r\n  }","label":0}
{"text":"protected function buildJSON()\n    {\n        $json = $this->parent->createFileJson($this->file);\n        $json['created'] = $this->file->obj('Created')->FormatFromSettings();\n        $json['lastEdited'] = $this->file->obj('LastEdited')->FormatFromSettings();\n        $json['url'] = $this->file->getAbsoluteURL();\n\n        $json['size'] = $this->file->getSize();\n        $json['folder'] = $this->file->Parent()->Filename;\n\n        if ($this->file instanceof Image) {\n            $preview = $this->file->Fill(400, 133);\n            $detail = $this->file->getKickAssetsDetailImage();\n            $json['previewImage'] = $preview ? $preview->URL : $this->file->getPreviewThumbnail(128, 128)->URL;\n            $json['detailImage'] = $detail ? $detail->URL : $this->file->getPreviewThumbnail(128, 128)->URL;\n        }\n\n        return $json;\n    }","label":0}
{"text":"function(node, id, propertyName) {\n\t\t\tvar rootids = [];\n\t\t\tif(!modules.domUtils.hasAttribute(node,'rootids')){\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\trootids = modules.domUtils.getAttributeList(node, 'rootids');\n\t\t\t\treturn (rootids.indexOf('id' + id + '-' + propertyName) > -1);\n\t\t\t}\n\t\t}","label":0}
{"text":"public function addMessage($type, $content)\n\t{\n\t\tif($this->session->has('Cfmessage')) {\n\t\t\t$messages = $this->session->get('Cfmessage', []);\n\t\t}\n\t\t\n\t\t$messages[] = [\n\t\t\t'content' => $content,\n\t\t\t'type' => $type,\n\t\t];\n\t\t\n\t\t$this->session->set('Cfmessage', $messages);\n\t}","label":0}
{"text":"def warn( callingClass, astr_key, **kwargs ):\n    '''\n    \n    '''\n    kwargs['exitToOS']  = False\n    report( callingClass, astr_key, **kwargs )","label":0}
{"text":"func (grw gzipResponseWriter) Write(b []byte) (int, error) {\n\tif len(grw.Header().Get(headerContentType)) == 0 {\n\t\tgrw.Header().Set(headerContentType, http.DetectContentType(b))\n\t}\n\n\t\/\/ Delete the content length after we know we have been written to.\n\tgrw.Header().Del(headerContentLength)\n\treturn grw.w.Write(b)\n}","label":0}
{"text":"func (m *Manager) ActiveScopedKeyManagers() []*ScopedKeyManager {\n\tm.mtx.RLock()\n\tdefer m.mtx.RUnlock()\n\n\tvar scopedManagers []*ScopedKeyManager\n\tfor _, smgr := range m.scopedManagers {\n\t\tscopedManagers = append(scopedManagers, smgr)\n\t}\n\n\treturn scopedManagers\n}","label":0}
{"text":"public function decrypt($cipher_string, $cipher_key)\n    {\n        $cipher_key = $this->_genKey($cipher_key);\n\n        $hmacSize = 64;\n        $hmacString = mb_substr($cipher_string, 0, $hmacSize, \"8bit\");\n        $cipher_text = mb_substr($cipher_string, $hmacSize, null, \"8bit\");\n\n        if(!$this->validHmac($hmacString, $this->_genHmac($cipher_text, $cipher_key)))\n            return false;\n\n        $ivSize = openssl_cipher_iv_length('AES-256-CBC');\n        $iv = mb_substr($cipher_text, 0, $ivSize, '8bit');\n        $cipher_text = mb_substr($cipher_text, $ivSize, null, '8bit');\n\n        return openssl_decrypt($cipher_text, 'AES-256-CBC', $cipher_key, OPENSSL_RAW_DATA, $iv);\n    }","label":0}
{"text":"def ProgressBar(title=\"RoboFab...\", ticks=None, label=\"\"):\n    \n    return dispatcher[\"ProgressBar\"](title=title, ticks=ticks, label=label)","label":0}
{"text":"public static String adHocSQLFromInvocationForDebug(StoredProcedureInvocation invocation) {\n        assert(invocation.getProcName().startsWith(\"@AdHoc\"));\n        ParameterSet params = invocation.getParams();\n        \/\/ the final param is the byte array we need\n        byte[] serializedBatchData = (byte[]) params.getParam(params.size() - 1);\n\n        Pair<Object[], AdHocPlannedStatement[]> data = decodeSerializedBatchData(serializedBatchData);\n        Object[] userparams = data.getFirst();\n        AdHocPlannedStatement[] statements = data.getSecond();\n\n        StringBuilder sb = new StringBuilder();\n        if (statements.length == 0) {\n            sb.append(\"ADHOC INVOCATION HAS NO SQL\");\n        }\n        else if (statements.length == 1) {\n            sb.append(adHocSQLStringFromPlannedStatement(statements[0], userparams));\n        }\n        else { \/\/ > 1\n            sb.append(\"BEGIN ADHOC_SQL_BATCH {\\n\");\n            for (AdHocPlannedStatement stmt : statements) {\n                sb.append(adHocSQLStringFromPlannedStatement(stmt, userparams)).append(\"\\n\");\n            }\n            sb.append(\"} END ADHOC_SQL_BATCH\");\n        }\n\n        return sb.toString();\n    }","label":0}
{"text":"public static function handleApplicationPlugins($step)\n    {\n        foreach (self::$pluginsOrder as $plugins) {\n            foreach ($plugins as $pluginClass) {\n                self::$plugins[$pluginClass]->$step();\n            }\n        }\n    }","label":0}
{"text":"public function setContent($value)\n    {\n        if ($value !== null && ! $value instanceof \\Protobuf\\Stream) {\n            $value = \\Protobuf\\Stream::wrap($value);\n        }\n\n        $this->Content = $value;\n    }","label":0}
{"text":"def unlock(self):\n        \n        logger.debug(\"Releasing lock %s\", self.lock_file)\n        self._lock.release()\n        try:\n            os.unlink(self.lock_file)\n        except FileNotFoundError:\n            pass","label":0}
{"text":"public function deleteFiles($container, $files, $root = '')\n    {\n        $root = FileUtilities::fixFolderPath($root);\n        foreach ($files as $key => $fileInfo) {\n            try {\n                \/\/ path is full path, name is relative to root, take either\n                $path = array_get($fileInfo, 'path');\n                if (!empty($path)) {\n                    $file = static::asFullPath($path, true);\n                    if (!is_file($file)) {\n                        throw new BadRequestException(\"'$path' is not a valid file.\");\n                    }\n                    if (!unlink($file)) {\n                        throw new InternalServerErrorException(\"Failed to delete file '$path'.\");\n                    }\n                } else {\n                    $name = array_get($fileInfo, 'name');\n                    if (!empty($name)) {\n                        $path = $root . $name;\n                        $this->deleteFile($container, $path);\n                    } else {\n                        throw new BadRequestException('No path or name found for file in delete request.');\n                    }\n                }\n            } catch (\\Exception $ex) {\n                \/\/ error whole batch here?\n                $files[$key]['error'] = ['message' => $ex->getMessage(), 'code' => $ex->getCode()];\n            }\n        }\n\n        return $files;\n    }","label":0}
{"text":"function evaluateState(state, instance, message) {\n    var result = false;\n    \/\/ delegate to child regions first if a non-continuation\n    if (message !== state) {\n        state.regions.every(function (region) {\n            var currentState = instance.getLastKnownState(region);\n            if (currentState && evaluateState(currentState, instance, message)) {\n                result = true;\n                return isActive(state, instance); \/\/ NOTE: this just controls the every loop; also isActive is a litte costly so using sparingly\n            }\n            return true; \/\/ NOTE: this just controls the every loop\n        });\n    }\n    \/\/ if a transition occured in a child region, check for completions\n    if (result) {\n        if ((message !== state) && isComplete(state, instance)) {\n            evaluateState(state, instance, state);\n        }\n    }\n    else {\n        \/\/ otherwise look for a transition from this state\n        var transitions = state.outgoing.filter(function (transition) { return transition.guard(message, instance); });\n        if (transitions.length === 1) {\n            \/\/ execute if a single transition was found\n            result = traverse(transitions[0], instance, message);\n        }\n        else if (transitions.length > 1) {\n            \/\/ error if multiple transitions evaluated true\n            exports.console.error(state + \": multiple outbound transitions evaluated true for message \" + message);\n        }\n    }\n    return result;\n}","label":0}
{"text":"public static String numberToString(Number number) throws JSONException {\n\t\tif (number == null) {\n\t\t\tthrow new JSONException(\"Number must be non-null\");\n\t\t}\n\n\t\tdouble doubleValue = number.doubleValue();\n\t\tJSON.checkDouble(doubleValue);\n\n\t\t\/\/ the original returns \"-0\" instead of \"-0.0\" for negative zero\n\t\tif (number.equals(NEGATIVE_ZERO)) {\n\t\t\treturn \"-0\";\n\t\t}\n\n\t\tlong longValue = number.longValue();\n\t\tif (doubleValue == longValue) {\n\t\t\treturn Long.toString(longValue);\n\t\t}\n\n\t\treturn number.toString();\n\t}","label":0}
{"text":"public void marshall(ProjectDescription projectDescription, ProtocolMarshaller protocolMarshaller) {\n\n        if (projectDescription == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(projectDescription.getArn(), ARN_BINDING);\n            protocolMarshaller.marshall(projectDescription.getProjectName(), PROJECTNAME_BINDING);\n            protocolMarshaller.marshall(projectDescription.getDescription(), DESCRIPTION_BINDING);\n            protocolMarshaller.marshall(projectDescription.getCreatedDate(), CREATEDDATE_BINDING);\n            protocolMarshaller.marshall(projectDescription.getUpdatedDate(), UPDATEDDATE_BINDING);\n            protocolMarshaller.marshall(projectDescription.getPlacementTemplate(), PLACEMENTTEMPLATE_BINDING);\n            protocolMarshaller.marshall(projectDescription.getTags(), TAGS_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }","label":0}
{"text":"public function replace($table, $data) {\n\n        $_fileds = '';\n        $_values = '';\n        $_T_fields = $this->getTableFields($table);\n        foreach ( $data as $_key => $_val ) {\n\n            \/\/\u81ea\u52a8\u8fc7\u6ee4\u6389\u4e0d\u5b58\u5728\u7684\u5b57\u6bb5\n            if ( !in_array( $_key, $_T_fields ) ) continue;\n\n            $_fileds .= ( $_fileds=='' ) ? \"`{$_key}`\" : \", `{$_key}`\";\n            if ( is_null($_val) ) {\n                $_val = 'NULL';\n            } else {\n                $_val = \"'{$_val}'\";\n            }\n            $_values .= ( $_values=='' ) ? \"{$_val}\" : \",{$_val}\";\n        }\n\n        if ( $_fileds != '' ) {\n            $_query = \"REPLACE INTO {$table}(\" . $_fileds . \") VALUES(\" . $_values . \")\";\n            if ( $this->execute($_query) != false ) {\n                return true;\n            }\n\n        }\n        return false;\n    }","label":0}
{"text":"public function getParser($name)\n    {\n        if (!$this->hasParser($name)) {\n            throw new ParserNotFoundException(sprintf('The parser with NAME \"%s\" is not registered', $name));\n        }\n\n        return $this->parsers[$name];\n    }","label":0}
{"text":"protected void fireStartEntity(String name)\n        throws org.xml.sax.SAXException\n    {        \n        if (m_tracer != null)\n        {\n            flushMyWriter();\n            m_tracer.fireGenerateEvent(SerializerTrace.EVENTTYPE_ENTITYREF, name);\n        }     \t        \t    \t\n    }","label":0}
{"text":"func (s *ListAccountsInput) SetMaxResults(v int64) *ListAccountsInput {\n\ts.MaxResults = &v\n\treturn s\n}","label":0}
{"text":"def get_device_model(self) -> str:\n        ''''''\n        output, _ = self._execute(\n            '-s', self.device_sn, 'shell', 'getprop', 'ro.product.model')\n        return output.strip()","label":0}
{"text":"function Hello($host=\"\") {\n    $this->error = null; # so no confusion is caused\n\n    if(!$this->connected()) {\n      $this->error = array(\n      \"error\" => \"Called Hello() without being connected\");\n      return false;\n    }\n\n    # if a hostname for the HELO wasn't specified determine\n    # a suitable one to send\n    if(empty($host)) {\n      # we need to determine some sort of appopiate default\n      # to send to the server\n      $host = \"localhost\";\n    }\n\n    \/\/ Send extended hello first (RFC 2821)\n    if(!$this->SendHello(\"EHLO\", $host))\n    {\n      if(!$this->SendHello(\"HELO\", $host))\n      return false;\n    }\n\n    return true;\n  }","label":0}
{"text":"@Override\n    public synchronized void run(){\n        Date now = new Date();\n        if ( !cache.isEmpty() &&\n                ((cache.size() > cacheSize - 1) || (now.getTime() - lastCacheAccess.getTime() > cacheMillis))) {\n            try {\n                flush();\n            } catch (RepositoryException e) {\n                log.error(e.getLocalizedMessage());\n                throw new RuntimeException(e);\n            } catch (MalformedQueryException e) {\n                log.error(e.getLocalizedMessage());\n                throw new RuntimeException(e);\n            } catch (UpdateExecutionException e) {\n                log.error(e.getLocalizedMessage());\n                throw new RuntimeException(e);\n            } catch (IOException e) {\n                log.error(e.getLocalizedMessage());\n                throw new RuntimeException(e);\n            }\n        }\n    }","label":0}
{"text":"protected function do_log($message, $type='exception in code') {\n\t\t$this->debugLogs[] = array('project'=>$this->projectName,'upgradeFile'=>$this->upgradeConfigFile,'message'=>$message,'type'=>$type);\n\t\tif($this->internalUpgradeInProgress === true) {\n\t\t\t$this->storedLogs[] = func_get_args();\n\t\t}\n\t\telse {\n\t\t\tif(is_object($this->logsObj)) {\n\t\t\t\t$this->logsObj->log_by_class($message, $type);\n\t\t\t}\n\t\t}\n\t}","label":0}
{"text":"public static InStream create(String name, FSDataInputStream file, long streamOffset,\n      int streamLength, CompressionCodec codec, int bufferSize) throws IOException {\n\n    return create(name, file, streamOffset, streamLength, codec, bufferSize, true, 1);\n  }","label":0}
{"text":"def create_database(self, name, path=None, force=False):\n        \n        if path:\n            # explicit mkdir ensures the user own the dir rather than impala,\n            # which is easier for manual cleanup, if necessary\n            self.hdfs.mkdir(path)\n        statement = ddl.CreateDatabase(name, path=path, can_exist=force)\n        return self._execute(statement)","label":0}
{"text":"def getinputfiles(self, outputfile, loadmetadata=True, client=None,requiremetadata=False):\n        \"\"\"\"\"\"\n        if isinstance(outputfile, CLAMOutputFile):\n            outputfilename = str(outputfile).replace(os.path.join(self.projectpath,'output\/'),'')\n        else:\n            outputfilename = outputfile\n        outputtemplate, inputfiles = self[outputfilename]\n        for inputfilename, inputtemplate in inputfiles.items():\n            yield CLAMInputFile(self.projectpath, inputfilename, loadmetadata,client,requiremetadata), inputtemplate","label":0}
{"text":"public boolean doAction(String strAction, int iOptions)\n    {\n        if (Constants.BACK.equalsIgnoreCase(strAction))\n        {\n            String strPrevAction = this.getBaseApplet().popHistory(1, true);   \/\/ Current screen\n            strAction = getBaseApplet().popHistory(1, true);   \/\/ Last screen\n            if (strAction != null)\n            {\n                if (!Constants.BACK.equalsIgnoreCase(strAction)) \/\/ Never (prevent endless recursion)\n                    return this.handleAction(strAction, this, iOptions);\n            }\n            else if (strPrevAction != null)\n                this.getBaseApplet().pushHistory(strPrevAction, ((iOptions & Constants.DONT_PUSH_TO_BROWSER) == Constants.PUSH_TO_BROWSER));    \/\/ If top of stack, leave it alone.\n        }\n        else\n        { \/\/ The only other actions are URLS, so change the page.\n            URL url = null;\n            try {\n            \turl = new URL(strAction);\n            } catch (MalformedURLException e) {\n            \turl = JHtmlView.getURLFromPath(strAction, this.getBaseApplet());\n            }\n            if (url != null)\n            \tm_editorPane.linkActivated(url, this.getBaseApplet(), 0);\n        }\n        return true;    \/\/ Handled\n    }","label":0}
{"text":"public function uploadFileByContent(File $file, string $content)\n    {\n        $dir = sys_get_temp_dir();\n\n        $tmp = $dir.'\/'.Uuid::uuid4()->toString();\n\n        file_put_contents($tmp, $content);\n\n        $filename = $file->name;\n\n        if (!$filename) {\n            $filename = Uuid::uuid4()->toString().'.'.$this->guessExtension($tmp);\n        }\n\n        $filename = $dir.'\/'.$filename;\n\n        rename($tmp, $filename);\n\n        return $this->uploadFileFromFilesystem($file, $filename);\n    }","label":0}
{"text":"def patch():\n    \n    if hasattr(botocore.client, '_xray_enabled'):\n        return\n    setattr(botocore.client, '_xray_enabled', True)\n\n    wrapt.wrap_function_wrapper(\n        'botocore.client',\n        'BaseClient._make_api_call',\n        _xray_traced_botocore,\n    )\n\n    wrapt.wrap_function_wrapper(\n        'botocore.endpoint',\n        'Endpoint.prepare_request',\n        inject_header,\n    )","label":0}
{"text":"public final void resolve(Number value) {\r\n\t\tfuture.complete(new Tree((Tree) null, null, value));\r\n\t}","label":0}
{"text":"public static MethodInvocation start(String objectName, String methodName, int lineNumber) {\n        bigMessage(\"Starting profiling... \" + objectName + \"#\" + methodName + \" (\" + lineNumber + \")\");\n        if (profiling()) {\n            logger.error(\"Profiling was already started for '{}'\", callstack.getFirst().getCls() + \"#\"\n                    + callstack.getFirst().getMethod());\n            throw new IllegalStateException();\n        }\n\n        MethodDescriptor methodDescriptor = new MethodDescriptor(objectName, methodName, lineNumber);\n        MethodInvocation rootInvocation = new MethodInvocation(methodDescriptor);\n        invocations.add(rootInvocation);\n        callstack.add(rootInvocation);\n        Agent.setRootInvocation(rootInvocation);\n        return rootInvocation;\n    }","label":0}
{"text":"public function up()\n    {\n        Schema::create('asset_downloads', function (Blueprint $table) {\n            $table->bigInteger('id', true)->unsigned();\n            $table->integer('asset_id')->unsigned()->index('asset_downloads_asset_id');\n            $table->integer('time')->unsigned()->nullable();\n            $table->integer('ip')->nullable();\n            $table->index(['ip', 'asset_id', 'time'], 'asset_downloads_ip_asset_id_time');\n        });\n    }","label":0}
{"text":"private static InputStreamWithMetadata compressStreamWithGZIPNoDigest(\n      InputStream inputStream) throws SnowflakeSQLException\n  {\n    try\n    {\n      FileBackedOutputStream tempStream =\n          new FileBackedOutputStream(MAX_BUFFER_SIZE, true);\n\n      CountingOutputStream countingStream =\n          new CountingOutputStream(tempStream);\n\n      \/\/ construct a gzip stream with sync_flush mode\n      GZIPOutputStream gzipStream;\n\n      gzipStream = new GZIPOutputStream(countingStream, true);\n\n      IOUtils.copy(inputStream, gzipStream);\n\n      inputStream.close();\n\n      gzipStream.finish();\n      gzipStream.flush();\n\n      countingStream.flush();\n\n      return new InputStreamWithMetadata(countingStream.getCount(),\n                                         null, tempStream);\n\n    }\n    catch (IOException ex)\n    {\n      logger.error(\"Exception compressing input stream\", ex);\n\n      throw new SnowflakeSQLException(ex, SqlState.INTERNAL_ERROR,\n                                      ErrorCode.INTERNAL_ERROR.getMessageCode(),\n                                      \"error encountered for compression\");\n    }\n\n  }","label":0}
{"text":"func (m *BaseShardManager) UpdateShardStates(shardStates []ShardState) {\n\tnewAddrs := set.NewSet()\n\tfor _, state := range shardStates {\n\t\tnewAddrs.Add(state.Address)\n\t}\n\n\tm.rwMutex.Lock()\n\tdefer m.rwMutex.Unlock()\n\n\toldAddrs := set.NewSet()\n\tfor _, state := range m.shardStates {\n\t\toldAddrs.Add(state.Address)\n\t}\n\n\tfor address := range set.Subtract(newAddrs, oldAddrs).Iter() {\n\t\tif err := m.pool.Register(\"tcp\", address.(string)); err != nil {\n\t\t\tm.logError(err)\n\t\t}\n\t}\n\n\tfor address := range set.Subtract(oldAddrs, newAddrs).Iter() {\n\t\tif err := m.pool.Unregister(\"tcp\", address.(string)); err != nil {\n\t\t\tm.logError(err)\n\t\t}\n\t}\n\n\tm.shardStates = shardStates\n}","label":0}
{"text":"private AttributeValue getAutoGeneratedKeyAttributeValue(Method getter, Object getterResult) {\n        ArgumentMarshaller marshaller = reflector.getAutoGeneratedKeyArgumentMarshaller(getter);\n        return marshaller.marshall(getterResult);\n    }","label":0}
{"text":"func (e *ErrorClass) New(format string, args ...interface{}) error {\n\treturn e.wrap(fmt.Errorf(format, args...), nil, nil)\n}","label":0}
{"text":"public function getValue()\n    {\n        $selected = [];\n\n        \/\/ walk all options\n        foreach ($this->options as $option) {\n            if ($option instanceof Option) {\n                if ($option->isSelected()) {\n                    $selected[] = $option->getValue();\n                }\n            } else {\n                if ($option instanceof Optgroup) {\n                    $options = $option->getOptions();\n                    foreach ($options as $option2) {\n                        if ($option2->isSelected()) {\n                            $selected[] = $option2->getValue();\n                        }\n                    }\n                }\n            }\n        }\n\n        $count = sizeof($selected);\n        if ($count > 0) {\n            if ($this->isMultiple()) {\n                return $selected;\n            } else {\n                \/\/ return last selected item as value\n                return $selected[$count - 1];\n            }\n        }\n\n        return $this->isMultiple() ? [] : \"\";\n    }","label":0}
{"text":"def _parse_cpe_name(cpe):\n    '''\n    \n    '''\n    part = {\n        'o': 'operating system',\n        'h': 'hardware',\n        'a': 'application',\n    }\n    ret = {}\n    cpe = (cpe or '').split(':')\n    if len(cpe) > 4 and cpe[0] == 'cpe':\n        if cpe[1].startswith('\/'):  # WFN to URI\n            ret['vendor'], ret['product'], ret['version'] = cpe[2:5]\n            ret['phase'] = cpe[5] if len(cpe) > 5 else None\n            ret['part'] = part.get(cpe[1][1:])\n        elif len(cpe) == 13 and cpe[1] == '2.3':  # WFN to a string\n            ret['vendor'], ret['product'], ret['version'], ret['phase'] = [x if x != '*' else None for x in cpe[3:7]]\n            ret['part'] = part.get(cpe[2])\n\n    return ret","label":0}
{"text":"func (a *ActionPushMPLS) WriteTo(w io.Writer) (int64, error) {\n\treturn encoding.WriteTo(w, action{a.Type(), actionLen},\n\t\ta.EtherType, pad2{})\n}","label":0}
{"text":"protected function _checkSelected(array $options, $selectedVal)\n    {\n        if (!empty($selectedVal) && !Arr::key($selectedVal, $options)) {\n            $selectedVal = self::KEY_NO_EXITS_VAL;\n            $options = array_merge(array(self::KEY_NO_EXITS_VAL => $this->_translate('No exits')), $options);\n        }\n\n        return array($options, $selectedVal);\n    }","label":0}
{"text":"func (ap *ApplicationProvider) HasCapability(capability string) bool {\n\tswitch capability {\n\t\/\/ Add new capability names here\n\tcase ApplicationV1_1:\n\t\treturn true\n\tcase ApplicationV1_2:\n\t\treturn true\n\tcase ApplicationV1_3:\n\t\treturn true\n\tcase ApplicationPvtDataExperimental:\n\t\treturn true\n\tcase ApplicationResourcesTreeExperimental:\n\t\treturn true\n\tdefault:\n\t\treturn false\n\t}\n}","label":0}
{"text":"protected function chunk(array $data, bool $terminating): string\n    {\n        $json = json_encode($data, 0);\n        $length = $terminating\n            ? strlen($json)\n            : strlen($json.self::EOL);\n\n        $chunk = implode(self::EOL, [\n            'Content-Type: application\/json',\n            'Content-Length: '.$length,\n            null,\n            $json,\n            null,\n        ]);\n\n        return $this->boundary().$chunk;\n    }","label":0}
{"text":"public static List<JPAObject> convertEDBObjectsToJPAObjects(List<EDBObject> objects) {\n        List<JPAObject> result = new ArrayList<JPAObject>();\n        for (EDBObject object : objects) {\n            result.add(convertEDBObjectToJPAObject(object));\n        }\n        return result;\n    }","label":0}
{"text":"def alt_names(names: str) -> Callable[..., Any]:\n    \n    names_split = names.split()\n\n    def decorator(func: Callable[..., Any]) -> Callable[..., Any]:\n        func.alt_names = names_split  # type: ignore\n        return func\n    return decorator","label":0}
{"text":"public static IQueryParameterAnd<?> parseQueryParams(FhirContext theContext, RestSearchParameterTypeEnum paramType,\n\t\t\tString theUnqualifiedParamName, List<QualifiedParamList> theParameters) {\n\t\tQueryParameterAndBinder binder = null;\n\t\tswitch (paramType) {\n\t\tcase COMPOSITE:\n\t\t\tthrow new UnsupportedOperationException();\n\t\tcase DATE:\n\t\t\tbinder = new QueryParameterAndBinder(DateAndListParam.class,\n\t\t\t\t\tCollections.<Class<? extends IQueryParameterType>> emptyList());\n\t\t\tbreak;\n\t\tcase NUMBER:\n\t\t\tbinder = new QueryParameterAndBinder(NumberAndListParam.class,\n\t\t\t\t\tCollections.<Class<? extends IQueryParameterType>> emptyList());\n\t\t\tbreak;\n\t\tcase QUANTITY:\n\t\t\tbinder = new QueryParameterAndBinder(QuantityAndListParam.class,\n\t\t\t\t\tCollections.<Class<? extends IQueryParameterType>> emptyList());\n\t\t\tbreak;\n\t\tcase REFERENCE:\n\t\t\tbinder = new QueryParameterAndBinder(ReferenceAndListParam.class,\n\t\t\t\t\tCollections.<Class<? extends IQueryParameterType>> emptyList());\n\t\t\tbreak;\n\t\tcase STRING:\n\t\t\tbinder = new QueryParameterAndBinder(StringAndListParam.class,\n\t\t\t\t\tCollections.<Class<? extends IQueryParameterType>> emptyList());\n\t\t\tbreak;\n\t\tcase TOKEN:\n\t\t\tbinder = new QueryParameterAndBinder(TokenAndListParam.class,\n\t\t\t\t\tCollections.<Class<? extends IQueryParameterType>> emptyList());\n\t\t\tbreak;\n\t\tcase URI:\n\t\t\tbinder = new QueryParameterAndBinder(UriAndListParam.class,\n\t\t\t\t\tCollections.<Class<? extends IQueryParameterType>> emptyList());\n\t\t\tbreak;\n\t\tcase HAS:\n\t\t\tbinder = new QueryParameterAndBinder(HasAndListParam.class,\n\t\t\t\t\tCollections.<Class<? extends IQueryParameterType>> emptyList());\n\t\t\tbreak;\n\t\t}\n\n\t\t\/\/ FIXME null access\n\t\treturn binder.parse(theContext, theUnqualifiedParamName, theParameters);\n\t}","label":0}
{"text":"public function update(RestCompanyBusinessUnitsRequestTransfer $restCompanyBusinessUnitsRequestTransfer\n    ): RestCompanyBusinessUnitsResponseTransfer\n    {\n        \/** @var \\Generated\\Shared\\Transfer\\RestCompanyBusinessUnitsResponseTransfer $restCompanyBusinessUnitsResponseTransfer *\/\n        $restCompanyBusinessUnitsResponseTransfer = $this->zedRequestClient->call(\n            '\/company-business-units-rest-api\/gateway\/update',\n            $restCompanyBusinessUnitsRequestTransfer\n        );\n\n        return $restCompanyBusinessUnitsResponseTransfer;\n    }","label":0}
{"text":"def authorize_and_capture\n      \n      resp = StdClass.new                        \n      if self.financial_status == Invoice::FINANCIAL_STATUS_CAPTURED\n        resp.error = \"Funds for this invoice have already been captured.\"\n      else\n                        \n        sc = self.site.store_config                \n        case sc.pp_name                                    \n          when StoreConfig::PAYMENT_PROCESSOR_STRIPE\n                                                                              \n            Stripe.api_key = sc.stripe_secret_key.strip\n            bt = nil\n            begin\n              c = Stripe::Charge.create(\n                :amount => (self.total * 100).to_i,\n                :currency => 'usd',\n                :customer => self.customer.stripe_customer_id,\n                :capture => true,\n                :metadata => { :invoice_id => self.id },\n                :statement_descriptor => \"#{self.site.description.truncate(22)}\"\n              )                        \n            rescue Exception => ex\n              resp.error = \"Error during capture process\\n#{ex.message}\"                \n            end            \n            if resp.error.nil?\n              InvoiceTransaction.create(\n                :invoice_id => self.id,\n                :transaction_id => c.id,\n                :transaction_type => InvoiceTransaction::TYPE_AUTHCAP,\n                :payment_processor => sc.pp_name,\n                :amount => c.amount \/ 100.0,\n                :captured => true,\n                :date_processed => DateTime.now.utc,\n                :success => c.status == 'succeeded'\n              )\n              if c.status == 'succeeded'\n                self.financial_status = Invoice::FINANCIAL_STATUS_CAPTURED\n                self.save\n                resp.success = true\n              else\n                resp.error = \"Error capturing funds.\"\n              end\n            end\n                      \n        end        \n      end      \n      return resp\n    end","label":0}
{"text":"public function boot()\n    {\n        $manager = new ThemeManager($this->app['files'], $this->app[Template::class], $this->app['cache.store']);\n\n        $this->app->singleton('boomcms.template.manager', function () use ($manager) {\n            return $manager;\n        });\n\n        $this->themes = $manager->getInstalledThemes();\n\n        foreach ($this->themes as $theme) {\n            \/\/ Merge the configuration in the theme's src\/config\/boomcms.php file\n            Config::merge($theme->getConfigDirectory().DIRECTORY_SEPARATOR.'boomcms.php');\n        }\n\n        foreach ($this->themes as $theme) {\n            $this->loadViewsFromTheme($theme);\n            $theme->init();\n        }\n    }","label":0}
{"text":"func (s *CustomKeyStoresListEntry) SetCustomKeyStoreName(v string) *CustomKeyStoresListEntry {\n\ts.CustomKeyStoreName = &v\n\treturn s\n}","label":0}
{"text":"protected function cmdListStores() \/*: void*\/\n    {\n        \/**\n         * @see simplecomplex_cache_cli()\n         *\/\n        $container = Dependency::container();\n        \/\/ Validate input. ---------------------------------------------\n        $match = '';\n        if (\n            !empty($this->command->arguments['match'])\n            && ($match = trim($this->command->arguments['match'])) !== ''\n            && !preg_match('\/^\\\/.+\\\/[a-zA-Z]*$\/', $match)\n        ) {\n            $this->command->inputErrors[] = '\\'match\\' argument must be slash delimited regular expression.';\n        }\n\n        $get = !empty($this->command->options['get']);\n\n        if ($this->command->inputErrors) {\n            foreach ($this->command->inputErrors as $msg) {\n                $this->environment->echoMessage(\n                    $this->environment->format($msg, 'hangingIndent'),\n                    'notice'\n                );\n            }\n            \/\/ This command's help text.\n            $this->environment->echoMessage(\"\\n\" . $this->command);\n            exit;\n        }\n        \/\/ Display command and the arg values used.---------------------\n        \/\/ No arg values to list.\n        \/\/ Check if the command is doable.------------------------------\n        \/\/ Does that\/these store(s) exist?\n        if ($container->has('cache-broker')) {\n            \/** @var CacheBroker $cache_broker *\/\n            $cache_broker_class = get_class($container->get('cache-broker'));\n        } else {\n            $cache_broker_class = static::CLASS_CACHE_BROKER;\n        }\n        $cache_class = constant($cache_broker_class . '::CACHE_CLASSES')[CacheBroker::CACHE_BASE];\n        if (!method_exists($cache_class, 'listInstances')) {\n            $this->environment->echoMessage('Cannot retrieve list of cache store instances via class['\n                . $cache_class . '], has no static method listInstances().', 'error');\n            exit;\n        }\n        $stores = forward_static_call($cache_class . '::listInstances');\n\n        \/\/ Do it.\n        $names = [];\n        foreach ($stores as $instance) {\n            if (preg_match('\/^config\\..+\/', $instance->name)) {\n                $name = substr($instance->name, 7);\n                if (!$match || preg_match($match, $name)) {\n                    $names[] = $name;\n                }\n            }\n        }\n        sort($names);\n        if ($get) {\n            return join(',', $names);\n        }\n        $this->environment->echoMessage(join(\"\\n\", $names));\n        exit;\n    }","label":0}
{"text":"public function fetch()\n    {\n        static $currentLine = 0;\n        $dataResult = array();\n\n        if (isset($this->options['skipHeader']) && $this->options['skipHeader'] === true) {\n            $skipLines = 1;\n        } elseif (isset($this->options['skipHeader']) && \\is_numeric($this->options['skipHeader'])) {\n            $skipLines = (int)$this->options['skipHeader'];\n        } else {\n            $skipLines = 0;\n        }\n        if (($handle = fopen($this->csvFilePath, 'r')) !== false) {\n            while (($data = fgetcsv($handle, 65534, $this->csvDelimiter, $this->csvEnclosure)) !== false) {\n                \/\/ skip header (maybe is better to set the first offset position instead)\n                if ($currentLine < $skipLines) {\n                    $currentLine++;\n                    continue;\n                }\n                if ($currentLine >= $this->offset && $currentLine < ($this->offset + $this->limit)) {\n                    if (isset($data[0]) && $data[0] !== '') {\n                        $this->preProcessRecordData($data);\n                        $dataResult[] = $data;\n                    }\n                }\n                $currentLine++;\n            }\n            fclose($handle);\n        }\n        $this->logger->log(sprintf('%s: read %s lines and found %s records.', $this->csvFilePath, $currentLine, count($dataResult)), LOG_DEBUG);\n        return $dataResult;\n    }","label":0}
{"text":"public static void croak(final String message, final int exitCode) {\n    System.err.println(message);\n    System.exit(exitCode);\n  }","label":0}
{"text":"def plot_slnp(fignum, SiteRec, datablock, key):\n    \n# make the stereonet\n    plt.figure(num=fignum)\n    plot_net(fignum)\n    s = SiteRec['er_site_name']\n#\n#   plot on the data\n#\n    coord = SiteRec['site_tilt_correction']\n    title = ''\n    if coord == '-1':\n        title = s + \": specimen coordinates\"\n    if coord == '0':\n        title = s + \": geographic coordinates\"\n    if coord == '100':\n        title = s + \": tilt corrected coordinates\"\n    DIblock, GCblock = [], []\n    for plotrec in datablock:\n        if plotrec[key + '_direction_type'] == 'p':  # direction is pole to plane\n            GCblock.append(\n                (float(plotrec[key + \"_dec\"]), float(plotrec[key + \"_inc\"])))\n        else:  # assume direction is a directed line\n            DIblock.append(\n                (float(plotrec[key + \"_dec\"]), float(plotrec[key + \"_inc\"])))\n    if len(DIblock) > 0:\n        plot_di(fignum, DIblock)  # plot directed lines\n    if len(GCblock) > 0:\n        for pole in GCblock:\n            plot_circ(fignum, pole, 90., 'g')  # plot directed lines\n#\n# put on the mean direction\n#\n    x, y = [], []\n    XY = pmag.dimap(float(SiteRec[\"site_dec\"]), float(SiteRec[\"site_inc\"]))\n    x.append(XY[0])\n    y.append(XY[1])\n    plt.scatter(x, y, marker='d', s=80, c='g')\n    plt.title(title)\n#\n# get the alpha95\n#\n    Xcirc, Ycirc = [], []\n    Da95, Ia95 = pmag.circ(float(SiteRec[\"site_dec\"]), float(\n        SiteRec[\"site_inc\"]), float(SiteRec[\"site_alpha95\"]))\n    for k in range(len(Da95)):\n        XY = pmag.dimap(Da95[k], Ia95[k])\n        Xcirc.append(XY[0])\n        Ycirc.append(XY[1])\n    plt.plot(Xcirc, Ycirc, 'g')","label":0}
{"text":"protected function compareActions(array $a, array $b)\n    {\n        $a = isset($a['priority']) ? $a['priority'] : 0;\n        $b = isset($b['priority']) ? $b['priority'] : 0;\n        $c = isset($action['isSubmittable']) && $action['isSubmittable'];\n\n        return ($c || ($a === 0) || ($a >= $b));\n    }","label":0}
{"text":"public function getPath()\n    {\n        if($this->getType() == 'memory') {\n            $this->_path = parse_url($this->_path, PHP_URL_PATH);\n        }\n\n        if($this->getType() == 'temp')\n        {\n            if(!$this->getResource()) {\n                $this->_path = $this->getTemporaryFile();\n            }\n        }\n\n        return parent::getPath();\n    }","label":0}
{"text":"function (server) {\n\n      \/\/ Retrieve the configured handler.\n      if (handler) {\n        handler = require(require('path').resolve() + '\/' + handler);\n      } else {\n        console.log('No handler defined for websocket server, not starting websocket.');\n        return;\n      }\n\n      \/\/ Attach websockets server to http server\n      var WebSocketServer = require('websocket').server;\n      var wsServer = new WebSocketServer({\n        httpServer: server\n      });\n\n      \/\/ Handle requests\n      wsServer.on('request', handler);\n    }","label":0}
{"text":"function isEmpty(value: mixed): boolean {\n  if (Array.isArray(value)) {\n    return value.length === 0;\n  } else if (typeof value === 'object') {\n    if (value) {\n      invariant(\n        !isIterable(value) || value.size === undefined,\n        'isEmpty() does not support iterable collections.',\n      );\n      for (const _ in value) {\n        return false;\n      }\n    }\n    return true;\n  } else {\n    return !value;\n  }\n}","label":0}
{"text":"final public function resolveArguments(\n        ContextFunction $reflection,\n        array $parameters = [],\n        string $context = null\n    ): array {\n        $arguments = [];\n        foreach ($reflection->getParameters() as $parameter) {\n            try {\n                \/\/Information we need to know about argument in order to resolve it's value\n                $name = $parameter->getName();\n                $class = $parameter->getClass();\n            } catch (\\Throwable $e) {\n                \/\/Possibly invalid class definition or syntax error\n                throw new ContainerException($e->getMessage(), $e->getCode(), $e);\n            }\n\n            if (isset($parameters[$name]) && is_object($parameters[$name])) {\n                if ($parameters[$name] instanceof Autowire) {\n                    \/\/Supplied by user as late dependency\n                    $arguments[] = $parameters[$name]->resolve($this);\n                } else {\n                    \/\/Supplied by user as object\n                    $arguments[] = $parameters[$name];\n                }\n                continue;\n            }\n\n            \/\/No declared type or scalar type or array\n            if (empty($class)) {\n                \/\/Provided from outside\n                if (array_key_exists($name, $parameters)) {\n                    \/\/Make sure it's properly typed\n                    $this->assertType($parameter, $reflection, $parameters[$name]);\n                    $arguments[] = $parameters[$name];\n                    continue;\n                }\n\n                if ($parameter->isDefaultValueAvailable()) {\n                    \/\/Default value\n                    $arguments[] = $parameter->getDefaultValue();\n\n                    continue;\n                }\n\n                \/\/Unable to resolve scalar argument value\n                throw new ArgumentException($parameter, $reflection);\n            }\n\n            try {\n                \/\/Requesting for contextual dependency\n                $arguments[] = $this->get($class->getName(), $name);\n\n                continue;\n            } catch (AutowireException $e) {\n                if ($parameter->isOptional()) {\n                    \/\/This is optional dependency, skip\n                    $arguments[] = null;\n                    continue;\n                }\n\n                throw $e;\n            }\n        }\n\n        return $arguments;\n    }","label":0}
{"text":"func NewLoggingMounter(m Mounter, um Unmounter, logf func(string, ...interface{})) MountUnmounter {\n\treturn &loggingMounter{m, um, logf}\n}","label":0}
{"text":"func (s *Selection) Add(selector string) *Selection {\n\treturn s.AddNodes(findWithMatcher([]*html.Node{s.document.rootNode}, compileMatcher(selector))...)\n}","label":0}
{"text":"public static base_response create(nitro_service client, sslcertreq resource) throws Exception {\n\t\tsslcertreq createresource = new sslcertreq();\n\t\tcreateresource.reqfile = resource.reqfile;\n\t\tcreateresource.keyfile = resource.keyfile;\n\t\tcreateresource.fipskeyname = resource.fipskeyname;\n\t\tcreateresource.keyform = resource.keyform;\n\t\tcreateresource.pempassphrase = resource.pempassphrase;\n\t\tcreateresource.countryname = resource.countryname;\n\t\tcreateresource.statename = resource.statename;\n\t\tcreateresource.organizationname = resource.organizationname;\n\t\tcreateresource.organizationunitname = resource.organizationunitname;\n\t\tcreateresource.localityname = resource.localityname;\n\t\tcreateresource.commonname = resource.commonname;\n\t\tcreateresource.emailaddress = resource.emailaddress;\n\t\tcreateresource.challengepassword = resource.challengepassword;\n\t\tcreateresource.companyname = resource.companyname;\n\t\treturn createresource.perform_operation(client,\"create\");\n\t}","label":0}
{"text":"func (s *GetRelationalDatabaseSnapshotsInput) SetPageToken(v string) *GetRelationalDatabaseSnapshotsInput {\n\ts.PageToken = &v\n\treturn s\n}","label":0}
{"text":"public function parse($callbacks, LocatorInterface $locator)\n    {\n        $data = null;\n\n        while ($this->read()) {\n            if ($this->nodeType == \\XMLReader::ELEMENT) {\n                $child = $this->parseElement($this->name, $callbacks, $locator);\n                $data  = $child;\n                break;\n            }\n        }\n\n        return $data;\n    }","label":0}
{"text":"func NewDockerCgroupNetController() Cgroupnetcls {\n\n\tcontroller := &netCls{\n\t\tmarkchan:         make(chan uint64),\n\t\tReleaseAgentPath: \"\",\n\t\tTriremePath:      \"\",\n\t}\n\n\treturn controller\n}","label":0}
{"text":"private function getFormattedAmount($amount, $status)\n    {\n        $currency = '\u20ac';\n        $sign = $amount < 0.0 ? '-' : '';\n        \/** @noinspection CallableParameterUseCaseInTypeContextInspection *\/\n        $amount = abs($amount);\n        $statusClass = $this->getStatusClass($status);\n        $statusMessage = $this->getAmountStatusTitle($status);\n        $this->setStatus($status, $statusMessage);\n        if (!empty($statusMessage)) {\n            $statusMessage = \" title=\\\"$statusMessage\\\"\";\n        }\n\n        $result = '';\n        $result .= '<span class=\"sign\">' . $sign . '<\/span>';\n        $result .= '<span class=\"currency\">' . $currency . '<\/span>';\n        $result .= number_format($amount, 2, ',', '.');\n        \/\/ Prevents warning \"There should be a space between attribute ...\n        $wrapperBegin = \"<span class=\\\"amount notice-$statusClass\\\"\" . $statusMessage . '>';\n        $result = $wrapperBegin . $result . '<\/span>';\n        return $result;\n    }","label":0}
{"text":"func NewPostBookmark() echo.HandlerFunc {\n\n\t\/\/ swagger:route POST \/users\/{id}\/posts\/{pid}\/bookmarks users post vote NewUserPostBookmark\n\t\/\/\n\t\/\/ Adds a new bookmark on the current post\n\t\/\/\n\t\/\/\tProduces:\n\t\/\/\t- application\/json\n\t\/\/\n\t\/\/\tSecurity:\n\t\/\/\t\toauth: profile_messages:write\n\t\/\/\n\t\/\/\tResponses:\n\t\/\/\t\tdefault: UsersIdPostsPidBookmarks\n\n\treturn func(c echo.Context) error {\n\t\tif !rest.IsGranted(\"profile_messages:write\", c) {\n\t\t\treturn rest.InvalidScopeResponse(\"profile_messages:write\", c)\n\t\t}\n\n\t\t\/\/ Send it\n\t\tme := c.Get(\"me\").(*nerdz.User)\n\t\tpost := c.Get(\"post\").(*nerdz.UserPost)\n\t\tbookmark, err := me.Bookmark(post)\n\t\tif err != nil {\n\t\t\terrstr := err.Error()\n\t\t\tc.JSON(http.StatusBadRequest, &rest.Response{\n\t\t\t\tData:         nil,\n\t\t\t\tHumanMessage: errstr,\n\t\t\t\tMessage:      errstr,\n\t\t\t\tStatus:       http.StatusBadRequest,\n\t\t\t\tSuccess:      false,\n\t\t\t})\n\t\t\treturn errors.New(errstr)\n\t\t}\n\t\t\/\/ Extract the TO from the new post and return\n\t\t\/\/ selected fields.\n\t\treturn rest.SelectFields(bookmark.(*nerdz.UserPostBookmark).GetTO(me), c)\n\t}\n}","label":0}
{"text":"def check_channel_shell_request(self, channel):\n        ''''''\n        try:\n            self.channels[channel].start()\n        except KeyError:\n            log.error('Requested to start a channel (%r) that was not previously set up.', channel)\n            return False\n        else:\n            return True","label":0}
{"text":"public void execute(@Param(\"clusterId\") Long clusterId, Context context, Navigator nav) throws Exception {\n        AutoKeeperCluster autoKeeperCluster = autoKeeperClusterService.findAutoKeeperClusterById(clusterId);\n\n        context.put(\"autoKeeperCluster\", autoKeeperCluster);\n    }","label":0}
{"text":"func (mp MultiPoint) String() string {\n\tvar result string\n\tif bytes, err := json.Marshal(mp); err == nil {\n\t\tresult = string(bytes)\n\t} else {\n\t\tresult = err.Error()\n\t}\n\treturn result\n}","label":0}
{"text":"def max_prefix_get\n      str = config_get('bgp_neighbor_af', 'max_prefix', @get_args)\n      return nil if str.nil?\n\n      regexp = Regexp.new('maximum-prefix (?<limit>\\d+)' \\\n                          ' *(?<threshold>\\d+)?' \\\n                          ' *(?<opt>restart|warning-only)?' \\\n                          ' *(?<interval>\\d+)?')\n      regexp.match(str)\n    end","label":0}
{"text":"public static function media($path, $size) {\n    \/\/ Which image size was requested?\n    global $_wp_additional_image_sizes;\n    $image_size = $_wp_additional_image_sizes[$size];\n    \n    \/\/ Get the path info\n    $pathinfo = pathinfo($path);\n    $fname = $pathinfo['basename'];\n    $fext = $pathinfo['extension'];\n    $dir = $pathinfo['dirname'];\n    $fdir = realpath(str_replace('\/\/', '\/', ABSPATH.$dir)).'\/';\n    \n    \/\/ Filename without any size suffix or extension (e.g. without -144x200.jpg)\n    $fname_prefix = preg_replace('\/(?:-\\d+x\\d+)?\\.'.$fext.'$\/i', '', $fname);\n    $out_fname = sprintf(\n      '%s-%sx%s.%s',\n      $fname_prefix,\n      $image_size['width'],\n      $image_size['height'],\n      $fext\n    );\n    \n    \/\/ See if the file that we're predicting exists\n    \/\/ If so, we can avoid a call to the database\n    $fpath = $fdir.$out_fname;\n    if(file_exists($fpath)) {\n      return sprintf(\n        '%s\/%s',\n        $pathinfo['dirname'],\n        $out_fname\n      );\n    }\n    \n    \/\/ Can't find the file? Figure out the correct path from the database\n    global $wpdb;\n    $guid = site_url().$dir.'\/'.$fname_prefix.'.'.$fext;\n    $prepared = $wpdb->prepare(\n      \"SELECT\n        pm.meta_value\n      FROM $wpdb->posts p\n      INNER JOIN $wpdb->postmeta pm\n        ON p.ID = pm.post_id\n      WHERE p.guid = %s\n      AND pm.meta_key = '_wp_attachment_metadata'\n      LIMIT 1\",\n      $guid\n    );\n    $row = $wpdb->get_row($prepared);\n    if(is_object($row)) {\n      $meta = unserialize($row->meta_value);\n      if(isset($meta['sizes'][$size]['file'])) {\n        $meta_fname = $meta['sizes'][$size]['file'];\n        return sprintf(\n          '%s\/%s',\n          $pathinfo['dirname'],\n          $meta_fname\n        );\n      }\n    }\n    \n    \/\/ Still nothing? Just return the path given\n    return $path;\n  }","label":0}
{"text":"public function getFullAttributeReferences(\n        FilterInterface $filter,\n        DoctrineQueryHandlerInterface $queryHandler\n    ): array {\n        $references = [];\n        foreach ($filter->getAttributes() as $attributePath) {\n            $references[] = $queryHandler->resolveAttributeAlias($attributePath);\n        }\n\n        return $references;\n    }","label":0}
{"text":"protected static function setContentType($headers, $response)\n    {\n        if (isset($headers['Content-Type'])) {\n            return $headers;\n        }\n        if (in_array($response->statusCode(), [204, 304])) {\n            return $headers;\n        }\n\n        $whitelist = [\n            'application\/javascript', 'application\/json', 'application\/xml', 'application\/rss+xml'\n        ];\n\n        $type = $response->type();\n        $charset = $response->charset();\n\n        $hasCharset = false;\n        if ($charset && (strpos($type, 'text\/') === 0 || in_array($type, $whitelist))) {\n            $hasCharset = true;\n        }\n\n        $value = $type;\n        if ($hasCharset) {\n            $value = \"{$type}; charset={$charset}\";\n        }\n        $headers['Content-Type'] = $value;\n\n        return $headers;\n    }","label":0}
{"text":"public function addSupportedLanguage($language, $name = \"defaultTranslationService\", $selfedit=\"false\") {\n\t\t$this->addTranslationLanguageFromService(($selfedit == \"true\"), $name, $language);\n\t\t\n\t\t\/\/ Once more to reaload languages list\n\t\t$this->supportedLanguages($name, $selfedit);\n\t}","label":0}
{"text":"public static PappayapplyResult payPappayapply(Pappayapply pappayapply,String key){\n\t\tMap<String,String> map = MapUtil.objectToMap( pappayapply);\n\t\tString sign = SignatureUtil.generateSign(map,pappayapply.getSign_type(),key);\n\t\tpappayapply.setSign(sign);\n\t\tString secapiPayRefundXML = XMLConverUtil.convertToXML( pappayapply);\n\t\tHttpUriRequest httpUriRequest = RequestBuilder.post()\n\t\t\t\t.setHeader(xmlHeader)\n\t\t\t\t.setUri(baseURI()+ \"\/pay\/pappayapply\")\n\t\t\t\t.setEntity(new StringEntity(secapiPayRefundXML,Charset.forName(\"utf-8\")))\n\t\t\t\t.build();\n\t\treturn LocalHttpClient.executeXmlResult(httpUriRequest,PappayapplyResult.class,pappayapply.getSign_type(),key);\n\t}","label":0}
{"text":"func (c *ManagedDiskController) GetDisk(resourceGroup, diskName string) (string, string, error) {\n\tctx, cancel := getContextWithCancel()\n\tdefer cancel()\n\n\tresult, err := c.common.cloud.DisksClient.Get(ctx, resourceGroup, diskName)\n\tif err != nil {\n\t\treturn \"\", \"\", err\n\t}\n\n\tif result.DiskProperties != nil && (*result.DiskProperties).ProvisioningState != nil {\n\t\treturn *(*result.DiskProperties).ProvisioningState, *result.ID, nil\n\t}\n\n\treturn \"\", \"\", err\n}","label":0}
{"text":"def WriteFlowResults(self, results, cursor=None):\n    \"\"\"\"\"\"\n    query = (\"INSERT INTO flow_results \"\n             \"(client_id, flow_id, hunt_id, timestamp, payload, type, tag) \"\n             \"VALUES \")\n    templates = []\n\n    args = []\n    for r in results:\n      templates.append(\"(%s, %s, %s, FROM_UNIXTIME(%s), %s, %s, %s)\")\n      args.append(db_utils.ClientIDToInt(r.client_id))\n      args.append(db_utils.FlowIDToInt(r.flow_id))\n      if r.hunt_id:\n        args.append(db_utils.HuntIDToInt(r.hunt_id))\n      else:\n        args.append(0)\n      args.append(\n          mysql_utils.RDFDatetimeToTimestamp(rdfvalue.RDFDatetime.Now()))\n      args.append(r.payload.SerializeToString())\n      args.append(compatibility.GetName(r.payload.__class__))\n      args.append(r.tag)\n\n    query += \",\".join(templates)\n\n    try:\n      cursor.execute(query, args)\n    except MySQLdb.IntegrityError as e:\n      raise db.AtLeastOneUnknownFlowError(\n          [(r.client_id, r.flow_id) for r in results], cause=e)","label":0}
{"text":"protected function buildTemplating($container)\n\t{\n\t\t$container['templating.global'] = function () {\n\t\t\treturn new SupraGlobal();\n\t\t};\n\n\t\t$container['templating.templating'] = function () use ($container) {\n\t\t\t$templating = new TwigTemplating();\n\t\t\t$templating->addGlobal('supra', $container['templating.global']);\n\n\t\t\treturn $templating;\n\t\t};\n\t}","label":0}
{"text":"public static BufferedImage toImage(@javax.annotation.Nonnull final Component component) {\n    try {\n      com.simiacryptus.util.Util.layout(component);\n      @javax.annotation.Nonnull final BufferedImage img = new BufferedImage(component.getWidth(), component.getHeight(), BufferedImage.TYPE_INT_ARGB_PRE);\n      final Graphics2D g = img.createGraphics();\n      g.setColor(component.getForeground());\n      g.setFont(component.getFont());\n      component.print(g);\n      return img;\n    } catch (@javax.annotation.Nonnull final Exception e) {\n      return null;\n    }\n  }","label":0}
{"text":"func (p *PortList) PopInt() int {\n\ti, err := strconv.Atoi(p.Pop())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn i\n}","label":0}
{"text":"function flatten(keys) {\n  var result = []\n  var index = -1\n  var length = keys.length\n\n  while (++index < length) {\n    if (own.call(alias, keys[index])) {\n      result = result.concat(flatten(alias[keys[index]]))\n    } else if (Array.isArray(keys[index])) {\n      result = result.concat(keys[index])\n    } else {\n      result.push(keys[index])\n    }\n  }\n\n  return result\n}","label":0}
{"text":"def get_page_dpi(pageinfo, options):\n    \"\"\n    xres = max(\n        pageinfo.xres or VECTOR_PAGE_DPI,\n        options.oversample or 0,\n        VECTOR_PAGE_DPI if pageinfo.has_vector else 0,\n    )\n    yres = max(\n        pageinfo.yres or VECTOR_PAGE_DPI,\n        options.oversample or 0,\n        VECTOR_PAGE_DPI if pageinfo.has_vector else 0,\n    )\n    return (float(xres), float(yres))","label":0}
{"text":"private function getCustomisedData(TaskLogCollection $collection)\n    {\n        $data = [];\n\n        if (!is_null($this->rowCustomiser)) {\n            foreach ($collection as $taskLogEntity) {\n                $newCustomiser = $this->rowCustomiser->bindTo($taskLogEntity, $taskLogEntity);\n\n                $data[] = array_merge($taskLogEntity->toArray(), (array) $newCustomiser());\n            }\n        }\n\n        return $data;\n    }","label":0}
{"text":"public void vertex(double x, double y) {\n        MODE = LINES;\n        this.cornerX.add(x);\n        this.cornerY.add(y);\n        this.cornerZ.add(0d);\n        setNumberOfCorner(this.cornerX.size());\n        calcG();\n    }","label":0}
{"text":"function(x, min, max) {\n                    x = this._v(x, \"r\");\n                    min = this._v(min, \"r\", 0);\n                    max = this._v(max, \"r\", 1);\n                    if(min > max) throw new Error(\"Minimum value cannot be greater than maximum value\");\n\n                    if(x < min || x > max) return 0;\n                    if(min === max) return Infinity;\n\n\n                    return 1\/(max-min);\n                }","label":0}
{"text":"function isPalindrome(number) {\n        if (isNumber(number)) {\n            var reverseNumber = reverseOfNumber(number);\n            return (isNumber(reverseNumber) && number === reverseNumber);\n        }\n        else {\n            return false;\n        }\n    }","label":0}
{"text":"@Override\n  public boolean canOpenWarm()\n  {\n    State state = _state;\n\n    if (state == State.ACTIVE) {\n      return true;\n    }\n    else if (state.isEnabled()) {\n      long now = CurrentTime.currentTime();\n\n      if (isFailed(now)) {\n        return false;\n      }\n\n      long firstSuccessTime = _firstSuccessTime;\n      int warmupState = 0;\n\n      if (firstSuccessTime > 0) {\n        warmupState = (int) ((now - firstSuccessTime) \/ _warmupChunkTime);\n      }\n\n      warmupState -= _currentFailCount;\n\n      if (warmupState < 0) {\n        return (_failTime - warmupState * _failChunkTime < now);\n      }\n      else if (WARMUP_MAX <= warmupState) {\n        return true;\n      }\n\n      int connectionMax = WARMUP_CONNECTION_MAX[warmupState];\n\n      int idleCount = getIdleCount();\n      int activeCount = _activeCount.get() + _startingCount.get();\n      int totalCount = activeCount + idleCount;\n      \n      return totalCount < connectionMax;\n    }\n    else {\n      return false;\n    }\n  }","label":0}
{"text":"@Override\n\tpublic List<CPOptionCategory> getCPOptionCategoriesByUuidAndCompanyId(\n\t\tString uuid, long companyId) {\n\t\treturn cpOptionCategoryPersistence.findByUuid_C(uuid, companyId);\n\t}","label":0}
{"text":"public static ModelNode createUndefineAttributeOperation(PathAddress address, String name) {\n        return createAttributeOperation(ModelDescriptionConstants.UNDEFINE_ATTRIBUTE_OPERATION, address, name);\n    }","label":0}
{"text":"public function getFilterFactoryByName(string $name): FilterFactoryInterface\n    {\n        if (!isset($this->filterFactories[$name])) {\n            throw new NotFoundException(sprintf(\"Filter factory with name '%s' was not found.\", $name));\n        }\n\n        return $this->filterFactories[$name];\n    }","label":0}
{"text":"def getOverlaySortOrder(self, ulOverlayHandle):\n        \"\"\"\"\"\"\n\n        fn = self.function_table.getOverlaySortOrder\n        punSortOrder = c_uint32()\n        result = fn(ulOverlayHandle, byref(punSortOrder))\n        return result, punSortOrder.value","label":0}
{"text":"private static double getDurationInSecs(\n      ViewData.AggregationWindowData.CumulativeData cumulativeData) {\n    return toDoubleSeconds(cumulativeData.getEnd().subtractTimestamp(cumulativeData.getStart()));\n  }","label":0}
{"text":"def com_google_fonts_check_name_familyname_first_char(ttFont):\n  \n  from fontbakery.utils import get_name_entry_strings\n  failed = False\n  for familyname in get_name_entry_strings(ttFont, NameID.FONT_FAMILY_NAME):\n    digits = map(str, range(0, 10))\n    if familyname[0] in digits:\n      yield FAIL, (\"Font family name '{}'\"\n                   \" begins with a digit!\").format(familyname)\n      failed = True\n  if failed is False:\n    yield PASS, \"Font family name first character is not a digit.\"","label":0}
{"text":"public static function CleanCache(){\n\t\tstatic $clean = false;\n\n\n\t\tif( $clean || empty(Less_Cache::$cache_dir) ){\n\t\t\treturn;\n\t\t}\n\n\t\t$clean = true;\n\n\t\t\/\/ only remove files with extensions created by less.php\n\t\t\/\/ css files removed based on the list files\n\t\t$remove_types = array('lesscache'=>1,'list'=>1,'less'=>1,'map'=>1);\n\n\t\t$files = scandir(Less_Cache::$cache_dir);\n\t\tif( !$files ){\n\t\t\treturn;\n\t\t}\n\n\t\t$check_time = time() - self::$gc_lifetime;\n\t\tforeach($files as $file){\n\n\n\t\t\t\/\/ don't delete if the file wasn't created with less.php\n\t\t\tif( strpos($file,Less_Cache::$prefix) !== 0 ){\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t$parts = explode('.',$file);\n\t\t\t$type = array_pop($parts);\n\n\n\t\t\tif( !isset($remove_types[$type]) ){\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t$full_path = Less_Cache::$cache_dir . $file;\n\t\t\t$mtime = filemtime($full_path);\n\n\t\t\t\/\/ don't delete if it's a relatively new file\n\t\t\tif( $mtime > $check_time ){\n\t\t\t\tcontinue;\n\t\t\t}\n\n\n\t\t\t\/\/ delete the list file and associated css file\n\t\t\tif( $type === 'list' ){\n\t\t\t\tself::ListFiles($full_path, $list, $css_file_name);\n\t\t\t\tif( $css_file_name ){\n\t\t\t\t\t$css_file = Less_Cache::$cache_dir . $css_file_name;\n\t\t\t\t\tif( file_exists($css_file) ){\n\t\t\t\t\t\tunlink($css_file);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tunlink($full_path);\n\t\t}\n\n\n\t}","label":0}
{"text":"public function getMenu($name)\n    {\n        try {\n            $menu = app('TypiCMS.menus')->first(function (Menu $menu) use ($name) {\n                return $menu->name == $name;\n            });\n        } catch (Exception $e) {\n            Log::info('No menu found with name \u201c'.$name.'\u201d');\n\n            return;\n        }\n\n        return $menu;\n    }","label":0}
{"text":"public static function alterColumn(\n        $operation,\n        $table,\n        $column,\n        $type = 'text',\n        $signed = true,\n        $allowNull = true,\n        $default = null,\n        $position = null,\n        $comment = ''\n    ) {\n        $query = static::getQuery();\n\n        $column = $query->quoteName((array) $column);\n\n        return static::build(\n            'ALTER TABLE',\n            $query->quoteName($table),\n            $operation,\n            implode(' ', $column),\n            $type ?: 'text',\n            $signed ? null : 'UNSIGNED',\n            $allowNull ? null : 'NOT NULL',\n            $default !== false ? 'DEFAULT ' . static::getQuery()->validValue($default) : null,\n            $comment ? 'COMMENT ' . $query->quote($comment) : null,\n            static::handleColumnPosition($position)\n        );\n    }","label":0}
{"text":"protected function _parseQuota(\n        Horde_Imap_Client_Interaction_Pipeline $pipeline,\n        Horde_Imap_Client_Tokenize $data\n    )\n    {\n        $c = &$pipeline->data['quotaresp'];\n\n        $root = $data->next();\n        $c[$root] = array();\n\n        $data->next();\n\n        while (($curr = $data->next()) !== false) {\n            $c[$root][Horde_String::lower($curr)] = array(\n                'usage' => $data->next(),\n                'limit' => $data->next()\n            );\n        }\n    }","label":0}
{"text":"public static <T extends Comparable<T>> RangeSet<T> unionRanges(final Iterable<Range<T>> ranges)\n  {\n    RangeSet<T> rangeSet = null;\n    for (Range<T> range : ranges) {\n      if (rangeSet == null) {\n        rangeSet = TreeRangeSet.create();\n      }\n      rangeSet.add(range);\n    }\n    return rangeSet;\n  }","label":0}
{"text":"func (tree *btree) Iter(key Key) Iterator {\n\tif tree.root == nil {\n\t\treturn nilIterator()\n\t}\n\n\treturn tree.root.find(key)\n}","label":0}
{"text":"public function getRespondent()\n    {\n        if (! $this->_respondent instanceof \\Gems_Tracker_Respondent) {\n            if ($this->_getParam(\\MUtil_Model::REQUEST_ID1) && $this->_getParam(\\MUtil_Model::REQUEST_ID2)) {\n                $this->_respondent = parent::getRespondent();\n\n            } else {\n                $id = $this->_getParam(\\MUtil_Model::REQUEST_ID);\n\n                if ($id) {\n                    $model = $this->getModel();\n                    $row = $model->loadFirst(array('grco_id_action' => $id));\n\n                    if ($row) {\n                        $this->_respondent = $this->loader->getRespondent(\n                                $row['gr2o_patient_nr'],\n                                $row['gr2o_id_organization']\n                                );\n\n                        if (! $this->_respondent->exists) {\n                            throw new \\Gems_Exception($this->_('Unknown respondent.'));\n                        }\n\n                        $this->_respondent->applyToMenuSource($this->menu->getParameterSource());\n                    }\n                }\n            }\n        }\n\n        return $this->_respondent;\n    }","label":0}
{"text":"func (l *Logger) log(str string) (n int, err error) {\n\treturn fmt.Fprint(l.sink, str)\n}","label":0}
{"text":"public List<UicomponentAttributeType<UicomponentAttributeType<T>>> getAllAttribute()\n   {\n      List<UicomponentAttributeType<UicomponentAttributeType<T>>> list = new ArrayList<UicomponentAttributeType<UicomponentAttributeType<T>>>();\n      List<Node> nodeList = childNode.get(\"attribute\");\n      for(Node node: nodeList)\n      {\n         UicomponentAttributeType<UicomponentAttributeType<T>>  type = new UicomponentAttributeTypeImpl<UicomponentAttributeType<T>>(this, \"attribute\", childNode, node);\n         list.add(type);\n      }\n      return list;\n   }","label":0}
{"text":"@SuppressWarnings(\"unchecked\")\n\tpublic <T extends EntitySystem> T getSystem(Class<T> systemType) {\n\t\treturn systemManager.getSystem(systemType);\n\t}","label":0}
{"text":"func (a *Agent) connectedTo(proxy services.Server) bool {\n\tprincipals := a.getPrincipals()\n\tproxyID := fmt.Sprintf(\"%v.%v\", proxy.GetName(), a.ClusterName)\n\tif _, ok := principals[proxyID]; ok {\n\t\treturn true\n\t}\n\treturn false\n}","label":0}
{"text":"def draw_feature_layer(self, surf, feature):\n    \"\"\"\"\"\"\n    layer = feature.unpack(self._obs.observation)\n    if layer is not None:\n      surf.blit_np_array(feature.color(layer))\n    else:  # Ignore layers that aren't in this version of SC2.\n      surf.surf.fill(colors.black)","label":0}
{"text":"public static function copyImg($oldImg, $newImg = '', $subFolder = '', $returnStatic = false)\n    {\n        if(substr($oldImg, 0, 4) != 'http'){\n            $oldImgStatic = Folder::getStatic($oldImg);\n\n            if(!$oldImg || !file_exists($oldImgStatic)){\n                return $oldImg;\n            }\n        }else{\n            $oldImgStatic = $oldImg;\n        }\n\n        if(!$newImg){\n            $newImg = File::newFile(pathinfo($oldImgStatic, PATHINFO_EXTENSION), $subFolder);\n        }\n\n        $newImgStatic = Folder::getStatic($newImg);\n\n        Folder::mkdir(pathinfo($newImgStatic, PATHINFO_DIRNAME));\n\n        if(file_exists($newImgStatic)){\n            File::delFile($newImg);\n        }\n\n        if(File::saveFile($newImgStatic, $oldImgStatic)){\n            return $returnStatic ? $newImgStatic : $newImg;\n        }\n\n        return false;\n    }","label":0}
{"text":"def init_stats_history(self):\n        \"\"\"\"\"\"\n        if self.history_enable():\n            init_list = [a['name'] for a in self.get_items_history_list()]\n            logger.debug(\"Stats history activated for plugin {} (items: {})\".format(self.plugin_name, init_list))\n        return GlancesHistory()","label":0}
{"text":"static function givePluginManager(PluginsHttpHeader $pluginsManager)\n    {\n        if ( self::$pluginManager !== null )\n            throw new exImmutable('Header Factory Has Plugin Manager, and can`t be changed.');\n\n        self::$pluginManager = $pluginsManager;\n    }","label":0}
{"text":"func (s *Server) authenticate() router.Middleware {\n\ta := s.Authenticator\n\tif a == nil {\n\t\ta = GetDefaultAuth()\n\t\tif a == nil {\n\t\t\tpanic(\"prpc: no custom Authenticator was provided and default authenticator was not registered.\\n\" +\n\t\t\t\t\"Either explicitly set `Server.Authenticator = NoAuthentication`, or use RegisterDefaultAuth()\")\n\t\t}\n\t}\n\n\treturn func(c *router.Context, next router.Handler) {\n\t\tswitch ctx, err := a.Authenticate(c.Context, c.Request); {\n\t\tcase transient.Tag.In(err):\n\t\t\twriteError(c.Context, c.Writer, withCode(err, codes.Internal))\n\t\tcase err != nil:\n\t\t\twriteError(c.Context, c.Writer, withCode(err, codes.Unauthenticated))\n\t\tdefault:\n\t\t\tc.Context = ctx\n\t\t\tnext(c)\n\t\t}\n\t}\n}","label":0}
{"text":"public MidiEvent[] getMidiEventsFor(MultiNote notes, KeySignature key, long elapsedTime) throws InvalidMidiDataException\r\n  {\r\n    Vector notesVector = notes.getNotesAsVector();\r\n    MidiEvent[] events = new MidiEvent[2*notesVector.size()+1];\r\n    for (int j=0; j<notesVector.size(); j++)\r\n    {\r\n      Note note = (Note)(notesVector.elementAt(j));\r\n      float noteLength = getNoteLengthInTicks(note);\/\/, defaultLength);\r\n      if (!note.isRest())\r\n      {\r\n        ShortMessage myNoteOn = new ShortMessage();\r\n        myNoteOn.setMessage(ShortMessage.NOTE_ON, getMidiNoteNumber(note, key), 50);\r\n        events[j] = new MidiEvent(myNoteOn,elapsedTime);\r\n      }\r\n    }\r\n\r\n    events[notesVector.size()] = new MidiEvent(new NotationMarkerMessage((MultiNote)notes), elapsedTime);\r\n\r\n    for (int j=0; j<notesVector.size(); j++)\r\n    {\r\n      Note note = (Note)(notesVector.elementAt(j));\r\n      long noteLength = getNoteLengthInTicks(note);\/\/, defaultLength);\r\n      if (!note.isRest())\r\n      {\r\n        ShortMessage myNoteOff = new ShortMessage();\r\n        myNoteOff.setMessage(ShortMessage.NOTE_OFF , getMidiNoteNumber(note, key), 50);\r\n        events[notesVector.size()+j+1] = new MidiEvent(myNoteOff,elapsedTime+noteLength);\r\n      }\r\n    }\r\n    return events;\r\n  }","label":0}
{"text":"async def pop_log(self):\n        \"\"\"\"\"\"\n        self._check_receive_loop()\n        res = self.log_queue.get()\n        self._check_error(res)\n        return res","label":0}
{"text":"private static String camelFormat(String str, boolean isFirstCapitalized) {\n\t\tStringBuilder builder = new StringBuilder(str.length());\n\t\tString[] tokens = NOT_ALPHANUMERIC_REGEX.split(str);\n\t\tfor (int i = 0; i < tokens.length; i++) {\n\t\t\tString lowerCased = StringUtils.lowerCase(tokens[i]);\n\t\t\tif (i == 0) {\n\t\t\t\tbuilder.append(isFirstCapitalized ? StringUtils.capitalize(lowerCased) : lowerCased);\n\t\t\t} else {\n\t\t\t\tbuilder.append(StringUtils.capitalize(lowerCased));\n\t\t\t}\n\t\t}\n\t\treturn builder.toString();\n\t}","label":0}
{"text":"func hasBearerChallenge(resp *http.Response) bool {\n\tauthHeader := resp.Header.Get(bearerChallengeHeader)\n\tif len(authHeader) == 0 || strings.Index(authHeader, bearer) < 0 {\n\t\treturn false\n\t}\n\treturn true\n}","label":0}
{"text":"def runfile(self, filename, args=None):\r\n        \r\n        if args is not None and not is_text_string(args):\r\n            raise TypeError(\"expected a character buffer object\")\r\n        self.namespace['__file__'] = filename\r\n        sys.argv = [filename]\r\n        if args is not None:\r\n            for arg in args.split():\r\n                sys.argv.append(arg)\r\n        self.execfile(filename)\r\n        sys.argv = ['']\r\n        self.namespace.pop('__file__')","label":0}
{"text":"func (c *Emulation) SetDocumentCookieDisabledWithParams(v *EmulationSetDocumentCookieDisabledParams) (*gcdmessage.ChromeResponse, error) {\n\treturn gcdmessage.SendDefaultRequest(c.target, c.target.GetSendCh(), &gcdmessage.ParamRequest{Id: c.target.GetId(), Method: \"Emulation.setDocumentCookieDisabled\", Params: v})\n}","label":0}
{"text":"func (p *IntParam) Set(s string) error {\n\tv, err := strconv.ParseInt(s, 0, 64)\n\tif err != nil {\n\t\treturn err\n\t}\n\tp.val = &v\n\treturn nil\n}","label":0}
{"text":"public GenericDraweeHierarchyBuilder setProgressBarImage(\n      Drawable progressBarDrawable, @Nullable ScalingUtils.ScaleType progressBarImageScaleType) {\n    mProgressBarImage = progressBarDrawable;\n    mProgressBarImageScaleType = progressBarImageScaleType;\n    return this;\n  }","label":0}
{"text":"public function instanceAllApps(): array\n    {\n        $allAppIds = $this->applicationConfig->getAllApplicationIds();\n\n        return array_map(function (string $id) {\n            return $this->instanceAppById($id);\n        }, $allAppIds);\n    }","label":0}
{"text":"function importTheme(req, res, next) {\n  req.appformsResultPayload = req.appformsResultPayload || {};\n  var themeData = (req.appformsResultPayload.data && req.appformsResultPayload.type === constants.resultTypes.themeTemplate) ? req.appformsResultPayload.data : undefined ;\n\n  var importThemeParams = {\n    theme: themeData,\n    name: req.body.name,\n    description: req.body.description,\n    userEmail: req.user.email\n  };\n\n  forms.cloneTheme(_.extend(req.connectionOptions, importThemeParams), resultHandler(constants.resultTypes.themes, req, next));\n}","label":0}
{"text":"def html(self) -> str:\n        \"\"\"\"\"\"\n        if isinstance(self.value, bool):\n            val = 'true' if self.value else 'false'\n        else:\n            val = str(self.value)\n        return 'draggable=\"{}\"'.format(val)","label":0}
{"text":"public Long getParameterLong(String name) throws RepositoryConfigurationException\n   {\n      try\n      {\n         return StringNumberParser.parseLong(getParameterValue(name));\n      }\n      catch (NumberFormatException e)\n      {\n         throw new RepositoryConfigurationException(name + \": unparseable Long. \" + e, e);\n      }\n   }","label":0}
{"text":"function () {                                                                           \/\/ 274\n    var self = this;                                                                                          \/\/ 275\n                                                                                                              \/\/ 276\n    if (self._sortFunction)                                                                                   \/\/ 277\n      return self._sortFunction;                                                                              \/\/ 278\n                                                                                                              \/\/ 279\n    \/\/ If we're only sorting on geoquery distance and no specs, just say                                      \/\/ 280\n    \/\/ everything is equal.                                                                                   \/\/ 281\n    if (!self._sortSpecParts.length) {                                                                        \/\/ 282\n      return function (doc1, doc2) {                                                                          \/\/ 283\n        return 0;                                                                                             \/\/ 284\n      };                                                                                                      \/\/ 285\n    }                                                                                                         \/\/ 286\n                                                                                                              \/\/ 287\n    return function (doc1, doc2) {                                                                            \/\/ 288\n      var key1 = self._getMinKeyFromDoc(doc1);                                                                \/\/ 289\n      var key2 = self._getMinKeyFromDoc(doc2);                                                                \/\/ 290\n      return self._compareKeys(key1, key2);                                                                   \/\/ 291\n    };                                                                                                        \/\/ 292\n  }","label":0}
{"text":"func expandPath(base, dir string) string {\n\tif filepath.IsAbs(dir) {\n\t\treturn filepath.Clean(dir)\n\t}\n\n\treturn filepath.Clean(filepath.Join(base, dir))\n}","label":0}
{"text":"public function submitHam()\n    {\n        $this->sendRequest($this->getQueryString(), $this->wordPressAPIKey . '.' . $this->akismetServer, '\/' . $this->akismetVersion . '\/submit-ham');\n    }","label":0}
{"text":"func (node *Element) namespacePrefix(uri string) string {\n\tfor _, ns := range node.namespaces {\n\t\tif ns.Uri == uri {\n\t\t\treturn ns.Prefix\n\t\t}\n\t}\n\tif node.parent == nil {\n\t\treturn \"\"\n\t}\n\treturn node.parent.namespacePrefix(uri)\n}","label":0}
{"text":"func (s *RestoreDBClusterToPointInTimeInput) SetEnableCloudwatchLogsExports(v []*string) *RestoreDBClusterToPointInTimeInput {\n\ts.EnableCloudwatchLogsExports = v\n\treturn s\n}","label":0}
{"text":"public function buildExportFields()\n    {\n        $this->addExportField('id', $this->translator->trans('Id'))\n            ->addExportField('date', $this->translator->trans('Date'))\n            ->addExportField('language', $this->translator->trans('Language'));\n    }","label":0}
{"text":"public function getUserAgent(): string\n    {\n        $userAgent = 'Swoft\/' . App::version();\n        $userAgent .= ' Swoft\/' . SWOOLE_VERSION;\n        $userAgent .= ' PHP\/' . PHP_VERSION;\n        if (\\extension_loaded('curl') && \\function_exists('curl_version')) {\n            $userAgent .= ' curl\/' . \\curl_version()['version'];\n        }\n        return $userAgent;\n    }","label":0}
{"text":"function (containerSize) {\n            var cfg = this._cfg;\n            var math = ariaUtilsMath;\n\n            var maxHeight, maxWidth;\n            if (this._cfg.maximized) {\n                maxHeight = containerSize.height + this._shadows.top + this._shadows.bottom;\n                maxWidth = containerSize.width + this._shadows.left + this._shadows.right;\n            } else {\n                maxHeight = math.min(this._cfg.maxHeight, containerSize.height);\n                maxWidth = math.min(this._cfg.maxWidth, containerSize.width);\n            }\n\n            var titleBarDomElt = this._titleBarDomElt;\n            var titleDomElt = this._titleDomElt;\n\n            var isIE7 = ariaCoreBrowser.isIE7;\n            if (isIE7) {\n                \/\/ without this, IE 7 gives wrong inner sizes\n                titleDomElt.style.overflow = \"visible\";\n            }\n\n            titleDomElt.style.width = \"\";\n            var titleWidth = titleDomElt.offsetWidth;\n            var titleBarPaddings = ariaUtilsDom.getStylePx(titleBarDomElt, \"paddingLeft\", 0) + ariaUtilsDom.getStylePx(titleBarDomElt, \"paddingRight\",0);\n            var childNodes = titleBarDomElt.childNodes;\n            var iconsWidth = 0;\n            for (var i = 0, ii = childNodes.length; i < ii; i++) {\n                var node = childNodes[i];\n                iconsWidth += node !== titleDomElt ? node.offsetWidth : 0;\n            }\n\n            \/\/ First manage the width of the modal depending on the title bar and the max width\n            var shadows = this._shadows;\n            var minWidth = ariaUtilsMath.max(cfg.width, cfg.minWidth);\n            if (cfg.width == -1) {\n                minWidth = ariaUtilsMath.max(titleBarPaddings + titleWidth + iconsWidth + shadows.left + shadows.right, minWidth);\n            }\n\n            \/\/ if maximized == true, then height|widthMaximized will be used; otherwise normal width and height\n            this._div.updateSize({\n                maxHeight : maxHeight,\n                maxWidth : maxWidth,\n                minWidth : minWidth,\n                height : cfg.height,\n                width : cfg.width,\n                heightMaximized : cfg.heightMaximized,\n                widthMaximized : cfg.widthMaximized,\n                maximized : cfg.maximized\n            });\n\n            \/\/ The manage the title length to manage the text-overflow\n            var titleBarInnerWidth = titleBarDomElt.clientWidth - titleBarPaddings;\n            var titlePaddings = ariaUtilsDom.getStylePx(titleDomElt, \"paddingLeft\", 0) + ariaUtilsDom.getStylePx(titleDomElt, \"paddingRight\", 0);\n            titleDomElt.style.width = ariaUtilsMath.max(titleBarInnerWidth - titlePaddings - iconsWidth - shadows.left - shadows.right - 1, 0) + \"px\";\n\n            if (isIE7) {\n                \/\/ Back to overflow hidden mode\n                titleDomElt.style.overflow = \"hidden\";\n            }\n\n        }","label":0}
{"text":"func MessageType(name string) reflect.Type {\n\tif t, ok := protoTypedNils[name]; ok {\n\t\treturn reflect.TypeOf(t)\n\t}\n\treturn protoMapTypes[name]\n}","label":0}
{"text":"public function getCacheFileName()\n    {\n        $aAssets = $this->getAssets();\n\n        $sCacheFileName = isset($aAssets[$sModuleName = $this->getModuleName()]) ? $sModuleName : \\AssetsBundle\\Service\\ServiceOptions::NO_MODULE;\n\n        $aUnwantedKeys = array(\n            \\AssetsBundle\\AssetFile\\AssetFile::ASSET_CSS => true,\n            \\AssetsBundle\\AssetFile\\AssetFile::ASSET_LESS => true,\n            \\AssetsBundle\\AssetFile\\AssetFile::ASSET_JS => true,\n            \\AssetsBundle\\AssetFile\\AssetFile::ASSET_MEDIA => true\n        );\n        $aAvailableModuleAssets = array_diff_key($aAssets, $aUnwantedKeys);\n        $bControllerNameFound = false;\n        $sControllerName = $this->getControllerName();\n        foreach ($aAvailableModuleAssets as $aModuleConfig) {\n            if (isset($aModuleConfig[$sControllerName])) {\n                $bControllerNameFound = true;\n                break;\n            }\n        }\n        $sCacheFileName .= '_' . ($bControllerNameFound ? $sControllerName : \\AssetsBundle\\Service\\ServiceOptions::NO_CONTROLLER);\n\n        $bActionNameFound = false;\n        $sActionName = $this->getActionName();\n        reset($aAvailableModuleAssets);\n        foreach ($aAvailableModuleAssets as $aModuleConfig) {\n            foreach (array_diff_key($aModuleConfig, $aUnwantedKeys) as $aControllerConfig) {\n                if (isset($aControllerConfig[$sActionName])) {\n                    $bActionNameFound = true;\n                }\n            }\n        }\n        $sCacheFileName .= '_' . ($bActionNameFound ? $sActionName : \\AssetsBundle\\Service\\ServiceOptions::NO_ACTION);\n        return md5($sCacheFileName);\n    }","label":0}
{"text":"def normalize(df):\n    \"\"\"\"\"\"\n    # in ipython notebook, explore and describe the DataFrame columns\n    print('Of the {} columns, {} are actually DataFrames'.format(len(df.columns), sum([not isinstance(df[col], pd.Series) for col in df.columns])))\n    # remove dataframes with only 2 columns and one is the _str of the other:\n    for col in df.columns:\n        if isinstance(df[col], pd.DataFrame):\n            print('Column {} is a {}-wide DataFrame'.format(col, len(df[col].columns)))\n            if df[col].columns[1] == df[col].columns[0] + '_str':\n                print('Column {} looks easy because it has sub-columns {}'.format(col, df[col].columns))\n                df[col] = df[col][df[col].columns[1]]\n            else:\n                try:\n                    assert(float(df[col].iloc[:, 0].max()) == float(df[col].iloc[:, 1].max()))\n                    df[col] = df[col].fillna(-1, inplace=False)\n                    series = pd.Series([int(Decimal(x)) for x in df[col].iloc[:, 1].values]).astype('int64').copy()\n                    del df[col]\n                    df[col] = series\n                    print('Finished converting column {} to type {}({})'.format(col, type(df[col]), df[col].dtype))\n                except:\n                    print_exc()\n\n    print('Of the {} columns, {} are still DataFrames after trying to convert both columns to long integers'.format(\n        len(df.columns), sum([not isinstance(df[col], pd.Series) for col in df.columns])))\n    return df","label":0}
{"text":"public function upload($request, $belongsToApp = '')\n    {\n        $results = array();\n        $carbon = new Carbon();\n\n        $destinationBasePath = uploadsPath(); \/\/ upload basic path\n        $year = $carbon->year;\n        $month = str_pad($carbon->month, 2, '0', STR_PAD_LEFT);\n        $day = str_pad($carbon->day, 2, '0', STR_PAD_LEFT);\n\n        $datePath = $year.\"\/\".$month.'\/'.$day;\n        $destinationPath = uploadsPath($datePath);\n        $fileDirectory = 'public'.explode('public', $destinationPath)[1];\n        $fileDirectory = str_replace('\\\\', '\/', $fileDirectory);\n\n        $destinationOriginalDirectory = $destinationPath.\"\/original\";\n\n        foreach ($request->all() as $key => $value){\n            \/\/ continue when we are looping throw post type\n            if ($key == \"postTypes\" || $key == \"albumID\" || $key == \"fromAlbum\") {\n                continue;\n            }\n\n            \/\/ uploaded file\n            $file = $request->file($key);\n            $extension = strtolower($file->getClientOriginalExtension()); \/\/ getting image extension\n            $fileNameWithoutExtension = str_slug(basename($file->getClientOriginalName(), '.'.$file->getClientOriginalExtension()), '-');\n            $fileName = $fileNameWithoutExtension.'.'.$extension;\n            $fileSizeOriginal = $file->getClientSize();\n            $fileSize = round($fileSizeOriginal\/1048576*1024);\n\n            \/\/ change filename if filename already exists\n            if(file_exists($destinationOriginalDirectory.'\/'.$fileName)) {\n                $exists = true;\n                while($exists === true){\n                    $random = str_random(5);\n                    $fileName = $fileNameWithoutExtension.'-'.$random.'.'.$extension;\n                    if(!file_exists($destinationOriginalDirectory.'\/'.$fileName)) {\n                        $exists = false;\n                        break;\n                    }\n                }\n            }\n\n            $destinationOriginalPath = $destinationOriginalDirectory.'\/'.$fileName;\n\n            \/\/ validate file type\n            if(!$this->isAllowedExtension($extension)) {\n                throw new FileException(\"File type not allowed\");\n            }\n\n            \/\/validate size\n            if($fileSize > config('filesystems.upload_max_filesize')) {\n                throw new FileException('File is to large. Max filesize is '. config('filesystems.upload_max_filesize') .'kb');\n            }\n\n            \/\/check if $destinationBasePath is writable\n            if(!File::isWritable($destinationBasePath)) {\n                throw new FileException('The directory  \"'.$destinationBasePath.'\" is not writable. Please contact your administrator');\n            }\n\n            \/\/crate original original size path if it doesn't excist\n            if (!File::exists($destinationOriginalDirectory)) {\n                if(!File::makeDirectory($destinationOriginalDirectory, 0755, true)) {\n                    throw new FileException('The directory  \"'.$destinationOriginalDirectory.'\" could not be created. Please contact your administrator');\n                }\n            }\n\n            \/\/check if $destinationPath is writable\n            if(!File::isWritable($destinationPath)) {\n                throw new FileException('The directory  \"'.$destinationPath.'\" is not writable. Please contact your administrator');\n            }\n\n            \/\/check if $destinationOriginalDirectory is writable\n            if(!File::isWritable($destinationOriginalDirectory)) {\n                throw new FileException('The directory  \"'.$destinationOriginalDirectory.'\" is not writable. Please contact your administrator');\n            }\n\n            \/\/ if file is successfully uploaded\n            if($file->move($destinationOriginalDirectory, $fileName)) {\n                \/\/ set params to the media object\n                $media = new Media();\n                $media->title = $fileNameWithoutExtension;\n                $media->description = '';\n                $media->extension = $extension;\n                $media->url = $fileDirectory.'\/original\/'.$fileName;\n                $media->filename = $fileName;\n                $media->fileDirectory = $fileDirectory;\n                $media->filesize = round(($fileSize\/1000), 2);\n                $media->createdByUserID = Auth::user()->userID;\n\n                if($this->hasImageExtension($extension)) {\n                    $media->type = \"image\";\n                    \/\/ if the uploaded file is a image set his dimensions in the database\n                    $img = Image::make($destinationOriginalPath);\n                    $width = $img->width();\n                    $height = $img->height();\n                    $media->dimensions = $width.\"x\".$height;\n\n                }else if($this->hasDocumentExtension($extension)) {\n                    $media->type = \"document\";\n                }elseif($this->hasAudioExtension($extension)) {\n                    $media->type = \"audio\";\n                }elseif($this->hasVideoExtension($extension)) {\n                    $media->type = \"video\";\n                }else{\n                    throw new FileException(\"Extension type not allowed\");\n                }\n\n                \/\/ Fire event\n                Event::fire('media:creating', [$media, $request]);\n\n                if($media->save()) {\n                    \/\/ optimize original image\n                    if(config('media.optimize_original_image')) {\n                        $this->optimize($destinationOriginalDirectory . '\/' . $fileName);\n                    }\n\n                    \/\/ Create thumbs\n                    $this->createDefaultThumbs($media, $belongsToApp);\n\n                    \/\/ Fire event\n                    Event::fire('media:created', [$media, $request]);\n\n                    $msg = 'File is successfully uploaded';\n                    array_push($results, ['result_code' => 'ok','filename'=> $fileName, 'extension' => $extension, 'msg' => $msg, 'url' => $destinationOriginalPath]);\n                }else{\n                    unlink($destinationOriginalDirectory, $fileName);\n                    $err = 'File could not be saved. Please try again later or contact your administrator';\n                    array_push($results, ['result_code' => 'failed','filename'=> $fileName, 'extension' => $extension, 'msg' => $err, 'url' => '']);\n                }\n            }else{\n                $err = 'File could not be uploaded. Please try again later or contact your administrator';\n                array_push($results, ['result_code' => 'failed','filename'=> $fileName, 'extension' => $extension, 'msg' => $err, 'url' => '']);\n            }\n\n        }\n        return $results;\n    }","label":0}
{"text":"func (fs *FileSorter) externalSort() (*comparableRow, error) {\n\tif !fs.fetched {\n\t\tif len(fs.buf) > 0 {\n\t\t\terr := fs.flushToFile()\n\t\t\tif err != nil {\n\t\t\t\treturn nil, errors.Trace(err)\n\t\t\t}\n\t\t}\n\n\t\theap.Init(fs.rowHeap)\n\t\tif fs.rowHeap.err != nil {\n\t\t\treturn nil, errors.Trace(fs.rowHeap.err)\n\t\t}\n\n\t\terr := fs.openAllFiles()\n\t\tif err != nil {\n\t\t\treturn nil, errors.Trace(err)\n\t\t}\n\n\t\tfor id := range fs.fds {\n\t\t\trow, err := fs.fetchNextRow(id)\n\t\t\tif err != nil {\n\t\t\t\treturn nil, errors.Trace(err)\n\t\t\t}\n\t\t\tif row == nil {\n\t\t\t\treturn nil, errors.New(\"file is empty\")\n\t\t\t}\n\n\t\t\tim := &item{\n\t\t\t\tindex: id,\n\t\t\t\tvalue: row,\n\t\t\t}\n\n\t\t\theap.Push(fs.rowHeap, im)\n\t\t\tif fs.rowHeap.err != nil {\n\t\t\t\treturn nil, errors.Trace(fs.rowHeap.err)\n\t\t\t}\n\t\t}\n\n\t\tfs.fetched = true\n\t}\n\n\tif fs.rowHeap.Len() > 0 {\n\t\tim := heap.Pop(fs.rowHeap).(*item)\n\t\tif fs.rowHeap.err != nil {\n\t\t\treturn nil, errors.Trace(fs.rowHeap.err)\n\t\t}\n\n\t\trow, err := fs.fetchNextRow(im.index)\n\t\tif err != nil {\n\t\t\treturn nil, errors.Trace(err)\n\t\t}\n\t\tif row != nil {\n\t\t\tim := &item{\n\t\t\t\tindex: im.index,\n\t\t\t\tvalue: row,\n\t\t\t}\n\n\t\t\theap.Push(fs.rowHeap, im)\n\t\t\tif fs.rowHeap.err != nil {\n\t\t\t\treturn nil, errors.Trace(fs.rowHeap.err)\n\t\t\t}\n\t\t}\n\n\t\treturn im.value, nil\n\t}\n\n\treturn nil, nil\n}","label":0}
{"text":"public function deleteNodeAssignment($contentId, $versionNo = null)\n    {\n        try {\n            return $this->innerGateway->deleteNodeAssignment($contentId, $versionNo);\n        } catch (DBALException $e) {\n            throw new RuntimeException('Database error', 0, $e);\n        } catch (PDOException $e) {\n            throw new RuntimeException('Database error', 0, $e);\n        }\n    }","label":0}
{"text":"def paragraph(self, content):\n        \n        if not self._out.description:\n            self._out.description = content\n        return ' '","label":0}
{"text":"func (s *UpdateNotebookInstanceLifecycleConfigInput) SetNotebookInstanceLifecycleConfigName(v string) *UpdateNotebookInstanceLifecycleConfigInput {\n\ts.NotebookInstanceLifecycleConfigName = &v\n\treturn s\n}","label":0}
{"text":"public void storeResults() {\n\t\tSystem.out.println(\"Processed \" + countItems + \" items and \"\n\t\t\t\t+ countProperties + \" properties in total.\");\n\t\tSystem.out.println(\"Storing data ...\");\n\n\t\ttry (PrintStream out = new PrintStream(new FileOutputStream(\n\t\t\t\t\"tutorial-results.csv\"))) {\n\t\t\t\/\/ Two simple entries for demonstration purposes.\n\t\t\t\/\/ Use your own code when you have more interesting data.\n\t\t\tout.println(\"count of items,\" + countItems);\n\t\t\tout.println(\"count of properties,\" + countProperties);\n\t\t} catch (IOException e) {\n\t\t\tSystem.out.println(\"Oops, I could not write the file: \"\n\t\t\t\t\t+ e.toString());\n\t\t}\n\n\t\tSystem.out.println(\"... data stored.\");\n\n\t}","label":0}
{"text":"func convert(a *AutomatonBuilder, s *dfsaState, visited map[*dfsaState]int) int {\n\tpanic(\"not implemented yet\")\n}","label":0}
{"text":"public function transform($collection)\n    {\n        if (null === $collection) {\n            return null;\n        }\n\n        if (!($collection instanceof Collection)) {\n            throw new UnexpectedTypeException($collection, 'Doctrine\\Common\\Collection\\Collection');\n        }\n\n        $results = array();\n        foreach ($collection as $entity) {\n            $results[] = array(\n                $this->arrayIdentifierName => $this->displayValue(\n                    $this->accessor->getValue($entity, $this->identifier)\n                ),\n                $this->arrayLabelName => $this->displayValue($this->extractLabel($entity)),\n            );\n        }\n\n        \/\/Here, do not put the result in the cache because we must check the value in\n        \/\/reverseTransform (by QueryBuilder)\n        return json_encode($results);\n    }","label":0}
{"text":"public static function roleId(RuleInterface $next = null): RuleInterface\n    {\n        return self::asSanitizedString(self::readable(RolesApi::class, $next));\n    }","label":0}
{"text":"function good(args, err, cb) {\n    if (err) {\n      cb(error('entity_error', { store: name, error: err, args: args }))\n      return false\n    } else return true\n  }","label":0}
{"text":"final void _deleteWALFileAfterProcessing (@Nonnull @Nonempty final String sWALFilename)\n  {\n    ValueEnforcer.notEmpty (sWALFilename, \"WALFilename\");\n    final File aWALFile = m_aIO.getFile (sWALFilename);\n    if (FileOperationManager.INSTANCE.deleteFile (aWALFile).isFailure ())\n    {\n      if (LOGGER.isErrorEnabled ())\n        LOGGER.error (\"Failed to delete WAL file '\" + aWALFile.getAbsolutePath () + \"'\");\n    }\n    else\n    {\n      if (!isSilentMode ())\n        if (LOGGER.isInfoEnabled ())\n          LOGGER.info (\"Deleted successfully imported WAL file '\" + aWALFile.getAbsolutePath () + \"'\");\n    }\n  }","label":0}
{"text":"def get_name(self, key):\n        '''\n        '''\n        try:\n            return self.nameDict[key]\n        except IndexError as e:\n            print 'IndexError {0}: {1}'.format(e.errno, e.strerror)","label":0}
{"text":"function (o,evt,fn) {\n        var sub = function () {\n            \/\/ Unsubscribe myself\n            o.unsubscribe(evt, sub);\n            \/\/ Pass the event handler arguments to the one time callback\n            fn.apply({},arguments);\n        };\n        o.subscribe(evt,sub);\n    }","label":0}
{"text":"def wait_until_clickable(self, timeout=None):\n        \n        try:\n            self.utils.wait_until_element_clickable(self, timeout)\n        except TimeoutException as exception:\n            parent_msg = \" and parent locator '{}'\".format(self.parent) if self.parent else ''\n            msg = \"Page element of type '%s' with locator %s%s not found or is not clickable after %s seconds\"\n            timeout = timeout if timeout else self.utils.get_explicitly_wait()\n            self.logger.error(msg, type(self).__name__, self.locator, parent_msg, timeout)\n            exception.msg += \"\\n  {}\".format(msg % (type(self).__name__, self.locator, parent_msg, timeout))\n            raise exception\n        return self","label":0}
{"text":"func (c *CacheTTL) GetGobBytes(key string) ([]byte, bool) {\n\tc.itemsMu.RLock()\n\tdefer c.itemsMu.RUnlock()\n\n\tif item, ok := c.items[key]; ok {\n\t\tif c.isValidItem(item) {\n\t\t\tvar buf bytes.Buffer\n\t\t\tenc := gob.NewEncoder(&buf)\n\t\t\terr := enc.Encode(item.Value)\n\t\t\tif err == nil {\n\t\t\t\treturn buf.Bytes(), true\n\t\t\t}\n\t\t}\n\t}\n\n\treturn []byte{}, false\n}","label":0}
{"text":"public void serialize(Map<String, T> map, JsonGenerator jsonGenerator) throws IOException {\n        jsonGenerator.writeStartObject();\n        for (Map.Entry<String, T> entry : map.entrySet()) {\n            jsonGenerator.writeFieldName(entry.getKey());\n            if (entry.getValue() == null) {\n                jsonGenerator.writeNull();\n            } else {\n                serialize(entry.getValue(), jsonGenerator, true);\n            }\n        }\n        jsonGenerator.writeEndObject();\n    }","label":0}
{"text":"def maintain_name\n        postfix = nil\n        total_count = 0\n\n        while self.class.where(parent_id: parent_id, name: \"#{name}#{postfix}\").where(\"id != ?\", id.to_i).exists? do\n          total_count += 1\n          postfix = \"(#{total_count})\"\n        end\n\n        if postfix\n          self.name = \"#{name}#{postfix}\"\n        end\n      end","label":0}
{"text":"function splitAuthor(author) {\n\treturn author\n\t\t.split(\/\\s*[,\\.\\s]\\s*\/)\n\t\t.filter(function(i) { return !!i }) \/\/ Strip out blanks\n\t\t.filter(function(i) { return !\/^[0-9]+(st|nd|rd|th)$\/.test(i) }); \/\/ Strip out decendent numerics (e.g. '1st', '23rd')\n}","label":0}
{"text":"def simplified_round_mode(round_mode, negative)\n      if negative\n        if round_mode == :ceiling\n          round_mode = :floor\n        elsif round_mode == :floor\n          round_mode = :ceiling\n        end\n      end\n      if round_mode == :ceiling\n        round_mode = :up\n      elsif round_mode == :floor\n        round_mode = :down\n      end\n      round_mode\n    end","label":0}
{"text":"func AddEntry(txs Bundle, bndlEntry BundleEntry) Bundle {\n\tbndlEntry = getBundleEntryWithDefaults(bndlEntry)\n\tprevLastIndex := uint64(len(txs))\n\tlastIndex := uint64(len(txs)-1) + bndlEntry.Length\n\ttag := PadTag(bndlEntry.Tag)\n\n\t\/\/ set new last index on existing txs\n\tfor i := range txs {\n\t\ttxs[i].LastIndex = lastIndex\n\t}\n\n\tvar i uint64\n\tfor ; i < bndlEntry.Length; i++ {\n\t\tvar v int64\n\t\tif i == 0 {\n\t\t\tv = bndlEntry.Value\n\t\t}\n\t\ttxs = append(txs, transaction.Transaction{\n\t\t\tAddress: bndlEntry.Address,\n\t\t\tValue:   v, Tag: tag, ObsoleteTag: tag,\n\t\t\tCurrentIndex: prevLastIndex + i,\n\t\t\tLastIndex:    lastIndex, Timestamp: bndlEntry.Timestamp,\n\t\t\tSignatureMessageFragment: bndlEntry.SignatureMessageFragments[i],\n\t\t\tTrunkTransaction:         NullHashTrytes, BranchTransaction: NullHashTrytes,\n\t\t\tBundle: NullHashTrytes, Nonce: NullNonceTrytes, Hash: NullHashTrytes,\n\t\t})\n\t}\n\n\treturn txs\n}","label":0}
{"text":"private void streamContent(HttpServletResponse response, InputStream is) throws IOException {\n\n        OutputStream os = response.getOutputStream();\n        try {\n            byte buffer[] = new byte[DEFAULT_BUFFER_SIZE];\n            int bytes;\n            while ((bytes = is.read(buffer)) >= 0) {\n                os.write(buffer, 0, bytes);\n            }\n        } finally {\n            os.close();\n        }\n    }","label":0}
{"text":"public static function add_competency_to_course($courseid, $competencyid) {\n        static::require_enabled();\n        \/\/ Check the user have access to the course.\n        self::validate_course($courseid);\n\n        \/\/ First we do a permissions check.\n        $context = context_course::instance($courseid);\n\n        require_capability('moodle\/competency:coursecompetencymanage', $context);\n\n        $record = new stdClass();\n        $record->courseid = $courseid;\n        $record->competencyid = $competencyid;\n\n        $competency = new competency($competencyid);\n\n        \/\/ Can not add a competency that belong to a hidden framework.\n        if ($competency->get_framework()->get('visible') == false) {\n            throw new coding_exception('A competency belonging to hidden framework can not be linked to course');\n        }\n\n        $coursecompetency = new course_competency();\n        $exists = $coursecompetency->get_records(array('courseid' => $courseid, 'competencyid' => $competencyid));\n        if (!$exists) {\n            $coursecompetency->from_record($record);\n            if ($coursecompetency->create()) {\n                return true;\n            }\n        }\n        return false;\n    }","label":0}
{"text":"protected static void binarySearch(ModifiableDoubleDBIDList index, DoubleDBIDListIter iter, double val) {\n    \/\/ Binary search. TODO: move this into the DoubleDBIDList class.\n    int left = 0, right = index.size();\n    while(left < right) {\n      final int mid = (left + right) >>> 1;\n      final double curd = iter.seek(mid).doubleValue();\n      if(val < curd) {\n        right = mid;\n      }\n      else if(val > curd) {\n        left = mid + 1;\n      }\n      else {\n        left = mid;\n        break;\n      }\n    }\n    if(left >= index.size()) {\n      --left;\n    }\n    iter.seek(left);\n  }","label":0}
{"text":"@SuppressWarnings(\"unchecked\")\n\t@Override\n\tpublic void eSet(int featureID, Object newValue) {\n\t\tswitch (featureID) {\n\t\t\tcase AfplibPackage.BBC__BCDO_NAME:\n\t\t\t\tsetBCdoName((String)newValue);\n\t\t\t\treturn;\n\t\t\tcase AfplibPackage.BBC__TRIPLETS:\n\t\t\t\tgetTriplets().clear();\n\t\t\t\tgetTriplets().addAll((Collection<? extends Triplet>)newValue);\n\t\t\t\treturn;\n\t\t}\n\t\tsuper.eSet(featureID, newValue);\n\t}","label":0}
{"text":"def overlay_gateway_sflow_sflow_vlan_action(self, **kwargs):\n        \n        config = ET.Element(\"config\")\n        overlay_gateway = ET.SubElement(config, \"overlay-gateway\", xmlns=\"urn:brocade.com:mgmt:brocade-tunnels\")\n        name_key = ET.SubElement(overlay_gateway, \"name\")\n        name_key.text = kwargs.pop('name')\n        sflow = ET.SubElement(overlay_gateway, \"sflow\")\n        sflow_profile_name_key = ET.SubElement(sflow, \"sflow-profile-name\")\n        sflow_profile_name_key.text = kwargs.pop('sflow_profile_name')\n        sflow_vlan_action = ET.SubElement(sflow, \"sflow-vlan-action\")\n        sflow_vlan_action.text = kwargs.pop('sflow_vlan_action')\n\n        callback = kwargs.pop('callback', self._callback)\n        return callback(config)","label":0}
{"text":"func (s *CreateEndpointInput) SetPassword(v string) *CreateEndpointInput {\n\ts.Password = &v\n\treturn s\n}","label":0}
{"text":"public ResultList<Artwork> getMovieImages(int movieId, String language) throws MovieDbException {\n        return tmdbMovies.getMovieImages(movieId, language);\n    }","label":0}
{"text":"def p_throw_statement(self, p):\n        \n        p[0] = self.asttypes.Throw(expr=p[2])\n        p[0].setpos(p)","label":0}
{"text":"public function refreshFor(Model $authority)\n    {\n        $this->cache->forget($this->getCacheKey($authority, 'abilities', true));\n        $this->cache->forget($this->getCacheKey($authority, 'abilities', false));\n        $this->cache->forget($this->getCacheKey($authority, 'roles'));\n\n        return $this;\n    }","label":0}
{"text":"def setProperty(self, prop: str, value: str, priority: str = None\n                    ) -> None:\n        \n        self[prop] = value","label":0}
{"text":"def _get_fit(self, time: int) -> typing.Tuple[np.ndarray, np.ndarray, float, float]:\n        \n        rawdata = self.averagedata[:, time]\n        domain = np.arange(len(rawdata))\n        datalength = len(domain)\n        coefficients = np.zeros((datalength, self.function_number + 2))\n        coefficients[:, 0] = 1\n        coefficients[:, 1] = domain\n        for i in range(self.function_number):\n            coefficients[:, 2 + i] = self._gaussian_function(datalength, domain, 1, i)\n        betas = linalg.inv(coefficients.transpose().dot(coefficients)).dot(coefficients.transpose().dot(rawdata))\n        predicted_values = coefficients.dot(betas)\n        residuals = rawdata - predicted_values\n        error = np.sqrt(residuals.transpose().dot(residuals) \/ (datalength - (self.function_number + 2)))\n        return predicted_values, residuals, residuals.mean(), error","label":0}
{"text":"def transcripts(self):\n        \n        transcript_id_results = self.db.query(\n            select_column_names=['transcript_id'],\n            filter_column='gene_id',\n            filter_value=self.id,\n            feature='transcript',\n            distinct=False,\n            required=False)\n\n        # We're doing a SQL query for each transcript ID to fetch\n        # its particular information, might be more efficient if we\n        # just get all the columns here, but how do we keep that modular?\n        return [\n            self.genome.transcript_by_id(result[0])\n            for result in transcript_id_results\n        ]","label":0}
{"text":"protected static function executeOperation(ExecutionContext $context, $root, OperationDefinition $operation)\n    {\n        $type = self::getOperationRootType($context->schema, $operation);\n        $fields = self::collectFields($context, $type, $operation->get('selectionSet'), new \\ArrayObject(), new \\ArrayObject());\n        if ($operation->get('operation') === 'mutation') {\n            return self::executeFieldsSerially($context, $type, $root, $fields->getArrayCopy());\n        }\n\n        return self::executeFields($context, $type, $root, $fields);\n    }","label":0}
{"text":"def format(self, **kwargs):\n        \"\"\"\"\"\"\n        attrs = self._attrs.copy()\n        attrs.update(kwargs)\n        return Region(self._geojson, **attrs)","label":0}
{"text":"public static FileValue fileValue(File file){\n    String contentType = MimetypesFileTypeMap.getDefaultFileTypeMap().getContentType(file);\n    return new FileValueBuilderImpl(file.getName()).file(file).mimeType(contentType).create();\n  }","label":0}
{"text":"func (s *DescribeDBParametersInput) SetFilters(v []*Filter) *DescribeDBParametersInput {\n\ts.Filters = v\n\treturn s\n}","label":0}
{"text":"public function column(Query $query, $field, $key = '')\n    {\n        $options = $query->getOptions();\n\n        if ($this->cache && empty($options['fetch_sql']) && !empty($options['cache'])) {\n            \/\/ \u5224\u65ad\u67e5\u8be2\u7f13\u5b58\n            $cache = $options['cache'];\n\n            $guid   = is_string($cache['key']) ? $cache['key'] : $this->getCacheKey($query, $field);\n            $result = $this->cache->get($guid);\n\n            if (false !== $result) {\n                return $result;\n            }\n        }\n\n        if (isset($options['field'])) {\n            $query->removeOption('field');\n        }\n\n        if (is_null($field)) {\n            $field = ['*'];\n        } elseif (is_string($field)) {\n            $field = array_map('trim', explode(',', $field));\n        }\n\n        if ($key && ['*'] != $field) {\n            array_unshift($field, $key);\n            $field = array_unique($field);\n        }\n\n        $query->setOption('field', $field);\n\n        \/\/ \u751f\u6210\u67e5\u8be2SQL\n        $sql = $this->builder->select($query);\n\n        \/\/ \u8fd8\u539ffield\u53c2\u6570\n        if (isset($options['field'])) {\n            $query->setOption('field', $options['field']);\n        } else {\n            $query->removeOption('field');\n        }\n\n        $bind = $query->getBind();\n\n        if (!empty($options['fetch_sql'])) {\n            \/\/ \u83b7\u53d6\u5b9e\u9645\u6267\u884c\u7684SQL\u8bed\u53e5\n            return $this->getRealSql($sql, $bind);\n        }\n\n        \/\/ \u6267\u884c\u67e5\u8be2\u64cd\u4f5c\n        $pdo = $this->query($sql, $bind, $options['master'], true);\n\n        if (1 == $pdo->columnCount()) {\n            $result = $pdo->fetchAll(PDO::FETCH_COLUMN);\n        } else {\n            $resultSet = $pdo->fetchAll(PDO::FETCH_ASSOC);\n\n            if (['*'] == $field && $key) {\n                $result = array_column($resultSet, null, $key);\n            } elseif ($resultSet) {\n                $fields = array_keys($resultSet[0]);\n                $count  = count($fields);\n                $key1   = array_shift($fields);\n                $key2   = $fields ? array_shift($fields) : '';\n                $key    = $key ?: $key1;\n\n                if (strpos($key, '.')) {\n                    list($alias, $key) = explode('.', $key);\n                }\n\n                if (2 == $count) {\n                    $column = $key2;\n                } elseif (1 == $count) {\n                    $column = $key1;\n                } else {\n                    $column = null;\n                }\n\n                $result = array_column($resultSet, $column, $key);\n            } else {\n                $result = [];\n            }\n        }\n\n        if (isset($cache) && isset($guid)) {\n            \/\/ \u7f13\u5b58\u6570\u636e\n            $this->cacheData($guid, $result, $cache);\n        }\n\n        return $result;\n    }","label":0}
{"text":"public String getWrappingHint(String fieldName) {\n        if (isEmpty()) {\n            return \"\";\n        }\n\n        return String.format(\" You can use this expression: %s(%s(%s))\",\n                formatMethod(wrappingMethodOwnerName, wrappingMethodName, \"\"),\n                formatMethod(copyMethodOwnerName, copyMethodName, copyTypeParameterName),\n                fieldName);\n    }","label":0}
{"text":"public function registerTable($name, $alias)\n    {\n        if (!empty($alias) && empty($name))\n            return;\n\n        if (!empty($alias) && !empty($this->parent_scope))\n        {\n            $table = $this->parent_scope->resolveAlias($alias); \n            if (!empty($table))\n                throw new QueryException(\"Duplicate alias \\\"$alias\\\" - was already bound to \\\"$table\\\" in parent scope\");\n        }\n\n        if (isset($this->tables[$name]))\n        {\n            if (empty($alias))\n                throw new QueryException(\"Duplicate table without an alias: \\\"$name\\\"\");\n            if (isset($this->tables[$name][$alias]))\n                throw new QueryException(\"Duplicate alias \\\"$alias\\\" for table \\\"$name\\\"\");\n            if (isset($this->tables[$name][$name]))\n                throw new QueryException(\"All instances of a table reference must be aliased if used more than once\");\n\n            $this->tables[$name][$alias] = true;\n            $this->aliases[$alias] = $name;\n        }\n        elseif (!empty($alias) && is_string($alias))\n        {\n            if (isset($this->aliases[$alias]))\n                throw new QueryException(\"Duplicate alias \\\"$alias\\\" for table \\\"$name\\\" - also referring to \\\"{$this->aliases[$alias]}\\\"\");\n            $this->aliases[$alias] = $name;\n            $this->tables[$name][$alias] = true;\n        }\n        else\n        {\n            $this->tables[$name][$name] = true;\n        }\n        return $this;\n    }","label":0}
{"text":"public void add(String input) {\n        TrieNode currentNode = root;\n\n        for(char c: input.toCharArray()) {\n            Map<Character, TrieNode> children = currentNode.getChildren();\n            TrieNode matchingNode = children.get(c);\n            if(matchingNode != null) {\n                currentNode = matchingNode;\n            } else {\n                TrieNode newNode = new TrieNode();\n                children.put(c, newNode);\n                currentNode = newNode;\n            }\n        }\n        currentNode.end=true; \/\/ this is the end of an input that was added, there may be more children\n    }","label":0}
{"text":"func CallRPC(ctx context.Context, client tikvpb.TikvClient, req *Request) (*Response, error) {\n\tresp := &Response{}\n\tresp.Type = req.Type\n\tvar err error\n\tswitch req.Type {\n\tcase CmdGet:\n\t\tresp.Get, err = client.KvGet(ctx, req.Get)\n\tcase CmdScan:\n\t\tresp.Scan, err = client.KvScan(ctx, req.Scan)\n\tcase CmdPrewrite:\n\t\tresp.Prewrite, err = client.KvPrewrite(ctx, req.Prewrite)\n\tcase CmdCommit:\n\t\tresp.Commit, err = client.KvCommit(ctx, req.Commit)\n\tcase CmdCleanup:\n\t\tresp.Cleanup, err = client.KvCleanup(ctx, req.Cleanup)\n\tcase CmdBatchGet:\n\t\tresp.BatchGet, err = client.KvBatchGet(ctx, req.BatchGet)\n\tcase CmdBatchRollback:\n\t\tresp.BatchRollback, err = client.KvBatchRollback(ctx, req.BatchRollback)\n\tcase CmdScanLock:\n\t\tresp.ScanLock, err = client.KvScanLock(ctx, req.ScanLock)\n\tcase CmdResolveLock:\n\t\tresp.ResolveLock, err = client.KvResolveLock(ctx, req.ResolveLock)\n\tcase CmdGC:\n\t\tresp.GC, err = client.KvGC(ctx, req.GC)\n\tcase CmdDeleteRange:\n\t\tresp.DeleteRange, err = client.KvDeleteRange(ctx, req.DeleteRange)\n\tcase CmdRawGet:\n\t\tresp.RawGet, err = client.RawGet(ctx, req.RawGet)\n\tcase CmdRawBatchGet:\n\t\tresp.RawBatchGet, err = client.RawBatchGet(ctx, req.RawBatchGet)\n\tcase CmdRawPut:\n\t\tresp.RawPut, err = client.RawPut(ctx, req.RawPut)\n\tcase CmdRawBatchPut:\n\t\tresp.RawBatchPut, err = client.RawBatchPut(ctx, req.RawBatchPut)\n\tcase CmdRawDelete:\n\t\tresp.RawDelete, err = client.RawDelete(ctx, req.RawDelete)\n\tcase CmdRawBatchDelete:\n\t\tresp.RawBatchDelete, err = client.RawBatchDelete(ctx, req.RawBatchDelete)\n\tcase CmdRawDeleteRange:\n\t\tresp.RawDeleteRange, err = client.RawDeleteRange(ctx, req.RawDeleteRange)\n\tcase CmdRawScan:\n\t\tresp.RawScan, err = client.RawScan(ctx, req.RawScan)\n\tcase CmdUnsafeDestroyRange:\n\t\tresp.UnsafeDestroyRange, err = client.UnsafeDestroyRange(ctx, req.UnsafeDestroyRange)\n\tcase CmdCop:\n\t\tresp.Cop, err = client.Coprocessor(ctx, req.Cop)\n\tcase CmdCopStream:\n\t\tvar streamClient tikvpb.Tikv_CoprocessorStreamClient\n\t\tstreamClient, err = client.CoprocessorStream(ctx, req.Cop)\n\t\tresp.CopStream = &CopStreamResponse{\n\t\t\tTikv_CoprocessorStreamClient: streamClient,\n\t\t}\n\tcase CmdMvccGetByKey:\n\t\tresp.MvccGetByKey, err = client.MvccGetByKey(ctx, req.MvccGetByKey)\n\tcase CmdMvccGetByStartTs:\n\t\tresp.MvccGetByStartTS, err = client.MvccGetByStartTs(ctx, req.MvccGetByStartTs)\n\tcase CmdSplitRegion:\n\t\tresp.SplitRegion, err = client.SplitRegion(ctx, req.SplitRegion)\n\tdefault:\n\t\treturn nil, errors.Errorf(\"invalid request type: %v\", req.Type)\n\t}\n\tif err != nil {\n\t\treturn nil, errors.Trace(err)\n\t}\n\treturn resp, nil\n}","label":0}
{"text":"def _reset_internal_state(self):\n        \n        self.rotation = np.array([[-1., 0., 0.], [0., 1., 0.], [0., 0., -1.]])\n        self.pos = np.zeros(3)  # (x, y, z)\n        self.last_pos = np.zeros(3)\n        self.grasp = False","label":0}
{"text":"JMenuItem createRecentItem(final File f, final SaveType localSaveType) {\n        return mainFrameMenu.createRecentItem(f, localSaveType);\n    }","label":0}
{"text":"private static function ThrowWPRemoteException( WP_Error $pError ) {\r\n\t\t\tif ( self::IsCurlError( $pError ) ) {\r\n\t\t\t\t$message = $pError->get_error_message( 'http_request_failed' );\r\n\r\n\t\t\t\t#region Check if there are any missing cURL methods.\r\n\r\n\t\t\t\t$curl_required_methods = array(\r\n\t\t\t\t\t'curl_version',\r\n\t\t\t\t\t'curl_exec',\r\n\t\t\t\t\t'curl_init',\r\n\t\t\t\t\t'curl_close',\r\n\t\t\t\t\t'curl_setopt',\r\n\t\t\t\t\t'curl_setopt_array',\r\n\t\t\t\t\t'curl_error',\r\n\t\t\t\t);\r\n\r\n\t\t\t\t\/\/ Find all missing methods.\r\n\t\t\t\t$missing_methods = array();\r\n\t\t\t\tforeach ( $curl_required_methods as $m ) {\r\n\t\t\t\t\tif ( ! function_exists( $m ) ) {\r\n\t\t\t\t\t\t$missing_methods[] = $m;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( ! empty( $missing_methods ) ) {\r\n\t\t\t\t\tthrow new Freemius_Exception( array(\r\n\t\t\t\t\t\t'error'           => (object) array(\r\n\t\t\t\t\t\t\t'type'    => 'cUrlMissing',\r\n\t\t\t\t\t\t\t'message' => $message,\r\n\t\t\t\t\t\t\t'code'    => 'curl_missing',\r\n\t\t\t\t\t\t\t'http'    => 402\r\n\t\t\t\t\t\t),\r\n\t\t\t\t\t\t'missing_methods' => $missing_methods,\r\n\t\t\t\t\t) );\r\n\t\t\t\t}\r\n\r\n\t\t\t\t#endregion\r\n\r\n\t\t\t\t\/\/ cURL error - \"cURL error {{errno}}: {{error}}\".\r\n\t\t\t\t$parts = explode( ':', substr( $message, strlen( 'cURL error ' ) ), 2 );\r\n\r\n\t\t\t\t$code    = ( 0 < count( $parts ) ) ? $parts[0] : 'http_request_failed';\r\n\t\t\t\t$message = ( 1 < count( $parts ) ) ? $parts[1] : $message;\r\n\r\n\t\t\t\t$e = new Freemius_Exception( array(\r\n\t\t\t\t\t'error' => array(\r\n\t\t\t\t\t\t'code'    => $code,\r\n\t\t\t\t\t\t'message' => $message,\r\n\t\t\t\t\t\t'type'    => 'CurlException',\r\n\t\t\t\t\t),\r\n\t\t\t\t) );\r\n\t\t\t} else {\r\n\t\t\t\t$e = new Freemius_Exception( array(\r\n\t\t\t\t\t'error' => array(\r\n\t\t\t\t\t\t'code'    => $pError->get_error_code(),\r\n\t\t\t\t\t\t'message' => $pError->get_error_message(),\r\n\t\t\t\t\t\t'type'    => 'WPRemoteException',\r\n\t\t\t\t\t),\r\n\t\t\t\t) );\r\n\t\t\t}\r\n\r\n\t\t\tthrow $e;\r\n\t\t}","label":0}
{"text":"public function load($resource, $type = null)\n    {\n        if ($this->loaded) {\n            throw new \\RuntimeException('Do not add this loader twice');\n        }\n\n        $collection = new RouteCollection();\n\n        foreach ($this->container->getParameter('smart_core_cms.modules') as $moduleName => $module) {\n            $resource = $module['path'].'\/Resources\/config\/routing_admin.yml';\n            if (file_exists($resource)) {\n                $importedRoutes = $this->import('@'.$moduleName.'ModuleBundle\/Resources\/config\/routing_admin.yml', 'yaml');\n                $importedRoutes->addPrefix($moduleName);\n\n                $collection->addCollection($importedRoutes);\n            }\n        }\n\n        return $collection;\n    }","label":0}
{"text":"function() {\n\t\tvar me = this;\n\n\t\tif (plugins.notify(me, 'beforeLayout') === false) {\n\t\t\treturn;\n\t\t}\n\n\t\tlayouts.update(this, this.width, this.height);\n\n\t\t\/**\n\t\t * Provided for backward compatibility, use `afterLayout` instead.\n\t\t * @method IPlugin#afterScaleUpdate\n\t\t * @deprecated since version 2.5.0\n\t\t * @todo remove at version 3\n\t\t * @private\n\t\t *\/\n\t\tplugins.notify(me, 'afterScaleUpdate');\n\t\tplugins.notify(me, 'afterLayout');\n\t}","label":0}
{"text":"public static function getArray()\n    {\n        $var = new Vars();\n        $list = array();\n        foreach ($var->get_all()->getModels() as $item) {\n            $list[$item->key] = $item->value;\n        }\n        return $list;\n    }","label":0}
{"text":"def zext(self, width):\n        \n        width = operator.index(width)\n        if width < self._width:\n            raise ValueError('zero extending to a smaller width')\n        return BinWord(width, self._val)","label":0}
{"text":"function(usernames, rolename) {\n    if (_.isEmpty(usernames)) {\n      return Promise.reject(new Error('One or more usernames must be provided'));\n    }\n\n    if (!_.isArray(usernames)) {\n      usernames = [usernames];\n    }\n\n    return Role.findOne({\n      name: rolename\n    }).populate('users').then(function(role) {\n      return User.find({\n        username: usernames\n      }).then(function(users) {\n        role.users.add(_.pluck(users, 'id'));\n        return role.save();\n      });\n    });\n  }","label":0}
{"text":"def _highlight_line_udiff(self, line, next):\n        \n        start = 0\n        limit = min(len(line['line']), len(next['line']))\n        while start < limit and line['line'][start] == next['line'][start]:\n            start += 1\n        end = -1\n        limit -= start\n        while -end <= limit and line['line'][end] == next['line'][end]:\n            end -= 1\n        end += 1\n        if start or end:\n            def do(l):\n                last = end + len(l['line'])\n                if l['action'] == 'add':\n                    tag = 'ins'\n                else:\n                    tag = 'del'\n                l['line'] = '%s<%s>%s<\/%s>%s' % (\n                    l['line'][:start],\n                    tag,\n                    l['line'][start:last],\n                    tag,\n                    l['line'][last:]\n                )\n            do(line)\n            do(next)","label":0}
{"text":"public function refill(Item $item, $field)\n    {\n        $url = $this->getSourceForFill($item);\n        if (!$url || !preg_match(Filler::REG_ITEM_ID, $url, $match)) {\n            return $item;\n        }\n\n        \/\/ get data\n        $body = $this->browser->get('anime', ['aid' => $match['id']]);\n\n        switch ($field) {\n            case self::FIELD_DATE_END:\n                $item->setDateEnd(new \\DateTime($body->filter('enddate')->text()));\n                break;\n            case self::FIELD_DATE_PREMIERE:\n                $item->setDatePremiere(new \\DateTime($body->filter('startdate')->text()));\n                break;\n            case self::FIELD_EPISODES:\n                $this->filler->setEpisodes($item, $body);\n                break;\n            case self::FIELD_EPISODES_NUMBER:\n                $item->setEpisodesNumber($body->filter('episodecount')->text());\n                break;\n            case self::FIELD_GENRES:\n                $new_item = $this->filler->setGenres(new Item(), $body);\n                foreach ($new_item->getGenres() as $new_genre) {\n                    $item->addGenre($new_genre);\n                }\n                break;\n            case self::FIELD_NAMES:\n                $new_item = $this->filler->setNames(new Item(), $body);\n                \/\/ set main name in top of names list\n                $new_names = $new_item->getNames()->toArray();\n                array_unshift($new_names, (new Name())->setName($new_item->getName()));\n                foreach ($new_names as $new_name) {\n                    $item->addName($new_name);\n                }\n                break;\n            case self::FIELD_SOURCES:\n                if ($url = $body->filter('url')->text()) {\n                    $item->addSource((new Source())->setUrl($url));\n                }\n                break;\n            case self::FIELD_SUMMARY:\n                $item->setSummary($this->cleaner->clean($body->filter('description')->text()));\n                break;\n        }\n\n        return $item;\n    }","label":0}
{"text":"public void click(String locator) {\n        getDispatcher().beforeClick(this, locator);\n        \n        click();\n        validatePresenceOfAlert();\n        WebDriverWaitUtils.waitUntilElementIsPresent(locator);\n        \n        getDispatcher().afterClick(this, locator);\n    }","label":0}
{"text":"public function getStub()\n    {\n        $parser = $this->getNameParser();\n\n        if ($this->existing) {\n            $this->name = 'create_'.str_plural($this->name).'_table';\n            \n            $parser = $this->getNameParser();\n                \n            $fields = (new TableDumper($parser->getTable()))->toSchema();\n\n            $stub = Stub::create('\/migration\/create.stub', [\n                'class' => $this->getClass(),\n                'table' => $parser->getTable(),\n                'fields' => (new SchemaParser($fields))->render(),\n            ]);\n        }\n        elseif ($parser->isCreate()) {\n            $stub = Stub::create('\/migration\/create.stub', [\n                'class' => $this->getClass(),\n                'table' => $parser->getTable(),\n                'fields' => $this->getSchemaParser()->render(),\n            ]);\n        } elseif ($parser->isAdd()) {\n            $stub = Stub::create('\/migration\/add.stub', [\n                'class' => $this->getClass(),\n                'table' => $parser->getTable(),\n                'fields_up' => $this->getSchemaParser()->up(),\n                'fields_down' => $this->getSchemaParser()->down(),\n            ]);\n        } elseif ($parser->isDelete()) {\n            $stub = Stub::create('\/migration\/delete.stub', [\n                'class' => $this->getClass(),\n                'table' => $parser->getTable(),\n                'fields_down' => $this->getSchemaParser()->up(),\n                'fields_up' => $this->getSchemaParser()->down(),\n            ]);\n        } elseif ($parser->isDrop()) {\n            $stub = Stub::create('\/migration\/drop.stub', [\n                'class' => $this->getClass(),\n                'table' => $parser->getTable(),\n                'fields' => $this->getSchemaParser()->render(),\n            ]);\n        } else {\n            $stub = false;\n        }\n\n        if ($stub) {\n            return $stub->render();\n        }\n\n        return parent::getStub();\n    }","label":0}
{"text":"func (w *Writer) Flush() error {\n\treturn w.cw.w.(*bufio.Writer).Flush()\n}","label":0}
{"text":"function through(transform, flush, objectMode) {\n  const stream = new TransformStream({objectMode})\n  stream._transform = transform || pass\n  if (flush) stream._flush = flush\n  return stream\n}","label":0}
{"text":"def fielded_query(query, field)\n      tokens = query.split(%r{\\s|(\"[^\"]+\")}).delete_if {|a| a.blank?}\n      return tokens.collect {|token| \"#{field}:#{token}\"}.join(\" \")\n    end","label":0}
{"text":"func (object *OdbObject) Data() (data []byte) {\n\tvar c_blob unsafe.Pointer = C.git_odb_object_data(object.ptr)\n\tvar blob []byte\n\n\tlen := int(C.git_odb_object_size(object.ptr))\n\n\tsliceHeader := (*reflect.SliceHeader)((unsafe.Pointer(&blob)))\n\tsliceHeader.Cap = len\n\tsliceHeader.Len = len\n\tsliceHeader.Data = uintptr(c_blob)\n\n\treturn blob\n}","label":0}
{"text":"function restore_noise($text) {\n        while(($pos=strpos($text, '___noise___'))!==false) {\n            $key = '___noise___'.$text[$pos+11].$text[$pos+12].$text[$pos+13];\n            if (isset($this->noise[$key]))\n                $text = substr($text, 0, $pos).$this->noise[$key].substr($text, $pos+14);\n        }\n        return $text;\n    }","label":0}
{"text":"public void load(File file) {\n    try {\n      PropertiesConfiguration config = new PropertiesConfiguration();\n      \/\/ disabled to prevent accumulo classpath value from being shortened\n      config.setDelimiterParsingDisabled(true);\n      config.load(file);\n      ((CompositeConfiguration) internalConfig).addConfiguration(config);\n    } catch (ConfigurationException e) {\n      throw new IllegalArgumentException(e);\n    }\n  }","label":0}
{"text":"public static function get_template_part( $_view, $_data = null ) {\n\n\t\t\/*\n\t\tTo be reviewed later, should have more checks and restrictions like a whitelist etc.\n\n\t\tif ( 0 === strpos( $_view, 'http:\/\/' ) || 0 === strpos( $_view, 'https:\/\/' ) ) {\n\t\t\t$_view = apply_filters( 'pods_view_url_include', $_view );\n\n\t\t\tif ( empty( $_view ) || ( defined( 'PODS_REMOTE_VIEWS' ) && PODS_REMOTE_VIEWS ) )\n\t\t\t\treturn '';\n\n\t\t\t$response = wp_remote_get( $_view );\n\n\t\t\treturn wp_remote_retrieve_body( $response );\n\t\t}\n\t\t*\/\n\n\t\t$_view = self::locate_template( $_view );\n\n\t\tif ( empty( $_view ) ) {\n\t\t\treturn $_view;\n\t\t}\n\n\t\tif ( ! empty( $_data ) && is_array( $_data ) ) {\n\t\t\textract( $_data, EXTR_SKIP );\n\t\t}\n\n\t\tob_start();\n\t\trequire $_view;\n\t\t$output = ob_get_clean();\n\n\t\treturn $output;\n\t}","label":0}
{"text":"public static function renderUri( $uri, $options = array() )\n    {\n        $serviceContainer = ezpKernel::instance()->getServiceContainer();\n        $fragmentHandler = $serviceContainer->get( 'fragment.handler' );\n\n        $strategy = isset( $options['strategy'] ) ? $options['strategy'] : 'inline';\n        unset( $options['strategy'] );\n\n        try\n        {\n            return $fragmentHandler->render( $uri, $strategy, $options );\n        }\n        catch ( InvalidArgumentException $e )\n        {\n            throw new InvalidArgumentException( \"The URI {$uri->controller} couldn't be rendered\", 0, $e );\n        }\n    }","label":0}
{"text":"public static function parse($rut)\n    {\n        list($rut, $vn) = self::split($rut);\n\n        return (new self($rut, $vn));\n    }","label":0}
{"text":"function ( geoNode ) {\n\n\t\t\tif ( THREE.NURBSCurve === undefined ) {\n\n\t\t\t\tconsole.error( 'THREE.FBXLoader: The loader relies on THREE.NURBSCurve for any nurbs present in the model. Nurbs will show up as empty geometry.' );\n\t\t\t\treturn new THREE.BufferGeometry();\n\n\t\t\t}\n\n\t\t\tvar order = parseInt( geoNode.Order );\n\n\t\t\tif ( isNaN( order ) ) {\n\n\t\t\t\tconsole.error( 'THREE.FBXLoader: Invalid Order %s given for geometry ID: %s', geoNode.Order, geoNode.id );\n\t\t\t\treturn new THREE.BufferGeometry();\n\n\t\t\t}\n\n\t\t\tvar degree = order - 1;\n\n\t\t\tvar knots = geoNode.KnotVector.a;\n\t\t\tvar controlPoints = [];\n\t\t\tvar pointsValues = geoNode.Points.a;\n\n\t\t\tfor ( var i = 0, l = pointsValues.length; i < l; i += 4 ) {\n\n\t\t\t\tcontrolPoints.push( new THREE.Vector4().fromArray( pointsValues, i ) );\n\n\t\t\t}\n\n\t\t\tvar startKnot, endKnot;\n\n\t\t\tif ( geoNode.Form === 'Closed' ) {\n\n\t\t\t\tcontrolPoints.push( controlPoints[ 0 ] );\n\n\t\t\t} else if ( geoNode.Form === 'Periodic' ) {\n\n\t\t\t\tstartKnot = degree;\n\t\t\t\tendKnot = knots.length - 1 - startKnot;\n\n\t\t\t\tfor ( var i = 0; i < degree; ++ i ) {\n\n\t\t\t\t\tcontrolPoints.push( controlPoints[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar curve = new THREE.NURBSCurve( degree, knots, controlPoints, startKnot, endKnot );\n\t\t\tvar vertices = curve.getPoints( controlPoints.length * 7 );\n\n\t\t\tvar positions = new Float32Array( vertices.length * 3 );\n\n\t\t\tvertices.forEach( function ( vertex, i ) {\n\n\t\t\t\tvertex.toArray( positions, i * 3 );\n\n\t\t\t} );\n\n\t\t\tvar geometry = new THREE.BufferGeometry();\n\t\t\tgeometry.addAttribute( 'position', new THREE.BufferAttribute( positions, 3 ) );\n\n\t\t\treturn geometry;\n\n\t\t}","label":0}
{"text":"def set_temperature(self, set_point):\n        \n        response = self.api_interface.set_device_state(self, {\n            \"desired_state\": {'set_point': set_point}\n        })\n\n        self._update_state_from_response(response)","label":0}
{"text":"public function error($channel, $message, array $context = [])\n    {\n        $this->log($channel, LogLevel::ERROR, $message, $context);\n\n        return $this;\n    }","label":0}
{"text":"public function initialize(DataProviderInterface $dataProvider)\n    {\n        $this->dataProvider = $dataProvider;\n        $contextConfiguration = ['workspaceName' => 'live', 'invisibleContentShown' => true];\n        $context = $this->contextFactory->create($contextConfiguration);\n        $this->rootNode = $context->getRootNode();\n\n        $this->applyOption($this->storageNodeNodePath, 'storageNodeNodePath');\n        $this->applyOption($this->nodeTypeName, 'nodeTypeName');\n\n        if (isset($this->options['siteNodePath']) || isset($this->options['siteNodeIdentifier'])) {\n            $siteNodePath = isset($this->options['siteNodePath']) ? trim($this->options['siteNodePath']) : null;\n            $siteNodeIdentifier = isset($this->options['siteNodeIdentifier']) ? trim($this->options['siteNodeIdentifier']) : null;\n            $this->siteNode = $this->rootNode->getNode($siteNodePath) ?: $context->getNodeByIdentifier($siteNodeIdentifier);\n            if ($this->siteNode === null) {\n                throw new Exception(sprintf('Site node not found (%s)', $siteNodePath ?: $siteNodeIdentifier), 1425077201);\n            }\n        } else {\n            $this->log(get_class($this) . ': siteNodePath is not defined. Please make sure to set the target siteNodePath in your importer options.', LOG_WARNING);\n        }\n    }","label":0}
{"text":"public function refresh()\n    {\n        $this->getDriver()->curl($this->getDriver()->factoryCommand('refresh', WebDriver_Command::METHOD_POST));\n        return $this;\n    }","label":0}
{"text":"public function rename($bucketName, $bucketId, $fileName, $targetBucketId, $newFileName, $private = false)\n    {\n        $data = $this->get($bucketName, $fileName, $private, false);\n        if (is_array($data) && array_key_exists('x-bz-file-id', $data['headers'])) {\n            $result = $this->insert($targetBucketId, $data['content'], $newFileName);\n            if ($result === false) {\n                return false;\n            }\n            $response = $this->client->b2DeleteFileVersion($this->apiURL, $this->token, $data['headers']['x-bz-file-id'], $fileName);\n\n            return $response->isOk();\n        }\n\n        return false;\n    }","label":0}
{"text":"func (c *environConfig) update(cfg *config.Config) error {\n\t\/\/ Validate the updates. newValidConfig does not modify the \"known\"\n\t\/\/ config attributes so it is safe to call Validate here first.\n\tif err := config.Validate(cfg, c.Config); err != nil {\n\t\treturn errors.Trace(err)\n\t}\n\n\tupdates, err := newValidConfig(cfg)\n\tif err != nil {\n\t\treturn errors.Trace(err)\n\t}\n\n\t\/\/ Check that no immutable fields have changed.\n\tattrs := updates.UnknownAttrs()\n\tfor _, field := range configImmutableFields {\n\t\tif attrs[field] != c.attrs[field] {\n\t\t\treturn errors.Errorf(\"%s: cannot change from %v to %v\", field, c.attrs[field], attrs[field])\n\t\t}\n\t}\n\n\t\/\/ Apply the updates.\n\tc.Config = cfg\n\tc.attrs = cfg.UnknownAttrs()\n\treturn nil\n}","label":0}
{"text":"def _init_dates(self):\n        \n        if self.total_transactions == 0:\n            return None\n        self.epoch_start = Result.select(Result.epoch).order_by(Result.epoch.asc()).limit(1).get().epoch\n        self.epoch_finish = Result.select(Result.epoch).order_by(Result.epoch.desc()).limit(1).get().epoch\n        self.start_datetime = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(self.epoch_start))\n        self.finish_datetime = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(self.epoch_finish))","label":0}
{"text":"protected function updateRelation($relationsData)\n    {\n        foreach ($relationsData as $name => $values) {\n            if (!method_exists($this->model, $name)) {\n                continue;\n            }\n\n            $relation = $this->model->$name();\n\n            $oneToOneRelation = $relation instanceof Relations\\HasOne\n                || $relation instanceof Relations\\MorphOne\n                || $relation instanceof Relations\\BelongsTo;\n\n            $prepared = $this->prepareUpdate([$name => $values], $oneToOneRelation);\n\n            if (empty($prepared)) {\n                continue;\n            }\n\n            switch (true) {\n                case $relation instanceof Relations\\BelongsToMany:\n                case $relation instanceof Relations\\MorphToMany:\n                    if (isset($prepared[$name])) {\n                        $relation->sync($prepared[$name]);\n                    }\n                    break;\n                case $relation instanceof Relations\\HasOne:\n\n                    $related = $this->model->$name;\n\n                    \/\/ if related is empty\n                    if (is_null($related)) {\n                        $related = $relation->getRelated();\n                        $qualifiedParentKeyName = $relation->getQualifiedParentKeyName();\n                        $localKey = Arr::last(explode('.', $qualifiedParentKeyName));\n                        $related->{$relation->getForeignKeyName()} = $this->model->{$localKey};\n                    }\n\n                    foreach ($prepared[$name] as $column => $value) {\n                        $related->setAttribute($column, $value);\n                    }\n\n                    $related->save();\n                    break;\n                case $relation instanceof Relations\\BelongsTo:\n                case $relation instanceof Relations\\MorphTo:\n\n                    $parent = $this->model->$name;\n\n                    \/\/ if related is empty\n                    if (is_null($parent)) {\n                        $parent = $relation->getRelated();\n                    }\n\n                    foreach ($prepared[$name] as $column => $value) {\n                        $parent->setAttribute($column, $value);\n                    }\n\n                    $parent->save();\n\n                    \/\/ When in creating, associate two models\n                    $foreignKeyMethod = (app()->version() < '5.8.0') ? 'getForeignKey' : 'getForeignKeyName';\n                    if (!$this->model->{$relation->{$foreignKeyMethod}()}) {\n                        $this->model->{$relation->{$foreignKeyMethod}()} = $parent->getKey();\n\n                        $this->model->save();\n                    }\n\n                    break;\n                case $relation instanceof Relations\\MorphOne:\n                    $related = $this->model->$name;\n                    if (is_null($related)) {\n                        $related = $relation->make();\n                    }\n                    foreach ($prepared[$name] as $column => $value) {\n                        $related->setAttribute($column, $value);\n                    }\n                    $related->save();\n                    break;\n                case $relation instanceof Relations\\HasMany:\n                case $relation instanceof Relations\\MorphMany:\n\n                    foreach ($prepared[$name] as $related) {\n                        \/** @var Relations\\Relation $relation *\/\n                        $relation = $this->model()->$name();\n\n                        $keyName = $relation->getRelated()->getKeyName();\n\n                        $instance = $relation->findOrNew(Arr::get($related, $keyName));\n\n                        if ($related[static::REMOVE_FLAG_NAME] == 1) {\n                            $instance->delete();\n\n                            continue;\n                        }\n\n                        Arr::forget($related, static::REMOVE_FLAG_NAME);\n\n                        $instance->fill($related);\n\n                        $instance->save();\n                    }\n\n                    break;\n            }\n        }\n    }","label":0}
{"text":"public function cleanUrlParams($sUrl, $sConnector = '&amp;')\n    {\n        $aUrlParts = explode('?', $sUrl);\n\n        \/\/ check for params part\n        if (!is_array($aUrlParts) || count($aUrlParts) != 2) {\n            return $sUrl;\n        }\n\n        $sUrl = $aUrlParts[0];\n        $sUrlParams = $aUrlParts[1];\n\n        \/** @var \\OxidEsales\\Eshop\\Core\\StrRegular $oStrUtils *\/\n        $oStrUtils = getStr();\n        $sUrlParams = $oStrUtils->preg_replace(\n            ['@(\\&(amp;){1,})@ix', '@\\&{1,}@', '@\\?&@x'],\n            ['&', '&', '?'],\n            $sUrlParams\n        );\n\n        \/\/ remove duplicate entries\n        parse_str($sUrlParams, $aUrlParams);\n        $sUrl .= '?' . http_build_query($aUrlParams, '', $sConnector);\n\n        \/\/ replace brackets\n        $sUrl = str_replace(\n            ['%5B', '%5D'],\n            ['[', ']'],\n            $sUrl\n        );\n\n        return $sUrl;\n    }","label":0}
{"text":"func (c *Client) GetPartial(ctx context.Context, container, key string, offset, length int64) (rc io.ReadCloser, err error) {\n\tif offset < 0 {\n\t\treturn nil, errors.New(\"invalid negative length\")\n\t}\n\n\treq := newReq(ctx, c.keyURL(container, key))\n\tif length >= 0 {\n\t\treq.Header.Set(\"Range\", fmt.Sprintf(\"bytes=%d-%d\", offset, offset+length-1))\n\t} else {\n\t\treq.Header.Set(\"Range\", fmt.Sprintf(\"bytes=%d-\", offset))\n\t}\n\tc.Auth.SignRequest(req)\n\n\tres, err := c.transport().RoundTrip(req)\n\tif err != nil {\n\t\treturn\n\t}\n\tswitch res.StatusCode {\n\tcase http.StatusOK, http.StatusPartialContent:\n\t\treturn res.Body, nil\n\tcase http.StatusNotFound:\n\t\tres.Body.Close()\n\t\treturn nil, os.ErrNotExist\n\tdefault:\n\t\tres.Body.Close()\n\t\treturn nil, fmt.Errorf(\"azure HTTP error on GET: %d\", res.StatusCode)\n\t}\n}","label":0}
{"text":"function createReactClassName( artifact ) {\n   'use strict';\n   return artifact.split( \/[-_\\s]\/ ).map( function( part, index ) {\n      return part.charAt( 0 ).toUpperCase() + part.slice( 1 );\n   } ).join( '' );\n}","label":0}
{"text":"func (g *TaskGroup) AddSpread(s *Spread) *TaskGroup {\n\tg.Spreads = append(g.Spreads, s)\n\treturn g\n}","label":0}
{"text":"private HashMap<String, StoreDefinition> makeStoreDefinitionMap(List<StoreDefinition> storeDefs) {\n        HashMap<String, StoreDefinition> storeDefMap = new HashMap<String, StoreDefinition>();\n        for(StoreDefinition storeDef: storeDefs)\n            storeDefMap.put(storeDef.getName(), storeDef);\n        return storeDefMap;\n    }","label":0}
{"text":"public static StreamSpecifier tag(String key, String value) {\n    checkValidKey(key);\n    checkNotNull(value);\n    return new StreamSpecifier(\"m:\" + key + \":\" + value);\n  }","label":0}
{"text":"func (s *DBSubnetGroup) SetDBSubnetGroupDescription(v string) *DBSubnetGroup {\n\ts.DBSubnetGroupDescription = &v\n\treturn s\n}","label":0}
{"text":"protected function registerWorkerErrorCallback()\n    {\n        $this->swooleServer->on('WorkerError', function ($server, $workerId, $workerPid, $exitCode, $signal) {\n            $this->reportWorkerError($workerId, $workerPid, $exitCode, $signal);\n\n            $this->events->dispatch(new Events\\WorkerError($this, $workerId, $workerPid, $exitCode, $signal));\n\n            $this->dispatchEvent('WorkerError', $this, $workerId, $workerPid, $exitCode, $signal);\n        });\n    }","label":0}
{"text":"func (s *AwsSecurityFinding) SetAwsAccountId(v string) *AwsSecurityFinding {\n\ts.AwsAccountId = &v\n\treturn s\n}","label":0}
{"text":"void handleGet(\n    Object value,\n    MatchSpaceKey msg,\n    EvalCache cache,\n    Object contextValue,\n    SearchResults result)\n    throws MatchingException, BadMessageFormatMatchingException\n  {\n    if (tc.isEntryEnabled())\n      tc.entry(\n        this,\n        cclass,\n        \"handleGet\",\n        \"value: \"\n          + value\n          + \"msg: \"\n          + msg\n          + \", context: \"\n          + contextValue\n          + \", result: \"\n          + result);\n\n    if (!(value instanceof String))\n      return;\n    char[] chars = ((String) value).toCharArray();\n    subTree.get(chars, 0, chars.length, false, msg, cache, contextValue, result);\n    if (haveEqualityMatches())\n      handleEqualityGet(value, msg, cache, contextValue, result);\n    if (tc.isEntryEnabled())\n      tc.exit(this,cclass, \"handleGet\");\n  }","label":0}
{"text":"def create_message_set(messages, codec=CODEC_NONE, key=None, compresslevel=None):\n    \n    if codec == CODEC_NONE:\n        return [create_message(m, k) for m, k in messages]\n    elif codec == CODEC_GZIP:\n        return [create_gzip_message(messages, key, compresslevel)]\n    elif codec == CODEC_SNAPPY:\n        return [create_snappy_message(messages, key)]\n    else:\n        raise UnsupportedCodecError(\"Codec 0x%02x unsupported\" % (codec,))","label":0}
{"text":"public boolean hardLinkTo(String src, String dst) throws IOException {  \n    INode dstNode = hardLinkToInternal(src, dst); \n    getEditLog().logSync(false);  \n    if (dstNode != null && auditLog.isInfoEnabled()) {  \n\t\t\tlogAuditEvent(getCurrentUGI(), Server.getRemoteIp(),\n        \"hardlink\", src, dst, dstNode);\n    } \n    return dstNode != null; \n  }","label":0}
{"text":"func (s *Server) applyRingChange(c *RingChange) error {\n\tbuilderErr, ringErr := s.rbPersistFn(c, false)\n\tif builderErr != nil {\n\t\ts.ctxlog.WithFields(log.Fields{\n\t\t\t\"path\":    fmt.Sprintf(\"%s\/%s.builder\", s.cfg.RingDir, s.servicename),\n\t\t\t\"ringver\": c.v,\n\t\t\t\"err\":     builderErr,\n\t\t}).Warning(\"Unable to persist builder\")\n\t\treturn builderErr\n\t}\n\tif ringErr != nil {\n\t\ts.ctxlog.WithFields(log.Fields{\n\t\t\t\"path\":    fmt.Sprintf(\"%s\/%s.ring\", s.cfg.RingDir, s.servicename),\n\t\t\t\"ringver\": c.v,\n\t\t\t\"err\":     ringErr,\n\t\t}).Warning(\"Unable to persist ring\")\n\t\treturn ringErr\n\t}\n\tnewRB, newBB, err := s.loadRingBuilderBytes(c.v)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"Failed to load new ring\/builder bytes: %s\", err)\n\t}\n\terr = s.replicateRing(c.r, newRB, newBB)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"Ring replicate failed: %s\", err)\n\t}\n\t\/\/now update the current working ring\n\tbuilderErr, ringErr = s.rbPersistFn(c, true)\n\ts.rb = newRB\n\ts.bb = newBB\n\ts.b = c.b\n\ts.r = c.r\n\tif len(c.removedNodes) != 0 {\n\t\ts.removeManagedNodes(c.removedNodes)\n\t}\n\tgo s.NotifyNodes()\n\treturn nil\n}","label":0}
{"text":"public void paint(Paintable paintable, Object group, MapContext context) {\n\t\tRasterTile tile = (RasterTile) paintable;\n\t\tcontext.getRasterContext().drawImage(tile.getStore().getLayer(), \n\t\t\t\ttile.getCode().toString(), tile.getUrl(), tile.getBounds(), new PictureStyle(1.0));\n\t}","label":0}
{"text":"func (op *RemoveOfferOperation) Build(attempt int) ([]txn.Op, error) {\n\toffer, err := op.offers.ApplicationOffer(op.offerName)\n\tif errors.IsNotFound(err) {\n\t\treturn nil, jujutxn.ErrNoOperations\n\t}\n\tif err != nil {\n\t\treturn nil, errors.Trace(err)\n\t}\n\t\/\/ When 'force' is set on the operation, this call will return needed operations\n\t\/\/ and accumulate all operational errors encountered in the operation.\n\t\/\/ If the 'force' is not set, any error will be fatal and no operations will be returned.\n\tswitch ops, err := op.internalRemove(offer); err {\n\tcase errRefresh:\n\tcase errAlreadyDying:\n\t\treturn nil, jujutxn.ErrNoOperations\n\tcase nil:\n\t\treturn ops, nil\n\tdefault:\n\t\tif op.Force {\n\t\t\tlogger.Warningf(\"force removing offer %v despite error %v\", op.offerName, err)\n\t\t\treturn ops, nil\n\t\t}\n\t\treturn nil, err\n\t}\n\treturn nil, jujutxn.ErrNoOperations\n}","label":0}
{"text":"public BackchannelAuthenticationCompleteRequest setClaims(Map<String, Object> claims)\n    {\n        if (claims == null || claims.size() == 0)\n        {\n            this.claims = null;\n        }\n        else\n        {\n            setClaims(Utils.toJson(claims));\n        }\n\n        return this;\n    }","label":0}
{"text":"func (c *Client) GetAlert(projectName string, alertName string) (result GetProjectResult, err error) {\n\n\trequestUrl := c.GetUrl(entity, projectName, \"\")\n\trequestPath := GetRequestPath(entity, projectName, \"\")\n\trequestUrl = requestUrl + \"?alertName=\" + alertName\n\trequestPath = requestPath + \"?alertName=\" + alertName\n\n\tfmt.Printf(\"url: %s \\n\", requestUrl)\n\tresponseResult, err := c.GetResponseJson(\"GET\", requestUrl, requestPath, \"\")\n\n\tif err != nil {\n\t\treturn result, err\n\t}\n\n\tfmt.Printf(\"GetAlert response: %s \\n\", responseResult)\n\terr = json.Unmarshal([]byte(responseResult), &result)\n\n\treturn result, err\n}","label":0}
{"text":"function clientNow() {\n  var d = new Date();\n  var offset = -1 * d.getTimezoneOffset();\n\n  d.setUTCMinutes(d.getUTCMinutes() + offset);\n  return d.toISOString().replace('Z', minutesToOffsetString(offset));\n}","label":0}
{"text":"protected synchronized void maintenance() {\n        \/\/ first of all we're checking, if all consumers were already registered. if not - just no-op.\n        if (positions.size() < expectedConsumers) {\n            log.trace(\"Skipping maintanance due to not all expected consumers shown up: [{}] vs [{}]\", positions.size(), expectedConsumers);\n            return;\n        }\n\n        \/\/ now we should get minimal id of consumed update\n        val minIdx = maxAppliedIndexEverywhere();\n        val allPositions = new long[positions.size()];\n        int cnt = 0;\n        for (val p:positions.values())\n            allPositions[cnt++] = p.get();\n\n        log.trace(\"Min idx: {}; last deleted index: {}; stored updates: {}; positions: {}\", minIdx, lastDeletedIndex.get(), updates.size(), allPositions);\n\n        \/\/ now we're checking, if there are undeleted updates between\n        if (minIdx > lastDeletedIndex.get()) {\n            \/\/ delete everything between them\n            for (long e = lastDeletedIndex.get(); e < minIdx; e++) {\n                updates.remove(e);\n            }\n\n            \/\/ now, making sure we won't try to delete stuff twice\n            lastDeletedIndex.set(minIdx);\n            \/\/System.gc();\n        }\n    }","label":0}
{"text":"func (c MerkleClient) VerifyMerkleRootAndKBFS(ctx context.Context, __arg VerifyMerkleRootAndKBFSArg) (err error) {\n\terr = c.Cli.Call(ctx, \"keybase.1.merkle.verifyMerkleRootAndKBFS\", []interface{}{__arg}, nil)\n\treturn\n}","label":0}
{"text":"func InvokeStreamHandler(\n\ti StreamInvokeRequest,\n) (err error) {\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\terr = handlePanic(Streaming, i.Logger, r, i.Stream.Request().Meta)\n\t\t}\n\t}()\n\n\treturn i.Handler.HandleStream(i.Stream)\n}","label":0}
{"text":"public function init()\n    {\n        if ($this->brandLabel !== false) {\n            if (!isset($this->brandLabel)) {\n                $this->brandLabel = CHtml::encode(Yii::app()->name);\n            }\n\n            if (!isset($this->brandUrl)) {\n                $this->brandUrl = Yii::app()->homeUrl;\n            }\n        }\n        if (isset($this->color)) {\n            TbArray::defaultValue('color', $this->color, $this->htmlOptions);\n        }\n        if (isset($this->display) && $this->display !== TbHtml::NAVBAR_DISPLAY_NONE) {\n            TbArray::defaultValue('display', $this->display, $this->htmlOptions);\n        }\n    }","label":0}
{"text":"public Observable<Page<CognitiveServicesAccountInner>> listAsync() {\n        return listWithServiceResponseAsync()\n            .map(new Func1<ServiceResponse<Page<CognitiveServicesAccountInner>>, Page<CognitiveServicesAccountInner>>() {\n                @Override\n                public Page<CognitiveServicesAccountInner> call(ServiceResponse<Page<CognitiveServicesAccountInner>> response) {\n                    return response.body();\n                }\n            });\n    }","label":0}
{"text":"func (s *Service) GSClient(c context.Context, proj types.ProjectName) (gs.Client, error) {\n\t\/\/ Get an Authenticator bound to the token scopes that we need for\n\t\/\/ authenticated Cloud Storage access.\n\ttransport, err := serverAuth.GetRPCTransport(c, serverAuth.AsProject, serverAuth.WithProject(string(proj)), serverAuth.WithScopes(gs.ReadWriteScopes...))\n\tif err != nil {\n\t\tlog.WithError(err).Errorf(c, \"Failed to create authenticated transport for Google Storage client.\")\n\t\treturn nil, err\n\t}\n\n\tclient, err := gs.NewProdClient(c, transport)\n\tif err != nil {\n\t\tlog.WithError(err).Errorf(c, \"Failed to create Google Storage client.\")\n\t\treturn nil, err\n\t}\n\treturn client, nil\n}","label":0}
{"text":"private function _routeCron($src, $controller, $action) {\n        $this->request->name = '-' . $src . '_' . $controller . '_' . $action;\n        $this->request->src = $src;\n        $this->request->controller = $controller;\n        $this->request->action = $action;\n        $this->request->auth = new Auth($this->request->src);\n        $this->_route = true;\n    }","label":0}
{"text":"def latex_quote(s):\n    \n    special = {'_':r'\\_', '$':r'\\$', '#':r'\\#'}\n    s = str(s)\n    for char,repl in special.items():\n        new = s.replace(char, repl)\n        s = new[:]\n    return s","label":0}
{"text":"public MatchResult doWork(List<Observation> gpxList) {\n        \/\/ filter the entries:\n        List<Observation> filteredGPXEntries = filterGPXEntries(gpxList);\n\n        \/\/ now find each of the entries in the graph:\n        List<Collection<QueryResult>> queriesPerEntry = lookupGPXEntries(filteredGPXEntries, DefaultEdgeFilter.allEdges(weighting.getFlagEncoder()));\n\n        \/\/ Add virtual nodes and edges to the graph so that candidates on edges can be represented\n        \/\/ by virtual nodes.\n        QueryGraph queryGraph = new QueryGraph(routingGraph).setUseEdgeExplorerCache(true);\n        List<QueryResult> allQueryResults = new ArrayList<>();\n        for (Collection<QueryResult> qrs : queriesPerEntry) {\n            allQueryResults.addAll(qrs);\n        }\n        queryGraph.lookup(allQueryResults);\n\n        \/\/ Different QueryResults can have the same tower node as their closest node.\n        \/\/ Hence, we now dedupe the query results of each GPX entry by their closest node (#91).\n        \/\/ This must be done after calling queryGraph.lookup() since this replaces some of the\n        \/\/ QueryResult nodes with virtual nodes. Virtual nodes are not deduped since there is at\n        \/\/ most one QueryResult per edge and virtual nodes are inserted into the middle of an edge.\n        \/\/ Reducing the number of QueryResults improves performance since less shortest\/fastest\n        \/\/ routes need to be computed.\n        queriesPerEntry = deduplicateQueryResultsByClosestNode(queriesPerEntry);\n\n        logger.debug(\"================= Query results =================\");\n        int i = 1;\n        for (Collection<QueryResult> entries : queriesPerEntry) {\n            logger.debug(\"Query results for GPX entry {}\", i++);\n            for (QueryResult qr : entries) {\n                logger.debug(\"Node id: {}, virtual: {}, snapped on: {}, pos: {},{}, \"\n                                + \"query distance: {}\", qr.getClosestNode(),\n                        isVirtualNode(qr.getClosestNode()), qr.getSnappedPosition(),\n                        qr.getSnappedPoint().getLat(), qr.getSnappedPoint().getLon(),\n                        qr.getQueryDistance());\n            }\n        }\n\n        \/\/ Creates candidates from the QueryResults of all GPX entries (a candidate is basically a\n        \/\/ QueryResult + direction).\n        List<TimeStep<State, Observation, Path>> timeSteps =\n                createTimeSteps(filteredGPXEntries, queriesPerEntry, queryGraph);\n        logger.debug(\"=============== Time steps ===============\");\n        i = 1;\n        for (TimeStep<State, Observation, Path> ts : timeSteps) {\n            logger.debug(\"Candidates for time step {}\", i++);\n            for (State candidate : ts.candidates) {\n                logger.debug(candidate.toString());\n            }\n        }\n\n        \/\/ Compute the most likely sequence of map matching candidates:\n        List<SequenceState<State, Observation, Path>> seq = computeViterbiSequence(timeSteps, gpxList.size(), queryGraph);\n\n        logger.debug(\"=============== Viterbi results =============== \");\n        i = 1;\n        for (SequenceState<State, Observation, Path> ss : seq) {\n            logger.debug(\"{}: {}, path: {}\", i, ss.state,\n                    ss.transitionDescriptor != null ? ss.transitionDescriptor.calcEdges() : null);\n            i++;\n        }\n\n        final EdgeExplorer explorer = queryGraph.createEdgeExplorer(DefaultEdgeFilter.allEdges(weighting.getFlagEncoder()));\n        final Map<String, EdgeIteratorState> virtualEdgesMap = createVirtualEdgesMap(queriesPerEntry, explorer);\n        MatchResult matchResult = computeMatchResult(seq, virtualEdgesMap, gpxList, queryGraph);\n        logger.debug(\"=============== Matched real edges =============== \");\n        i = 1;\n        for (EdgeMatch em : matchResult.getEdgeMatches()) {\n            logger.debug(\"{}: {}\", i, em.getEdgeState());\n            i++;\n        }\n        return matchResult;\n    }","label":0}
{"text":"func Dec(ip net.IP) {\n\tfor j := len(ip) - 1; j >= 0; j-- {\n\t\tip[j]--\n\t\tif ip[j] == 255 {\n\t\t\tcontinue\n\t\t}\n\t\tif ip[j] > 0 {\n\t\t\tbreak\n\t\t}\n\t}\n}","label":0}
{"text":"private function log($msg, $level = 'info') {\n        static $logFile = null;\n        if (is_null($logFile)) {\n            $logDir = $this->appContext->getRuntimeDir() . '\/log';\n            if (!is_dir($logDir)) {\n                mkdir($logDir, 0755, true);\n            }\n            $logFilePath = \"$logDir\/event-listend.log\";\n            $logFile = fopen($logFilePath, 'a');\n        }\n\n        $time = date('Y-m-d H:i:s');\n        $logData = \"[{$level}] [{$time}] {$msg}\\n\";\n        fwrite($logFile, $logData);\n    }","label":0}
{"text":"function (str) {\n    \/**\n     * Make our own \"punctuation\" character class, because the POSIX-style\n     * [:PUNCT:] is only available in Perl 5.6 or later:\n     *\n     * JavaScript don't have punctuation class neither.\n     *\/\n    var punct_class = '[!\"#\\$\\%\\'()*+,-.\/:;<=>?\\@\\[\\\\\\]\\^_`{|}~]';\n    \/**\n     * Special case if the very first character is a quote\n     * followed by punctuation at a non-word-break. Close the quotes by brute force:\n     *\/\n    str = str.replace(new RegExp(\"^'(?=\" + punct_class + \"B)\"), '&#8217;');\n    str = str.replace(new RegExp(\"^\\\"(?=\" + punct_class + \"B)\"), '&#8221;');\n    \/**\n     * Special case for double sets of quotes, e.g.:\n     *   <p>He said, \"'Quoted' words in a larger quote.\"<\/p>\n     *\/\n    str = str.replace(\/\"'(?=\\w)\/, '&#8220;&#8216;');\n    str = str.replace(\/'\"(?=\\w)\/, '&#8216;&#8220;');\n    \/**\n     * Special case for decade abbreviations (the '80s):\n     *\/\n    str = str.replace(\/'(?=\\d\\d)\/, '&#8217;');\n    var close_class = '[^\\ \\t\\r\\n\\[\\{\\(\\-]';\n    var dec_dashes = '&#8211;|&#8212;';\n    \/**\n     * Get most opening single quotes:\n     * s {\n     *     (\n     *         \\s          |   # a whitespace char, or\n     *         &nbsp;      |   # a non-breaking space entity, or\n     *         --          |   # dashes, or\n     *         &[mn]dash;  |   # named dash entities\n     *         $dec_dashes |   # or decimal entities\n     *         &\\#x201[34];    # or hex\n     *     )\n     *     '                   # the quote\n     *     (?=\\w)              # followed by a word character\n     * } {$1&#8216;}xg;\n     *\/\n    str = str.replace(new RegExp(\"(s|&nbsp;|--|&[mn]dash;|\" + dec_dashes + \"|&#x201[34])'(?=w)\", 'g'), '\\$1&#8216;');\n    \/**\n     * Single closing quotes:\n     * s {\n     *     ($close_class)?\n     *     '\n     *     (?(1)|          # If $1 captured, then do nothing;\n     *       (?=\\s | s\\b)  # otherwise, positive lookahead for a whitespace\n     *     )               # char or an 's' at a word ending position. This\n     *                     # is a special case to handle something like:\n     *                     # \"<i>Custer<\/i>'s Last Stand.\"\n     * } {$1&#8217;}xgi;\n     *\/\n    str = str.replace(new RegExp(\"(\" + close_class + \")'\", 'g'), '\\$1&#8217;');\n    str = str.replace(new RegExp(\"'(?=s|s\\b)\", 'g'), '\\$1&#8217;');\n    \/**\n     * Any remaining single quotes should be opening ones:\n     *\/\n    str = str.replace(\/'\/g, '&#8216;');\n    \/**\n     * Get most opening double quotes:\n     * s {\n     *     (\n     *         \\s          |   # a whitespace char, or\n     *         &nbsp;      |   # a non-breaking space entity, or\n     *         --          |   # dashes, or\n     *         &[mn]dash;  |   # named dash entities\n     *         $dec_dashes |   # or decimal entities\n     *         &\\#x201[34];    # or hex\n     *     )\n     *     \"                   # the quote\n     *     (?=\\w)              # followed by a word character\n     * } {$1&#8220;}xg;\n     *\/\n    str = str.replace(new RegExp(\"(s|&nbsp;|--|&[mn]dash;|\" + dec_dashes + \"|&#x201[34])\\\"(?=w)\", 'g'), '\\$1&#8220;');\n    \/**\n     * Double closing quotes:\n     * s {\n     *     ($close_class)?\n     *     \"\n     *     (?(1)|(?=\\s))   # If $1 captured, then do nothing;\n     *                        # if not, then make sure the next char is whitespace.\n     * } {$1&#8221;}xg;\n     *\/\n    str = str.replace(new RegExp(\"(\" + close_class + \")\\\"\", 'g'), '\\$1&#8221;');\n    str = str.replace(new RegExp(\"'(?=s)\", 'g'), '\\$1&#8221;');\n    \/**\n     * Any remaining quotes should be opening ones.\n     *\/\n    str = str.replace(\/\"\/g, '&#8220;');\n    return str;\n  }","label":0}
{"text":"func (nsr *NamespaceResolver) AddNamespacedName(nn node.Node, nodeName string) {\n\tif nsr.Namespace.Namespace == \"\" {\n\t\tnsr.ResolvedNames[nn] = nodeName\n\t} else {\n\t\tnsr.ResolvedNames[nn] = nsr.Namespace.Namespace + \"\\\\\" + nodeName\n\t}\n}","label":0}
{"text":"func (en *en_DK) MonthNarrow(month time.Month) string {\n\treturn en.monthsNarrow[month]\n}","label":0}
{"text":"def left_outer(self):\n        \n        self.get_collections_data()\n        left_outer_join = self.merge_join_docs(\n            set(self.collections_data['left'].keys()))\n        return left_outer_join","label":0}
{"text":"private function write_header()\n    {\n        $this->write(DataIO::magic());\n        $this->datum_writer->write_data(DataIO::metadata_schema(),\n            $this->metadata, $this->encoder);\n        $this->write($this->sync_marker);\n    }","label":0}
{"text":"public function setName(?string $value) : User\n    {\n\n        if ($this->data['name'] !== $value) {\n            $this->data['name'] = $value;\n            $this->setModified('name');\n        }\n\n        return $this;\n    }","label":0}
{"text":"public function rescale($x, $y) {\r\n\t\tif(is_object($x) && $x instanceof Dimensions) {\r\n\t\t\t$y = $x->height;\r\n\t\t\t$x = $x->width;\r\n\t\t}\r\n\t\t$newImage = imagecreatetruecolor($this->width * $x, $this->height * $y);\r\n\t\t$x = imagesx($newImage);\r\n\t\t$y = imagesy($newImage);\r\n\t\timagecopyresampled($newImage, $this->image, 0, 0, 0, 0, $x, $y, $this->width, $this->height);\r\n\t\t$this->image = $newImage;\r\n\t\t$this->getSize();\r\n\t\treturn $this;\r\n\t}","label":0}
{"text":"def standby(self):\n        \n        register = self.MMA8452Q_Register['CTRL_REG1']\n        self.board.i2c_read_request(self.address, register, 1,\n                                    Constants.I2C_READ | Constants.I2C_END_TX_MASK,\n                                    self.data_val, Constants.CB_TYPE_DIRECT)\n\n\n        ctrl1 = self.wait_for_read_result()\n\n        ctrl1 = (ctrl1[self.data_start]) & ~0x01\n        self.callback_data = []\n\n        self.board.i2c_write_request(self.address, [register, ctrl1])","label":0}
{"text":"func (dt DateTime) Add(duration time.Duration) DateTime {\n\tt := dt.t.Add(toSeconds(duration))\n\treturn DateTime{t: t}\n}","label":0}
{"text":"public static void setContentLength(HttpMessage message, long length) {\n        message.headers().set(HttpHeaderNames.CONTENT_LENGTH, length);\n    }","label":0}
{"text":"public function upload(Request $request)\n    {\n        $validation = app(ValidationService::class)->check([\n            'location' => ['required'],\n        ]);\n\n        if (!$validation['errors']) {\n            $file = $request->file('location');\n            $fileSaved = app(FileService::class)->saveFile($file, 'public\/images', [], true);\n            $fileSaved['name'] = CryptoService::encrypt($fileSaved['name']);\n            $fileSaved['mime'] = $file->getClientMimeType();\n            $fileSaved['size'] = $file->getClientSize();\n            $response = app(CmsResponseService::class)->apiResponse('success', $fileSaved);\n        } else {\n            $response = app(CmsResponseService::class)->apiErrorResponse($validation['errors'], $validation['inputs']);\n        }\n\n        return $response;\n    }","label":0}
{"text":"private void cancelStream(ChannelHandlerContext ctx, CancelClientStreamCommand cmd,\n      ChannelPromise promise) {\n    NettyClientStream.TransportState stream = cmd.stream();\n    Status reason = cmd.reason();\n    if (reason != null) {\n      stream.transportReportStatus(reason, true, new Metadata());\n    }\n    if (!cmd.stream().isNonExistent()) {\n      encoder().writeRstStream(ctx, stream.id(), Http2Error.CANCEL.code(), promise);\n    } else {\n      promise.setSuccess();\n    }\n  }","label":0}
{"text":"def __obj2json(self, obj):\n        \n        return json.dumps(obj, indent=self._indent, sort_keys=self._sort_keys)","label":0}
{"text":"public function instance($data)\n    {\n        $RagnarokUser = new SecUser();\n        $this->userRagnarok = $RagnarokUser->populate($data);\n        return $this->userRagnarok;\n    }","label":0}
{"text":"def finished_or_stopped(self):\n        \n        return (self._status.execution_mode is StateMachineExecutionStatus.STOPPED) or \\\n               (self._status.execution_mode is StateMachineExecutionStatus.FINISHED)","label":0}
{"text":"public function registerHelper(string $name, callable $helper): Handlebars\n    {\n        $this->runtime->addHelper($name, $helper);\n        return $this;\n    }","label":0}
{"text":"public function preCreate(CreateEvent $event)\n    {\n        $message = $event->getObject();\n        $forum = $this->getSubject($message)->getForum();\n\n        \/\/create user if not here\n        $user = $this->om->getRepository(User::class)->findOneBy([\n          'user' => $message->getCreator(),\n          'forum' => $forum,\n        ]);\n\n        if (!$user) {\n            $user = new User();\n            $user->setForum($forum);\n            $user->setUser($message->getCreator());\n        }\n        if (!$this->checkPermission('EDIT', $forum->getResourceNode())) {\n            if (Forum::VALIDATE_PRIOR_ALL === $forum->getValidationMode()) {\n                $message->setModerated(Forum::VALIDATE_PRIOR_ALL);\n            }\n\n            if (Forum::VALIDATE_PRIOR_ONCE === $forum->getValidationMode()) {\n                $message->setModerated($user->getAccess() ? Forum::VALIDATE_NONE : Forum::VALIDATE_PRIOR_ONCE);\n            }\n        } else {\n            $message->setModerated(Forum::VALIDATE_NONE);\n        }\n\n        return $message;\n    }","label":0}
{"text":"function download(source, { verbose, output, onStart, onProgress } = {}) {\n  return new Promise(function(y, n) {\n    if (typeof output === 'undefined') {\n      output = path.basename(url.parse(source).pathname) || 'unknown';\n    }\n\n    \/**\n     * Parse the source url into parts\n     *\/\n    const sourceUrl = url.parse(source);\n\n    \/**\n     * Determine to use https or http request depends on source url\n     *\/\n    let request = null;\n    if (sourceUrl.protocol === 'https:') {\n      request = https.request;\n    } else if (sourceUrl.protocol === 'http:') {\n      request = http.request;\n    } else {\n      throw new Error('protocol should be http or https');\n    }\n\n    \/**\n     * Issue the request\n     *\/\n    const req = request(\n      {\n        method: 'GET',\n        protocol: sourceUrl.protocol,\n        host: sourceUrl.hostname,\n        port: sourceUrl.port,\n        path: sourceUrl.pathname + (sourceUrl.search || '')\n      },\n      function(res) {\n        if (res.statusCode === 200) {\n          const fileSize = Number.isInteger(res.headers['content-length'] - 0)\n            ? parseInt(res.headers['content-length'])\n            : 0;\n          let downloadedSize = 0;\n\n          \/**\n           * Create write stream\n           *\/\n          var writeStream = fs.createWriteStream(output, {\n            flags: 'w+',\n            encoding: 'binary'\n          });\n\n          res.pipe(writeStream);\n\n          \/**\n           * Invoke `onStartCallback` function\n           *\/\n          if (onStart) {\n            onStart(res.headers);\n          }\n\n          res.on('data', function(chunk) {\n            downloadedSize += chunk.length;\n            if (onProgress) {\n              onProgress({\n                fileSize,\n                downloadedSize,\n                percentage: fileSize > 0 ? downloadedSize \/ fileSize : 0\n              });\n            }\n          });\n\n          res.on('error', function(err) {\n            writeStream.end();\n            n(err);\n          });\n\n          writeStream.on('finish', function() {\n            writeStream.end();\n            req.end('finished');\n            y({ headers: res.headers, fileSize });\n          });\n        } else if (\n          res.statusCode === 301 ||\n          res.statusCode === 302 ||\n          res.statusCode === 307\n        ) {\n          const redirectLocation = res.headers.location;\n\n          if (verbose) {\n            console.log('node-wget-promise: Redirected to:', redirectLocation);\n          }\n\n          \/**\n           * Call download function recursively\n           *\/\n          download(redirectLocation, {\n            output,\n            onStart,\n            onProgress\n          })\n            .then(y)\n            .catch(n);\n        } else {\n          n('Server responded with unhandled status: ' + res.statusCode);\n        }\n      }\n    );\n\n    req.end('done');\n    req.on('error', err => n(err));\n  });\n}","label":0}
{"text":"func WithResourceID(id int64) MarshalOption {\n\treturn func(c *MarshalConfig) error {\n\t\tc.ID = id\n\t\treturn nil\n\t}\n}","label":0}
{"text":"function() {\n        index++;\n        var node = gobbleExpression();\n        gobbleSpaces();\n        if (exprICode(index) === CPAREN_CODE) {\n          index++;\n          return node;\n        } else {\n          throwError(\"Unclosed (\", index);\n        }\n      }","label":0}
{"text":"public function saveCache(string $cache_name = null)\n    {\n        $cache_dir = $this->cache_path;\n        $cnt = 0;\n        foreach ($this->repository as $name => &$cache)\n        {\n            if ($cache_name !== null && $name !== $cache_name)\n                continue;\n\n            if (empty($cache['_changed']))\n                continue;\n            \n            ++$cnt;\n            unset($cache['_changed']);\n            $cache_file = $cache_dir . '\/' . $name . '.cache';\n            file_put_contents($cache_file, serialize($cache));\n            Hook::execute('Wedeto.IO.FileCreated', ['path' => $cache_file]);\n        }\n        return $cnt;\n    }","label":0}
{"text":"public function removeAllPlaceholders($parent = null)\n    {\n        if (isset($parent)) {\n            list(, , $template) = $this->getParentPlaceholder($parent);\n        }\n\n        if (!isset($template)) {\n            $template = $this;\n        }\n        if ($template === false) {\n            if ($this->throwException) {\n                if (is_array($parent)) {\n                    $parent = implode('.', $parent);\n                }\n                throw new TemplateException(\"Unknown scope: {$parent}\");\n            }\n            return;\n        }\n        $template->placeholders = [];\n    }","label":0}
{"text":"private double[] hiddenDropoutratios(BackendParams bparms) {\n        double[] hiddenDropoutRatios = (double[]) bparms.get(\"hidden_dropout_ratios\");\n        if(null != hiddenDropoutRatios) {\n            return hiddenDropoutRatios;\n        }\n        int layerNr = ((int[]) bparms.get(\"hidden\")).length;\n        hiddenDropoutRatios = new double[layerNr];\n        for(int i = 0; i < layerNr; i++) {\n            hiddenDropoutRatios[i] = 0d;\n        }\n        return hiddenDropoutRatios;\n    }","label":0}
{"text":"func (e *VirtualMachine) Run(c *fi.Context) error {\n\tglog.V(4).Info(\"VirtualMachine.Run invoked!\")\n\treturn fi.DefaultDeltaRunMethod(e, c)\n}","label":0}
{"text":"func NewEntity(name string, publicKey, privateKey []byte) Entity {\n\treturn Entity{Name: name, PublicKey: publicKey, PrivateKey: privateKey}\n}","label":0}
{"text":"public static function get(\n        array $params,\n        string $key,\n        $default = null\n    ) {\n        if (self::has($params, $key)) {\n            return $params[$key];\n        }\n\n        return $default;\n    }","label":0}
{"text":"public AttributeConfig_5 get_attribute_config_obj_5() {\n        return new AttributeConfig_5(\n                name,\n                writable,\n                data_format,\n                data_type,\n                isMemorized,\n                isSetAtInit,\n                max_dim_x,\n                max_dim_y,\n                description,\n                label,\n                unit,\n                standard_unit,\n                display_unit,\n                format,\n                min_value,\n                max_value,\n                writable_attr_name,\n                level,\n                root_attr_name,\n                enum_label,\n                alarms.getTangoObj(),\n                events.getTangoObj(),\n                extensions,\n                sys_extensions);\n    }","label":0}
{"text":"def service_checks():\n    \"\"\"\"\"\"\n    root = get_root()\n    echo_info(\"Validating all service_checks.json files...\")\n    failed_checks = 0\n    ok_checks = 0\n    for check_name in sorted(os.listdir(root)):\n        service_checks_file = os.path.join(root, check_name, 'service_checks.json')\n\n        if file_exists(service_checks_file):\n            file_failed = False\n            display_queue = []\n\n            try:\n                decoded = json.loads(read_file(service_checks_file).strip(), object_pairs_hook=OrderedDict)\n            except JSONDecodeError as e:\n                failed_checks += 1\n                echo_info(\"{}\/service_checks.json... \".format(check_name), nl=False)\n                echo_failure(\"FAILED\")\n                echo_failure('  invalid json: {}'.format(e))\n                continue\n\n            unique_names = set()\n            unique_checks = set()\n            for service_check in decoded:\n                # attributes are valid\n                attrs = set(service_check)\n                for attr in sorted(attrs - REQUIRED_ATTRIBUTES):\n                    file_failed = True\n                    display_queue.append((echo_failure, '  Attribute `{}` is invalid'.format(attr)))\n                for attr in sorted(REQUIRED_ATTRIBUTES - attrs):\n                    file_failed = True\n                    display_queue.append((echo_failure, '  Attribute `{}` is required'.format(attr)))\n\n                # agent_version\n                agent_version = service_check.get('agent_version')\n                version_parts = parse_version_parts(agent_version)\n                if len(version_parts) != 3:\n                    file_failed = True\n\n                    if not agent_version:\n                        output = '  required non-null string: agent_version'\n                    else:\n                        output = '  invalid `agent_version`: {}'.format(agent_version)\n\n                    display_queue.append((echo_failure, output))\n\n                # check\n                check = service_check.get('check')\n                if not check or not isinstance(check, string_types):\n                    file_failed = True\n                    display_queue.append((echo_failure, '  required non-null string: check'))\n                else:\n                    if check in unique_checks:\n                        file_failed = True\n                        display_queue.append((echo_failure, '  {} is not a unique check'.format(check)))\n                    else:\n                        unique_checks.add(check)\n\n                # description\n                description = service_check.get('description')\n                if not description or not isinstance(description, string_types):\n                    file_failed = True\n                    display_queue.append((echo_failure, '  required non-null string: description'))\n\n                # groups\n                groups = service_check.get('groups')\n                if groups is None or not isinstance(groups, list):\n                    file_failed = True\n                    display_queue.append((echo_failure, '  required list: groups'))\n\n                # integration\n                integration = service_check.get('integration')\n                if integration is None or not isinstance(integration, string_types):\n                    file_failed = True\n                    display_queue.append((echo_failure, '  required non-null string: integration'))\n\n                # name\n                name = service_check.get('name')\n                if not name or not isinstance(name, string_types):\n                    file_failed = True\n                    display_queue.append((echo_failure, '  required non-null string: name'))\n                else:\n                    if name in unique_names:\n                        file_failed = True\n                        display_queue.append((echo_failure, '  {} is not a unique name'.format(name)))\n                    else:\n                        unique_names.add(name)\n\n                # statuses\n                statuses = service_check.get('statuses')\n                if not statuses or not isinstance(statuses, list):\n                    file_failed = True\n                    display_queue.append((echo_failure, '  required non empty list: statuses'))\n\n            if file_failed:\n                failed_checks += 1\n                # Display detailed info if file invalid\n                echo_info(\"{}\/service_checks.json... \".format(check_name), nl=False)\n                echo_failure(\"FAILED\")\n                for display_func, message in display_queue:\n                    display_func(message)\n            else:\n                ok_checks += 1\n\n    if ok_checks:\n        echo_success(\"{} valid files\".format(ok_checks))\n    if failed_checks:\n        echo_failure(\"{} invalid files\".format(failed_checks))\n        abort()","label":0}
{"text":"func (p *Parser) parse() (map[string]string, error) {\n\tp.scan() \/\/ init scannedItems\n\n\tlabelsMap := map[string]string{}\n\tfor {\n\t\ttok, lit := p.lookahead()\n\t\tswitch tok {\n\t\tcase IdentifierToken:\n\t\t\tkey, value, err := p.parseLabel()\n\t\t\tif err != nil {\n\t\t\t\treturn nil, fmt.Errorf(\"unable to parse requirement: %v\", err)\n\t\t\t}\n\t\t\tlabelsMap[key] = value\n\t\t\tt, l := p.consume()\n\t\t\tswitch t {\n\t\t\tcase EndOfStringToken:\n\t\t\t\treturn labelsMap, nil\n\t\t\tcase CommaToken:\n\t\t\t\tt2, l2 := p.lookahead()\n\t\t\t\tif t2 != IdentifierToken {\n\t\t\t\t\treturn nil, fmt.Errorf(\"found '%s', expected: identifier after ','\", l2)\n\t\t\t\t}\n\t\t\tdefault:\n\t\t\t\treturn nil, fmt.Errorf(\"found '%s', expected: ',' or 'end of string'\", l)\n\t\t\t}\n\t\tcase EndOfStringToken:\n\t\t\treturn labelsMap, nil\n\t\tdefault:\n\t\t\treturn nil, fmt.Errorf(\"found '%s', expected: identifier or 'end of string'\", lit)\n\t\t}\n\t}\n}","label":0}
{"text":"function(o) {\n\n        this.html = (typeof o === \"string\") ? o : o.html;\n\n        var el = this.getContentEl();\n        if (el) {\n            el.innerHTML = this.html;\n        }\n\n    }","label":0}
{"text":"public static function mustBeNullableInt($value)\n    {\n        if (is_int($value) === false && $value != null) {\n            throw new MWrongTypeException('\\$value', 'int|null', gettype($value));\n        }\n    }","label":0}
{"text":"public function profile($values)\n    {\n        $profile = [];\n\n        foreach (array_keys($values) as $field) {\n            $profile[$field] = '';\n        }\n\n        return $profile;\n    }","label":0}
{"text":"def apply_compact(graph_path):\n    \n    with tf.Session(config=tf.ConfigProto(allow_soft_placement=True)) as sess:\n        # Note, we just load the graph and do *not* need to initialize anything.\n        with tf.gfile.GFile(graph_path, \"rb\") as f:\n            graph_def = tf.GraphDef()\n            graph_def.ParseFromString(f.read())\n            tf.import_graph_def(graph_def)\n\n        input_img = sess.graph.get_tensor_by_name('import\/input_img:0')\n        prediction_img = sess.graph.get_tensor_by_name('import\/prediction_img:0')\n\n        prediction = sess.run(prediction_img, {input_img: cv2.imread('lena.png')[None, ...]})\n        cv2.imwrite('applied_compact.png', prediction[0])","label":0}
{"text":"func (s *CreateCommentInput) SetDocumentId(v string) *CreateCommentInput {\n\ts.DocumentId = &v\n\treturn s\n}","label":0}
{"text":"public void marshall(StreamFile streamFile, ProtocolMarshaller protocolMarshaller) {\n\n        if (streamFile == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(streamFile.getFileId(), FILEID_BINDING);\n            protocolMarshaller.marshall(streamFile.getS3Location(), S3LOCATION_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }","label":0}
{"text":"public function stageChildren($showAll = false) {\n\t\t$baseClass = $this->class;\n\t\t$staged = $baseClass::get()\n\t\t\t->filter('ParentID', (int)$this->owner->ID)\n\t\t\t->exclude('ID', (int)$this->owner->ID);\n\n\t\t$this->owner->extend(\"augmentStageChildren\", $staged, $showAll);\n\t\treturn $staged;\n\t}","label":0}
{"text":"func getIPTablesRestoreVersionString(exec utilexec.Interface, protocol Protocol) (string, error) {\n\t\/\/ this doesn't access mutable state so we don't need to use the interface \/ runner\n\n\t\/\/ iptables-restore hasn't always had --version, and worse complains\n\t\/\/ about unrecognized commands but doesn't exit when it gets them.\n\t\/\/ Work around that by setting stdin to nothing so it exits immediately.\n\tiptablesRestoreCmd := iptablesRestoreCommand(protocol)\n\tcmd := exec.Command(iptablesRestoreCmd, \"--version\")\n\tcmd.SetStdin(bytes.NewReader([]byte{}))\n\tbytes, err := cmd.CombinedOutput()\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tversionMatcher := regexp.MustCompile(\"v([0-9]+(\\\\.[0-9]+)+)\")\n\tmatch := versionMatcher.FindStringSubmatch(string(bytes))\n\tif match == nil {\n\t\treturn \"\", fmt.Errorf(\"no iptables version found in string: %s\", bytes)\n\t}\n\treturn match[1], nil\n}","label":0}
{"text":"protected TemplateModel get(Object name) {\n        try {\n            return FreeMarkerTL.getEnvironment().getVariable(name.toString());\n        } catch (Exception e) {\n            throw new ViewException(e);\n        }\n    }","label":0}
{"text":"static EntityIdValue fromId(String id, String siteIri) {\n\t\tswitch (guessEntityTypeFromId(id)) {\n\t\t\tcase EntityIdValueImpl.JSON_ENTITY_TYPE_ITEM:\n\t\t\t\treturn new ItemIdValueImpl(id, siteIri);\n\t\t\tcase EntityIdValueImpl.JSON_ENTITY_TYPE_PROPERTY:\n\t\t\t\treturn new PropertyIdValueImpl(id, siteIri);\n\t\t\tcase EntityIdValueImpl.JSON_ENTITY_TYPE_LEXEME:\n\t\t\t\treturn new LexemeIdValueImpl(id, siteIri);\n\t\t\tcase EntityIdValueImpl.JSON_ENTITY_TYPE_FORM:\n\t\t\t\treturn new FormIdValueImpl(id, siteIri);\n\t\t\tcase EntityIdValueImpl.JSON_ENTITY_TYPE_SENSE:\n\t\t\t\treturn new SenseIdValueImpl(id, siteIri);\n\t\t\tdefault:\n\t\t\t\tthrow new IllegalArgumentException(\"Entity id \\\"\" + id + \"\\\" is not supported.\");\n\t\t}\n\t}","label":0}
{"text":"func (s *UnsubscribeFromEventInput) SetEvent(v string) *UnsubscribeFromEventInput {\n\ts.Event = &v\n\treturn s\n}","label":0}
{"text":"function () {\n\t\t\t\/\/ Backbone LocalStorage is adding `id` attribute instantly after creating a model.\n\t\t\t\/\/ This causes our TodoView to render twice. Once after creating a model and once on `id` change.\n\t\t\t\/\/ We want to filter out the second redundant render, which is caused by this `id` change.\n\t\t\t\/\/ It's known Backbone LocalStorage bug, therefore we've to create a workaround.\n\t\t\t\/\/ https:\/\/github.com\/tastejs\/todomvc\/issues\/469\n\t\t\tif (this.model.changed.id !== undefined) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.$el.html(this.template(this.model.toJSON()));\n\t\t\tthis.$el.toggleClass('completed', this.model.get('completed'));\n\t\t\tthis.toggleVisible();\n\t\t\tthis.$input = this.$('.edit');\n\t\t\treturn this;\n\t\t}","label":0}
{"text":"def _convert_bool_array(self, array):\n        \n\n        output = (array.view(numpy.int8) == ord('T')).astype(numpy.bool)\n        return output","label":0}
{"text":"public function getLabel($key, $language)\n    {\n        if (!is_array($this->labels) || !array_key_exists($key, $this->labels)) {\n            return 'n\/a';\n        }\n\n        if (!is_array($this->labels[$key]) || !array_key_exists($language, $this->labels[$key])) {\n            return 'n\/a';\n        }\n\n        return $this->labels[$key][$language];\n    }","label":0}
{"text":"func (l *Route53HealthCheckAlarmIDentifierList) UnmarshalJSON(buf []byte) error {\n\t\/\/ Cloudformation allows a single object when a list of objects is expected\n\titem := Route53HealthCheckAlarmIDentifier{}\n\tif err := json.Unmarshal(buf, &item); err == nil {\n\t\t*l = Route53HealthCheckAlarmIDentifierList{item}\n\t\treturn nil\n\t}\n\tlist := []Route53HealthCheckAlarmIDentifier{}\n\terr := json.Unmarshal(buf, &list)\n\tif err == nil {\n\t\t*l = Route53HealthCheckAlarmIDentifierList(list)\n\t\treturn nil\n\t}\n\treturn err\n}","label":0}
{"text":"public static function validate($structure)\n    {\n        if (12 !== strlen($structure)\n        ) {\n            return false;\n        }\n\n        $sequences = substr($structure, 0, 10);\n        $key = substr($structure, -2);\n        $control = $sequences % 97; \/\/ final control must be a 2-digits:\n        $control = (1 < strlen($control)) ? $control : sprintf('0%d', $control);\n\n        return $key === $control;\n    }","label":0}
{"text":"public final void mCOMMENT() throws RecognitionException {\n        try {\n            int _type = COMMENT;\n            int _channel = DEFAULT_TOKEN_CHANNEL;\n            \/\/ \/home\/victor\/srec\/core\/src\/main\/antlr\/srec.g:155:2: ( '#' ( . )* NEWLINE )\n            \/\/ \/home\/victor\/srec\/core\/src\/main\/antlr\/srec.g:155:4: '#' ( . )* NEWLINE\n            {\n            match('#'); \n            \/\/ \/home\/victor\/srec\/core\/src\/main\/antlr\/srec.g:155:8: ( . )*\n            loop11:\n            do {\n                int alt11=2;\n                int LA11_0 = input.LA(1);\n\n                if ( (LA11_0=='\\r') ) {\n                    alt11=2;\n                }\n                else if ( (LA11_0=='\\n') ) {\n                    alt11=2;\n                }\n                else if ( ((LA11_0>='\\u0000' && LA11_0<='\\t')||(LA11_0>='\\u000B' && LA11_0<='\\f')||(LA11_0>='\\u000E' && LA11_0<='\\uFFFF')) ) {\n                    alt11=1;\n                }\n\n\n                switch (alt11) {\n            \tcase 1 :\n            \t    \/\/ \/home\/victor\/srec\/core\/src\/main\/antlr\/srec.g:155:8: .\n            \t    {\n            \t    matchAny(); \n\n            \t    }\n            \t    break;\n\n            \tdefault :\n            \t    break loop11;\n                }\n            } while (true);\n\n            skip();\n            mNEWLINE(); \n\n            }\n\n            state.type = _type;\n            state.channel = _channel;\n        }\n        finally {\n        }\n    }","label":0}
{"text":"func (f *lightFetcher) processResponse(req fetchRequest, resp fetchResponse) bool {\n\tif uint64(len(resp.headers)) != req.amount || resp.headers[0].Hash() != req.hash {\n\t\treq.peer.Log().Debug(\"Response content mismatch\", \"requested\", len(resp.headers), \"reqfrom\", resp.headers[0], \"delivered\", req.amount, \"delfrom\", req.hash)\n\t\treturn false\n\t}\n\theaders := make([]*types.Header, req.amount)\n\tfor i, header := range resp.headers {\n\t\theaders[int(req.amount)-1-i] = header\n\t}\n\n\tif _, err := f.chain.InsertHeaderChain(headers, 1); err != nil {\n\t\tif err == consensus.ErrFutureBlock {\n\t\t\treturn true\n\t\t}\n\t\tlog.Debug(\"Failed to insert header chain\", \"err\", err)\n\t\treturn false\n\t}\n\ttds := make([]*big.Int, len(headers))\n\tfor i, header := range headers {\n\t\ttd := f.chain.GetTd(header.Hash(), header.Number.Uint64())\n\t\tif td == nil {\n\t\t\tlog.Debug(\"Total difficulty not found for header\", \"index\", i+1, \"number\", header.Number, \"hash\", header.Hash())\n\t\t\treturn false\n\t\t}\n\t\ttds[i] = td\n\t}\n\tf.newHeaders(headers, tds)\n\treturn true\n}","label":0}
{"text":"func sameLanguage(a1, a2 *Automaton) bool {\n\tif a1 == a2 {\n\t\treturn true\n\t}\n\treturn subsetOf(a2, a1) && subsetOf(a1, a2)\n}","label":0}
{"text":"public function process(ServerRequestInterface $request, DelegateInterface $delegate)\n    {\n        $uriPath = $request->getUri()->getPath();\n\n        \/** @var Description $description *\/\n        foreach ($this->repository as $description) {\n\n            $basePath = $description->getBasePath() ? \"{$description->getBasePath()}\/\" : \"\";\n\n            foreach ($description->getPaths() as $path) {\n                $pathPattern = \"$basePath{$path->getPath()}\";\n\n                $parameterNames = [];\n                foreach ($path->getOperations() as $operation) {\n                    foreach ($operation->getParameters() as $parameter) {\n                        if ($parameter->getIn() === Parameter::IN_PATH\n                            && ($schema = $parameter->getSchema()) instanceof ScalarSchema\n                        ) {\n                            $parameterName    = $parameter->getName();\n                            $parameterNames[] = $parameterName;\n                            $typePattern      = $this->typePatternResolver->resolve($schema);\n                            $parameterPattern = \"(?P<$parameterName>$typePattern)(?=(\/|$))\";\n                            $pathPattern      = str_replace('{' . $parameterName . '}', $parameterPattern, $pathPattern);\n                        }\n                    }\n\n                    if (preg_match(\"#^$pathPattern$#\", $uriPath, $matches) > 0) {\n                        if (strtolower($request->getMethod()) !== $operation->getMethod()) {\n                            return Factory::createResponse(405);\n                        }\n\n                        $request = Meta::requestWith($request, $description, $operation, $path);\n\n                        foreach ($parameterNames as $parameterName) {\n                            $request = $request->withAttribute($parameterName, $matches[$parameterName]);\n                        }\n\n                        return $delegate->process($request);\n                    }\n                }\n\n            }\n        }\n\n        return Factory::createResponse(404);\n    }","label":0}
{"text":"func GetScancodeFromName(name string) Scancode {\n\t_name := C.CString(name)\n\tdefer C.free(unsafe.Pointer(_name))\n\treturn (Scancode)(C.SDL_GetScancodeFromName(_name))\n}","label":0}
{"text":"private function _callback()\n    {\n        phpCAS::traceBegin();\n        if (preg_match('\/^PGTIOU-[\\.\\-\\w]+$\/', $_GET['pgtIou'])) {\n            if (preg_match('\/^[PT]GT-[\\.\\-\\w]+$\/', $_GET['pgtId'])) {\n                $this->printHTMLHeader('phpCAS callback');\n                $pgt_iou = $_GET['pgtIou'];\n                $pgt = $_GET['pgtId'];\n                phpCAS::trace('Storing PGT `'.$pgt.'\\' (id=`'.$pgt_iou.'\\')');\n                echo '<p>Storing PGT `'.$pgt.'\\' (id=`'.$pgt_iou.'\\').<\/p>';\n                $this->_storePGT($pgt, $pgt_iou);\n                $this->printHTMLFooter();\n                phpCAS::traceExit(\"Successfull Callback\");\n            } else {\n                phpCAS::error('PGT format invalid' . $_GET['pgtId']);\n                phpCAS::traceExit('PGT format invalid' . $_GET['pgtId']);\n            }\n        } else {\n            phpCAS::error('PGTiou format invalid' . $_GET['pgtIou']);\n            phpCAS::traceExit('PGTiou format invalid' . $_GET['pgtIou']);\n        }\n\n        \/\/ Flush the buffer to prevent from sending anything other then a 200\n        \/\/ Success Status back to the CAS Server. The Exception would normally\n        \/\/ report as a 500 error.\n        flush();\n        throw new CAS_GracefullTerminationException();\n    }","label":0}
{"text":"function (name, cb) {\n    var i, j, cbs=this._callbacks[name], jsTemp=[];\n\n    \/* I'm not sure if this is necessary; in C++, iterating over a\n     * collection and modifying it at the same time is a no-no.\n     *\/\n\n    for (j in cbs) {\n      if (cbs.hasOwnProperty(j) && cbs[j] === cb) {\n        jsTemp.push(j);\n      }\n    }\n\n    for (i=0; i<jsTemp.length; i++) {\n      j = jsTemp[i];\n      delete cbs[j];\n    }\n  }","label":0}
{"text":"public function execute($actions)\n\t{\n\t\tforeach ($actions as $func => $args)\n\t\t{\n\t\t\tif ( ! $this->$func($args))\n\t\t\t\treturn FALSE;\n\t\t}\n\n\t\treturn TRUE;\n\t}","label":0}
{"text":"@Override public void reduce(DeepLearningTask other){\n    if (_localmodel != null && other._localmodel != null && other._localmodel.get_processed_local() > 0 \/\/other DLTask was active (its model_info should be used for averaging)\n        && other._localmodel != _localmodel) \/\/other DLTask worked on a different model_info\n    {\n      \/\/ avoid adding remote model info to unprocessed local data, still random\n      \/\/ (this can happen if we have no chunks on the master node)\n      if (_localmodel.get_processed_local() == 0) {\n        _localmodel = other._localmodel;\n        _chunk_node_count = other._chunk_node_count;\n      } else {\n        _localmodel.add(other._localmodel);\n        _chunk_node_count += other._chunk_node_count;\n      }\n      if (other._localmodel.isUnstable()) _localmodel.setUnstable();\n    }\n  }","label":0}
{"text":"protected void writeComment(String comment) throws IOException {\n        addTabs(2);\n        os.write(BEGINCOMMENT);\n        write(comment);\n        os.write(ENDCOMMENT);\n    }","label":0}
{"text":"@SuppressWarnings(\"unchecked\")\n\tprivate static Enumeration<LogEntry> getLogEntries(LogReaderService lrs)\n\t{\n\t\treturn (Enumeration<LogEntry>)lrs.getLog();\n\t}","label":0}
{"text":"public void installArcFourCiphers(ComponentFactory ciphers) {\n\t\t\n\t\tif (testJCECipher(\"arcfour\", ArcFour.class)) {\n\t\t\tciphers.add(\"arcfour\", ArcFour.class);\n\t\t}\n\n\t\tif (testJCECipher(\"arcfour128\", ArcFour128.class)) {\n\t\t\tciphers.add(\"arcfour128\", ArcFour128.class);\n\t\t}\n\n\t\tif (testJCECipher(\"arcfour256\", ArcFour256.class)) {\n\t\t\tciphers.add(\"arcfour256\", ArcFour256.class);\n\t\t}\n\t}","label":0}
{"text":"def uncompress_archives(file_names, temp_dir):\n    \n    result = []\n    for filename in file_names:\n        if filename.endswith(\".tar\") or filename.endswith(\".tar.gz\") or filename.endswith(\".tar.bz2\"):\n            obj = tarfile.open(filename, \"r\")\n            extracted_file_names = []\n            for j, member in enumerate(obj.getmembers()):\n                obj.extract(member, temp_dir)\n                extracted_filename = os.path.join(temp_dir, obj.getnames()[j])\n                extracted_file_names.append(extracted_filename)\n                archives[extracted_filename] = filename\n            result.extend(extracted_file_names[:])\n        elif filename.endswith(\".zip\"):\n            obj = zipfile.ZipFile(filename)\n            extracted_file_names = []\n            for j, info in enumerate(obj.infolist()):\n                obj.extract(info, path=temp_dir)\n                extracted_filename = os.path.join(temp_dir, obj.namelist()[j])\n                extracted_file_names.append(extracted_filename)\n                archives[extracted_filename] = filename\n            result.extend(extracted_file_names[:])\n        else:\n            result.append(filename)\n\n    return result","label":0}
{"text":"function defineMethods(sugarNamespace, methods, type, args, flags) {\n  forEachProperty(methods, function(method, methodName) {\n    var instanceMethod, staticMethod = method;\n    if (args) {\n      staticMethod = wrapMethodWithArguments(method);\n    }\n    if (flags) {\n      staticMethod.flags = flags;\n    }\n\n    \/\/ A method may define its own custom implementation, so\n    \/\/ make sure that's not the case before creating one.\n    if (type & INSTANCE && !method.instance) {\n      instanceMethod = wrapInstanceMethod(method, args);\n      setProperty(staticMethod, 'instance', instanceMethod);\n    }\n\n    if (type & STATIC) {\n      setProperty(staticMethod, 'static', true);\n    }\n\n    setMethod(sugarNamespace, methodName, staticMethod);\n\n    if (sugarNamespace.active) {\n      \/\/ If the namespace has been activated (.extend has been called),\n      \/\/ then map this method as well.\n      sugarNamespace.extend(methodName);\n    }\n  });\n}","label":0}
{"text":"def generic_insert_with_folder(folder_name, file_name, template_name, args):\n    \n    # First we make sure views are a package instead a file\n    if not os.path.isdir(\n        os.path.join(\n            args['django_application_folder'],\n            folder_name\n        )\n    ):\n        os.mkdir(os.path.join(args['django_application_folder'], folder_name))\n        codecs.open(\n            os.path.join(\n                args['django_application_folder'],\n                folder_name,\n                '__init__.py'\n            ),\n            'w+'\n        )\n\n    view_file = create_or_open(\n        os.path.join(\n            folder_name,\n            '{}.py'.format(file_name)\n        ), \n        '', \n        args\n    )\n    # Load content from template\n    render_template_with_args_in_file(\n        view_file, \n        os.path.join(\n            BASE_TEMPLATES_DIR, \n            template_name\n        ),\n        model_name=args['model_name'],\n        model_prefix=args['model_prefix'],\n        model_name_lower=args['model_name'].lower(),\n        application_name=args['django_application_folder'].split(\"\/\")[-1]\n    )\n    view_file.close()","label":0}
{"text":"def dependencies(self):\n\t\n\t\t\n\t\t\n\t\ttry:\n\t\t\tfor dep_name in self.__prof.dependencies(self.name()):\n\t\t\t\tyield self.__comp_stub_reg.get(dep_name)\n\t\texcept TypeError:\n\t\t\tyield from ()","label":0}
{"text":"def get_random_proxy(self):\n        \"\"\"\"\"\"\n        idx = randint(0, len(self._list) - 1)\n        return self._list[idx]","label":0}
{"text":"def column_to_bq_schema(self):\n        \n        kwargs = {}\n        if len(self.fields) > 0:\n            fields = [field.column_to_bq_schema() for field in self.fields]\n            kwargs = {\"fields\": fields}\n\n        return google.cloud.bigquery.SchemaField(self.name, self.dtype,\n                                                 self.mode, **kwargs)","label":0}
{"text":"def init_logging(log_level=logging.DEBUG):\n    \n    logging.root.handlers = []  # remove possible side-effects from other libs\n    logger = logging.getLogger(\"inginious\")\n    logger.setLevel(log_level)\n    ch = logging.StreamHandler()\n    ch.setLevel(log_level)\n    formatter = logging.Formatter(\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\")\n    ch.setFormatter(formatter)\n    logger.addHandler(ch)","label":0}
{"text":"public function chown($source, $files, $user)\n    {\n        foreach ($files as $file => $value) {\n            if (file_exists($source.$value)) {\n                @chown($file, $user);\n            }\n        }\n    }","label":0}
{"text":"function cleanFunctionName(name) {\n  for (const reg of [\n    objectProperty,\n    arrayProperty,\n    functionProperty,\n    annonymousProperty\n  ]) {\n    const match = reg.exec(name);\n    if (match) {\n      return match[1];\n    }\n  }\n\n  return name;\n}","label":0}
{"text":"def add_message message\n    el = @messages[message.id]\n    return if el.message # we've seen it before\n\n    #puts \"adding: #{message.id}, refs #{message.refs.inspect}\"\n\n    el.message = message\n    oldroot = el.root\n\n    ## link via references:\n    (message.refs + [el.id]).inject(nil) do |prev, ref_id|\n      ref = @messages[ref_id]\n      link prev, ref if prev\n      ref\n    end\n\n    ## link via in-reply-to:\n    message.replytos.each do |ref_id|\n      ref = @messages[ref_id]\n      link ref, el, true\n      break # only do the first one\n    end\n\n    root = el.root\n    key =\n      if thread_by_subj?\n        Message.normalize_subj root.subj\n      else\n        root.id\n      end\n\n    ## check to see if the subject is still the same (in the case\n    ## that we first added a child message with a different\n    ## subject)\n    if root.thread\n      if @threads.member?(key) && @threads[key] != root.thread\n        @threads.delete key\n      end\n    else\n      thread = @threads[key]\n      thread << root\n      root.thread = thread\n    end\n\n    ## last bit\n    @num_messages += 1\n  end","label":0}
{"text":"public function getAgeVerifications()\n    {\n        return isset($this->profileData[self::ATTR_AGE_VERIFICATIONS])\n            ? $this->profileData[self::ATTR_AGE_VERIFICATIONS] : [];\n    }","label":0}
{"text":"def get_exchange(self, vhost, name):\n        \n        vhost = quote(vhost, '')\n        name = quote(name, '')\n        path = Client.urls['exchange_by_name'] % (vhost, name)\n        exch = self._call(path, 'GET')\n        return exch","label":0}
{"text":"function(player, options) {\n  \/**\n   * Stores user-provided settings.\n   * @type {Object}\n   *\/\n  this.settings = {};\n\n  \/**\n   * Content and ads ended listeners passed by the publisher to the plugin.\n   * These will be called when the plugin detects that content *and all\n   * ads* have completed. This differs from the contentEndedListeners in that\n   * contentEndedListeners will fire between content ending and a post-roll\n   * playing, whereas the contentAndAdsEndedListeners will fire after the\n   * post-roll completes.\n   *\/\n  this.contentAndAdsEndedListeners = [];\n\n  \/**\n   * Whether or not we are running on a mobile platform.\n   *\/\n  this.isMobile = (navigator.userAgent.match(\/iPhone\/i) ||\n      navigator.userAgent.match(\/iPad\/i) ||\n      navigator.userAgent.match(\/Android\/i));\n\n  \/**\n   * Whether or not we are running on an iOS platform.\n   *\/\n  this.isIos = (navigator.userAgent.match(\/iPhone\/i) ||\n      navigator.userAgent.match(\/iPad\/i));\n\n  this.initWithSettings(options);\n\n  \/**\n   * Stores contrib-ads default settings.\n   *\/\n  const contribAdsDefaults = {\n    debug: this.settings.debug,\n    timeout: this.settings.timeout,\n    prerollTimeout: this.settings.prerollTimeout,\n  };\n  const adsPluginSettings = this.extend(\n      {}, contribAdsDefaults, options.contribAdsSettings || {});\n\n  this.playerWrapper = new PlayerWrapper(player, adsPluginSettings, this);\n  this.adUi = new AdUi(this);\n  this.sdkImpl = new SdkImpl(this);\n}","label":0}
{"text":"def create_search_schema(self, schema, content):\n        \n        if not self.yz_wm_schema:\n            raise NotImplementedError(\"Search 2.0 administration is not \"\n                                      \"supported for this version\")\n\n        url = self.search_schema_path(schema)\n        headers = {'Content-Type': 'application\/xml'}\n\n        # Run the request...\n        status, header, body = self._request('PUT', url, headers, content)\n\n        if status != 204:\n            raise RiakError('Error creating Search 2.0 schema.')\n        return True","label":0}
{"text":"async function generateCriticalCssWrapped (\n  options,\n  { forceTryRestartBrowser } = {}\n) {\n  const width = parseInt(options.width || DEFAULT_VIEWPORT_WIDTH, 10)\n  const height = parseInt(options.height || DEFAULT_VIEWPORT_HEIGHT, 10)\n  const timeoutWait = options.timeout || DEFAULT_TIMEOUT\n  \/\/ Merge properties with default ones\n  const propertiesToRemove =\n    options.propertiesToRemove || DEFAULT_PROPERTIES_TO_REMOVE\n\n  \/\/ always forceInclude '*', 'html', and 'body' selectors;\n  \/\/ yields slight performance improvement\n  const forceInclude = prepareForceIncludeForSerialization(\n    ['*', '*:before', '*:after', 'html', 'body'].concat(\n      options.forceInclude || []\n    )\n  )\n\n  \/\/ promise so we can handle errors and reject,\n  \/\/ instead of throwing what would otherwise be uncaught errors in node process\n  return new Promise(async (resolve, reject) => {\n    debuglog('call generateCriticalCssWrapped')\n    let formattedCss\n    let pagePromise\n    try {\n      pagePromise = getOpenBrowserPage()\n\n      formattedCss = await generateCriticalCss({\n        pagePromise,\n        url: options.url,\n        cssString: options.cssString,\n        width,\n        height,\n        forceInclude,\n        strict: options.strict,\n        userAgent: options.userAgent || DEFAULT_USER_AGENT,\n        renderWaitTime: options.renderWaitTime || DEFAULT_RENDER_WAIT_TIMEOUT,\n        timeout: timeoutWait,\n        pageLoadSkipTimeout: options.pageLoadSkipTimeout,\n        blockJSRequests:\n          typeof options.blockJSRequests !== 'undefined'\n            ? options.blockJSRequests\n            : DEFAULT_BLOCK_JS_REQUESTS,\n        customPageHeaders: options.customPageHeaders,\n        cookies: options.cookies,\n        screenshots: options.screenshots,\n        keepLargerMediaQueries: options.keepLargerMediaQueries,\n        maxElementsToCheckPerSelector: options.maxElementsToCheckPerSelector,\n        \/\/ postformatting\n        propertiesToRemove,\n        maxEmbeddedBase64Length:\n          typeof options.maxEmbeddedBase64Length === 'number'\n            ? options.maxEmbeddedBase64Length\n            : DEFAULT_MAX_EMBEDDED_BASE64_LENGTH,\n        debuglog,\n        unstableKeepBrowserAlive: options.unstableKeepBrowserAlive,\n        allowedResponseCode: options.allowedResponseCode,\n        unstableKeepOpenPages:\n          options.unstableKeepOpenPages ||\n          _UNSTABLE_KEEP_ALIVE_MAX_KEPT_OPEN_PAGES\n      })\n    } catch (e) {\n      const page = await pagePromise.then(({ page }) => page)\n      await closeBrowserPage({\n        page,\n        error: e,\n        unstableKeepBrowserAlive: options.unstableKeepBrowserAlive,\n        unstableKeepOpenPages: options.unstableKeepOpenPages\n      })\n\n      const runningBrowswer = await browserIsRunning()\n      if (!forceTryRestartBrowser && !runningBrowswer) {\n        debuglog(\n          'Browser unexpecedly not opened - crashed? ' +\n            '\\nurl: ' +\n            options.url +\n            '\\ncss length: ' +\n            options.cssString.length\n        )\n        try {\n          await restartBrowser({\n            width,\n            height,\n            getBrowser: options.puppeteer && options.puppeteer.getBrowser\n          })\n          \/\/ retry\n          resolve(\n            generateCriticalCssWrapped(options, {\n              forceTryRestartBrowser: true\n            })\n          )\n        } catch (e) {\n          reject(e)\n        }\n        return\n      }\n      reject(e)\n      return\n    }\n\n    const page = await pagePromise.then(({ page }) => page)\n    await closeBrowserPage({\n      page,\n      unstableKeepBrowserAlive: options.unstableKeepBrowserAlive,\n      unstableKeepOpenPages: options.unstableKeepOpenPages\n    })\n\n    debuglog('generateCriticalCss done')\n    if (formattedCss.trim().length === 0) {\n      \/\/ TODO: would be good to surface this to user, always\n      debuglog('Note: Generated critical css was empty for URL: ' + options.url)\n      resolve('')\n      return\n    }\n\n    resolve(formattedCss)\n  })\n}","label":0}
{"text":"public function getHeaders()\n    {\n        if ($this->_headers === null) {\n            $this->_headers = new HeaderCollection();\n            foreach ($this->swooleRequest->server as $name => $value) {\n                if (strncmp($name, 'HTTP_', 5) === 0) {\n                    $name = str_replace(' ', '-', ucwords(strtolower(str_replace('_', ' ', substr($name, 5)))));\n                    $this->_headers->add($name, $value);\n                }\n            }\n        }\n        return $this->_headers;\n    }","label":0}
{"text":"def with_file(name, *args)\n      logger.debug \"with_file(#{name.inspect}, #{args.inspect})\"\n      result = args.inject(config_for(name)) { |v, i|\n        logger.debug \"v = #{v.inspect}, i = #{i.inspect}\"\n        case v\n          when Hash\n            v[i.to_s]\n          when Array\n            i.is_a?(Integer) ? v[i] : nil\n          else\n            nil\n        end\n      }\n      logger.debug \"with_file(#{name.inspect}, #{args.inspect}) => #{result.inspect}\"\n      result\n    end","label":0}
{"text":"@Override\n\tpublic boolean validate(final Problems problems, final String compName, final String model) {\n\t\tfinal char[] c = model.toCharArray();\n\t\tboolean result = true;\n\t\tString curr;\n\t\tfor (final char element : c) {\n\t\t\tcurr = new String(new char[] { element });\n\t\t\ttry {\n\t\t\t\tfinal String nue = new String(curr.getBytes(this.charsetName));\n\t\t\t\tresult = element == nue.charAt(0);\n\t\t\t\tif (!result) {\n\t\t\t\t\tproblems.add(\n\t\t\t\t\t\t\tValidationBundle.getMessage(EncodableInCharsetValidator.class, \"INVALID_CHARACTER\", compName, curr, this.charsetName)); \/\/ NOI18N\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} catch (final UnsupportedEncodingException ex) {\n\t\t\t\t\/\/ Already tested in constructor\n\t\t\t\tthrow new AssertionError(ex);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}","label":0}
{"text":"public function addWorker(Worker $worker): bool\n    {\n        if (!$this->running) {\n            return false;\n        }\n        $this->running = 0;\n        $this->workerPool->add($worker);\n\n        return true;\n    }","label":0}
{"text":"public function addStyle($styles)\n    {\n        foreach ((array) $styles as $style) {\n            $this->escapeSequence .= Chalk::getEscapeSequence($style);\n        }\n    }","label":0}
{"text":"func (cli *Client) NetworkInspectWithRaw(ctx context.Context, networkID string) (types.NetworkResource, []byte, error) {\n\tvar networkResource types.NetworkResource\n\tresp, err := cli.get(ctx, \"\/networks\/\"+networkID, nil, nil)\n\tif err != nil {\n\t\tif resp.statusCode == http.StatusNotFound {\n\t\t\treturn networkResource, nil, networkNotFoundError{networkID}\n\t\t}\n\t\treturn networkResource, nil, err\n\t}\n\tdefer ensureReaderClosed(resp)\n\n\tbody, err := ioutil.ReadAll(resp.body)\n\tif err != nil {\n\t\treturn networkResource, nil, err\n\t}\n\trdr := bytes.NewReader(body)\n\terr = json.NewDecoder(rdr).Decode(&networkResource)\n\treturn networkResource, body, err\n}","label":0}
{"text":"public EEnum getIfcTransportElementTypeEnum() {\r\n\t\tif (ifcTransportElementTypeEnumEEnum == null) {\r\n\t\t\tifcTransportElementTypeEnumEEnum = (EEnum) EPackage.Registry.INSTANCE.getEPackage(Ifc2x3tc1Package.eNS_URI)\r\n\t\t\t\t\t.getEClassifiers().get(920);\r\n\t\t}\r\n\t\treturn ifcTransportElementTypeEnumEEnum;\r\n\t}","label":0}
{"text":"def formula_1980(household, period, parameters):\n        '''\n        \n        '''\n        return household('rent', period) * parameters(period).benefits.housing_allowance","label":0}
{"text":"func (s *DvbSubDestinationSettings) SetFontScript(v string) *DvbSubDestinationSettings {\n\ts.FontScript = &v\n\treturn s\n}","label":0}
{"text":"function(plugins, pluginBase){\n        var _this = this;\n        \n        if (typeof pluginBase === 'string') {\n            _pluginBase = pluginBase;\n        }\n        plugins.forEach(function(plugin, index){\n            var name;\n            var path;\n            if (typeof plugin === 'string'){\n                name = plugin;\n            } else {\n                name = plugin.name;\n                path = plugin.path;\n            }\n            _this.register(name, plugin);\n        });\n    }","label":0}
{"text":"public static SqlInfo getSqlInfoSimply(String nsAtZealotId, Object paramObj) {\n        String[] arr = nsAtZealotId.split(ZealotConst.SP_AT);\n        if (arr.length != LEN) {\n            throw new  ValidFailException(\"nsAtZealotId\u53c2\u6570\u7684\u503c\u5fc5\u987b\u662fxml\u6587\u4ef6\u4e2d\u7684 nameSpace + '@@' + zealotId \u8282\u70b9\u7684\u503c\uff0c\"\n                    + \"\u5982:'student@@queryStudentById'.\u5176\u4e2dstudent\u4e3anameSpace, queryStudentById\u4e3aXML\u6587\u4ef6\u4e2dSQL\u7684zealotId.\");\n        }\n        return getSqlInfo(arr[0], arr[1], paramObj);\n    }","label":0}
{"text":"public String updateContextAndGetFavoriteUrl(CmsObject cms) throws CmsException {\n\n        CmsResourceFilter filter = CmsResourceFilter.IGNORE_EXPIRATION;\n        CmsProject project = null;\n        switch (getType()) {\n            case explorerFolder:\n                CmsResource folder = cms.readResource(getStructureId(), filter);\n                project = cms.readProject(getProjectId());\n                cms.getRequestContext().setSiteRoot(getSiteRoot());\n                cms.getRequestContext().setCurrentProject(project);\n                String explorerLink = CmsVaadinUtils.getWorkplaceLink()\n                    + \"#!\"\n                    + CmsFileExplorerConfiguration.APP_ID\n                    + \"\/\"\n                    + getProjectId()\n                    + \"!!\"\n                    + getSiteRoot()\n                    + \"!!\"\n                    + cms.getSitePath(folder);\n                return explorerLink;\n            case page:\n                project = cms.readProject(getProjectId());\n                CmsResource target = cms.readResource(getStructureId(), filter);\n                CmsResource detailContent = null;\n                String link = null;\n                cms.getRequestContext().setCurrentProject(project);\n                cms.getRequestContext().setSiteRoot(getSiteRoot());\n                if (getDetailId() != null) {\n                    detailContent = cms.readResource(getDetailId());\n                    link = OpenCms.getLinkManager().substituteLinkForUnknownTarget(\n                        cms,\n                        cms.getSitePath(detailContent),\n                        cms.getSitePath(target),\n                        false);\n                } else {\n                    link = OpenCms.getLinkManager().substituteLink(cms, target);\n                }\n                return link;\n            default:\n                return null;\n        }\n    }","label":0}
{"text":"def temperatures(self):\n        \"\"\"\"\"\"\n        self.location.status()\n\n        if self.hotwater:\n            yield {\n                'thermostat': 'DOMESTIC_HOT_WATER',\n                'id': self.hotwater.dhwId,\n                'name': '',\n                'temp': self.hotwater.temperatureStatus['temperature'],          # pylint: disable=no-member\n                'setpoint': ''\n            }\n\n        for zone in self._zones:\n            zone_info = {\n                'thermostat': 'EMEA_ZONE',\n                'id': zone.zoneId,\n                'name': zone.name,\n                'temp': None,\n                'setpoint': zone.setpointStatus['targetHeatTemperature']\n            }\n\n            if zone.temperatureStatus['isAvailable']:\n                zone_info['temp'] = zone.temperatureStatus['temperature']\n            yield zone_info","label":0}
{"text":"def get(self, object_path, interfaces_and_properties=None):\n        \"\"\"\"\"\"\n        # check this before creating the DBus object for more\n        # controlled behaviour:\n        if not interfaces_and_properties:\n            interfaces_and_properties = self._objects.get(object_path)\n            if not interfaces_and_properties:\n                return None\n        property_hub = PropertyHub(interfaces_and_properties)\n        method_hub = MethodHub(\n            self._proxy.object.bus.get_object(object_path))\n        return Device(self, object_path, property_hub, method_hub)","label":0}
{"text":"func (w *terminalStream) SetReadDeadline(t time.Time) error {\n\treturn w.ws.SetReadDeadline(t)\n}","label":0}
{"text":"def project_run_path(cls, project, transfer_config, run):\n        \"\"\"\"\"\"\n        return google.api_core.path_template.expand(\n            \"projects\/{project}\/transferConfigs\/{transfer_config}\/runs\/{run}\",\n            project=project,\n            transfer_config=transfer_config,\n            run=run,\n        )","label":0}
{"text":"def split_lines(source, maxline=79):\n    \n    result = []\n    extend = result.extend\n    append = result.append\n    line = []\n    multiline = False\n    count = 0\n    find = str.find\n    for item in source:\n        index = find(item, '\\n')\n        if index:\n            line.append(item)\n            multiline = index > 0\n            count += len(item)\n        else:\n            if line:\n                if count <= maxline or multiline:\n                    extend(line)\n                else:\n                    wrap_line(line, maxline, result)\n                count = 0\n                multiline = False\n                line = []\n            append(item)\n    return result","label":0}
{"text":"def to_json(self):\n        \n        self.logger.debug(\"Returning json info\")\n        individual_info = {\n            'family_id': self.family,\n            'id':self.individual_id, \n            'sex':str(self.sex), \n            'phenotype': str(self.phenotype), \n            'mother': self.mother, \n            'father': self.father,\n            'extra_info': self.extra_info\n        }\n        return individual_info","label":0}
{"text":"func NewCreateFileRequestArgs(Title string, Destination string) *CreateFileRequestArgs {\n\ts := new(CreateFileRequestArgs)\n\ts.Title = Title\n\ts.Destination = Destination\n\ts.Open = true\n\treturn s\n}","label":0}
{"text":"public function gc($past)\n    {\n        $query = $this->db->getQuery(true);\n        $query->delete($this->db->quoteName($this->options['table']))\n            ->where($this->db->quoteName($this->options['time_col']) . ' < ' . $this->db->quote((int) $past));\n\n        \/\/ Remove expired sessions from the database.\n        $this->db->setQuery($query);\n\n        return (bool) $this->db->execute();\n    }","label":0}
{"text":"def GetUsedMemory(self):\n    \n    try:\n      memory_info = self._process.memory_info()\n    except psutil.NoSuchProcess:\n      return None\n\n    # Psutil will return different memory information depending on what is\n    # available in that platform.\n    memory_data = getattr(memory_info, 'data', 0)\n    memory_shared = getattr(memory_info, 'shared', 0)\n\n    return memory_data + memory_shared","label":0}
{"text":"private void addQueryParams(final Request request) {\n        if (absoluteDateCreated != null) {\n            request.addQueryParam(\"DateCreated\", absoluteDateCreated.toString(Request.QUERY_STRING_DATE_TIME_FORMAT));\n        } else if (rangeDateCreated != null) {\n            request.addQueryDateTimeRange(\"DateCreated\", rangeDateCreated);\n        }\n\n        if (getPageSize() != null) {\n            request.addQueryParam(\"PageSize\", Integer.toString(getPageSize()));\n        }\n    }","label":0}
{"text":"private void computeSolutions(DMatrix4x4 Q) {\n\t\tDMatrixRMaj w_i = new DMatrixRMaj(3,3);\n\n\t\tfor (int i = 0; i < cameras.size; i++) {\n\t\t\tcomputeW(cameras.get(i),Q,w_i);\n\t\t\tIntrinsic calib = solveForCalibration(w_i);\n\t\t\tif( sanityCheck(calib)) {\n\t\t\t\tsolutions.add(calib);\n\t\t\t}\n\t\t}\n\t}","label":0}
{"text":"def ptconcat(output_file, input_files, overwrite=False):\n    \"\"\"\"\"\"\n    filt = tb.Filters(\n        complevel=5, shuffle=True, fletcher32=True, complib='zlib'\n    )\n    out_tabs = {}\n    dt_file = input_files[0]\n    log.info(\"Reading data struct '%s'...\" % dt_file)\n    h5struc = tb.open_file(dt_file, 'r')\n    log.info(\"Opening output file '%s'...\" % output_file)\n    if overwrite:\n        outmode = 'w'\n    else:\n        outmode = 'a'\n    h5out = tb.open_file(output_file, outmode)\n\n    for node in h5struc.walk_nodes('\/', classname='Table'):\n        path = node._v_pathname\n        log.debug(path)\n        dtype = node.dtype\n        p, n = os.path.split(path)\n        out_tabs[path] = h5out.create_table(\n            p, n, description=dtype, filters=filt, createparents=True\n        )\n    h5struc.close()\n    for fname in input_files:\n        log.info('Reading %s...' % fname)\n        h5 = tb.open_file(fname)\n        for path, out in out_tabs.items():\n            tab = h5.get_node(path)\n            out.append(tab[:])\n        h5.close()\n    h5out.close()","label":0}
{"text":"func (b *UpdateBuilder) Where(w ...Cmp) *UpdateBuilder {\n\tb.where = append(b.where, w...)\n\treturn b\n}","label":0}
{"text":"public static function safePattern($pattern)\n    {\n        $delimiter = \\mb_substr($pattern, 0, 1);\n        $options = \\mb_substr(\n            \\mb_strrchr($pattern, $delimiter, false),\n            \\mb_strlen($delimiter)\n        );\n\n        if (false === \\strpos($options, 'u')) {\n            $pattern .= 'u';\n        }\n\n        return $pattern;\n    }","label":0}
{"text":"def getOffsetFromRva(self, rva):\n        \n        offset = -1\n        s = self.getSectionByRva(rva)\n        \n        if s != offset:\n            offset = (rva - self.sectionHeaders[s].virtualAddress.value) + self.sectionHeaders[s].pointerToRawData.value\n        else:\n            offset = rva\n        \n        return offset","label":0}
{"text":"def as_tuple(ireq):\n    \n\n    if not is_pinned_requirement(ireq):\n        raise TypeError(\"Expected a pinned InstallRequirement, got {}\".format(ireq))\n\n    name = key_from_req(ireq.req)\n    version = first(ireq.specifier._specs)._spec[1]\n    extras = tuple(sorted(ireq.extras))\n    return name, version, extras","label":0}
{"text":"func (pds *peerDistanceSorter) appendPeer(p peer.ID) {\n\tpds.peers = append(pds.peers, peerDistance{\n\t\tp:        p,\n\t\tdistance: xor(pds.target, ConvertPeerID(p)),\n\t})\n}","label":0}
{"text":"protected function inactiveUsers(LoginForm &$loginForm)\n    {\n        if (UsersModule::module()->allowLoginInactiveAccounts === false) {\n            return [];\n        }\n        return [\n            'username',\n            function ($attribute) use (&$loginForm) {\n                if ($loginForm->user !== null && $loginForm->user->is_active === false) {\n                    $loginForm->addError($attribute, Yii::t('users', 'You need to confirm your email address'));\n                }\n            }\n        ];\n    }","label":0}
{"text":"public function createService(ServiceLocatorInterface $serviceLocator)\n    {\n        $appServiceLocator = $serviceLocator;\n        if ($serviceLocator instanceof AbstractPluginManager) {\n            $appServiceLocator = $serviceLocator->getServiceLocator();\n        }\n\n        \/** @var ModuleOptionsPluginManagerInterface $moduleOptionsPluginManager *\/\n        $moduleOptionsPluginManager = $appServiceLocator->get(ModuleOptionsPluginManagerInterface::class);\n\n\n        $creationOptions = $this->getCreationOptions();\n        $options = is_array($creationOptions) ? $creationOptions : [];\n\n        $contextMap = array_key_exists('contextMap', $options) ? $options['contextMap'] : [];\n\n        $className = array_key_exists('className', $options) ? (string)$options['className'] : static::$defaultTargetClassName;\n\n        $r = new ReflectionClass($className);\n        $resolverByModuleContextMap = $r->newInstance($moduleOptionsPluginManager);\n\n        if (!$resolverByModuleContextMap instanceof static::$defaultTargetClassName) {\n            $errMsg = sprintf('ResolverByModuleContextMap not implements: %s', static::$defaultTargetClassName);\n            throw new Exception\\RuntimeException($errMsg);\n        }\n\n        $resolverByModuleContextMap->setContextMap($contextMap);\n\n        return $resolverByModuleContextMap;\n    }","label":0}
{"text":"func (s *Command) SetStatusDetails(v string) *Command {\n\ts.StatusDetails = &v\n\treturn s\n}","label":0}
{"text":"public function channelGetByName($name)\n  {\n    foreach($this->channelList() as $channel)\n    {\n      if($channel[\"channel_name\"] == $name) return $channel;\n    }\n\n    throw new Exception(\"invalid channelID\", 0x300);\n  }","label":0}
{"text":"func (me *Logger) SetPrefix(prefix string) {\n\tme.prefix = prefix\n\tme.logger.SetPrefix(prefix)\n}","label":0}
{"text":"private void discardIdleConnections() {\n        List<Connection<CL>> connections = Lists.newArrayList();\n        availableConnections.drainTo(connections);\n        activeCount.addAndGet(-connections.size());\n\n        for (Connection<CL> connection : connections) {\n            try {\n                closedConnections.incrementAndGet();\n                connection.close(); \/\/ This is usually an async operation\n            }\n            catch (Throwable t) {\n                \/\/ TODO\n            }\n        }\n    }","label":0}
{"text":"public static WxamplinkgetResult wxamplinkget(String access_token){\r\n\t\tHttpUriRequest httpUriRequest = RequestBuilder.post()\r\n\t\t\t\t.setHeader(jsonHeader)\r\n\t\t\t\t.setUri(BASE_URI+\"\/cgi-bin\/wxopen\/wxamplinkget\")\r\n\t\t\t\t.addParameter(PARAM_ACCESS_TOKEN, API.accessToken(access_token))\r\n\t\t\t\t.build();\r\n\t\treturn LocalHttpClient.executeJsonResult(httpUriRequest,WxamplinkgetResult.class);\r\n\t}","label":0}
{"text":"public static void aromatizeMolecule(IAtomContainer mol) {\n\n        \/\/ need to find rings and aromaticity again since added H's\n\n        IRingSet ringSet = null;\n        try {\n            AllRingsFinder arf = new AllRingsFinder();\n            ringSet = arf.findAllRings(mol);\n\n            \/\/ SSSRFinder s = new SSSRFinder(atomContainer);\n            \/\/ srs = s.findEssentialRings();\n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n\n        try {\n            \/\/ figure out which atoms are in aromatic rings:\n            \/\/            printAtoms(atomContainer);\n            SMSDNormalizer.percieveAtomTypesAndConfigureAtoms(mol);\n            \/\/            printAtoms(atomContainer);\n            Aromaticity.cdkLegacy().apply(mol);\n            \/\/            printAtoms(atomContainer);\n            \/\/ figure out which rings are aromatic:\n            RingSetManipulator.markAromaticRings(ringSet);\n            \/\/            printAtoms(atomContainer);\n            \/\/ figure out which simple (non cycles) rings are aromatic:\n            \/\/ HueckelAromaticityDetector.detectAromaticity(atomContainer, srs);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n\n        \/\/ only atoms in 6 membered rings are aromatic\n        \/\/ determine largest ring that each atom is atom part of\n\n        for (int i = 0; i <= mol.getAtomCount() - 1; i++) {\n\n            mol.getAtom(i).setFlag(CDKConstants.ISAROMATIC, false);\n\n            jloop: for (int j = 0; j <= ringSet.getAtomContainerCount() - 1; j++) {\n                \/\/logger.debug(i+\"\\t\"+j);\n                IRing ring = (IRing) ringSet.getAtomContainer(j);\n                if (!ring.getFlag(CDKConstants.ISAROMATIC)) {\n                    continue jloop;\n                }\n\n                boolean haveatom = ring.contains(mol.getAtom(i));\n\n                \/\/logger.debug(\"haveatom=\"+haveatom);\n\n                if (haveatom && ring.getAtomCount() == 6) {\n                    mol.getAtom(i).setFlag(CDKConstants.ISAROMATIC, true);\n                }\n            }\n        }\n    }","label":0}
{"text":"func (e *manualEnviron) ControllerInstances(ctx context.ProviderCallContext, controllerUUID string) ([]instance.Id, error) {\n\tif !isRunningController() {\n\t\t\/\/ Not running inside the controller, so we must\n\t\t\/\/ verify the host.\n\t\tif err := e.verifyBootstrapHost(); err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\treturn []instance.Id{BootstrapInstanceId}, nil\n}","label":0}
{"text":"protected function deleteDashboard()\n    {\n        $this->controlAccess('dashboard_edit');\n\n        if ($this->dashboard->delete($this->data_dashboard['dashboard_id'])) {\n            $message = $this->text('Your dashboard has been reset');\n            $this->redirect('', $message, 'success');\n        }\n\n        $this->redirect('admin', $this->text('Your dashboard has not been reset'), 'warning');\n    }","label":0}
{"text":"def protocol_tree_items(self):\n        \n        result = {}\n        for i, group in enumerate(self.rootItem.children):\n            result[i] = [child for child in group.children]\n\n        return result","label":0}
{"text":"private function _getUrl()\n    {\n        return new Url(sprintf(\n            '%s:\/\/%s:%d%s',\n            $this->_getScheme(),\n            $this->_server['SERVER_NAME'],\n            $this->_getPort(),\n            $this->_uriRelativeToHost($this->_server['REQUEST_URI'])\n        ));\n    }","label":0}
{"text":"public function select2Submitter(ServerRequestInterface $request, Tree $tree): ResponseInterface\n    {\n        $page  = (int) $request->get('page');\n        $query = $request->get('q', '');\n\n        \/\/ Fetch one more row than we need, so we can know if more rows exist.\n        $offset = $page * self::RESULTS_PER_PAGE;\n        $limit  = self::RESULTS_PER_PAGE + 1;\n\n        $results = $this->search_service\n            ->searchSubmitters([$tree], [$query], $offset, $limit)\n            ->map(static function (GedcomRecord $submitter): array {\n                return [\n                    'id'    => $submitter->xref(),\n                    'text'  => view('selects\/submitter', ['submitter' => $submitter]),\n                    'title' => ' ',\n                ];\n            });\n\n        return response([\n            'results'    => $results->slice(0, self::RESULTS_PER_PAGE)->all(),\n            'pagination' => [\n                'more' => $results->count() > self::RESULTS_PER_PAGE,\n            ],\n        ]);\n    }","label":0}
{"text":"func (s *store) preKeysFilePath(id uint32) string {\n\treturn filepath.Join(s.preKeysDir, idToFilename(id))\n}","label":0}
{"text":"public GeometryColumns getGeometryColumns() {\n\t\tGeometryColumns result = null;\n\t\tif (geometryColumns.size() > 1) {\n\t\t\t\/\/ This shouldn't happen with the unique table name constraint on\n\t\t\t\/\/ geometry columns\n\t\t\tthrow new GeoPackageException(\n\t\t\t\t\t\"Unexpected state. More than one GeometryColumn has a foreign key to the Contents. Count: \"\n\t\t\t\t\t\t\t+ geometryColumns.size());\n\t\t} else if (geometryColumns.size() == 1) {\n\t\t\tCloseableIterator<GeometryColumns> iterator = geometryColumns\n\t\t\t\t\t.closeableIterator();\n\t\t\ttry {\n\t\t\t\tresult = iterator.next();\n\t\t\t} finally {\n\t\t\t\ttry {\n\t\t\t\t\titerator.close();\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\tthrow new GeoPackageException(\n\t\t\t\t\t\t\t\"Failed to close the Geometry Columns iterator\", e);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}","label":0}
{"text":"public function savePluginConfigToXml($parameters)\n    {\n        $xmlValueFormatted = '';\n\n        \/\/ Something has been saved, let's generate an XML for DB\n        $xmlValueFormatted = \"\\t\" . '<' . $this->pluginXmlDbKey . ' id=\"' . $parameters['melisPluginId'] . '\">' .\n            $xmlValueFormatted .\n            \"\\t\" . '<\/' . $this->pluginXmlDbKey . '>' . \"\\n\";\n\n        return $xmlValueFormatted;\n    }","label":0}
{"text":"protected Stream<Branch> getSVNConfiguredBranches() {\n        return structureService.getProjectList()\n                .stream()\n                \/\/ ...which have a SVN configuration\n                .filter(project -> propertyService.hasProperty(project, SVNProjectConfigurationPropertyType.class))\n                \/\/ ...gets all their branches\n                .flatMap(project -> structureService.getBranchesForProject(project.getId()).stream())\n                \/\/ ...which have a SVN configuration\n                .filter(branch -> propertyService.hasProperty(branch, SVNBranchConfigurationPropertyType.class));\n    }","label":0}
{"text":"func (fw *FirewallSSO) logger(ctx context.Context) log15.Logger {\n\tctx = log.AddToLogContext(ctx, \"firewall-id\", fw.PfconfigHashNS)\n\treturn log.LoggerWContext(ctx)\n}","label":0}
{"text":"public function flushPartialAction() {\n        $postData = $this->getRequest()->getPost();\n        if ( ! isset($postData['pattern'])) {\n            $this->_getSession()->addError($this->__('Missing URL post data'));\n        } else {\n            $pattern = $postData['pattern'];\n            Mage::dispatchEvent('turpentine_varnish_flush_partial',\n                array('pattern' => $pattern));\n            $result = Mage::getModel('turpentine\/varnish_admin')\n                ->flushUrl($pattern);\n            foreach ($result as $name => $value) {\n                if ($value === true) {\n                    $this->_getSession()\n                        ->addSuccess(Mage::helper('turpentine\/data')\n                            ->__('Flushed matching URLs for: ').$name);\n                } else {\n                    $this->_getSession()\n                        ->addError(Mage::helper('turpentine\/data')\n                            ->__('Error flushing matching URLs on: ').$name);\n                }\n            }\n        }\n        $this->_redirect('*\/cache');\n    }","label":0}
{"text":"def to_dict(self):\n        \"\"\"\"\"\"\n        out = {}\n\n        fields = self.__class__.search_objects.mapping.properties.properties\n\n        for key in fields:\n            # TODO: What if we've mapped the property to a different name? Will we allow that?\n\n            attribute = getattr(self, key)\n\n            field = fields[key]\n\n            # I believe this should take the highest priority.\n            if hasattr(field, \"to_es\"):\n                out[key] = field.to_es(attribute)\n\n            # First we check it this is a manager, in which case we have many related objects\n            elif isinstance(attribute, models.Manager):\n                if issubclass(attribute.model, Indexable):\n                    # TODO: We want this to have some awareness of the relevant field.\n                    out[key] = [obj.to_dict() for obj in attribute.all()]\n                else:\n                    out[key] = list(attribute.values_list(\"pk\", flat=True))\n\n            elif callable(attribute):\n                out[key] = attribute()\n\n            elif isinstance(attribute, Indexable):\n                out[key] = attribute.to_dict()\n            else:\n                out[key] = attribute\n\n            if out[key] is None:\n                del out[key]\n        return out","label":0}
{"text":"public function walkSelectStatement(SelectStatement $AST)\n    {\n        if ($this->platformSupportsRowNumber()) {\n            return $this->walkSelectStatementWithRowNumber($AST);\n        }\n\n        return $this->walkSelectStatementWithoutRowNumber($AST);\n    }","label":0}
{"text":"public static function toKeysArray(ResultIterator $iterator)\n    {\n        $keys = array();\n        foreach ($iterator as $result) {\n            $keys[] = $result->getKey();\n            \n        }\n        return $keys;\n    }","label":0}
{"text":"public function deregisterGlobalHandlers()\n    {\n        if ($this->registered) {\n            \/\/ Restore the previous error handler if available\n            set_error_handler(\n                is_callable($this->errorHandler) ? $this->errorHandler : function () { }\n            );\n            \/\/ Restore the previous exception handler if available\n            set_exception_handler(\n                is_callable($this->exceptionHandler) ? $this->exceptionHandler : function () { }\n            );\n            $this->registered = false;\n        }\n    }","label":0}
{"text":"def create(cls, cluster_info):\n        \n        conn = Qubole.agent(version=\"v2\")\n        return conn.post(cls.rest_entity_path, data=cluster_info)","label":0}
{"text":"public function removeFiles($regex = null)\n    {\n        \/\/argument 1 must be a string\n        Argument::i()->test(1, 'string', 'null');\n\n        \/\/get the files\n        $files = $this->getFiles($regex);\n\n        if (empty($files)) {\n            return $this;\n        }\n\n        \/\/walk the array\n        foreach ($files as $file) {\n            \/\/remove everything\n            $file->remove();\n        }\n\n        return $this;\n    }","label":0}
{"text":"func (s *ListItemsOutput) SetItems(v []*Item) *ListItemsOutput {\n\ts.Items = v\n\treturn s\n}","label":0}
{"text":"public function subscribe(ConnectionInterface $connection, stdClass $payload)\n    {\n        $this->saveConnection($connection);\n\n        $connection->send(json_encode([\n            'event' => 'pusher_internal:subscription_succeeded',\n            'channel' => $this->channelName,\n        ]));\n    }","label":0}
{"text":"public function editAction()\n    {\n        \/* @var $user \\Auth\\Entity\\User *\/\n        $user = $this->userRepository->find($this->params('id'), \\Doctrine\\ODM\\MongoDB\\LockMode::NONE, null, ['allowDeactivated' => true]);\n        \n        \/\/ check if user is not found\n        if (!$user) {\n            return $this->notFoundAction();\n        }\n        \n        $params = $this->params();\n        $forms = $this->formManager;\n        \/* @var $infoContainer \\Auth\\Form\\UserProfileContainer *\/\n        $infoContainer = $forms->get('Auth\/UserProfileContainer');\n        $infoContainer->setEntity($user);\n        $statusContainer = $forms->get('Auth\/UserStatusContainer');\n        $statusContainer->setEntity($user);\n        \n        \/\/ set selected user to image strategy\n        $imageStrategy = $infoContainer->getForm('info.image')\n            ->getHydrator()\n            ->getStrategy('image');\n\t\t$fileEntity = $imageStrategy->getFileEntity();\n\t\t$fileEntity->setUser($user);\n\t\t$imageStrategy->setFileEntity($fileEntity);\n        \n        if ($this->request->isPost()) {\n            $formName = $params->fromQuery('form');\n            $container = $formName === 'status' ? $statusContainer : $infoContainer;\n            $form = $container->getForm($formName);\n        \n            if ($form) {\n                $postData  = $form->getOption('use_post_array') ? $params->fromPost() : [];\n                $filesData = $form->getOption('use_files_array') ? $params->fromFiles() : [];\n                $form->setData(array_merge($postData, $filesData));\n        \n                if (!$form->isValid()) {\n                    return new JsonModel(\n                        array(\n                            'valid' => false,\n                            'errors' => $form->getMessages(),\n                        )\n                    );\n                }\n                \n                $this->userRepository->store($user);\n        \n                if ('file-uri' === $params->fromPost('return')) {\n                    $content = $form->getHydrator()->getLastUploadedFile()->getUri();\n                } else {\n                    if ($form instanceof SummaryFormInterface) {\n                        $form->setRenderMode(SummaryFormInterface::RENDER_SUMMARY);\n                        $viewHelper = 'summaryForm';\n                    } else {\n                        $viewHelper = 'form';\n                    }\n                    $content = $this->viewHelper->get($viewHelper)->__invoke($form);\n                }\n        \n                return new JsonModel(\n                    array(\n                        'valid' => $form->isValid(),\n                        'content' => $content,\n                    )\n                );\n            }\n        }\n        \n        return [\n            'infoContainer' => $infoContainer,\n            'statusContainer' => $statusContainer\n        ];\n    }","label":0}
{"text":"func (c *Carbon) StartOfDay() *Carbon {\n\treturn create(c.Year(), c.Month(), c.Day(), 0, 0, 0, 0, c.Location())\n}","label":0}
{"text":"function setXprop( $label, $value, $params=FALSE ) {\n    if( empty( $label ) || empty( $value ))\n      return;\n    $xprop = array( 'value' => $value );\n    $toolbox = new calendarComponent();\n    $xprop['params'] = $toolbox->_setParams( $params );\n    $this->xprop[$label] = $xprop;\n  }","label":0}
{"text":"func (sc *SkinCollection) GetByName(name string) (*Skin, error) {\n\tif skin, ok := sc.db[name]; ok {\n\t\treturn &skin, nil\n\t}\n\treturn nil, fmt.Errorf(\"no such skin: '%s'\", name)\n}","label":0}
{"text":"func DurationFunc(v string) (interface{}, error) {\n\ts, err := time.ParseDuration(v)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"unable to parser duration: %v\", err)\n\t}\n\treturn s, err\n}","label":0}
{"text":"public function get($data = [])\n\t{\n\t\t\/\/ Process data given.\n\t\t$processPayload = $this->process(__FUNCTION__, $data);\n\n\t\tif( ! $processPayload->isStatus(Payload::STATUS_VALID))\n\t\t{\n\t\t\treturn $processPayload;\n\t\t}\n\n\t\treturn $this->dataSource->get($data);\n\t}","label":0}
{"text":"private int compare(Object k1, Object k2) {\n        return (mComparator==null ? ((Comparable)k1).compareTo(k2)\n                : mComparator.compare(k1, k2));\n    }","label":0}
{"text":"def save_plain_image_as_file(self, filepath, format='png', quality=90):\n        \n        qimg = self.get_plain_image_as_widget()\n        qimg.save(filepath, format=format, quality=quality)","label":0}
{"text":"public function jumping(IPaginator $paginator, $pagesCountInRange)\n    {\n        $this->checkPagesCountInRange($pagesCountInRange);\n\n        return $this->buildContext($paginator) + [\n            'pagesRange' => $this->jumpingBuildPagesRange($paginator, $pagesCountInRange)\n        ];\n    }","label":0}
{"text":"@Override\n\tpublic void eUnset(int featureID) {\n\t\tswitch (featureID) {\n\t\t\tcase AfplibPackage.MCFRG__RG_LENGTH:\n\t\t\t\tsetRGLength(RG_LENGTH_EDEFAULT);\n\t\t\t\treturn;\n\t\t\tcase AfplibPackage.MCFRG__TRIPLETS:\n\t\t\t\tgetTriplets().clear();\n\t\t\t\treturn;\n\t\t}\n\t\tsuper.eUnset(featureID);\n\t}","label":0}
{"text":"function mirrorProperties(src, dest = {}) {\n  function set(name) { dest[name] = src[name]; }\n  function _delete(name) { delete dest[name]; }\n\n  var handlers = { add: set, update: set, delete: _delete};\n\n  assign(dest, src);\n  observe(src, makeObserver(handlers));\n  return dest;\n}","label":0}
{"text":"def resolve_name(view):\n    \n    if inspect.isfunction(view):\n        return view.__name__\n    if hasattr(view, 'url_name'):\n        return view.url_name\n    if isinstance(view, six.string_types):\n        return view.split('.')[-1]\n    return None","label":0}
{"text":"func Camelize(word string) (camelized string) {\n\tfor pos, ru := range []rune(word) {\n\t\tif pos > 0 {\n\t\t\tcamelized += string(unicode.ToLower(ru))\n\t\t} else {\n\t\t\tcamelized += string(unicode.ToUpper(ru))\n\t\t}\n\t}\n\treturn\n}","label":0}
{"text":"public static Boolean or(Boolean a,Boolean b) \n  {\n  \treturn orTable[ttIndex(a)][ttIndex(b)];\n  }","label":0}
{"text":"private List<Bucket<V>> refillBuckets() {\n    List<Bucket<V>> bucketsToTrim = new ArrayList<>(mBuckets.size());\n\n    for (int i = 0, len = mBuckets.size(); i < len; ++i) {\n      final Bucket<V> oldBucket = mBuckets.valueAt(i);\n      final int bucketSize = oldBucket.mItemSize;\n      final int maxLength = oldBucket.mMaxLength;\n      final int bucketInUseCount = oldBucket.getInUseCount();\n      if (oldBucket.getFreeListSize() > 0) {\n        bucketsToTrim.add(oldBucket);\n      }\n      mBuckets.setValueAt(\n          i,\n          new Bucket<V>(\n              getSizeInBytes(bucketSize),\n              maxLength,\n              bucketInUseCount,\n              mPoolParams.fixBucketsReinitialization));\n    }\n\n    return bucketsToTrim;\n  }","label":0}
{"text":"func (t *transacter) Stop() {\n\tt.stopped = true\n\tt.endingWg.Wait()\n\tfor _, c := range t.conns {\n\t\tc.Close()\n\t}\n}","label":0}
{"text":"func (s *CreateJobPlaylist) SetFormat(v string) *CreateJobPlaylist {\n\ts.Format = &v\n\treturn s\n}","label":0}
{"text":"public function multiple($bool = true)\n    {\n        if ($this->props['type'] == 'date')\n            $this->props['multiple'] = (bool)$bool;\n        else\n            $this->props['multiple'] = false;\n\n        return $this;\n    }","label":0}
{"text":"func (r Virtual_Guest) MigrateDedicatedHost(destinationHostId *int) (err error) {\n\tvar resp datatypes.Void\n\tparams := []interface{}{\n\t\tdestinationHostId,\n\t}\n\terr = r.Session.DoRequest(\"SoftLayer_Virtual_Guest\", \"migrateDedicatedHost\", params, &r.Options, &resp)\n\treturn\n}","label":0}
{"text":"void addElement(KElement element) {\n\t\tif (!this.elements.contains(element)) {\n\t\t\telement.setIndex(this.elements.size());\n\t\t\tthis.elements.add(element);\n\t\t}\n\t}","label":0}
{"text":"func copyNodeEvents(events []*NodeEvent) []*NodeEvent {\n\tl := len(events)\n\tif l == 0 {\n\t\treturn nil\n\t}\n\n\tc := make([]*NodeEvent, l)\n\tfor i, event := range events {\n\t\tc[i] = event.Copy()\n\t}\n\treturn c\n}","label":0}
{"text":"public static function parse($headers) {\n       $fields = explode(\"\\r\\n\", preg_replace('\/\\x0D\\x0A[\\x09\\x20]+\/', ' ', $headers));\n\n       if(empty($fields)) return [];\n\n       return array_reduce($fields, function($carry, $field) {\n           $match = [];\n           if (!preg_match('\/([^:]+): (.+)\/m', $field, $match)) return $carry;\n\n           $match[1] = preg_replace_callback('\/(?<=^|[\\x09\\x20\\x2D]).\/',function($matches) {\n               return strtoupper($matches[0]);\n           }, strtolower(trim($match[1])));\n\n           if (!isset($carry[$match[1]])) {\n               $carry[$match[1]] = trim($match[2]);\n               return $carry;\n           }\n           \n           if (is_array($carry[$match[1]])) {\n               $carry[$match[1]][] = trim($match[2]);      \n               return $carry;\n           }\n           \n           $carry[$match[1]] = [$carry[$match[1]], trim($match[2])];\n\n           return $carry;\n       }, []);\n    }","label":0}
{"text":"def new(self, bootstrap_with=None, use_timer=False, incr=False,\n            with_proof=False):\n        \n\n        assert not incr or not with_proof, 'Incremental mode and proof tracing cannot be set together.'\n\n        if not self.glucose:\n            self.glucose = pysolvers.glucose41_new()\n\n            if bootstrap_with:\n                for clause in bootstrap_with:\n                    self.add_clause(clause)\n\n            self.use_timer = use_timer\n            self.call_time = 0.0  # time spent for the last call to oracle\n            self.accu_time = 0.0  # time accumulated for all calls to oracle\n\n            if incr:\n                pysolvers.glucose41_setincr(self.glucose)\n\n            if with_proof:\n                self.prfile = tempfile.TemporaryFile()\n                pysolvers.glucose41_tracepr(self.glucose, self.prfile)","label":0}
{"text":"public static function createObject($class, ...$args) : object\n    {\n        $work = self::wrapObject($class);\n        $work->__gentryConstruct(...$args);\n        return $work;\n    }","label":0}
{"text":"func (service *VboxPortType) IMachinegetPageFusionEnabled(request *IMachinegetPageFusionEnabled) (*IMachinegetPageFusionEnabledResponse, error) {\n\tresponse := new(IMachinegetPageFusionEnabledResponse)\n\terr := service.client.Call(\"\", request, response)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn response, nil\n}","label":0}
{"text":"func (pta *PassThroughAuth) AddAuthHeaders(req *http.Request) {\n\treq.Header.Set(\"Authorization\", pta.AuthHeader)\n}","label":0}
{"text":"public function loadFile($filePath) {\n        require_once (substr($filePath, 0, 1) != '\/' && substr($filePath, 1, 1) != ':')\n            ? $this->basePath . DIRECTORY_SEPARATOR . $filePath : $filePath;\n    }","label":0}
{"text":"public function process()\n    {\n        parent::process();\n\n        $data = $this->getForm()->getFormData();\n\n        $this->crop_width = $data[$this->id . '_width'];\n        $this->crop_height = $data[$this->id . '_height'];\n        $this->crop_left = $data[$this->id . '_x'];\n        $this->crop_top = $data[$this->id . '_y'];\n\n        \/\/ deprecated aliases\n        $this->crop_box_width = $this->crop_width;\n        $this->crop_box_height = $this->crop_height;\n        $this->crop_box_left = $this->crop_left;\n        $this->crop_box_top = $this->crop_top;\n    }","label":0}
{"text":"def draw_pathcollection(data, obj):\n    \n    content = []\n    # gather data\n    assert obj.get_offsets() is not None\n    labels = [\"x\" + 21 * \" \", \"y\" + 21 * \" \"]\n    dd = obj.get_offsets()\n\n    draw_options = [\"only marks\"]\n    table_options = []\n\n    if obj.get_array() is not None:\n        draw_options.append(\"scatter\")\n        dd = numpy.column_stack([dd, obj.get_array()])\n        labels.append(\"colordata\" + 13 * \" \")\n        draw_options.append(\"scatter src=explicit\")\n        table_options.extend([\"x=x\", \"y=y\", \"meta=colordata\"])\n        ec = None\n        fc = None\n        ls = None\n    else:\n        # gather the draw options\n        try:\n            ec = obj.get_edgecolors()[0]\n        except (TypeError, IndexError):\n            ec = None\n\n        try:\n            fc = obj.get_facecolors()[0]\n        except (TypeError, IndexError):\n            fc = None\n\n        try:\n            ls = obj.get_linestyle()[0]\n        except (TypeError, IndexError):\n            ls = None\n\n    is_contour = len(dd) == 1\n    if is_contour:\n        draw_options = [\"draw=none\"]\n\n    # `only mark` plots don't need linewidth\n    data, extra_draw_options = get_draw_options(data, obj, ec, fc, ls, None)\n    draw_options.extend(extra_draw_options)\n\n    if obj.get_cmap():\n        mycolormap, is_custom_cmap = _mpl_cmap2pgf_cmap(obj.get_cmap(), data)\n        draw_options.append(\"colormap\" + (\"=\" if is_custom_cmap else \"\/\") + mycolormap)\n\n    legend_text = get_legend_text(obj)\n    if legend_text is None and has_legend(obj.axes):\n        draw_options.append(\"forget plot\")\n\n    for path in obj.get_paths():\n        if is_contour:\n            dd = path.vertices\n\n        if len(obj.get_sizes()) == len(dd):\n            # See Pgfplots manual, chapter 4.25.\n            # In Pgfplots, \\mark size specifies raddi, in matplotlib circle areas.\n            radii = numpy.sqrt(obj.get_sizes() \/ numpy.pi)\n            dd = numpy.column_stack([dd, radii])\n            labels.append(\"sizedata\" + 14 * \" \")\n            draw_options.extend(\n                [\n                    \"visualization depends on=\"\n                    \"{\\\\thisrow{sizedata} \\\\as\\\\perpointmarksize}\",\n                    \"scatter\/@pre marker code\/.append style=\"\n                    \"{\/tikz\/mark size=\\\\perpointmarksize}\",\n                ]\n            )\n\n        do = \" [{}]\".format(\", \".join(draw_options)) if draw_options else \"\"\n        content.append(\"\\\\addplot{}\\n\".format(do))\n\n        to = \" [{}]\".format(\", \".join(table_options)) if table_options else \"\"\n        content.append(\"table{}{{%\\n\".format(to))\n\n        content.append((\" \".join(labels)).strip() + \"\\n\")\n        ff = data[\"float format\"]\n        fmt = (\" \".join(dd.shape[1] * [ff])) + \"\\n\"\n        for d in dd:\n            content.append(fmt.format(*tuple(d)))\n        content.append(\"};\\n\")\n\n    if legend_text is not None:\n        content.append(\"\\\\addlegendentry{{{}}}\\n\".format(legend_text))\n\n    return data, content","label":0}
{"text":"def strains(self):\n        \n        with open(os.path.join(self.path, 'strains.csv')) as strains:\n            next(strains)\n            for line in strains:\n                oln, seqid = line.split(',')\n                self.straindict[oln] = seqid.rstrip()\n                self.strainset.add(oln)\n                logging.debug(oln)\n                if self.debug:\n                    break","label":0}
{"text":"func (s *ListObjectVersionsInput) SetBucket(v string) *ListObjectVersionsInput {\n\ts.Bucket = &v\n\treturn s\n}","label":0}
{"text":"private function AssertSuccess()\n    {\n        if ($this->db)\n        {\n            if ($this->IsConnected())\n            {\n                $errorCode = $this->db->errno;\n                if ($errorCode != 0)\n                {\n                    if ($this->inTransaction)\n                        $this->RollBack();\n\n                    throw new DBExceptions\\DatabaseException($this->db->error, $errorCode, $this->lastQuery);\n                }\n            }\n            else\n            {\n                $errorCode = $this->db->connect_errno;\n                if ($errorCode != 0)\n                {\n                    throw new DBExceptions\\DatabaseException($this->db->connect_error, $errorCode);\n                }\n            }\n        }\n    }","label":0}
{"text":"public function getContext($sid) {\n        return new FactorContext(\n            $this->version,\n            $this->solution['serviceSid'],\n            $this->solution['identity'],\n            $sid\n        );\n    }","label":0}
{"text":"public function getOrCreateProxy($targetId, $className, $locale = null)\n    {\n        $document = $this->getDocumentById($targetId);\n\n        \/\/ check if referenced document already exists\n        if ($document) {\n            $metadata = $this->dm->getClassMetadata($className);\n            if ($locale && $locale !== $this->getCurrentLocale($document, $metadata)) {\n                $this->doLoadTranslation($document, $metadata, $locale, true);\n            }\n\n            return $document;\n        }\n\n        $metadata = $this->dm->getClassMetadata($className);\n        $proxyDocument = $this->dm->getProxyFactory()->getProxy($className, [$metadata->identifier => $targetId]);\n\n        \/\/ register the document under its own id\n        $this->registerDocument($proxyDocument, $targetId);\n\n        if ($locale) {\n            $this->setLocale($proxyDocument, $this->dm->getClassMetadata($className), $locale);\n        }\n\n        return $proxyDocument;\n    }","label":0}
{"text":"def stream_fastq(file_handler):\n    ''' \n    '''\n    next_element = ''\n    for i, line in enumerate(file_handler):\n        next_element += line\n        if i % 4 == 3:\n            yield next_element\n            next_element = ''","label":0}
{"text":"func FromServices(services []*v1.Service) []v1.EnvVar {\n\tvar result []v1.EnvVar\n\tfor i := range services {\n\t\tservice := services[i]\n\n\t\t\/\/ ignore services where ClusterIP is \"None\" or empty\n\t\t\/\/ the services passed to this method should be pre-filtered\n\t\t\/\/ only services that have the cluster IP set should be included here\n\t\tif !v1helper.IsServiceIPSet(service) {\n\t\t\tcontinue\n\t\t}\n\n\t\t\/\/ Host\n\t\tname := makeEnvVariableName(service.Name) + \"_SERVICE_HOST\"\n\t\tresult = append(result, v1.EnvVar{Name: name, Value: service.Spec.ClusterIP})\n\t\t\/\/ First port - give it the backwards-compatible name\n\t\tname = makeEnvVariableName(service.Name) + \"_SERVICE_PORT\"\n\t\tresult = append(result, v1.EnvVar{Name: name, Value: strconv.Itoa(int(service.Spec.Ports[0].Port))})\n\t\t\/\/ All named ports (only the first may be unnamed, checked in validation)\n\t\tfor i := range service.Spec.Ports {\n\t\t\tsp := &service.Spec.Ports[i]\n\t\t\tif sp.Name != \"\" {\n\t\t\t\tpn := name + \"_\" + makeEnvVariableName(sp.Name)\n\t\t\t\tresult = append(result, v1.EnvVar{Name: pn, Value: strconv.Itoa(int(sp.Port))})\n\t\t\t}\n\t\t}\n\t\t\/\/ Docker-compatible vars.\n\t\tresult = append(result, makeLinkVariables(service)...)\n\t}\n\treturn result\n}","label":0}
{"text":"public void emitModifiers(Set<Modifier> modifiers, Set<Modifier> implicitModifiers)\n      throws IOException {\n    if (modifiers.isEmpty()) return;\n    for (Modifier modifier : EnumSet.copyOf(modifiers)) {\n      if (implicitModifiers.contains(modifier)) continue;\n      emitAndIndent(modifier.name().toLowerCase(Locale.US));\n      emitAndIndent(\" \");\n    }\n  }","label":0}
{"text":"public function sendEmail(PasswordRecoverEvent $event)\n    {\n        $this->renderEmail(\n            'Password recover email',\n            $event->getUser()->getEmail(),\n            [\n                'user' => $event->getUser(),\n            ]\n        );\n    }","label":0}
{"text":"func (a *AuthWithRoles) CompareAndSwapCertAuthority(new, existing services.CertAuthority) error {\n\tif err := a.action(defaults.Namespace, services.KindCertAuthority, services.VerbCreate); err != nil {\n\t\treturn trace.Wrap(err)\n\t}\n\tif err := a.action(defaults.Namespace, services.KindCertAuthority, services.VerbUpdate); err != nil {\n\t\treturn trace.Wrap(err)\n\t}\n\treturn a.authServer.CompareAndSwapCertAuthority(new, existing)\n}","label":0}
{"text":"public function saveConfig($group, $environment = '')\n    {\n        \/\/ Path do arquivo\n        $path = config_path();\n\n        \/\/ Itens\n        $items = config($group, []);\n\n        \/\/ Nome do arquivo\n        $file = (! $environment || ($environment == 'production'))\n            ? \"{$path}\/{$group}.php\"\n            : \"{$path}\/{$environment}\/{$group}.php\";\n\n        \/\/ Salvar arquivo\n        $code = '<?php' . \"\\r\\n\\r\\n\";\n        $code .= 'return ' . var_export($items, true) . ';';\n        $this->put($file, $code);\n    }","label":0}
{"text":"def config(self):\n        \"\"\"\"\"\"\n        return \", \".join('%s:%s' % (key, value) for key, value in self.conf.items())","label":0}
{"text":"func (vtg *VTGate) ExecuteBatch(ctx context.Context, session *vtgatepb.Session, sqlList []string, bindVariablesList []map[string]*querypb.BindVariable) (*vtgatepb.Session, []sqltypes.QueryResponse, error) {\n\t\/\/ In this context, we don't care if we can't fully parse destination\n\tdestKeyspace, destTabletType, _, _ := vtg.executor.ParseDestinationTarget(session.TargetString)\n\tstatsKey := []string{\"ExecuteBatch\", destKeyspace, topoproto.TabletTypeLString(destTabletType)}\n\tdefer vtg.timings.Record(statsKey, time.Now())\n\n\tfor _, bindVariables := range bindVariablesList {\n\t\tif bvErr := sqltypes.ValidateBindVariables(bindVariables); bvErr != nil {\n\t\t\treturn session, nil, vterrors.Errorf(vtrpcpb.Code_INVALID_ARGUMENT, \"%v\", bvErr)\n\t\t}\n\t}\n\n\tqrl := make([]sqltypes.QueryResponse, len(sqlList))\n\tfor i, sql := range sqlList {\n\t\tvar bv map[string]*querypb.BindVariable\n\t\tif len(bindVariablesList) != 0 {\n\t\t\tbv = bindVariablesList[i]\n\t\t}\n\t\tsession, qrl[i].QueryResult, qrl[i].QueryError = vtg.Execute(ctx, session, sql, bv)\n\t\tif qr := qrl[i].QueryResult; qr != nil {\n\t\t\tvtg.rowsReturned.Add(statsKey, int64(len(qr.Rows)))\n\t\t}\n\t}\n\treturn session, qrl, nil\n}","label":0}
{"text":"public function createMessageId() {\n\n        $time = time();\n\n        if ($this->_from !== null) {\n            $user = $this->_from;\n        } elseif (isset($_SERVER['REMOTE_ADDR'])) {\n            $user = $_SERVER['REMOTE_ADDR'];\n        } else {\n            $user = getmypid();\n        }\n\n        $rand = mt_rand();\n\n        if ($this->_recipients !== array()) {\n            $recipient = array_rand($this->_recipients);\n        } else {\n            $recipient = 'unknown';\n        }\n\n        if (isset($_SERVER[\"SERVER_NAME\"])) {\n            $hostName = $_SERVER[\"SERVER_NAME\"];\n        } else {\n            $hostName = php_uname('n');\n        }\n\n        return sha1($time . $user . $rand . $recipient) . '@' . $hostName;\n    }","label":0}
{"text":"private function createValue($object, $arguments = [])\n    {\n\n        if ($this->isInstanceOf($arguments, ConfigObject::class)) {\n            $arguments = $arguments->toArray();\n        }\n\n        if (!$this->isArray($arguments)) {\n            throw new ServiceManagerException(ServiceManagerException::INVALID_SERVICE_ARGUMENTS_TYPE, [$object]);\n        }\n\n        if (!$this->isString($object)) {\n            return $object;\n        }\n\n        $object = $this->str($object);\n\n        if ($object->startsWith('@')) {\n            return ServiceManager::getInstance()->getService($object->trimLeft('@')->val());\n        } else {\n            $value = $object->val();\n            if (class_exists($value)) {\n                $reflection = new \\ReflectionClass($value);\n\n                return $reflection->newInstanceArgs($arguments);\n            }\n\n            return $value;\n        }\n    }","label":0}
{"text":"def main():\n    \n\n    args = get_command_line_arguments()\n    return build_toc_tree(args.title,\n                          args.input,\n                          args.output,\n                          args.content_directory)","label":0}
{"text":"private function updateComposerJson(JsonFile $jsonFile, array $package, $isPostInstall)\n    {\n        $composerJson = $jsonFile->parse();\n\n        $sortPackages = $this->getOptions()->sortPackages();\n        $requireKey = $this->getOptions()->dev() ? 'require-dev' : 'require';\n        $removeKey = $this->getOptions()->dev() ? 'require' : 'require-dev';\n        $baseRequirements = array_key_exists($requireKey, $composerJson) ? $composerJson[$requireKey] : [];\n\n        if (!$this->updateFileCleanly($jsonFile, $package, $requireKey, $removeKey, $sortPackages, $isPostInstall)) {\n            foreach ($package as $name => $version) {\n                $baseRequirements[$name] = $version;\n\n                if (isset($composerJson[$removeKey][$name])) {\n                    unset($composerJson[$removeKey][$name]);\n                }\n            }\n\n            $composerJson[$requireKey] = $baseRequirements;\n            $jsonFile->dump($composerJson);\n        }\n    }","label":0}
{"text":"public function filter(array $items): array\n    {\n        foreach ($this->filter as $filter) {\n            $items = $filter->filter($items);\n        }\n\n        return $items;\n    }","label":0}
{"text":"def _getParameters(self):\n        \"\"\"\"\"\"\n        param = self.query._getParameters() \n        index = self._getFilterIndex()\n        param.update({\n        'filter['+str(index)+'][columnAlias]' : self.__column,\n        'filter['+str(index)+'][data][type]' : self.__type,\n        'filter['+str(index)+'][data][value]' : self.__value,\n        'filter['+str(index)+'][data][comparison]' : self.__comparison})        \n        #self.__column.getColumnAlias()\n        return param","label":0}
{"text":"function Unserialize(&$serialized)\r\n    {\r\n        \/\/ load the util from the serialized code\r\n        $tmp = unserialize(base64_decode($serialized));\r\n        $this->Type = $tmp->Type;\r\n        $this->Username = $tmp->Username;\r\n        $this->Password = $tmp->Password;\r\n        $this->ConnectionString = $tmp->ConnectionString;\r\n        $this->DBName = $tmp->DBName;\r\n        $this->Type = $tmp->Type;\r\n        $this->TablePrefix = $tmp->TablePrefix;\r\n   \t\t$this->Charset = $tmp->Charset;\r\n   \t\t$this->BootstrapSQL = $tmp->BootstrapSQL;\r\n   \t\t$this->Multibyte = $tmp->Multibyte;\r\n        }","label":0}
{"text":"public function addOption($name, Option $opt = null) {\r\n        if (isset($this->configOpts[$name]) || isset($this->configArgs[$name])) {\r\n            throw new ConfigException('option\/argument already set: ' . $name);\r\n        }\r\n\r\n        if (is_null($opt)) {\r\n            $opt = new Option();\r\n        }\r\n\r\n        $this->configOpts[$name] = $opt;\r\n        return $opt;\r\n    }","label":0}
{"text":"public static Object callStaticMethod(Class clazz, String methodName, Object[] args) throws PageException {\n\ttry {\n\t    return getMethodInstance(null, clazz, methodName, args).invoke(null);\n\t}\n\tcatch (InvocationTargetException e) {\n\t    Throwable target = e.getTargetException();\n\t    if (target instanceof PageException) throw (PageException) target;\n\t    throw Caster.toPageException(e.getTargetException());\n\t}\n\tcatch (Exception e) {\n\t    throw Caster.toPageException(e);\n\t}\n    }","label":0}
{"text":"private function scanModuleFolders($basedir, &$folders)\n    {\n        if (is_dir($basedir) && ($h = opendir($basedir))) {\n            while (($folder = readdir($h))) {\n                if ($folder !== '.' && $folder !== '..') {\n                    $this->scanModuleFiles($basedir . DIRECTORY_SEPARATOR . $folder, $folders);\n                }\n            }\n            closedir($h);\n        }\n    }","label":0}
{"text":"public function execute($response) {\n        global $CFG;\n\n        $version = service_base::LTI_VERSION2P0;\n        $params = $this->parse_template();\n        $ok = $this->get_service()->check_tool_proxy($params['tool_proxy_id']);\n        if (!$ok) {\n            $response->set_code(404);\n        } else if (optional_param('lti_version', '', PARAM_ALPHANUMEXT) != $version) {\n            $response->set_code(400);\n        } else {\n            $toolproxy = $this->get_service()->get_tool_proxy();\n            $response->set_content_type($this->formats[0]);\n\n            $servicepath = $this->get_service()->get_service_path();\n            $id = $servicepath . $this->get_path();\n            $now = date('Y-m-d\\TH:iO');\n            $capabilityofferedarr = explode(\"\\n\", $toolproxy->capabilityoffered);\n            $serviceofferedarr = explode(\"\\n\", $toolproxy->serviceoffered);\n            $serviceoffered = '';\n            $sep = '';\n            $services = \\core_component::get_plugin_list('ltiservice');\n            foreach ($services as $name => $location) {\n                if (in_array($name, $serviceofferedarr)) {\n                    $classname = \"\\\\ltiservice_{$name}\\\\local\\\\service\\\\{$name}\";\n                    \/** @var service_base $service *\/\n                    $service = new $classname();\n                    $service->set_tool_proxy($toolproxy);\n                    $resources = $service->get_resources();\n                    foreach ($resources as $resource) {\n                        $formats = implode(\"\\\", \\\"\", $resource->get_formats());\n                        $methods = implode(\"\\\", \\\"\", $resource->get_methods());\n                        $capabilityofferedarr = array_merge($capabilityofferedarr, $resource->get_variables());\n                        $path = $servicepath . preg_replace('\/\\{?.*\\}$\/', '', $resource->get_path());\n                        $serviceoffered .= <<< EOD\n{$sep}\n    {\n      \"@type\":\"{$resource->get_type()}\",\n      \"@id\":\"tcp:{$resource->get_id()}\",\n      \"endpoint\":\"{$path}\",\n      \"format\":[\"{$formats}\"],\n      \"action\":[\"{$methods}\"]\n    }\nEOD;\n                        $sep = ',';\n                    }\n                }\n            }\n            $capabilityoffered = implode(\"\\\",\\n    \\\"\", $capabilityofferedarr);\n            if (strlen($capabilityoffered) > 0) {\n                $capabilityoffered = \"\\n    \\\"{$capabilityoffered}\\\"\";\n            }\n            $urlparts = parse_url($CFG->wwwroot);\n            $orgid = $urlparts['host'];\n            $name = 'Moodle';\n            $code = 'moodle';\n            $vendorname = 'Moodle.org';\n            $vendorcode = 'mdl';\n            $prodversion = strval($CFG->version);\n            if (!empty($CFG->mod_lti_institution_name)) {\n                $consumername = $CFG->mod_lti_institution_name;\n                $consumerdesc = '';\n            } else {\n                $consumername = get_site()->fullname;\n                $consumerdesc = strip_tags(get_site()->summary);\n            }\n            $profile = <<< EOD\n{\n  \"@context\":[\n    \"http:\/\/purl.imsglobal.org\/ctx\/lti\/v2\/ToolConsumerProfile\",\n    {\n      \"tcp\":\"{$id}#\"\n    }\n  ],\n  \"@type\":\"ToolConsumerProfile\",\n  \"@id\":\"{$id}\",\n  \"lti_version\":\"{$version}\",\n  \"guid\":\"{$toolproxy->guid}\",\n  \"product_instance\":{\n    \"guid\":\"{$orgid}\",\n    \"product_info\":{\n      \"product_name\":{\n        \"default_value\":\"{$name}\",\n        \"key\":\"product.name\"\n      },\n      \"product_version\":\"{$prodversion}\",\n      \"product_family\":{\n        \"code\":\"{$code}\",\n        \"vendor\":{\n          \"code\":\"{$vendorcode}\",\n          \"vendor_name\":{\n            \"default_value\":\"{$vendorname}\",\n            \"key\":\"product.vendor.name\"\n          },\n          \"timestamp\":\"{$now}\"\n        }\n      }\n    },\n    \"service_owner\":{\n      \"@id\":\"ServiceOwner\",\n      \"service_owner_name\":{\n        \"default_value\":\"{$consumername}\",\n        \"key\":\"service_owner.name\"\n      },\n      \"description\":{\n        \"default_value\":\"{$consumerdesc}\",\n        \"key\":\"service_owner.description\"\n      }\n    }\n  },\n  \"capability_offered\":[{$capabilityoffered}\n  ],\n  \"service_offered\":[{$serviceoffered}\n  ]\n}\nEOD;\n            $response->set_body($profile);\n\n        }\n    }","label":0}
{"text":"func (c *ArrayConstraint) Validate(v interface{}) (err error) {\n\tif pdebug.Enabled {\n\t\tg := pdebug.IPrintf(\"START ArrayConstraint.Validate\")\n\t\tdefer func() {\n\t\t\tif err == nil {\n\t\t\t\tg.IRelease(\"END ArrayConstraint.Validate (PASS)\")\n\t\t\t} else {\n\t\t\t\tg.IRelease(\"END ArrayConstraint.Validate (FAIL): %s\", err)\n\t\t\t}\n\t\t}()\n\t}\n\n\trv := reflect.ValueOf(v)\n\tswitch rv.Kind() {\n\tcase reflect.Slice:\n\tdefault:\n\t\tvar typ string\n\t\tif rv == zeroval {\n\t\t\ttyp = \"invalid\"\n\t\t} else {\n\t\t\ttyp = rv.Type().String()\n\t\t}\n\t\treturn errors.New(\"value must be a slice (was: \" + typ + \")\")\n\t}\n\n\tl := rv.Len()\n\n\tif mi := c.minItems; mi > -1 && l < mi {\n\t\treturn errors.New(\"fewer items than minItems\")\n\t}\n\n\tif mi := c.maxItems; mi > -1 && l > mi {\n\t\treturn errors.New(\"more items than maxItems\")\n\t}\n\n\tvar uitems map[string]struct{}\n\tif c.uniqueItems {\n\t\tpdebug.Printf(\"Check for unique items enabled\")\n\t\tuitems = make(map[string]struct{})\n\t\tfor i := 0; i < l; i++ {\n\t\t\tiv := rv.Index(i).Interface()\n\t\t\tkv := fmt.Sprintf(\"%s\", iv)\npdebug.Printf(\"unique? -> %s\", kv)\n\t\t\tif _, ok := uitems[kv]; ok {\n\t\t\t\treturn errors.New(\"duplicate element found\")\n\t\t\t}\n\t\t\tuitems[kv] = struct{}{}\n\t\t}\n\t}\n\n\tif celem := c.items; celem != nil {\n\t\tif pdebug.Enabled {\n\t\t\tpdebug.Printf(\"Checking if all items match a spec\")\n\t\t}\n\t\t\/\/ if this is set, then all items must fulfill this.\n\t\t\/\/ additional items are ignored\n\t\tfor i := 0; i < l; i++ {\n\t\t\tiv := rv.Index(i).Interface()\n\t\t\tif err := celem.Validate(iv); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t}\n\t} else {\n\t\t\/\/ otherwise, check the positional specs, and apply the\n\t\t\/\/ additionalItems constraint\n\t\tlv := rv.Len()\n\t\tfor i, cpos := range c.positionalItems {\n\t\t\tif lv <= i {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tif pdebug.Enabled {\n\t\t\t\tpdebug.Printf(\"Checking positional item at '%d'\", i)\n\t\t\t}\n\t\t\tiv := rv.Index(i).Interface()\n\t\t\tif err := cpos.Validate(iv); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t}\n\n\t\tlp := len(c.positionalItems)\n\t\tif lp > 0 && l > lp { \/\/ we got more than positional schemas\n\t\t\tcadd := c.additionalItems\n\t\t\tif cadd == nil { \/\/ you can't have additionalItems!\n\t\t\t\treturn errors.New(\"additional elements found in array\")\n\t\t\t}\n\t\t\tfor i := lp - 1; i < l; i++ {\n\t\t\t\tiv := rv.Index(i).Interface()\n\t\t\t\tif err := cadd.Validate(iv); err != nil {\n\t\t\t\t\treturn err\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn nil\n}","label":0}
{"text":"func NewStructFieldDef(init ...*StructFieldDef) *StructFieldDef {\n\tvar o *StructFieldDef\n\tif len(init) == 1 {\n\t\to = init[0]\n\t} else {\n\t\to = new(StructFieldDef)\n\t}\n\treturn o\n}","label":0}
{"text":"func (c *LayeredCache) Replace(primary, secondary string, value interface{}) bool {\n\titem := c.bucket(primary).get(primary, secondary)\n\tif item == nil {\n\t\treturn false\n\t}\n\tc.Set(primary, secondary, value, item.TTL())\n\treturn true\n}","label":0}
{"text":"private function createSnapshot(string $endpoint, ?string $where = null, $strictMode = false): void\n    {\n        if ($this->endpoints && !\\in_array($endpoint, $this->endpoints)) {\n            if (DefinitionRegistry::DEFAULT_ENDPOINT === $endpoint) {\n                throw new \\Exception('Must specify a valid endpoint name or use the `--all` option');\n            }\n\n            throw new \\Exception(\n                sprintf('The are no valid endpoint called `%s`.', $endpoint)\n            );\n        }\n\n        $snapshot = $this->schemaSnapshot->createSnapshot($endpoint);\n        file_put_contents(sprintf('%s\/%s.snapshot.json', $where, $endpoint), json_encode($snapshot, JSON_PRETTY_PRINT));\n        $this->updateFeatureFile($where, $endpoint, $strictMode);\n    }","label":0}
{"text":"public function getPreviousExceptionInspector()\n    {\n        if ($this->previousExceptionInspector === null) {\n            $previousException = $this->exception->getPrevious();\n\n            if ($previousException) {\n                $this->previousExceptionInspector = new Inspector($previousException);\n            }\n        }\n\n        return $this->previousExceptionInspector;\n    }","label":0}
{"text":"protected function restoreAccessToken() {\n\t\tif (!$this->authenticated) {\n\t\t\tif ($this->hasState('auth_token') && $this->getState('expires', 0) > time()) {\n\t\t\t\t$this->access_token = $this->getState('auth_token');\n\t\t\t\t$this->authenticated = true;\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$this->access_token = null;\n\t\t\t\t$this->authenticated = false;\n\t\t\t}\n\t\t}\n\n\t\treturn $this->authenticated;\n\t}","label":0}
{"text":"function _spork(command, args, resolve, reject) {\n    spork(command, args, {exit: false, quiet: true})\n        .on('exit:code', function(code) {\n          if (code === 0) {\n            resolve();\n          } else {\n            reject();\n          }\n        });\n  }","label":0}
{"text":"public long getDurationMillis()\n\t{\n\t\tList<Element> durations = element.getChildren(\"Duration\");\n\n\t\tif (durations.size() != 0)\n\t\t{\n\t\t\tfinal String durationString = durations.get(0).getValue();\n\n\t\t\tfinal long duration = Long.parseLong(durationString);\n\n\t\t\treturn duration;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthrow new RuntimeException(\"No Duration elements present on track!\");\n\t\t}\n\t}","label":0}
{"text":"def cmd(send, _, args):\n    \n\n    def lenny_send(msg):\n        send(gen_lenny(msg))\n\n    key = args['config']['api']['bitlykey']\n    cmds = [lambda: gen_fortune(lenny_send), lambda: gen_urban(lenny_send, args['db'], key)]\n    choice(cmds)()","label":0}
{"text":"protected static function makeUpdateParameter($data)\n    {\n        foreach ($data as $field => $value) {\n            $newData[] = \"{$field}=:{$field}\";\n        }\n\n        $newData = implode(\",\", $newData); \/\/ override new data\n\n        return $newData;\n    }","label":0}
{"text":"protected function _validate($value, $name, $parameters)\n    {\n        if (is_object($value)) {\n            return $value;\n        }\n\n        $method = \"_validate_$name\";\n        if (method_exists($this, $method)) {\n            return $parameters === null ? $this->$method($value) : $this->$method($value, $parameters);\n        }\n\n        if (function_exists($name)) {\n            return $parameters === null ? $name($value) : $name($value, $parameters);\n        }\n\n        throw new NotSupportedException(['unsupported `:validate` validate method', 'validate' => $name]);\n    }","label":0}
{"text":"public void marshall(BatchDetectKeyPhrasesRequest batchDetectKeyPhrasesRequest, ProtocolMarshaller protocolMarshaller) {\n\n        if (batchDetectKeyPhrasesRequest == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(batchDetectKeyPhrasesRequest.getTextList(), TEXTLIST_BINDING);\n            protocolMarshaller.marshall(batchDetectKeyPhrasesRequest.getLanguageCode(), LANGUAGECODE_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }","label":0}
{"text":"func (s *CreateLoginProfileInput) SetPasswordResetRequired(v bool) *CreateLoginProfileInput {\n\ts.PasswordResetRequired = &v\n\treturn s\n}","label":0}
{"text":"@XmlElementDecl(namespace = \"http:\/\/org\/persons\/\", name = \"PersonInfo\")\n    public JAXBElement<PersonInfo> createPersonInfo(PersonInfo value) {\n        return new JAXBElement<PersonInfo>(_PersonInfo_QNAME, PersonInfo.class, null, value);\n    }","label":0}
{"text":"@Override\n  @Deprecated\n  public void setImageBitmap(Bitmap bm) {\n    init(getContext());\n    mDraweeHolder.setController(null);\n    super.setImageBitmap(bm);\n  }","label":0}
{"text":"public void addKnot(int x, int color) {\n\t\tint[] nx = new int[numKnots+1];\n\t\tint[] ny = new int[numKnots+1];\n\t\tSystem.arraycopy(xKnots, 0, nx, 0, numKnots);\n\t\tSystem.arraycopy(yKnots, 0, ny, 0, numKnots);\n\t\txKnots = nx;\n\t\tyKnots = ny;\n\t\txKnots[numKnots] = x;\n\t\tyKnots[numKnots] = color;\n\t\tnumKnots++;\n\t\tsortKnots();\n\t\trebuildGradient();\n\t}","label":0}
{"text":"function Message(name, attrs, opts) {\n  opts = opts || {};\n\n  if (!types.isValidName(name)) {\n    throw new Error(f('invalid message name: %s', name));\n  }\n  this._name = name;\n\n  var recordName = f('org.apache.avro.ipc.%sRequest', name);\n  this._requestType = types.createType({\n    name: recordName,\n    type: 'record',\n    namespace: opts.namespace || '', \/\/ Don't leak request namespace.\n    fields: attrs.request\n  }, opts);\n  \/\/ We remove the record from the registry to prevent it from being exported\n  \/\/ in the protocol's schema.\n  delete opts.registry[recordName];\n\n  if (!attrs.response) {\n    throw new Error('missing response');\n  }\n  this._responseType = types.createType(attrs.response, opts);\n\n  var errors = attrs.errors || [];\n  errors.unshift('string');\n  this._errorType = types.createType(errors, opts);\n\n  this._oneWay = !!attrs['one-way'];\n  if (this._oneWay) {\n    if (this._responseType.getTypeName() !== 'null' || errors.length > 1) {\n      throw new Error('unapplicable one-way parameter');\n    }\n  }\n}","label":0}
{"text":"func (context *Context) CreatePCRs(flags int) (*PCRs, error) {\n\tvar handle C.TSS_HPCRS\n\terr := tspiError(C.Tspi_Context_CreateObject(context.context, C.TSS_OBJECT_TYPE_PCRS, (C.TSS_FLAG)(flags), (*C.TSS_HOBJECT)(&handle)))\n\treturn &PCRs{handle: handle, context: context.context}, err\n}","label":0}
{"text":"func (t *File_Template) Normalize() error {\n\tif t.Body == \"\" {\n\t\treturn errors.New(\"body is empty\")\n\t}\n\n\tdefaultParams := make(map[string]*Value, len(t.Param))\n\tfor k, param := range t.Param {\n\t\tif k == \"\" {\n\t\t\treturn fmt.Errorf(\"param %q: invalid name\", k)\n\t\t}\n\t\tif !ParamRegex.MatchString(k) {\n\t\t\treturn fmt.Errorf(\"param %q: malformed name\", k)\n\t\t}\n\t\tif !strings.Contains(t.Body, k) {\n\t\t\treturn fmt.Errorf(\"param %q: not present in body\", k)\n\t\t}\n\t\tif err := param.Normalize(); err != nil {\n\t\t\treturn fmt.Errorf(\"param %q: %s\", k, err)\n\t\t}\n\t\tif param.Default != nil {\n\t\t\tdefaultParams[k] = param.Default\n\t\t} else {\n\t\t\tdefaultParams[k] = param.Schema.Zero()\n\t\t}\n\t}\n\n\tmaybeJSON, err := t.Render(defaultParams)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"rendering: %s\", err)\n\t}\n\n\terr = json.Unmarshal([]byte(maybeJSON), &map[string]interface{}{})\n\tif err != nil {\n\t\treturn fmt.Errorf(\"parsing rendered body: %s\", err)\n\t}\n\treturn nil\n}","label":0}
{"text":"def data(new_data = :rmq_not_provided)\n      if new_data != :rmq_not_provided\n        selected.each do |view|\n          case view\n          when UILabel              then view.setText new_data # set is faster than =\n          when UIButton             then view.setTitle(new_data, forState: UIControlStateNormal)\n          when UIImageView          then view.image = new_data\n          #when UITableView          then\n          when UISwitch             then view.setOn(new_data)\n          #when UIDatePicker         then\n          #when UISegmentedControl   then\n          #when UIRefreshControl     then\n          #when UIPageControl        then\n          #when UISlider             then\n          #when UIStepper            then\n          #when UITabBar             then\n          #when UITableViewCell      then\n          when UITextView           then view.text = new_data\n          when UITextField          then view.text = new_data\n          #when UINavigationBar      then\n          #when UIScrollView         then\n          when UIProgressView       then view.setProgress(new_data, animated: true)\n\n          # TODO, finish\n          end\n        end\n\n        self\n      else\n        out = selected.map do |view|\n          case view\n          when UILabel              then view.text\n          when UIButton             then view.titleForState(UIControlStateNormal)\n          when UIImageView          then view.image\n          #when UITableView          then\n          when UISwitch             then view.on?\n          #when UIDatePicker         then\n          #when UISegmentedControl   then\n          #when UIRefreshControl     then\n          #when UIPageControl        then\n          #when UISlider             then\n          #when UIStepper            then\n          #when UITabBar             then\n          #when UITableViewCell      then\n          when UITextView           then view.text\n          when UITextField          then view.text\n          #when UINavigationBar      then\n          #when UIScrollView         then\n          when UIProgressView       then view.progress\n\n          # TODO, finish\n          end\n        end\n\n        out = out.first if out.length == 1\n        out\n      end\n    end","label":0}
{"text":"def reverse_lookup(self, state, path):\n        \n\n        # Make sure the path starts with a forward slash.\n        if not path.startswith('\/'):\n            path = '\/%s' % path\n\n        # If the state is an error bundle, extract the package stack.\n        if not isinstance(state, list):\n            state = state.package_stack\n\n        content_paths = self.get_triples(subject='content')\n        for content_path in content_paths:\n            chrome_name = content_path['predicate']\n            if not content_path['object']:\n                continue\n            path_location = content_path['object'].split()[0]\n\n            if path_location.startswith('jar:'):\n                if not state:\n                    continue\n\n                # Parse out the JAR and it's location within the chrome.\n                split_jar_url = path_location[4:].split('!', 2)\n                # Ignore invalid\/unsupported JAR URLs.\n                if len(split_jar_url) != 2:\n                    continue\n\n                # Unpack the JAR URL.\n                jar_path, package_path = split_jar_url\n\n                if jar_path != state[0]:\n                    continue\n\n                return 'chrome:\/\/%s' % self._url_chunk_join(chrome_name,\n                                                            package_path,\n                                                            path)\n            else:\n                if state:\n                    continue\n\n                path_location = '\/%s\/' % path_location.strip('\/')\n                rel_path = os.path.relpath(path, path_location)\n\n                if rel_path.startswith('..\/') or rel_path == '..':\n                    continue\n\n                return 'chrome:\/\/%s' % self._url_chunk_join(chrome_name,\n                                                            rel_path)\n\n        return None","label":0}
{"text":"async function _import(modulePath) {\n  let m\n  for (const mp of [ path.resolve(localNodeModules, modulePath), modulePath ]) {\n    try {\n      m = await import(mp)\n    } catch (e) {\n      \/* istanbul ignore next *\/\n      if (e.code !== 'MODULE_NOT_FOUND') {\n        throw e\n      } else if (mp === modulePath) {\n        consola.fatal(\n          `Module ${modulePath} not found.\\n\\n`,\n          `Please install missing dependency:\\n\\n`,\n          `Using npm:  npm i ${modulePath}\\n\\n`,\n          `Using yarn: yarn add ${modulePath}`\n        )\n      }\n    }\n  }\n  return m\n}","label":0}
{"text":"public function createBlock($owner, $type, $parentId, $placeholder, $sort, $data = null, $draft = true)\n    {\n        \/** @var AbstractBlockService $service *\/\n        $service = $this->getService($type);\n        $parent = $parentId ? $this->find($parentId, $draft) : null;\n\n        \/\/ This should replaced with a more hardened function\n        if (is_null($data)) {\n            $data = array();\n        }\n        $data['owner'] = $owner;\n\n        $block = $service->createBlock($data);\n\n        $block->setPosition($placeholder);\n        $block->setSort(0); \/\/ < default, gets recalculated later for entire level\n        $block->setSortParent(-1); \/\/ < need to be calculated when putting in the tree\n\n        \/\/ Set owner\n        if (is_null($parent) || false === $parent->isShared()) {\n            $block->setOwner($owner);\n        }\n\n        $block->setParent($parent);\n\n        \/\/ Save now, rest will be in changeset. All we do is a create a stub entry anyway.\n        $this->save($block, $draft);\n\n        if (count($sort) > 1) {\n            \/\/ Replace the zero value in the posted sort array\n            \/\/ with the newly created id to perform sorting\n            $id = $block->getId();\n            $sort = array_map(\n                function ($v) use ($id) {\n                    return $v == \"\" || $v == \"0\" ? $id : $v;\n                },\n                $sort\n            );\n\n            array_walk($sort, function (&$id) { $id = (int) $id; });\n            $contained = $this->findById($sort, $draft);\n\n            if ($contained) {\n                $contained = $this->setSortsByDirective($contained, $sort);\n\n                foreach ($contained as $node) {\n                    \/\/ If nodes are in the same parent and if their owners match we\n                    \/\/ save the changes. We don't want to save sort changes made to\n                    \/\/ nodes belonging to inherited trees.\n                    if ($node->getParent() === $block->getParent() &&\n                        (($node->getOwner() === null && $block->getOwner() === null) ||\n                        ($node->getOwner()->getId() == $block->getOwner()->getId()))) {\n                        $this->save($node, $draft);\n                    }\n                }\n            }\n        }\n\n        return $block;\n    }","label":0}
{"text":"public function language(array &$submitted, array $options = array())\n    {\n        $this->options = $options;\n        $this->submitted = &$submitted;\n\n        $this->validateLanguage();\n        $this->validateWeight();\n        $this->validateBool('status');\n        $this->validateBool('default');\n        $this->validateNameLanguage();\n        $this->validateNativeNameLanguage();\n        $this->validateCodeLanguage();\n\n        $this->unsetSubmitted('update');\n\n        return $this->getResult();\n    }","label":0}
{"text":"public function FieldHolder($properties = [])\n    {\n        return FieldGroup::create(\n            $this->Title(),\n            $this->Fields\n        )->addExtraClass('dimensions')->FieldHolder($properties);\n    }","label":0}
{"text":"public boolean getProjective() {\n    if (DependencyRelation_Type.featOkTst && ((DependencyRelation_Type)jcasType).casFeat_projective == null)\n      jcasType.jcas.throwFeatMissing(\"projective\", \"de.julielab.jules.types.DependencyRelation\");\n    return jcasType.ll_cas.ll_getBooleanValue(addr, ((DependencyRelation_Type)jcasType).casFeatCode_projective);}","label":0}
{"text":"public static function verifyGID($key, $salt, $gid)\n\t{\n\t\tif(self::createGID($key, $salt) == $gid)\n\t\t\treturn true;\n\t\telse\n\t\t\treturn false;\n\t}","label":0}
{"text":"function incrementCounter(adunit) {\n  adUnits[adunit] = adUnits[adunit] || {};\n  adUnits[adunit].counter = (deepAccess(adUnits, `${adunit}.counter`) + 1) || 1;\n  return adUnits[adunit].counter;\n}","label":0}
{"text":"func (s *DescribeAssociationInput) SetAssociationVersion(v string) *DescribeAssociationInput {\n\ts.AssociationVersion = &v\n\treturn s\n}","label":0}
{"text":"public function query($query, $map = [])\n    {\n        $statement = parent::exec($query, $map);\n        $lastSQL = parent::last();\n        Container::get('logger')->info($lastSQL);\n        array_push(self::$queries, $lastSQL);\n        return $statement;\n    }","label":0}
{"text":"def parse_address(netloc, default_port=8000):\n    ''''''\n    if isinstance(netloc, tuple):\n        if len(netloc) != 2:\n            raise ValueError('Invalid address %s' % str(netloc))\n        return netloc\n    #\n    netloc = native_str(netloc)\n    auth = None\n    # Check if auth is available\n    if '@' in netloc:\n        auth, netloc = netloc.split('@')\n    if netloc.startswith(\"unix:\"):\n        host = netloc.split(\"unix:\")[1]\n        return '%s@%s' % (auth, host) if auth else host\n    # get host\n    if '[' in netloc and ']' in netloc:\n        host = netloc.split(']')[0][1:].lower()\n    elif ':' in netloc:\n        host = netloc.split(':')[0].lower()\n    elif netloc == \"\":\n        host = \"0.0.0.0\"\n    else:\n        host = netloc.lower()\n    # get port\n    netloc = netloc.split(']')[-1]\n    if \":\" in netloc:\n        port = netloc.split(':', 1)[1]\n        if not port.isdigit():\n            raise ValueError(\"%r is not a valid port number.\" % port)\n        port = int(port)\n    else:\n        port = default_port\n    return ('%s@%s' % (auth, host) if auth else host, port)","label":0}
{"text":"def get_node(path, create = false)\n      n = @root\n      path.sub(%r{^\/}, \"\").split(\"\/\").each do |elem|\n        if !(n[elem])\n          return nil if !create\n          n[elem] = Node.new(elem)\n        end\n        n = n[elem]\n      end\n      if n.nil?\n        DBus.logger.debug \"Warning, unknown object #{path}\"\n      end\n      n\n    end","label":0}
{"text":"@Override\n  public void addEncryptionMetadata(StorageObjectMetadata meta,\n                                    MatDesc matDesc,\n                                    byte[] ivData,\n                                    byte[] encKeK,\n                                    long contentLength)\n  {\n    meta.addUserMetadata(getMatdescKey(),\n                         matDesc.toString());\n    meta.addUserMetadata(AZ_ENCRYPTIONDATAPROP, buildEncryptionMetadataJSON(\n        Base64.encodeAsString(ivData),\n        Base64.encodeAsString(encKeK))\n    );\n    meta.setContentLength(contentLength);\n  }","label":0}
{"text":"async def connection_exists(ssid: str) -> Optional[str]:\n    \n    nmcli_conns = await connections()\n    for wifi in [c['name']\n                 for c in nmcli_conns if c['type'] == 'wireless']:\n        res, _ = await _call(['-t', '-f', '802-11-wireless.ssid',\n                              '-m', 'tabular',\n                              'connection', 'show', wifi])\n        if res == ssid:\n            return wifi\n    return None","label":0}
{"text":"func (t *TokenEndpointHandlers) Append(h TokenEndpointHandler) {\n\tfor _, this := range *t {\n\t\tif reflect.TypeOf(this) == reflect.TypeOf(h) {\n\t\t\treturn\n\t\t}\n\t}\n\n\t*t = append(*t, h)\n}","label":0}
{"text":"func (v *Subscriber) UnmarshalJSON(data []byte) error {\n\tr := jlexer.Lexer{Data: data}\n\teasyjson639f989aDecodeCodeCloudfoundryOrgGorouterMbus1(&r, v)\n\treturn r.Error()\n}","label":0}
{"text":"public static function simpleCode(): string\r\n    {\r\n        return join('', array_map(function ($item) {\r\n            return substr($item + 1, -1);\r\n        }, str_split(str_replace('.', '', array_sum(\r\n            explode(' ', microtime())\r\n        )) . mt_rand(10, 99))));\r\n    }","label":0}
{"text":"protected function applyInCondition(ISelectBuilder $selectBuilder)\n    {\n        $selectBuilder->expr($this->fieldColumn, $this->operator, $this->placeholder);\n        $selectBuilder->bindArray($this->placeholder, $this->expression);\n\n        return $this;\n    }","label":0}
{"text":"public void setRow(int row, double[] values) {\n        checkIndices(row, values.length - 1);\n\n        values[row] = values[row];\n    }","label":0}
{"text":"def list_nodes_min(conn=None, call=None):\n    '''\n    \n\n    '''\n    if call == 'action':\n        raise SaltCloudSystemExit(\n            'The list_nodes_min function must be called with -f or --function.'\n        )\n    if conn is None:\n        conn = get_conn()\n    ret = {}\n    for node in conn.list_servers(bare=True):\n        ret[node.name] = {'id': node.id, 'state': node.status}\n    return ret","label":0}
{"text":"def _enter(ins):\n    \n    output = []\n\n    if ins.quad[1] == '__fastcall__':\n        return output\n\n    output.append('push ix')\n    output.append('ld ix, 0')\n    output.append('add ix, sp')\n\n    size_bytes = int(ins.quad[1])\n\n    if size_bytes != 0:\n        if size_bytes < 7:\n            output.append('ld hl, 0')\n            output.extend(['push hl'] * (size_bytes >> 1))\n\n            if size_bytes % 2:  # odd?\n                output.append('push hl')\n                output.append('inc sp')\n        else:\n            output.append('ld hl, -%i' % size_bytes)  # \"Pushes nn bytes\"\n            output.append('add hl, sp')\n            output.append('ld sp, hl')\n            output.append('ld (hl), 0')\n            output.append('ld bc, %i' % (size_bytes - 1))\n            output.append('ld d, h')\n            output.append('ld e, l')\n            output.append('inc de')\n            output.append('ldir')  # Clear with ZEROs\n\n    return output","label":0}
{"text":"func (tracker *callTracker) finalize(sn uint32) {\n\ttracker.lck.Lock()\n\tdefer tracker.lck.Unlock()\n\tc, ok := tracker.calls[sn]\n\tif ok {\n\t\tdelete(tracker.calls, sn)\n\t\tc.ContextCancel()\n\t}\n\treturn\n}","label":0}
{"text":"def check_name_available_except!(name, network)\n      return if name.nil? || network.name_eql?(name) || !find_network(name)\n\n      raise CommandError, \"a network with the name #{name.inspect} \" \\\n                          'already exists'\n    end","label":0}
{"text":"func (c *FakeRuntimeClasses) Watch(opts v1.ListOptions) (watch.Interface, error) {\n\treturn c.Fake.\n\t\tInvokesWatch(testing.NewRootWatchAction(runtimeclassesResource, opts))\n}","label":0}
{"text":"def _migrateStorageSchema(self, metadata: MetaData) -> None:\n        \n\n        relDir = self._packageCfg.config.storage.alembicDir(require_string)\n        alembicDir = os.path.join(self.rootDir, relDir)\n        if not os.path.isdir(alembicDir): raise NotADirectoryError(alembicDir)\n\n        self._dbConn = DbConnection(\n            dbConnectString=self.platform.dbConnectString,\n            metadata=metadata,\n            alembicDir=alembicDir,\n            enableCreateAll=False\n        )\n\n        self._dbConn.migrate()","label":0}
{"text":"function hasPermission($Role, $Permission)\n\t{\n\t\t$Res = Jf::sql ( \"\n\t\t\t\t\tSELECT COUNT(*) AS Result\n\t\t\t\t\tFROM {$this->tablePrefix()}rolepermissions AS TRel\n\t\t\t\t\tJOIN {$this->tablePrefix()}permissions AS TP ON ( TP.ID= TRel.PermissionID)\n\t\t\t\t\tJOIN {$this->tablePrefix()}roles AS TR ON ( TR.ID = TRel.RoleID)\n\t\t\t\t\tWHERE TR.Lft BETWEEN\n\t\t\t\t\t(SELECT Lft FROM {$this->tablePrefix()}roles WHERE ID=?)\n\t\t\t\t\tAND\n\t\t\t\t\t(SELECT Rght FROM {$this->tablePrefix()}roles WHERE ID=?)\n\t\t\t\t\t\/* the above section means any row that is a descendants of our role (if descendant roles have some permission, then our role has it two) *\/\n\t\t\t\t\tAND TP.ID IN (\n\t\t\t\t\tSELECT parent.ID\n\t\t\t\t\tFROM {$this->tablePrefix()}permissions AS node,\n\t\t\t\t\t{$this->tablePrefix()}permissions AS parent\n\t\t\t\t\tWHERE node.Lft BETWEEN parent.Lft AND parent.Rght\n\t\t\t\t\tAND ( node.ID=? )\n\t\t\t\t\tORDER BY parent.Lft\n\t\t\t\t\t);\n\t\t\t\t\t\/*\n\t\t\t\t\tthe above section returns all the parents of (the path to) our permission, so if one of our role or its descendants\n\t\t\t\t\thas an assignment to any of them, we're good.\n\t\t\t\t\t*\/\n\t\t\t\t\t\", $Role, $Role, $Permission );\n\t\treturn $Res [0] ['Result'] >= 1;\n\t}","label":0}
{"text":"public function setPath($type, $path)\n\t{\n\t\tif (!array_key_exists($type, $this->paths))\n\t\t{\n\t\t\tthrow new \\Exception(\\App::get('language')->txt('Unknown asset path type of %s given.', $type));\n\t\t}\n\n\t\t$path = trim((string) $path);\n\n\t\t\/\/ Add separators as needed\n\t\t$path = DS . trim($path, DS);\n\n\t\t\/\/ Add to list of paths\n\t\t$this->paths[$type] = $path;\n\n\t\treturn $this;\n\t}","label":0}
{"text":"def quantile_for_list_of_values(self, **kwargs):\n        \n        if self._is_transposed:\n            kwargs[\"axis\"] = kwargs.get(\"axis\", 0) ^ 1\n            return self.transpose().quantile_for_list_of_values(**kwargs)\n        axis = kwargs.get(\"axis\", 0)\n        q = kwargs.get(\"q\")\n        numeric_only = kwargs.get(\"numeric_only\", True)\n        assert isinstance(q, (pandas.Series, np.ndarray, pandas.Index, list))\n\n        if numeric_only:\n            new_columns = self.numeric_columns()\n        else:\n            new_columns = [\n                col\n                for col, dtype in zip(self.columns, self.dtypes)\n                if (is_numeric_dtype(dtype) or is_datetime_or_timedelta_dtype(dtype))\n            ]\n        if axis:\n            # If along rows, then drop the nonnumeric columns, record the index, and\n            # take transpose. We have to do this because if we don't, the result is all\n            # in one column for some reason.\n            nonnumeric = [\n                col\n                for col, dtype in zip(self.columns, self.dtypes)\n                if not is_numeric_dtype(dtype)\n            ]\n            query_compiler = self.drop(columns=nonnumeric)\n            new_columns = query_compiler.index\n        else:\n            query_compiler = self\n\n        def quantile_builder(df, **kwargs):\n            result = df.quantile(**kwargs)\n            return result.T if axis == 1 else result\n\n        func = query_compiler._prepare_method(quantile_builder, **kwargs)\n        q_index = pandas.Float64Index(q)\n        new_data = query_compiler._map_across_full_axis(axis, func)\n\n        # This took a long time to debug, so here is the rundown of why this is needed.\n        # Previously, we were operating on select indices, but that was broken. We were\n        # not correctly setting the columns\/index. Because of how we compute `to_pandas`\n        # and because of the static nature of the index for `axis=1` it is easier to\n        # just handle this as the transpose (see `quantile_builder` above for the\n        # transpose within the partition) than it is to completely rework other\n        # internal methods. Basically we are returning the transpose of the object for\n        # correctness and cleanliness of the code.\n        if axis == 1:\n            q_index = new_columns\n            new_columns = pandas.Float64Index(q)\n        result = self.__constructor__(new_data, q_index, new_columns)\n        return result.transpose() if axis == 1 else result","label":0}
{"text":"public function add(string $name, string $value): void\n    {\n        $header = $this->make();\n        $header->name = $name;\n        $header->value = $value;\n        $this->set($header);\n    }","label":0}
{"text":"def phi( n ):\n  \"\"\"\"\"\"\n\n  assert isinstance( n, integer_types )\n\n  if n < 3: return 1\n\n  result = 1\n  ff = factorization( n )\n  for f in ff:\n    e = f[1]\n    if e > 1:\n      result = result * f[0] ** (e-1) * ( f[0] - 1 )\n    else:\n      result = result * ( f[0] - 1 )\n  return result","label":0}
{"text":"protected function save($data, $execTime, $queryNr)\n    {\n        $filePrefix = ($this->separateConsoleLog &&\n        $this->app->runningInConsole()) ? '-artisan' : '';\n\n        \/\/ save normal query to file if enabled\n        if ($this->logStatus) {\n            $this->saveLog($data, date('Y-m-d') . $filePrefix . '-log.sql',\n                ($queryNr == 1 && (bool)$this->override));\n        }\n\n        \/\/ save slow query to file if enabled\n        if ($this->slowLogStatus && $execTime >= $this->slowLogTime) {\n            $this->saveLog($data,\n                date('Y-m-d') . $filePrefix . '-slow-log.sql');\n        }\n    }","label":0}
{"text":"public void remove (int objectID) {\n\t\tObject object = idToObject.remove(objectID);\n\t\tif (object != null) objectToID.remove(object, 0);\n\t\tif (TRACE) trace(\"kryonet\", \"Object \" + objectID + \" removed from ObjectSpace: \" + object);\n\t}","label":0}
{"text":"function _createConfigViewOf(file, pane) {\n        var result = new $.Deferred(),\n            view = pane.findViewOfFile(file.fullPath);\n\n        if (view) {\n            \/\/ existing view, then just show it\n            pane.showView(view);\n            result.resolve(view.getFile());\n        } else {\n            DocumentManager.getDocumentForPath(file.fullPath)\n                .done(function (doc) {\n                    var view = new ConfigView(doc, pane.$el);\n                    pane.addView(view, true);\n                    result.resolve(doc.file);\n                })\n                .fail(function (fileError) {\n                    result.reject(fileError);\n                });\n        }\n        return result.promise();\n    }","label":0}
{"text":"func normalize(opts *options, from interface{}) (*Config, Error) {\n\tvFrom := chaseValue(reflect.ValueOf(from))\n\n\tswitch vFrom.Type() {\n\tcase tConfig:\n\t\treturn vFrom.Addr().Interface().(*Config), nil\n\tcase tConfigMap:\n\t\treturn normalizeMap(opts, vFrom)\n\tdefault:\n\t\t\/\/ try to convert vFrom into Config (rebranding)\n\t\tif v, ok := tryTConfig(vFrom); ok {\n\t\t\treturn v.Addr().Interface().(*Config), nil\n\t\t}\n\n\t\t\/\/ normalize given map\/struct value\n\t\tswitch vFrom.Kind() {\n\t\tcase reflect.Struct:\n\t\t\treturn normalizeStruct(opts, vFrom)\n\t\tcase reflect.Map:\n\t\t\treturn normalizeMap(opts, vFrom)\n\t\tcase reflect.Array, reflect.Slice:\n\t\t\ttmp, err := normalizeArray(opts, tagOptions{}, context{}, vFrom)\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\tc, _ := tmp.toConfig(opts)\n\t\t\treturn c, nil\n\t\t}\n\n\t}\n\n\treturn nil, raiseInvalidTopLevelType(from, opts.meta)\n}","label":0}
{"text":"def get_published_date_metadata(self):\n        \n        # Implemented from template for osid.resource.ResourceForm.get_group_metadata_template\n        metadata = dict(self._mdata['published_date'])\n        metadata.update({'existing_date_time_values': self._my_map['publishedDate']})\n        return Metadata(**metadata)","label":0}
{"text":"function() {\n         \/\/copy to make real Array\n         var args = Array.prototype.slice.call( arguments );\n         var action = args.shift();\n         args = deduceArgs(args);\n         var txn = args[1].txn, data = args[0], callback = args[1].callback,\n            comment = args[1].comment, override = args[1].override,\n            fileinput = args[1].fileinput;\n         var commitNow = false;\n         \/\/ set changedOnly default to true unless action == replace\n         var changedOnly = typeof args[1].changedOnly !== 'undefined'\n                              ? args[1].changedOnly : action !== 'replace';\n         if (!txn) {\n             txn = this.data('currentTxn');\n             if (!txn) {\n                 txn = new Txn(args[1].url || $.db.url);\n                 commitNow = true;\n             } else if (args[1].url) {\n               konsole.assert(txn.url ===  args[1].url);\n             }\n         }\n      try {\n         \/\/konsole.log('execute', action, data, callback);\n         var requestIds = [];\n         if (data) {\n            if (action == 'query') {\n                if (!data.conditions) {\n                    data = { conditions : data };\n                }\n                \/\/assert data.query;\n                var thisid = this.attr('itemid');\n                if (thisid) {\n                    if (!data.bindvars) {\n                        data.bindvars = {}\n                    }\n                    data.bindvars['this'] =  thisid;\n                }\n            } else if (!data[_IDkey] && this.attr('itemid')) {\n                data[_IDkey] = this.attr('itemid');\n            }\n            requestIds = [txn.execute(action, data, callback, this.length ? this[0] : null)];\n            if (fileinput)\n             txn._addFileInput(fileinput, data, requestIds[0]);\n         } else {\n            konsole.assert(!fileinput);\n            requestIds = this.map(function() {\n                var obj = bindElement(this, false, undefined, changedOnly);\n                if (override) {\n                  if (typeof override == 'function')\n                    obj = override(obj);\n                  else\n                    $.extend(obj[0], override);\n                }\n\n                var requestid = txn.execute(action, obj, callback, this);\n                $(this).find('[data-dbmethod]').each(function() {\n                  txn._addFileInput(this, obj, requestid);\n                });\n                \/\/konsole.log('about to', action, 'obj', obj);\n                return requestid;\n            }).get();\n         }\n         if (comment) { \/\/XXX this is all kind of hacky\n            comment = comment.replace('$new0', '$new'+requestIds[0]);\n            if (txn.txnComment)\n                txn.txnComment += ' and ' + comment;\n            else\n                txn.txnComment = comment;\n         }\n       } catch (err) {\n         \/\/ invoke callback if it hasn't already been bound\n         \/\/ (if we have requestIds then it has)\n         var rollbackCB = null;\n         if (callback && !requestIds.length) {\n           var elem = this;\n           rollbackCB = function(response) {\n              \/\/ note: if callback returns false event bubbling is stopped\n              return callback.call(elem, null, response.error);\n           };\n         }\n         this.dbRollback(rollbackCB, err, txn);\n         return this;\n       }\n         if (commitNow)\n            txn.commit(null, this);\n         return this;\n     }","label":0}
{"text":"public function kill()\n    {\n        $this->vars = null;\n        $this->ip   = rcube_utils::remote_addr(); \/\/ update IP (might have changed)\n        $this->destroy(session_id());\n        rcube_utils::setcookie($this->cookiename, '-del-', time() - 60);\n    }","label":0}
{"text":"def _archive_tp_file_done_tasks(\n            self,\n            taskpaperPath):\n        \n        self.log.info('starting the ``_archive_tp_file_done_tasks`` method')\n        self.log.info(\"archiving taskpaper file %(taskpaperPath)s\" % locals())\n        taskLog = {}\n        mdArchiveFile = taskpaperPath.replace(\".taskpaper\", \"-tasklog.md\")\n        exists = os.path.exists(mdArchiveFile)\n        if exists:\n            pathToReadFile = mdArchiveFile\n            try:\n                self.log.debug(\"attempting to open the file %s\" %\n                               (pathToReadFile,))\n                readFile = codecs.open(\n                    pathToReadFile, encoding='utf-8', mode='r')\n                thisData = readFile.read()\n                readFile.close()\n            except IOError, e:\n                message = 'could not open the file %s' % (pathToReadFile,)\n                self.log.critical(message)\n                raise IOError(message)\n            readFile.close()\n            table = False\n            for l in thisData.split(\"\\n\"):\n                l = l.encode(\"utf-8\")\n                if \":---\" in l:\n                    table = True\n                    continue\n                if table == True and len(l) and l[0] == \"|\":\n                    dictt = collections.OrderedDict(sorted({}.items()))\n                    columns = l.split(\"|\")\n\n                    dictt[\"task\"] = columns[1].strip().decode(\"utf-8\")\n                    dictt[\"completed\"] = columns[2].strip().decode(\"utf-8\")\n                    dictt[\"project\"] = columns[3].strip().decode(\"utf-8\")\n                    taskLog[dictt[\"task\"] + dictt[\"completed\"] +\n                            dictt[\"project\"]] = dictt\n\n        doc = document(taskpaperPath)\n        aProject = doc.get_project(\"Archive\")\n        if not aProject:\n            return\n\n        doneTasks = aProject.tagged_tasks(\"@done\")\n\n        for task in doneTasks:\n            dateCompleted = \"\"\n            project = \"\"\n            for t in task.tags:\n                if \"done\" in t:\n                    dateCompleted = t.replace(\"done\", \"\").replace(\n                        \"(\", \"\").replace(\")\", \"\")\n                if \"project(\" in t:\n                    project = t.replace(\"project\", \"\").replace(\n                        \"(\", \"\").replace(\")\", \"\")\n\n            dictt = collections.OrderedDict(sorted({}.items()))\n\n            notes = \"\"\n            if task.notes:\n                for n in task.notes:\n                    if len(notes) and notes[-2:] != \". \":\n                        if notes[-1] == \".\":\n                            notes += \" \"\n                        else:\n                            notes += \". \"\n                    notes += n.title\n            if len(notes):\n                notes = \"<br><br>**NOTES:**<br>\" + \\\n                    \"<br>\".join(textwrap.wrap(\n                        notes, 120, break_long_words=True))\n\n            dictt[\"task\"] = \"<br>\".join(textwrap.wrap(task.title[\n                2:], 120, break_long_words=True)) + notes\n            dictt[\"task\"] = dictt[\"task\"].encode(\"utf-8\")\n            dictt[\"completed\"] = dateCompleted\n            dictt[\"project\"] = project\n\n            # SET ENCODE ERROR RETURN VALUE\n\n            # RECODE INTO ASCII\n            dictt[\"task\"] = dictt[\"task\"].decode(\"utf-8\")\n            dictt[\"completed\"] = dictt[\"completed\"].decode(\"utf-8\")\n            dictt[\"project\"] = dictt[\"project\"].decode(\"utf-8\")\n            taskLog[dictt[\"task\"] + dictt[\"completed\"] +\n                    dictt[\"project\"]] = dictt\n\n        taskLog = taskLog.values()\n\n        taskLog = sorted(taskLog, key=itemgetter('task'), reverse=True)\n        taskLog = sorted(taskLog, key=itemgetter('project'), reverse=True)\n        taskLog = sorted(taskLog, key=itemgetter('completed'), reverse=True)\n\n        dataSet = list_of_dictionaries(\n            log=self.log,\n            listOfDictionaries=taskLog\n        )\n\n        markdownData = dataSet.markdown(filepath=None)\n\n        try:\n            self.log.debug(\"attempting to open the file %s\" % (mdArchiveFile,))\n            writeFile = codecs.open(mdArchiveFile, encoding='utf-8', mode='w')\n        except IOError, e:\n            message = 'could not open the file %s' % (mdArchiveFile,)\n            self.log.critical(message)\n            raise IOError(message)\n\n        writeFile.write(markdownData.decode(\"utf-8\"))\n        writeFile.close()\n\n        aProject.delete()\n\n        doc.save()\n\n        self.log.info('completed the ``_archive_tp_file_done_tasks`` method')\n        return None","label":0}
{"text":"func (a *Async) Set(key string, image *imageserver.Image, params imageserver.Params) error {\n\tgo func() {\n\t\t_ = a.Cache.Set(key, image, params)\n\t}()\n\treturn nil\n}","label":0}
{"text":"public static <T> TimestampedValue<T> from(StreamRecord<T> streamRecord) {\n\t\tif (streamRecord.hasTimestamp()) {\n\t\t\treturn new TimestampedValue<>(streamRecord.getValue(), streamRecord.getTimestamp());\n\t\t} else {\n\t\t\treturn new TimestampedValue<>(streamRecord.getValue());\n\t\t}\n\t}","label":0}
{"text":"func (t *txLookup) Remove(hash common.Hash) {\n\tt.lock.Lock()\n\tdefer t.lock.Unlock()\n\n\tdelete(t.all, hash)\n}","label":0}
{"text":"public function getRawData($query)\n    {\n\n        $this->query['query'] = $query;\n\n        \/\/ clear error description\n        if (isset($this->query['errstr'])) {\n            unset($this->query['errstr']);\n        }\n\n        if (!isset($this->query['server'])) {\n            $this->query['status'] = 'error';\n            $this->query['errstr'][] = 'No server specified';\n            return (array());\n        }\n\n        \/\/ Check if protocol is http\n        if (substr($this->query['server'], 0, 7) == 'http:\/\/' ||\n            substr($this->query['server'], 0, 8) == 'https:\/\/'\n        ) {\n            $output = $this->httpQuery($this->query['server']);\n\n            if (!$output) {\n                $this->query['status'] = 'error';\n                $this->query['errstr'][] = 'Connect failed to: ' . $this->query['server'];\n                return (array());\n            }\n\n            $this->query['args'] = substr(strchr($this->query['server'], '?'), 1);\n            $this->query['server'] = strtok($this->query['server'], '?');\n\n            if (substr($this->query['server'], 0, 7) == 'http:\/\/') {\n                $this->query['server_port'] = 80;\n            } else {\n                $this->query['server_port'] = 443;\n            }\n        } else {\n            \/\/ Get args\n            if (strpos($this->query['server'], '?')) {\n                $parts = explode('?', $this->query['server']);\n                $this->query['server'] = trim($parts[0]);\n                $query_args = trim($parts[1]);\n\n                \/\/ replace substitution parameters\n                $query_args = str_replace('{query}', $query, $query_args);\n                $query_args = str_replace('{version}', 'phpWhois' . $this->codeVersion, $query_args);\n\n                $iptools = new IpTools;\n                if (strpos($query_args, '{ip}') !== false) {\n                    $query_args = str_replace('{ip}', $iptools->getClientIp(), $query_args);\n                }\n\n                if (strpos($query_args, '{hname}') !== false) {\n                    $query_args = str_replace('{hname}', gethostbyaddr($iptools->getClientIp()), $query_args);\n                }\n            } else {\n                if (empty($this->query['args'])) {\n                    $query_args = $query;\n                } else {\n                    $query_args = $this->query['args'];\n                }\n            }\n\n            $this->query['args'] = $query_args;\n\n            if (substr($this->query['server'], 0, 9) == 'rwhois:\/\/') {\n                $this->query['server'] = substr($this->query['server'], 9);\n            }\n\n            if (substr($this->query['server'], 0, 8) == 'whois:\/\/') {\n                $this->query['server'] = substr($this->query['server'], 8);\n            }\n\n            \/\/ Get port\n            if (strpos($this->query['server'], ':')) {\n                $parts = explode(':', $this->query['server']);\n                $this->query['server'] = trim($parts[0]);\n                $this->query['server_port'] = trim($parts[1]);\n            } else {\n                $this->query['server_port'] = $this->port;\n            }\n\n            \/\/ Connect to whois server, or return if failed\n            $ptr = $this->connect();\n\n            if ($ptr === false) {\n                $this->query['status'] = 'error';\n                $this->query['errstr'][] = 'Connect failed to: ' . $this->query['server'];\n                return array();\n            }\n\n            stream_set_timeout($ptr, $this->stimeout);\n            stream_set_blocking($ptr, 0);\n\n            \/\/ Send query\n            fputs($ptr, trim($query_args) . \"\\r\\n\");\n\n            \/\/ Prepare to receive result\n            $raw = '';\n            $start = time();\n            $null = null;\n            $r = array($ptr);\n\n            while (!feof($ptr)) {\n                if (!empty($r)) {\n                    if (stream_select($r, $null, $null, $this->stimeout)) {\n                        $raw .= fgets($ptr, $this->buffer);\n                    }\n                }\n\n                if (time() - $start > $this->stimeout) {\n                    $this->query['status'] = 'error';\n                    $this->query['errstr'][] = 'Timeout reading from ' . $this->query['server'];\n                    return array();\n                }\n            }\n\n            if (array_key_exists($this->query['server'], $this->NON_UTF8)) {\n                $raw = utf8_encode($raw);\n            }\n\n            $output = explode(\"\\n\", $raw);\n\n            \/\/ Drop empty last line (if it's empty! - saleck)\n            if (empty($output[count($output) - 1])) {\n                unset($output[count($output) - 1]);\n            }\n        }\n\n        return $output;\n    }","label":0}
{"text":"private function getClassConstants()\n    {\n        $pgClass = $this->entity->pgClass;\n\n        $this->class->classComponents[] = new ClassConstant(\n            'TABLE',\n            new Sformatf( \"const TABLE = '%s';\", $pgClass->getFullyQualifiedName() )\n        );\n        $this->class->classComponents[] = new ClassConstant(\n            'PARENT',\n            new Sformatf(\n                \"const PARENT = %s;\",\n                $pgClass->isInherited($parent) ? \"'{$parent->getFullyQualifiedName()}'\" : 'null'\n            )\n        );\n    }","label":0}
{"text":"@Internal\n    public static Optional<NettyMutableHttpResponse> get(NettyHttpRequest<?> request) {\n        NettyMutableHttpResponse nettyHttpResponse = request.attr(KEY).get();\n        return Optional.ofNullable(nettyHttpResponse);\n    }","label":0}
{"text":"protected function getBreadcrumbsContent($title)\n    {\n        if (!$stub = $this->getBreadcrumbsStub()) {\n            return '';\n        }\n\n        return strtr($stub, array_merge($this->getCommonReplacements(), [\n            '{{title}}' => ucfirst($title),\n        ]));\n    }","label":0}
{"text":"def flag_dipthongs(self, syllables: List[str]) -> List[int]:\n        \n        long_positions = []\n        for idx, syl in enumerate(syllables):\n            for dipthong in self.constants.DIPTHONGS:\n                if dipthong in syllables[idx]:\n                    if not string_utils.starts_with_qu(syllables[idx]):\n                        long_positions.append(idx)\n        return long_positions","label":0}
{"text":"public static JCGLType typeFromGL(\n    final int type)\n  {\n    switch (type) {\n      case GL2ES2.GL_BOOL:\n        return JCGLType.TYPE_BOOLEAN;\n      case GL2ES2.GL_BOOL_VEC2:\n        return JCGLType.TYPE_BOOLEAN_VECTOR_2;\n      case GL2ES2.GL_BOOL_VEC3:\n        return JCGLType.TYPE_BOOLEAN_VECTOR_3;\n      case GL2ES2.GL_BOOL_VEC4:\n        return JCGLType.TYPE_BOOLEAN_VECTOR_4;\n\n      case GL.GL_FLOAT:\n        return JCGLType.TYPE_FLOAT;\n      case GL2ES2.GL_FLOAT_MAT2:\n        return JCGLType.TYPE_FLOAT_MATRIX_2;\n      case GL2ES2.GL_FLOAT_MAT3:\n        return JCGLType.TYPE_FLOAT_MATRIX_3;\n      case GL2ES2.GL_FLOAT_MAT4:\n        return JCGLType.TYPE_FLOAT_MATRIX_4;\n\n      case GL3.GL_FLOAT_MAT4x3:\n        return JCGLType.TYPE_FLOAT_MATRIX_4x3;\n      case GL3.GL_FLOAT_MAT4x2:\n        return JCGLType.TYPE_FLOAT_MATRIX_4x2;\n\n      case GL3.GL_FLOAT_MAT3x4:\n        return JCGLType.TYPE_FLOAT_MATRIX_3x4;\n      case GL3.GL_FLOAT_MAT3x2:\n        return JCGLType.TYPE_FLOAT_MATRIX_3x2;\n\n      case GL3.GL_FLOAT_MAT2x4:\n        return JCGLType.TYPE_FLOAT_MATRIX_2x4;\n      case GL3.GL_FLOAT_MAT2x3:\n        return JCGLType.TYPE_FLOAT_MATRIX_2x3;\n\n      case GL2ES2.GL_FLOAT_VEC2:\n        return JCGLType.TYPE_FLOAT_VECTOR_2;\n      case GL2ES2.GL_FLOAT_VEC3:\n        return JCGLType.TYPE_FLOAT_VECTOR_3;\n      case GL2ES2.GL_FLOAT_VEC4:\n        return JCGLType.TYPE_FLOAT_VECTOR_4;\n\n      case GL2ES2.GL_INT:\n        return JCGLType.TYPE_INTEGER;\n      case GL2ES2.GL_INT_VEC2:\n        return JCGLType.TYPE_INTEGER_VECTOR_2;\n      case GL2ES2.GL_INT_VEC3:\n        return JCGLType.TYPE_INTEGER_VECTOR_3;\n      case GL2ES2.GL_INT_VEC4:\n        return JCGLType.TYPE_INTEGER_VECTOR_4;\n\n      case GL2ES2.GL_UNSIGNED_INT:\n        return JCGLType.TYPE_UNSIGNED_INTEGER;\n      case GL3.GL_UNSIGNED_INT_VEC2:\n        return JCGLType.TYPE_UNSIGNED_INTEGER_VECTOR_2;\n      case GL3.GL_UNSIGNED_INT_VEC3:\n        return JCGLType.TYPE_UNSIGNED_INTEGER_VECTOR_3;\n      case GL3.GL_UNSIGNED_INT_VEC4:\n        return JCGLType.TYPE_UNSIGNED_INTEGER_VECTOR_4;\n\n      case GL2ES2.GL_SAMPLER_2D:\n        return JCGLType.TYPE_SAMPLER_2D;\n      case GL2ES2.GL_SAMPLER_3D:\n        return JCGLType.TYPE_SAMPLER_3D;\n      case GL2ES2.GL_SAMPLER_CUBE:\n        return JCGLType.TYPE_SAMPLER_CUBE;\n      default:\n        throw new UnreachableCodeException();\n    }\n  }","label":0}
{"text":"protected void setIsolationLevel(int isolationLevel)\n                    throws IsolationLevelChangeException\n    {\n        if (TraceComponent.isAnyTracingEnabled() && tc.isEventEnabled())\n        {\n            Tr.event(tc, \"current isolation level = \"\n                         + MethodAttribUtils.getIsolationLevelString(ivIsolationLevel)\n                         + \", attempting to change to = \"\n                         + MethodAttribUtils.getIsolationLevelString(isolationLevel)); \/\/ PK31372\n        }\n\n        \/\/ Treat TRANSACTION_NONE as \"don't care\".  The current value may be\n        \/\/ NONE because it hasn't been set yet, or because all the methods\n        \/\/ invoked so far did not have an isolation level specified by\n        \/\/ the customer (in the deployment descriptor).                 d107762\n        if (ivIsolationLevel == java.sql.Connection.TRANSACTION_NONE) {\n            ivIsolationLevel = isolationLevel;\n        } else if (ivIsolationLevel != isolationLevel &&\n                   isolationLevel != java.sql.Connection.TRANSACTION_NONE) {\n            throw new IsolationLevelChangeException();\n        }\n    }","label":0}
{"text":"func (c *SQLiteContext) ResultInt64(i int64) {\n\tC.sqlite3_result_int64((*C.sqlite3_context)(c), C.sqlite3_int64(i))\n}","label":0}
{"text":"func (b bitboard) Draw() string {\n\ts := \"\\n A B C D E F G H\\n\"\n\tfor r := 7; r >= 0; r-- {\n\t\ts += Rank(r).String()\n\t\tfor f := 0; f < numOfSquaresInRow; f++ {\n\t\t\tsq := getSquare(File(f), Rank(r))\n\t\t\tif b.Occupied(sq) {\n\t\t\t\ts += \"1\"\n\t\t\t} else {\n\t\t\t\ts += \"0\"\n\t\t\t}\n\t\t\ts += \" \"\n\t\t}\n\t\ts += \"\\n\"\n\t}\n\treturn s\n}","label":0}
{"text":"public function useFilterArray(array $filterArray)\n    {\n        foreach ($filterArray as $key => $additionalFilter) {\n            $this->useFilter($additionalFilter, $key);\n        }\n\n        return $this;\n    }","label":0}
{"text":"def process_metadata(meta):\n    \n    mvgds = []\n\n    metadata = meta[0]\n\n    for mvgd in meta:\n        if isinstance(mvgd['mv_grid_districts'], list):\n            mvgds.extend(mvgd['mv_grid_districts'])\n        else:\n            mvgds.append(mvgd['mv_grid_districts'])\n\n    metadata['mv_grid_districts'] = mvgds\n\n    return metadata","label":0}
{"text":"public function importSql($path, $files = array('setup_structure.sql'))\n    {\n        $status = false;\n        $fImport = null;\n        if(file_exists($path)) {\n            foreach($files as $file) {\n                if(file_exists($path.$file)) {\n                    $fImport = file_get_contents($path.$file);\n                    $this->executeRawQuery($fImport);\n                    $this->importTableName = array_merge($this->importTableName, $this->getSqlFileTables($path.$file));\n                }\n            }\n        }\n\n        return $status;\n    }","label":0}
{"text":"def del_big_nodes(self, grater_than=215):\n        \"\"\"\"\"\"\n        G = self._graph\n        it = G.nodes_iter()\n        node_paths = []\n        node_names = []\n        del_nodes = []\n        summe = 1\n        count = 1\n        for node in it:\n            l = len(G[node])\n            if l > grater_than:\n                del_nodes.append(node)\n                continue\n            summe += l\n            node_names.append(node)\n            node_paths.append(l)\n            count += 1\n        for node in del_nodes:\n            G.remove_node(node)\n            if node > 1000000000:\n                self.valid_user.pop(node)\n\n        print(\"Nodes deleted: {}\".format(len(del_nodes)))","label":0}
{"text":"public function upload(FileRequest $request)\n    {\n        $crudeName = $request->input('crudeName');\n        $crude = CrudeInstance::get($crudeName);\n        $files = $request->file()['file'];\n        $id = $request->input('modelId');\n        $errors = [];\n\n        if ($crude instanceof \\JanDolata\\CrudeCRUD\\Engine\\Interfaces\\WithValidationInterface) {\n            foreach($files as $key => $file) {\n                $rules = $crude->getValidationRules(['file']);\n\n                $mime = $file->getMimeType();\n                $fileTypeRules = 'file_'.collect(explode('\/', $mime))->first();\n\n                empty($crude->getValidationRules([$fileTypeRules])[$fileTypeRules])\n                    ? $rules = $rules\n                    : $rules['file'] = $rules['file'] . '|' . $crude->getValidationRules([$fileTypeRules])[$fileTypeRules];\n\n                $validator = Validator::make(['file' => $file], $rules);\n\n                if ($validator->fails()) {\n                    unset($files[$key]);\n                    $errors[] = $file->getClientOriginalName() . ': '. $validator->messages()->first();\n                }\n            }\n        }\n\n        $model = empty($files)\n            ? $crude->getById($id)\n            : $crude->uploadFilesById($id, $files);\n\n        $response = ['success' => true, 'model' => $model];\n\n        if (!empty($errors)) {\n            $response = array_merge($response, ['errors' => join('<br\/>', $errors)]);\n            $response['success'] = false;\n        }\n\n        return $response;\n    }","label":0}
{"text":"def get_project(self, project_name):\r\n        \r\n        headers = {}\r\n        params = {}\r\n        resource = \"\/\"\r\n\r\n        (resp, header) = self._send(\"GET\", project_name, None, resource, params, headers)\r\n        return GetProjectResponse(resp, header)","label":0}
{"text":"public void play(Module module, int source, boolean loop, boolean start) {\n\t\tthis.source = source;\n\t\tthis.loop = loop;\n\t\tthis.module = module;\n\t\tdone = false;\n\t\t\n\t\tibxm = new IBXM(48000);\n\t\tibxm.set_module(module);\n\t\tsongDuration = ibxm.calculate_song_duration();\n\n\t\tif (bufferNames != null) {\n\t\t\tAL10.alSourceStop(source);\n\t\t\tbufferNames.flip();\n\t\t\tAL10.alDeleteBuffers(bufferNames);\n\t\t}\n\t\t\n\t\tbufferNames = BufferUtils.createIntBuffer(2);\n\t\tAL10.alGenBuffers(bufferNames);\n\t\tremainingBufferCount = 2;\n\t\t\n\t\tfor (int i=0;i<2;i++) {\n\t        stream(bufferNames.get(i));\n\t\t}\n        AL10.alSourceQueueBuffers(source, bufferNames);\n\t\tAL10.alSourcef(source, AL10.AL_PITCH, 1.0f);\n\t\tAL10.alSourcef(source, AL10.AL_GAIN, 1.0f); \n\t\t\n\t\tif (start) {\n\t\t\tAL10.alSourcePlay(source);\n\t\t}\n\t}","label":0}
{"text":"public void startQueryService(RpcService rpcService, ResourceID resourceID) {\n\t\tsynchronized (lock) {\n\t\t\tPreconditions.checkState(!isShutdown(), \"The metric registry has already been shut down.\");\n\n\t\t\ttry {\n\t\t\t\tmetricQueryServiceRpcService = rpcService;\n\t\t\t\tqueryService = MetricQueryService.createMetricQueryService(rpcService, resourceID, maximumFramesize);\n\t\t\t\tqueryService.start();\n\t\t\t} catch (Exception e) {\n\t\t\t\tLOG.warn(\"Could not start MetricDumpActor. No metrics will be submitted to the WebInterface.\", e);\n\t\t\t}\n\t\t}\n\t}","label":0}
{"text":"def random_secret() -> Secret:\n    \n    while True:\n        secret = os.urandom(32)\n        if secret != constants.EMPTY_HASH:\n            return Secret(secret)","label":0}
{"text":"def parse(self):\n        \n\n        try:\n\n            self.vars['handle'] = self.json['handle'].strip()\n\n        except (KeyError, ValueError):\n\n            log.debug('Handle missing, json_output: {0}'.format(json.dumps(\n                self.json)))\n            raise InvalidNetworkObject('Handle is missing for RDAP network '\n                                       'object')\n\n        try:\n\n            self.vars['ip_version'] = self.json['ipVersion'].strip()\n\n            # RDAP IPv4 addresses are padded to 3 digits per octet, remove\n            # the leading 0's.\n            if self.vars['ip_version'] == 'v4':\n\n                self.vars['start_address'] = ip_address(\n                    ipv4_lstrip_zeros(self.json['startAddress'])\n                ).__str__()\n\n                self.vars['end_address'] = ip_address(\n                    ipv4_lstrip_zeros(self.json['endAddress'])\n                ).__str__()\n\n            # No bugs found for IPv6 yet, proceed as normal.\n            else:\n\n                self.vars['start_address'] = self.json['startAddress'].strip()\n                self.vars['end_address'] = self.json['endAddress'].strip()\n\n        except (KeyError, ValueError, TypeError):\n\n            log.debug('IP address data incomplete. Data parsed prior to '\n                      'exception: {0}'.format(json.dumps(self.vars)))\n            raise InvalidNetworkObject('IP address data is missing for RDAP '\n                                       'network object.')\n\n        try:\n\n            self.vars['cidr'] = ', '.join(calculate_cidr(\n                self.vars['start_address'], self.vars['end_address']\n            ))\n\n        except (KeyError, ValueError, TypeError, AttributeError) as \\\n                e:  # pragma: no cover\n\n            log.debug('CIDR calculation failed: {0}'.format(e))\n            pass\n\n        for v in ['name', 'type', 'country']:\n\n            try:\n\n                self.vars[v] = self.json[v].strip()\n\n            except (KeyError, ValueError):\n\n                pass\n\n        try:\n\n            self.vars['parent_handle'] = self.json['parentHandle'].strip()\n\n        except (KeyError, ValueError):\n\n            pass\n\n        self._parse()","label":0}
{"text":"func (m *KubernetesMonitor) RefreshPUs(ctx context.Context, pod *api.Pod) error {\n\tif pod == nil {\n\t\treturn fmt.Errorf(\"pod is nil\")\n\t}\n\n\tpodNamespace := pod.GetNamespace()\n\tpodName := pod.GetName()\n\n\tpuIDs := m.cache.getPUIDsbyPod(podNamespace, podName)\n\n\tfor _, puid := range puIDs {\n\t\tdockerRuntime := m.cache.getDockerRuntimeByPUID(puid)\n\t\tif dockerRuntime == nil {\n\t\t\tcontinue\n\t\t}\n\n\t\tkubernetesRuntime, managedContainer, err := m.kubernetesExtractor(dockerRuntime, pod)\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"error while processing Kubernetes pod %s\/%s for container %s %s\", podNamespace, podName, puid, err)\n\t\t}\n\n\t\t\/\/ UnmanagedContainers are simply ignored. It should not come this far if it is a non managed container anyways.\n\t\tif !managedContainer {\n\t\t\tzap.L().Debug(\"unmanaged Kubernetes container\", zap.String(\"puID\", puid), zap.String(\"podNamespace\", podNamespace), zap.String(\"podName\", podName))\n\t\t\tcontinue\n\t\t}\n\n\t\t\/\/ We keep the cache uptoDate for future queries\n\t\tm.cache.updatePUIDCache(podNamespace, podName, puid, dockerRuntime, kubernetesRuntime)\n\n\t\tif err := m.handlers.Policy.HandlePUEvent(ctx, puid, common.EventUpdate, kubernetesRuntime); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\treturn nil\n}","label":0}
{"text":"func (model *Model) Suggestions(input string, exhaustive bool) []string {\n\tmodel.RLock()\n\tsuggestions := model.suggestPotential(input, exhaustive)\n\tmodel.RUnlock()\n\toutput := make([]string, 0, 10)\n\tfor _, suggestion := range suggestions {\n\t\toutput = append(output, suggestion.Term)\n\t}\n\treturn output\n}","label":0}
{"text":"@Override\n    public void delete(final T value) {\n        if (value != null) {\n            final String id = value.getId();\n            if (!StringUtils.isEmpty(id)) {\n                doDelete(id);\n                notifyDeleted(value);\n            }\n        }\n    }","label":0}
{"text":"public static byte[] encryptBytes (PublicKey key, byte[] secret, byte[] salt)\n    {\n        byte[] encrypt = new byte[secret.length + salt.length];\n        for (int ii = 0; ii < secret.length; ii++) {\n            encrypt[ii] = secret[ii];\n        }\n        for (int ii = 0; ii < salt.length; ii++) {\n            encrypt[secret.length + ii] = salt[ii];\n        }\n        try {\n            return getRSACipher(key).doFinal(encrypt);\n        } catch (GeneralSecurityException gse) {\n            log.warning(\"Failed to encrypt bytes\", gse);\n        }\n        return encrypt;\n    }","label":0}
{"text":"public function getDestinationFilePath()\n    {\n        $path = $this->laravel['components']->getComponentPath($this->getComponentName());\n\n        $controllerPath = $this->laravel['components']->config('paths.generator.controller');\n\n        return $path . $controllerPath . '\/' . $this->getControllerName() . '.php';\n    }","label":0}
{"text":"def listen(self):\n        \"\"\"\"\"\"\n        while True:\n            message = self.pull.recv()\n            logger.debug(\"received message of length %d\" % len(message))\n            uuid, message = message[:32], message[32:]\n            response = uuid + self.handle(message)\n            self.push.send(response)","label":0}
{"text":"func (s *Device) SetPermissions(v []*string) *Device {\n\ts.Permissions = v\n\treturn s\n}","label":0}
{"text":"func atoi(s string) (x int, err error) {\n\tq, rem, err := signedLeadingInt(s)\n\tx = int(q)\n\tif err != nil || rem != \"\" {\n\t\treturn 0, atoiError\n\t}\n\treturn x, nil\n}","label":0}
{"text":"function implodeData(data) {\n\tvar dataArray = [], field;\n\tfor(field in data) {\n\t\tdataArray.push(types.STRING);\n\t\tdataArray.push(encodeString(field));\n\t\tdataArray.push(types.STRING);\n\t\tdataArray.push(encodeString(data[field]));\n\t}\n\treturn implodeArray(dataArray);\n}","label":0}
{"text":"public static function rgbaValueToRgbaComponents($rgb)\n    {\n        self::throwExceptionIfNotRgbaValue($rgb);\n\n        $alpha = self::rgbaValueToAlphaComponent($rgb);\n\n        if (0 === $alpha) {\n            $alpha = 0xFF;\n        }\n\n        return [\n            'R' => self::rgbaValueToRedComponent($rgb),\n            'G' => self::rgbaValueToGreenComponent($rgb),\n            'B' => self::rgbaValueToBlueComponent($rgb),\n            'A' => $alpha\n        ];\n    }","label":0}
{"text":"public void marshall(Accelerator accelerator, ProtocolMarshaller protocolMarshaller) {\n\n        if (accelerator == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(accelerator.getAcceleratorArn(), ACCELERATORARN_BINDING);\n            protocolMarshaller.marshall(accelerator.getName(), NAME_BINDING);\n            protocolMarshaller.marshall(accelerator.getIpAddressType(), IPADDRESSTYPE_BINDING);\n            protocolMarshaller.marshall(accelerator.getEnabled(), ENABLED_BINDING);\n            protocolMarshaller.marshall(accelerator.getIpSets(), IPSETS_BINDING);\n            protocolMarshaller.marshall(accelerator.getStatus(), STATUS_BINDING);\n            protocolMarshaller.marshall(accelerator.getCreatedTime(), CREATEDTIME_BINDING);\n            protocolMarshaller.marshall(accelerator.getLastModifiedTime(), LASTMODIFIEDTIME_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }","label":0}
{"text":"func CopyBindVariables(bindVariables map[string]*querypb.BindVariable) map[string]*querypb.BindVariable {\n\tresult := make(map[string]*querypb.BindVariable, len(bindVariables))\n\tfor key, value := range bindVariables {\n\t\tresult[key] = value\n\t}\n\treturn result\n}","label":0}
{"text":"function parseStatsOldAPI (peerConnection,\n                                                      prevStats,\n                                                      currentStats,\n                                                      completion) {\n\n      \/* this parses a result if there it contains the video bitrate *\/\n      var parseVideoStats = function (result) {\n            if (result.stat('googFrameRateSent')) {\n              currentStats.videoSentBytes = Number(result.stat('bytesSent'));\n              currentStats.videoSentPackets = Number(result.stat('packetsSent'));\n              currentStats.videoSentPacketsLost = Number(result.stat('packetsLost'));\n              currentStats.videoRtt = Number(result.stat('googRtt'));\n              currentStats.videoFrameRate = Number(result.stat('googFrameRateInput'));\n              currentStats.videoWidth = Number(result.stat('googFrameWidthSent'));\n              currentStats.videoHeight = Number(result.stat('googFrameHeightSent'));\n              currentStats.videoCodec = result.stat('googCodecName');\n            } else if (result.stat('googFrameRateReceived')) {\n              currentStats.videoRecvBytes = Number(result.stat('bytesReceived'));\n              currentStats.videoRecvPackets = Number(result.stat('packetsReceived'));\n              currentStats.videoRecvPacketsLost = Number(result.stat('packetsLost'));\n              currentStats.videoFrameRate = Number(result.stat('googFrameRateOutput'));\n              currentStats.videoWidth = Number(result.stat('googFrameWidthReceived'));\n              currentStats.videoHeight = Number(result.stat('googFrameHeightReceived'));\n              currentStats.videoCodec = result.stat('googCodecName');\n            }\n            return null;\n          },\n\n          parseAudioStats = function (result) {\n            if (result.stat('audioInputLevel')) {\n              currentStats.audioSentPackets = Number(result.stat('packetsSent'));\n              currentStats.audioSentPacketsLost = Number(result.stat('packetsLost'));\n              currentStats.audioSentBytes =  Number(result.stat('bytesSent'));\n              currentStats.audioCodec = result.stat('googCodecName');\n              currentStats.audioRtt = Number(result.stat('googRtt'));\n            } else if (result.stat('audioOutputLevel')) {\n              currentStats.audioRecvPackets = Number(result.stat('packetsReceived'));\n              currentStats.audioRecvPacketsLost = Number(result.stat('packetsLost'));\n              currentStats.audioRecvBytes =  Number(result.stat('bytesReceived'));\n              currentStats.audioCodec = result.stat('googCodecName');\n            }\n          },\n\n          parseStatsReports = function (stats) {\n            if (stats.result) {\n              var resultList = stats.result();\n              for (var resultIndex = 0; resultIndex < resultList.length; resultIndex++) {\n                var result = resultList[resultIndex];\n\n                if (result.stat) {\n\n                  if(result.stat('googActiveConnection') === 'true') {\n                    currentStats.localCandidateType = result.stat('googLocalCandidateType');\n                    currentStats.remoteCandidateType = result.stat('googRemoteCandidateType');\n                    currentStats.transportType = result.stat('googTransportType');\n                  }\n\n                  parseAudioStats(result);\n                  parseVideoStats(result);\n                }\n              }\n            }\n\n            completion(null, currentStats);\n          };\n\n      peerConnection.getStats(parseStatsReports);\n    }","label":0}
{"text":"public function createRoute(?string $method, string $path, $handlers): Route\n    {\n        if ($handlers instanceof \\Peak\\Blueprint\\Http\\Stack) {\n            return new Route($method, $path, $handlers);\n        }\n        if (!is_array($handlers)) {\n            $handlers = [$handlers];\n        }\n        return new Route($method, $path, new Stack($handlers, $this->getHandlerResolver()));\n    }","label":0}
{"text":"function getAppLinkIntentFilterDictionary(linkDomain, androidPrefix) {\n    const scheme = \"https\";\n    const output = {\n      $: {\n        \"android:host\": linkDomain,\n        \"android:scheme\": scheme\n      }\n    };\n\n    if (androidPrefix) {\n      output.$[\"android:pathPrefix\"] = androidPrefix;\n    }\n\n    return output;\n  }","label":0}
{"text":"func CreateMulticastGroup(db sqlx.Execer, mg *MulticastGroup) error {\n\tnow := time.Now()\n\tmg.CreatedAt = now\n\tmg.UpdatedAt = now\n\n\tif mg.ID == uuid.Nil {\n\t\tvar err error\n\t\tmg.ID, err = uuid.NewV4()\n\t\tif err != nil {\n\t\t\treturn errors.Wrap(err, \"new uuid v4 error\")\n\t\t}\n\t}\n\n\t_, err := db.Exec(`\n\t\tinsert into multicast_group (\n\t\t\tid,\n\t\t\tcreated_at,\n\t\t\tupdated_at,\n\t\t\tmc_addr,\n\t\t\tmc_nwk_s_key,\n\t\t\tf_cnt,\n\t\t\tgroup_type,\n\t\t\tdr,\n\t\t\tfrequency,\n\t\t\tping_slot_period,\n\t\t\tservice_profile_id,\n\t\t\trouting_profile_id\n\t\t) values ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12)`,\n\t\tmg.ID,\n\t\tmg.CreatedAt,\n\t\tmg.UpdatedAt,\n\t\tmg.MCAddr[:],\n\t\tmg.MCNwkSKey[:],\n\t\tmg.FCnt,\n\t\tmg.GroupType,\n\t\tmg.DR,\n\t\tmg.Frequency,\n\t\tmg.PingSlotPeriod,\n\t\tmg.ServiceProfileID,\n\t\tmg.RoutingProfileID,\n\t)\n\tif err != nil {\n\t\treturn handlePSQLError(err, \"insert error\")\n\t}\n\n\tlog.WithFields(log.Fields{\n\t\t\"id\": mg.ID,\n\t}).Info(\"multicast-group created\")\n\n\treturn nil\n}","label":0}
{"text":"def asset_precompiled?(logical_path)\n      if precompiled_assets.include?(logical_path)\n        true\n      elsif !config.cache_classes\n        # Check to see if precompile list has been updated\n        precompiled_assets(true).include?(logical_path)\n      else\n        false\n      end\n    end","label":0}
{"text":"def prefixedname_to_iriref(self, prefix: ShExDocParser.PrefixedNameContext) -> ShExJ.IRIREF:\n        \n        return ShExJ.IRIREF(self.prefixedname_to_str(prefix))","label":0}
{"text":"public Matrix3D plus(Matrix3D B) {\n        Matrix3D A = this;\n        if (B.M != A.M || B.N != A.N || B.K != A.K) throw new RuntimeException(\"Illegal matrix dimensions.\");\n        Matrix3D C = new Matrix3D(M, N, K);\n        for (int i = 0; i < M; i++)\n            for (int j = 0; j < N; j++)\n            \tfor (int l = 0; l < K; l++)\n            \t\tC.data[i][j][l] = A.data[i][j][l] + B.data[i][j][l];\n        return C;\n    }","label":0}
{"text":"function removeOption($value)\n    {\n        $key=array_search($value, $this->_values);\n        if ($key!==FALSE and $key!==null) {\n            unset($this->_values[$key]);\n        }\n        foreach ($this->_options as $key=>$option){\n            if ($option['attr']['value']==$value){\n                unset($this->_options[$key]);\n                \/\/ we must reindex the options because the ugly code in quickforms' select.php expects that keys are 0,1,2,3... !?!?\n                $this->_options = array_merge($this->_options);\n                return;\n            }\n        }\n    }","label":0}
{"text":"public function editBlockConfiguration(Tree $tree, int $block_id): void\n    {\n        $PEDIGREE_ROOT_ID = $tree->getPreference('PEDIGREE_ROOT_ID');\n        $gedcomid         = $tree->getUserPreference(Auth::user(), 'gedcomid');\n\n        $type = $this->getBlockSetting($block_id, 'type', 'pedigree');\n        $pid  = $this->getBlockSetting($block_id, 'pid', Auth::check() ? ($gedcomid ?: $PEDIGREE_ROOT_ID) : $PEDIGREE_ROOT_ID);\n\n        $charts = [\n            'pedigree'    => I18N::translate('Pedigree'),\n            'descendants' => I18N::translate('Descendants'),\n            'hourglass'   => I18N::translate('Hourglass chart'),\n            'treenav'     => I18N::translate('Interactive tree'),\n        ];\n        uasort($charts, 'Fisharebest\\Webtrees\\I18N::strcasecmp');\n\n        $individual = Individual::getInstance($pid, $tree);\n\n        echo view('modules\/charts\/config', [\n            'charts'     => $charts,\n            'individual' => $individual,\n            'tree'       => $tree,\n            'type'       => $type,\n        ]);\n    }","label":0}
{"text":"public List<String> getModulesToInstall() {\n\n        if ((m_installModules == null) || m_installModules.isEmpty()) {\n            return Collections.emptyList();\n        }\n        return Collections.unmodifiableList(m_installModules);\n    }","label":0}
{"text":"public function setMainFax($entity)\n    {\n        \/\/ set main to first entry or to null\n        if ($entity->getFaxes()->isEmpty()) {\n            $entity->setMainFax(null);\n        } else {\n            $entity->setMainFax($entity->getFaxes()->first()->getFax());\n        }\n    }","label":0}
{"text":"public static <K, V> Map<K, V> asUnmodifiable(Map<K, V> self) {\n        return Collections.unmodifiableMap(self);\n    }","label":0}
{"text":"private static function constant(string $name)\n    {\n        $constant = static::class . '::' . $name;\n\n        if (!defined($constant)) {\n            $message = sprintf('Enum %s does not contain value named %s.', static::class, $name);\n            throw new InvalidArgumentException($message);\n        }\n\n        return constant($constant);\n    }","label":0}
{"text":"func (l *logger) Error(format string, args ...interface{}) {\n\tif l.Level >= ERROR {\n\t\tl.log(ERROR, format, args...)\n\t}\n}","label":0}
{"text":"func (scope *Scope) PrimaryField() *Field {\n\tif primaryFields := scope.GetModelStruct().PrimaryFields; len(primaryFields) > 0 {\n\t\tif len(primaryFields) > 1 {\n\t\t\tif field, ok := scope.FieldByName(\"id\"); ok {\n\t\t\t\treturn field\n\t\t\t}\n\t\t}\n\t\treturn scope.PrimaryFields()[0]\n\t}\n\treturn nil\n}","label":0}
{"text":"def add_entries_to_gallery(app, doctree, docname):\n    \n    if docname != 'gallery':\n        return\n\n    if not has_gallery(app.builder.name):\n        return\n\n    # Find gallery node\n    try:\n        node = doctree.traverse(gallery)[0]\n    except TypeError:\n        return\n\n    content = []\n    for entry in app.env.gallery_entries:\n        raw_html_node = nodes.raw('', text=entry.html, format='html')\n        content.append(raw_html_node)\n\n    # Even when content is empty, we want the gallery node replaced\n    node.replace_self(content)","label":0}
{"text":"def scheduler(rq, ctx, verbose, burst, queue, interval, pid):\n    \"\"\n    scheduler = rq.get_scheduler(interval=interval, queue=queue)\n    if pid:\n        with open(os.path.expanduser(pid), 'w') as fp:\n            fp.write(str(os.getpid()))\n    if verbose:\n        level = 'DEBUG'\n    else:\n        level = 'INFO'\n    setup_loghandlers(level)\n    scheduler.run(burst=burst)","label":0}
{"text":"def add_2d_call_alignment(self, data):\n        \n        path = 'Analyses\/{}'.format(self.group_name)\n        if 'BaseCalled_2D' not in self.handle.handle[path]:\n            self.handle.add_analysis_subgroup(self.group_name, 'BaseCalled_2D')\n\n        path = '{}\/BaseCalled_2D'.format(self.group_name)\n        self.handle.add_analysis_dataset(path, 'Alignment', data)","label":0}
{"text":"public String getRack(InetAddress endpoint)\n    {\n        String[] info = getEndpointInfo(endpoint);\n        assert info != null : \"No location defined for endpoint \" + endpoint;\n        return info[1];\n    }","label":0}
{"text":"def language(fname, is_ext=False):\n    \n\n    global _langmapping\n\n    # Normalize the fname so that it looks like an extension.\n    if is_ext:\n        fname = '.' + fname\n    _, ext = os.path.splitext(fname)\n\n    return _langmapping[ext]()","label":0}
{"text":"func (v IP) EncodeRLP(w io.Writer) error {\n\tif ip4 := net.IP(v).To4(); ip4 != nil {\n\t\treturn rlp.Encode(w, ip4)\n\t}\n\treturn rlp.Encode(w, net.IP(v))\n}","label":0}
{"text":"def _init_volume_service(self, version):\n        \n        volume_cfg = self._load_config_section(CONFIG_VOLUME_SECTION)\n        self._token_volume = volume_cfg[CONFIG_TOKEN]\n        proto = volume_cfg[CONFIG_PROTOCOL]\n        host = volume_cfg[CONFIG_HOST]\n\n        self._volume = VolumeService(host, version)\n        self._volume.base_protocol = proto\n        self._volume.set_auth(self._token_volume)","label":0}
{"text":"public  function addLanguagePrefix()\n    {\n        $projectConfig = Config::get('project');\n        if($projectConfig['multilanguage']) {\n            foreach (Route::getRoutes() as $route) {\n                foreach($route->methods() as $method){\n\n                    \/\/ Only proceed routes that have translate as a middleware\n                    \/\/ base.homepage routes is handled in a separate method, for language purposes\n                    if($method !== 'HEAD' && in_array(\"translate\", $route->middleware()) && strpos($route->getName(), 'base.homepage') === false) {\n                        $method = strtolower($method);\n\n                        \/**\n                         * Declare language route\n                         **\/\n                        \/\/ Create default language routes\n                        $newRoute = Route::$method('{lang}\/'. $route->uri(), $route->getActionName());\n\n                        \/\/set name\n                        $newRoute->name($route->getName());\n\n                        \/\/set wheres\n                        foreach($route->wheres as $key=>$value){\n                            $newRoute->where($key, $value);\n                        }\n\n                        \/\/set middleware\n                        $newRoute->middleware($route->middleware());\n\n                        \/\/change original route name so they don't mess with new ones :)\n                        $route->name(\".default\");\n                    }\n                }\n            }\n        }\n        return $this;\n    }","label":0}
{"text":"public void updateExecutionState(final ExecutionState executionState) {\n\n\t\tfinal Iterator<ExecutionVertex> it = this.vertices.iterator();\n\t\twhile (it.hasNext()) {\n\t\t\tfinal ExecutionVertex vertex = it.next();\n\t\t\tvertex.updateExecutionState(executionState);\n\t\t}\n\n\t}","label":0}
{"text":"def set_title(self, title):\n        \n        if self.term not in ('linux', 'eterm-color'):  # Not supported by the Linux console.\n            self.write_raw('\\x1b]2;%s\\x07' % title.replace('\\x1b', '').replace('\\x07', ''))","label":0}
{"text":"@RenderMapping\n    public String initializeView(\n            WebRequest webRequest,\n            PortletRequest portletRequest,\n            Model model,\n            @RequestParam(required = false) String initialFilter) {\n        this.setUpInitialView(webRequest, portletRequest, model, initialFilter);\n        return \"jsp\/Marketplace\/portlet\/view\";\n    }","label":0}
{"text":"protected function init()\n    {\n        $this->prepareHTTPManagers();\n        $this->prepareHTTPRendersManager();\n        $this->prepareMediotecasManager();\n\n        $this->nb_engine->registerApplication($this);\n    }","label":0}
{"text":"public void marshall(AccountSettings accountSettings, ProtocolMarshaller protocolMarshaller) {\n\n        if (accountSettings == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(accountSettings.getDisableRemoteControl(), DISABLEREMOTECONTROL_BINDING);\n            protocolMarshaller.marshall(accountSettings.getEnableDialOut(), ENABLEDIALOUT_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }","label":0}
{"text":"@GetMapping(value = \"\/swagger.yml\", produces = \"text\/yaml\")\n  public String swagger(Model model, HttpServletResponse response) {\n    response.setContentType(\"text\/yaml\");\n    response.setCharacterEncoding(\"UTF-8\");\n    final UriComponents uriComponents =\n        ServletUriComponentsBuilder.fromCurrentContextPath().build();\n    model.addAttribute(\"scheme\", uriComponents.getScheme());\n    String host = uriComponents.getHost();\n    if (uriComponents.getPort() >= 0) {\n      host += \":\" + uriComponents.getPort();\n    }\n    model.addAttribute(\"host\", host);\n    model.addAttribute(\n        \"entityTypes\",\n        metaDataService\n            .getEntityTypes()\n            .filter(e -> !e.isAbstract())\n            .map(EntityType::getId)\n            .sorted()\n            .collect(toList()));\n    model.addAttribute(\"attributeTypes\", AttributeType.getOptionsLowercase());\n    model.addAttribute(\"languageCodes\", getLanguageCodes().collect(toList()));\n    return \"view-swagger\";\n  }","label":0}
{"text":"public function getUri()\n    {\n        if (null !== $qs = $this->getQueryString()) {\n            $qs = '?' . $qs;\n        }\n        return $this->getSchemeAndHttpHost() . $this->getBaseUrl() . $this->getRequest()->getPathInfo() . $qs;\n    }","label":0}
{"text":"def parse_generic_options(args)\n      a = args.dup\n      arguments = []\n      options = {}\n\n      until a.empty?\n        arg = a.shift\n        case arg\n        when \/\\A--.+=\/\n          _, option, value = arg.match(\/\\A--(.+)=(.+)\\Z\/).to_a\n          update_options(option, value, options)\n        when \/\\A--.+\/\n          if a[0].nil? || a[0].to_s.start_with?(\"--\")\n            # Current option is a boolean\n            update_options(arg, true, options)\n          else\n            # Take value from next\n            update_options(arg, a.shift, options)\n          end\n        else\n          arguments << arg\n        end\n      end\n\n      [options, arguments]\n    end","label":0}
{"text":"func TaskCreateNamed(t TaskType, name string) (*Task, error) {\n\ttask := TaskCreate(t)\n\tif task == nil {\n\t\treturn nil, fmt.Errorf(\"devicemapper: Can't create task of type %d\", int(t))\n\t}\n\tif err := task.setName(name); err != nil {\n\t\treturn nil, fmt.Errorf(\"devicemapper: Can't set task name %s\", name)\n\t}\n\treturn task, nil\n}","label":0}
{"text":"public void mute(final AVIMConversationCallback callback) {\n    if (StringUtil.isEmpty(getConversationId())) {\n      if (null != callback) {\n        callback.internalDone(new AVException(AVException.INVALID_QUERY, \"ConversationId is empty\"));\n      } else {\n        LOGGER.w(\"ConversationId is empty\");\n      }\n      return;\n    }\n    InternalConfiguration.getOperationTube().participateConversation(client.getClientId(), conversationId, getType(),\n            null, Conversation.AVIMOperation.CONVERSATION_MUTE, callback);\n  }","label":0}
{"text":"protected static ControlDeleteDurable createDurableDeleteDurable(\n    MessageProcessor MP,\n    String subName,\n    String userName,\n    long reqID,\n    SIBUuid8 dme) \n  {\n    if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled())\n      SibTr.entry(tc, \"createDurableDeleteDurable\", new Object[] {MP, subName, userName, new Long(reqID), dme});\n\n    ControlDeleteDurable msg = null;\n      \n    try\n    {\n      \/\/ Create and initialize the message\n      msg = MessageProcessor.getControlMessageFactory().createNewControlDeleteDurable();\n      initializeControlMessage(MP.getMessagingEngineUuid(), msg, dme);\n      \n      \/\/ Parameterize for CreateStream\n      msg.setRequestID(reqID);\n      msg.setDurableSubName(subName);\n      msg.setSecurityUserid(userName);\n    }\n    catch (Exception e)\n    {\n      FFDCFilter.processException(e,\n        \"com.ibm.ws.sib.processor.impl.DurableInputHandler.createDurableDeleteDurable\",\n        \"1:540:1.52.1.1\",\n        DurableInputHandler.class);\n      SibTr.exception(tc, e);\n    }\n\n    if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled())\n      SibTr.exit(tc, \"createDurableDeleteDurable\", msg);\n      \n    return msg;\n  }","label":0}
{"text":"public void marshall(DecreaseReplicationFactorRequest decreaseReplicationFactorRequest, ProtocolMarshaller protocolMarshaller) {\n\n        if (decreaseReplicationFactorRequest == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(decreaseReplicationFactorRequest.getClusterName(), CLUSTERNAME_BINDING);\n            protocolMarshaller.marshall(decreaseReplicationFactorRequest.getNewReplicationFactor(), NEWREPLICATIONFACTOR_BINDING);\n            protocolMarshaller.marshall(decreaseReplicationFactorRequest.getAvailabilityZones(), AVAILABILITYZONES_BINDING);\n            protocolMarshaller.marshall(decreaseReplicationFactorRequest.getNodeIdsToRemove(), NODEIDSTOREMOVE_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }","label":0}
{"text":"private double penalizedPathDistance(Path path,\n                                         Set<EdgeIteratorState> penalizedVirtualEdges) {\n        double totalPenalty = 0;\n\n        \/\/ Unfavored edges in the middle of the path should not be penalized because we are\n        \/\/ only concerned about the direction at the start\/end.\n        final List<EdgeIteratorState> edges = path.calcEdges();\n        if (!edges.isEmpty()) {\n            if (penalizedVirtualEdges.contains(edges.get(0))) {\n                totalPenalty += uTurnDistancePenalty;\n            }\n        }\n        if (edges.size() > 1) {\n            if (penalizedVirtualEdges.contains(edges.get(edges.size() - 1))) {\n                totalPenalty += uTurnDistancePenalty;\n            }\n        }\n        return path.getDistance() + totalPenalty;\n    }","label":0}
{"text":"function (aNode, sourceBuffer, owner, extra) {\n        var dataLiteral = '{}';\n\n        sourceBuffer.addRaw('var $sourceSlots = [];');\n        if (aNode.children) {\n            var defaultSourceSlots = [];\n            var sourceSlotCodes = {};\n\n            each(aNode.children, function (child) {\n                var slotBind = !child.textExpr && getANodeProp(child, 'slot');\n                if (slotBind) {\n                    if (!sourceSlotCodes[slotBind.raw]) {\n                        sourceSlotCodes[slotBind.raw] = {\n                            children: [],\n                            prop: slotBind\n                        };\n                    }\n\n                    sourceSlotCodes[slotBind.raw].children.push(child);\n                }\n                else {\n                    defaultSourceSlots.push(child);\n                }\n            });\n\n            if (defaultSourceSlots.length) {\n                sourceBuffer.addRaw('$sourceSlots.push([function (componentCtx) {');\n                sourceBuffer.addRaw('  var html = \"\";');\n                defaultSourceSlots.forEach(function (child) {\n                    aNodeCompiler.compile(child, sourceBuffer, owner);\n                });\n                sourceBuffer.addRaw('  return html;');\n                sourceBuffer.addRaw('}]);');\n            }\n\n            for (var key in sourceSlotCodes) {\n                var sourceSlotCode = sourceSlotCodes[key];\n                sourceBuffer.addRaw('$sourceSlots.push([function (componentCtx) {');\n                sourceBuffer.addRaw('  var html = \"\";');\n                sourceBuffer.addRaw(sourceSlotCode.children.forEach(function (child) {\n                    aNodeCompiler.compile(child, sourceBuffer, owner);\n                }));\n                sourceBuffer.addRaw('  return html;');\n                sourceBuffer.addRaw('}, ' + compileExprSource.expr(sourceSlotCode.prop.expr) + ']);');\n            }\n        }\n\n\n        var givenData = [];\n        each(camelComponentBinds(aNode.props), function (prop) {\n            postProp(prop);\n            givenData.push(\n                compileExprSource.stringLiteralize(prop.name)\n                + ':'\n                + compileExprSource.expr(prop.expr)\n            );\n        });\n\n        dataLiteral = '{' + givenData.join(',\\n') + '}';\n        if (aNode.directives.bind) {\n            dataLiteral = 'extend('\n                + compileExprSource.expr(aNode.directives.bind.value)\n                + ', '\n                + dataLiteral\n                + ')';\n        }\n\n        var renderId = compileComponentSource(sourceBuffer, extra.ComponentClass, owner.ssrContextId);\n        sourceBuffer.addRaw('html += componentRenderers.' + renderId + '(');\n        sourceBuffer.addRaw(dataLiteral + ', true, componentCtx, '\n            + stringifier.str(aNode.tagName) + ', $sourceSlots);');\n        sourceBuffer.addRaw('$sourceSlots = null;');\n    }","label":0}
{"text":"func Dt14ForInts(yyyy, mm, dd, hr, mn, dy int) int64 {\n\tsDt14 := fmt.Sprintf(\"%04d%02d%02d%02d%02d%02d\", yyyy, mm, dd, hr, mn, dy)\n\tiDt14, err := strconv.ParseInt(sDt14, 10, 64)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn int64(iDt14)\n}","label":0}
{"text":"public EClass getIfcProcedure() {\r\n\t\tif (ifcProcedureEClass == null) {\r\n\t\t\tifcProcedureEClass = (EClass) EPackage.Registry.INSTANCE.getEPackage(Ifc2x3tc1Package.eNS_URI)\r\n\t\t\t\t\t.getEClassifiers().get(384);\r\n\t\t}\r\n\t\treturn ifcProcedureEClass;\r\n\t}","label":0}
{"text":"func NewDeviceLinkFailDetails(DeviceType *DeviceType) *DeviceLinkFailDetails {\n\ts := new(DeviceLinkFailDetails)\n\ts.DeviceType = DeviceType\n\treturn s\n}","label":0}
{"text":"function validateUniqueName(value, respond) {\n  \/\/ jshint validthis: true\n  var self = this;\n\n  \/\/ check for uniqueness of user name\n  this.constructor.findOne({name: value}, function (err, user) {\n    if (err) {\n      throw err;\n    }\n\n    if (user) {\n      \/\/ the searched name is my name or a duplicate\n      return respond(self.id === user.id);\n    }\n\n    respond(true);\n  });\n}","label":0}
{"text":"public static long copy(final InputStream input,\n                           final OutputStream output)\n         throws IOException {\n      return copy(input, output, DEFAULT_BUFFER_SIZE);\n   }","label":0}
{"text":"public static function findOrFail($id, $columns = array('*'))\n\t{\n\t\tif ( ! is_null($model = static::find($id, $columns))) return $model;\n\n\t\tthrow new ModelNotFoundException(get_called_class().' model not found');\n\t}","label":0}
{"text":"def _generate_corpus_table(self, labels, ngrams):\n        \"\"\"\"\"\"\n        html = []\n        for label in labels:\n            html.append(self._render_corpus_row(label, ngrams))\n        return '\\n'.join(html)","label":0}
{"text":"public void register(Class src, Class target) {\n        List<BeanMappingObject> objects = BeanMappingParser.parseMapping(src, target);\n        for (BeanMappingObject object : objects) {\n            register(object);\n        }\n    }","label":0}
{"text":"public static ColumnarBatch toBatch(\n      StructType schema, MemoryMode memMode, Iterator<Row> row) {\n    int capacity = 4 * 1024;\n    WritableColumnVector[] columnVectors;\n    if (memMode == MemoryMode.OFF_HEAP) {\n      columnVectors = OffHeapColumnVector.allocateColumns(capacity, schema);\n    } else {\n      columnVectors = OnHeapColumnVector.allocateColumns(capacity, schema);\n    }\n\n    int n = 0;\n    while (row.hasNext()) {\n      Row r = row.next();\n      for (int i = 0; i < schema.fields().length; i++) {\n        appendValue(columnVectors[i], schema.fields()[i].dataType(), r, i);\n      }\n      n++;\n    }\n    ColumnarBatch batch = new ColumnarBatch(columnVectors);\n    batch.setNumRows(n);\n    return batch;\n  }","label":0}
{"text":"function disableContinuousBuffer()\r\n    {\r\n        if ($this->mode == CRYPT_MODE_ECB) {\r\n            return;\r\n        }\r\n        if (!$this->continuousBuffer) {\r\n            return;\r\n        }\r\n\r\n        $this->continuousBuffer = false;\r\n        $this->changed = true;\r\n\r\n        $this->_setEngine();\r\n    }","label":0}
{"text":"public static void notNull(final Object arg, final String name) {\r\n        if(arg == null) {\r\n            throw new NullPointerException(String.format(\"%s should not be null.\", name));\r\n        }\r\n    }","label":0}
{"text":"public function getUpdatedAt()\n    {\n        $updatedAtAttribute = $this->updatedAtAttribute;\n        if (!is_string($updatedAtAttribute) || empty($updatedAtAttribute)) {\n            return null;\n        }\n        return $this->$updatedAtAttribute;\n    }","label":0}
{"text":"func (s *Sink) Log(line lager.LogFormat) {\n\tif line.LogLevel < lager.ERROR {\n\t\treturn\n\t}\n\n\tif errStr, ok := line.Data[\"error\"].(string); ok {\n\t\tdelete(line.Data, \"message\")\n\t\tdelete(line.Data, \"error\")\n\n\t\ts.yeller.Notify(\n\t\t\tline.Message,\n\t\t\terrors.New(errStr),\n\t\t\tline.Data,\n\t\t)\n\t}\n}","label":0}
{"text":"private String getFailureReason(final FileUploadId fileUploadId) {\n        String failureReason = \"\";\n        if (artifactUploadState.getFileUploadProgress(fileUploadId) != null) {\n            failureReason = artifactUploadState.getFileUploadProgress(fileUploadId).getFailureReason();\n        }\n        if (StringUtils.isEmpty(failureReason)) {\n            return \"\";\n        }\n        return failureReason;\n    }","label":0}
{"text":"func (d *BundlesDir) bundlePath(info BundleInfo) string {\n\treturn d.bundleURLPath(info.URL())\n}","label":0}
{"text":"public function decode($encodedUuid)\n    {\n        $components = $this->extractComponents($encodedUuid);\n        $fields = $this->getFields($components);\n\n        return $this->builder->build($this, $fields);\n    }","label":0}
{"text":"public CommandArgs<K, V> addValues(Iterable<V> values) {\n\n        LettuceAssert.notNull(values, \"Values must not be null\");\n\n        for (V value : values) {\n            addValue(value);\n        }\n        return this;\n    }","label":0}
{"text":"func (v Storage) MarshalJSON() ([]byte, error) {\n\tw := jwriter.Writer{}\n\teasyjsonCce3d1beEncodeGithubComMailgunMailgunGoEvents(&w, v)\n\treturn w.Buffer.BuildBytes(), w.Error\n}","label":0}
{"text":"func (s *OTAUpdateFile) SetFileVersion(v string) *OTAUpdateFile {\n\ts.FileVersion = &v\n\treturn s\n}","label":0}
{"text":"func (in *PodDisruptionBudgetSpec) DeepCopyInto(out *PodDisruptionBudgetSpec) {\n\t*out = *in\n\tif in.MinAvailable != nil {\n\t\tin, out := &in.MinAvailable, &out.MinAvailable\n\t\t*out = new(intstr.IntOrString)\n\t\t**out = **in\n\t}\n\tif in.Selector != nil {\n\t\tin, out := &in.Selector, &out.Selector\n\t\t*out = new(v1.LabelSelector)\n\t\t(*in).DeepCopyInto(*out)\n\t}\n\tif in.MaxUnavailable != nil {\n\t\tin, out := &in.MaxUnavailable, &out.MaxUnavailable\n\t\t*out = new(intstr.IntOrString)\n\t\t**out = **in\n\t}\n\treturn\n}","label":0}
{"text":"def link(self, var):\n        \n        assert self._dtype is not None or hasattr(var, 'dtype')\n        self._link = var\n        self.changed()","label":0}
{"text":"function untgz(istream, dst){\n    \/\/ decompress\n    const tarStream = istream.pipe(_zlib.createGunzip());\n\n    \/\/ unpack\n    return _untar(tarStream, dst);\n}","label":0}
{"text":"public function performInclusions(&$attr)\r\n    {\r\n        if (!isset($attr[0])) {\r\n            return;\r\n        }\r\n        $merge = $attr[0];\r\n        $seen  = array(); \/\/ recursion guard\r\n        \/\/ loop through all the inclusions\r\n        for ($i = 0; isset($merge[$i]); $i++) {\r\n            if (isset($seen[$merge[$i]])) {\r\n                continue;\r\n            }\r\n            $seen[$merge[$i]] = true;\r\n            \/\/ foreach attribute of the inclusion, copy it over\r\n            if (!isset($this->info[$merge[$i]])) {\r\n                continue;\r\n            }\r\n            foreach ($this->info[$merge[$i]] as $key => $value) {\r\n                if (isset($attr[$key])) {\r\n                    continue;\r\n                } \/\/ also catches more inclusions\r\n                $attr[$key] = $value;\r\n            }\r\n            if (isset($this->info[$merge[$i]][0])) {\r\n                \/\/ recursion\r\n                $merge = array_merge($merge, $this->info[$merge[$i]][0]);\r\n            }\r\n        }\r\n        unset($attr[0]);\r\n    }","label":0}
{"text":"public function remove($key, $when = self::NEXT)\n    {\n        $deleteWhen = $when == self::ALL ? self::$when : (array) $when;\n        foreach ($deleteWhen as $when) {\n            $this->set($key, null, $when);\n        }\n\n        return $this;\n    }","label":0}
{"text":"def native_obj(self):\n        \"\"\"\"\"\"\n        if self.__native is None:\n            self.__native = self._get_object()\n\n        return self.__native","label":0}
{"text":"private function render()\n    {\n        $output = '';\n\n        foreach ($this->jobs as $job) {\n            $output .= $this->getTaskDefinition($job);\n        }\n\n        return $output;\n    }","label":0}
{"text":"public void updateMappedByEntities(\n      @Nonnull Entity entity, @Nullable @CheckForNull Entity existingEntity) {\n    entity\n        .getEntityType()\n        .getMappedByAttributes()\n        .forEach(\n            mappedByAttr -> {\n              AttributeType type = mappedByAttr.getDataType();\n              if (type != ONE_TO_MANY) {\n                throw new RuntimeException(\n                    format(\n                        \"Attribute [%s] of type [%s] can't be mapped by another attribute\",\n                        mappedByAttr.getName(), type.toString()));\n              }\n              updateMappedByEntitiesOneToMany(entity, existingEntity, mappedByAttr);\n            });\n  }","label":0}
{"text":"public static <R, C, V, C2> ImmutableTable<R, C2, V> columnTransformerByCell(\n      final Table<R, C, V> table,\n      final Function<Table.Cell<R, C, V>, C2> columnTransformer) {\n    final ImmutableTable.Builder<R, C2, V> newTable = ImmutableTable.builder();\n    for(Table.Cell<R, C, V> cell : table.cellSet()) {\n      C2 col = columnTransformer.apply(cell);\n      newTable.put(cell.getRowKey(), col, cell.getValue());\n    }\n    return newTable.build();\n  }","label":0}
{"text":"def noisepickle(d, data, u, v, w, chunk=200):\n    \n\n    if d['savenoise']:\n        noisefile = getnoisefile(d)\n\n        if os.path.exists(noisefile):\n            logger.warn('noisefile %s already exists' % noisefile)\n        else:\n            nints = len(data)\n            chunk = min(chunk, nints)  # ensure at least one measurement\n            results = []\n\n            rr = range(0, nints, chunk)\n            if len(rr) == 1: rr.append(1)   # hack. need to make sure it iterates for nints=1 case\n            for i in range(len(rr)-1):\n                imid = (rr[i]+rr[i+1])\/2\n                noiseperbl = estimate_noiseperbl(data[rr[i]:rr[i+1]])\n                imstd = sample_image(d, data, u, v, w, imid, verbose=0).std()\n                zerofrac = float(len(n.where(data[rr[i]:rr[i+1]] == 0j)[0]))\/data[rr[i]:rr[i+1]].size\n                results.append( (d['segment'], noiseperbl, zerofrac, imstd) )\n\n            with open(noisefile, 'a') as pkl:\n                pickle.dump(results, pkl)\n            logger.info('Wrote %d noise measurement%s to %s.' % (len(results), 's'[:len(results)-1], noisefile))","label":0}
{"text":"public static Card retrieve(String card) throws StripeException {\n    return retrieve(card, (Map<String, Object>) null, (RequestOptions) null);\n  }","label":0}
{"text":"protected function generateCodeVerifier () {\n\t\t$sp\t\t= ['-'. '\/', '_',  '~'];\n\t\t$length\t= random_int(43, 128);\n\t\t$stack\t= [];\n\n\t\tfor ($i = 0;$i < $length;$i++) {\n\t\t\tswitch (random_int(1, 4)) {\n\t\t\t\tcase 1:\n\t\t\t\t\t$stack[] = chr(random_int(0x30, 0x39));\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2:\n\t\t\t\t\t$stack[] = chr(random_int(0x41, 0x5A));\n\t\t\t\t\tbreak;\n\t\t\t\tcase 3:\n\t\t\t\t\t$stack[] = chr(random_int(0x61, 0x7A));\n\t\t\t\t\tbreak;\n\t\t\t\tcase 4:\n\t\t\t\t\t$stack[] = $sp[random_int(0, 3)];\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (count($stack) !== $length) {\n\t\t\tthrow new \\ErrorException('code verifier\u306e\u4f5c\u6210\u306b\u5931\u6557\u3057\u307e\u3057\u305f\u3002');\n\t\t}\n\n\t\treturn $this->codeVerifier = implode('', $stack);\n\t}","label":0}
{"text":"protected function filterItemPermissions($user, array $items)\n    {\n        if (!$user) {\n            return $items;\n        }\n\n        $items = array_filter($items, function ($item) use ($user) {\n            if (!$item->permissions || !count($item->permissions)) {\n                return true;\n            }\n\n            return $user->hasAnyAccess($item->permissions);\n        });\n\n        return $items;\n    }","label":0}
{"text":"func NewWSClient(remoteAddr, endpoint string, options ...func(*WSClient)) *WSClient {\n\taddr, dialer := makeHTTPDialer(remoteAddr)\n\tc := &WSClient{\n\t\tAddress:              addr,\n\t\tDialer:               dialer,\n\t\tEndpoint:             endpoint,\n\t\tPingPongLatencyTimer: metrics.NewTimer(),\n\n\t\tmaxReconnectAttempts: defaultMaxReconnectAttempts,\n\t\treadWait:             defaultReadWait,\n\t\twriteWait:            defaultWriteWait,\n\t\tpingPeriod:           defaultPingPeriod,\n\t}\n\tc.BaseService = *cmn.NewBaseService(nil, \"WSClient\", c)\n\tfor _, option := range options {\n\t\toption(c)\n\t}\n\treturn c\n}","label":0}
{"text":"protected function processTag(DOMDocument $xmlDoc, $tagName)\n    {\n        \/** @var $embed \\DOMElement *\/\n        foreach ($xmlDoc->getElementsByTagName($tagName) as $embed) {\n            if (!$view = $embed->getAttribute('view')) {\n                $view = $tagName;\n            }\n\n            $embedContent = null;\n            $parameters = $this->getParameters($embed);\n\n            if ($contentId = $embed->getAttribute('object_id')) {\n                try {\n                    \/** @var \\eZ\\Publish\\API\\Repository\\Values\\Content\\Content $content *\/\n                    $content = $this->repository->sudo(\n                        static function (Repository $repository) use ($contentId) {\n                            return $repository->getContentService()->loadContent($contentId);\n                        }\n                    );\n\n                    if (\n                        !$this->repository->canUser('content', 'read', $content)\n                        && !$this->repository->canUser('content', 'view_embed', $content)\n                    ) {\n                        throw new UnauthorizedException('content', 'read', ['contentId' => $contentId]);\n                    }\n\n                    \/\/ Check published status of the Content\n                    if (\n                        $content->getVersionInfo()->status !== APIVersionInfo::STATUS_PUBLISHED\n                        && !$this->repository->canUser('content', 'versionread', $content)\n                    ) {\n                        throw new UnauthorizedException('content', 'versionread', ['contentId' => $contentId]);\n                    }\n\n                    $embedContent = $this->fragmentHandler->render(\n                        new ControllerReference(\n                            'ez_content:embedAction',\n                            [\n                                'contentId' => $contentId,\n                                'viewType' => $view,\n                                'layout' => false,\n                                'params' => $parameters,\n                            ]\n                        )\n                    );\n                } catch (APINotFoundException $e) {\n                    if ($this->logger) {\n                        $this->logger->error(\n                            'While generating embed for xmltext, could not locate ' .\n                            'Content object with ID ' . $contentId\n                        );\n                    }\n                }\n            } elseif ($locationId = $embed->getAttribute('node_id')) {\n                try {\n                    \/** @var \\eZ\\Publish\\API\\Repository\\Values\\Content\\Location $location *\/\n                    $location = $this->repository->sudo(\n                        static function (Repository $repository) use ($locationId) {\n                            return $repository->getLocationService()->loadLocation($locationId);\n                        }\n                    );\n\n                    if (\n                        !$this->repository->canUser('content', 'read', $location->getContentInfo(), $location)\n                        && !$this->repository->canUser('content', 'view_embed', $location->getContentInfo(), $location)\n                    ) {\n                        throw new UnauthorizedException('content', 'read', ['locationId' => $location->id]);\n                    }\n\n                    $embedContent = $this->fragmentHandler->render(\n                        new ControllerReference(\n                            'ez_content:embedAction',\n                            [\n                                'contentId' => $location->getContentInfo()->id,\n                                'locationId' => $location->id,\n                                'viewType' => $view,\n                                'layout' => false,\n                                'params' => $parameters,\n                            ]\n                        )\n                    );\n                } catch (APINotFoundException $e) {\n                    if ($this->logger) {\n                        $this->logger->error(\n                            'While generating embed for xmltext, could not locate ' .\n                            'Location with ID ' . $locationId\n                        );\n                    }\n                }\n            }\n\n            if ($embedContent === null) {\n                \/\/ Remove empty embed\n                $embed->parentNode->removeChild($embed);\n            } else {\n                while ($embed->hasChildNodes()) {\n                    $embed->removeChild($embed->firstChild);\n                }\n                $embed->appendChild($xmlDoc->createCDATASection($embedContent));\n            }\n        }\n    }","label":0}
{"text":"func (d *DNSProvider) CleanUp(domain, token, keyAuth string) error {\n\tfqdn, _ := dns01.GetRecord(domain, keyAuth)\n\n\tzoneID, err := d.getHostedZoneID(fqdn)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"rackspace: %v\", err)\n\t}\n\n\trecord, err := d.findTxtRecord(fqdn, zoneID)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"rackspace: %v\", err)\n\t}\n\n\t_, err = d.makeRequest(http.MethodDelete, fmt.Sprintf(\"\/domains\/%d\/records?id=%s\", zoneID, record.ID), nil)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"rackspace: %v\", err)\n\t}\n\treturn nil\n}","label":0}
{"text":"def _create(self):\n    \"\"\"\"\"\"\n    from .tools import makedirs_safe\n\n    # create directory for sql database\n    makedirs_safe(os.path.dirname(self._database))\n\n    # create all the tables\n    Base.metadata.create_all(self._engine)\n    logger.debug(\"Created new empty database '%s'\" % self._database)","label":0}
{"text":"def start(service_name, timeout: DEFAULT_TIMEOUT)\n      Puppet.debug _(\"Starting the %{service_name} service. Timeout set to: %{timeout} seconds\") % { service_name: service_name, timeout: timeout }\n\n      valid_initial_states = [\n        SERVICE_STOP_PENDING,\n        SERVICE_STOPPED,\n        SERVICE_START_PENDING\n      ]\n\n      transition_service_state(service_name, valid_initial_states, SERVICE_RUNNING, timeout) do |service|\n        if StartServiceW(service, 0, FFI::Pointer::NULL) == FFI::WIN32_FALSE\n          raise Puppet::Util::Windows::Error, _(\"Failed to start the service\")\n        end\n      end\n\n      Puppet.debug _(\"Successfully started the %{service_name} service\") % { service_name: service_name }\n    end","label":0}
{"text":"func ConvertWorkItemTypeFromModel(request *http.Request, t *workitem.WorkItemType) app.WorkItemTypeData {\n\tspaceTemplateRelatedURL := rest.AbsoluteURL(request, app.SpaceTemplateHref(t.SpaceTemplateID.String()))\n\tspaceRelatedURL := rest.AbsoluteURL(request, app.SpaceHref(space.SystemSpace.String()))\n\tvar converted = app.WorkItemTypeData{\n\t\tType: APIStringTypeWorkItemType,\n\t\tID:   ptr.UUID(t.ID),\n\t\tAttributes: &app.WorkItemTypeAttributes{\n\t\t\tCreatedAt:    ptr.Time(t.CreatedAt.UTC()),\n\t\t\tUpdatedAt:    ptr.Time(t.UpdatedAt.UTC()),\n\t\t\tVersion:      &t.Version,\n\t\t\tDescription:  t.Description,\n\t\t\tIcon:         t.Icon,\n\t\t\tName:         t.Name,\n\t\t\tFields:       map[string]*app.FieldDefinition{},\n\t\t\tCanConstruct: ptr.Bool(t.CanConstruct),\n\t\t},\n\t\tRelationships: &app.WorkItemTypeRelationships{\n\t\t\t\/\/ TODO(kwk): The Space relationship should be deprecated after clients adopted\n\t\t\tSpace:         app.NewSpaceRelation(space.SystemSpace, spaceRelatedURL),\n\t\t\tSpaceTemplate: app.NewSpaceTemplateRelation(t.SpaceTemplateID, spaceTemplateRelatedURL),\n\t\t},\n\t}\n\tfor name, def := range t.Fields {\n\t\tct := ConvertFieldTypeFromModel(def.Type)\n\t\tconverted.Attributes.Fields[name] = &app.FieldDefinition{\n\t\t\tRequired:    def.Required,\n\t\t\tLabel:       def.Label,\n\t\t\tDescription: def.Description,\n\t\t\tType:        &ct,\n\t\t}\n\t}\n\tif len(t.ChildTypeIDs) > 0 {\n\t\tconverted.Relationships.GuidedChildTypes = &app.RelationGenericList{\n\t\t\tData: make([]*app.GenericData, len(t.ChildTypeIDs)),\n\t\t}\n\t\tfor i, id := range t.ChildTypeIDs {\n\t\t\tconverted.Relationships.GuidedChildTypes.Data[i] = &app.GenericData{\n\t\t\t\tID:   ptr.String(id.String()),\n\t\t\t\tType: ptr.String(APIStringTypeWorkItemType),\n\t\t\t}\n\t\t}\n\t}\n\treturn converted\n}","label":0}
{"text":"private function _get_id(string $request, $params): ?string\n  {\n    if ( $this->check() ){\n      if ( $params ){\n        return $this->db->select_one('bbn_observers', 'id', [\n          'id_string' => $this->_get_id_string($request, $params)\n        ]);\n      }\n      return $this->db->get_one(\"\n        SELECT id\n        FROM bbn_observers\n        WHERE `request` LIKE ?\n        AND `params` IS NULL\n        AND `public` = 1\",\n        $request);\n    }\n    return null;\n  }","label":0}
{"text":"public TupleRefBuilder bindings( VarBinding... bindings)\n    {\n    for( VarBinding binding : bindings)\n      {\n      tupleRef_.addVarBinding( binding);\n      }\n    return this;\n    }","label":0}
{"text":"def screenshot(fname):\n    \n    try:\n        im = ImageGrab.grab()\n        im.save(fname)\n    except Exception as ex:\n        print('image_tools.screenshot:cant create screenshot ' + str(ex))","label":0}
{"text":"@Override\n\tpublic boolean eIsSet(int featureID) {\n\t\tswitch (featureID) {\n\t\t\tcase AfplibPackage.ESG__REG_NAME:\n\t\t\t\treturn REG_NAME_EDEFAULT == null ? regName != null : !REG_NAME_EDEFAULT.equals(regName);\n\t\t}\n\t\treturn super.eIsSet(featureID);\n\t}","label":0}
{"text":"protected function processBuildTime(string &$content): void\n    {\n        $pattern = $this->getTagPattern('build_time');\n        $content = preg_replace_callback($pattern, function ($match) {\n            return '<?php \/*\u6a21\u677f\u7f16\u8bd1\u4e8e' . date('Y-m-d H:i:s') . '*\/ ?>';\n        }, $content);\n    }","label":0}
{"text":"public function self(array $options = array())\n  {\n    list($code, $resource) = $this->httpClient->get(\"\/users\/self\", null, $options);\n    return $resource;\n  }","label":0}
{"text":"public function findAll()\n    {\n        $this->compile();\n        $queryArr   = $this->queryArr;\n        return $this->connection->fetchAll(implode(\" \", $queryArr), $this->arguments);\n    }","label":0}
{"text":"def refresh(self):\n      '''\n      '''\n      response = requests.get('%s\/categories\/%s' % (API_BASE_URL, self.name))\n      attributes = response.json()\n      \n      self.ancestors = [Category(name) for name in attributes['ancestors']]\n      self.contents = WikiText(attributes['contents_raw'],\n                               attributes['contents_rendered'])\n      self.description = attributes['description']\n      self.guides = []\n      for guide in attributes['guides']:\n         self.guides.append(Guide(guide['guideid']))\n      # Unlike guides, categories return flags as a dict, keyed by flagid.\n      # *Except* when it's empty, in which case we get an empty list due to\n      # PHP's json_encode() not knowing the difference between an empty array\n      # and an empty dict.\n      flags = dict(attributes['flags']).values()\n      self.flags = [Flag.from_id(flag['flagid']) for flag in flags]\n      self.image = Image(attributes['image']['id']) if attributes['image'] else None\n      self.locale = attributes['locale']\n      #self.parts = attributes['parts']\n      #self.solutions = attributes['solutions']\n      self.title = attributes['display_title']","label":0}
{"text":"public function set(string $uri, string $query, EsiResponse $data)\n    {\n\n        if ($this->is_memcached)\n            $this->memcached->set($this->buildCacheKey($uri, $query), serialize($data), 0);\n        else\n            $this->memcached->set($this->buildCacheKey($uri, $query), serialize($data), $this->flags, 0);\n    }","label":0}
{"text":"public function send($js)\n    {\n        $this->_output_bypass = true;\n        $this->sse->send($js);\n        $this->_output_bypass = false;\n\n        return $this;\n    }","label":0}
{"text":"def get_max_op_version():\n    '''\n    \n    '''\n    if _get_version() < (3, 10,):\n        return False, 'Glusterfs version must be 3.10+.  Your version is {0}.'.format(str('.'.join(str(i) for i in _get_version())))\n\n    cmd = 'volume get all cluster.max-op-version'\n    root = _gluster_xml(cmd)\n\n    if not _gluster_ok(root):\n        return False, root.find('opErrstr').text\n\n    result = {}\n    for max_op_version in _iter(root, 'volGetopts'):\n        for item in max_op_version:\n            if item.tag == 'Value':\n                result = item.text\n            elif item.tag == 'Opt':\n                for child in item:\n                    if child.tag == 'Value':\n                        result = child.text\n\n    return result","label":0}
{"text":"func (in *ServiceStatus) DeepCopyInto(out *ServiceStatus) {\n\t*out = *in\n\tin.LoadBalancer.DeepCopyInto(&out.LoadBalancer)\n\treturn\n}","label":0}
{"text":"public function has($key)\n    {\n        \/* If $key is not valid string throws InvalidArgumentException *\/\n        if (!$this->isString($key)) {\n            throw new InvalidArgumentException('Cache key must be not empty string');\n        }\n\n        return $this->getCollection()->has($key);\n    }","label":0}
{"text":"def get_num_names(include_expired=False, proxy=None, hostport=None):\n    \n    assert proxy or hostport, 'Need proxy or hostport'\n    if proxy is None:\n        proxy = connect_hostport(hostport)\n\n    schema = {\n        'type': 'object',\n        'properties': {\n            'count': {\n                'type': 'integer',\n                'minimum': 0,\n            },\n        },\n        'required': [\n            'count',\n        ],\n    }\n\n    count_schema = json_response_schema(schema)\n\n    resp = {}\n    try:\n        if include_expired:\n            resp = proxy.get_num_names_cumulative()\n        else:\n            resp = proxy.get_num_names()\n\n        resp = json_validate(count_schema, resp)\n        if json_is_error(resp):\n            return resp\n\n    except ValidationError as e:\n        if BLOCKSTACK_DEBUG:\n            log.exception(e)\n\n        resp = {'error': 'Server response did not match expected schema.  You are likely communicating with an out-of-date Blockstack node.', 'http_status': 502}\n        return resp\n\n    except socket.timeout:\n        log.error(\"Connection timed out\")\n        resp = {'error': 'Connection to remote host timed out.', 'http_status': 503}\n        return resp\n\n    except socket.error as se:\n        log.error(\"Connection error {}\".format(se.errno))\n        resp = {'error': 'Connection to remote host failed.', 'http_status': 502}\n        return resp\n\n    except Exception as ee:\n        if BLOCKSTACK_DEBUG:\n            log.exception(ee)\n\n        log.error(\"Caught exception while connecting to Blockstack node: {}\".format(ee))\n        resp = {'error': 'Failed to contact Blockstack node.  Try again with `--debug`.', 'http_status': 500}\n        return resp\n\n    return resp['count']","label":0}
{"text":"protected function loadCss($css, $options=array())\n    {\n        $location = (isset($options['location'])) ? $options['location']:'internal';\n\n        \/\/after:file, before:file, first, last\n        $position = (isset($options['position'])) ? $options['position']:'last';\n\n        if(!in_array($css,$this->data['css'][$location])){\n            if($position=='first' || $position=='last'){\n                $key = $position;\n                $file='';\n            }else{\n                list($key,$file) =  explode(':',$position);\n            }\n\n            switch($key){\n                case 'first':\n                    array_unshift($this->data['css'][$location],$css);\n                break;\n\n                case 'last':\n                    $this->data['css'][$location][]=$css;\n                break;\n\n                case 'before':\n                case 'after':\n                    $varkey = array_keys($this->data['css'][$location],$file);\n                    if($varkey){\n                        $nextkey = ($key=='after') ? $varkey[0]+1 : $varkey[0];\n                        array_splice($this->data['css'][$location],$nextkey,0,$css);\n                    }else{\n                        $this->data['css'][$location][]=$css;\n                    }\n                break;\n            }\n        }\n    }","label":0}
{"text":"public function search()\n\t{\n\t\t$view = $this->getView();\n\t\t$context = $this->getContext();\n\n\t\ttry\n\t\t{\n\t\t\t$total = 0;\n\t\t\t$params = $this->storeSearchParams( $view->param(), 'locale\/currency' );\n\t\t\t$manager = \\Aimeos\\MShop::create( $context, 'locale\/currency' );\n\n\t\t\t$search = $manager->createSearch();\n\t\t\t$search->setSortations( [$search->sort( '-', 'locale.currency.status'), $search->sort( '+', 'locale.currency.id')] );\n\t\t\t$search = $this->initCriteria( $search, $params );\n\n\t\t\t$view->items = $manager->searchItems( $search, [], $total );\n\t\t\t$view->filterAttributes = $manager->getSearchAttributes( true );\n\t\t\t$view->filterOperators = $search->getOperators();\n\t\t\t$view->total = $total;\n\t\t\t$view->itemBody = '';\n\n\t\t\tforeach( $this->getSubClients() as $client ) {\n\t\t\t\t$view->itemBody .= $client->search();\n\t\t\t}\n\t\t}\n\t\tcatch( \\Aimeos\\MShop\\Exception $e )\n\t\t{\n\t\t\t$error = array( 'locale-currency-item' => $context->getI18n()->dt( 'mshop', $e->getMessage() ) );\n\t\t\t$view->errors = $view->get( 'errors', [] ) + $error;\n\t\t\t$this->logException( $e );\n\t\t}\n\t\tcatch( \\Exception $e )\n\t\t{\n\t\t\t$error = array( 'locale-currency-item' => $e->getMessage() . ', ' . $e->getFile() . ':' . $e->getLine() );\n\t\t\t$view->errors = $view->get( 'errors', [] ) + $error;\n\t\t\t$this->logException( $e );\n\t\t}\n\n\t\t\/** admin\/jqadm\/locale\/currency\/template-list\n\t\t * Relative path to the HTML body template for the locale list.\n\t\t *\n\t\t * The template file contains the HTML code and processing instructions\n\t\t * to generate the result shown in the body of the frontend. The\n\t\t * configuration string is the path to the template file relative\n\t\t * to the templates directory (usually in admin\/jqadm\/templates).\n\t\t *\n\t\t * You can overwrite the template file configuration in extensions and\n\t\t * provide alternative templates. These alternative templates should be\n\t\t * named like the default one but with the string \"default\" replaced by\n\t\t * an unique name. You may use the name of your project for this. If\n\t\t * you've implemented an alternative client class as well, \"default\"\n\t\t * should be replaced by the name of the new class.\n\t\t *\n\t\t * @param string Relative path to the template creating the HTML code\n\t\t * @since 2016.04\n\t\t * @category Developer\n\t\t *\/\n\t\t$tplconf = 'admin\/jqadm\/locale\/currency\/template-list';\n\t\t$default = 'locale\/currency\/list-standard';\n\n\t\treturn $view->render( $view->config( $tplconf, $default ) );\n\t}","label":0}
{"text":"func (c *NodeCommand) Invite(client auth.ClientI) error {\n\t\/\/ parse --roles flag\n\troles, err := teleport.ParseRoles(c.roles)\n\tif err != nil {\n\t\treturn trace.Wrap(err)\n\t}\n\ttoken, err := client.GenerateToken(auth.GenerateTokenRequest{Roles: roles, TTL: c.ttl, Token: c.token})\n\tif err != nil {\n\t\treturn trace.Wrap(err)\n\t}\n\n\t\/\/ Calculate the CA pin for this cluster. The CA pin is used by the client\n\t\/\/ to verify the identity of the Auth Server.\n\tcaPin, err := calculateCAPin(client)\n\tif err != nil {\n\t\treturn trace.Wrap(err)\n\t}\n\n\tauthServers, err := client.GetAuthServers()\n\tif err != nil {\n\t\treturn trace.Wrap(err)\n\t}\n\tif len(authServers) == 0 {\n\t\treturn trace.Errorf(\"This cluster does not have any auth servers running.\")\n\t}\n\n\t\/\/ output format swtich:\n\tif c.format == \"text\" {\n\t\tif roles.Include(teleport.RoleTrustedCluster) || roles.Include(teleport.LegacyClusterTokenType) {\n\t\t\tfmt.Printf(trustedClusterMessage, token, int(c.ttl.Minutes()))\n\t\t} else {\n\t\t\tfmt.Printf(nodeMessage,\n\t\t\t\ttoken,\n\t\t\t\tint(c.ttl.Minutes()),\n\t\t\t\tstrings.ToLower(roles.String()),\n\t\t\t\ttoken,\n\t\t\t\tcaPin,\n\t\t\t\tauthServers[0].GetAddr(),\n\t\t\t\tint(c.ttl.Minutes()),\n\t\t\t\tauthServers[0].GetAddr(),\n\t\t\t)\n\t\t}\n\t} else {\n\t\t\/\/ Always return a list, otherwise we'll break users tooling. See #1846 for\n\t\t\/\/ more details.\n\t\ttokens := []string{token}\n\t\tout, err := json.Marshal(tokens)\n\t\tif err != nil {\n\t\t\treturn trace.Wrap(err, \"failed to marshal token\")\n\t\t}\n\t\tfmt.Printf(string(out))\n\t}\n\treturn nil\n}","label":0}
{"text":"public function delete()\n    {\n        $delete = function($id) {\n            $user = $this->userRepository->findUserById($id);\n            if (!$user) {\n                throw new EntityNotFoundException($this->userRepository->getClassName(), $id);\n            }\n\n            $this->em->remove($user);\n            $this->em->flush();\n        };\n\n        return $delete;\n    }","label":0}
{"text":"public static void setShowSqlGlobal(boolean isShowSql, boolean isFormatSql, boolean isShowParams, Level level) {\r\n\t\tSqlLog.INSTASNCE.init(isShowSql, isFormatSql, isShowParams, level);\r\n\t}","label":0}
{"text":"def _get_hba_type(hba_type):\n    '''\n    \n    '''\n    if hba_type == \"parallel\":\n        return vim.host.ParallelScsiHba\n    elif hba_type == \"block\":\n        return vim.host.BlockHba\n    elif hba_type == \"iscsi\":\n        return vim.host.InternetScsiHba\n    elif hba_type == \"fibre\":\n        return vim.host.FibreChannelHba\n\n    raise ValueError('Unknown Host Bus Adapter Type')","label":0}
{"text":"public boolean hasRegion(String region) {\n        return regions.containsKey(region) || matchesRegionRegex(region) || hasServiceEndpoint\n                (region);\n    }","label":0}
{"text":"function( srcRgb, dstRgb, srcAlpha, dstAlpha ){\n    this._dat[ 0|BLEND_FUNC_C_SRC ] = srcRgb;\n    this._dat[ 0|BLEND_FUNC_C_DST ] = dstRgb;\n    this._dat[ 0|BLEND_FUNC_A_SRC ] = srcAlpha;\n    this._dat[ 0|BLEND_FUNC_A_DST ] = dstAlpha;\n    this._set |= BLEND_FUNC_SET | BLEND_FUNC_A_SET;\n    return this;\n  }","label":0}
{"text":"public function createOrReplace($document, $options = null)\n    {\n        $this->assertProperties($document, ['_id', '_type'], 'createOrReplace');\n        return $this->createDocument($document, 'createOrReplace', $options);\n    }","label":0}
{"text":"def list(context, verbose):\n    \n    result = tag.list(context)\n    utils.format_output(result, context.format, verbose=verbose)","label":0}
{"text":"public static function create(string $name, array $constraints): ValidationPropertyMappingBuilderInterface\n    {\n        $self = new self();\n        $self->name = $name;\n\n        $self->constraints = [];\n        foreach ($constraints as $constraint) {\n            $self->addConstraint($constraint);\n        }\n\n        return $self;\n    }","label":0}
{"text":"private void _checkAndSubscribe(KafkaConsumer<?, ?> consumer, String topic) {\n        synchronized (consumer) {\n            Set<String> subscription = consumer.subscription();\n            if (subscription == null || !subscription.contains(topic)) {\n                consumer.subscribe(Arrays.asList(topic));\n            }\n        }\n    }","label":0}
{"text":"def open_console(self, client=None):\r\n        \"\"\"\"\"\"\r\n        if not client:\r\n            client = self.get_current_client()\r\n        if self.ipyconsole is not None:\r\n            kernel_id = client.get_kernel_id()\r\n            if not kernel_id:\r\n                QMessageBox.critical(\r\n                    self, _('Error opening console'),\r\n                    _('There is no kernel associated to this notebook.'))\r\n                return\r\n            self.ipyconsole._create_client_for_kernel(kernel_id, None, None,\r\n                                                      None)\r\n            ipyclient = self.ipyconsole.get_current_client()\r\n            ipyclient.allow_rename = False\r\n            self.ipyconsole.rename_client_tab(ipyclient,\r\n                                              client.get_short_name())","label":0}
{"text":"@Override\r\n    public Map<Circuit, Collection<TileRef>> getCircuits(Collection<Media> levels,\r\n                                                         Media sheetsConfig,\r\n                                                         Media groupsConfig)\r\n    {\r\n        final Collection<MapTile> mapsSet = new HashSet<>(levels.size());\r\n        for (final Media level : levels)\r\n        {\r\n            final Services services = new Services();\r\n            final MapTile map = services.create(MapTileGame.class);\r\n            map.create(level, sheetsConfig);\r\n\r\n            final MapTileGroup mapGroup = map.addFeatureAndGet(new MapTileGroupModel());\r\n            final MapTileTransition mapTransition = map.addFeatureAndGet(new MapTileTransitionModel(services));\r\n\r\n            mapGroup.loadGroups(groupsConfig);\r\n            mapTransition.loadTransitions(levels, sheetsConfig, groupsConfig);\r\n\r\n            mapsSet.add(map);\r\n        }\r\n        return getCircuits(mapsSet);\r\n    }","label":0}
{"text":"func (s *CreateUserInput) SetUsername(v string) *CreateUserInput {\n\ts.Username = &v\n\treturn s\n}","label":0}
{"text":"def insert_empty_rows(self, y: int, amount: int = 1) -> None:\n        \"\"\"\"\"\"\n        def transform_rows(\n                column: Union[int, float],\n                row: Union[int, float]\n        ) -> Tuple[Union[int, float], Union[int, float]]:\n            return column, row + (amount if row >= y else 0)\n        self._transform_coordinates(transform_rows)","label":0}
{"text":"public function destroyRegisteredSsoClientSessions(SessionInterface $session) {\n\t\tif (!$session->isStarted()) {\n\t\t\treturn;\n\t\t}\n\n\t\t$ssoClients = $this->getRegisteredSsoClients($session);\n\t\t$sessionId = $session->getId();\n\n\t\t$ssoServer = $this->ssoServerFactory->create();\n\t\t$this->ssoClientNotifier->destroySession($ssoServer, $sessionId, $ssoClients);\n\t}","label":0}
{"text":"public static function h(\n        string $content, \n        int $level = 1, \n        $attributes = []\n    ) : string\n    {\n        return self::tag(\"h\".$level, $content, $attributes);\n    }","label":0}
{"text":"public function sanitize($data)\n    {\n        if(is_array($data) || $data instanceof Traversable)\n        {\n            foreach((array)$data as $key => $value)\n            {\n                if(is_array($data)) {\n                    $data[$key] = $this->sanitize($value);\n                } else {\n                    $data->$key = $this->sanitize($value);\n                }\n            }\n        }\n        else  $data = $this->getDelegate()->sanitize($data);\n\n        return $data;\n    }","label":0}
{"text":"public function renderPageByUrl($uri, $url, $locale, $layout = null)\n    {\n        $page = null;\n        if ($viewReference = $this->viewReferenceRepository->getReferenceByUrl($url, $locale)) {\n            $page = $this->findPageByReference($viewReference);\n            $this->checkPageValidity($page, ['url' => $url, 'locale' => $locale]);\n            $page->setReference($viewReference);\n\n            if ($page instanceof BasePage\n                && $page->getSeo()\n                && $page->getSeo()->getRedirectTo()\n                && $page->getSeo()->getRedirectTo()->getLinkType() != Link::TYPE_NONE\n                && !$this->session->get('victoire.edit_mode', false)) {\n                $link = $page->getSeo()->getRedirectTo();\n\n                return new RedirectResponse($this->container->get('victoire_widget.twig.link_extension')->victoireLinkUrl($link->getParameters()));\n            }\n\n            return $this->renderPage($page, $layout);\n        } else {\n            try {\n                \/** @var Error404 $error404 *\/\n                $error404 = $this->entityManager->getRepository('VictoireSeoBundle:Error404')->findOneBy(['url' => $uri]);\n                \/** @var Redirection $redirection *\/\n                $redirection = $this->entityManager->getRepository('VictoireSeoBundle:Redirection')->findOneBy(['url' => $uri]);\n\n                $result = $this->redirectionHandler->handleError($redirection, $error404);\n\n                if ($result instanceof Redirection) {\n                    return new RedirectResponse($this->container->get('victoire_widget.twig.link_extension')->victoireLinkUrl(\n                        $result->getLink()->getParameters()\n                    ), Response::HTTP_MOVED_PERMANENTLY);\n                } elseif ($result->getRedirection()) {\n                    return new RedirectResponse($this->container->get('victoire_widget.twig.link_extension')->victoireLinkUrl(\n                        $result->getRedirection()->getLink()->getParameters()\n                    ));\n                }\n            } catch (NoResultException $e) {\n                $error = new Error404();\n\n                $error->setUrl($uri);\n                $error->setType($this->redirectionHandler->handleErrorExtension(pathinfo($uri, PATHINFO_EXTENSION)));\n\n                $this->entityManager->persist($error);\n                $this->entityManager->flush();\n            }\n\n            throw new NotFoundHttpException(sprintf('Page not found (url: \"%s\", locale: \"%s\")', $url, $locale));\n        }\n    }","label":0}
{"text":"public static Character[] boxCharacters(Object src, int srcPos, int len) {\n        return boxCharacters(array(src), srcPos, len);\n    }","label":0}
{"text":"public String getId(OWLClass entity) {\n    for (OWLAnnotationProperty owlObjectProperty : ontology.getAnnotationPropertiesInSignature()) {\n      if (ifExistsAnnotation(owlObjectProperty.toString(), \"id\")) {\n        Set<String> annotation = getAnnotation(entity, owlObjectProperty.getIRI().toString());\n        if (!annotation.isEmpty()) {\n          return annotation.iterator().next();\n        }\n      }\n    }\n    return StringUtils.EMPTY;\n  }","label":0}
{"text":"def to_s\n      st = @char\n      node = self\n      while node != nil\n        node = node.up\n        break if node==nil\n        st = node.char+st\n      end\n      st\n    end","label":0}
{"text":"def aggregate_task_lm_losses(hparams,\n                             problem_hparams,\n                             logits,\n                             feature_name,\n                             feature):\n  \"\"\"\"\"\"\n  summaries = []\n  vocab_size = problem_hparams.vocab_size[feature_name]\n  if vocab_size is not None and hasattr(hparams, \"vocab_divisor\"):\n    vocab_size += (-vocab_size) % hparams.vocab_divisor\n  modality = problem_hparams.modality[feature_name]\n  loss = hparams.loss.get(feature_name, modalities.get_loss(modality))\n  weights_fn = hparams.weights_fn.get(\n      feature_name, modalities.get_weights_fn(modality))\n  loss_num = 0.\n  loss_den = 0.\n  for task in hparams.problem.task_list:\n    loss_num_, loss_den_ = loss(\n        logits, feature,\n        lambda x: common_layers.weights_multi_problem_all(x, task.task_id),  # pylint: disable=cell-var-from-loop\n        hparams, vocab_size, weights_fn)\n\n    loss_num += loss_num_\n    loss_den += loss_den_\n\n    loss_val = loss_num_ \/ tf.maximum(1.0, loss_den_)\n    summaries.append([task.name+\"_loss\", loss_val])\n\n  return loss_num, loss_den, summaries","label":0}
{"text":"func (c *memoryStore) Get(id string) *Container {\n\tvar res *Container\n\tc.RLock()\n\tres = c.s[id]\n\tc.RUnlock()\n\treturn res\n}","label":0}
{"text":"def parse_memory(s):\n    \"\"\"\"\"\"\n    if isinstance(s, integer):\n        out = s\n    elif isinstance(s, float):\n        out = math_ceil(s)\n    elif isinstance(s, string):\n        s = s.replace(' ', '')\n\n        if not s:\n            raise context.ValueError(\"Could not interpret %r as a byte unit\" % s)\n\n        if s[0].isdigit():\n            for i, c in enumerate(reversed(s)):\n                if not c.isalpha():\n                    break\n\n            index = len(s) - i\n            prefix = s[:index]\n            suffix = s[index:]\n\n            try:\n                n = float(prefix)\n            except ValueError:\n                raise context.ValueError(\"Could not interpret %r as a number\" % prefix)\n        else:\n            n = 1\n            suffix = s\n\n        try:\n            multiplier = _byte_sizes[suffix.lower()]\n        except KeyError:\n            raise context.ValueError(\"Could not interpret %r as a byte unit\" % suffix)\n\n        out = math_ceil(n * multiplier \/ (2 ** 20))\n    else:\n        raise context.TypeError(\"memory must be an integer, got %r\"\n                                % type(s).__name__)\n\n    if out < 0:\n        raise context.ValueError(\"memory must be positive\")\n\n    return out","label":0}
{"text":"public V get(K key) {\n    V value = _cacheImpl.get(key);\n    _requests.incrementAndGet();\n    if (value == null) {\n      value = _missHandler.load(key);\n      _cacheImpl.put(key, value);\n      _misses.incrementAndGet();\n    } else {\n      _hits.incrementAndGet();\n    }\n    return value;\n  }","label":0}
{"text":"public static PendingResult<ElevationResult> getByPoint(GeoApiContext context, LatLng location) {\n    return context.get(API_CONFIG, SingularResponse.class, \"locations\", location.toString());\n  }","label":0}
{"text":"protected function _expandPlugin($file)\n    {\n        preg_match(self::PLUGIN_PATTERN, $file, $matches);\n        if (empty($matches[1]) || empty($matches[2])) {\n            throw new RuntimeException('Missing required parameters');\n        }\n        if (!CorePlugin::isLoaded($matches[1])) {\n            throw new RuntimeException($matches[1] . ' is not a loaded plugin.');\n        }\n        $path = CorePlugin::path($matches[1]);\n\n        return $path . 'webroot' . DS . $matches[2];\n    }","label":0}
{"text":"private function resolveNamespace(RequestStack $requestStack = null)\n    {\n        if ($requestStack !== null && ($request = $requestStack->getMasterRequest())) {\n            return $request->isSecure() ? 'https-' : '';\n        }\n\n        return !empty($_SERVER['HTTPS']) && 'off' !== strtolower($_SERVER['HTTPS']) ? 'https-' : '';\n    }","label":0}
{"text":"@Nullable\n  public static PrimitiveNode convertPrimitiveDataToExpr(\n      PrimitiveData primitiveData, SourceLocation location) {\n    if (primitiveData instanceof StringData) {\n      return new StringNode(primitiveData.stringValue(), QuoteStyle.SINGLE, location);\n    } else if (primitiveData instanceof BooleanData) {\n      return new BooleanNode(primitiveData.booleanValue(), location);\n    } else if (primitiveData instanceof IntegerData) {\n      \/\/ NOTE: We only support numbers in the range of JS [MIN_SAFE_INTEGER, MAX_SAFE_INTEGER]\n      if (!IntegerNode.isInRange(primitiveData.longValue())) {\n        return null;\n      } else {\n        return new IntegerNode(primitiveData.longValue(), location);\n      }\n    } else if (primitiveData instanceof FloatData) {\n      return new FloatNode(primitiveData.floatValue(), location);\n    } else if (primitiveData instanceof NullData) {\n      return new NullNode(location);\n    } else {\n      throw new IllegalArgumentException();\n    }\n  }","label":0}
{"text":"@Override\n    public final int get(int codePoint) {\n        int value;\n        int ix;\n        \n        if (codePoint >= 0) {\n            if (codePoint < 0x0d800 || (codePoint > 0x0dbff && codePoint <= 0x0ffff)) {\n                \/\/ Ordinary BMP code point, excluding leading surrogates.\n                \/\/ BMP uses a single level lookup.  BMP index starts at offset 0 in the Trie2 index.\n                \/\/ 32 bit data is stored in the index array itself.\n                ix = index[codePoint >> UTRIE2_SHIFT_2];\n                ix = (ix << UTRIE2_INDEX_SHIFT) + (codePoint & UTRIE2_DATA_MASK);\n                value = data32[ix];\n                return value;\n            } \n            if (codePoint <= 0xffff) {\n                \/\/ Lead Surrogate Code Point.  A Separate index section is stored for\n                \/\/ lead surrogate code units and code points.\n                \/\/   The main index has the code unit data.\n                \/\/   For this function, we need the code point data.\n                \/\/ Note: this expression could be refactored for slightly improved efficiency, but\n                \/\/       surrogate code points will be so rare in practice that it's not worth it.\n                ix = index[UTRIE2_LSCP_INDEX_2_OFFSET + ((codePoint - 0xd800) >> UTRIE2_SHIFT_2)];\n                ix = (ix << UTRIE2_INDEX_SHIFT) + (codePoint & UTRIE2_DATA_MASK);\n                value = data32[ix];\n                return value;\n            }\n            if (codePoint < highStart) {\n                \/\/ Supplemental code point, use two-level lookup.\n                ix = (UTRIE2_INDEX_1_OFFSET - UTRIE2_OMITTED_BMP_INDEX_1_LENGTH) + (codePoint >> UTRIE2_SHIFT_1);\n                ix = index[ix];\n                ix += (codePoint >> UTRIE2_SHIFT_2) & UTRIE2_INDEX_2_MASK;\n                ix = index[ix];\n                ix = (ix << UTRIE2_INDEX_SHIFT) + (codePoint & UTRIE2_DATA_MASK);\n                value = data32[ix];\n                return value;\n            }\n            if (codePoint <= 0x10ffff) {\n                value = data32[highValueIndex];\n                return value;\n            }\n        }\n        \n        \/\/ Fall through.  The code point is outside of the legal range of 0..0x10ffff.\n        return errorValue;\n    }","label":0}
{"text":"func (s *shareDBV1) Load(filename string) *probe.Error {\n\ts.mutex.Lock()\n\tdefer s.mutex.Unlock()\n\n\t\/\/ Check if the db file exist.\n\tif _, e := os.Stat(filename); e != nil {\n\t\treturn probe.NewError(e)\n\t}\n\n\t\/\/ Initialize and load using quick package.\n\tqs, e := quick.NewConfig(newShareDBV1(), nil)\n\tif e != nil {\n\t\treturn probe.NewError(e).Trace(filename)\n\t}\n\te = qs.Load(filename)\n\tif e != nil {\n\t\treturn probe.NewError(e).Trace(filename)\n\t}\n\n\t\/\/ Copy map over.\n\tfor k, v := range qs.Data().(*shareDBV1).Shares {\n\t\ts.Shares[k] = v\n\t}\n\n\t\/\/ Filter out expired entries and save changes back to disk.\n\ts.deleteAllExpired()\n\ts.save(filename)\n\n\treturn nil\n}","label":0}
{"text":"func (r RouterJSR311) detectDispatcher(requestPath string, dispatchers []*WebService) (*WebService, string, error) {\n\tfiltered := &sortableDispatcherCandidates{}\n\tfor _, each := range dispatchers {\n\t\tmatches := each.pathExpr.Matcher.FindStringSubmatch(requestPath)\n\t\tif matches != nil {\n\t\t\tfiltered.candidates = append(filtered.candidates,\n\t\t\t\tdispatcherCandidate{each, matches[len(matches)-1], len(matches), each.pathExpr.LiteralCount, each.pathExpr.VarCount})\n\t\t}\n\t}\n\tif len(filtered.candidates) == 0 {\n\t\tif trace {\n\t\t\ttraceLogger.Printf(\"no WebService was found to match URL path:%s\\n\", requestPath)\n\t\t}\n\t\treturn nil, \"\", errors.New(\"not found\")\n\t}\n\tsort.Sort(sort.Reverse(filtered))\n\treturn filtered.candidates[0].dispatcher, filtered.candidates[0].finalMatch, nil\n}","label":0}
{"text":"func (s *StatusCodes) Validate() error {\n\tinvalidParams := request.ErrInvalidParams{Context: \"StatusCodes\"}\n\tif s.Items == nil {\n\t\tinvalidParams.Add(request.NewErrParamRequired(\"Items\"))\n\t}\n\tif s.Items != nil && len(s.Items) < 1 {\n\t\tinvalidParams.Add(request.NewErrParamMinLen(\"Items\", 1))\n\t}\n\tif s.Quantity == nil {\n\t\tinvalidParams.Add(request.NewErrParamRequired(\"Quantity\"))\n\t}\n\n\tif invalidParams.Len() > 0 {\n\t\treturn invalidParams\n\t}\n\treturn nil\n}","label":0}
{"text":"public void verifyContained(V value) throws ValueOutOfRangeException {\n\n    if (!isContained(value)) {\n      throw new ValueOutOfRangeException(null, value, this.min, this.max);\n    }\n  }","label":0}
{"text":"public function handle(SupervisorFactory $factory)\n    {\n        $supervisor = $factory->make(\n            $this->supervisorOptions()\n        );\n\n        try {\n            $supervisor->ensureNoDuplicateSupervisors();\n        } catch (Exception $e) {\n            $this->error('A supervisor with this name is already running.');\n\n            return 13;\n        }\n\n        $this->start($supervisor);\n    }","label":0}
{"text":"func SerfDefaultConfig() *serf.Config {\n\tbase := serf.DefaultConfig()\n\n\t\/\/ This effectively disables the annoying queue depth warnings.\n\tbase.QueueDepthWarning = 1000000\n\n\t\/\/ This enables dynamic sizing of the message queue depth based on the\n\t\/\/ cluster size.\n\tbase.MinQueueDepth = 4096\n\n\t\/\/ This gives leaves some time to propagate through the cluster before\n\t\/\/ we shut down. The value was chosen to be reasonably short, but to\n\t\/\/ allow a leave to get to over 99.99% of the cluster with 100k nodes\n\t\/\/ (using https:\/\/www.serf.io\/docs\/internals\/simulator.html).\n\tbase.LeavePropagateDelay = 3 * time.Second\n\n\treturn base\n}","label":0}
{"text":"func (m *compactionMetrics) PrometheusCollectors() []prometheus.Collector {\n\treturn []prometheus.Collector{\n\t\tm.Compactions,\n\t\tm.CompactionsActive,\n\t\tm.CompactionDuration,\n\t\tm.CompactionQueue,\n\t}\n}","label":0}
{"text":"protected <T> DomainObjectMatch<T> createMatchForInternal(List<T> domainObjects,\n\t\t\tClass<T> domainObjectType) {\n\t\tDomainObjectMatch<T> ret = APIAccess.createDomainObjectMatch(domainObjectType,\n\t\t\t\tthis.queryExecutor.getDomainObjectMatches().size(),\n\t\t\t\tthis.queryExecutor.getMappingInfo());\n\t\tthis.queryExecutor.getDomainObjectMatches().add(ret);\n\t\tFromPreviousQueryExpression pqe = new FromPreviousQueryExpression(\n\t\t\t\tret, domainObjects);\n\t\tthis.queryExecutor.addAstObject(pqe);\n\t\treturn ret;\n\t}","label":0}
{"text":"private function withdrawSoap(VendorInterface $vendor, $amount, $label)\n    {\n        $parameters = array('amount' => $amount, 'label' => $label);\n        $parameters = $this->mergeSubAccountParameters($vendor, $parameters);\n        $result = $this->callSoap('create', $parameters);\n\n        return $result['transactionPublicId'];\n    }","label":0}
{"text":"func (s *AccountSettings) SetDisableRemoteControl(v bool) *AccountSettings {\n\ts.DisableRemoteControl = &v\n\treturn s\n}","label":0}
{"text":"function drawHandles() {\n            let handleFillColor = colorHelper.colorSchemasHuman.grey[1];\n\n            \/\/ Styling\n            handle = chartBrush\n                        .selectAll('.handle.brush-rect')\n                        .style('fill', handleFillColor);\n        }","label":0}
{"text":"private function _clanById(string $param): Clan\n    {\n        $curlClient = curl_init(\n            self::BASE_URL .\n            self::CLANS_URL .\n            '\/' .\n            \\urlencode($param)\n        );\n        curl_setopt($curlClient, CURLOPT_HTTPHEADER, $this->_curlHeader);\n        curl_setopt($curlClient, CURLOPT_RETURNTRANSFER, true);\n        $result = json_decode(curl_exec($curlClient), true);\n        return Clan::create($result);\n    }","label":0}
{"text":"def __del_running_bp(self, tid, bp):\n        \"\"\n        self.__runningBP[tid].remove(bp)\n        if not self.__runningBP[tid]:\n            del self.__runningBP[tid]","label":0}
{"text":"public function getParsedContentAttribute()\n\t{\n\t\tif (Config::get('core::wardrobe.cache'))\n\t\t{\n\t\t\t$content = $this->attributes['content'];\n\n\t\t\treturn Cache::rememberForever('post-'.$this->attributes['id'], function() use ($content)\n\t\t\t{\n\t\t\t\treturn md($content);\n\t\t\t});\n\t\t}\n\n\t\treturn md($this->attributes['content']);\n\t}","label":0}
{"text":"func NewExtractor(variable string) (SourceExtractor, error) {\n\tif variable == \"client.ip\" {\n\t\treturn ExtractorFunc(extractClientIP), nil\n\t}\n\tif variable == \"request.host\" {\n\t\treturn ExtractorFunc(extractHost), nil\n\t}\n\tif strings.HasPrefix(variable, \"request.header.\") {\n\t\theader := strings.TrimPrefix(variable, \"request.header.\")\n\t\tif len(header) == 0 {\n\t\t\treturn nil, fmt.Errorf(\"wrong header: %s\", header)\n\t\t}\n\t\treturn makeHeaderExtractor(header), nil\n\t}\n\treturn nil, fmt.Errorf(\"unsupported limiting variable: '%s'\", variable)\n}","label":0}
{"text":"public void getAll(boolean discard)\r\n    {\r\n        if (discard)\r\n        {\r\n            mark = position;\r\n            marked = remaining;\r\n        }\r\n        else\r\n        {\r\n            marked += remaining;\r\n        }\r\n        position = (position+remaining) % capacity;\r\n        remaining = 0;\r\n        updated();\r\n    }","label":0}
{"text":"func gatherHostportMappings(podPortMapping *PodPortMapping) []*PortMapping {\n\tmappings := []*PortMapping{}\n\tfor _, pm := range podPortMapping.PortMappings {\n\t\tif pm.HostPort <= 0 {\n\t\t\tcontinue\n\t\t}\n\t\tmappings = append(mappings, pm)\n\t}\n\treturn mappings\n}","label":0}
{"text":"public final EObject entryRuleTypeReferenceWithTypeArgs() throws RecognitionException {\n        EObject current = null;\n\n        EObject iv_ruleTypeReferenceWithTypeArgs = null;\n\n\n        try {\n            \/\/ InternalSARL.g:9222:66: (iv_ruleTypeReferenceWithTypeArgs= ruleTypeReferenceWithTypeArgs EOF )\n            \/\/ InternalSARL.g:9223:2: iv_ruleTypeReferenceWithTypeArgs= ruleTypeReferenceWithTypeArgs EOF\n            {\n            if ( state.backtracking==0 ) {\n               newCompositeNode(grammarAccess.getTypeReferenceWithTypeArgsRule()); \n            }\n            pushFollow(FOLLOW_1);\n            iv_ruleTypeReferenceWithTypeArgs=ruleTypeReferenceWithTypeArgs();\n\n            state._fsp--;\n            if (state.failed) return current;\n            if ( state.backtracking==0 ) {\n               current =iv_ruleTypeReferenceWithTypeArgs; \n            }\n            match(input,EOF,FOLLOW_2); if (state.failed) return current;\n\n            }\n\n        }\n\n            catch (RecognitionException re) {\n                recover(input,re);\n                appendSkippedTokens();\n            }\n        finally {\n        }\n        return current;\n    }","label":0}
{"text":"func (in *StringSource) DeepCopyInto(out *StringSource) {\n\t*out = *in\n\tout.StringSourceSpec = in.StringSourceSpec\n\treturn\n}","label":0}
{"text":"protected function hasFilter($permission)\n    {\n        if ($this->cacheHas($permission)\n            && true === $this->cache($permission)\n        ) {\n            return true;\n        }\n\n        $permissionResult   =   $this->getPermission($permission);\n\n        if ($permissionResult) {\n            return $this->cache($permission, $permissionResult->isAllowed());\n        }\n\n        return $this->cache($permission, false);\n    }","label":0}
{"text":"public function findActiveItem()\n    {\n        foreach ($this->items as $index => $item) {\n            $index++;\n\n            if ($item->number == $this->currentPage) {\n                $item->active = true;\n            }\n        }\n    }","label":0}
{"text":"func (s *Build) SetEnvironment(v *ProjectEnvironment) *Build {\n\ts.Environment = v\n\treturn s\n}","label":0}
{"text":"@SuppressWarnings(\"unchecked\")\r\n\tpublic EList<IfcRelCoversBldgElements> getHasCoverings() {\r\n\t\treturn (EList<IfcRelCoversBldgElements>) eGet(Ifc2x3tc1Package.Literals.IFC_ELEMENT__HAS_COVERINGS, true);\r\n\t}","label":0}
{"text":"def prompt_for_config(context, no_input=False):\n    \n    cookiecutter_dict = OrderedDict([])\n    env = StrictEnvironment(context=context)\n\n    # First pass: Handle simple and raw variables, plus choices.\n    # These must be done first because the dictionaries keys and\n    # values might refer to them.\n    for key, raw in iteritems(context[u'cookiecutter']):\n        if key.startswith(u'_'):\n            cookiecutter_dict[key] = raw\n            continue\n\n        try:\n            if isinstance(raw, list):\n                # We are dealing with a choice variable\n                val = prompt_choice_for_config(\n                    cookiecutter_dict, env, key, raw, no_input\n                )\n                cookiecutter_dict[key] = val\n            elif not isinstance(raw, dict):\n                # We are dealing with a regular variable\n                val = render_variable(env, raw, cookiecutter_dict)\n\n                if not no_input:\n                    val = read_user_variable(key, val)\n\n                cookiecutter_dict[key] = val\n        except UndefinedError as err:\n            msg = \"Unable to render variable '{}'\".format(key)\n            raise UndefinedVariableInTemplate(msg, err, context)\n\n    # Second pass; handle the dictionaries.\n    for key, raw in iteritems(context[u'cookiecutter']):\n\n        try:\n            if isinstance(raw, dict):\n                # We are dealing with a dict variable\n                val = render_variable(env, raw, cookiecutter_dict)\n\n                if not no_input:\n                    val = read_user_dict(key, val)\n\n                cookiecutter_dict[key] = val\n        except UndefinedError as err:\n            msg = \"Unable to render variable '{}'\".format(key)\n            raise UndefinedVariableInTemplate(msg, err, context)\n\n    return cookiecutter_dict","label":0}
{"text":"private Boolean toBoolean(Object value) {\n\t\tif (value == null) {\n\t\t\treturn null;\n\t\t} else if (value instanceof Boolean) {\n\t\t\treturn (Boolean) value;\n\t\t} else if (value instanceof String) {\n\t\t\treturn Boolean.parseBoolean((String) value);\n\t\t} else if (value instanceof Short) {\n\t\t\treturn (Short) value != 0;\n\t\t} else if (value instanceof Integer) {\n\t\t\treturn (Integer) value != 0;\n\t\t} else if (value instanceof Long) {\n\t\t\treturn (Long) value != 0;\n\t\t} else if (value instanceof Float) {\n\t\t\treturn (Float) value != 0;\n\t\t} else if (value instanceof Double) {\n\t\t\treturn (Double) value != 0;\n\t\t}\n\n\t\treturn null;\n\t}","label":0}
{"text":"public void set(SourceCodeLocation sourceCodeLocation, String name, Value value) {\n        if (name.length() > 1) {\n            int dot;\n            if (name.charAt(0) == LPAREN) {\n                int start = name.indexOf(RPAREN);\n                dot = name.indexOf(DOT, start);\n            } else {\n                dot = name.indexOf(DOT);\n            }\n            if (dot > 0) {\n                String fieldName = name.substring(0, dot);\n                String rest = name.substring(dot + 1);\n                Key key = createKey(fieldName);\n                DynamicMessage msg;\n                if (fields.containsKey(key)) {\n                    msg = getChildMessage(value, key);\n                } else {\n                    msg = new DynamicMessage();\n                    fields.put(key, Value.createMessage(sourceCodeLocation, msg));\n                }\n                msg.set(sourceCodeLocation, rest, value);\n            } else {\n                Key key = createKey(name);\n                set(key, value);\n            }\n        } else {\n            Key key = Key.field(name);\n            set(key, value);\n        }\n    }","label":0}
{"text":"public function expireCampaigns($ids)\n    {\n        $bind = [\n            'send_status' => \\Dotdigitalgroup\\Email\\Model\\Campaign::SENT,\n            'message' => 'Check sending status in Engagement Cloud',\n            'updated_at' => $this->datetime->gmtDate()\n        ];\n        $this->getConnection()\n            ->update(\n                $this->getMainTable(),\n                $bind,\n                [\"id in (?)\" => $ids]\n        );\n    }","label":0}
{"text":"def read_config(self):\n        \n        with open(self.config_file) as cfg:\n            try:\n                self.config.read_file(cfg)\n            except AttributeError:\n                self.config.readfp(cfg)\n\n        self.client_id = self.config.get('exist', 'client_id')\n        self.client_secret = self.config.get('exist', 'client_secret')\n        self.access_token = self.config.get('exist', 'access_token')","label":0}
{"text":"public static void multBlockAdd_zerosone( double[] dataA, double []dataB, double []dataC,\n                                              int indexA, int indexB, int indexC,\n                                              final int heightA, final int widthA, final int widthC) {\n\n\n        for( int i = 0; i < heightA; i++ ) {\n            for( int j = 0; j < widthC; j++ ) {\n                double val = i < widthA ? dataB[i*widthC+j+indexB] : 0;\n\n                int end = Math.min(i,widthA);\n\n                for( int k = 0; k < end; k++ ) {\n                    val += dataA[i*widthA + k + indexA] * dataB[k*widthC + j + indexB];\n                }\n\n                dataC[ i*widthC + j + indexC ] += val;\n            }\n        }\n    }","label":0}
{"text":"def kegg_pathway(df, pathway, a, b=None, ids_from=\"Proteins\", cmap=cm.PuOr_r, is_log2=False, fillna=None, z_score=1):\n    \n\n    df = df.copy()\n\n    if np.any(df.values < 0) and not is_log2:\n        warnings.warn(\"Input data has negative values. If data is log2 transformed, set is_log2=True.\")\n\n    if fillna is not None:\n        df = df.fillna(fillna)\n\n    if z_score is None:\n        pass\n    elif z_score == 0:\n        df = (df - df.median(axis=0)) \/ df.std(axis=0)\n    elif z_score == 1:\n        df = ((df.T - df.median(axis=1).T) \/ df.std(axis=1).T).T\n\n\n    if b is not None:\n        # Calculate ratio between two groups\n        g1, g2 = df[a].values, df[b].values\n\n        if is_log2:\n            dr = np.nanmean(g2, axis=1) - np.nanmean(g1, axis=1)\n        else:\n            dr = np.log2(np.nanmean(g2, axis=1) \/ np.nanmean(g1, axis=1))\n\n    else:\n        g1 = df[a].values\n        dr = np.nanmean(g1, axis=1)\n\n\n    maxi = np.max(abs(dr))\n    norm = mpl.colors.Normalize(vmin=-maxi, vmax=maxi)\n    mapper = cm.ScalarMappable(norm=norm, cmap=cm.PuOr_r) # Orange up\n\n    node_colors = {}\n    for p, v in zip(df.index.get_level_values(ids_from), dr):\n        pid = str(p).split(\";\")[-1]\n\n        if \"_\" in pid:\n            pid = pid[:pid.index(\"_\")]\n\n        node_colors[pid] = mpl.colors.rgb2hex(mapper.to_rgba(v))\n\n\n    global uniprot_kegg_cache\n\n    # Only do this once\n    upids = list( node_colors.keys() )\n    upids = [p for p in upids if p not in uniprot_kegg_cache.keys()]\n\n    if upids:\n        new_pairs = get_uniprot_id_mapping_pairs('ACC+ID', 'KEGG_ID', upids)\n        uniprot_kegg_cache.update(new_pairs)\n\n        for p in upids:\n            if p not in uniprot_kegg_cache:\n                uniprot_kegg_cache[p] = None # Not found, don't look again\n\n\n    with StringIO() as f:\n        f.write('#hsa\\tData\\n')\n        for k, c in list(node_colors.items()):\n            if k in uniprot_kegg_cache and uniprot_kegg_cache[k] is not None:\n                kids = uniprot_kegg_cache[k]\n                for kegg_id in kids:\n                    f.write('%s\\t%s\\n' % (kegg_id.split(':')[-1], c ))\n\n        # Reset file\n        f.seek(0)\n\n        url = 'https:\/\/www.kegg.jp\/kegg-bin\/mcolor_pathway'\n        m = MultipartEncoder(\n            fields={\n                'map': pathway,\n                'mapping_list': ('filename', f),\n                'mode': 'color',\n                'submit': 'Exec',\n                'reference': 'white',\n                 }\n        )\n\n    r = requests.post(url, data=m, headers={'Content-Type': m.content_type})\n    if r.status_code == 200:\n        # src=\"\/tmp\/mark_pathway154353327948969\/hsa04010.1.png\"\n        ms = re.finditer('src=\"(\/tmp\/mark_pathway[^\"]*.png)\"', r.text)\n        m = list(ms).pop()\n\n        # Download image data\n        image = Image.open(requests.get('http:\/\/www.kegg.jp%s' % m.group(1), stream=True).raw)\n        width, height = image.size   # Get dimensions\n        image = image.crop((1, 1, width-1, height-1)) # Crop black outline\n        print(\"Scale range: %.2f .. %.2f\" % (-maxi, maxi))\n\n        return image","label":0}
{"text":"def getback(config, force=False):\n    \"\"\"\"\"\"\n    repo = config.repo\n\n    active_branch = repo.active_branch\n    if active_branch.name == \"master\":\n        error_out(\"You're already on the master branch.\")\n\n    if repo.is_dirty():\n        error_out(\n            'Repo is \"dirty\". ({})'.format(\n                \", \".join([repr(x.b_path) for x in repo.index.diff(None)])\n            )\n        )\n\n    branch_name = active_branch.name\n\n    state = read(config.configfile)\n    origin_name = state.get(\"ORIGIN_NAME\", \"origin\")\n    upstream_remote = None\n    fork_remote = None\n    for remote in repo.remotes:\n        if remote.name == origin_name:\n            # remote.pull()\n            upstream_remote = remote\n            break\n    if not upstream_remote:\n        error_out(\"No remote called {!r} found\".format(origin_name))\n\n    # Check out master\n    repo.heads.master.checkout()\n    upstream_remote.pull(repo.heads.master)\n\n    # Is this one of the merged branches?!\n    # XXX I don't know how to do this \"natively\" with GitPython.\n    merged_branches = [\n        x.strip()\n        for x in repo.git.branch(\"--merged\").splitlines()\n        if x.strip() and not x.strip().startswith(\"*\")\n    ]\n    was_merged = branch_name in merged_branches\n    certain = was_merged or force\n    if not certain:\n        # Need to ask the user.\n        # XXX This is where we could get smart and compare this branch\n        # with the master.\n        certain = (\n            input(\"Are you certain {} is actually merged? [Y\/n] \".format(branch_name))\n            .lower()\n            .strip()\n            != \"n\"\n        )\n    if not certain:\n        return 1\n\n    if was_merged:\n        repo.git.branch(\"-d\", branch_name)\n    else:\n        repo.git.branch(\"-D\", branch_name)\n\n    fork_remote = None\n    for remote in repo.remotes:\n        if remote.name == state.get(\"FORK_NAME\"):\n            fork_remote = remote\n            break\n    if fork_remote:\n        fork_remote.push(\":\" + branch_name)\n        info_out(\"Remote branch on fork deleted too.\")","label":0}
{"text":"def load_pricing_adjustments(self, columns, dts, assets):\n        \n        out = [None] * len(columns)\n        for i, column in enumerate(columns):\n            adjs = {}\n            for asset in assets:\n                adjs.update(self._get_adjustments_in_range(\n                    asset, dts, column))\n            out[i] = adjs\n        return out","label":0}
{"text":"function(product, options, callback) {\n\n            if (arguments.length === 2) {\n                callback = options;\n                options = null;\n            }\n\n            if (options && options.clone) {\n                product = product.clone(options.clone);\n            }\n\n            var bus = this.$.bus,\n                self = this;\n\n            \/\/noinspection JSValidateTypes\n            flow()\n                .seq(function(cb) {\n                    self.$.context.getCollection(\"printTypes\").fetch({\n                        fullData: true\n                    }, cb);\n                })\n                .seq(function(cb) {\n                    bus.setUp(product);\n                    product.init(cb);\n                })\n                .exec(function(err) {\n                    callback && callback(err, product);\n                });\n        }","label":0}
{"text":"public function getHTML() {\r\n        $tag = '<form';\r\n        $q = $this->quoteType;\r\n\r\n        \/\/build attribute strings\r\n        foreach( $this->attrs as $name=>$value ) {\r\n            \/\/if true, such as CHECKED, we just add the name\r\n            if( $value === true )\r\n                    $tag .= \" $name\";\r\n            elseif( is_string( $value ) ) \/\/if it's a string, we add attr=\"value\"\r\n                    $tag .= \" {$name}={$q}{$value}{$q}\";\r\n        }\r\n\r\n        \/\/not a short tag, close it\r\n        $tag .= '>';\r\n\r\n        \/\/add the children if they exist\r\n        if( $this->hasChildren() ) {\r\n            for( $i = 0; $i < count( $this->children ); $i++ ) {\r\n                \/\/datalists are hidden and should not be decorated\r\n                if( $this->children[$i] instanceof Element\\Datalist ) {\r\n                    $tag .= $this->children[$i]->getHTML();\r\n                } else {\r\n                    $tag .= $this->decorator->element( $this->children[$i]->getHTML(), $this->titles[$i] );\r\n                }\r\n            }\r\n        }\r\n\r\n        \/\/closing tag\r\n        $tag .= \"<\/form>\";\r\n\r\n        return $this->decorator->form( $tag );\r\n    }","label":0}
{"text":"public com.google.cloud.datalabeling.v1beta1.LabelTextEntityExtractionOperationMetadata\n      getTextEntityExtractionDetails() {\n    if (detailsCase_ == 13) {\n      return (com.google.cloud.datalabeling.v1beta1.LabelTextEntityExtractionOperationMetadata)\n          details_;\n    }\n    return com.google.cloud.datalabeling.v1beta1.LabelTextEntityExtractionOperationMetadata\n        .getDefaultInstance();\n  }","label":0}
{"text":"public function selectQuery($fields = null)\n    {\n        \/**\/$this->app->pr->start('selectQuery\/getActualF');\n\n        $actual_fields = $fields ?: $this->getActualFields();\n\n        if ($this->fast && $this->_selectQuery) {\n            return $this->_selectQuery();\n        }\n\n        $this->_selectQuery = $select = $this->_dsql()->del('fields');\n\n        \/**\/$this->app->pr->next('selectQuery\/addSystemFields');\n        \/\/ add system fields into select\n        foreach ($this->elements as $el) {\n            if ($el instanceof Field) {\n                if ($el->system() && !in_array($el->short_name, $actual_fields)) {\n                    $actual_fields[] = $el->short_name;\n                }\n            }\n        }\n        \/**\/$this->app->pr->next('selectQuery\/updateQuery');\n\n        \/\/ add actual fields\n        foreach ($actual_fields as $field) {\n            \/** @type Field $field *\/\n            $field = $this->hasElement($field);\n            if (!$field) {\n                continue;\n            }\n\n            $field->updateSelectQuery($select);\n        }\n        \/**\/$this->app->pr->stop();\n\n        return $select;\n    }","label":0}
{"text":"func New(s store.Store, ctx context.Context) (watcher.Watcher, error) {\n\tret := &ContainerWatcher{\n\t\tinvertsTable: make(map[string]string),\n\t}\n\tbase, err := watcher.New(s, ctx, KEY, ret.convert, ret.invertKey)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tret.BaseWatcher = *base\n\treturn ret, nil\n}","label":0}
{"text":"String toUriString(String defaultScheme, String defaultHostname, int defaultPort) {\n        requireNonNull(defaultScheme, \"defaultScheme\");\n        requireNonNull(defaultHostname, \"defaultHostname\");\n        validatePort(defaultPort);\n\n        final StringBuilder sb = new StringBuilder();\n        sb.append(firstNonNull(uri.getScheme(), defaultScheme)).append(\":\/\/\")\n          .append(firstNonNull(uri.getHost(), defaultHostname)).append(':')\n          .append(uri.getPort() > 0 ? uri.getPort() : defaultPort)\n          .append(uri.getPath());\n        return sb.toString();\n    }","label":0}
{"text":"public String serializeTransformList(List<Transform> list) {\n        ObjectMapper om = getObjectMapper();\n        try {\n            return om.writeValueAsString(new ListWrappers.TransformList(list));\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n    }","label":0}
{"text":"func (_class SubjectClass) GetRecord(sessionID SessionRef, self SubjectRef) (_retval SubjectRecord, _err error) {\n\t_method := \"subject.get_record\"\n\t_sessionIDArg, _err := convertSessionRefToXen(fmt.Sprintf(\"%s(%s)\", _method, \"session_id\"), sessionID)\n\tif _err != nil {\n\t\treturn\n\t}\n\t_selfArg, _err := convertSubjectRefToXen(fmt.Sprintf(\"%s(%s)\", _method, \"self\"), self)\n\tif _err != nil {\n\t\treturn\n\t}\n\t_result, _err := _class.client.APICall(_method, _sessionIDArg, _selfArg)\n\tif _err != nil {\n\t\treturn\n\t}\n\t_retval, _err = convertSubjectRecordToGo(_method + \" -> \", _result.Value)\n\treturn\n}","label":0}
{"text":"def isatty_from_env(cls, env):\n    \n    def str_int_bool(i):\n      return i.isdigit() and bool(int(i))  # Environment variable values should always be strings.\n\n    return tuple(\n      str_int_bool(env.get(cls.TTY_ENV_TMPL.format(fd_id), '0')) for fd_id in STDIO_DESCRIPTORS\n    )","label":0}
{"text":"func (s *GetPatchBaselineOutput) SetApprovedPatchesComplianceLevel(v string) *GetPatchBaselineOutput {\n\ts.ApprovedPatchesComplianceLevel = &v\n\treturn s\n}","label":0}
{"text":"private function requestGoalResults(AnalyticsOverview $overview, $metrics, $dimensions)\n    {\n        $timestamps = $this->getTimestamps($overview);\n\n        \/\/ execute query\n        $results = $this->query->getResultsByDate(\n            $timestamps['begin'],\n            $timestamps['end'],\n            $metrics,\n            $dimensions\n        );\n\n        return $results->getRows();\n    }","label":0}
{"text":"def SURFstar_compute_scores(inst, attr, nan_entries, num_attributes, mcmap, NN_near, NN_far, headers, class_type, X, y, labels_std, data_type):\r\n    \r\n    scores = np.zeros(num_attributes)\r\n    for feature_num in range(num_attributes):\r\n        if len(NN_near) > 0:\r\n            scores[feature_num] += compute_score(attr, mcmap, NN_near, feature_num, inst,\r\n                                                 nan_entries, headers, class_type, X, y, labels_std, data_type)\r\n        # Note that we are using the near scoring loop in 'compute_score' and then just subtracting it here, in line with original SURF* paper.\r\n        if len(NN_far) > 0:\r\n            scores[feature_num] -= compute_score(attr, mcmap, NN_far, feature_num, inst,\r\n                                                 nan_entries, headers, class_type, X, y, labels_std, data_type)\r\n    return scores","label":0}
{"text":"static protected function createResources($definitions) {\n\t\t$resources = [];\n\t\t\n\t\tforeach ($definitions as $name => $options) {\n\t\t\tif (! isset($options['type'])) {\n\t\t\t\tthrow new InvalidOptions('Type of resource must be specified');\n\t\t\t}\n\t\t\t\n\t\t\t$class = self::NAMESPACE_RESOURCE . '\\\\' . ucfirst($options['type']);\n\t\t\tunset($options['type']);\n\t\t\t\n\t\t\t$resources[$name] = new $class($options);\n\t\t}\n\t\t\n\t\treturn $resources;\n\t}","label":0}
{"text":"public function deleteImportedContent() {\n    $uuids = $this->state->get('govcms8_default_content_uuids', []);\n    $by_entity_type = array_reduce(array_keys($uuids), function ($carry, $uuid) use ($uuids) {\n      $entity_type_id = $uuids[$uuid];\n      $carry[$entity_type_id][] = $uuid;\n      return $carry;\n    }, []);\n    foreach ($by_entity_type as $entity_type_id => $entity_uuids) {\n      $storage = $this->entityTypeManager->getStorage($entity_type_id);\n      $entities = $storage->loadByProperties(['uuid' => $entity_uuids]);\n      $storage->delete($entities);\n    }\n    return $this;\n  }","label":0}
{"text":"@Override\n    public void releaseBuffer ( byte[] buf ) {\n        \/\/ better safe than sorry: prevent leaks if there is some out of bound access\n        Arrays.fill(buf, (byte) 0);\n        synchronized ( this.cache ) {\n            if ( this.freeBuffers < this.cache.length ) {\n                for ( int i = 0; i < this.cache.length; i++ ) {\n                    if ( this.cache[ i ] == null ) {\n                        this.cache[ i ] = buf;\n                        this.freeBuffers++;\n                        return;\n                    }\n                }\n            }\n        }\n    }","label":0}
{"text":"def parse_service_data_from_options\n      data = {}\n      data[:strategy] = deploy_strategy if deploy_strategy\n      data[:ports] = parse_ports(ports_list) unless ports_list.empty?\n      data[:links] = parse_links(link_list) unless link_list.empty?\n      data[:memory] = parse_memory(memory) if memory\n      data[:memory_swap] = parse_memory(memory_swap) if memory_swap\n      data[:shm_size] = parse_memory(shm_size) if shm_size\n      data[:cpus] = cpus if cpus\n      data[:cpu_shares] = cpu_shares if cpu_shares\n      data[:affinity] = affinity_list unless affinity_list.empty?\n      data[:env] = env_list unless env_list.empty?\n      data[:secrets] = parse_secrets(secret_list) unless secret_list.empty?\n      data[:container_count] = instances if instances\n      data[:cmd] = Shellwords.split(cmd) if cmd\n      data[:user] = user if user\n      data[:image] = parse_image(image) if image\n      data[:privileged] = privileged?\n      data[:cap_add] = cap_add_list if cap_add_list\n      data[:cap_drop] = cap_drop_list if cap_drop_list\n      data[:net] = net if net\n      data[:log_driver] = log_driver if log_driver\n      data[:log_opts] = parse_log_opts(log_opt_list) if log_opt_list\n      deploy_opts = parse_deploy_opts\n      data[:deploy_opts] = deploy_opts unless deploy_opts.empty?\n      health_check = parse_health_check\n      data[:health_check] = health_check unless health_check.empty?\n      data[:pid] = pid if pid\n      data[:stop_signal] = stop_signal if stop_signal\n      data[:stop_grace_period] = stop_timeout if stop_timeout\n      data\n    end","label":0}
{"text":"private static List<Field> getAllFieldsRec(Class clazz, List<Field> fieldList) {\n        Class superClazz = clazz.getSuperclass();\n        if (superClazz != null) {\n            getAllFieldsRec(superClazz, fieldList);\n        }\n        fieldList.addAll(ArrayUtil.toList(clazz.getDeclaredFields(), Field.class));\n        return fieldList;\n    }","label":0}
{"text":"def columnInfo(self):\n        \n        code = \"proc contents data=\" + self.libref + '.' + self.table + ' ' + self._dsopts() + \";ods select Variables;run;\"\n\n        if self.sas.nosub:\n            print(code)\n            return\n\n        if self.results.upper() == 'PANDAS':\n            code = \"proc contents data=%s.%s %s ;ods output Variables=work._variables ;run;\" % (self.libref, self.table, self._dsopts())\n            pd = self._returnPD(code, '_variables')\n            pd['Type'] = pd['Type'].str.rstrip()\n            return pd\n\n        else:\n            ll = self._is_valid()\n            if self.HTML:\n                if not ll:\n                    ll = self.sas._io.submit(code)\n                if not self.sas.batch:\n                    self.sas.DISPLAY(self.sas.HTML(ll['LST']))\n                else:\n                    return ll\n            else:\n                if not ll:\n                    ll = self.sas._io.submit(code, \"text\")\n                if not self.sas.batch:\n                    print(ll['LST'])\n                else:\n                    return ll","label":0}
{"text":"private function normalizeFileInfo(array $content)\n    {\n        $path = pathinfo($content['Key']);\n\n        return [\n            'type'      => substr($content['Key'], -1) === '\/' ? 'dir' : 'file',\n            'path'      => $content['Key'],\n            'timestamp' => Carbon::parse($content['LastModified'])->getTimestamp(),\n            'size'      => (int) $content['Size'],\n            'dirname'   => (string) $path['dirname'],\n            'basename'  => (string) $path['basename'],\n            'extension' => isset($path['extension']) ? $path['extension'] : '',\n            'filename'  => (string) $path['filename'],\n        ];\n    }","label":0}
{"text":"func (c *syncClient) Scard(arg0 string) (result int64, err Error) {\n\targ0bytes := []byte(arg0)\n\n\tvar resp Response\n\tresp, err = c.conn.ServiceRequest(&SCARD, [][]byte{arg0bytes})\n\tif err == nil {\n\t\tresult = resp.GetNumberValue()\n\t}\n\treturn result, err\n\n}","label":0}
{"text":"func (s *SetPlatformApplicationAttributesInput) SetPlatformApplicationArn(v string) *SetPlatformApplicationAttributesInput {\n\ts.PlatformApplicationArn = &v\n\treturn s\n}","label":0}
{"text":"func (s *DescribeDefaultParametersInput) SetNextToken(v string) *DescribeDefaultParametersInput {\n\ts.NextToken = &v\n\treturn s\n}","label":0}
{"text":"def delete_image_regions(project_id, region_ids, custom_headers:nil)\n      response = delete_image_regions_async(project_id, region_ids, custom_headers:custom_headers).value!\n      nil\n    end","label":0}
{"text":"func (s *StartSelector) SetStartSelectorType(v string) *StartSelector {\n\ts.StartSelectorType = &v\n\treturn s\n}","label":0}
{"text":"public static void encode(byte[] dst, int offset, String s) {\n        final int length = s.length();\n        for (int i = 0; i < length; i++) {\n            char ch = s.charAt(i);\n            if (ch != 0 && ch <= 127) { \/\/ U+0000 uses two bytes.\n                dst[offset++] = (byte) ch;\n            } else if (ch <= 2047) {\n                dst[offset++] = (byte) (0xc0 | (0x1f & (ch >> 6)));\n                dst[offset++] = (byte) (0x80 | (0x3f & ch));\n            } else {\n                dst[offset++] = (byte) (0xe0 | (0x0f & (ch >> 12)));\n                dst[offset++] = (byte) (0x80 | (0x3f & (ch >> 6)));\n                dst[offset++] = (byte) (0x80 | (0x3f & ch));\n            }\n        }\n    }","label":0}
{"text":"def DumpAsCSV (self, separator=\",\", file=sys.stdout):\r\n                \"\"\"\"\"\"\r\n                for row in range(1, self.maxRow + 1):\r\n                        sep = \"\"\r\n                        for column in range(1, self.maxColumn + 1):\r\n                                file.write(\"%s\\\"%s\\\"\" % (sep, self.GetCellValue(column, row, \"\")))\r\n                                sep = separator\r\n                        file.write(\"\\n\")","label":0}
{"text":"func NewService(events *exchange.Exchange) api.EventsServer {\n\treturn &service{\n\t\tttService: &ttrpcService{\n\t\t\tevents: events,\n\t\t},\n\t\tevents: events,\n\t}\n}","label":0}
{"text":"def get_uri(self, ncname: str) -> Optional[str]:\n        \n        uri = cu.expand_uri(ncname + ':', self.curi_maps)\n        return uri if uri and uri.startswith('http') else None","label":0}
{"text":"def _add_right(self, d):\n        '''\n        \n        '''\n        if not self:\n            self._left = d.first\n            self._right = d.second\n        elif d.first == self.right_end():\n            self._right = d.second\n        elif d.second == self.right_end():\n            self._right = d.first\n        else:\n            raise dominoes.EndsMismatchException(\n                '{} cannot be added to the right of'\n                ' the board - values do not match!'.format(d)\n            )\n\n        self._length += 1","label":0}
{"text":"def show_front_page_groups(self, group_id):\r\n        \r\n        path = {}\r\n        data = {}\r\n        params = {}\r\n\r\n        # REQUIRED - PATH - group_id\r\n        \"\"\"ID\"\"\"\r\n        path[\"group_id\"] = group_id\r\n\r\n        self.logger.debug(\"GET \/api\/v1\/groups\/{group_id}\/front_page with query params: {params} and form data: {data}\".format(params=params, data=data, **path))\r\n        return self.generic_request(\"GET\", \"\/api\/v1\/groups\/{group_id}\/front_page\".format(**path), data=data, params=params, single_item=True)","label":0}
{"text":"def namedb_preorder_insert( cur, preorder_rec ):\n    \n\n    preorder_row = copy.deepcopy( preorder_rec )\n    \n    assert 'preorder_hash' in preorder_row, \"BUG: missing preorder_hash\"\n\n    try:\n        preorder_query, preorder_values = namedb_insert_prepare( cur, preorder_row, \"preorders\" )\n    except Exception, e:\n        log.exception(e)\n        log.error(\"FATAL: Failed to insert name preorder '%s'\" % preorder_row['preorder_hash']) \n        os.abort()\n\n    namedb_query_execute( cur, preorder_query, preorder_values )\n    return True","label":0}
{"text":"def register_image(kwargs=None, call=None):\n    '''\n    \n    '''\n\n    if call != 'function':\n        log.error(\n            'The create_volume function must be called with -f or --function.'\n        )\n        return False\n\n    if 'ami_name' not in kwargs:\n        log.error('ami_name must be specified to register an image.')\n        return False\n\n    block_device_mapping = kwargs.get('block_device_mapping', None)\n    if not block_device_mapping:\n        if 'snapshot_id' not in kwargs:\n            log.error('snapshot_id or block_device_mapping must be specified to register an image.')\n            return False\n        if 'root_device_name' not in kwargs:\n            log.error('root_device_name or block_device_mapping must be specified to register an image.')\n            return False\n        block_device_mapping = [{\n            'DeviceName': kwargs['root_device_name'],\n            'Ebs': {\n                'VolumeType': kwargs.get('volume_type', 'gp2'),\n                'SnapshotId': kwargs['snapshot_id'],\n             }\n        }]\n\n    if not isinstance(block_device_mapping, list):\n        block_device_mapping = [block_device_mapping]\n\n    params = {'Action': 'RegisterImage',\n              'Name': kwargs['ami_name']}\n\n    params.update(_param_from_config('BlockDeviceMapping', block_device_mapping))\n\n    if 'root_device_name' in kwargs:\n        params['RootDeviceName'] = kwargs['root_device_name']\n\n    if 'description' in kwargs:\n        params['Description'] = kwargs['description']\n\n    if 'virtualization_type' in kwargs:\n        params['VirtualizationType'] = kwargs['virtualization_type']\n\n    if 'architecture' in kwargs:\n        params['Architecture'] = kwargs['architecture']\n\n    log.debug(params)\n\n    data = aws.query(params,\n                     return_url=True,\n                     return_root=True,\n                     location=get_location(),\n                     provider=get_provider(),\n                     opts=__opts__,\n                     sigver='4')\n\n    r_data = {}\n    for d in data[0]:\n        for k, v in d.items():\n            r_data[k] = v\n\n    return r_data","label":0}
{"text":"def TerminateStuckRunIfNeeded(self, job):\n    \"\"\"\"\"\"\n    if job.current_run_id and job.last_run_time and job.lifetime:\n      now = rdfvalue.RDFDatetime.Now()\n      # We add additional 10 minutes to give the job run a chance to kill itself\n      # during one of the HeartBeat calls (HeartBeat checks if a cron job is\n      # run is running too long and raises if it is).\n      expiration_time = (\n          job.last_run_time + job.lifetime + rdfvalue.Duration(\"10m\"))\n      if now > expiration_time:\n        run = data_store.REL_DB.ReadCronJobRun(job.cron_job_id,\n                                               job.current_run_id)\n        run.status = \"LIFETIME_EXCEEDED\"\n        run.finished_at = now\n        data_store.REL_DB.WriteCronJobRun(run)\n        data_store.REL_DB.UpdateCronJob(\n            job.cron_job_id, current_run_id=None, last_run_status=run.status)\n        stats_collector_instance.Get().RecordEvent(\n            \"cron_job_latency\", (now - job.last_run_time).seconds,\n            fields=[job.cron_job_id])\n        stats_collector_instance.Get().IncrementCounter(\n            \"cron_job_timeout\", fields=[job.cron_job_id])\n\n        return True\n\n    return False","label":0}
{"text":"@Override\n  public DateTimeFormatter getFormatter(Formatter type)\n  {\n    GranularityType granularityType = GranularityType.fromPeriod(period);\n    switch (type) {\n      case DEFAULT:\n        return DateTimeFormat.forPattern(granularityType.getDefaultFormat());\n      case HIVE:\n        return DateTimeFormat.forPattern(granularityType.getHiveFormat());\n      case LOWER_DEFAULT:\n        return DateTimeFormat.forPattern(granularityType.getLowerDefaultFormat());\n      default:\n        throw new IAE(\"There is no format for type %s\", type);\n    }\n  }","label":0}
{"text":"public function show()\n        {\n            try {\n\n                $result = FALSE;\n\n                if (is_null($this->pestObject))\n                    throw new Exception(\"PEST Object not provided or is null\", 503);\n\n                $uri = \"\/channels\";\n                $result = $this->pestObject->get($uri);\n\n                return $result;\n\n\n            } catch (Pest_NotFound $e) {\n                $this->phpariObject->lasterror = $e->getMessage();\n                $this->phpariObject->lasttrace = $e->getTraceAsString();\n\n                return FALSE;\n            } catch (Pest_BadRequest $e) {\n                $this->phpariObject->lasterror = $e->getMessage();\n                $this->phpariObject->lasttrace = $e->getTraceAsString();\n\n                return FALSE;\n            } catch (Exception $e) {\n                $this->phpariObject->lasterror = $e->getMessage();\n                $this->phpariObject->lasttrace = $e->getTraceAsString();\n\n                return FALSE;\n            }\n        }","label":0}
{"text":"def binary_encode_any_high_ascii_in_hash(hash)\n      Hash[hash.map { |key, value| [key, binary_encode_any_high_ascii(value)] }]\n    end","label":0}
{"text":"def getStore(self, name, domain):\n        \"\"\"\"\"\"\n        return IRealm(self.original.store.parent).accountByAddress(name, domain).avatars.open()","label":0}
{"text":"def __pop_top_frame(self):\n        \"\"\"\"\"\"\n        popped = self.__stack.pop()\n        if self.__stack:\n            self.__stack[-1].process_subframe(popped)","label":0}
{"text":"public function offsetGet($offset)\n    {\n        return isset($this->areas[$offset]) ? $this->areas[$offset] : null;\n    }","label":0}
{"text":"private List<String> getGroups(String dn) throws WIMException {\n        List<String> grpList = new ArrayList<String>();\n        String filter = iLdapConfigMgr.getGroupMemberFilter(dn);\n        String[] searchBases = iLdapConfigMgr.getGroupSearchBases();\n        for (int i = 0; i < searchBases.length; i++) {\n            String searchBase = searchBases[i];\n            NamingEnumeration<SearchResult> nenu = iLdapConn.search(searchBase, filter, SearchControls.SUBTREE_SCOPE,\n                                                                    LDAP_ATTR_OBJECTCLASS_ARRAY);\n            while (nenu.hasMoreElements()) {\n                SearchResult thisEntry = nenu.nextElement();\n                if (thisEntry == null) {\n                    continue;\n                }\n                String entryName = thisEntry.getName();\n                if (entryName == null || entryName.trim().length() == 0) {\n                    continue;\n                }\n                grpList.add(LdapHelper.prepareDN(entryName, searchBase));\n            }\n        }\n        return grpList;\n    }","label":0}
{"text":"def visit_Output(self, node, frame):\n        \n        if self.has_known_extends and frame.require_output_check:\n            return\n\n        finalize = self.environment.finalize\n        finalize_context = getattr(finalize, 'contextfunction', False)\n        finalize_eval = getattr(finalize, 'evalcontextfunction', False)\n        finalize_env = getattr(finalize, 'environmentfunction', False)\n\n        if finalize is not None:\n            if finalize_context or finalize_eval:\n                const_finalize = None\n            elif finalize_env:\n                def const_finalize(x):\n                    return finalize(self.environment, x)\n            else:\n                const_finalize = finalize\n        else:\n            def const_finalize(x):\n                return x\n\n        # If we are inside a frame that requires output checking, we do so.\n        outdent_later = False\n\n        if frame.require_output_check:\n            self.writeline('if parent_template is None:')\n            self.indent()\n            outdent_later = True\n\n        # Try to evaluate as many chunks as possible into a static string at\n        # compile time.\n        body = []\n\n        for child in node.nodes:\n            try:\n                if const_finalize is None:\n                    raise nodes.Impossible()\n\n                const = child.as_const(frame.eval_ctx)\n                if not has_safe_repr(const):\n                    raise nodes.Impossible()\n            except nodes.Impossible:\n                body.append(child)\n                continue\n\n            # the frame can't be volatile here, because otherwise the as_const\n            # function would raise an Impossible exception at that point\n            try:\n                if frame.eval_ctx.autoescape:\n                    if hasattr(const, '__html__'):\n                        const = const.__html__()\n                    else:\n                        const = escape(const)\n\n                const = const_finalize(const)\n            except Exception:\n                # if something goes wrong here we evaluate the node at runtime\n                # for easier debugging\n                body.append(child)\n                continue\n\n            if body and isinstance(body[-1], list):\n                body[-1].append(const)\n            else:\n                body.append([const])\n\n        # if we have less than 3 nodes or a buffer we yield or extend\/append\n        if len(body) < 3 or frame.buffer is not None:\n            if frame.buffer is not None:\n                # for one item we append, for more we extend\n                if len(body) == 1:\n                    self.writeline('%s.append(' % frame.buffer)\n                else:\n                    self.writeline('%s.extend((' % frame.buffer)\n\n                self.indent()\n\n            for item in body:\n                if isinstance(item, list):\n                    val = repr(native_concat(item))\n\n                    if frame.buffer is None:\n                        self.writeline('yield ' + val)\n                    else:\n                        self.writeline(val + ',')\n                else:\n                    if frame.buffer is None:\n                        self.writeline('yield ', item)\n                    else:\n                        self.newline(item)\n\n                    close = 0\n\n                    if finalize is not None:\n                        self.write('environment.finalize(')\n\n                        if finalize_context:\n                            self.write('context, ')\n\n                        close += 1\n\n                    self.visit(item, frame)\n\n                    if close > 0:\n                        self.write(')' * close)\n\n                    if frame.buffer is not None:\n                        self.write(',')\n\n            if frame.buffer is not None:\n                # close the open parentheses\n                self.outdent()\n                self.writeline(len(body) == 1 and ')' or '))')\n\n        # otherwise we create a format string as this is faster in that case\n        else:\n            format = []\n            arguments = []\n\n            for item in body:\n                if isinstance(item, list):\n                    format.append(native_concat(item).replace('%', '%%'))\n                else:\n                    format.append('%s')\n                    arguments.append(item)\n\n            self.writeline('yield ')\n            self.write(repr(concat(format)) + ' % (')\n            self.indent()\n\n            for argument in arguments:\n                self.newline(argument)\n                close = 0\n\n                if finalize is not None:\n                    self.write('environment.finalize(')\n\n                    if finalize_context:\n                        self.write('context, ')\n                    elif finalize_eval:\n                        self.write('context.eval_ctx, ')\n                    elif finalize_env:\n                        self.write('environment, ')\n\n                    close += 1\n\n                self.visit(argument, frame)\n                self.write(')' * close + ', ')\n\n            self.outdent()\n            self.writeline(')')\n\n        if outdent_later:\n            self.outdent()","label":0}
{"text":"private function checkIfWorkersCrashed(): void\n    {\n        if ($this->db->query('SELECT COUNT(id) FROM tests')->fetchColumn(0) === '0') {\n            return;\n        }\n\n        throw new RuntimeException(\n            'Some workers have crashed.' . PHP_EOL\n            . '----------------------' . PHP_EOL\n            . 'All workers have quit, but some tests are still to be executed.' . PHP_EOL\n            . 'This may be the case if some tests were killed forcefully (for example, using exit()).' . PHP_EOL\n            . '----------------------' . PHP_EOL\n            . 'Failed test command(s):' . PHP_EOL\n            . '----------------------' . PHP_EOL\n            . implode(PHP_EOL, $this->db->query('SELECT command FROM tests')->fetchAll(PDO::FETCH_COLUMN))\n        );\n    }","label":0}
{"text":"def install\n      return false unless install? quiet: !(logger.level == Logger::DEBUG)\n\n      UNIT_TYPES.each do |type|\n        units[type.to_s.pluralize.to_sym].each do |unit|\n          return nil unless install_unit(unit, type)\n        end\n      end\n      true\n    end","label":0}
{"text":"def list_keys(pymux, variables):\n    \n    # Create help string.\n    result = []\n\n    for k, custom_binding in pymux.key_bindings_manager.custom_bindings.items():\n        needs_prefix, key = k\n\n        result.append('bind-key %3s %-10s %s %s' % (\n            ('-n' if needs_prefix else ''), key, custom_binding.command,\n            ' '.join(map(wrap_argument, custom_binding.arguments))))\n\n    # Display help in pane.\n    result = '\\n'.join(sorted(result))\n    pymux.get_client_state().layout_manager.display_popup('list-keys', result)","label":0}
{"text":"def reduce_to_largest_span(timespan)\n      timespan.begin = timespan.begin.sort.first\n      timespan.end = timespan.end.sort.last\n      timespan\n    end","label":0}
{"text":"public function lBoolOpt(string $name, $default = false): bool\n    {\n        $val = $this->lOpt($name);\n\n        return \\is_bool($val) ? $val : (bool)$default;\n    }","label":0}
{"text":"def parse_close(data):\n    '''\n    '''\n    length = len(data)\n    if length == 0:\n        return 1005, ''\n    elif length == 1:\n        raise ProtocolError(\"Close frame too short\")\n    else:\n        code, = unpack('!H', data[:2])\n        if not (code in CLOSE_CODES or 3000 <= code < 5000):\n            raise ProtocolError(\"Invalid status code for websocket\")\n        reason = data[2:].decode('utf-8')\n        return code, reason","label":0}
{"text":"public function get_regions() {\n        if (is_null($this->defaultregion)) {\n            $this->page->initialise_theme_and_output();\n        }\n        return array_keys($this->regions);\n    }","label":0}
{"text":"def create_project(self, name, **kwargs):\n        \n        data = self._wrap_dict(\"project\", kwargs)\n        data[\"customer\"][\"name\"] = name\n        return self.post(\"\/projects.json\", data=data)","label":0}
{"text":"public static final <T> List<List<T>> split(List<T> list, Predicate<T> predicate)\r\n    {\r\n        if (list.isEmpty())\r\n        {\r\n            return Collections.EMPTY_LIST;\r\n        }\r\n        List<List<T>> lists = new ArrayList<>();\r\n        boolean b = predicate.test(list.get(0));\r\n        int len = list.size();\r\n        int start = 0;\r\n        for (int ii=1;ii<len;ii++)\r\n        {\r\n            boolean t = predicate.test(list.get(ii));\r\n            if (b != t)\r\n            {\r\n                lists.add(list.subList(start, ii));\r\n                start = ii;\r\n                b = t;\r\n            }\r\n        }\r\n        lists.add(list.subList(start, len));\r\n        return lists;\r\n    }","label":0}
{"text":"void checkAccessRights(Session session) {\n\n        if (targetTable != null && !targetTable.isTemp()) {\n            targetTable.checkDataReadOnly();\n            session.checkReadWrite();\n        }\n\n        if (session.isAdmin()) {\n            return;\n        }\n\n        for (int i = 0; i < sequences.length; i++) {\n            session.getGrantee().checkAccess(sequences[i]);\n        }\n\n        for (int i = 0; i < routines.length; i++) {\n            if (routines[i].isLibraryRoutine()) {\n                continue;\n            }\n\n            session.getGrantee().checkAccess(routines[i]);\n        }\n\n        for (int i = 0; i < rangeVariables.length; i++) {\n            RangeVariable range = rangeVariables[i];\n\n            if (range.rangeTable.getSchemaName()\n                    == SqlInvariants.SYSTEM_SCHEMA_HSQLNAME) {\n                continue;\n            }\n\n            session.getGrantee().checkSelect(range.rangeTable,\n                                             range.usedColumns);\n        }\n\n        switch (type) {\n\n            case StatementTypes.CALL : {\n                break;\n            }\n            case StatementTypes.INSERT : {\n                session.getGrantee().checkInsert(targetTable,\n                                                 insertCheckColumns);\n\n                break;\n            }\n            case StatementTypes.SELECT_CURSOR :\n                break;\n\n            case StatementTypes.DELETE_WHERE : {\n                session.getGrantee().checkDelete(targetTable);\n\n                break;\n            }\n            case StatementTypes.UPDATE_WHERE : {\n                session.getGrantee().checkUpdate(targetTable,\n                                                 updateCheckColumns);\n\n                break;\n            }\n            case StatementTypes.MERGE : {\n                session.getGrantee().checkInsert(targetTable,\n                                                 insertCheckColumns);\n                session.getGrantee().checkUpdate(targetTable,\n                                                 updateCheckColumns);\n\n                break;\n            }\n        }\n    }","label":0}
{"text":"func (t *TLSConfig) GetKeyLoader() *KeyLoader {\n\tt.keyloaderLock.Lock()\n\tdefer t.keyloaderLock.Unlock()\n\n\t\/\/ If the keyloader has not yet been initialized, do it here\n\tif t.KeyLoader == nil {\n\t\tt.KeyLoader = &KeyLoader{}\n\t}\n\treturn t.KeyLoader\n}","label":0}
{"text":"def generate_message_h(directory, m):\n    ''''''\n    f = open(os.path.join(directory, 'mavlink_msg_%s.h' % m.name_lower), mode='w')\n    t.write(f, '''\n#pragma once\n\/\/ MESSAGE ${name} PACKING\n\n#define MAVLINK_MSG_ID_${name} ${id}\n\nMAVPACKED(\ntypedef struct __mavlink_${name_lower}_t {\n${{ordered_fields: ${type} ${name}${array_suffix}; \/*< ${description}*\/\n}}\n}) mavlink_${name_lower}_t;\n\n#define MAVLINK_MSG_ID_${name}_LEN ${wire_length}\n#define MAVLINK_MSG_ID_${name}_MIN_LEN ${wire_min_length}\n#define MAVLINK_MSG_ID_${id}_LEN ${wire_length}\n#define MAVLINK_MSG_ID_${id}_MIN_LEN ${wire_min_length}\n\n#define MAVLINK_MSG_ID_${name}_CRC ${crc_extra}\n#define MAVLINK_MSG_ID_${id}_CRC ${crc_extra}\n\n${{array_fields:#define MAVLINK_MSG_${msg_name}_FIELD_${name_upper}_LEN ${array_length}\n}}\n\n#if MAVLINK_COMMAND_24BIT\n#define MAVLINK_MESSAGE_INFO_${name} { \\\\\n\t${id}, \\\\\n\t\"${name}\", \\\\\n\t${num_fields}, \\\\\n\t{ ${{ordered_fields: { \"${name}\", ${c_print_format}, MAVLINK_TYPE_${type_upper}, ${array_length}, ${wire_offset}, offsetof(mavlink_${name_lower}_t, ${name}) }, \\\\\n        }} } \\\\\n}\n#else\n#define MAVLINK_MESSAGE_INFO_${name} { \\\\\n\t\"${name}\", \\\\\n\t${num_fields}, \\\\\n\t{ ${{ordered_fields: { \"${name}\", ${c_print_format}, MAVLINK_TYPE_${type_upper}, ${array_length}, ${wire_offset}, offsetof(mavlink_${name_lower}_t, ${name}) }, \\\\\n        }} } \\\\\n}\n#endif\n\n\/**\n * @brief Pack a ${name_lower} message\n * @param system_id ID of this system\n * @param component_id ID of this component (e.g. 200 for IMU)\n * @param msg The MAVLink message to compress the data into\n *\n${{arg_fields: * @param ${name} ${description}\n}}\n * @return length of the message in bytes (excluding serial stream start sign)\n *\/\nstatic inline uint16_t mavlink_msg_${name_lower}_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,\n\t\t\t\t\t\t      ${{arg_fields: ${array_const}${type} ${array_prefix}${name},}})\n{\n#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS\n\tchar buf[MAVLINK_MSG_ID_${name}_LEN];\n${{scalar_fields:\t_mav_put_${type}(buf, ${wire_offset}, ${putname});\n}}\n${{array_fields:\t_mav_put_${type}_array(buf, ${wire_offset}, ${name}, ${array_length});\n}}\n        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_${name}_LEN);\n#else\n\tmavlink_${name_lower}_t packet;\n${{scalar_fields:\tpacket.${name} = ${putname};\n}}\n${{array_fields:\tmav_array_memcpy(packet.${name}, ${name}, sizeof(${type})*${array_length});\n}}\n        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_${name}_LEN);\n#endif\n\n\tmsg->msgid = MAVLINK_MSG_ID_${name};\n    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_${name}_MIN_LEN, MAVLINK_MSG_ID_${name}_LEN, MAVLINK_MSG_ID_${name}_CRC);\n}\n\n\/**\n * @brief Pack a ${name_lower} message on a channel\n * @param system_id ID of this system\n * @param component_id ID of this component (e.g. 200 for IMU)\n * @param chan The MAVLink channel this message will be sent over\n * @param msg The MAVLink message to compress the data into\n${{arg_fields: * @param ${name} ${description}\n}}\n * @return length of the message in bytes (excluding serial stream start sign)\n *\/\nstatic inline uint16_t mavlink_msg_${name_lower}_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,\n\t\t\t\t\t\t\t   mavlink_message_t* msg,\n\t\t\t\t\t\t           ${{arg_fields:${array_const}${type} ${array_prefix}${name},}})\n{\n#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS\n\tchar buf[MAVLINK_MSG_ID_${name}_LEN];\n${{scalar_fields:\t_mav_put_${type}(buf, ${wire_offset}, ${putname});\n}}\n${{array_fields:\t_mav_put_${type}_array(buf, ${wire_offset}, ${name}, ${array_length});\n}}\n        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_${name}_LEN);\n#else\n\tmavlink_${name_lower}_t packet;\n${{scalar_fields:\tpacket.${name} = ${putname};\n}}\n${{array_fields:\tmav_array_memcpy(packet.${name}, ${name}, sizeof(${type})*${array_length});\n}}\n        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_${name}_LEN);\n#endif\n\n\tmsg->msgid = MAVLINK_MSG_ID_${name};\n    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, MAVLINK_MSG_ID_${name}_MIN_LEN, MAVLINK_MSG_ID_${name}_LEN, MAVLINK_MSG_ID_${name}_CRC);\n}\n\n\/**\n * @brief Encode a ${name_lower} struct\n *\n * @param system_id ID of this system\n * @param component_id ID of this component (e.g. 200 for IMU)\n * @param msg The MAVLink message to compress the data into\n * @param ${name_lower} C-struct to read the message contents from\n *\/\nstatic inline uint16_t mavlink_msg_${name_lower}_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_${name_lower}_t* ${name_lower})\n{\n\treturn mavlink_msg_${name_lower}_pack(system_id, component_id, msg,${{arg_fields: ${name_lower}->${name},}});\n}\n\n\/**\n * @brief Encode a ${name_lower} struct on a channel\n *\n * @param system_id ID of this system\n * @param component_id ID of this component (e.g. 200 for IMU)\n * @param chan The MAVLink channel this message will be sent over\n * @param msg The MAVLink message to compress the data into\n * @param ${name_lower} C-struct to read the message contents from\n *\/\nstatic inline uint16_t mavlink_msg_${name_lower}_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_${name_lower}_t* ${name_lower})\n{\n\treturn mavlink_msg_${name_lower}_pack_chan(system_id, component_id, chan, msg,${{arg_fields: ${name_lower}->${name},}});\n}\n\n\/**\n * @brief Send a ${name_lower} message\n * @param chan MAVLink channel to send the message\n *\n${{arg_fields: * @param ${name} ${description}\n}}\n *\/\n#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS\n\nstatic inline void mavlink_msg_${name_lower}_send(mavlink_channel_t chan,${{arg_fields: ${array_const}${type} ${array_prefix}${name},}})\n{\n#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS\n\tchar buf[MAVLINK_MSG_ID_${name}_LEN];\n${{scalar_fields:\t_mav_put_${type}(buf, ${wire_offset}, ${putname});\n}}\n${{array_fields:\t_mav_put_${type}_array(buf, ${wire_offset}, ${name}, ${array_length});\n}}\n    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_${name}, buf, MAVLINK_MSG_ID_${name}_MIN_LEN, MAVLINK_MSG_ID_${name}_LEN, MAVLINK_MSG_ID_${name}_CRC);\n#else\n\tmavlink_${name_lower}_t packet;\n${{scalar_fields:\tpacket.${name} = ${putname};\n}}\n${{array_fields:\tmav_array_memcpy(packet.${name}, ${name}, sizeof(${type})*${array_length});\n}}\n    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_${name}, (const char *)&packet, MAVLINK_MSG_ID_${name}_MIN_LEN, MAVLINK_MSG_ID_${name}_LEN, MAVLINK_MSG_ID_${name}_CRC);\n#endif\n}\n\n\/**\n * @brief Send a ${name_lower} message\n * @param chan MAVLink channel to send the message\n * @param struct The MAVLink struct to serialize\n *\/\nstatic inline void mavlink_msg_${name_lower}_send_struct(mavlink_channel_t chan, const mavlink_${name_lower}_t* ${name_lower})\n{\n#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS\n    mavlink_msg_${name_lower}_send(chan,${{arg_fields: ${name_lower}->${name},}});\n#else\n    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_${name}, (const char *)${name_lower}, MAVLINK_MSG_ID_${name}_MIN_LEN, MAVLINK_MSG_ID_${name}_LEN, MAVLINK_MSG_ID_${name}_CRC);\n#endif\n}\n\n#if MAVLINK_MSG_ID_${name}_LEN <= MAVLINK_MAX_PAYLOAD_LEN\n\/*\n  This varient of _send() can be used to save stack space by re-using\n  memory from the receive buffer.  The caller provides a\n  mavlink_message_t which is the size of a full mavlink message. This\n  is usually the receive buffer for the channel, and allows a reply to an\n  incoming message with minimum stack space usage.\n *\/\nstatic inline void mavlink_msg_${name_lower}_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan, ${{arg_fields: ${array_const}${type} ${array_prefix}${name},}})\n{\n#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS\n\tchar *buf = (char *)msgbuf;\n${{scalar_fields:\t_mav_put_${type}(buf, ${wire_offset}, ${putname});\n}}\n${{array_fields:\t_mav_put_${type}_array(buf, ${wire_offset}, ${name}, ${array_length});\n}}\n    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_${name}, buf, MAVLINK_MSG_ID_${name}_MIN_LEN, MAVLINK_MSG_ID_${name}_LEN, MAVLINK_MSG_ID_${name}_CRC);\n#else\n\tmavlink_${name_lower}_t *packet = (mavlink_${name_lower}_t *)msgbuf;\n${{scalar_fields:\tpacket->${name} = ${putname};\n}}\n${{array_fields:\tmav_array_memcpy(packet->${name}, ${name}, sizeof(${type})*${array_length});\n}}\n    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_${name}, (const char *)packet, MAVLINK_MSG_ID_${name}_MIN_LEN, MAVLINK_MSG_ID_${name}_LEN, MAVLINK_MSG_ID_${name}_CRC);\n#endif\n}\n#endif\n\n#endif\n\n\/\/ MESSAGE ${name} UNPACKING\n\n${{fields:\n\/**\n * @brief Get field ${name} from ${name_lower} message\n *\n * @return ${description}\n *\/\nstatic inline ${return_type} mavlink_msg_${name_lower}_get_${name}(const mavlink_message_t* msg${get_arg})\n{\n\treturn _MAV_RETURN_${type}${array_tag}(msg, ${array_return_arg} ${wire_offset});\n}\n}}\n\n\/**\n * @brief Decode a ${name_lower} message into a struct\n *\n * @param msg The message to decode\n * @param ${name_lower} C-struct to decode the message contents into\n *\/\nstatic inline void mavlink_msg_${name_lower}_decode(const mavlink_message_t* msg, mavlink_${name_lower}_t* ${name_lower})\n{\n#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS\n${{ordered_fields:\t${decode_left}mavlink_msg_${name_lower}_get_${name}(msg${decode_right});\n}}\n#else\n        uint8_t len = msg->len < MAVLINK_MSG_ID_${name}_LEN? msg->len : MAVLINK_MSG_ID_${name}_LEN;\n        memset(${name_lower}, 0, MAVLINK_MSG_ID_${name}_LEN);\n\tmemcpy(${name_lower}, _MAV_PAYLOAD(msg), len);\n#endif\n}\n''', m)\n    f.close()","label":0}
{"text":"def init_logger\n      @logger = case @path\n                when STDOUT_STREAM then Logger.new(STDOUT)\n                when STDERR_STREAM then Logger.new(STDERR)\n                else Logger.new(File.open(@path, 'a'))\n                end\n      @logger.datetime_format = @datetime_format\n      @logger.sev_threshold = @threshold unless @severities.any?\n      @logger.formatter = @formatter unless @formatter.nil?\n    end","label":0}
{"text":"def has_credentials_stored():\n    \n\n    try:\n        with open(credentials_file, 'r') as f:\n            token = f.readline().strip()\n            id = f.readline().strip()\n\n            return token\n    except Exception, e:\n        return False","label":0}
{"text":"func (c *samples) Create(sample *v1alpha1.Sample) (result *v1alpha1.Sample, err error) {\n\tresult = &v1alpha1.Sample{}\n\terr = c.client.Post().\n\t\tNamespace(c.ns).\n\t\tResource(\"samples\").\n\t\tBody(sample).\n\t\tDo().\n\t\tInto(result)\n\treturn\n}","label":0}
{"text":"function MethodCallExpression(name, args) {\n    \/**\n     * Gets or sets the name of this method\n     * @type {String}\n     *\/\n    this.name = name;\n    \/**\n     * Gets or sets an array that represents the method arguments\n     * @type {Array}\n     *\/\n    this.args = [];\n    if (_.isArray(args))\n        this.args = args;\n}","label":0}
{"text":"public function getInstance(string $locale = FakerFactory::DEFAULT_LOCALE, bool $new = false): FakerGenerator\n    {\n        return $this->once($locale, function () use ($locale) {\n            return $this->create($locale);\n        }, $new);\n    }","label":0}
{"text":"protected function addBankCountry(FormBuilderInterface $builder, array $options)\n    {\n        if (count($options[static::OPTIONS_FIELD_NAME][static::OPTION_BANK_COUNTRIES]) == 1) {\n            $builder->add(\n                static::FIELD_BANK_COUNTRY,\n                HiddenType::class,\n                [\n                    'label' => false,\n                    'data' => array_keys($options[static::OPTIONS_FIELD_NAME][static::OPTION_BANK_COUNTRIES])[0],\n                ]\n            );\n        } else {\n            $builder->add(\n                static::FIELD_BANK_COUNTRY,\n                ChoiceType::class,\n                [\n                    'label' => false,\n                    'required' => true,\n                    'expanded' => false,\n                    'multiple' => false,\n                    'placeholder' => false,\n                    'choices' => array_flip($options[static::OPTIONS_FIELD_NAME][static::OPTION_BANK_COUNTRIES]),\n                    'constraints' => [\n                    ],\n                ]\n            );\n        }\n\n        return $this;\n    }","label":0}
{"text":"function window($wnd)\n    {\n        $result =\n            \"<table border=\\\"0\\\" class=\\\"admWindow\\\"\".(empty($wnd['width'])?'':' style=\"width: '.\n                $wnd['width'].';\"').\">\\n\".\n            (empty($wnd['caption'])?'':\"<tr><th>\".$wnd['caption'].\"<\/th><\/tr>\\n\").\n            \"<tr><td\".(empty($wnd['style'])?'':' style=\"'.$wnd['style'].'\"').\">\".$wnd['body'].\n            \"<\/td><\/tr>\\n<\/table>\\n\";\n        return $result;\n    }","label":0}
{"text":"public function getModifyColumnsDDL($columnDiffs)\n    {\n        $ret = '';\n        foreach ($columnDiffs as $columnDiff) {\n            $ret .= $this->getModifyColumnDDL($columnDiff);\n        }\n\n        return $ret;\n    }","label":0}
{"text":"async def route_msg(self, msg):\n        \n        if msg.correlation_id in self._futures:\n            self._set_reply(msg.correlation_id, msg)\n        else:\n            await self._push_incoming(msg)","label":0}
{"text":"def _encode_header(key: str, pdict: Dict[str, str]) -> str:\n    \n    if not pdict:\n        return key\n    out = [key]\n    # Sort the parameters just to make it easy to test.\n    for k, v in sorted(pdict.items()):\n        if v is None:\n            out.append(k)\n        else:\n            # TODO: quote if necessary.\n            out.append(\"%s=%s\" % (k, v))\n    return \"; \".join(out)","label":0}
{"text":"function richtext(state, startLine, endLine, silent, opts) {\n  let pos = state.bMarks[startLine] + state.tShift[startLine],\n    max = state.eMarks[startLine],\n    contentEndLine;\n\n  if (pos >= max) {\n    return false;\n  }\n\n  let line = state.getLines(startLine, startLine + 1, 0, false);\n\n  if (!line.startsWith(RICHTEXT_OPEN_MARKER)) {\n    return false;\n  }\n\n  if (silent) {\n    return true;\n  }\n\n  let nextLine = startLine + 1;\n  let content = \"\";\n\n  for (; nextLine < endLine; nextLine++) {\n    let line = state.getLines(nextLine, nextLine + 1, 0, false);\n\n    if (line.trim() === RICHTEXT_CLOSE_MARKER) {\n      contentEndLine = nextLine - 1;\n      break;\n    }\n    content += line + \"\\n\";\n  }\n\n  state.line = contentEndLine + 2;\n\n  \/\/ convert md subcontent to uu5string\n  let uu5content = opts.markdownToUu5.render(content, state.env);\n\n  state.tokens.push({\n    type: \"UU5.RichText.Block\",\n    uu5string: uu5content\n  });\n  return true;\n}","label":0}
{"text":"protected function loadDefaultLocationForSelection($defaultLocationId = null): ?Location\n    {\n        if (!empty($defaultLocationId)) {\n            try {\n                return $this->locationService->loadLocation((int)$defaultLocationId);\n            } catch (NotFoundException|UnauthorizedException $e) {\n            }\n        }\n\n        return null;\n    }","label":0}
{"text":"@Override\n    public java.util.concurrent.Future<SetQueueAttributesResult> setQueueAttributesAsync(String queueUrl, java.util.Map<String, String> attributes) {\n\n        return setQueueAttributesAsync(new SetQueueAttributesRequest().withQueueUrl(queueUrl).withAttributes(attributes));\n    }","label":0}
{"text":"func IsGitVersionAtLeast(ver string) bool {\n\tgitver, err := Version()\n\tif err != nil {\n\t\ttracerx.Printf(\"Error getting git version: %v\", err)\n\t\treturn false\n\t}\n\treturn IsVersionAtLeast(gitver, ver)\n}","label":0}
{"text":"protected function performCommit(array $attributes)\n    {\n        return $this->flow->send(\n            'post',\n            $this->endpoint . '\/' . ($options['method'] ?? $this->verbsMap['commit'] ?? 'create'),\n            $attributes\n        );\n    }","label":0}
{"text":"func (s *Service) AppFeatureList(ctx context.Context, appIdentity string, lr *ListRange) (AppFeatureListResult, error) {\n\tvar appFeature AppFeatureListResult\n\treturn appFeature, s.Get(ctx, &appFeature, fmt.Sprintf(\"\/apps\/%v\/features\", appIdentity), nil, lr)\n}","label":0}
{"text":"def getx(self, name, *args):\n        \n        return lib.zargs_getx(self._as_parameter_, name, *args)","label":0}
{"text":"def method_missing(name, &block)\n      @formats.push([name, block || proc {}]) unless @formats.any? {|n,b| n == name}\n    end","label":0}
{"text":"func (s *AddPermissionInput) SetSourceAccount(v string) *AddPermissionInput {\n\ts.SourceAccount = &v\n\treturn s\n}","label":0}
{"text":"public function getFaxes()\n    {\n        $faxes = [];\n        if ($this->entity->getFaxes()) {\n            foreach ($this->entity->getFaxes() as $fax) {\n                $faxes[] = $fax;\n            }\n        }\n\n        return $faxes;\n    }","label":0}
{"text":"public void marshall(NotifyEmailType notifyEmailType, ProtocolMarshaller protocolMarshaller) {\n\n        if (notifyEmailType == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(notifyEmailType.getSubject(), SUBJECT_BINDING);\n            protocolMarshaller.marshall(notifyEmailType.getHtmlBody(), HTMLBODY_BINDING);\n            protocolMarshaller.marshall(notifyEmailType.getTextBody(), TEXTBODY_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }","label":0}
{"text":"func packFile(srcFile string, recPath string, zw *zip.Writer, fi os.FileInfo) error {\n\tif fi.IsDir() {\n\t\tfh, err := zip.FileInfoHeader(fi)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfh.Name = recPath + \"\/\"\n\t\tif _, err = zw.CreateHeader(fh); err != nil {\n\t\t\treturn err\n\t\t}\n\t} else {\n\t\tfh, err := zip.FileInfoHeader(fi)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfh.Name = recPath\n\t\tfh.Method = zip.Deflate\n\n\t\tfw, err := zw.CreateHeader(fh)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\tif fi.Mode()&os.ModeSymlink != 0 {\n\t\t\ttarget, err := os.Readlink(srcFile)\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\tif _, err = fw.Write([]byte(target)); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t} else {\n\t\t\tf, err := os.Open(srcFile)\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\tdefer f.Close()\n\t\t\t\n\t\t\tif _, err = io.Copy(fw, f); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t}\n\t}\n\treturn nil\n}","label":0}
{"text":"public function deleteCard($cardId)\n    {\n        return $this->auth(function () use ($cardId) {\n            $data = json_encode(['card_id' => $cardId], JSON_UNESCAPED_UNICODE);\n            $result = $this->http->postJson($this->baseUrl . 'card\/delete?access_token=' . $this->accessToken, $data);\n\n            return $result;\n        });\n    }","label":0}
{"text":"public function replace($identifier, $value, $type = \"\")\n    {\n        if (!$this->isRegistered($identifier, $type)) {\n            throw new RegistryException(\n                RegistryException::MODIFICATION_ATTEMPT_FAILED_TEXT . '(identifier: ' . $identifier . ')',\n                RegistryException::MODIFICATION_ATTEMPT_FAILED_CODE\n            );\n        }\n\n        $this->getESAdaptor()->updateDocument($identifier, $value, $this->section, $type);\n    }","label":0}
{"text":"func (o *GetJSONWebKeySetParams) WithTimeout(timeout time.Duration) *GetJSONWebKeySetParams {\n\to.SetTimeout(timeout)\n\treturn o\n}","label":0}
{"text":"public function apply()\n    {\n        if (empty($this->string)) {\n            return '';\n        }\n\n        $lines = explode(\"\\n\", $this->string);\n\n        foreach ($lines as &$line) {\n            $line = ((string)$this->quote)\n                . $line;\n        }\n\n        if ($this->color instanceof Color) {\n            $output = str_repeat(' ', $this->indent) . $this->color->paint(implode(\"\\n\",\n                    $lines)) . str_repeat(' ', $this->space);\n        } else {\n            $output = str_repeat(' ', $this->indent) . implode(\"\\n\", $lines) . str_repeat(' ', $this->space);\n        }\n\n        return str_repeat(PHP_EOL, $this->newLinesBefore) . $output . str_repeat(PHP_EOL, $this->newLinesAfter);\n    }","label":0}
{"text":"func (d *Domain) SetMemory(memory uint64) error {\n\tvar err C.virError\n\tresult := C.virDomainSetMemoryWrapper(d.ptr, C.ulong(memory), &err)\n\tif result == -1 {\n\t\treturn makeError(&err)\n\t}\n\treturn nil\n}","label":0}
{"text":"private static function getProtocolVersion(array $server)\n    {\n        if (!isset($server['SERVER_PROTOCOL'])) {\n            return '1.1';\n        }\n\n        if (!preg_match('\/^(HTTP\\\/)?(\\d+(?:\\.\\d+)+)\/', $server['SERVER_PROTOCOL'], $matches)) {\n            throw new \\UnexpectedValueException(\n                sprintf(\n                    'Invalid protocol version format (%s)',\n                    $server['SERVER_PROTOCOL']\n                )\n            );\n        }\n\n        return $matches[2];\n    }","label":0}
{"text":"private static void checkByte(int ch, int pos, int len) throws IOException {\n    if ((ch & 0xc0) != 0x80) {\n      throw new IOException(\n          GT.tr(\"Illegal UTF-8 sequence: byte {0} of {1} byte sequence is not 10xxxxxx: {2}\",\n              pos, len, ch));\n    }\n  }","label":0}
{"text":"private void score_decide(Chunk chks[], Chunk nids, Chunk wrks, Chunk tree, int nnids[]) {\n      for( int row=0; row<nids._len; row++ ) { \/\/ Over all rows\n        int nid = (int)nids.at80(row);         \/\/ Get Node to decide from\n        if( isDecidedRow(nid)) {               \/\/ already done\n          nnids[row] = (nid-_leaf);\n          continue;\n        }\n        \/\/ Score row against current decisions & assign new split\n        boolean oob = isOOBRow(nid);\n        if( oob ) nid = oob2Nid(nid); \/\/ sampled away - we track the position in the tree\n        DTree.DecidedNode dn = _tree.decided(nid);\n        if (dn._split._col == -1 && DTree.isRootNode(dn)) { nnids[row] = (nid-_leaf); continue; }\n        if( dn._split._col == -1 ) { \/\/ Might have a leftover non-split\n          nid = dn._pid;             \/\/ Use the parent split decision then\n          int xnid = oob ? nid2Oob(nid) : nid;\n          nids.set0(row, xnid);\n          nnids[row] = xnid-_leaf;\n          dn = _tree.decided(nid); \/\/ Parent steers us\n        }\n\n        assert !isDecidedRow(nid);\n        nid = dn.ns(chks,row); \/\/ Move down the tree 1 level\n        if( !isDecidedRow(nid) ) {\n          int xnid = oob ? nid2Oob(nid) : nid;\n          nids.set0(row, xnid);\n          nnids[row] = xnid-_leaf;\n        } else {\n          nnids[row] = nid-_leaf;\n        }\n      }\n    }","label":0}
{"text":"public static State jsonObjectToState(JsonObject jsonObject, String... excludeKeys) {\n    State state = new State();\n    List<String> excludeKeysList = excludeKeys == null ? Lists.<String>newArrayList() : Arrays.asList(excludeKeys);\n    for (Map.Entry<String, JsonElement> jsonObjectEntry : jsonObject.entrySet()) {\n      if (!excludeKeysList.contains(jsonObjectEntry.getKey())) {\n        state.setProp(jsonObjectEntry.getKey(), jsonObjectEntry.getValue().getAsString());\n      }\n    }\n    return state;\n  }","label":0}
{"text":"static synchronized List<Watcher> get(Context context) {\n        List<Watcher> watchers;\n        if (context.contains(WATCHERS_KEY)) {\n            try {\n                watchers = (List<Watcher>) context.get(WATCHERS_KEY);\n            } catch (ContextException e) {\n                throw new IllegalStateException(\"Cannot extract the watcher from the context\", e);\n            }\n        } else {\n            watchers = new ArrayList<>();\n            context.put(WATCHERS_KEY, watchers);\n        }\n        return watchers;\n    }","label":0}
{"text":"private function updateBlockTranslation(Block $block, array $parameterData, string $locale): void\n    {\n        $updateStruct = $this->blockService->newBlockUpdateStruct($locale, $block);\n        $updateStruct->fillParametersFromHash($block->getDefinition(), $parameterData, true);\n\n        $this->blockService->updateBlock($block, $updateStruct);\n    }","label":0}
{"text":"protected function doRemoteCall(Request $request, $isLogin) {\n    \/\/ initially login, if no sessionId is set\n    $sessionId = $this->getSessionId();\n    if (!$isLogin && $sessionId == null) {\n      $response = $this->doLogin();\n      if ($response) {\n  \t    $sessionId = $this->getSessionId();\n      }\n    }\n\n    $jsonResponse = null;\n    $returnValue = -1;\n\n    $request->setResponseFormat('json');\n    $serializedRequest = base64_encode(serialize($request));\n\n    $arguments = [\n      $serializedRequest,\n      $sessionId\n    ];\n    $currentDir = getcwd();\n    chdir(dirname($this->serverCli));\n    if (self::$logger->isDebugEnabled()) {\n      self::$logger->debug(\"Do remote call to: \".$this->serverCli);\n      self::$logger->debug(\"Request:\\n\".$request->toString());\n    }\n    \/\/ store and reopen the session (see http:\/\/bugs.php.net\/bug.php?id=44942)\n    session_write_close();\n    exec($this->php.' '.$this->serverCli.' '.join(' ', $arguments), $jsonResponse, $returnValue);\n    session_start();\n    if (self::$logger->isDebugEnabled()) {\n      self::$logger->debug(\"Response [JSON]:\\n\".$jsonResponse[0]);\n    }\n    chdir($currentDir);\n\n    $responseData = json_decode($jsonResponse[0], true);\n    $response = ObjectFactory::getNewInstance('response');\n    $response->setValues($responseData);\n    $response->setFormat('json');\n    $formatter = ObjectFactory::getInstance('formatter');\n    $formatter->deserialize($response);\n    if (self::$logger->isDebugEnabled()) {\n      self::$logger->debug(\"Response:\\n\".$response->toString());\n    }\n\n    if (!$response->getValue('success')) {\n      \/\/ if the session expired, try to relogin\n      if (strpos('Authorization failed', $response->getValue('errorMsg')) === 0 && !$isLogin) {\n        $this->doLogin();\n      }\n      else {\n        $this->handleError($response);\n      }\n    }\n    return $response;\n  }","label":0}
{"text":"protected function _getMonthNames($leadingZero = false)\n    {\n        $months = [\n            '01' => __d('cake', 'January'),\n            '02' => __d('cake', 'February'),\n            '03' => __d('cake', 'March'),\n            '04' => __d('cake', 'April'),\n            '05' => __d('cake', 'May'),\n            '06' => __d('cake', 'June'),\n            '07' => __d('cake', 'July'),\n            '08' => __d('cake', 'August'),\n            '09' => __d('cake', 'September'),\n            '10' => __d('cake', 'October'),\n            '11' => __d('cake', 'November'),\n            '12' => __d('cake', 'December'),\n        ];\n\n        if ($leadingZero === false) {\n            $i = 1;\n            foreach ($months as $key => $name) {\n                unset($months[$key]);\n                $months[$i++] = $name;\n            }\n        }\n\n        return $months;\n    }","label":0}
{"text":"public void setInputModel(TreeModel model)\r\n    {\r\n        Enumeration<TreePath> expandedDescendants = \r\n            this.tree.getExpandedDescendants(new TreePath(treeModel.getRoot()));\r\n        \r\n        this.treeModel = new FilteredTreeModel(model);\r\n        this.tree.setModel(treeModel);\r\n        \r\n        if (expandedDescendants != null)\r\n        {\r\n            while (expandedDescendants.hasMoreElements())\r\n            {\r\n                TreePath expanded = expandedDescendants.nextElement();\r\n                TreePath translatedPath = \r\n                    JTrees.translatePath(treeModel, expanded);\r\n                if (translatedPath != null)\r\n                {\r\n                    this.tree.expandPath(translatedPath);\r\n                }\r\n            }\r\n        }\r\n    }","label":0}
{"text":"public function actionCreate()\n    {\n\n        if (\\Yii::$app->user->can('create')) {\n            $model = new Author();\n\n            if ($model->load(\\Yii::$app->request->post()) && $model->save()) {\n                return $this->redirect(['index']);\n            } else {\n                return $this->render('create', [\n                    'model' => $model,\n                ]);\n            }\n        } else\n            throw new ForbiddenHttpException(Module::t('core', 'Access denied.'));\n    }","label":0}
{"text":"protected static void setField(String fieldName, Object mojo, Object value) throws Exception {\n        Field field = null;\n        try {\n            field = mojo.getClass().getDeclaredField(fieldName);\n        } catch (NoSuchFieldException ex) {\n            \/\/ Ignore exception and try superclass.\n            field = mojo.getClass().getSuperclass().getDeclaredField(fieldName);\n        }\n        field.setAccessible(true);\n        field.set(mojo, value);\n    }","label":0}
{"text":"func (options *Options) ParamStr(pos int) string {\n\treturn Str(options.Param(pos))\n}","label":0}
{"text":"public function mergeExtra(RootPackageInterface $root, PluginState $state)\n    {\n        $extra = $this->package->getExtra();\n        unset($extra['merge-plugin']);\n        if (!$state->shouldMergeExtra() || empty($extra)) {\n            return;\n        }\n\n        $rootExtra = $root->getExtra();\n        $unwrapped = self::unwrapIfNeeded($root, 'setExtra');\n\n        if ($state->replaceDuplicateLinks()) {\n            $unwrapped->setExtra(\n                self::mergeExtraArray($state->shouldMergeExtraDeep(), $rootExtra, $extra)\n            );\n        } else {\n            if (!$state->shouldMergeExtraDeep()) {\n                foreach (array_intersect(\n                    array_keys($extra),\n                    array_keys($rootExtra)\n                ) as $key) {\n                    $this->logger->info(\n                        \"Ignoring duplicate <comment>{$key}<\/comment> in \".\n                        \"<comment>{$this->path}<\/comment> extra config.\"\n                    );\n                }\n            }\n            $unwrapped->setExtra(\n                self::mergeExtraArray($state->shouldMergeExtraDeep(), $extra, $rootExtra)\n            );\n        }\n    }","label":0}
{"text":"func (L *State) MustDoString(str string) {\n\tif err := L.DoString(str); err != nil {\n\t\tpanic(err)\n\t}\n}","label":0}
{"text":"private boolean importFlatFile(String sender) {\n        boolean result = false;\n\n        try {\n            List<String> file = new ArrayList<>();\n            String str;\n            while ((str = flatFileReader.readLine()) != null) {\n                file.add(str);\n            }\n            flatFileReader.close();\n            List<User> userList = new ArrayList<>();\n            for (String aFile : file) {\n                String[] info = aFile.split(\" \");\n                try {\n                    double balance = Double.parseDouble(info[1].split(\":\")[1]);\n                    userList.add(new User(info[0], balance));\n                } catch (NumberFormatException e) {\n                    Common.getInstance().sendConsoleMessage(Level.SEVERE, \"User \" + info[0] + \" have a invalid balance\" + info[1]);\n                } catch (ArrayIndexOutOfBoundsException e) {\n                    Common.getInstance().sendConsoleMessage(Level.WARNING, \"Line not formatted correctly. I read:\" + Arrays.toString(info));\n                }\n            }\n            addAccountToString(sender, userList);\n            result = true;\n        } catch (IOException e) {\n            Common.getInstance().getLogger().severe(\"A error occured while reading the iConomy database file! Message: \" + e.getMessage());\n        }\n        return result;\n    }","label":0}
{"text":"def decode_headers(header_list):\n\t'''\n\t\n\t'''\n\n\tdecoded_headers = []\n\tfor header in header_list:\n\t\tif cchardet:\n\t\t\tinferred = cchardet.detect(header)\n\t\t\tif inferred and inferred['confidence'] > 0.8:\n\t\t\t\t# print(\"Parsing headers!\", header)\n\t\t\t\tdecoded_headers.append(header.decode(inferred['encoding']))\n\t\t\telse:\n\t\t\t\tdecoded_headers.append(header.decode('iso-8859-1'))\n\t\telse:    # pragma: no cover\n\t\t\t# All bytes are < 127 (e.g. ASCII)\n\t\t\tif all([char & 0x80 == 0 for char in header]):\n\t\t\t\tdecoded_headers.append(header.decode(\"us-ascii\"))\n\t\t\telif isUTF8Strict(header):\n\t\t\t\tdecoded_headers.append(header.decode(\"utf-8\"))\n\t\t\telse:\n\t\t\t\tdecoded_headers.append(header.decode('iso-8859-1'))\n\n\treturn decoded_headers","label":0}
{"text":"func V1EnvVarsToMap(envs []v1.EnvVar) map[string]string {\n\tresult := map[string]string{}\n\tfor _, env := range envs {\n\t\tresult[env.Name] = env.Value\n\t}\n\n\treturn result\n}","label":0}
{"text":"protected final void validateIssuer(final Issuer issuer, final SAML2MessageContext context) {\n        if (issuer.getFormat() != null && !issuer.getFormat().equals(NameIDType.ENTITY)) {\n            throw new SAMLIssuerException(\"Issuer type is not entity but \" + issuer.getFormat());\n        }\n\n        final String entityId = context.getSAMLPeerEntityContext().getEntityId();\n        if (entityId == null || !entityId.equals(issuer.getValue())) {\n            throw new SAMLIssuerException(\"Issuer \" + issuer.getValue() + \" does not match idp entityId \" + entityId);\n        }\n    }","label":0}
{"text":"func SetLevel(level string) error {\n\tl := zap.NewAtomicLevel()\n\tif err := l.UnmarshalText([]byte(level)); err != nil {\n\t\treturn errors.Trace(err)\n\t}\n\tzaplog.SetLevel(l.Level())\n\treturn nil\n}","label":0}
{"text":"public int insertMetaBeanById(String tableName, MicroMetaBean microMetaBean) {\r\n\t\t\/\/JdbcTemplate jdbcTemplate = (JdbcTemplate) MicroDbHolder.getDbSource(dbName);\r\n\t\tJdbcTemplate jdbcTemplate =getMicroJdbcTemplate();\r\n\t\tfinal MicroMetaBean insertBean=microMetaBean;\r\n\t\tString timeName=getTimeName();\r\n\t\tString sql = \"insert into \" + tableName +\"(id,meta_content,meta_key,meta_name,meta_type,remark,create_time,update_time) values(?,?,?,?,?,?,\"+timeName+\",\"+timeName+\") \";\r\n\t\tList paramList=new ArrayList();\r\n\t\tparamList.add(insertBean.getId());\r\n\t\tparamList.add(insertBean.getMeta_content());\r\n\t\tparamList.add(insertBean.getMeta_key());\r\n\t\tparamList.add(insertBean.getMeta_name());\r\n\t\tparamList.add(insertBean.getMeta_type());\r\n\t\tparamList.add(insertBean.getRemark());\r\n\t\tlogger.debug(sql);\r\n\t\tlogger.debug(paramList.toArray());\r\n\t\tInteger retStatus=jdbcTemplate.update(sql,paramList.toArray());\r\n\r\n\t\treturn retStatus;\r\n\t}","label":0}
{"text":"function(opts) {\n      if (opts && typeof opts !== 'object') {\n        throw new Error('Options passed to ss.client.packAssets() must be an object');\n      }\n      options.packedAssets = opts || true;\n      options.servePacked = opts || true;\n      options.liveReload = false;\n\n      \/\/ As it's safe to assume we're running in production mode at this point, if your app is not catching uncaught\n      \/\/ errors with its own custom error handling code, step in and prevent any exceptions from taking the server down\n      if (options.packedAssets && process.listeners('uncaughtException').length === 0) {\n        return process.on('uncaughtException', function(err) {\n          log.error('Uncaught Exception!'.red);\n          return log.error(err.stack);\n        });\n      }\n    }","label":0}
{"text":"public static function pluck(array $values, $key)\n    {\n        return array_map(\n            function($val) use ($key) {\n                return is_object($val) ? $val->{$key} : $val[$key];\n            },\n            $values\n        );\n    }","label":0}
{"text":"protected function raiseAfterJobEvent($connection, Job $job)\n    {\n        if (isset($this->events)) {\n            $this->events->dispatch('nova.queue.processed', array($connection, $job));\n        }\n    }","label":0}
{"text":"def dict_filter_update(base, updates):\n    # type: (dict, dict) -> None\n    \n    base.update((k, v) for k, v in updates.items() if v is not None)","label":0}
{"text":"func (t *PackageList) RemoveByName(name string) {\n\tt.ensureInit()\n\tif pkg := t.LookupByName(name); pkg != nil {\n\t\tdelete(t.pkgpool, pkg)\n\t\tdelete(t.dirpool, pkg.Dir)\n\t\tdelete(t.namepool, getPackageName(pkg))\n\t}\n}","label":0}
{"text":"@Override\n    public Criteria[] parseValue(String attribute) {\n        long attributeValue = Long.parseLong(attribute);\n        if (name.endsWith(\"_on\")) {\n            \/\/ We have timestamp_on case\n            DateCriteria after = new DateCriteria(name + \"_after\", columnName);\n            after.value = new Timestamp(attributeValue - MILLS_IN_DAY\/2);\n            DateCriteria before = new DateCriteria(name + \"_before\", columnName);\n            before.value = new Timestamp(attributeValue + MILLS_IN_DAY\/2);\n            return new Criteria[] {after, before};\n        } else {\n            DateCriteria result = new DateCriteria(name, columnName);\n            result.value = new Timestamp(attributeValue);\n            return new Criteria[] {result};\n        }\n    }","label":0}
{"text":"public static AliasOperationTransformer replaceLastElement(final PathElement element) {\n        return create(new AddressTransformer() {\n            @Override\n            public PathAddress transformAddress(final PathAddress original) {\n                final PathAddress address = original.subAddress(0, original.size() -1);\n                return address.append(element);\n            }\n        });\n    }","label":0}
{"text":"def get_texts(self):\n        \n        with self.getstream() as text_stream:\n            for i, line in enumerate(text_stream):\n                line = SMSCorpus.case_normalizer(line)\n                if self.mask is not None and not self.mask[i]:\n                    continue\n                ngrams = []\n                for ng in tokens2ngrams(self.tokenizer(line)):\n                    if SMSCorpus.ignore_matcher(ng):\n                        continue\n                    ngrams += [ng]\n                yield ngrams","label":0}
{"text":"@Override\n    public void onSelectionChanged(FloatingLabelItemPicker<String> source, Collection<String> selectedItems) {\n        Toast.makeText(getActivity(), source.getItemPrinter().printCollection(selectedItems), Toast.LENGTH_SHORT).show();\n    }","label":0}
{"text":"@Override\n    public final Object instantiateItem(final ViewGroup container, final int position) {\n        if (Constants.DEBUG) {\n            Log.i(\"InfiniteViewPager\", String.format(\"instantiating position %s\", position));\n        }\n        final PageModel<T> model = createPageModel(position);\n        mPageModels[position] = model;\n        container.addView(model.getParentView());\n        return model;\n    }","label":0}
{"text":"func (bl *BitList) IterateBytes() <-chan byte {\n\tres := make(chan byte)\n\n\tgo func() {\n\t\tc := bl.count\n\t\tshift := 24\n\t\ti := 0\n\t\tfor c > 0 {\n\t\t\tres <- byte((bl.data[i] >> uint(shift)) & 0xFF)\n\t\t\tshift -= 8\n\t\t\tif shift < 0 {\n\t\t\t\tshift = 24\n\t\t\t\ti++\n\t\t\t}\n\t\t\tc -= 8\n\t\t}\n\t\tclose(res)\n\t}()\n\n\treturn res\n}","label":0}
{"text":"public function validateDifferent($attribute, $value, $parameters)\n    {\n        $this->requireParameterCount(1, $parameters, 'different');\n\n        foreach ($parameters as $parameter) {\n            if (! Arr::has($this->data, $parameter)) {\n                return false;\n            }\n\n            $other = Arr::get($this->data, $parameter);\n\n            if ($value === $other) {\n                return false;\n            }\n        }\n\n        return true;\n    }","label":0}
{"text":"public function getProperty($key, $defaultValue = null)\n    {\n        if (empty($this->properties[$key])) {\n            return $defaultValue;\n        }\n\n        return $this->properties[$key];\n    }","label":0}
{"text":"public HalResource addEmbedded(String relation, Iterable<HalResource> resources) {\n    return addEmbedded(relation, Iterables.toArray(resources, HalResource.class));\n  }","label":0}
{"text":"protected function addTranslation($localeName, $keyName, $text)\n    {\n        $locale = new LocaleTransfer();\n        $locale->setLocaleName($localeName);\n        $translation = [];\n\n        $translation['text'] = $text;\n        $translation['created'] = false;\n        $translation['updated'] = false;\n\n        if (!$this->glossaryFacade->hasTranslation($keyName, $locale)) {\n            $this->glossaryFacade->createAndTouchTranslation($keyName, $locale, $text, true);\n            $translation['created'] = true;\n\n            return $translation;\n        }\n\n        $this->glossaryFacade->updateAndTouchTranslation($keyName, $locale, $text, true);\n        $translation['updated'] = true;\n\n        return $translation;\n    }","label":0}
{"text":"public function getExtraFields()\n    {\n        if ($this->_extraFields === null) {\n            $extraFields = [];\n            foreach ($this->getConfig() as $pointer => $fields) {\n                if (is_array($fields)) {\n                    foreach ($fields as $field) {\n                        if (isset($field['extraField']) && $field['extraField']) {\n                            if (!array_key_exists($field['name'], $extraFields)) {\n                                $extraFields[] = $field['name'];\n                            }\n                        }\n                    }\n                }\n            }\n            $this->_extraFields = $extraFields;\n        }\n\n        return $this->_extraFields;\n    }","label":0}
{"text":"function passphraseToKey(type, passphrase, salt)\n  {\n  debug('passphraseToKey', type, passphrase, salt);\n  var nkey = keyBytes[type];\n\n  if (!nkey)\n    {\n    var allowed = Object.keys(keyBytes);\n    throw new TypeError('Unsupported type. Allowed: ' + allowed);\n    }\n\n  var niv = salt.length;\n  var saltLen = 8;\n  if (salt.length !== saltLen)\n    salt = salt.slice(0, saltLen);\n  var mds = 16;\n  var addmd = false;\n  var md_buf;\n  var key = new Buffer(nkey);\n  var keyidx = 0;\n\n  while (true)\n    {\n    debug('loop nkey=%d mds=%d', nkey, mds);\n    var c = crypto.createHash('md5');\n\n    if (addmd)\n      c.update(md_buf);\n    else\n      addmd = true;\n\n    if (!Buffer.isBuffer(passphrase))\n      c.update(passphrase, 'ascii');\n    else\n      c.update(passphrase);\n\n    c.update(salt);\n    md_buf = c.digest('buffer');\n\n    var i = 0;\n    while (nkey && i < mds)\n      {\n      key[keyidx++] = md_buf[i];\n      nkey--;\n      i++;\n      }\n\n    var steps = Math.min(niv, mds - i);\n    niv -= steps;\n    i += steps;\n\n    if ((nkey == 0) && (niv == 0)) break;\n    }\n\n  return key\n  }","label":0}
{"text":"long nextSetBit(long index) {\r\n\t\t\/\/ Depends on the ghost bits being clear!\r\n\t\tassert index >= 0 && index < numBits : \"index=\" + index + \", numBits=\" + numBits;\r\n\t\tint i = (int) (index >> 6);\r\n\t\tlong word = bits[i] >> index; \/\/ skip all the bits to the right of index\r\n\r\n\t\tif (word != 0) {\r\n\t\t\treturn index + Long.numberOfTrailingZeros(word);\r\n\t\t}\r\n\r\n\t\twhile (++i < numWords) {\r\n\t\t\tword = bits[i];\r\n\t\t\tif (word != 0) {\r\n\t\t\t\treturn (i << 6) + Long.numberOfTrailingZeros(word);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn -1;\r\n\t}","label":0}
{"text":"func accountUpdate(ctx *cli.Context) error {\n\tif len(ctx.Args()) == 0 {\n\t\tutils.Fatalf(\"No accounts specified to update\")\n\t}\n\tstack, _ := makeConfigNode(ctx)\n\tks := stack.AccountManager().Backends(keystore.KeyStoreType)[0].(*keystore.KeyStore)\n\n\tfor _, addr := range ctx.Args() {\n\t\taccount, oldPassword := unlockAccount(ks, addr, 0, nil)\n\t\tnewPassword := getPassPhrase(\"Please give a new password. Do not forget this password.\", true, 0, nil)\n\t\tif err := ks.Update(account, oldPassword, newPassword); err != nil {\n\t\t\tutils.Fatalf(\"Could not update the account: %v\", err)\n\t\t}\n\t}\n\treturn nil\n}","label":0}
{"text":"async def destroy_async(self):\n        \n        try:\n            await self.lock_async()\n            _logger.debug(\"Unlocked connection %r to close.\", self.container_id)\n            await self._close_async()\n        except asyncio.TimeoutError:\n            _logger.debug(\n                \"Connection %r timed out while waiting for lock acquisition on destroy. Destroying anyway.\",\n                self.container_id)\n            await self._close_async()\n        finally:\n            self.release_async()\n        uamqp._Platform.deinitialize()","label":0}
{"text":"public function isExpired() : bool\n    {\n        $expiresAt = $this->getCache()->get($this->getKey())['expires_at'] ?? null;\n\n        return empty($expiresAt) || Carbon::parse($expiresAt)->lt(Carbon::now());\n    }","label":0}
{"text":"public static function og(string $property, string $value = null)\n    {\n        return $value !== null ? static::$openGraph[$property] = $value : (static::$openGraph[$property] ?? null);\n    }","label":0}
{"text":"public static void registerConstructor(String module, String classname, IObjectConstructor constructor) {\n\t\tobjectConstructors.put(module + \".\" + classname, constructor);\n\t}","label":0}
{"text":"func SetRemoteAddr(a net.UDPAddr) func(*Server) error {\n\treturn func(s *Server) error {\n\t\ts.raddr = a\n\t\treturn nil\n\t}\n}","label":0}
{"text":"public function beforeRender(Event $event)\n    {\n\n        parent::beforeRender($event);\n\n        \/\/ when a shop order was placed, the pdfs that are rendered for the order confirmation email\n        \/\/ called this method and therefore called resetOriginalLoggedCustomer() => email was sent t\n        \/\/ the user who placed the order for a member and not to the member\n        if ($this->getResponse()->getType() != 'text\/html') {\n            return;\n        }\n\n        $this->resetOriginalLoggedCustomer();\n\n        $categoriesForMenu = [];\n        if (Configure::read('appDb.FCS_SHOW_PRODUCTS_FOR_GUESTS') || $this->AppAuth->user()) {\n            $this->Category = TableRegistry::getTableLocator()->get('Categories');\n            $allProductsCount = $this->Category->getProductsByCategoryId(Configure::read('app.categoryAllProducts'), false, '', 0, true);\n            $newProductsCount = $this->Category->getProductsByCategoryId(Configure::read('app.categoryAllProducts'), true, '', 0, true);\n            $categoriesForMenu = $this->Category->getForMenu();\n            array_unshift($categoriesForMenu, [\n                'slug' => Configure::read('app.slugHelper')->getNewProducts(),\n                'name' => __('New_products') . ' <span class=\"additional-info\"> (' . $newProductsCount . ')<\/span>',\n                'options' => [\n                    'fa-icon' => 'fa-star' . ($newProductsCount > 0 ? ' gold' : '')\n                ]\n            ]);\n            array_unshift($categoriesForMenu, [\n                'slug' => Configure::read('app.slugHelper')->getAllProducts(),\n                'name' => __('All_products') . ' <span class=\"additional-info\"> (' . $allProductsCount . ')<\/span>',\n                'options' => [\n                    'fa-icon' => 'fa-tags'\n                ]\n            ]);\n        }\n        $this->set('categoriesForMenu', $categoriesForMenu);\n\n        $this->Manufacturer = TableRegistry::getTableLocator()->get('Manufacturers');\n        $manufacturersForMenu = $this->Manufacturer->getForMenu($this->AppAuth);\n        $this->set('manufacturersForMenu', $manufacturersForMenu);\n\n        $this->Page = TableRegistry::getTableLocator()->get('Pages');\n        $conditions = [];\n        $conditions['Pages.active'] = APP_ON;\n        $conditions[] = 'Pages.position > 0';\n        if (! $this->AppAuth->user()) {\n            $conditions['Pages.is_private'] = APP_OFF;\n        }\n\n        $pages = $this->Page->getThreaded($conditions);\n        $pagesForHeader = [];\n        $pagesForFooter = [];\n        foreach ($pages as $page) {\n            if ($page->menu_type == 'header') {\n                $pagesForHeader[] = $page;\n            }\n            if ($page->menu_type == 'footer') {\n                $pagesForFooter[] = $page;\n            }\n        }\n        $this->set('pagesForHeader', $pagesForHeader);\n        $this->set('pagesForFooter', $pagesForFooter);\n    }","label":0}
{"text":"@GET\n  @Path(WEBUI_WORKERS)\n  @ReturnType(\"alluxio.wire.MasterWebUIWorkers\")\n  public Response getWebUIWorkers() {\n    return RestUtils.call(() -> {\n      MasterWebUIWorkers response = new MasterWebUIWorkers();\n\n      response.setDebug(ServerConfiguration.getBoolean(PropertyKey.DEBUG));\n\n      List<WorkerInfo> workerInfos = mBlockMaster.getWorkerInfoList();\n      NodeInfo[] normalNodeInfos = WebUtils.generateOrderedNodeInfos(workerInfos);\n      response.setNormalNodeInfos(normalNodeInfos);\n\n      List<WorkerInfo> lostWorkerInfos = mBlockMaster.getLostWorkersInfoList();\n      NodeInfo[] failedNodeInfos = WebUtils.generateOrderedNodeInfos(lostWorkerInfos);\n      response.setFailedNodeInfos(failedNodeInfos);\n\n      return response;\n    }, ServerConfiguration.global());\n  }","label":0}
{"text":"public function bulkDeleteAction(Request $request, int $objectStateGroupId): Response\n    {\n        $this->denyAccessUnlessGranted(new Attribute('state', 'administrate'));\n        $form = $this->formFactory->create(\n            ObjectStatesDeleteType::class,\n            new ObjectStatesDeleteData()\n        );\n        $form->handleRequest($request);\n\n        if ($form->isSubmitted()) {\n            $result = $this->submitHandler->handle($form, function (ObjectStatesDeleteData $data) {\n                foreach ($data->getObjectStates() as $objectStateId => $selected) {\n                    $objectState = $this->objectStateService->loadObjectState($objectStateId);\n                    $this->objectStateService->deleteObjectState($objectState);\n\n                    $this->notificationHandler->success(\n                        $this->translator->trans(\n                            \/** @Desc(\"Object state '%name%' deleted.\") *\/\n                            'object_state.delete.success',\n                            ['%name%' => $objectState->getName()],\n                            'object_state'\n                        )\n                    );\n                }\n            });\n\n            if ($result instanceof Response) {\n                return $result;\n            }\n        }\n\n        return $this->redirectToRoute('ezplatform.object_state.group.view', [\n            'objectStateGroupId' => $objectStateGroupId,\n        ]);\n    }","label":0}
{"text":"func Bindings(w io.Writer, r Output) error {\n\tif r.Error != nil {\n\t\treturn prettyError(w, r.Error)\n\t}\n\tfor _, rs := range r.Result {\n\t\tif err := JSON(w, rs.Bindings); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\treturn nil\n}","label":0}
{"text":"public static <T extends AnnotationDescription> ElementMatcher.Junction<T> annotationType(TypeDescription type) {\n        return annotationType(is(type));\n    }","label":0}
{"text":"function extractResponseVal(res) {\n        if (_u.isArray(res) && res.length && _u.isObject(res[0])) {\n            var resObj = _u.values(res[0]);\n\n            if (resObj.length) {\n                return resObj[0];\n            }\n        }\n    }","label":0}
{"text":"public void proxyTo(final List<? extends URI> uris) {\r\n\t\tfor (URI uri : uris)\r\n\t\t{\r\n\t\t\tif(uri == null) {\r\n\t\t\t\tthrow new NullPointerException(\"URI can't be null\");\r\n\t\t\t}\r\n\t\t\tif(!JainSipUtils.checkScheme(uri.toString())) {\r\n\t\t\t\tthrow new IllegalArgumentException(\"Scheme \" + uri.getScheme() + \" is not supported\");\r\n\t\t\t}\r\n\t\t\tfinal ProxyBranchImpl branch = new ProxyBranchImpl((URI) uri, this);\r\n\t\t\tbranch.setRecordRoute(recordRoutingEnabled);\r\n\t\t\tbranch.setRecurse(recurse);\r\n\t\t\tthis.proxyBranches.put(uri, branch);\r\n\t\t}\r\n\t\tstartProxy();\r\n\t}","label":0}
{"text":"protected function buildOperation($operation)\n    {\n        $body      = $this->document->getElementsByTagNameNS(self::SOAP_ENVELOPE, 'Body')->item(0);\n        $operation = $this->document->createElementNS(self::ETP_NAME_SPACE, 'etp:' . $operation);\n\n        return $body->appendChild($operation);\n    }","label":0}
{"text":"def parse_opts(opts_in, opts_defaults)\n      diff_id = opts_in.keys - opts_defaults.keys\n      raise ArgumentError, \"Unrecognised argument(s): #{diff_id.join(\", \")}\" if diff_id.any?\n\n      (opts_in.keys & opts_defaults.keys).each do |k|\n        raise ArgumentError, \"Argument #{k.to_s} must not be nil\" if opts_defaults[k] == nil and opts_in[k] == nil\n      end\n\n      (opts_defaults.keys - opts_in.keys).each do |k|\n        raise ArgumentError, \"Argument #{k.to_s} must not be nil\" if opts_defaults[k] == nil\n        opts_in.merge!(k => opts_defaults[k])\n      end\n      opts_in\n    end","label":0}
{"text":"func AddOrUpdateTolerationInPodSpec(spec *v1.PodSpec, toleration *v1.Toleration) bool {\n\tpodTolerations := spec.Tolerations\n\n\tvar newTolerations []v1.Toleration\n\tupdated := false\n\tfor i := range podTolerations {\n\t\tif toleration.MatchToleration(&podTolerations[i]) {\n\t\t\tif helper.Semantic.DeepEqual(toleration, podTolerations[i]) {\n\t\t\t\treturn false\n\t\t\t}\n\t\t\tnewTolerations = append(newTolerations, *toleration)\n\t\t\tupdated = true\n\t\t\tcontinue\n\t\t}\n\n\t\tnewTolerations = append(newTolerations, podTolerations[i])\n\t}\n\n\tif !updated {\n\t\tnewTolerations = append(newTolerations, *toleration)\n\t}\n\n\tspec.Tolerations = newTolerations\n\treturn true\n}","label":0}
{"text":"def getQuotes(self, symbol, start, end):\r\n        \r\n        try:\r\n            start = str(start).replace('-', '')\r\n            end = str(end).replace('-', '')\r\n\r\n            url = 'http:\/\/ichart.yahoo.com\/table.csv?s=%s&' % symbol + \\\r\n                'd=%s&' % str(int(end[4:6]) - 1) + \\\r\n                'e=%s&' % str(int(end[6:8])) + \\\r\n                'f=%s&' % str(int(end[0:4])) + \\\r\n                'g=d&' + \\\r\n                'a=%s&' % str(int(start[4:6]) - 1) + \\\r\n                'b=%s&' % str(int(start[6:8])) + \\\r\n                'c=%s&' % str(int(start[0:4])) + \\\r\n                'ignore=.csv'\r\n            days = urllib.urlopen(url).readlines()\r\n            values = [day[:-2].split(',') for day in days]\r\n            # sample values:[['Date', 'Open', 'High', 'Low', 'Close', 'Volume', 'Adj Clos'], \\\r\n            #              ['2009-12-31', '112.77', '112.80', '111.39', '111.44', '90637900', '109.7']...]\r\n            data = []\r\n            for value in values[1:]:\r\n                data.append(Quote(value[0], value[1], value[2], value[3], value[4], value[5], value[6]))\r\n\r\n            dateValues = sorted(data, key = lambda q: q.time)\r\n            return dateValues\r\n\r\n        except IOError:\r\n            raise UfException(Errors.NETWORK_ERROR, \"Can't connect to Yahoo server\")\r\n        except BaseException:\r\n            raise UfException(Errors.UNKNOWN_ERROR, \"Unknown Error in YahooFinance.getHistoricalPrices %s\" % traceback.format_exc())","label":0}
{"text":"public ServiceFuture<List<PolicyDefinitionInner>> listBuiltInAsync(final ListOperationCallback<PolicyDefinitionInner> serviceCallback) {\n        return AzureServiceFuture.fromPageResponse(\n            listBuiltInSinglePageAsync(),\n            new Func1<String, Observable<ServiceResponse<Page<PolicyDefinitionInner>>>>() {\n                @Override\n                public Observable<ServiceResponse<Page<PolicyDefinitionInner>>> call(String nextPageLink) {\n                    return listBuiltInNextSinglePageAsync(nextPageLink);\n                }\n            },\n            serviceCallback);\n    }","label":0}
{"text":"func (t *Throttler) updateMaxRate() {\n\t\/\/ Set it to infinite initially.\n\tmaxRate := int64(math.MaxInt64)\n\n\t\/\/ Find out the new max rate (minimum among all modules).\n\tfor _, m := range t.modules {\n\t\tif moduleMaxRate := m.MaxRate(); moduleMaxRate < maxRate {\n\t\t\tmaxRate = moduleMaxRate\n\t\t}\n\t}\n\n\t\/\/ Set the new max rate on each thread.\n\tt.mu.Lock()\n\tdefer t.mu.Unlock()\n\tthreadsRunning := len(t.runningThreads)\n\tif threadsRunning == 0 {\n\t\t\/\/ Throttler is done. Set rates don't matter anymore.\n\t\treturn\n\t}\n\n\tif maxRate != ZeroRateNoProgess && maxRate < int64(threadsRunning) {\n\t\tlog.Warningf(\"Set maxRate is less than the number of threads (%v). To prevent threads from starving, maxRate was increased from: %v to: %v.\", threadsRunning, maxRate, threadsRunning)\n\t\tmaxRate = int64(threadsRunning)\n\t}\n\tmaxRatePerThread := maxRate \/ int64(threadsRunning)\n\t\/\/ Distribute the remainder of the division across all threads.\n\tremainder := maxRate % int64(threadsRunning)\n\tremainderPerThread := make(map[int]int64, threadsRunning)\n\tfor id := 0; remainder > 0; {\n\t\tremainderPerThread[id]++\n\t\tremainder--\n\t\tid++\n\t}\n\n\tfor threadID := range t.runningThreads {\n\t\tt.threadThrottlers[threadID].setMaxRate(maxRatePerThread + remainderPerThread[threadID])\n\t}\n\tt.threadRunningsLastUpdate = threadsRunning\n}","label":0}
{"text":"def save!\n      result = Api.post(\"#{BASE_PATH}\/#{customer_id}\", body: attributes.to_json)\n      Customer.new(result.parsed_response[\"rg_customer\"])\n    end","label":0}
{"text":"func (s *Toolchain) Validate() error {\n\tinvalidParams := request.ErrInvalidParams{Context: \"Toolchain\"}\n\tif s.RoleArn != nil && len(*s.RoleArn) < 1 {\n\t\tinvalidParams.Add(request.NewErrParamMinLen(\"RoleArn\", 1))\n\t}\n\tif s.Source == nil {\n\t\tinvalidParams.Add(request.NewErrParamRequired(\"Source\"))\n\t}\n\tif s.Source != nil {\n\t\tif err := s.Source.Validate(); err != nil {\n\t\t\tinvalidParams.AddNested(\"Source\", err.(request.ErrInvalidParams))\n\t\t}\n\t}\n\n\tif invalidParams.Len() > 0 {\n\t\treturn invalidParams\n\t}\n\treturn nil\n}","label":0}
{"text":"func (s *Stream) Flush() (error) {\n\tvar err C.int\n\t_ = C.pa_simple_flush(s.simple, &err)\n\tif err == C.PA_OK {\n\t\treturn nil\n\t}\n\treturn errorFromCode(err)\n}","label":0}
{"text":"def parse_fields(self):\n        \"\"\"\"\"\"\n\n        rule = self.t['toprule'].rstrip()  # keep leading space for correct columns!!\n        if not (rule == self.t['midrule'].rstrip() and rule == self.t['botrule'].rstrip()):\n            raise ParseError(\"Table rules differ from each other (check white space).\")\n        names = self.t['fields'].split()\n        nfields = len(rule.split())\n        if nfields != len(names):\n            raise ParseError(\"number of field names (%d) does not match number of fields (%d)\"\n                             % (nfields, len(names)))\n        fields = []     #  list of tuples (first,last) column of the field\n        ifield = 0\n        is_field = rule.startswith('=')  # state\n        len_rule = len(rule)\n        start_field = 0\n        end_field = 0\n        for c in xrange(len_rule):\n            char = rule[c]\n            if not is_field and char == '=':\n                start_field = c\n                is_field = True\n            if is_field and (char == ' ' or c == len_rule-1):\n                # finished field\n                fields.append((start_field, c))\n                ifield += 1\n                is_field = False\n        self.names = names\n        self.fields = fields","label":0}
{"text":"def intersect(a, b):\n    \n    if a[x0] == a[x1] or a[y0] == a[y1]:\n        return False\n    if b[x0] == b[x1] or b[y0] == b[y1]:\n        return False\n    return a[x0] <= b[x1] and b[x0] <= a[x1] and a[y0] <= b[y1] and b[y0] <= a[y1]","label":0}
{"text":"def publish_message_to_centrifugo(sender, instance, created, **kwargs):\n    \n    if created is True:\n        client = Client(\"{0}api\/\".format(getattr(settings, \"CENTRIFUGE_ADDRESS\")), getattr(settings, \"CENTRIFUGE_SECRET\"))\n        # we ensure the client is still in the thread (he may have left or have been removed)\n        active_participants = [participation.participant.id for participation in Participation.objects.filter(thread=instance.thread, date_left__isnull=True).select_related('participant')]\n        client.publish(\n            build_channel(settings.CENTRIFUGO_MESSAGE_NAMESPACE, instance.thread.id, active_participants),\n            {\n                \"id\": instance.id,\n                \"body\": instance.body,\n                \"sender\": instance.sender.id,\n                \"thread\": instance.thread.id,\n                \"sent_at\": str(instance.sent_at),\n                \"is_notification\": True,  # ATTENTION: check against sender too to be sure to not notify him his message\n            }\n        )","label":0}
{"text":"func (s *Service) PipelineCouplingUpdate(ctx context.Context, pipelineCouplingIdentity string, o PipelineCouplingUpdateOpts) (*PipelineCoupling, error) {\n\tvar pipelineCoupling PipelineCoupling\n\treturn &pipelineCoupling, s.Patch(ctx, &pipelineCoupling, fmt.Sprintf(\"\/pipeline-couplings\/%v\", pipelineCouplingIdentity), o)\n}","label":0}
{"text":"func (notFound) ServeHTTP(w http.ResponseWriter, r *http.Request) {\n\tw.Header().Set(\"Content-Type\", \"text\/plain\")\n\tw.WriteHeader(http.StatusNotFound)\n\tfmt.Fprint(w, \"Not found\")\n\n}","label":0}
{"text":"def parse_options():\n\t\n\n\tparser = optparse.OptionParser(usage=USAGE, version=ontospy.VERSION)\n\n\tparser.add_option(\"-p\", \"--port\",\n\t\t\taction=\"store\", type=\"int\", default=DEFAULT_PORT, dest=\"port\",\n\t\t\thelp=\"A number specifying which port to use for the server.\")\n\n\topts, args = parser.parse_args()\n\n\t# if not opts.all and not opts.query:\n\t#\tparser.print_help()\n\t#\tsys.exit(0)\n\n\treturn opts, args","label":0}
{"text":"def _parse_snapshot_share(response, name):\n    '''\n    \n    '''\n    snapshot = response.headers.get('x-ms-snapshot')\n\n    return _parse_share(response, name, snapshot)","label":0}
{"text":"func (ec *EllipticCurve) Decompress(x *big.Int, ylsb uint) (P Point, err error) {\n\t\/* y**2 = x**3 + a*x + b  % p *\/\n\trhs := addMod(\n\t\taddMod(\n\t\t\texpMod(x, big.NewInt(3), ec.P),\n\t\t\tmulMod(ec.A, x, ec.P),\n\t\t\tec.P),\n\t\tec.B, ec.P)\n\n\t\/* y = sqrt(rhs) % p *\/\n\ty := sqrtMod(rhs, ec.P)\n\n\t\/* Use -y if opposite lsb is required *\/\n\tif y.Bit(0) != (ylsb & 0x1) {\n\t\ty = subMod(big.NewInt(0), y, ec.P)\n\t}\n\n\tP.X = x\n\tP.Y = y\n\n\tif !ec.IsOnCurve(P) {\n\t\treturn P, errors.New(\"Compressed (x, ylsb) not on curve.\")\n\t}\n\n\treturn P, nil\n}","label":0}
{"text":"func (p Point) Distance(b Point) s1.Angle {\n\treturn p.Vector.Angle(b.Vector)\n}","label":0}
{"text":"final void innerRun(final Wave wave) throws CommandException {\n        beforePerform(wave);\n        perform(wave);\n        afterPerform(wave);\n    }","label":0}
{"text":"func SkipUnless(t skippeable, labels ...string) {\n\tenv := strings.Split(os.Getenv(\"LABELS\"), \",\")\n\tfor _, each := range labels {\n\t\tfor _, other := range env {\n\t\t\tif each == other {\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t}\n\tt.Skipf(\"skipped because provided LABELS=%v does not include any of %v\", env, labels)\n}","label":0}
{"text":"function (x, y, r, innerR, start, end) {\r\n\t\t\/\/ arcs are defined as symbols for the ability to set\r\n\t\t\/\/ attributes in attr and animate\r\n\r\n\t\tif (isObject(x)) {\r\n\t\t\ty = x.y;\r\n\t\t\tr = x.r;\r\n\t\t\tinnerR = x.innerR;\r\n\t\t\tstart = x.start;\r\n\t\t\tend = x.end;\r\n\t\t\tx = x.x;\r\n\t\t}\r\n\r\n\t\treturn this.symbol('arc', x || 0, y || 0, r || 0, {\r\n\t\t\tinnerR: innerR || 0,\r\n\t\t\tstart: start || 0,\r\n\t\t\tend: end || 0\r\n\t\t});\r\n\t}","label":0}
{"text":"func (s *ClusterMetadata) SetRoleARN(v string) *ClusterMetadata {\n\ts.RoleARN = &v\n\treturn s\n}","label":0}
{"text":"def __reorganize_funding(self):\n        \n        _map = {\"agency\": \"Funding_Agency_Name\", \"grant\": \"Grant\"}\n        try:\n            _l = []\n            for item in self.noaa_data_sorted[\"Funding_Agency\"]:\n                _tmp = {}\n                for lpd_name, noaa_name in _map.items():\n                    val = \"\"\n                    if lpd_name in item:\n                        val = item[lpd_name]\n                    _tmp[noaa_name] = val\n                _l.append(_tmp)\n            self.noaa_data_sorted[\"Funding_Agency\"] = _l\n        except Exception:\n            pass\n        return","label":0}
{"text":"def show_system_monitor_output_switch_status_port_status_port_state(self, **kwargs):\n        \n        config = ET.Element(\"config\")\n        show_system_monitor = ET.Element(\"show_system_monitor\")\n        config = show_system_monitor\n        output = ET.SubElement(show_system_monitor, \"output\")\n        switch_status = ET.SubElement(output, \"switch-status\")\n        port_status = ET.SubElement(switch_status, \"port-status\")\n        port_state = ET.SubElement(port_status, \"port-state\")\n        port_state.text = kwargs.pop('port_state')\n\n        callback = kwargs.pop('callback', self._callback)\n        return callback(config)","label":0}
{"text":"public function run()\n    {\n        $users = [\n            [\n                'name'     => 'admin',\n                'email'    => 'admin@admin.com',\n                'password' => 'vercingetorige',\n                'role'     => 'admin',\n                'enabled'  => 1,\n            ],\n        ];\n\n        $um = new UserManager();\n\n        foreach ($users as $user) {\n            $um->createOrFail($user);\n        }\n\n        return 1;\n    }","label":0}
{"text":"public function delete( $id = null, $attributes = array(), $search = false )\n    {\n        $this->forceStoreRegistry = true;\n        parent::delete( $id, $attributes, $search );\n    }","label":0}
{"text":"public function followStepsRecipe(): callable\n    {\n        return function (array $steps, array $onError): ChefInterface {\n            \/**\n             * @var Chef $this\n             *\/\n            $this->steps = \\array_values($steps);\n            $this->stepsNames = \\array_flip(\\array_keys($steps));\n            $this->onError = $onError;\n\n            $this->updateStates();\n\n            return $this;\n        };\n    }","label":0}
{"text":"func isLoggedIn(w http.ResponseWriter, r *http.Request) bool {\n\tlog.Debug(\"validating logged in\")\n\n\tw.Header().Set(\"WWW-Authenticate\", bearerAuthKey+\" realm=Restricted\")\n\tauth := r.Header.Get(\"Authorization\")\n\tl := len(bearerAuthKey)\n\n\t\/\/ Ensure client sent the token\n\tif len(auth) <= l+1 || auth[:l] != bearerAuthKey {\n\t\tlog.Debug(\"client did not send token\")\n\t\twriteErrorAuth(w, errors.New(\"missing Bearer token\"))\n\t\treturn false\n\t}\n\n\t\/\/ Ensure the token is still valid\n\tcookie, err := r.Cookie(\"issuedAt\")\n\tif err == http.ErrNoCookie {\n\t\twriteErrorAuth(w, err)\n\t\treturn false\n\t}\n\tif err != nil {\n\t\twriteErrorInternal(w, err)\n\t\treturn false\n\t}\n\tif len(cookie.Value) == 0 || cookie.Value == \"undefined\" {\n\t\twriteErrorAuth(w, errors.New(\"missing issuedAt\"))\n\t\treturn false\n\t}\n\tissuedAt, err := strconv.ParseInt(cookie.Value, 10, 64)\n\tif err != nil {\n\t\twriteErrorInternal(w, err)\n\t\treturn false\n\t}\n\tt := time.Unix(issuedAt, 0)\n\tif t.Add(72 * time.Hour).Before(time.Now()) {\n\t\tlog.Debug(\"token expired\")\n\t\twriteErrorAuth(w, errors.New(\"missing Bearer token\"))\n\t\treturn false\n\t}\n\n\t\/\/ Ensure the token has not been tampered with\n\tb, err := base64.StdEncoding.DecodeString(auth[l+1:])\n\tif err != nil {\n\t\twriteErrorInternal(w, err)\n\t\treturn false\n\t}\n\tcookie, err = r.Cookie(\"scopes\")\n\tif err == http.ErrNoCookie {\n\t\twriteErrorAuth(w, err)\n\t\treturn false\n\t}\n\tif err != nil {\n\t\twriteErrorInternal(w, err)\n\t\treturn false\n\t}\n\tscopes := strings.Fields(cookie.Value)\n\tcookie, err = r.Cookie(\"id\")\n\tif err == http.ErrNoCookie {\n\t\twriteErrorAuth(w, err)\n\t\treturn false\n\t}\n\tif err != nil {\n\t\twriteErrorInternal(w, err)\n\t\treturn false\n\t}\n\tuserID, err := strconv.ParseUint(cookie.Value, 10, 64)\n\tif err != nil {\n\t\twriteErrorInternal(w, err)\n\t\treturn false\n\t}\n\tcookie, err = r.Cookie(\"email\")\n\tif err == http.ErrNoCookie {\n\t\twriteErrorAuth(w, err)\n\t\treturn false\n\t}\n\tif err != nil {\n\t\twriteErrorInternal(w, err)\n\t\treturn false\n\t}\n\temail, err := url.QueryUnescape(cookie.Value)\n\tif err != nil {\n\t\twriteErrorInternal(w, err)\n\t\treturn false\n\t}\n\ta := Header{\n\t\tID:       userID,\n\t\tEmail:    email,\n\t\tScopes:   scopes,\n\t\tIssuedAt: issuedAt,\n\t}\n\tbyt, err := json.Marshal(a)\n\tif err != nil {\n\t\twriteErrorInternal(w, err)\n\t\treturn false\n\t}\n\tknown := hmac.New(sha512.New, []byte(os.Getenv(\"ABOT_SECRET\")))\n\t_, err = known.Write(byt)\n\tif err != nil {\n\t\twriteErrorInternal(w, err)\n\t\treturn false\n\t}\n\tok := hmac.Equal(known.Sum(nil), b)\n\tif !ok {\n\t\tlog.Info(\"token tampered for user\", userID)\n\t\twriteErrorAuth(w, errors.New(\"Bearer token tampered\"))\n\t\treturn false\n\t}\n\tlog.Debug(\"validated logged in\")\n\treturn true\n}","label":0}
{"text":"private static ImmutableSet<RelationID> attributeOccurrencesUnion(QuotedID id,\n                                                                      RAExpressionAttributes re1,\n                                                                      RAExpressionAttributes re2) {\n\n        ImmutableSet<RelationID> s1 = re1.attributeOccurrences.get(id);\n        ImmutableSet<RelationID> s2 = re2.attributeOccurrences.get(id);\n\n        if (s1 == null)\n            return s2;\n\n        if (s2 == null)\n            return s1;\n\n        return ImmutableSet.<RelationID>builder().addAll(s1).addAll(s2).build();\n    }","label":0}
{"text":"public Environment environment(String name, Project project, Map<String, Object> attributes) {\n        Environment environment = new Environment(instance);\n\n        environment.setName(name);\n        environment.setProject(project);\n        addAttributes(environment, attributes);\n        environment.save();\n\n        return environment;\n    }","label":0}
{"text":"private String convertToEcmaScriptString(String string) {\n        int len = string.length();\n        InternalStringBuilder buf = new InternalStringBuilder(len);\n        for(int i = 0; i < len; i++) {\n            char c = string.charAt(i);\n            \/\/ skip the \\\\ and consume the next character either appending it or turning it back\n            \/\/ into the single character that it should have been in the first place.\n            \n            \/\/ if slash and not at the last character...\n            if(c == '\\\\' && i + 1 < len) {\n                i++;\n\n                \/\/ skip the slash\n                c = string.charAt(i);\n\n                if(c == 'b')\n                    c = '\\b';\n                else if(c == 't')\n                    c = '\\t';\n                else if(c == 'n')\n                    c = '\\n';\n                \/\/else if(c == 'v') c = '\\v';\n                else if(c == 'f')\n                    c = '\\f';\n                else if(c == 'r') c = '\\r';\n                \/\/ @todo: unicode escaping?\n            }\n\n            buf.append(c);\n        }\n\n        LOGGER.trace(\"converted String to JavaScript compliant string: \" + buf.toString());\n\n        return buf.toString();\n    }","label":0}
{"text":"func (a *ACLToken) Validate() error {\n\tvar mErr multierror.Error\n\tif len(a.Name) > maxTokenNameLength {\n\t\tmErr.Errors = append(mErr.Errors, fmt.Errorf(\"token name too long\"))\n\t}\n\tswitch a.Type {\n\tcase ACLClientToken:\n\t\tif len(a.Policies) == 0 {\n\t\t\tmErr.Errors = append(mErr.Errors, fmt.Errorf(\"client token missing policies\"))\n\t\t}\n\tcase ACLManagementToken:\n\t\tif len(a.Policies) != 0 {\n\t\t\tmErr.Errors = append(mErr.Errors, fmt.Errorf(\"management token cannot be associated with policies\"))\n\t\t}\n\tdefault:\n\t\tmErr.Errors = append(mErr.Errors, fmt.Errorf(\"token type must be client or management\"))\n\t}\n\treturn mErr.ErrorOrNil()\n}","label":0}
{"text":"def has_key(cls, *args):\n        \n        key = args if len(args) > 1 else args[0]\n        return key in cls._instances","label":0}
{"text":"public function getIP()\n    {\n        if (function_exists('apache_request_headers')) {\n            $headers = apache_request_headers();\n        } else {\n            $headers = $_SERVER;\n        }\n \n        if (array_key_exists('X-Forwarded-For', $headers)\n            && filter_var($headers['X-Forwarded-For'], FILTER_VALIDATE_IP, FILTER_FLAG_IPV4) ) {\n            $ip = $headers['X-Forwarded-For'];\n \n        } elseif (array_key_exists('HTTP_X_FORWARDED_FOR', $headers)\n            && filter_var($headers['HTTP_X_FORWARDED_FOR'], FILTER_VALIDATE_IP, FILTER_FLAG_IPV4)) {\n            $ip = $headers['HTTP_X_FORWARDED_FOR'];\n \n        } else {\n            $ip = filter_var($_SERVER['REMOTE_ADDR'], FILTER_VALIDATE_IP);\n        }\n\n        $this->ip = $ip;\n    }","label":0}
{"text":"protected static void initLogger ()\n    {\n        \/\/ if a custom class was specified as a system property, use that\n        Factory factory = createConfiguredFactory();\n\n        \/\/ create and a log4j logger if the log4j configuration system property is set\n        try {\n            if (factory == null && System.getProperty(\"log4j.configuration\") != null) {\n                factory = (Factory)Class.forName(\"com.samskivert.util.Log4JLogger\").newInstance();\n            }\n        } catch (SecurityException se) {\n            \/\/ in a sandbox, no biggie\n        } catch (Throwable t) {\n            System.err.println(\"Unable to instantiate Log4JLogger: \" + t);\n        }\n\n        \/\/ create and a log4j2 logger if the log4j2 configuration system property is set\n        try {\n            if (factory == null && System.getProperty(\"log4j.configurationFile\") != null) {\n                factory = (Factory)Class.forName(\"com.samskivert.util.Log4J2Logger\").newInstance();\n            }\n        } catch (SecurityException se) {\n            \/\/ in a sandbox, no biggie\n        } catch (Throwable t) {\n            System.err.println(\"Unable to instantiate Log4J2Logger: \" + t);\n        }\n\n        \/\/ lastly, fall back to the Java logging system\n        if (factory == null) {\n            factory = new JDK14Logger();\n        }\n\n        \/\/ and finally configure our factory\n        setFactory(factory);\n    }","label":0}
{"text":"def _ConvertFieldValuePair(self, js, message):\n    \n    names = []\n    message_descriptor = message.DESCRIPTOR\n    fields_by_json_name = dict((f.json_name, f)\n                               for f in message_descriptor.fields)\n    for name in js:\n      try:\n        field = fields_by_json_name.get(name, None)\n        if not field:\n          field = message_descriptor.fields_by_name.get(name, None)\n        if not field:\n          if self.ignore_unknown_fields:\n            continue\n          raise ParseError(\n              'Message type \"{0}\" has no field named \"{1}\".'.format(\n                  message_descriptor.full_name, name))\n        if name in names:\n          raise ParseError('Message type \"{0}\" should not have multiple '\n                           '\"{1}\" fields.'.format(\n                               message.DESCRIPTOR.full_name, name))\n        names.append(name)\n        # Check no other oneof field is parsed.\n        if field.containing_oneof is not None:\n          oneof_name = field.containing_oneof.name\n          if oneof_name in names:\n            raise ParseError('Message type \"{0}\" should not have multiple '\n                             '\"{1}\" oneof fields.'.format(\n                                 message.DESCRIPTOR.full_name, oneof_name))\n          names.append(oneof_name)\n\n        value = js[name]\n        if value is None:\n          if (field.cpp_type == descriptor.FieldDescriptor.CPPTYPE_MESSAGE\n              and field.message_type.full_name == 'google.protobuf.Value'):\n            sub_message = getattr(message, field.name)\n            sub_message.null_value = 0\n          else:\n            message.ClearField(field.name)\n          continue\n\n        # Parse field value.\n        if _IsMapEntry(field):\n          message.ClearField(field.name)\n          self._ConvertMapFieldValue(value, message, field)\n        elif field.label == descriptor.FieldDescriptor.LABEL_REPEATED:\n          message.ClearField(field.name)\n          if not isinstance(value, list):\n            raise ParseError('repeated field {0} must be in [] which is '\n                             '{1}.'.format(name, value))\n          if field.cpp_type == descriptor.FieldDescriptor.CPPTYPE_MESSAGE:\n            # Repeated message field.\n            for item in value:\n              sub_message = getattr(message, field.name).add()\n              # None is a null_value in Value.\n              if (item is None and\n                  sub_message.DESCRIPTOR.full_name != 'google.protobuf.Value'):\n                raise ParseError('null is not allowed to be used as an element'\n                                 ' in a repeated field.')\n              self.ConvertMessage(item, sub_message)\n          else:\n            # Repeated scalar field.\n            for item in value:\n              if item is None:\n                raise ParseError('null is not allowed to be used as an element'\n                                 ' in a repeated field.')\n              getattr(message, field.name).append(\n                  _ConvertScalarFieldValue(item, field))\n        elif field.cpp_type == descriptor.FieldDescriptor.CPPTYPE_MESSAGE:\n          sub_message = getattr(message, field.name)\n          sub_message.SetInParent()\n          self.ConvertMessage(value, sub_message)\n        else:\n          setattr(message, field.name, _ConvertScalarFieldValue(value, field))\n      except ParseError as e:\n        if field and field.containing_oneof is None:\n          raise ParseError('Failed to parse {0} field: {1}'.format(name, e))\n        else:\n          raise ParseError(str(e))\n      except ValueError as e:\n        raise ParseError('Failed to parse {0} field: {1}.'.format(name, e))\n      except TypeError as e:\n        raise ParseError('Failed to parse {0} field: {1}.'.format(name, e))","label":0}
{"text":"static JmxConfig from(Config config) {\n    try {\n      ObjectName query = new ObjectName(config.getString(\"query\"));\n      List<JmxMeasurementConfig> ms = new ArrayList<>();\n      for (Config cfg : config.getConfigList(\"measurements\")) {\n        ms.add(JmxMeasurementConfig.from(cfg));\n      }\n      return new JmxConfig(query, ms);\n    } catch (Exception e) {\n      throw new IllegalArgumentException(\"invalid mapping config\", e);\n    }\n  }","label":0}
{"text":"function windowCmp(tabWindowA, tabWindowB) {\n  \/\/ focused window very first:\n  var fA = tabWindowA.focused;\n  var fB = tabWindowB.focused;\n  if (fA !== fB) {\n    if (fA) {\n      return -1;\n    }\n    return 1;\n  }\n\n  \/\/ open windows first:\n  if (tabWindowA.open !== tabWindowB.open) {\n    if (tabWindowA.open) {\n      return -1;\n    }\n    return 1;\n  }\n\n  var tA = tabWindowA.title;\n  var tB = tabWindowB.title;\n  return tA.localeCompare(tB);\n}","label":0}
{"text":"public static String getFileExtension(String value) {\n        int index = value.lastIndexOf('.');\n        if (index > -1) {\n            return value.substring(index + 1);\n        }\n\n        return \"\";\n    }","label":0}
{"text":"func (c *Config) Attrs() map[string]interface{} {\n\tif c.attrs == nil {\n\t\treturn nil\n\t}\n\tattrs := make(map[string]interface{})\n\tfor k, v := range c.attrs {\n\t\tattrs[k] = v\n\t}\n\treturn attrs\n}","label":0}
{"text":"public function bind($params = null)\n    {\n\n        if (is_array($params)) {\n            foreach ($params as $k => $v) {\n                $this->bindParam($k, $v);\n            }\n        }\n\n        return $this;\n    }","label":0}
{"text":"func (net *Network) Connect(oneID, otherID enode.ID) error {\n\tnet.lock.Lock()\n\tdefer net.lock.Unlock()\n\treturn net.connect(oneID, otherID)\n}","label":0}
{"text":"protected static void buildClassCast(StringBuilder builder, Class cls) {\n        builder.append('(');\n        buildClass(builder, cls);\n        builder.append(')');\n    }","label":0}
{"text":"def _remove_double_brackets(text):\n  \n  def replacement_fn(s):\n    if u\":\" in s:\n      # this is probably a category or something like that.\n      return \"\"\n    # keep the part after the bar.\n    bar_pos = s.find(u\"|\")\n    if bar_pos == -1:\n      return s\n    return s[bar_pos + 1:]\n  return _find_and_replace(text, u\"[[\", u\"]]\", replacement_fn)","label":0}
{"text":"protected function setRouteInfo($request)\n    {\n        $this->route_info = Route::getWebInfo($request);\n        if (!$this->route_info['controller'] || !$this->route_info['action']) {\n            $this->route_info['controller'] = 'index';\n            $this->route_info['action'] = 'index';\n            $home = Lb::app()->getHome();\n            if (isset($home['controller']) && isset($home['action']) && $home['controller'] && $home['action']) {\n                $this->route_info['controller'] = $home['controller'];\n                $this->route_info['action'] = $home['action'];\n            }\n        }\n    }","label":0}
{"text":"def parse_requests_response(response, **kwargs):\n    \n\n    return parse_headers(\n        response.headers.get('content-disposition'), response.url, **kwargs)","label":0}
{"text":"func (parser StringTypeParser) Parse(d DataType) error {\n\tif value, ok := AsString(d); ok {\n\t\tparser.setter(value)\n\t} else {\n\t\treturn fmt.Errorf(\"Error parsing type of %#v as a String\", d)\n\t}\n\treturn nil\n}","label":0}
{"text":"func MakeQuad(q quad.Quad) *Quad {\n\treturn &Quad{\n\t\tSubjectValue:   MakeValue(q.Subject),\n\t\tPredicateValue: MakeValue(q.Predicate),\n\t\tObjectValue:    MakeValue(q.Object),\n\t\tLabelValue:     MakeValue(q.Label),\n\t}\n}","label":0}
{"text":"public static function defaultUrlParams() {\n\t\t$defaults = ['plugin' => false];\n\t\t$prefixes = (array)Configure::read('Routing.prefixes');\n\t\tforeach ($prefixes as $prefix) {\n\t\t\t$defaults[$prefix] = false;\n\t\t}\n\t\treturn $defaults;\n\t}","label":0}
{"text":"def get_rml(self, rml_name, rtn_format=\"filepath\"):\n        \n\n        try:\n            rml_path = self.rml_maps[rml_name]\n        except KeyError:\n            if rml_name in self.rml_maps.values() or os.path.exists(rml_name):\n                rml_path = rml_name\n            else:\n                raise LookupError(\"rml_name '%s' is not registered\" % rml_name)\n        if rtn_format == \"data\":\n            with open(rml_path, \"rb\") as fo:\n                return fo.read()\n        return rml_path","label":0}
{"text":"public function buildForm(FormBuilderInterface $builder, array $options)\n    {\n        parent::buildForm($builder, $options);\n\n        $transformerStrategy = $options['transformer'];\n        if ($transformerStrategy === 'auto') {\n            $transformerStrategy = $options['multiple'] ? 'multiple' : 'class';\n        }\n\n        switch ($transformerStrategy) {\n            case 'class':\n                $builder->addViewTransformer(new ClassTransformer($this->quicklist, $options['repo']));\n                break;\n\n            case 'none':\n                $builder->addViewTransformer(new NoneTransformer($this->quicklist, $options['repo']));\n                break;\n\n            case 'multiple':\n                $builder->addViewTransformer(new MultipleTransformer(new ClassTransformer($this->quicklist, $options['repo'])));\n                break;\n\n            case 'multiple_none':\n                $builder->addViewTransformer(new MultipleTransformer(new NoneTransformer($this->quicklist, $options['repo'])));\n                break;\n        }\n    }","label":0}
{"text":"def paths_equal(self, lhs, rhs):\n        \n\n        if lhs is rhs:\n            return True\n        if lhs.host is not None and rhs.host is not None and\\\n           lhs.host != rhs.host:\n            return False\n        # need to make sure this stays in sync with CIMInstanceName.__cmp__()\n        return not (pywbem.cmpname(rhs.classname, lhs.classname) or\n                    cmp(rhs.keybindings, lhs.keybindings) or\n                    pywbem.cmpname(rhs.namespace, lhs.namespace))","label":0}
{"text":"protected function checkValidity($value) : bool\n    {\n        if (preg_match(static::$regex, $value)) {\n            return true;\n        } elseif ('' === $value) {\n            return true;\n        } else {\n            return false;\n        }\n    }","label":0}
{"text":"static function initialize()\n    {\n        if ( !isset( $GLOBALS['eZ1337Translator'] ) ||\n             !( $GLOBALS['eZ1337Translator'] instanceof eZ1337Translator ) )\n        {\n            $GLOBALS['eZ1337Translator'] = new eZ1337Translator();\n        }\n\n        $man = eZTranslatorManager::instance();\n        $man->registerHandler( $GLOBALS['eZ1337Translator'] );\n        return $GLOBALS['eZ1337Translator'];\n    }","label":0}
{"text":"protected function setStdIn()\n    {\n        if ($this->stdIn !== false) {\n            fclose($this->stdIn);\n        }\n\n        $this->stdIn = fopen('php:\/\/stdin', 'r');\n\n        if (!$this->stdIn) {\n            throw new RuntimeException('Unable to read from STDIN');\n        }\n    }","label":0}
{"text":"protected function renderFieldset(Fieldset $fieldset, $groupActions = false)\n    {\n        $fieldsetElement = new HtmlElement('fieldset');\n        $id              = $fieldset->getAttribute('id') ? : $fieldset->getName();\n        $parent          = $this->getElement();\n\n        $fieldsetElement->addAttribute('id', $id);\n\n        \/**\n         * This changes the scope of the current element,\n         * so that the child elements (the ones that are about to be rendered),\n         * will be set on the fieldset.\n         * Then change it back again so that the fieldset will be added to the form.\n         *\/\n        $this\n            ->setElement($fieldsetElement)\n            ->renderElements($fieldset, $groupActions)\n            ->setElement($parent);\n\n        return $fieldsetElement;\n    }","label":0}
{"text":"private static void checkParams(final Builder paramBuilder) {\n        checkState(paramBuilder.mSession != null && paramBuilder.mKey >= 0 && paramBuilder.mNewRev >= 0\n            && paramBuilder.mOldRev >= 0 && paramBuilder.mObservers != null && paramBuilder.mKind != null,\n            \"No valid arguments specified!\");\n        checkState(\n            paramBuilder.mNewRev != paramBuilder.mOldRev && paramBuilder.mNewRev >= paramBuilder.mOldRev,\n            \"Revision numbers must not be the same and the new revision must have a greater number than the old revision!\");\n    }","label":0}
{"text":"func (adapter *Registry) PropagateResync(ctx context.Context, txData map[string]datasync.ChangeValue) error {\n\tvar events []func(done chan error)\n\tadapter.lastRev.Cleanup()\n\n\tfor _, sub := range adapter.subscriptions {\n\t\titems := map[string]datasync.KeyValIterator{}\n\n\t\tfor _, prefix := range sub.KeyPrefixes {\n\t\t\tvar kvs []datasync.KeyVal\n\n\t\t\tfor key, val := range txData {\n\t\t\t\tif strings.HasPrefix(key, prefix) {\n\t\t\t\t\t\/\/ TODO: call Put only once for each key (different subscriptions)\n\t\t\t\t\tadapter.lastRev.PutWithRevision(key, val)\n\n\t\t\t\t\tkvs = append(kvs, &KeyVal{\n\t\t\t\t\t\tkey:       key,\n\t\t\t\t\t\tLazyValue: val,\n\t\t\t\t\t\trev:       val.GetRevision(),\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t}\n\t\t\titems[prefix] = NewKVIterator(kvs)\n\t\t}\n\n\t\tsendTo := func(sub *Subscription) func(done chan error) {\n\t\t\treturn func(done chan error) {\n\t\t\t\tsub.ResyncChan <- &ResyncEventDB{\n\t\t\t\t\tctx:         ctx,\n\t\t\t\t\tits:         items,\n\t\t\t\t\tDoneChannel: NewDoneChannel(done),\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tevents = append(events, sendTo(sub))\n\t}\n\n\tdone := make(chan error, 1)\n\tgo AggregateDone(events, done)\n\n\tselect {\n\tcase err := <-done:\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\/\/ TODO: maybe higher timeout for resync event?\n\tcase <-time.After(PropagateChangesTimeout):\n\t\tlogrus.DefaultLogger().Warnf(\"Timeout of aggregated resync callbacks (%v)\",\n\t\t\tPropagateChangesTimeout)\n\t}\n\n\treturn nil\n}","label":0}
{"text":"func (c *Client) GetSlavesFromLeader() (*State, error) {\n\tresp, err := c.GetHTTPResponseFromLeader(c.GetURLForSlavesFilePid)\n\treturn c.parseStateResponse(resp, err)\n}","label":0}
{"text":"func boolSliceParser(rd *proto.Reader, n int64) (interface{}, error) {\n\tbools := make([]bool, 0, n)\n\tfor i := int64(0); i < n; i++ {\n\t\tn, err := rd.ReadIntReply()\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tbools = append(bools, n == 1)\n\t}\n\treturn bools, nil\n}","label":0}
{"text":"public static  String convertToExternalPath(final String path) {\n        String newPath = replaceOnce(path, \"\/\" + CONTAINER_WEBAC_ACL, \"\/\" + FCR_ACL);\n\n        newPath = replaceOnce(newPath, \"\/\" + LDPCV_TIME_MAP, \"\/\" + FCR_VERSIONS);\n\n        newPath = replaceOnce(newPath, \"\/\" + FEDORA_DESCRIPTION, \"\/\" + FCR_METADATA);\n\n        return newPath;\n    }","label":0}
{"text":"public final static Type[] getGenericTypes(Class<?> c) {\n\n        Class<?> myClass = c;\n\n        if (!(c.getGenericSuperclass() instanceof ParameterizedType)) {\n            myClass = c.getSuperclass();\n        }\n\n        Type superClass = myClass.getGenericSuperclass();\n        ParameterizedType type = (ParameterizedType) superClass;\n        return type.getActualTypeArguments();\n    }","label":0}
{"text":"def find(collection, query=None, user=None, password=None,\n         host=None, port=None, database='admin', authdb=None):\n    '''\n    \n\n    '''\n    conn = _connect(user, password, host, port, database, authdb)\n    if not conn:\n        return 'Failed to connect to mongo database'\n\n    try:\n        query = _to_dict(query)\n    except Exception as err:\n        return err\n\n    try:\n        log.info(\"Searching for %r in %s\", query, collection)\n        mdb = pymongo.database.Database(conn, database)\n        col = getattr(mdb, collection)\n        ret = col.find(query)\n        return list(ret)\n    except pymongo.errors.PyMongoError as err:\n        log.error(\"Searching objects failed with error: %s\", err)\n        return err","label":0}
{"text":"private static void checkValueInPossibilities(Object val, IConfigKey configKey) {\n\t\tif (val != null && configKey.getPossibleValues() != null && !configKey.getPossibleValues().contains(val)) {\n\t\t\tthrow new RuntimeException(String.format(\"Invalid value for key=[%s], possibles=%s\",\n\t\t\t\tconfigKey.getKey(), configKey.getPossibleValues()));\n\t\t}\n\t}","label":0}
{"text":"def submit(self, value):\n    \"\"\"\"\"\"\n    # Add a batch dimension if necessary.\n    if value.shape.ndims == self._sum.shape.ndims:\n      value = value[None, ...]\n    return tf.group(\n        self._sum.assign_add(tf.reduce_sum(value, 0)),\n        self._count.assign_add(tf.shape(value)[0]))","label":0}
{"text":"def in_dest_dir(*paths)\n      paths.reduce(dest) do |base, path|\n        Bunto.sanitized_path(base, path)\n      end\n    end","label":0}
{"text":"func (t *Token) Verify(verifyOpts VerifyOptions) error {\n\t\/\/ Verify that the Issuer claim is a trusted authority.\n\tif !contains(verifyOpts.TrustedIssuers, t.Claims.Issuer) {\n\t\tlog.Infof(\"token from untrusted issuer: %q\", t.Claims.Issuer)\n\t\treturn ErrInvalidToken\n\t}\n\n\t\/\/ Verify that the Audience claim is allowed.\n\tif !contains(verifyOpts.AcceptedAudiences, t.Claims.Audience) {\n\t\tlog.Infof(\"token intended for another audience: %q\", t.Claims.Audience)\n\t\treturn ErrInvalidToken\n\t}\n\n\t\/\/ Verify that the token is currently usable and not expired.\n\tcurrentTime := time.Now()\n\n\tExpWithLeeway := time.Unix(t.Claims.Expiration, 0).Add(Leeway)\n\tif currentTime.After(ExpWithLeeway) {\n\t\tlog.Infof(\"token not to be used after %s - currently %s\", ExpWithLeeway, currentTime)\n\t\treturn ErrInvalidToken\n\t}\n\n\tNotBeforeWithLeeway := time.Unix(t.Claims.NotBefore, 0).Add(-Leeway)\n\tif currentTime.Before(NotBeforeWithLeeway) {\n\t\tlog.Infof(\"token not to be used before %s - currently %s\", NotBeforeWithLeeway, currentTime)\n\t\treturn ErrInvalidToken\n\t}\n\n\t\/\/ Verify the token signature.\n\tif len(t.Signature) == 0 {\n\t\tlog.Info(\"token has no signature\")\n\t\treturn ErrInvalidToken\n\t}\n\n\t\/\/ Verify that the signing key is trusted.\n\tsigningKey, err := t.VerifySigningKey(verifyOpts)\n\tif err != nil {\n\t\tlog.Info(err)\n\t\treturn ErrInvalidToken\n\t}\n\n\t\/\/ Finally, verify the signature of the token using the key which signed it.\n\tif err := signingKey.Verify(strings.NewReader(t.Raw), t.Header.SigningAlg, t.Signature); err != nil {\n\t\tlog.Infof(\"unable to verify token signature: %s\", err)\n\t\treturn ErrInvalidToken\n\t}\n\n\treturn nil\n}","label":0}
{"text":"func (k *Keyring) Zeroize(keysToo bool) {\n\tif k == nil {\n\t\treturn\n\t}\n\tif k.masterKey != nil {\n\t\tmemzero(k.masterKey)\n\t}\n\tif !keysToo || k.keys == nil {\n\t\treturn\n\t}\n\tfor _, key := range k.keys {\n\t\tmemzero(key.Value)\n\t}\n}","label":0}
{"text":"function(evt) {\n        var layer = evt.layer;\n        if (layer instanceof OpenLayers.Layer.Grid) {\n            this.clearTileQueue({object: layer});\n            if (layer.events) {\n                layer.events.un({\n                    addtile: this.addTile,\n                    retile: this.clearTileQueue,\n                    scope: this\n                });\n            }\n            if (layer.grid) {\n                var i, j, tile;\n                for (i=layer.grid.length-1; i>=0; --i) {\n                    for (j=layer.grid[i].length-1; j>=0; --j) {\n                        tile = layer.grid[i][j];\n                        this.unloadTile({object: tile});\n                    }\n                }\n            }\n        }\n    }","label":0}
{"text":"public XFeatureCall createReferenceToThis() {\n\t\tfinal XExpression expr = getXExpression();\n\t\tXtendTypeDeclaration type = EcoreUtil2.getContainerOfType(expr, XtendTypeDeclaration.class);\n\t\tJvmType jvmObject = getAssociatedElement(JvmType.class, type, expr.eResource());\n\t\tfinal XFeatureCall thisFeature = XbaseFactory.eINSTANCE.createXFeatureCall();\n\t\tthisFeature.setFeature(jvmObject);\n\t\treturn thisFeature;\n\t}","label":0}
{"text":"function(name, value) {\n    var header = { raw: value };\n    this.headers[Utils.headerize(name)] = [header];\n  }","label":0}
{"text":"public function symbols($currencies = null)\n    {\n        if (func_num_args() and !is_array(func_get_args()[0])) {\n            $currencies = func_get_args();\n        }\n\n        $this->symbols = $currencies;\n\n        return $this;\n    }","label":0}
{"text":"private void validateName(String name) throws DDFException {\n    Boolean isNameExisted;\n    try {\n      this.getManager().getDDFByName(name);\n      isNameExisted = true;\n    } catch (DDFException e) {\n      isNameExisted = false;\n    }\n    if(isNameExisted) {\n      throw new DDFException(String.format(\"DDF with name %s already exists\", name));\n    }\n\n    Pattern p = Pattern.compile(\"^[a-zA-Z0-9_-]*$\");\n    Matcher m = p.matcher(name);\n    if(!m.find()) {\n      throw new DDFException(String.format(\"Invalid name %s, only allow alphanumeric (uppercase and lowercase a-z, \" +\n          \"numbers 0-9) and dash (\\\"-\\\") and underscore (\\\"_\\\")\", name));\n    }\n  }","label":0}
{"text":"public List<FlowEvent> getFlowEvents(FlowKey flowKey) throws IOException {\n    byte[] startKey =\n        Bytes.add(flowKeyConverter.toBytes(flowKey), Constants.SEP_BYTES);\n    Scan scan = new Scan(startKey);\n    scan.setFilter(new WhileMatchFilter(new PrefixFilter(startKey)));\n\n    List<FlowEvent> results = new ArrayList<FlowEvent>();\n    ResultScanner scanner = null;\n    Table eventTable = null;\n    try {\n      eventTable = hbaseConnection\n          .getTable(TableName.valueOf(Constants.FLOW_EVENT_TABLE));\n      scanner = eventTable.getScanner(scan);\n      for (Result r : scanner) {\n        FlowEvent event = createEventFromResult(r);\n        if (event != null) {\n          results.add(event);\n        }\n      }\n    } finally {\n      try {\n        if (scanner != null) {\n          scanner.close();\n        }\n      } finally {\n        if (eventTable != null) {\n          eventTable.close();\n        }\n      }\n    }\n    return results;\n  }","label":0}
{"text":"func readCommandsFromSpecFile(specfile string) ([]string, error) {\n\n\tspec, e := ioutil.ReadFile(specfile)\n\tif e != nil {\n\t\treturn nil, e\n\t}\n\tslen := len(spec)\n\tif spec[slen-1] == 0x0a {\n\t\tspec = spec[:slen-1]\n\t}\n\tcommands := strings.Split(string(spec), \"\\n\")\n\n\treturn commands, nil\n}","label":0}
{"text":"private static void calculateDifferences(ModelDiff diff) {\n        Class<?> modelClass = diff.getBefore().getClass();\n        for (Field field : modelClass.getDeclaredFields()) {\n            if (field.getName().equals(ModelUtils.MODEL_TAIL_FIELD_NAME)) {\n                continue;\n            }\n            try {\n                Object before = FieldUtils.readField(field, diff.getBefore(), true);\n                Object after = FieldUtils.readField(field, diff.getAfter(), true);\n                if (!Objects.equal(before, after)) {\n                    diff.addDifference(field, before, after);\n                }\n            } catch (IllegalAccessException e) {\n                LOGGER.warn(\"Skipped field '{}' because of illegal access to it\", field.getName(), e);\n            }\n        }\n    }","label":0}
{"text":"@Override\r\n\tpublic void write(final OutputStream output) throws IOException\r\n\t{\r\n\t\tinitialize();\r\n\t\tif (content == null)\r\n\t\t{\r\n\t\t\tcontent = new byte[0];\r\n\t\t}\r\n\t\toutput.write(content, 0, content.length);\r\n\t\toutput.flush();\r\n\t}","label":0}
{"text":"def get_mapper_by_content_type(self, content_type):\n        \n\n        content_type = util.strip_charset(content_type)\n        return self._get_mapper(content_type)","label":0}
{"text":"func (s *ListStackInstancesInput) SetStackInstanceAccount(v string) *ListStackInstancesInput {\n\ts.StackInstanceAccount = &v\n\treturn s\n}","label":0}
{"text":"public static void main(String [] args){\r\n\t\tdisplayCopyright();        \r\n        if (!checkArgs(args)) {\r\n            displayHelp();\r\n            return;\r\n        }\r\n        \r\n      \/\/get model dir\r\n        String modelDir = args[1];\r\n        CRFSegmenter segmenter = new CRFSegmenter(modelDir);\r\n        \r\n      \/\/tagging\r\n        try {\r\n        \tSystem.out.println(args[2]);\r\n\t        if (args[2].equalsIgnoreCase(\"-inputfile\")){\r\n\t        \tSystem.out.println(args[3]);\r\n\t        \tFile inputFile = new File(args[3]);\r\n\t        \tBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(\r\n\t        \t\t\tnew FileOutputStream(inputFile.getPath() + \".wseg\"), \"UTF-8\"));\r\n\t        \t\r\n\t        \tString result = segmenter.segmenting(inputFile);\r\n\t        \t\r\n\t        \twriter.write(result);\r\n\t        \twriter.close();\r\n\t        }\r\n\t        else{ \/\/input dir\r\n\t        \tString inputDir = args[3];\r\n\t        \t if (inputDir.endsWith(File.separator)) {\r\n\t\t                inputDir = inputDir.substring(0, inputDir.length() - 1);\r\n\t\t            }\r\n\t\t            \r\n\t\t            File dir = new File(inputDir);\r\n\t\t            String[] children = dir.list(new FilenameFilter() {\r\n\t\t                public boolean accept(File dir, String name) {\r\n\t\t                    return name.endsWith(\".tkn\");\r\n\t\t                }\r\n\t\t            });    \r\n\t\t            \r\n\t\t            for (int i = 0; i < children.length; i++) {\r\n\t\t            \tSystem.out.println(\"Segmenting \" + children[i]);\r\n\t\t            \tString filename = inputDir + File.separator + children[i];\r\n\t\t\t                if ((new File(filename)).isDirectory()) {\r\n\t\t\t                    continue;\r\n\t\t\t            }\r\n\t\t\t                \r\n\t\t\t            BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(\r\n\t\t\t\t        \t\t\tnew FileOutputStream(filename + \".wseg\"), \"UTF-8\"));\r\n\t\t\t             \r\n\t\t\t            writer.write(segmenter.segmenting(new File(filename)));\r\n\t\t\t             \r\n\t\t\t            writer.close();\r\n\t\t            }\r\n\t        }\r\n        }\r\n        catch (Exception e){\r\n        \tSystem.out.println(\"Error while segmenting\");\r\n        \tSystem.out.println(e.getMessage());\r\n        \te.printStackTrace();\r\n        }\r\n\t}","label":0}
{"text":"def norm_attr(self):\n        \n        if not self.HAS_ATTR:\n            return\n\n        self.HAS_ATTR = False\n        self.emit('call', 'COPY_ATTR', 0)\n        backend.REQUIRES.add('copy_attr.asm')","label":0}
{"text":"func go_connection_error(spSession unsafe.Pointer, spErr C.sp_error) {\n\tsessionCall(spSession, func(s *Session) {\n\t\ts.cbConnectionError(spError(spErr))\n\t})\n}","label":0}
{"text":"public MetricBuilder withMinValue(Number value, String prettyPrintFormat) {\n        min = new MetricValue(value.toString(), prettyPrintFormat);            \n        return this;\n    }","label":0}
{"text":"func (e EntriesBySize) Print(to io.Writer) (int, error) {\n\tif len(e) == 0 {\n\t\treturn 0, nil\n\t}\n\n\textensions := make([]string, 0, len(e))\n\tsizes := make([]string, 0, len(e))\n\tstats := make([]string, 0, len(e))\n\tpercentages := make([]string, 0, len(e))\n\n\tfor _, entry := range e {\n\t\tbytesAbove := uint64(entry.BytesAbove)\n\t\tabove := entry.TotalAbove\n\t\ttotal := entry.Total\n\t\tpercentAbove := 100 * (float64(above) \/ float64(total))\n\n\t\tvar size string\n\t\tif migrateInfoUnit > 0 {\n\t\t\tsize = humanize.FormatBytesUnit(bytesAbove, migrateInfoUnit)\n\t\t} else {\n\t\t\tsize = humanize.FormatBytes(bytesAbove)\n\t\t}\n\n\t\tstat := fmt.Sprintf(\"%d\/%d files(s)\",\n\t\t\tabove, total)\n\n\t\tpercentage := fmt.Sprintf(\"%.0f%%\", percentAbove)\n\n\t\textensions = append(extensions, entry.Qualifier)\n\t\tsizes = append(sizes, size)\n\t\tstats = append(stats, stat)\n\t\tpercentages = append(percentages, percentage)\n\t}\n\n\textensions = tools.Ljust(extensions)\n\tsizes = tools.Ljust(sizes)\n\tstats = tools.Rjust(stats)\n\tpercentages = tools.Rjust(percentages)\n\n\toutput := make([]string, 0, len(e))\n\tfor i := 0; i < len(e); i++ {\n\t\textension := extensions[i]\n\t\tsize := sizes[i]\n\t\tstat := stats[i]\n\t\tpercentage := percentages[i]\n\n\t\tline := strings.Join([]string{extension, size, stat, percentage}, \"\\t\")\n\n\t\toutput = append(output, line)\n\t}\n\n\treturn fmt.Fprintln(to, strings.Join(output, \"\\n\"))\n}","label":0}
{"text":"public function shortName()\n    {\n        if ($this->isAce()) {\n            return self::ACE_SYMBOL;\n        }\n        if ($this->isKing()) {\n            return self::KING_SYMBOL;\n        }\n        if ($this->isQueen()) {\n            return self::QUEEN_SYMBOL;\n        }\n        if ($this->isJack()) {\n            return self::JACK_SYMBOL;\n        }\n        if ($this->value() === 10) {\n            return self::TEN_SYMBOL;\n        }\n\n        return (string) $this->value();\n    }","label":0}
{"text":"def cdsthreads(self):\n        \n        # Create and start threads\n        for i in range(self.cpus):\n            # Send the threads to the appropriate destination function\n            threads = Thread(target=self.cds, args=())\n            # Set the daemon to true - something to do with thread management\n            threads.setDaemon(True)\n            # Start the threading\n            threads.start()\n        for sample in self.metadata.samples:\n            #\n            sample[self.analysistype].corepresence = dict()\n            self.cdsqueue.put(sample)\n        self.cdsqueue.join()","label":0}
{"text":"static MinimizedCondition fromConditionNode(Node n) {\n    checkState(n.getParent() != null);\n    switch (n.getToken()) {\n      case NOT:\n      case AND:\n      case OR:\n      case HOOK:\n      case COMMA:\n        return computeMinimizedCondition(n);\n      default:\n        return unoptimized(n);\n    }\n  }","label":0}
{"text":"func SplitPath(volumePath string) (string, string, error) {\n\t\/\/ Validate the path\n\trootDir := filepath.Clean(volumePath)\n\tif !filepath.IsAbs(rootDir) {\n\t\t\/\/ must be absolute\n\t\treturn \"\", \"\", ErrPathIsNotAbs\n\t}\n\tif _, ok := driversByRoot[rootDir]; ok {\n\t\treturn volumePath, \"\", nil\n\t}\n\tfor {\n\t\trootDir = filepath.Dir(rootDir)\n\t\tif _, ok := driversByRoot[rootDir]; !ok {\n\t\t\t\/\/ continue if the path is not '\/'\n\t\t\tif rootDir == \"\/\" {\n\t\t\t\treturn \"\", \"\", ErrDriverNotInit\n\t\t\t}\n\t\t} else {\n\t\t\t\/\/ get the name of the volume\n\t\t\tif volumeName, err := filepath.Rel(rootDir, volumePath); err != nil {\n\t\t\t\tglog.Errorf(\"Unexpected error while looking up relpath of %s from %s: %s\", volumePath, rootDir, err)\n\t\t\t\treturn \"\", \"\", err\n\t\t\t} else {\n\t\t\t\treturn rootDir, volumeName, nil\n\t\t\t}\n\t\t}\n\t}\n}","label":0}
{"text":"func (formats Formats) GetBySuffix(suffix string) (f Format, found bool) {\n\tfor _, ff := range formats {\n\t\tif strings.EqualFold(suffix, ff.MediaType.Suffix()) {\n\t\t\tif found {\n\t\t\t\t\/\/ ambiguous\n\t\t\t\tfound = false\n\t\t\t\treturn\n\t\t\t}\n\t\t\tf = ff\n\t\t\tfound = true\n\t\t}\n\t}\n\treturn\n}","label":0}
{"text":"protected function execute(InputInterface $input, OutputInterface $output)\n\t{\n\t\t$output->writeln([ \/\/ outputs multiple lines to the console (adding \"\\n\" at the end of each line)\n\t\t\t'MyAdmin DocBlock Parser',\n\t\t\t'=======================',\n\t\t\t''\n\t\t\t\t\t\t ]);\n\t\t$output->writeln('<info>foo<\/info>'); \/\/ green text\n\t\t$output->writeln('<comment>foo<\/comment>'); \/\/ yellow text\n\t\t$output->writeln('<question>foo<\/question>'); \/\/ black text on a cyan background\n\t\t$output->writeln('<error>foo<\/error>'); \/\/ white text on a red background\n\t\t$formatter = $this->getHelper('formatter');\n\t\t\/\/ Section - [SomeSection] Here is some message related to that section\n\t\t$formattedLine = $formatter->formatSection('SomeSection', 'Here is some message related to that section');\n\t\t$output->writeln($formattedLine);\n\t\t\/\/ Error Block\n\t\t$errorMessages = ['Error!', 'Something went wrong'];\n\t\t$formattedBlock = $formatter->formatBlock($errorMessages, 'error');\n\t\t$output->writeln($formattedBlock);\n\n\t\t$paths = ['include', 'scripts'];\n\t\t$calls = [\n\t\t\t'getFiles'      => ['getHash', 'getSource', 'getNamespaces', 'getIncludes', 'getConstants', 'getFunctions', 'getInterfaces', 'getTraits', 'getPath', 'getDocBlock', 'getName'],\n\t\t\t'getNamespaces' => ['getClasses', 'getConstants', 'getFunctions', 'getInterfaces', 'getTraits', 'getFqsen', 'getName'],\n\t\t\t'getClasses'    => ['isFinal', 'isAbstract', 'getParent', 'getInterfaces', 'getConstants', 'getMethods', 'getProperties', 'getUsedTraits', 'getFqsen', 'getName', 'getDocBlock'],\n\t\t\t'getMethods'    => ['isAbstract', 'isFinal', 'isStatic', 'getVisibility', 'getArguments', 'getFqsen', 'getName', 'getDocBlock'],\n\t\t\t'getProperties' => ['isStatic', 'getDefault', 'getTypes', 'getVisibility', 'getFqsen', 'getName', 'getDocBlock'],\n\t\t\t'getTraits'     => ['getMethods', 'getProperties', 'getUsedTraits', 'getFqsen', 'getName', 'getDocBlock'],\n\t\t\t'getInterfaces' => ['getParents', 'getConstants', 'getMethods', 'getFqsen', 'getName', 'getDocBlock'],\n\t\t\t'getArguments'  => ['isByReference', 'isVariadic', 'getName', 'getTypes', 'getDefault'],\n\t\t\t'getFunctions'  => ['getArguments', 'getFqsen', 'getName', 'getDocBlock'],\n\t\t\t'getConstants'  => ['getValue', 'getFqsen', 'getName', 'getDocBlock']\n\t\t];\n\t\t\/**\n\t\t * @param $parent\n\t\t * @param $call\n\t\t * @param $calls\n\t\t * @return array\n\t\t *\/\n\t\tfunction do_call($parent, $call, $calls)\n\t\t{\n\t\t\techo \"Running \\$parent->$call();\".PHP_EOL;\n\t\t\t$response = $parent->$call();\n\t\t\tif (isset($calls[$call])) {\n\t\t\t\t$out = [];\n\t\t\t\t\/** @var \\phpDocumentor\\Reflection\\Php\\File $file *\/\n\t\t\t\tforeach ($response as $idx => $child) {\n\t\t\t\t\tforeach ($calls[$call] as $childCall) {\n\t\t\t\t\t\t\/** @var \\phpDocumentor\\Reflection\\Php\\File $file *\/\n\t\t\t\t\t\t$out[$idx] = $childResponse = $child->$childCall();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\techo \"Running \\$child->$childCall();\".PHP_EOL;\n\t\t\t\treturn $out;\n\t\t\t} else {\n\t\t\t\treturn $response;\n\t\t\t}\n\t\t}\n\n\t\t$projectFactory = \\phpDocumentor\\Reflection\\Php\\ProjectFactory::createInstance();\n\t\t$files = [];\n\t\t$map = [];\n\t\tforeach ($paths as $path) {\n\t\t\t$files[] = new \\phpDocumentor\\Reflection\\File\\LocalFile(__DIR__.'\/..\/..\/..\/..\/..\/'.$path);\n\t\t}\n\t\t\/** @var Project $project *\/\n\t\t$project = $projectFactory->create('MyProject', $files);\n\t\t$map = do_call($project, 'getFiles', $calls);\n\t\tfile_put_contents(__DIR__.'\/..\/..\/..\/..\/..\/include\/config\/parse.serial', serialize($map));\n\t\tfile_put_contents(__DIR__.'\/..\/..\/..\/..\/..\/include\/config\/parse.json', json_encode($map, JSON_PRETTY_PRINT));\n\t\t\/** @var \\phpDocumentor\\Reflection\\Php\\Class_ $class *\/\n\t\t\/* foreach ($file->getClasses() as $class)\n\t\t\techo '- ' . $class->getFqsen() . PHP_EOL;\n\t\t} *\/\n\t\t\/** @var \\phpDocumentor\\Reflection\\Php\\Function_ $function *\/\n\t\t\/* foreach ($file->getFunctions() as $function) {\n\t\t\techo '- ' . $function->getFqsen() . PHP_EOL;\n\t\t} *\/\n\n\t\t\/** DocBlock \/ Reflection Parsing\n\t\t * Reconstituting a docblock - https:\/\/github.com\/phpDocumentor\/ReflectionDocBlock\/blob\/master\/examples\/03-reconstituting-a-docblock.php\n\t\t * Adding Your own Tag - https:\/\/github.com\/phpDocumentor\/ReflectionDocBlock\/blob\/master\/examples\/04-adding-your-own-tag.php\n\t\t *\/\n\n\t\t\/*\n\t\t$class = new ReflectionClass('MyClass');\n\t\t$phpdoc = new \\phpDocumentor\\Reflection\\DocBlock($class);\n\n\t\tvar_dump($phpdoc->getShortDescription());\n\t\tvar_dump($phpdoc->getLongDescription()->getContents());\n\t\tvar_dump($phpdoc->getTags());\n\t\tvar_dump($phpdoc->hasTag('author'));\n\t\tvar_dump($phpdoc->hasTag('copyright'));\n\t\t\/\/ But we can also grab all tags of a specific type, such as `see`\n\t\t$seeTags = $docblock->getTagsByName('see');\n\n\t\t$reflector = new ReflectionClass('Example');\n\t\t\/\/ to get the Class DocBlock\n\t\techo $reflector->getDocComment();\n\t\t\/\/ to get the Method DocBlock\n\t\t$reflector->getMethod('fn')->getDocComment();\n\t\t*\/\n\t}","label":0}
{"text":"func scanTags(buf []byte, i int, indices []int) (int, int, []int, error) {\n\tvar (\n\t\terr    error\n\t\tcommas int\n\t\tstate  = tagKeyState\n\t)\n\n\tfor {\n\t\tswitch state {\n\t\tcase tagKeyState:\n\t\t\t\/\/ Grow our indices slice if we have too many tags.\n\t\t\tif commas >= len(indices) {\n\t\t\t\tnewIndics := make([]int, cap(indices)*2)\n\t\t\t\tcopy(newIndics, indices)\n\t\t\t\tindices = newIndics\n\t\t\t}\n\t\t\tindices[commas] = i\n\t\t\tcommas++\n\n\t\t\ti, err = scanTagsKey(buf, i)\n\t\t\tstate = tagValueState \/\/ tag value always follows a tag key\n\t\tcase tagValueState:\n\t\t\tstate, i, err = scanTagsValue(buf, i)\n\t\tcase fieldsState:\n\t\t\tindices[commas] = i + 1\n\t\t\treturn i, commas, indices, nil\n\t\t}\n\n\t\tif err != nil {\n\t\t\treturn i, commas, indices, err\n\t\t}\n\t}\n}","label":0}
{"text":"public MapWithProtoValuesFluentAssertion<M> usingDoubleToleranceForFieldDescriptorsForValues(\n      double tolerance, Iterable<FieldDescriptor> fieldDescriptors) {\n    return usingConfig(config.usingDoubleToleranceForFieldDescriptors(tolerance, fieldDescriptors));\n  }","label":0}
{"text":"public static boolean isLafAqua() {\n        ensureValidCache();\n        if (cachedIsLafAqua == null) {\n            cachedIsLafAqua = Boolean.valueOf(computeIsLafAqua());\n        }\n        return cachedIsLafAqua.booleanValue();\n    }","label":0}
{"text":"public function GetSQL($criteria)\r\n\t{\r\n\t\t\/\/ start building the sql statement\r\n\t\t$sql = \"select \" . $this->GetColumnNames() . \"\";\r\n\r\n\t\t$sql .= $this->GetTableJoinSQL($criteria);\t\t\r\n\r\n\t\t$sql .= $criteria->GetJoin();\r\n\t\t\t\t\r\n\t\t$sql .= $this->GetWhereSQL($criteria);\r\n\t\t\r\n\t\t$sql .= $criteria->GetOrder();\r\n\t\t\r\n\t\t$criteria->Reset();\r\n\t\t\r\n\t\treturn $sql;\r\n\t}","label":0}
{"text":"@XmlElementDecl(namespace = \"http:\/\/www.ibm.com\/websphere\/wim\", name = \"departmentNumber\")\n    public JAXBElement<String> createDepartmentNumber(String value) {\n        return new JAXBElement<String>(_DepartmentNumber_QNAME, String.class, null, value);\n    }","label":0}
{"text":"function(bindingString, data, children, callback, containerless) {\n            container = document.createElement(\"div\");\n            if (!containerless) {\n                container.setAttribute(\"data-bind\", bindingString);\n                container.innerHTML = children || \"\";\n            }\n            else {\n                var opening = document.createComment(\"ko \" + bindingString),\n                   closing = document.createComment(\"\/ko\"),\n                    dummy = document.createTextNode(\"   \\n  \");\n\n                container.appendChild(opening);\n                container.appendChild(dummy);\n                container.appendChild(closing);\n            }\n\n            sandbox.appendChild(container);\n\n            ko.cleanNode(sandbox);\n\n            ko.applyBindings(data, sandbox);\n\n            setTimeout(callback, 50);\n        }","label":0}
{"text":"@Override\n    public XMLValidationSchema createSchema(InputStream in, String encoding,\n                                           String publicId, String systemId)\n        throws XMLStreamException\n    {\n        InputSource src = new InputSource(in);\n        src.setEncoding(encoding);\n        src.setPublicId(publicId);\n        src.setSystemId(systemId);\n        return loadSchema(src, systemId);\n    }","label":0}
{"text":"func (c *Command) InitDefaultHelpFlag() {\n\tc.mergePersistentFlags()\n\tif c.Flags().Lookup(\"help\") == nil {\n\t\tusage := \"help for \"\n\t\tif c.Name() == \"\" {\n\t\t\tusage += \"this command\"\n\t\t} else {\n\t\t\tusage += c.Name()\n\t\t}\n\t\tc.Flags().BoolP(\"help\", \"h\", false, usage)\n\t}\n}","label":0}
{"text":"public function getCharacterSkillQueue(int $character_id): Collection\n    {\n\n        return CharacterSkillQueue::where('characterID', $character_id)\n            ->where('queue_position', '>', 0)\n            ->orderBy('queue_position')\n            ->get();\n\n    }","label":0}
{"text":"public function encodeRot13($string)\n    {\n        $rot13encryptedString = str_replace('\"', '\\\"', str_rot13($string));\n\n        $uniqueId = uniqid('sproutencodeemail-', true);\n        $countId = $this->count++;\n        $ajaxId = Craft::$app->getRequest()->isAjax ? '-ajax' : '';\n\n        $encodeId = $uniqueId.'-'.$countId.$ajaxId;\n\n        $encodedString = '\n<span id=\"'.$encodeId.'\"><\/span>\n<script type=\"text\/javascript\">\n    var sproutencodeemailRot13String = \"'.$rot13encryptedString.'\";\n    var sproutencodeemailRot13 = sproutencodeemailRot13String.replace(\/[a-zA-Z]\/g, function(c){return String.fromCharCode((c<=\"Z\"?90:122)>=(c=c.charCodeAt(0)+13)?c:c-26);});\n    document.getElementById(\"'.$encodeId.'\").innerHTML =\n    sproutencodeemailRot13;\n<\/script>';\n\n        return $encodedString;\n    }","label":0}
{"text":"func (s *UpdateMaintenanceWindowInput) SetSchedule(v string) *UpdateMaintenanceWindowInput {\n\ts.Schedule = &v\n\treturn s\n}","label":0}
{"text":"def read_symbol\n      logger.debug \"  read symbol\"\n      skip_whitespace\n      r = \"\"\n      while !empty? && (c = text[position]) =~ \/[-a-zA-Z_0-9]\/\n        r << c\n        increase\n      end\n      s = STRING_TO_TOKEN[r]\n      s = r.to_sym unless s\n      s = true if s == :true\n      s = false if s == :false\n      logger.debug \"  resulting symbol: #{s}\"\n      s\n    end","label":0}
{"text":"public function inflect(string $string, $pluralize = 0) : string\n    {\n        return ($pluralize) ? Inflect::pluralize($string) : Inflect::singularize($string);\n    }","label":0}
{"text":"func RegisterService(m ResourceMetadata) error {\n\tdata, err := json.Marshal(m)\n\tif err != nil {\n\t\treturn errors.New(\"Error marshaling ResourceMetadata\")\n\t}\n\n\tresponse, err := http.Post(\n\t\tRegistryURL, ContentTypeJSON, bytes.NewBuffer(data),\n\t)\n\tif err != nil {\n\t\treturn errors.New(\"Error posting ResourceMetadata to registerService\")\n\t}\n\n\tif response.Body == nil {\n\t\treturn errors.New(\"No JSON body returned from registerService\")\n\t}\n\n\tb, err := ioutil.ReadAll(response.Body)\n\tif err != nil {\n\t\treturn errors.New(\"Error reading JSON body returned from registerService\")\n\t}\n\n\t\/\/ Throw 400 if we cannot unmarshal the body as a valid InputMsg.\n\tvar rm RegisterServiceMsg\n\tif err := json.Unmarshal(b, &rm); err != nil {\n\t\treturn errors.New(\"Error unmarshaling RegisterServiceMsg\")\n\t}\n\tlog.Println(\"RegisterService received resourceId=\" + rm.ResourceID)\n\n\treturn nil\n}","label":0}
{"text":"private static String getClientTimeZone() {\n        return ZonedDateTime.now(SPDateTimeUtil.getTimeZoneId(SPDateTimeUtil.getBrowserTimeZone())).getOffset().getId()\n                .replaceAll(\"Z\", \"+00:00\");\n    }","label":0}
{"text":"def to_hash\n      _copy = {}\n      @table.each { |key, value| _copy[key] = value.is_a?(HashStruct) ? value.to_hash : value }\n      _copy\n    end","label":0}
{"text":"def _get_api_sig(args):\n    \n    tmp_sig = api_secret\n    for i in args:\n        tmp_sig = tmp_sig + i[0] + i[1]\n    api_sig = hashlib.md5(tmp_sig.encode('utf-8')).hexdigest()\n    return 'api_sig', api_sig","label":0}
{"text":"def process_result\n      require 'sass'\n\n      if @options[:recursive]\n        process_directory\n        return\n      end\n\n      super\n      input = @options[:input]\n      if File.directory?(input)\n        raise \"Error: '#{input.path}' is a directory (did you mean to use --recursive?)\"\n      end\n      output = @options[:output]\n      output = input if @options[:in_place]\n      process_file(input, output)\n    end","label":0}
{"text":"func (e ReadyError) Error() string {\n\treturn fmt.Sprintf(\n\t\t\"failed waiting for instance (%s) to be ready, reason was: %s\",\n\t\te.InstanceID,\n\t\te.StateReason,\n\t)\n}","label":0}
{"text":"@Trivial\n    public static double relativeSeconds(long relativePointA, long relativePointB) {\n        long diff = relativePointB - relativePointA;\n        double seconds = toSeconds(diff);\n        return seconds;\n    }","label":0}
{"text":"public function radioElement($name, $label = null, $value = null, $checked = null, $inline = false, array $options = [])\n    {\n        $label = $label === false ? null : $this->getLabelTitle($label, $name);\n\n        $value = is_null($value) ? $label : $value;\n\n        $labelOptions = $inline ? ['class' => 'radio-inline'] : [];\n\n        $inputElement = $this->form->radio($name, $value, $checked, $options);\n        $labelElement = '<label ' . $this->html->attributes($labelOptions) . '>' . $inputElement . $label . '<\/label>';\n\n        return $inline ? $labelElement : '<div class=\"radio\">' . $labelElement . '<\/div>';\n    }","label":0}
{"text":"public function findOne($criteria = null, $projection = null) {\n\n        $items = $this->find($criteria, $projection)->limit(1)->toArray();\n\n        return isset($items[0]) ? $items[0]:null;\n    }","label":0}
{"text":"public static function removeDupsAndCount($arrDev)\n    {\n        $result = array();\n        foreach ($arrDev as $dev) {\n            if (count($result) === 0) {\n                array_push($result, $dev);\n            } else {\n                $found = false;\n                foreach ($result as $tmp) {\n                    if ($dev->equals($tmp)) {\n                        $tmp->setCount($tmp->getCount() + 1);\n                        $found = true;\n                        break;\n                    }\n                }\n                if (!$found) {\n                    array_push($result, $dev);\n                }\n            }\n        }\n\n        return $result;\n    }","label":0}
{"text":"public static List<String> transformText(Context context, String... permissions) {\n        return transformText(context, Arrays.asList(permissions));\n    }","label":0}
{"text":"public void setVSChar(Integer newVSChar) {\n\t\tInteger oldVSChar = vsChar;\n\t\tvsChar = newVSChar;\n\t\tif (eNotificationRequired())\n\t\t\teNotify(new ENotificationImpl(this, Notification.SET, AfplibPackage.CPC__VS_CHAR, oldVSChar, vsChar));\n\t}","label":0}
{"text":"protected void writeTimedOut(ChannelHandlerContext ctx) throws Exception {\n        if (!closed) {\n            ctx.fireExceptionCaught(WriteTimeoutException.INSTANCE);\n            ctx.close();\n            closed = true;\n        }\n    }","label":0}
{"text":"public void init(Record record, String strName, int iDataLength, String strDesc, Object strDefault)\n    {\n        m_recVendor = null;\n        m_recProfile = null;\n        VENDOR_CONTACT_TYPE_ID = \"\";\n        PROFILE_CONTACT_TYPE_ID = \"\";\n        super.init(record, strName, iDataLength, strDesc, strDefault);\n    }","label":0}
{"text":"protected function getPackages($type)\n    {\n        $packages = $this->packages->all();\n\n        if (! is_null($type)) {\n            $packages = $packages->where('type', $type);\n        }\n\n        $results = array();\n\n        foreach ($packages->sortBy('basename') as $package) {\n            $results[] = $this->getPackageInformation($package);\n        }\n\n        return array_filter($results);\n    }","label":0}
{"text":"def add_locale(locale, strings)\n      if locale.to_s != '' && strings.is_a?(Hash) && strings.length > 0\n        _add_locale(locale, strings)\n        true\n      else\n        false\n      end\n    end","label":0}
{"text":"def render_children\n      children = ''\n\n      list_item.children.each do |child|\n        children += self.class.render(child, opts)\n      end\n\n      children\n    end","label":0}
{"text":"function getModelInfo (modelName) {\n    debug('getModelInfo: ' + modelName)\n\n    \/\/ Get the model\n    const model = Meta.app.models[ modelName ]\n\n    \/\/ Create the base return object\n    const result = {\n      id: model.definition.name,\n      name: model.definition.name,\n      properties: formatProperties(model.definition.properties)\n    }\n\n    \/\/ Get the following keys from the settings object, if they are set\n    const keys = {\n      'acls': [],\n      'base': '',\n      'description': '',\n      'hidden': [],\n      'idInjection': true,\n      'methods': {},\n      'mixins': {},\n      'persistUndefinedAsNull': false,\n      'plural': '',\n      'relations': {},\n      'strict': false,\n      'validations': [],\n    }\n\n    \/\/ Loop through the keys and add them to the result with their value\n    Object.keys(keys).forEach(key => {\n      result[ key ] = _.get(model.definition.settings, key, keys[ key ])\n    })\n    return result\n  }","label":0}
{"text":"function resize(url, type) {\n  var img = new Image();\n  display.innerHTML = '';\n  img.onload= function () {\n    var data = resizeImage.resize(img, 200, 100, type);\n    var smallImg = new Image();\n    display.appendChild(smallImg);\n    smallImg.src = data;\n  };\n  display.appendChild(img);\n  img.src = url;\n}","label":0}
{"text":"public RequestContext renderJSONValue(final String name, final Object obj) {\n        if (renderer instanceof JsonRenderer) {\n            final JsonRenderer r = (JsonRenderer) renderer;\n\n            final JSONObject ret = r.getJSONObject();\n            ret.put(name, obj);\n        }\n\n        return this;\n    }","label":0}
{"text":"public function createPage(\n        SiteEntity $site,\n        $pageData,\n        $publishPage = false,\n        $doFlush = true\n    ) {\n        if (empty($pageData['createdByUserId'])) {\n            throw new PageException('CreatedByUserId is required to create a page.');\n        }\n        if (empty($pageData['createdReason'])) {\n            $pageData['createdReason'] = Tracking::UNKNOWN_REASON;\n        }\n        if (empty($pageData['author'])) {\n            throw new PageException('Author is required to create a page.');\n        }\n        $revision = new Revision(\n            $pageData['createdByUserId'],\n            $pageData['createdReason']\n        );\n        $revision->setAuthor($pageData['author']);\n\n        \/\/ we should not have an Id on page create\n        unset($pageData['pageId']);\n\n        $page = new PageEntity(\n            $pageData['createdByUserId'],\n            $pageData['createdReason']\n        );\n        $page->populate($pageData);\n\n        $page->setSite($site);\n\n        $this->assertCanCreateSitePage(\n            $page->getSite(),\n            $page->getName(),\n            $page->getPageType()\n        );\n\n        if (!$publishPage) {\n            $page->setStagedRevision($revision);\n        } else {\n            $page->setPublishedRevision($revision);\n        }\n\n        $page->addRevision($revision);\n\n        $this->_em->persist($revision);\n        $this->_em->persist($page);\n\n        if ($doFlush) {\n            $this->_em->flush(\n                [\n                    $revision,\n                    $page\n                ]\n            );\n        }\n\n        return $page;\n    }","label":0}
{"text":"private long getNow()\n    {\n        return Collections.max(cfs.getSSTables(), new Comparator<SSTableReader>()\n        {\n            public int compare(SSTableReader o1, SSTableReader o2)\n            {\n                return Long.compare(o1.getMaxTimestamp(), o2.getMaxTimestamp());\n            }\n        }).getMaxTimestamp();\n    }","label":0}
{"text":"func (s *EmailChannelRequest) SetFromAddress(v string) *EmailChannelRequest {\n\ts.FromAddress = &v\n\treturn s\n}","label":0}
{"text":"function buildDayTable() {\n\t\tvar html = buildDayTableHTML();\n\n\t\tif (dayTable) {\n\t\t\tdayTable.remove();\n\t\t}\n\t\tdayTable = $(html).appendTo(element);\n\n\t\tdayHead = dayTable.find('thead');\n\t\tdayHeadCells = dayHead.find('th').slice(1, -1); \/\/ exclude gutter\n\t\tdayBody = dayTable.find('tbody');\n\t\tdayBodyCells = dayBody.find('td').slice(0, -1); \/\/ exclude gutter\n\t\tdayBodyCellInners = dayBodyCells.find('> div');\n\t\tdayBodyCellContentInners = dayBodyCells.find('.fc-day-content > div');\n\n\t\tdayBodyFirstCell = dayBodyCells.eq(0);\n\t\tdayBodyFirstCellStretcher = dayBodyCellInners.eq(0);\n\t\t\n\t\tmarkFirstLast(dayHead.add(dayHead.find('tr')));\n\t\tmarkFirstLast(dayBody.add(dayBody.find('tr')));\n\n\t\t\/\/ TODO: now that we rebuild the cells every time, we should call dayRender\n\t}","label":0}
{"text":"func (r User_Customer_OpenIdConnect) RemoveApiAuthenticationKey(keyId *int) (resp bool, err error) {\n\tparams := []interface{}{\n\t\tkeyId,\n\t}\n\terr = r.Session.DoRequest(\"SoftLayer_User_Customer_OpenIdConnect\", \"removeApiAuthenticationKey\", params, &r.Options, &resp)\n\treturn\n}","label":0}
{"text":"public function setTemplateMap(array $templateMap)\n    {\n        $this->templateMap = [];\n        foreach ($templateMap as $name => $filename) {\n            $this->addTemplate($name, $filename);\n        }\n    }","label":0}
{"text":"function(oEvent) {\n\t\t\t\tvar oImage = this.byId(\"phoneImage\");\n\n\t\t\t\tif (Device.system.phone && oImage) {\n\t\t\t\t\toImage.toggleStyleClass(\"phoneHeaderImageLandscape\", oEvent.landscape);\n\t\t\t\t}\n\t\t\t}","label":0}
{"text":"protected function CommitProcessData()\n    {\n        TdbShopSearchFieldWeight::AddQueryBlock(false, null, null);\n        $sTmp = serialize($this->aTablesToProcess);\n        $aData = $this->sqlData;\n        $aData['processdata'] = $sTmp;\n        $this->LoadFromRow($aData);\n        $this->AllowEditByAll(true);\n        $this->Save();\n    }","label":0}
{"text":"def mask(x, indices):\n    \n    indices_shape = (\n        [len(indices)] if isinstance(indices, list) else indices.shape)\n    if not indices_shape[0]:\n        return np.array([])\n    elif is_sparse_vector(x) and len(indices_shape) == 1:\n        return x[0, indices].toarray()[0]\n    else:\n        return x[indices]","label":0}
{"text":"func NewPutEndpointID(ctx *middleware.Context, handler PutEndpointIDHandler) *PutEndpointID {\n\treturn &PutEndpointID{Context: ctx, Handler: handler}\n}","label":0}
{"text":"protected Component lookForComponent(String name, ObservableList<Node> components) {\n        for (int i = 0; i < components.size() && !mFindWithEqual; i++) {\n            \/\/String componentName = ComponentNamer.getInstance().getNameForComponent(components[c]);\n            Node c = components.get(i);\n            checkName(name, c);\n            if (!mFindWithEqual) {\n                if (c instanceof Parent) {\n                    Component result = lookForComponent(name, ((Parent) c).getChildrenUnmodifiable());\n                    if (result != null) {\n                        return result;\n                    }\n                }\n            }\n        }\n        return null;\n    }","label":0}
{"text":"def get_last(postid, limit=10):\n        '''\n        \n        '''\n        recs = TabPostHist.select().where(\n            TabPostHist.post_id == postid\n        ).order_by(TabPostHist.time_update.desc()).limit(limit)\n        if recs.count():\n            return recs.get()\n        return None","label":0}
{"text":"function(attributes) {\n  this.attributes = attributes;\n\n  \/\/ Pull off preserved properties from attributes\n  \/\/ --------\n\n  this.tagName = attributes.tag;\n  this.children = attributes.children || [];\n  this.text = attributes.text || \"\";\n  this.html = attributes.html;\n\n  delete attributes.children;\n  delete attributes.text;\n  delete attributes.html;\n  delete attributes.tag;\n\n  return this.render();\n}","label":0}
{"text":"protected static function _relateHasAndBelongsToMany($options) {\n        $modelA = $options['modelA'];\n        $modelB = $options['modelB'];\n        $keyA   = $options['keyA'];\n        $keyB   = $options['keyB'];\n        $ruleA  = $options['ruleA'];\n        $ruleB  = $options['ruleB'];\n        $bindingModel = !$options['bindingModel'] ? $modelA->getBindingModel($modelB) :\n            $options['bindingModel'];\n\n        \/**\n         * Warning: assumptions are made!\n         * - at this point, we assume the bindingModel has no relationships\n         *   to models other than modelA and modelB (so we don't need a rule or anything\n         *   to find the right reference in the referenceMap)\n         * - also, we assume the references can be found from the bindingModel. There will be\n         *   no trying nor catching, if the reference is not here, we just crash the heck out of it.\n         *\/\n        $referenceA = $bindingModel->getReference(get_class($modelA), $ruleA);\n        $referenceB = $bindingModel->getReference(get_class($modelB), $ruleB);\n\n        \/\/ The only place where extraFields is used: to fill fields other than the primary key\n        \/\/ references in the binding row\n        $bindingRow = $bindingModel->createRow($options['extraFields']);\n        self::_addForeignKeysToRow($bindingRow, $referenceA, $keyA);\n        self::_addForeignKeysToRow($bindingRow, $referenceB, $keyB);\n        $success = $bindingRow->save();\n\n        \/\/ Homophyllic relations can be saved bidirectionally\n        if ($options['bidirectional'] && $modelA->getName() == $modelB->getName()) {\n            $bidirectionalRow = $bindingModel->createRow($options['extraFields']);\n            self::_addForeignKeysToRow($bidirectionalRow, $referenceA, $keyB);\n            self::_addForeignKeysToRow($bidirectionalRow, $referenceB, $keyA);\n            $success = $success && $bidirectionalRow->save();\n        }\n\n        return $success;\n    }","label":0}
{"text":"public function setParameters($parameters)\n    {\n\t\t$this->parameters = [];\n\t\t\n\t\tif(!is_array($parameters)){\n\t\t\t$parameters = Helpers::convertStringToArray($parameters, '|');\n\t\t}\n        \n        foreach ($parameters as $parameter) {\n            $this->parameters[] = Helpers::eliminateDupilcates($parameter, \"\\\\\");\n        }\n    }","label":0}
{"text":"protected function renderCloseButton()\n    {\n        if ($this->closeButton !== null) {\n            $tag   = ArrayHelper::removeValue($this->closeButton, 'tag', 'a');\n            $label = ArrayHelper::removeValue($this->closeButton, 'label', '&times;');\n            if ($tag === 'button' && !isset($this->closeButton['type'])) {\n                $this->closeButton['type'] = 'button';\n            }\n            Html::addCssClass($this->closeButton, Enum::DIALOG_CLOSE);\n            return \\CHtml::tag($tag, $this->closeButton, $label);\n        } else {\n            return null;\n        }\n    }","label":0}
{"text":"function sameLength(a, b) {\n    return typeof a === typeof b &&\n      a && b &&\n      a.length === b.length;\n  }","label":0}
{"text":"func (l *Line) Direction() float64 {\n\treturn math.Atan2(l.b[1]-l.a[1], l.b[0]-l.a[0])\n}","label":0}
{"text":"private function isQueryExcluded(array $queryParams)\n    {\n        if (empty($queryParams)) {\n            return false;\n        }\n\n        if ($this->excludedQuery === '*') {\n            return true;\n        }\n\n        if (empty($this->excludedQuery) && !is_numeric($this->excludedQuery)) {\n            return false;\n        }\n\n        $excludedParams = array_intersect_key($queryParams, array_flip((array)$this->excludedQuery));\n        return (count($excludedParams) > 0);\n    }","label":0}
{"text":"static function toList(iterable $iterable): array\n    {\n        return $iterable instanceof \\Traversable ? iterator_to_array($iterable, false) : array_values($iterable);\n    }","label":0}
{"text":"function(z_query) {\n\t\t\t\n\t\t\t\/\/ hash query\n\t\t\tif(typeof z_query == 'object') {\n\t\t\t\treturn query_hash(z_query);\n\t\t\t}\n\t\t\t\/\/ string\n\t\t\telse if(typeof z_query == 'string') {\n\n\t\t\t\tif(z_query[0] == ':' || z_query[0] == '?') {\n\t\t\t\t\treturn qb({\n\t\t\t\t\t\tselect: '',\n\t\t\t\t\t\twhere: '\\n'+z_query,\n\t\t\t\t\t\ttail: '',\n\t\t\t\t\t\tgroup: '',\n\t\t\t\t\t\torder: '',\n\t\t\t\t\t\tlimit: '',\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\treturn query_string(z_query);\n\t\t\t}\n\t\t}","label":0}
{"text":"func layerStatusFromDockerString(dockerStatus string) layerStatus {\n\tswitch dockerStatus {\n\tcase \"Pushing\":\n\t\treturn statusPushing\n\tcase \"Downloading\":\n\t\treturn statusDownloading\n\tcase \"Extracting\", \"Verifying Checksum\", \"Download complete\":\n\t\treturn statusExtracting\n\tcase \"Pull complete\", \"Already exists\", \"Pushed\", \"Layer already exists\":\n\t\treturn statusComplete\n\tdefault:\n\t\treturn statusPending\n\t}\n}","label":0}
{"text":"def from_pyvalue(name, value, **kwargs):\n\t\n\treturn new_param(name, ligolwtypes.FromPyType[type(value)], value, **kwargs)","label":0}
{"text":"public function save($data, $id, $tags = array(), $specificLifetime = false)\n    {\n        $result = parent::save($data, $id, array(), $specificLifetime);\n        if ($tags) {\n            if (!method_exists($this->_handle, 'tag_add')) {\n                \\Zend_Cache::throwException('Method tag_add() is not supported by the PHP memcached extension!');\n            }\n            foreach ($tags as $tag) {\n                $this->_handle->tag_add($tag, $id);\n            }\n            return true;\n        }\n        return $result;\n    }","label":0}
{"text":"func (s *Service) LogDrainListByAddOn(ctx context.Context, addOnIdentity string, lr *ListRange) (LogDrainListByAddOnResult, error) {\n\tvar logDrain LogDrainListByAddOnResult\n\treturn logDrain, s.Get(ctx, &logDrain, fmt.Sprintf(\"\/addons\/%v\/log-drains\", addOnIdentity), nil, lr)\n}","label":0}
{"text":"public function inputModel($pathOrSpec, array $in = null)\n    {\n        if (is_string($pathOrSpec)) {\n            $spec = $this->make($pathOrSpec);\n        }\n        else {\n            $spec = $pathOrSpec;\n        }\n\n        return new InputModel($spec, $in);\n    }","label":0}
{"text":"public function migrate($migrationName) {\n\t\t$this->createTable();\n\t\t$this->db->dal()->into('_migrations')->insert(['name'=>$migrationName, 'migrated'=>date('Y-m-d H:i:s')]);\n\t}","label":0}
{"text":"func (s *AppSummary) SetName(v string) *AppSummary {\n\ts.Name = &v\n\treturn s\n}","label":0}
{"text":"protected function execute(InputInterface $input, OutputInterface $output): void\n    {\n        $config = $this->config;\n        $tempDir = $config->get('dotfiles.temp_dir');\n\n        $output->writeln('Start checking new version');\n        $url = static::BASE_URL.'\/dotfiles.phar.json';\n        $versionFile = $tempDir.'\/update\/dotfiles.phar.json';\n        Toolkit::ensureFileDir($versionFile);\n        $downloader = $this->downloader;\n        $downloader->run($url, $versionFile);\n        $contents = file_get_contents($versionFile);\n        if ('' === trim($contents)) {\n            throw new InstallFailedException('Can not parse dotfiles.phar.json file');\n        }\n        $json = json_decode($contents, true);\n\n        $this->versionFile = $versionFile;\n        $this->version = $json['version'];\n        $this->branchAlias = $json['branch'];\n        $this->date = $json['date'];\n\n        if (Application::VERSION !== $this->version) {\n            $output->writeln(\"Begin update into <comment>{$this->version}<\/comment>\");\n            $this->doUpdate($output);\n            $this->getApplication()->get('clear-cache')->run($input, $output);\n        } else {\n            $output->writeln('You already have latest <comment>dotfiles<\/comment> version');\n        }\n    }","label":0}
{"text":"public function get($name, array $arguments = null)\n    {\n        $this->load();\n        if ($arguments === null) {\n            $arguments = [$this->env];\n        }\n        if (isset($this->config[$name])) {\n            $entry = $this->config[$name];\n            if (is_callable($entry)) {\n                return $entry(...$arguments);\n            } elseif (is_object($entry)) {\n                return $entry;\n            } else {\n                $name = $entry;\n            }\n        }\n        return new $name(...$arguments);\n    }","label":0}
{"text":"function smartCoordinates(args) {\n  var x = args.x,\n    y = args.y;\n\n  var paper = Origami.getPaper(),\n    elmWidth = paper.element.width,\n    elmHeight = paper.element.height,\n    radius = (args.r || 0);\n\n  var width = (args.width || radius),\n    height = (args.height || width);\n\n  var axis = {\n    x: [ 'right', 'center', 'left' ],\n    y: [ 'top', 'center', 'bottom' ]\n  };\n\n  if (axis.x.indexOf(x) !== -1) {\n    if (x === 'right')\n      x = Math.floor(elmWidth - width);\n    else if (x === 'center')\n      if (radius)\n        x = Math.floor(elmWidth \/ 2)\n      else\n        x = Math.floor((elmWidth \/ 2) - (width \/ 2));\n    else if (x === 'left')\n      x = radius;\n  } else if ((x + '').substr(-1) === '%') {\n    x = (elmWidth * parseInt(x, 10)) \/ 100;\n  } else {\n    x = 0;\n  }\n\n  if (axis.y.indexOf(y) !== -1) {\n    if (y === 'top')\n      y = radius;\n    else if (y === 'center')\n      if (radius)\n        y = Math.floor(elmHeight \/ 2);\n      else\n        y = Math.floor((elmHeight \/ 2) - (height \/ 2));\n    else if (y === 'bottom')\n      y = Math.floor(elmHeight - height);\n  } else if ((y + '').substr(-1) === '%') {\n    y = (elmHeight * parseInt(y, 10)) \/ 100;\n  } else {\n    y = 0;\n  }\n\n  args.y = y;\n  args.x = x;\n  return args;\n}","label":0}
{"text":"private boolean isCDIEnabled(WebSphereBeanDeploymentArchive bda) {\n        Boolean hasBeans = cdiStatusMap.get(bda.getId());\n        if (hasBeans == null) {\n            \/\/it's enabled if it has beans or it is an extension which could add beans\n            hasBeans = bda.hasBeans() || bda.isExtension();\n            \/\/setting this now should prevent loops when checking children in the next step\n            cdiStatusMap.put(bda.getId(), hasBeans);\n\n            \/\/it's also enabled if any of it's children are enabled (but not including runtime extensions)\n            hasBeans = hasBeans || isCDIEnabled(bda.getWebSphereBeanDeploymentArchives());\n            \/\/remember the result\n            cdiStatusMap.put(bda.getId(), hasBeans);\n        }\n\n        return hasBeans;\n    }","label":0}
{"text":"public static IoFuture<Connection> connect(final ProtocolConnectionConfiguration configuration) throws IOException {\n        return connect(configuration.getCallbackHandler(), configuration);\n    }","label":0}
{"text":"func (p PluralRule) String() string {\n\n\tswitch p {\n\tcase PluralRuleZero:\n\t\treturn pluralsString[7:11]\n\tcase PluralRuleOne:\n\t\treturn pluralsString[11:14]\n\tcase PluralRuleTwo:\n\t\treturn pluralsString[14:17]\n\tcase PluralRuleFew:\n\t\treturn pluralsString[17:20]\n\tcase PluralRuleMany:\n\t\treturn pluralsString[20:24]\n\tcase PluralRuleOther:\n\t\treturn pluralsString[24:]\n\tdefault:\n\t\treturn pluralsString[:7]\n\t}\n}","label":0}
{"text":"public HalResource addEmbedded(String relation, HalResource... resources) {\n    return addResources(HalResourceType.EMBEDDED, relation, true, resources);\n  }","label":0}
{"text":"public void update(double x, double y, double radius)\r\n    {\r\n        update(x, y);\r\n        update(x-radius, y-radius);\r\n        update(x+radius, y-radius);\r\n        update(x-radius, y+radius);\r\n        update(x+radius, y+radius);\r\n    }","label":0}
{"text":"def do_library(self, args):\n        \"\"\"\"\"\"\n        func = getattr(args, 'func', None)\n        if func is not None:\n            # Call whatever subcommand function was selected\n            func(self, args)\n        else:\n            # No subcommand was provided, so call help\n            self.do_help('library')","label":0}
{"text":"public boolean forEachPartition(IterateProcedure<E> p) {\n        int curIdx = index.get(values.get(0).id());\n        int from;\n        int to;\n        for (from = 0, to = 0; to < values.size(); to++) {\n            int cIdx = index.get(values.get(to).id());\n            if (curIdx != cIdx) {\n                if (!p.extract(this, curIdx, from, to)) {\n                    return false;\n                }\n                from = to;\n                curIdx = cIdx;\n            }\n        }\n        return p.extract(this, curIdx, from, to);\n    }","label":0}
{"text":"public function getQueueConfigurationScopes()\n    {\n        \/\/ cache of seen, unique AMQP configurations\n        $configurations = array();\n        \/\/ list of stores to produce unique AMQP configuration\n        $uniqueStores = array();\n        foreach (Mage::app()->getStores(true) as $store) {\n            $amqpConfig = $this->getStoreLevelAmqpConfigurations($store);\n            if (!in_array($amqpConfig, $configurations, true)) {\n                $configurations[] = $amqpConfig;\n                $uniqueStores[] = $store;\n            }\n        }\n        return $uniqueStores;\n    }","label":0}
{"text":"def get_gradebook_column_form(self, *args, **kwargs):\n        \"\"\"\"\"\"\n        # Implemented from kitosid template for -\n        # osid.resource.ResourceAdminSession.get_resource_form_for_update\n        # This method might be a bit sketchy. Time will tell.\n        if isinstance(args[-1], list) or 'gradebook_column_record_types' in kwargs:\n            return self.get_gradebook_column_form_for_create(*args, **kwargs)\n        else:\n            return self.get_gradebook_column_form_for_update(*args, **kwargs)","label":0}
{"text":"def from_code(\n        cls,\n        schema,  # type: GraphQLSchema\n        code,  # type: Union[str, Any]\n        uptodate=None,  # type: Optional[bool]\n        extra_namespace=None,  # type: Optional[Dict[str, Any]]\n    ):\n        # type: (...) -> GraphQLCompiledDocument\n        \n        if isinstance(code, string_types):\n            filename = \"<document>\"\n            code = compile(code, filename, \"exec\")\n        namespace = {\"__file__\": code.co_filename}\n        exec(code, namespace)\n        if extra_namespace:\n            namespace.update(extra_namespace)\n        rv = cls._from_namespace(schema, namespace)\n        # rv._uptodate = uptodate\n        return rv","label":0}
{"text":"public function run(Config $userConfig)\n    {\n        $state         = new State();\n        $state->config = new RunnerConfig($userConfig);\n\n        foreach ($this->processors as $processor) {\n            $processor->run($state, $this->logger);\n        }\n    }","label":0}
{"text":"func ParseSignal(rawSignal string) (syscall.Signal, error) {\n\ts, err := strconv.Atoi(rawSignal)\n\tif err == nil {\n\t\tsig := syscall.Signal(s)\n\t\tfor _, msig := range signalMap {\n\t\t\tif sig == msig {\n\t\t\t\treturn sig, nil\n\t\t\t}\n\t\t}\n\t\treturn -1, fmt.Errorf(\"unknown signal %q\", rawSignal)\n\t}\n\tsignal, ok := signalMap[strings.TrimPrefix(strings.ToUpper(rawSignal), \"SIG\")]\n\tif !ok {\n\t\treturn -1, fmt.Errorf(\"unknown signal %q\", rawSignal)\n\t}\n\treturn signal, nil\n}","label":0}
{"text":"func (handle *ContextHandle) FindKeyPairFromSKI(session mPkcs11.SessionHandle, ski []byte, keyType bool) (*mPkcs11.ObjectHandle, error) {\n\thandle.lock.RLock()\n\tdefer handle.lock.RUnlock()\n\n\treturn cachebridge.GetKeyPairFromSessionSKI(&cachebridge.KeyPairCacheKey{Mod: handle.ctx, Session: session, SKI: ski, KeyType: keyType})\n}","label":0}
{"text":"public IStatus createStatus(int severity, int code, Throwable cause) {\n\t\treturn createStatus(severity, code, null, cause);\n\t}","label":0}
{"text":"func (c *ClusterInfo) GetVersion(addr string) (semver.Version, error) {\n\tendpoint := fmt.Sprintf(\"http:\/\/%s\/info\", addr)\n\tvar resp struct {\n\t\tVersion string `json:\"version\"`\n\t}\n\terr := c.client.GETV1(endpoint, &resp)\n\tif err != nil {\n\t\treturn semver.Version{}, err\n\t}\n\tif resp.Version == \"\" {\n\t\tresp.Version = \"unknown\"\n\t}\n\treturn semver.Parse(resp.Version)\n}","label":0}
{"text":"func (c *Context) Negotiate(code int, config Negotiate) {\n\tswitch c.NegotiateFormat(config.Offered...) {\n\tcase binding.MIMEJSON:\n\t\tdata := chooseData(config.JSONData, config.Data)\n\t\tc.JSON(code, data)\n\n\tcase binding.MIMEHTML:\n\t\tdata := chooseData(config.HTMLData, config.Data)\n\t\tc.HTML(code, config.HTMLName, data)\n\n\tcase binding.MIMEXML:\n\t\tdata := chooseData(config.XMLData, config.Data)\n\t\tc.XML(code, data)\n\n\tdefault:\n\t\tc.AbortWithError(http.StatusNotAcceptable, errors.New(\"the accepted formats are not offered by the server\")) \/\/ nolint: errcheck\n\t}\n}","label":0}
{"text":"def ghostedDistArrayFactory(BaseClass):\n    \n\n    class GhostedDistArrayAny(BaseClass):\n        \"\"\"\n        Ghosted distributed array. Each process owns data and exposes the\n        halo region to other processes. These are accessed with tuples\n        such (1, 0) for north, (-1, 0) for south, etc.\n        \"\"\"\n\n        def __init__(self, shape, dtype):\n            \"\"\"\n            Constructor\n            @param shape shape of the array\n            @param dtype numpy data type\n            @param numGhosts the width of the halo\n            \"\"\"\n            # call the parent Ctor\n            BaseClass.__init__(self, shape, dtype)\n\n        def setNumberOfGhosts(self, numGhosts):\n            \"\"\"\n            Set the width of the ghost halo\n            @param numGhosts halo thickness\n            \"\"\"\n            # expose each window to other PE domains\n            ndim = len(self.shape)\n            for dim in range(ndim):\n                for drect in (-1, 1):\n                    # the window id uniquely specifies the\n                    # location of the window. we use 0's to indicate\n                    # a slab extending over the entire length for a\n                    # given direction, a 1 represents a layer of\n                    # thickness numGhosts on the high index side,\n                    # -1 on the low index side.\n                    winId = tuple([0 for i in range(dim)] +\n                                  [drect] +\n                                  [0 for i in range(dim+1, ndim)])\n\n                    slce = slice(0, numGhosts)\n                    if drect == 1:\n                        slce = slice(self.shape[dim] -\n                                     numGhosts, self.shape[dim])\n\n                    slab = self.getSlab(dim, slce)\n\n                    # expose MPI window\n                    self.expose(slab, winId)\n\n        def getSlab(self, dim, slce):\n            \"\"\"\n            Get slab. A slab is a multi-dimensional slice extending in\n            all directions except along dim where slce applies\n            @param dim dimension (0=first index, 1=2nd index...)\n            @param slce python slice object along dimension dim\n            @return slab\n            \"\"\"\n            shape = self.shape\n            ndim = len(shape)\n\n            slab = [slice(0, shape[i]) for i in range(dim)] + \\\n                   [slce] + [slice(0, shape[i]) for i in range(dim+1, ndim)]\n            return slab\n\n        def getEllipsis(self, winID):\n            \"\"\"\n            Get the ellipsis for a given halo side\n\n            @param winID a tuple of zeros and one +1 or -1.  To access\n               the \"north\" side for instance, set side=(1, 0),\n               (-1, 0) to access the south side, (0, 1) the east\n               side, etc. This does not involve any communication.\n\n            @return None if halo was not exposed (bad winID)\n            \"\"\"\n            if winID in self.windows:\n                return self.windows[winID]['slice']\n            else:\n                return None\n\n    return GhostedDistArrayAny","label":0}
{"text":"func (client *SSHClient) Validate() error {\n\tif client.Creds.SSHUser == \"\" {\n\t\treturn ErrInvalidUsername\n\t}\n\n\tif client.Creds.SSHPrivateKey == \"\" && client.Creds.SSHPassword == \"\" {\n\t\treturn ErrInvalidAuth\n\t}\n\n\treturn nil\n}","label":0}
{"text":"private void addJoinColumnToInfo(String joinColumn, TableInfo targetTableInfo, List<TableInfo> targetTableInfos,\n            EntityMetadata m)\n    {\n        if (!joinColumn.equals(targetTableInfo.getIdColumnName()))\n        {\n\n            if (!targetTableInfos.isEmpty() && targetTableInfos.contains(targetTableInfo))\n            {\n                int idx = targetTableInfos.indexOf(targetTableInfo);\n                targetTableInfo = targetTableInfos.get(idx);\n                ColumnInfo columnInfoOfJoinColumn = getJoinColumn(targetTableInfo, joinColumn,\n                        m.getIdAttribute().getBindableJavaType());\n                if (!targetTableInfo.getColumnMetadatas().contains(columnInfoOfJoinColumn))\n                {\n                    targetTableInfo.addColumnInfo(columnInfoOfJoinColumn);\n                }\n            }\n            else\n            {\n                ColumnInfo columnInfoOfJoinColumn = getJoinColumn(targetTableInfo, joinColumn,\n                        m.getIdAttribute().getBindableJavaType());\n                if (!targetTableInfo.getColumnMetadatas().contains(columnInfoOfJoinColumn))\n                {\n                    targetTableInfo.addColumnInfo(columnInfoOfJoinColumn);\n                }\n                targetTableInfos.add(targetTableInfo);\n            }\n        }\n    }","label":0}
{"text":"public static <T> T readAvroEntity(Decoder decoder, DatumReader<T> reader) {\n    try {\n      return reader.read(null, decoder);\n    } catch (IOException e) {\n      throw new SerializationException(\"Could not deserialize Avro entity\", e);\n    }\n  }","label":0}
{"text":"private function getWatermark(ImagineInterface $imagine): ?ImageInterface\n    {\n        $resource = null;\n        if ($this->getMarkFilepath() !== null) {\n            $resource = fopen($this->getMarkFilepath(), 'rb');\n        } elseif (\\is_string($this->markContent)) {\n            $resource = 'a'; \/\/ TODO: create resource.\n        } elseif (\\is_resource($this->markContent)) {\n            $resource = $this->markContent;\n        }\n\n        if ($resource === null) {\n            return null;\n        }\n\n        return $imagine->read($resource);\n    }","label":0}
{"text":"@SuppressWarnings(\"unchecked\")\n    public Iterable<?> toIterable(Object obj) {\n        if (isArray(obj))\n            return ((Iterable) obj);\n        else\n            throw new JsonPathException(\"Cannot iterate over \" + obj!=null?obj.getClass().getName():\"null\");\n    }","label":0}
{"text":"public void bindArgument(@NotNull PreparedStatement ps, int index, @Nullable Object value) throws SQLException {\n        ArgumentBinder.bindArgument(ps, index, value);\n    }","label":0}
{"text":"private RectF getArcRect(float offset) {\n        RectF workingSurface = new RectF();\n        workingSurface.left = getPaddingLeft() + offset;\n        workingSurface.top = getPaddingTop() + offset;\n        workingSurface.right = getWidth() - getPaddingRight() - offset;\n        workingSurface.bottom = getHeight() - getPaddingBottom() - offset;\n\n        float width = workingSurface.right - workingSurface.left;\n        float height = workingSurface.bottom - workingSurface.top;\n\n        this.mDiameter = Math.min(width, height);\n        float radius = mDiameter \/ 2;\n        float centerX = width \/ 2;\n        float centerY = height \/ 2;\n\n        \/\/float left, float top, float right, float bottom\n        return new RectF(centerX - radius + offset, centerY - radius + offset, centerX + radius + offset, centerY + radius + offset);\n    }","label":0}
{"text":"func ContainsLetter(s string) bool {\n\tfor _, v := range s {\n\t\tif unicode.IsLetter(v) {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}","label":0}
{"text":"function UMLRoleBindingView() {\n        UMLGeneralEdgeView.apply(this, arguments);\n        this.tailEndStyle = Core.ES_FLAT;\n        this.headEndStyle = Core.ES_STICK_ARROW;\n        this.lineMode = Core.LM_DOT;\n\n        \/** @member {EdgeLabelView} *\/\n        this.roleNameLabel = new EdgeLabelView();\n        this.roleNameLabel.hostEdge = this;\n        this.roleNameLabel.edgePosition = Core.EP_HEAD;\n        this.roleNameLabel.alpha = -Math.PI \/ 6;\n        this.roleNameLabel.distance = 30;\n        this.addSubView(this.roleNameLabel);\n    }","label":0}
{"text":"func SplitCondenseSpace(s, sep string) []string {\n\tsplit := strings.Split(s, sep)\n\tstrs := []string{}\n\tfor _, str := range split {\n\t\tstr = strings.TrimSpace(str)\n\t\tif len(str) > 0 {\n\t\t\tstrs = append(strs, str)\n\t\t}\n\t}\n\treturn strs\n}","label":0}
{"text":"public static Driver driver( String uri, AuthToken authToken )\n    {\n        return driver( uri, authToken, Config.defaultConfig() );\n    }","label":0}
{"text":"func (service *VboxPortType) IGuestSessionStateChangedEventgetId(request *IGuestSessionStateChangedEventgetId) (*IGuestSessionStateChangedEventgetIdResponse, error) {\n\tresponse := new(IGuestSessionStateChangedEventgetIdResponse)\n\terr := service.client.Call(\"\", request, response)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn response, nil\n}","label":0}
{"text":"function runTask(taskName, directories, options, argv) {\n\treturn new Promise((resolve, reject) => {\n\t\tconst modulePath = tryResolve(\n\t\t\ttryFile(directories, `${taskName}\/index.js`),\n\t\t\t`mrm-task-${taskName}`,\n\t\t\ttaskName\n\t\t);\n\n\t\tif (!modulePath) {\n\t\t\treject(new MrmUnknownTask(`Task \u201c${taskName}\u201d not found.`, { taskName }));\n\t\t\treturn;\n\t\t}\n\n\t\tconsole.log(kleur.cyan(`Running ${taskName}...`));\n\n\t\tconst module = require(modulePath);\n\t\tPromise.resolve(module(getConfigGetter(options), argv))\n\t\t\t.then(() => {\n\t\t\t\tresolve();\n\t\t\t})\n\t\t\t.catch(reject);\n\t});\n}","label":0}
{"text":"public <T> List<T> cloneList(List<T> list) {\n        return new ArrayList<T>(list);\n    }","label":0}
{"text":"protected static function retrieveUserlandConfigurationFiles()\n    {\n        $appEnvironment = self::$registry->getParameter('doozr.app.environment');\n        $caching        = self::$registry->getParameter('doozr.kernel.caching');\n        $exists         = null;\n        $stale          = false;\n        $file           = self::$registry->getPath()->get(\n            'app',\n            'Data\\Private\\Config\\.configuration.'.$appEnvironment.'.json'\n        );\n\n        \/\/ Try to load information from cache!\n        if (true === $caching) {\n            try {\n                $exists = self::$registry->getCache()->getItem($file)->get();\n            } catch (Doozr_Cache_Service_Exception $exception) {\n                \/\/ Intentionally left empty\n            }\n        }\n\n        if (null === $exists) {\n            $stale  = true;\n            $exists = (\n                true === self::$registry->getFilesystem()->exists($file) &&\n                true === self::$registry->getFilesystem()->readable($file)\n            );\n        }\n\n        \/\/ Cache items found for reuse later\n        if (true === $stale && true === $caching) {\n            $cacheItem = new CacheItem($file);\n            $cacheItem->set($exists);\n\n            self::$registry->getCache()->save($cacheItem);\n        }\n\n        \/\/ Return collection of service configuration files\n        return (true === $exists) ? [$file] : [];\n    }","label":0}
{"text":"protected function injectContextToViewExtensionFactory(IViewExtensionFactory $factory)\n    {\n        if ($factory instanceof IContextAware) {\n            $factory->clearContext();\n\n            if ($this->hasContext()) {\n                $factory->setContext($this->getContext());\n            }\n        }\n\n        if ($factory instanceof IModelAware && $this->modelFactory) {\n            $factory->setModelFactory($this->modelFactory);\n        }\n    }","label":0}
{"text":"protected function _getConfig($object)\n    {\n        $config = new KObjectConfig();\n\n        $method = '_' . strtolower($object) . 'Config';\n\n        \/\/ Call config setter if any.\n        if (method_exists($this, $method)) {\n            $this->$method($config);\n        }\n\n        return $config;\n    }","label":0}
{"text":"public function listAction()\n\t{\n\t\tif ( false === $this->get('security.authorization_checker')->isGranted('ROLE_ADMIN') )\n\t\t\tthrow new AccessDeniedException();\n\t\n\t\t\/\/ Set Datagrid source\n\t\t$source = new Entity($this->get('asf_website.config.manager')->getClassName());\n\t\t$tableAlias = $source->getTableAlias();\n\t\t$source->manipulateQuery(function($query) use ($tableAlias){\n\t\t\t$query instanceof QueryBuilder;\n\n\t\t\tif ( count($query->getDQLPart('orderBy')) == 0) {\n\t\t\t\t$query->orderBy($tableAlias . '.name', 'ASC');\n\t\t\t}\n\t\t});\n\n\t\t\/\/ Get Grid instance\n\t\t$grid = $this->get('grid');\n\t\t$grid instanceof Grid;\n\n\t\t\/\/ Attach the source to the grid\n\t\t$grid->setSource($source);\n\t\t$grid->setId('asf_website_config_list');\n\n\t\t\/\/ Columns configuration\n\t\t$grid->hideColumns(array('id'));\n\t\n\t\t$grid->getColumn('name')->setTitle($this->get('translator')->trans('Config name', array(), 'asf_website'))\n\t\t\t->setDefaultOperator('like')\n\t\t\t->setOperatorsVisible(false);\n\n\t\t$editAction = new RowAction('btn_edit', 'asf_website_config_edit');\n\t\t$editAction->setRouteParameters(array('id'));\n\t\t$grid->addRowAction($editAction);\n\n\t\t$deleteAction = new RowAction('btn_delete', 'asf_website_config_delete', true);\n\t\t$deleteAction->setRouteParameters(array('id'))\n\t\t\t->setConfirmMessage($this->get('translator')->trans('Do you want to delete this config?', array(), 'asf_website'));\n\t\t$grid->addRowAction($deleteAction);\n\t\n\t\t$grid->setNoDataMessage($this->get('translator')->trans('No config was found.', array(), 'asf_website'));\n\t\n\t\treturn $grid->getGridResponse('ASFWebsiteBundle:Config:list.html.twig');\n\t}","label":0}
{"text":"def _onError(self, message):\n        \"\"\"\"\"\"\n        self.isOK = False\n        if message.strip() != \"\":\n            self.errors.append(message)","label":0}
{"text":"private void registerInternalChannelsFor(\n            String functionalityName,\n            IAsyncMessageClient client,\n            String conversationID) throws ServiceGroundingException\n    {\n        InternalChannel ch = new InternalChannel(client);\n        this.channelProducersHelper.addChannel(ch, functionalityName, conversationID, conversationID);\n        this.channelConsumersHelper.addChannel(ch, functionalityName, conversationID, conversationID);\n    }","label":0}
{"text":"public function registerConfirm(Request $request)\n    {\n        if (null === $code = $request->query->get('code')) {\n            $this->app->addFlash('error', $this->app->trans('Invalid unlock link.'));\n\n            return $this->app->redirectPath('homepage');\n        }\n\n        if (null === $token = $this->getTokenRepository()->findValidToken($code)) {\n            $this->app->addFlash('error', $this->app->trans('Invalid unlock link.'));\n\n            return $this->app->redirectPath('homepage');\n        }\n\n        $user = $token->getUser();\n\n        if (!$user->isMailLocked()) {\n            $this->app->addFlash('info', $this->app->trans('Account is already unlocked, you can login.'));\n\n            return $this->app->redirectPath('homepage');\n        }\n\n        $tokenManipulator = $this->getTokenManipulator();\n        $tokenManipulator->delete($token);\n        $user->setMailLocked(false);\n\n        try {\n            $receiver = Receiver::fromUser($user);\n        } catch (InvalidArgumentException $e) {\n            $this->app->addFlash('success', $this->app->trans('Account has been unlocked, you can now login.'));\n\n            return $this->app->redirectPath('homepage');\n        }\n\n        $tokenManipulator->delete($token);\n\n        if (count($this->getAclForUser($user)->get_granted_base()) > 0) {\n            $mail = MailSuccessEmailConfirmationRegistered::create($this->app, $receiver);\n            $this->deliver($mail);\n\n            $this->app->addFlash('success', $this->app->trans('Account has been unlocked, you can now login.'));\n        } else {\n            $mail = MailSuccessEmailConfirmationUnregistered::create($this->app, $receiver);\n            $this->deliver($mail);\n\n            $this->app->addFlash('info', $this->app->trans('Account has been unlocked, you still have to wait for admin approval.'));\n        }\n\n        return $this->app->redirectPath('homepage');\n    }","label":0}
{"text":"protected function formatter()\n    {\n        $formatter = new LineFormatter(null, null, true, true);\n        $formatter->includeStacktraces();\n\n        return $formatter;\n    }","label":0}
{"text":"def add(entry_or_key, value = nil)\n      if value.nil? and entry_or_key.is_a?(Entry) # treat as entry\n        entry = entry_or_key\n      else\n        entry = Entry.new(entry_or_key)\n        entry.password = value\n      end\n\n      entry.validate!\n\n      @backend.transaction{\n        timestamp!(:last_modified)\n        @backend[:user][encrypt(entry.name)] = encrypt(EntryMapper.to_json(entry))\n      }\n    end","label":0}
{"text":"public static base_response flush(nitro_service client, cacheobject resource) throws Exception {\n\t\tcacheobject flushresource = new cacheobject();\n\t\tflushresource.locator = resource.locator;\n\t\tflushresource.url = resource.url;\n\t\tflushresource.host = resource.host;\n\t\tflushresource.port = resource.port;\n\t\tflushresource.groupname = resource.groupname;\n\t\tflushresource.httpmethod = resource.httpmethod;\n\t\tflushresource.force = resource.force;\n\t\treturn flushresource.perform_operation(client,\"flush\");\n\t}","label":0}
{"text":"protected String removeSquareBrackets( String value )\n    {\n        if (value.startsWith( \"[\" ) && value.endsWith( \"]\" ))\n            return value.substring( 1, value.length() - 1 );\n        else\n            return value;\n    }","label":0}
{"text":"public function deleteRole(Role $role)\n    {\n        $returnValue = $this->service->deleteRole($role);\n        $this->signalDispatcher->emit(\n            new DeleteRoleSignal(\n                array(\n                    'roleId' => $role->id,\n                )\n            )\n        );\n\n        return $returnValue;\n    }","label":0}
{"text":"def direct_messages_show(self, id):\n        \n        params = {}\n        set_str_param(params, 'id', id)\n        d = self._get_api('direct_messages\/show.json', params)\n        d.addCallback(lambda dms: dms[0])\n        return d","label":0}
{"text":"function (query, results) {\n        \/\/ Filter components out of the results.\n        return YArray.filter(results, function (result) {\n            return result.raw.resultType === 'component' ? false : result;\n        });\n    }","label":0}
{"text":"public static Integer getDayOfYear(Date date) {\n\n        if (date == null)\n            return null;\n\n        Calendar calendar = Calendar.getInstance();\n        calendar.setTime(date);\n\n        return calendar.get(Calendar.DAY_OF_YEAR);\n    }","label":0}
{"text":"public function replaceAll(Text $text, $pattern, $replacement)\n    {\n        $input = array(\n            'text' => $text,\n            'pattern' => $pattern,\n            'replacement' => $replacement,\n        );\n        $this->commandInvoker->run('replace_all', $input);\n    }","label":0}
{"text":"@Pure\n\tpublic N getChildAt(IcosepOctTreeZone zone) {\n\t\tif (zone == IcosepOctTreeZone.ICOSEP) {\n\t\t\treturn this.nicosep;\n\t\t}\n\t\treturn getChildAt(zone.toOctTreeZone());\n\t}","label":0}
{"text":"function encrypt(PersonalData $data, CryptographicDetails $crypto): EncryptedPersonalData {\n\n        if ( ! $crypto->encryption() == 'libsodium') {\n            throw new CryptographicDetailsNotCompatibleWithEncryption(\"{$crypto->encryption()} received, expected 'libsodium'\");\n        }\n\n        $dataString = $data->toString();\n        $secretKey  = $crypto->key('secretKey');\n        $nonce      = $crypto->key('nonce');\n\n        $encrypted = sodium_crypto_secretbox($dataString, $nonce, $secretKey);\n\n        return EncryptedPersonalData::fromString($encrypted);\n    }","label":0}
{"text":"func MakeToken(eid *dm.Execution_ID) distributor.Token {\n\treturn distributor.Token(fmt.Sprintf(\"fakeDistributor:%s|%d|%d\", eid.Quest,\n\t\teid.Attempt, eid.Id))\n}","label":0}
{"text":"func (js *JSONConfig) Parse(filename string) (Configer, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\tcontent, err := ioutil.ReadAll(file)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn js.ParseData(content)\n}","label":0}
{"text":"protected function _handleDirectCall($methodCalled) {\n        \/\/ this doesn't actually do anything because _real_toHtml() won't be\n        \/\/ called in this request context (unless the flash message isn't\n        \/\/ actually supposed to be ajax\/esi'd in)\n        $this->_directCall = $methodCalled;\n        if ($this->_fixMessages()) {\n            $layout = $this->getLayout();\n            $layoutUpdate = $layout->getUpdate()->load('default');\n            if (Mage::app()->useCache('layout')) {\n                \/\/ this is skipped in the layout update load() if the \"layout\"\n                \/\/ cache is enabled, which seems to cause the esi layout stuff\n                \/\/ to not load, so we manually do it here\n                foreach ($layoutUpdate->getHandles() as $handle) {\n                    $layoutUpdate->merge($handle);\n                }\n            }\n            $layout->generateXml();\n            $layoutShim = Mage::getSingleton('turpentine\/shim_mage_core_layout');\n            foreach ($layout->getNode()->xpath(\n                    sprintf('\/\/reference[@name=\\'%s\\']\/action',\n                        $this->getNameInLayout()) ) as $node) {\n                $layoutShim->shim_generateAction($node);\n            }\n        }\n        return $this;\n    }","label":0}
{"text":"protected function bootViews()\n    {\n        if (isset($this->dir) and isset($this->viewDirs) and is_array($this->viewDirs)) {\n            foreach ($this->viewDirs as $dirName => $namespace) {\n                $viewPath             = $this->getViewsPath($dirName);\n                $viewsDestinationPath = Str::replace($this->viewsDestinationPath, '{namespace}', $namespace);\n                $this->loadViewsFrom($viewPath, $namespace);\n                $this->publishes([ $viewPath => base_path($viewsDestinationPath) ], 'views');\n            }\n        }\n    }","label":0}
{"text":"public function transferRequests($batchSize = 50)\n    {\n        $className = self::$mapping['request'];\n        $this->transferStrategy = new $className($batchSize);\n        $this->divisorStrategy = $this->transferStrategy;\n\n        return $this;\n    }","label":0}
{"text":"void assertParent(Collection<Class<? extends Element>> permittedParents) throws InvalidInputException {\n    if (!permittedParents.contains(this.getParent().getClass())) {\n      throw new InvalidInputException(\"Element \\\"\" + this.getMessageMLTag() + \"\\\" is not allowed as a child of \\\"\"\n          + this.getParent().getMessageMLTag() + \"\\\"\");\n    }\n  }","label":0}
{"text":"func formatBits(dst io.Writer, u uint64, neg bool) (int, error) {\n\n\tvar a = pool_integerBuffer.Get().(*byteSliceBuffer)\n\n\ti := integerBufferSize\n\n\tif neg {\n\t\tu = -u\n\t}\n\n\t\/\/ common case: use constants for \/ because\n\t\/\/ the compiler can optimize it into a multiply+shift\n\n\tif ^uintptr(0)>>32 == 0 {\n\t\tfor u > uint64(^uintptr(0)) {\n\t\t\tq := u \/ 1e9\n\t\t\tus := uintptr(u - q*1e9) \/\/ us % 1e9 fits into a uintptr\n\t\t\tfor j := 9; j > 0; j-- {\n\t\t\t\ti--\n\t\t\t\tqs := us \/ 10\n\t\t\t\ta.bytes[i] = byte(us - qs*10 + '0')\n\t\t\t\tus = qs\n\t\t\t}\n\t\t\tu = q\n\t\t}\n\t}\n\n\t\/\/ u guaranteed to fit into a uintptr\n\tus := uintptr(u)\n\tfor us >= 10 {\n\t\ti--\n\t\tq := us \/ 10\n\t\ta.bytes[i] = byte(us - q*10 + '0')\n\t\tus = q\n\t}\n\t\/\/ u < 10\n\ti--\n\ta.bytes[i] = byte(us + '0')\n\n\t\/\/ add sign, if any\n\tif neg {\n\t\ti--\n\t\ta.bytes[i] = '-'\n\t}\n\tcounter, err := dst.Write(a.bytes[i:])\n\tpool_integerBuffer.Put(a)\n\treturn counter, err\n}","label":0}
{"text":"protected static String DIMACSfromList(ArrayList<ArrayList<String>> formula) {\r\n        StringBuilder dimacs = new StringBuilder(\"\");\r\n        for (List<String> conjClause : formula) {\r\n            for (String disjClause : conjClause) {\r\n                dimacs.append(disjClause).append(\" \");\r\n            }\r\n            dimacs.append(\" 0\\n\");\r\n        }\r\n        return dimacs.toString();\r\n    }","label":0}
{"text":"public function pairs(string $query, array $params = []): array\n\t{\n\t\treturn $this->all($query, $params, PDO::FETCH_KEY_PAIR);\n\t}","label":0}
{"text":"@NotNull\n    public Map<String, Set<String>> getIndexNamesAndAliases(String indexPattern) {\n        \/\/ only request indices matching the name or pattern in `indexPattern` and only get the alias names for each index,\n        \/\/ not the settings or mappings\n        final GetAliases request = new GetAliases.Builder()\n                .addIndex(indexPattern)\n                \/\/ ES 6 changed the \"expand_wildcards\" default value for the \/_alias API from \"open\" to \"all\".\n                \/\/ Since our code expects only open indices to be returned, we have to explicitly set the parameter now.\n                .setParameter(\"expand_wildcards\", \"open\")\n                .build();\n\n        final JestResult jestResult = JestUtils.execute(jestClient, request, () -> \"Couldn't collect aliases for index pattern \" + indexPattern);\n\n        final ImmutableMap.Builder<String, Set<String>> indexAliasesBuilder = ImmutableMap.builder();\n        final Iterator<Map.Entry<String, JsonNode>> it = jestResult.getJsonObject().fields();\n        while (it.hasNext()) {\n            final Map.Entry<String, JsonNode> entry = it.next();\n            final String indexName = entry.getKey();\n            final JsonNode aliasMetaData = entry.getValue().path(\"aliases\");\n            if (aliasMetaData.isObject()) {\n                final ImmutableSet<String> aliasNames = ImmutableSet.copyOf(aliasMetaData.fieldNames());\n                indexAliasesBuilder.put(indexName, aliasNames);\n            }\n        }\n\n        return indexAliasesBuilder.build();\n    }","label":0}
{"text":"public void marshall(ListRoutingProfilesRequest listRoutingProfilesRequest, ProtocolMarshaller protocolMarshaller) {\n\n        if (listRoutingProfilesRequest == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(listRoutingProfilesRequest.getInstanceId(), INSTANCEID_BINDING);\n            protocolMarshaller.marshall(listRoutingProfilesRequest.getNextToken(), NEXTTOKEN_BINDING);\n            protocolMarshaller.marshall(listRoutingProfilesRequest.getMaxResults(), MAXRESULTS_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }","label":0}
{"text":"public boolean get(long index) {\n    if (!(index < size))\n      throw new IndexOutOfBoundsException();\n    return (bytes.readLong(offset(index)) & (1l << (position(index)))) != 0;\n  }","label":0}
{"text":"public function hasColumn($column, $caseInsensitive = false)\n    {\n        if ($column instanceof Column) {\n            $column = $column->getName();\n        }\n\n        if ($caseInsensitive) {\n            return isset($this->columnsByLowercaseName[strtolower($column)]);\n        }\n\n        return isset($this->columnsByName[$column]);\n    }","label":0}
{"text":"func (s *InputSettings) SetSourceEndBehavior(v string) *InputSettings {\n\ts.SourceEndBehavior = &v\n\treturn s\n}","label":0}
{"text":"public function getDataForExport($filter, $columns = array())\n\t{\n        $select = $this->tableGateway->getSql()->select();\n        $select->columns(array('*'));\n        \n        $w = new Where();\n        $filters = array();\n        $likes = array();\n        \n        foreach($columns as $columnKeys) \n        {\n            $likes[] = new Like($columnKeys, '%'.$filter.'%');\n        }\n        \n        $filters = array(new PredicateSet($likes, PredicateSet::COMBINED_BY_OR));\n        \n        $select->where($filters);\n        \n        $resultSet = $this->tableGateway->selectWith($select);\n        \n        return $resultSet;\n        \n\t}","label":0}
{"text":"@Nonnull\n  public static DocumentBuilderFactory createDocumentBuilderFactory (@Nonnull final Schema aSchema)\n  {\n    ValueEnforcer.notNull (aSchema, \"Schema\");\n\n    final DocumentBuilderFactory aDocumentBuilderFactory = createDefaultDocumentBuilderFactory ();\n    aDocumentBuilderFactory.setSchema (aSchema);\n    return aDocumentBuilderFactory;\n  }","label":0}
{"text":"public static FilePathMapping buildFilePathMapping(JoinableResourceBundle bundle, String path,\n\t\t\tResourceReaderHandler rsHandler) {\n\n\t\tFilePathMapping fPathMapping = null;\n\t\tString filePath = rsHandler.getFilePath(path);\n\t\tif(filePath != null){\n\t\t\t\n\t\t\tFile f = new File(filePath);\n\t\t\tif(f.exists()){\n\t\t\t\tfPathMapping = new FilePathMapping(bundle, filePath, f.lastModified());\n\t\t\t\tif(bundle != null){\n\t\t\t\t\tbundle.getLinkedFilePathMappings().add(fPathMapping);\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\tif(LOGGER.isDebugEnabled()){\n\t\t\t\t\tLOGGER.debug(\"The file path '\"+filePath+\"'  associated to the URL '\"+path+\"' doesn't exixts.\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn fPathMapping;\n\t}","label":0}
{"text":"def help_center_article_subscription_show(self, article_id, id, locale=None, **kwargs):\n        \"\"\n        api_path = \"\/api\/v2\/help_center\/articles\/{article_id}\/subscriptions\/{id}.json\"\n        api_path = api_path.format(article_id=article_id, id=id)\n        if locale:\n            api_opt_path = \"\/api\/v2\/help_center\/{locale}\/articles\/{article_id}\/subscriptions\/{id}.json\"\n            api_path = api_opt_path.format(article_id=article_id, id=id, locale=locale)\n        return self.call(api_path, **kwargs)","label":0}
{"text":"func (c ConstantBool) Link(scope Scope, t TypeSpec) (ConstantValue, error) {\n\tif _, ok := RootTypeSpec(t).(*BoolSpec); !ok {\n\t\treturn nil, constantValueCastError{Value: c, Type: t}\n\t}\n\treturn c, nil\n}","label":0}
{"text":"public function fetchTemplate(Request $request, $template)\n    {\n        if (!$this->view instanceof Twig) {\n            throw new Exception(\"Twig provider not registered.\");\n        }\n\n        foreach ($this->settings['view']['global'] as $key => $map) {\n            $key = is_numeric($key) ? $map : $key;\n\n            switch ($key) {\n                case 'request':\n                    $value = $request;\n                    break;\n\n                default:\n                    $value = isset($this->container[$key]) ? $this->container[$key] : null;\n                    break;\n            }\n\n            $this->view->getEnvironment()->addGlobal($map, $value);\n        }\n\n        $result = $this->view->fetch(\n            $template . $this->settings['view']['extension'],\n            $this->data->all()\n        );\n\n        return $result;\n    }","label":0}
{"text":"func (e Event) Find(alias string) Field {\n\tfor _, field := range e.fields {\n\t\tif field.alias == alias {\n\t\t\treturn field\n\t\t}\n\t}\n\n\treturn Field{valid: false}\n}","label":0}
{"text":"private function filterDefaultValuesMap(array &$defaultValuesMap, $entity, $entityClass)\n    {\n        foreach ($defaultValuesMap as $targetProperty => $sourcePropertyPath) {\n            if (!$this->propertyAccessor->isReadable($entity, $targetProperty)) {\n                throw $this->createPropertyNotReadableException($entityClass, $targetProperty);\n            }\n\n            $value = $this->propertyAccessor->getValue($entity, $targetProperty);\n\n            if (null !== $value) {\n                unset($defaultValuesMap[$targetProperty]);\n            }\n        }\n    }","label":0}
{"text":"def cwd():\n    \"\"\"\"\"\"\n    cwd = os.environ.get(\"BE_CWD\")\n    if cwd and not os.path.isdir(cwd):\n        sys.stderr.write(\"ERROR: %s is not a directory\" % cwd)\n        sys.exit(lib.USER_ERROR)\n    return cwd or os.getcwd().replace(\"\\\\\", \"\/\")","label":0}
{"text":"protected function parseTitle() {\n    if (is_object($this->file)) {\n      if (isset($this->file->title)) {\n        return $this->file->title;\n      }\n    }\n\n    if (is_array($this->file)) {\n      if (isset($this->file['title'])) {\n        return $this->file['title'];\n      }\n    }\n\n    return '';\n  }","label":0}
{"text":"public function getListOptions(array $list = [], $default = [])\n    {\n        $options = [];\n        foreach ($list as $key => $value) {\n            $options[] = [\n                'value'        => $key,\n                'display-name' => $value,\n            ];\n            if (is_array($default) && in_array($key,$default)) {\n                $indice = count($options) - 1;\n                $options[$indice]['selected'] = '';\n            }\n        };\n        return $options;\n    }","label":0}
{"text":"private function parseProjectId($url)\n    {\n        $result = [];\n\n        \/\/ If it's a plain alphanumeric string, then it's an ID already.\n        if (!preg_match('\/\\W\/', $url)) {\n            $result['projectId'] = $url;\n\n            return $result;\n        }\n\n        $urlParts = parse_url($url);\n        if ($urlParts === false || empty($urlParts['host'])) {\n            return $result;\n        }\n\n        $this->debug('Parsing URL to determine project ID: ' . $url);\n\n        $host = $urlParts['host'];\n        $path = isset($urlParts['path']) ? $urlParts['path'] : '';\n        $fragment = isset($urlParts['fragment']) ? $urlParts['fragment'] : '';\n\n        $site_domains_pattern = '(' . implode('|', array_map('preg_quote', $this->config->get('detection.site_domains'))) . ')';\n        $site_pattern = '\/\\-\\w+\\.[a-z]{2}(\\-[0-9])?\\.' . $site_domains_pattern . '$\/';\n\n        if (preg_match($site_pattern, $host)) {\n            list($env_project_app,) = explode('.', $host, 2);\n            if (($tripleDashPos = strrpos($env_project_app, '---')) !== false) {\n                $env_project_app = substr($env_project_app, $tripleDashPos + 3);\n            }\n            if (($doubleDashPos = strrpos($env_project_app, '--')) !== false) {\n                $env_project = substr($env_project_app, 0, $doubleDashPos);\n                $result['appId'] = substr($env_project_app, $doubleDashPos + 2);\n            } else {\n                $env_project = $env_project_app;\n            }\n            if (($dashPos = strrpos($env_project, '-')) !== false) {\n                $result['projectId'] = substr($env_project, $dashPos + 1);\n                $result['environmentId'] = substr($env_project, 0, $dashPos);\n            }\n\n            return $result;\n        }\n\n        if (strpos($path, '\/projects\/') !== false || strpos($fragment, '\/projects\/') !== false) {\n            $result['host'] = $host;\n            $result['projectId'] = basename(preg_replace('#\/projects(\/\\w+)\/?.*$#', '$1', $url));\n            if (preg_match('#\/environments(\/[^\/]+)\/?.*$#', $url, $matches)) {\n                $result['environmentId'] = rawurldecode(basename($matches[1]));\n            }\n\n            return $result;\n        }\n\n        if ($this->config->has('detection.console_domain')\n            && $host === $this->config->get('detection.console_domain')\n            && preg_match('#^\/[a-z0-9-]+\/([a-z0-9-]+)(\/([^\/]+))?#', $path, $matches)) {\n            $result['projectId'] = $matches[1];\n            if (isset($matches[3])) {\n                $result['environmentId'] = rawurldecode($matches[3]);\n            }\n\n            return $result;\n        }\n\n        return $result;\n    }","label":0}
{"text":"func Init(s store.Store, ctx context.Context, ip string, act bool) error {\n\tactive = act \/\/ set active, auth always return success when unactive\n\tlocalIP = ip\n\tauthTable = make(map[string]containerInfo)\n\tdependsInvertTable = make(map[string]string)\n\tpodgroupInvertTable = make(map[string]string)\n\tvar err error\n\tdependsWatcher, err = watcher.New(s, ctx, dependsKey, dependsConvert, dependsInvertKey)\n\tif err != nil {\n\t\treturn err\n\t}\n\tpodgroupWatcher, err = watcher.New(s, ctx, podgroupKey, podgroupConvert, podgroupInvertKey)\n\tif err != nil {\n\t\treturn err\n\t}\n\tsuperAppsWatcher, err = watcher.New(s, ctx, superAppsStoreKey, superAppsConvert, superAppsInvertKey)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}","label":0}
{"text":"public function renderBadge($template)\n    {\n        $tpl = $this->getTwig()->createTemplate($template);\n\n        return $tpl->render(['app' => Yii::$app]);\n    }","label":0}
{"text":"func CheckSimpleCommand() (err error) {\n\tcli, err := newClient()\n\tif err != nil {\n\t\treturn fmt.Errorf(\"creating client: %v\", err)\n\t}\n\techoStr := \"hello\"\n\tconfig := &docker.ContainerConfig{\n\t\tImage: \"ubuntu:14.04\",\n\t\tCmd:   []string{\"echo\", \"-n\", echoStr},\n\t}\n\tcid, err := cli.CreateContainer(config, \"hellotest\")\n\tif err != nil {\n\t\treturn fmt.Errorf(\"creating container: %v\", err)\n\t}\n\tdefer func() {\n\t\trcErr := cli.RemoveContainer(cid, true, false)\n\t\tif err == nil {\n\t\t\terr = rcErr\n\t\t} else if rcErr != nil {\n\t\t\tfmt.Fprintf(os.Stderr, \"removing container %v\\n\", rcErr)\n\t\t}\n\t}()\n\n\t\/\/ attach to the container\n\tstreamOpts := &docker.AttachOptions{Stream: true, Stdout: true, Stderr: true}\n\tstream, err := cli.Attach(cid, streamOpts)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer stream.Close()\n\n\t\/\/ start the container\n\terr = cli.StartContainer(cid, &docker.HostConfig{})\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tvar stderr bytes.Buffer\n\tvar stdout bytes.Buffer\n\tif err = docker.SplitStream(stream, &stdout, &stderr); err != nil {\n\t\treturn fmt.Errorf(\"reading stdout: %v\", err)\n\t}\n\n\t\/\/ wait for the container to exit\n\texitCode, err := cli.Wait(cid)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tif exitCode != 0 {\n\t\treturn fmt.Errorf(\"bad exit code %d %s\", exitCode, stderr)\n\t}\n\tif out := stdout.String(); out != echoStr {\n\t\treturn fmt.Errorf(\"expected '%s' from echo, got '%s'\", echoStr, out)\n\t}\n\tif sErr := stderr.String(); sErr != \"\" {\n\t\treturn fmt.Errorf(\"expected no response from stderr, got '%s'\", sErr)\n\t}\n\n\treturn nil\n}","label":0}
{"text":"function fromString($modStr)\n    {\n        $this->_reset();\n\n        if (strpos($modStr, 'b') !== false) {\n            $this->asBinary();\n            $modStr = str_replace('b', '', $modStr); \/\/ remove binary sign\n        }\n\n        \/\/ default modes (r+):\n        $modXXX = array_search(strtolower($modStr), $this->mode_available);\n\n        \/\/ Mode XXX (RWB):\n        $modXXX = ($modXXX!==false) ? $modXXX : strtoupper($modStr);\n        for($i=0; $i < strlen($modXXX); $i++) {\n            $c = $modXXX[$i];\n            switch ($c) {\n                \/\/ BASE:\n                case 'R':\n                    $this->openForRead();\n                    break;\n                case 'W':\n                    $this->openForWrite();\n                    break;\n                \/\/ POINTER:\n                case 'A':\n                    $this->withPointerAtEnd();\n                    break;\n                case 'B':\n                    $this->withPointerAtBeginning();\n                    break;\n                \/\/ CREATE:\n                case 'C':\n                    $this->createFile();\n                    break;\n                case 'X':\n                    $this->createXFile();\n                    break;\n                \/\/ BIN:\n                case 'T':\n                    $this->doTruncate();\n                    break;\n                default:\n                    throw new \\InvalidArgumentException(sprintf(\n                        'Invalid Open Mode Format For (%s) Contains Unknown Char (%s).',\n                        $modStr, $c\n                    ));\n            }\n        }\n\n        return $this;\n    }","label":0}
{"text":"public void addXmlPreprocessingDigesterRules(Digester digester) {\n\n        digester.addCallMethod(CmsImportExportManager.N_EXPORT + \"\/\" + N_FILES + \"\/\" + N_FILE, \"increaseTotalFiles\");\n        digester.addCallMethod(\n            CmsImportExportManager.N_EXPORT\n                + \"\/\"\n                + CmsImportExportManager.N_INFO\n                + \"\/\"\n                + CmsImportExportManager.N_VERSION,\n            \"setVersion\",\n            0);\n    }","label":0}
{"text":"func (ps Points) Less(i, j int) bool {\n\t\/\/ Check X first.\n\tswitch {\n\tcase ps[i].x < ps[j].x:\n\t\treturn true\n\tcase ps[i].x > ps[j].x:\n\t\treturn false\n\t}\n\t\/\/ Now check Y.\n\tswitch {\n\tcase ps[i].y < ps[j].y:\n\t\treturn true\n\tcase ps[i].y > ps[j].y:\n\t\treturn false\n\t}\n\treturn false\n}","label":0}
{"text":"public static function get($enum)\n    {\n        if (null === self::$ClassNames) {\n            self::generateNamespace();\n            self::generateClassNamesArray();\n        }\n\n        if (!isset(self::$ClassNames[$enum])) {\n            throw new \\InvalidArgumentException('Invalid enum \"'.$enum.'\".');\n        }\n\n        $className = self::$Namespace.'\\\\'.self::$ClassNames[$enum];\n\n        return new $className();\n    }","label":0}
{"text":"function ajax(url, cb, data) {\n        var xhr = new(window.XMLHttpRequest || ActiveXObject)('Microsoft.XMLHTTP');\n\n        xhr.onreadystatechange = function () {\n            if (this.readyState == 4) {\n                if (this.status !== 200) {\n                    cb(this.responseText);\n                }\n                else {\n                    cb(null, this.responseText);\n                }\n            }\n        };\n        xhr.open(data ? 'POST' : 'GET', url + '&t=' + (new Date()).getTime(), true);\n\n        if (data) {\n            xhr.setRequestHeader('Content-type', 'application\/x-www-form-urlencoded');\n        }\n        xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\n        xhr.send(data);\n    }","label":0}
{"text":"def get_grid(self):\n        \n        mentions, lines = _split_text_n_lines(self.elems)\n        # Sort mentions in reading order where y values are snapped to half\n        # height-sized grid\n        mentions.sort(key=lambda m: (m.yc_grid, m.xc))\n\n        grid = Grid(mentions, lines, self)\n        return grid","label":0}
{"text":"def alreadyHasEntry(oldClassString, og):\n    \n    namespace = oldClassString.split(':')[0]\n    if namespace == 'http':\n        target = rdflib.URIRef(oldClassString)\n        print('OLD CLASS ID IS A URL', oldClassString)\n    else:\n        try:\n            og.add_known_namespaces(namespace)\n            target = og.expand(oldClassString)\n        except KeyError:\n            print('MISSING NAMESPACE', namespace, oldClassString)\n            return True  # we only want known namespaces\n    return (target, rdf.type, owl.Class) in og.g","label":0}
{"text":"def serialized_tag(tagname, str, additional_attributes = {}, &block)\n      str << \"<#{tagname} \"\n      serialized_attributes(str, additional_attributes)\n      if block_given?\n        str << '>'\n        yield\n        str << \"<\/#{tagname}>\"\n      else\n        str << '\/>'\n      end\n    end","label":0}
{"text":"def _construct_df(pdb_lines):\n        \"\"\"\"\"\"\n        valids = tuple(pdb_records.keys())\n        line_lists = {r: [] for r in valids}\n        line_lists['OTHERS'] = []\n        for line_num, line in enumerate(pdb_lines):\n            if line.strip():\n                if line.startswith(valids):\n                    record = line[:6].rstrip()\n                    line_ele = ['' for _ in range(len(\n                        pdb_records[record]) + 1)]\n                    for idx, ele in enumerate(pdb_records[record]):\n                        line_ele[idx] = (line[ele['line'][0]:ele['line'][1]]\n                                         .strip())\n                    line_ele[-1] = line_num\n                    line_lists[record].append(line_ele)\n                else:\n                    line_lists['OTHERS'].append([line[:6].rstrip(),\n                                                line[6:-1].rstrip(), line_num])\n\n        dfs = {}\n        for r in line_lists.items():\n            df = pd.DataFrame(r[1], columns=[c['id'] for c in\n                                             pdb_records[r[0]]] + ['line_idx'])\n            for c in pdb_records[r[0]]:\n                try:\n                    df[c['id']] = df[c['id']].astype(c['type'])\n                except ValueError:\n                    # expect ValueError if float\/int columns are empty strings\n                    df[c['id']] = pd.Series(np.nan, index=df.index)\n\n            dfs[r[0]] = df\n        return dfs","label":0}
{"text":"protected function getPreferredLocaleValue($path)\n    {\n        $multiLocaleString = $this->getValueForPath($path);\n\n        $locale = '';\n        if (isset($multiLocaleString['preferredLocale'])) {\n            $locale = $multiLocaleString['preferredLocale']['language'];\n            if (!empty($multiLocaleString['preferredLocale']['country'])) {\n                $locale .= '_'.$multiLocaleString['preferredLocale']['country'];\n            }\n        }\n\n        if (isset($multiLocaleString['localized'][$locale])) {\n            return $multiLocaleString['localized'][$locale];\n        }\n\n        $fallbackLocale = array_keys($multiLocaleString['localized'])[0];\n\n        return $multiLocaleString['localized'][$fallbackLocale];\n    }","label":0}
{"text":"func (authy *Authy) StartPhoneVerification(countryCode int, phoneNumber string, via string, params url.Values) (*PhoneVerificationStart, error) {\n\tparams.Set(\"country_code\", strconv.Itoa(countryCode))\n\tparams.Set(\"phone_number\", phoneNumber)\n\tparams.Set(\"via\", via)\n\n\tpath := fmt.Sprintf(\"\/protected\/json\/phones\/verification\/start\")\n\tresponse, err := authy.DoRequest(\"POST\", path, params)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tdefer closeResponseBody(response)\n\treturn NewPhoneVerificationStart(response)\n}","label":0}
{"text":"public function scheduleForUpdate($document)\n    {\n        $oid = spl_object_hash($document);\n        if ( ! isset($this->documentIdentifiers[$oid])) {\n            throw new \\InvalidArgumentException(\"Document has no identity.\");\n        }\n        if (isset($this->documentDeletions[$oid])) {\n            throw new \\InvalidArgumentException(\"Document is removed.\");\n        }\n\n        if ( ! isset($this->documentUpdates[$oid]) && ! isset($this->documentInsertions[$oid]) && ! isset($this->documentUpserts[$oid])) {\n            $this->documentUpdates[$oid] = $document;\n        }\n    }","label":0}
{"text":"private function getAssignedValue()\n    {\n        $this->match(DocLexer::T_IDENTIFIER);\n\n        $tokens = array(\n            array(DocLexer::T_IDENTIFIER, $this->lexer->token['value']),\n            array(DocLexer::T_EQUALS),\n        );\n\n        $this->match(DocLexer::T_EQUALS);\n\n        return array_merge($tokens, $this->getPlainValue());\n    }","label":0}
{"text":"function _storeFooter()\r\n    {\r\n        $record  = 0x0015;               \/\/ Record identifier\r\n\r\n        $str      = $this->_footer;       \/\/ Footer string\r\n        $cch      = strlen($str);         \/\/ Length of footer string\r\n        if ($this->_BIFF_version == 0x0600) {\r\n            $encoding = 0x0;                  \/\/ TODO: Unicode support\r\n            $length   = 3 + $cch;             \/\/ Bytes to follow\r\n        } else {\r\n            $length  = 1 + $cch;\r\n        }\r\n\r\n        $header    = pack(\"vv\", $record, $length);\r\n        if ($this->_BIFF_version == 0x0600) {\r\n            $data      = pack(\"vC\",  $cch, $encoding);\r\n        } else {\r\n            $data      = pack(\"C\",  $cch);\r\n        }\r\n\r\n        $this->_prepend($header . $data . $str);\r\n    }","label":0}
{"text":"protected function Read()\r\n\t{\r\n\t\t$ch;\r\n\t\tif ( count( $this->m_buffer ) > 0 )\r\n\t\t{\r\n\t\t    $ch = array_shift( $this->m_buffer );\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t    $c = $this->m_reader->read();\r\n\t\t    if ( $c == -1 )\r\n\t\t        return '\\0';\r\n\t\t    else\r\n\t\t        $ch = $c;\r\n\t\t}\r\n\t\tif ( $ch != '\\r' )\r\n\t\t{\r\n\t\t    if ( $ch == '\\n' )\r\n\t\t    {\r\n\t\t        $this->LineNo++;\r\n\t\t        $this->ColNo = 1;\r\n\t\t    }\r\n\t\t    else\r\n\t\t        ++$this->ColNo;\r\n\t\t}\r\n\t\t$this->m_position++;\r\n\t\treturn $ch;\r\n\t}","label":0}
{"text":"private static String trimMarksFromAffix(String affix) {\n        boolean hasBidiMark = false;\n        int idx = 0;\n        for (; idx < affix.length(); idx++) {\n            if (isBidiMark(affix.charAt(idx))) {\n                hasBidiMark = true;\n                break;\n            }\n        }\n        if (!hasBidiMark) {\n            return affix;\n        }\n\n        StringBuilder buf = new StringBuilder();\n        buf.append(affix, 0, idx);\n        idx++;  \/\/ skip the first Bidi mark\n        for (; idx < affix.length(); idx++) {\n            char c = affix.charAt(idx);\n            if (!isBidiMark(c)) {\n                buf.append(c);\n            }\n        }\n\n        return buf.toString();\n    }","label":0}
{"text":"function fetchConfig(){\n    var config = __config;\n\n    if (!config)\n    {\n      if (NODE_ENV)\n      {\n        \/\/ node.js env\n        basisFilename = process.basisjsFilename || __filename.replace(\/\\\\\/g, '\/');\n\n        \/** @cut *\/ if (process.basisjsConfig)\n        \/** @cut *\/ {\n        \/** @cut *\/   config = process.basisjsConfig;\n        \/** @cut *\/   if (typeof config == 'string')\n        \/** @cut *\/   {\n        \/** @cut *\/     try {\n        \/** @cut *\/       config = Function('return{' + config + '}')();\n        \/** @cut *\/     } catch(e) {\n        \/** @cut *\/       \/** @cut *\/ consoleMethods.error('basis-config: basis.js config parse fault: ' + e);\n        \/** @cut *\/     }\n        \/** @cut *\/   }\n        \/** @cut *\/ }\n      }\n      else\n      {\n        \/\/ browser env\n        var scripts = document.scripts;\n        for (var i = 0, scriptEl; scriptEl = scripts[i]; i++)\n        {\n          var configAttrValue = scriptEl.hasAttribute('basis-config')\n            ? scriptEl.getAttribute('basis-config')\n            : scriptEl.getAttribute('data-basis-config');\n\n          scriptEl.removeAttribute('basis-config');\n          scriptEl.removeAttribute('data-basis-config');\n\n          if (configAttrValue !== null)\n          {\n            basisFilename = pathUtils.normalize(scriptEl.src);\n\n            try {\n              config = Function('return{' + configAttrValue + '}')();\n            } catch(e) {\n              \/** @cut *\/ consoleMethods.error('basis-config: basis.js config parse fault: ' + e);\n            }\n\n            break;\n          }\n        }\n\n        if (!basisFilename)\n        {\n          basisFilename = pathUtils.normalize(scripts[0].src);\n          \/** @cut *\/ consoleMethods.warn('basis-config: no `basis-config` marker on any script tag is found. All paths will be resolved relative to `src` from the first `script` tag.');\n        }\n      }\n    }\n\n    return processConfig(config);\n  }","label":0}
{"text":"public function clipLower(float $min)\n    {\n        $b = [];\n\n        foreach ($this->a as $value) {\n            if ($value < $min) {\n                $b[] = $min;\n\n                continue 1;\n            }\n\n            $b[] = $value;\n        }\n\n        return static::quick($b);\n    }","label":0}
{"text":"def str2tuple(str_in):\n    '''\n    \n    '''\n    tuple_out = safe_eval(str_in)\n    if not isinstance(tuple_out, tuple):\n        tuple_out = None\n    return tuple_out","label":0}
{"text":"def create_response(self, data=None):\n        \n        frame = deepcopy(self)\n        if data is not None:\n            frame.data = data\n        frame.length = 2 + len(frame.data)\n        return frame","label":0}
{"text":"private static void handleResourceLoader(final Object resourceLoader, final ClassLoader classLoader,\n            final ClasspathOrder classpathOrderOut, final ScanSpec scanSpec, final LogNode log) {\n        if (resourceLoader == null) {\n            return;\n        }\n        \/\/ PathResourceLoader has root field, which is a Path object\n        final Object root = ReflectionUtils.getFieldVal(resourceLoader, \"root\", false);\n        \/\/ type VirtualFile\n        final File physicalFile = (File) ReflectionUtils.invokeMethod(root, \"getPhysicalFile\", false);\n        String path = null;\n        if (physicalFile != null) {\n            final String name = (String) ReflectionUtils.invokeMethod(root, \"getName\", false);\n            if (name != null) {\n                \/\/ getParentFile() removes \"contents\" directory\n                final File file = new File(physicalFile.getParentFile(), name);\n                if (FileUtils.canRead(file)) {\n                    path = file.getAbsolutePath();\n                } else {\n                    \/\/ This is an exploded jar or classpath directory\n                    path = physicalFile.getAbsolutePath();\n                }\n            } else {\n                path = physicalFile.getAbsolutePath();\n            }\n        } else {\n            path = (String) ReflectionUtils.invokeMethod(root, \"getPathName\", false);\n            if (path == null) {\n                \/\/ Try Path or File\n                final File file = root instanceof Path ? ((Path) root).toFile()\n                        : root instanceof File ? (File) root : null;\n                if (file != null) {\n                    path = file.getAbsolutePath();\n                }\n            }\n        }\n        if (path == null) {\n            final File file = (File) ReflectionUtils.getFieldVal(resourceLoader, \"fileOfJar\", false);\n            if (file != null) {\n                path = file.getAbsolutePath();\n            }\n        }\n        if (path != null) {\n            classpathOrderOut.addClasspathEntry(path, classLoader, scanSpec, log);\n        } else {\n            if (log != null) {\n                log.log(\"Could not determine classpath for ResourceLoader: \" + resourceLoader);\n            }\n        }\n    }","label":0}
{"text":"public float dot(IntFloatVector y) {\n        if (y instanceof IntFloatSortedVector) {\n            IntFloatSortedVector other = ((IntFloatSortedVector) y);\n            float dot = 0;\n            int oc = 0;\n            for (int c = 0; c < used; c++) {\n                while (oc < other.used) {\n                    if (other.indices[oc] < indices[c]) {\n                        oc++;\n                    } else if (indices[c] == other.indices[oc]) {\n                        dot += values[c] * other.values[oc];\n                        break;\n                    } else {\n                        break;\n                    }\n                }\n            }\n            return dot;\n        } else {\n            float dot = 0;\n            for (int c = 0; c < used; c++) {\n                dot += this.values[c] * y.get(indices[c]);\n            }\n            return dot;\n        }\n    }","label":0}
{"text":"def fields_from_json(json)\n      fields = {\n        :transaction_id => json['x_trans_id'],\n        :invoice_num => json['x_invoice_num'],\n        :subscription_id => json['x_subscription_id'],\n        :subscription_paynum => json['x_subscription_paynum'],\n        :transaction_type => json['x_type'],\n        :card_type => json['x_card_type'],\n        :account_number => json['x_account_number'],\n        :description => json['x_description'],\n        :response_reason_code => json['x_response_reason_code'],\n        :response_reason_text => json['x_response_reason_text']\n      }\n      begin\n        fields[:amount] = BigDecimal.new(json['x_amount'])\n      rescue TypeError\n        fields[:amount] = nil\n      end\n      return fields\n    end","label":0}
{"text":"public String getCase() {\n    if (PronounFeats_Type.featOkTst && ((PronounFeats_Type)jcasType).casFeat_case == null)\n      jcasType.jcas.throwFeatMissing(\"case\", \"de.julielab.jules.types.PronounFeats\");\n    return jcasType.ll_cas.ll_getStringValue(addr, ((PronounFeats_Type)jcasType).casFeatCode_case);}","label":0}
{"text":"func AllServiceGroups(g osgraph.Graph, excludeNodeIDs IntSet) ([]ServiceGroup, IntSet) {\n\tcovered := IntSet{}\n\tservices := []ServiceGroup{}\n\n\tfor _, uncastNode := range g.NodesByKind(kubegraph.ServiceNodeKind) {\n\t\tif excludeNodeIDs.Has(uncastNode.ID()) {\n\t\t\tcontinue\n\t\t}\n\n\t\tservice, covers := NewServiceGroup(g, uncastNode.(*kubegraph.ServiceNode))\n\t\tcovered.Insert(covers.List()...)\n\t\tservices = append(services, service)\n\t}\n\n\tsort.Sort(ServiceGroupByObjectMeta(services))\n\treturn services, covered\n}","label":0}
{"text":"func Origin(config *Config, req *http.Request) (*url.URL, error) {\n\tvar origin string\n\tswitch config.Version {\n\tcase ProtocolVersionHybi13:\n\t\torigin = req.Header.Get(\"Origin\")\n\t}\n\tif origin == \"null\" {\n\t\treturn nil, nil\n\t}\n\treturn url.ParseRequestURI(origin)\n}","label":0}
{"text":"public function collect($data)\n    {\n        $this->_map = $this->objectToArray($data);\n        $this->_baseContents = &$this->_map;\n\n        return $this;\n    }","label":0}
{"text":"protected function populateStructure()\n    {\n        $treeStructure = [\n            'blacklist_request' => [\n                'card_number'    => $this->card_number,\n                'terminal_token' => $this->terminal_token\n            ]\n        ];\n\n        $this->treeStructure = \\Genesis\\Utils\\Common::createArrayObject($treeStructure);\n    }","label":0}
{"text":"function prohibit(node) {\n            if (node.operator !== \"=\") {\n                context.report({\n                    node,\n                    messageId: \"unexpected\",\n                    fix(fixer) {\n                        if (canBeFixed(node.left)) {\n                            const operatorToken = getOperatorToken(node);\n                            const leftText = sourceCode.getText().slice(node.range[0], operatorToken.range[0]);\n                            const newOperator = node.operator.slice(0, -1);\n                            let rightText;\n\n                            \/\/ If this change would modify precedence (e.g. `foo *= bar + 1` => `foo = foo * (bar + 1)`), parenthesize the right side.\n                            if (\n                                astUtils.getPrecedence(node.right) <= astUtils.getPrecedence({ type: \"BinaryExpression\", operator: newOperator }) &&\n                                !astUtils.isParenthesised(sourceCode, node.right)\n                            ) {\n                                rightText = `${sourceCode.text.slice(operatorToken.range[1], node.right.range[0])}(${sourceCode.getText(node.right)})`;\n                            } else {\n                                rightText = sourceCode.text.slice(operatorToken.range[1], node.range[1]);\n                            }\n\n                            return fixer.replaceText(node, `${leftText}= ${leftText}${newOperator}${rightText}`);\n                        }\n                        return null;\n                    }\n                });\n            }\n        }","label":0}
{"text":"protected Property getSwaggerProperty(Swagger swagger, Class<?> objectClass) {\n        Property swaggerProperty = null;\n        if (byte.class == objectClass || Byte.class == objectClass) {\n            \/\/ STRING\n            swaggerProperty = new StringProperty(\"byte\");\n        } else if (char.class == objectClass || Character.class == objectClass) {\n            \/\/ CHAR is STRING LEN 1\n            StringProperty property = new StringProperty();\n            property.setMaxLength(1);\n            swaggerProperty = property;\n        } else if (short.class == objectClass || Short.class == objectClass) {\n            \/\/ SHORT is INTEGER with 16-bit max & min\n            IntegerProperty property = new IntegerProperty();\n            property.setMinimum(BigDecimal.valueOf(Short.MIN_VALUE));\n            property.setMaximum(BigDecimal.valueOf(Short.MAX_VALUE));\n            swaggerProperty = property;\n        } else if (int.class == objectClass || Integer.class == objectClass) {\n            \/\/ INTEGER\n            swaggerProperty = new IntegerProperty();\n        } else if (long.class == objectClass || Long.class == objectClass) {\n            \/\/ LONG\n            swaggerProperty = new LongProperty();\n        } else if (float.class == objectClass || Float.class == objectClass) {\n            \/\/ FLOAT\n            swaggerProperty = new FloatProperty();\n        } else if (double.class == objectClass || Double.class == objectClass) {\n            \/\/ DOUBLE\n            swaggerProperty = new DoubleProperty();\n        } else if (BigDecimal.class == objectClass) {\n            \/\/ DECIMAL\n            swaggerProperty = new DecimalProperty();\n        } else if (boolean.class == objectClass || Boolean.class == objectClass) {\n            \/\/ BOOLEAN\n            swaggerProperty = new BooleanProperty();\n        } else if (String.class == objectClass) {\n            \/\/ STRING\n            swaggerProperty = new StringProperty();\n        } else if (Date.class == objectClass || Timestamp.class == objectClass) {\n            \/\/ DATETIME\n            swaggerProperty = new DateTimeProperty();\n        } else if (java.sql.Date.class == objectClass) {\n            \/\/ DATE\n            swaggerProperty = new DateProperty();\n        } else if (java.sql.Time.class == objectClass) {\n            \/\/ TIME -> STRING\n            StringProperty property = new StringProperty();\n            property.setPattern(\"HH:mm:ss\");\n            swaggerProperty = property;\n        } else if (UUID.class == objectClass) {\n            \/\/ UUID\n            swaggerProperty = new UUIDProperty();\n        } else if (objectClass.isEnum()) {\n            \/\/ ENUM\n            StringProperty property = new StringProperty();\n            List<String> enumValues = new ArrayList<>();\n            for (Object enumValue : objectClass.getEnumConstants()) {\n                enumValues.add(((Enum) enumValue).name());\n            }\n            property.setEnum(enumValues);\n            swaggerProperty = property;\n        } else if (FileItem.class == objectClass) {\n            \/\/ FILE UPLOAD\n            swaggerProperty = new FileProperty();\n        } else {\n            \/\/ Register a Model class\n            String modelRef = registerModel(swagger, objectClass);\n            swaggerProperty = new RefProperty(modelRef);\n        }\n        return swaggerProperty;\n    }","label":0}
{"text":"func (client *FakeTabletManagerClient) SlaveWasRestarted(ctx context.Context, tablet *topodatapb.Tablet, parent *topodatapb.TabletAlias) error {\n\treturn nil\n}","label":0}
{"text":"function normalizeOpts(obj, basedir, pkg) {\n    obj = obj || {};\n\n    u.each(OPTSKEYS, function(key) {\n      obj[key] = normalizeOptsKey(obj[key], basedir, pkg);\n    });\n\n    normalizeFqImages(obj);\n\n    return obj;\n  }","label":0}
{"text":"protected function setDefaultMetadataCache($cache, ServiceLocatorInterface $serviceLocator)\n    {\n        $metadataCache = null;\n\n        if (is_string($cache)) {\n            if ($serviceLocator->has($cache)) {\n                $metadataCache = $serviceLocator->get($cache);\n            }\n        } else if ($cache instanceof Zend_Cache_Core) {\n            $metadataCache = $cache;\n        }\n\n        if ($metadataCache instanceof Zend_Cache_Core) {\n            Zend_Db_Table::setDefaultMetadataCache($metadataCache);\n        }\n\n    }","label":0}
{"text":"def append(self, sc):\n        \n        ae = sc.aesthetics[0]\n        cover_ae = self.find(ae)\n        if any(cover_ae):\n            warn(_TPL_DUPLICATE_SCALE.format(ae), PlotnineWarning)\n            idx = cover_ae.index(True)\n            self.pop(idx)\n        # super() does not work well with reloads\n        list.append(self, sc)","label":0}
{"text":"public void connect(String dn, String credentials) {\n        BindRequest bindRequest = new BindRequestImpl();\n        bindRequest.setCredentials(credentials);\n        try {\n            bindRequest.setDn(new Dn(dn));\n            connection.connect();\n            connection.bind(bindRequest);\n            ((LdapNetworkConnection) connection).loadSchema(new DefaultSchemaLoader(connection));\n        } catch (Exception e) {\n            throw new LdapDaoException(e);\n        }\n    }","label":0}
{"text":"String\nrrToString()\n{\n\tStringBuffer sb = new StringBuffer();\n\tsb.append(next);\n\tif (!types.empty()) {\n\t\tsb.append(' ');\n\t\tsb.append(types.toString());\n\t}\n\treturn sb.toString();\n}","label":0}
{"text":"func (c *Database) ExecuteSQL(databaseId string, query string) ([]string, []interface{}, *DatabaseError, error) {\n\tvar v DatabaseExecuteSQLParams\n\tv.DatabaseId = databaseId\n\tv.Query = query\n\treturn c.ExecuteSQLWithParams(&v)\n}","label":0}
{"text":"public function hasAccessToComment($commentID)\n    {\n\n        $this->isLoggedIn();\n\n        $userid = $this->di->get(\"session\")->get(\"userid\");\n        $comment = new Comment();\n        $comment->setDb($this->di->get(\"db\"));\n        $user = new User();\n        $user->setDb($this->di->get(\"db\"));\n\n        $user->find(\"id\", $userid);\n        $comment->find(\"id\", $commentID);\n\n        if (($comment->user_id == $userid) || $this->isAdmin()) {\n            return true;\n        }\n        $this->di->get(\"response\")->redirect(\"user\");\n        return false;\n    }","label":0}
{"text":"public Quaterniond integrate(double dt, double vx, double vy, double vz, Quaterniond dest) {\n        double thetaX = dt * vx * 0.5;\n        double thetaY = dt * vy * 0.5;\n        double thetaZ = dt * vz * 0.5;\n        double thetaMagSq = thetaX * thetaX + thetaY * thetaY + thetaZ * thetaZ;\n        double s;\n        double dqX, dqY, dqZ, dqW;\n        if (thetaMagSq * thetaMagSq \/ 24.0 < 1E-8) {\n            dqW = 1.0 - thetaMagSq * 0.5;\n            s = 1.0 - thetaMagSq \/ 6.0;\n        } else {\n            double thetaMag = Math.sqrt(thetaMagSq);\n            double sin = Math.sin(thetaMag);\n            s = sin \/ thetaMag;\n            dqW = Math.cosFromSin(sin, thetaMag);\n        }\n        dqX = thetaX * s;\n        dqY = thetaY * s;\n        dqZ = thetaZ * s;\n        \/* Pre-multiplication *\/\n        dest.set(dqW * x + dqX * w + dqY * z - dqZ * y,\n                 dqW * y - dqX * z + dqY * w + dqZ * x,\n                 dqW * z + dqX * y - dqY * x + dqZ * w,\n                 dqW * w - dqX * x - dqY * y - dqZ * z);\n        return dest;\n    }","label":0}
{"text":"func New(certFile, keyFile string, loadCert LoadX509KeyPairFunc) (*Certs, error) {\n\tcertFileIsLink, err := checkSymlink(certFile)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tkeyFileIsLink, err := checkSymlink(keyFile)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tc := &Certs{\n\t\tcertFile: certFile,\n\t\tkeyFile:  keyFile,\n\t\tloadCert: loadCert,\n\t\t\/\/ Make the channel buffered to ensure no event is dropped. Notify will drop\n\t\t\/\/ an event if the receiver is not able to keep up the sending pace.\n\t\te: make(chan notify.EventInfo, 1),\n\t}\n\n\tif certFileIsLink && keyFileIsLink {\n\t\tif err := c.watchSymlinks(); err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t} else {\n\t\tif err := c.watch(); err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\n\treturn c, nil\n}","label":0}
{"text":"protected void scanDir(File srcDir, File destDir, String[] files, String ext)\n\t{\n\t\t\/\/ If no source path was specified, we effectively created one by adding the generation\n\t\t\/\/ path.   Because of this, we need to be sure and add all source dirs to the path too.\n\t\tif (!_hasSourcepath)\n\t\t{\n\t\t\tPath srcPath = new Path(getProject());\n\t\t\tsrcPath.setLocation(srcDir);\n\t\t\tsetSourcepath(srcPath);\n\t\t}\n\n\t\tGlobPatternMapper m = new GlobPatternMapper();\n\t\tm.setFrom(ext);\n\t\tm.setTo(\"*.class\");\n\t\tSourceFileScanner sfs = new SourceFileScanner(this);\n\t\tif (ext.equals(\"*.java\"))\n\t\t{\n\t\t\tFile[] newFiles = sfs.restrictAsFiles(files, srcDir, destDir, m);\n\t\t\tif (newFiles.length > 0)\n\t\t\t{\n\t\t\t\tFile[] newCompileList = new File[compileList.length + newFiles.length];\n\t\t\t\tSystem.arraycopy(compileList, 0, newCompileList, 0, compileList.length);\n\t\t\t\tSystem.arraycopy(newFiles, 0, newCompileList, compileList.length,\n\t\t\t\t\t\tnewFiles.length);\n\t\t\t\tcompileList = newCompileList;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tString [] newSources = sfs.restrict(files, srcDir, destDir, m);\n\t\t\tint extLen = ext.length() - 1;  \/\/ strip wildcard\n\t\t\tif (newSources.length > 0)\n\t\t\t{\n\t\t\t\tFile[] newCompileList = new File[compileList.length + newSources.length];\n\t\t\t\tSystem.arraycopy(compileList, 0, newCompileList, 0, compileList.length);\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tFileUtils fileUtils = FileUtils.newFileUtils();\n\t\t\t\t\tfor (int j = 0; j < newSources.length; j++)\n\t\t\t\t\t{\n\t\t\t\t\t\tString toName =\n\t\t\t\t\t\t\t\tnewSources[j].substring(0, newSources[j].length() - extLen) +\n\t\t\t\t\t\t\t\t\t\t\".java\";\n\n\t\t\t\t\t\tFile srcFile = new File(srcDir, newSources[j]);\n\t\t\t\t\t\tFile dstFile = new File(_genDir, toName);\n\t\t\t\t\t\tfileUtils.copyFile(srcFile, dstFile, null, true, true);\n\t\t\t\t\t\tnewCompileList[compileList.length + j] = dstFile;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcatch (IOException ioe)\n\t\t\t\t{\n\t\t\t\t\tthrow new BuildException(\"Unable to copy \" + ext + \" file\", ioe,\n\t\t\t\t\t\t\tgetLocation());\n\t\t\t\t}\n\t\t\t\tcompileList = newCompileList;\n\t\t\t}\n\t\t}\n\t}","label":0}
{"text":"public function pause()\n    {\n        if ($this->paused) { return $this; }\n        $this->input->pause();\n        $this->paused = true;\n        $this->emit('pause');\n        return $this;\n    }","label":0}
{"text":"public void initialize() {\n        \/*\n         * Use a set to ensure we ignore duplicates.\n         *\/\n        val attributes = new HashSet<String>();\n        LOGGER.debug(\"Initializing LDAP attribute configuration...\");\n        if (StringUtils.isNotBlank(this.principalIdAttribute)) {\n            LOGGER.debug(\"Configured to retrieve principal id attribute [{}]\", this.principalIdAttribute);\n            attributes.add(this.principalIdAttribute);\n        }\n        if (this.principalAttributeMap != null && !this.principalAttributeMap.isEmpty()) {\n            val attrs = this.principalAttributeMap.keySet();\n            attributes.addAll(attrs);\n            LOGGER.debug(\"Configured to retrieve principal attribute collection of [{}]\", attrs);\n        }\n        if (authenticator.getReturnAttributes() != null) {\n            val authenticatorAttributes = CollectionUtils.wrapList(authenticator.getReturnAttributes());\n            if (!authenticatorAttributes.isEmpty()) {\n                LOGGER.debug(\"Filtering authentication entry attributes [{}] based on authenticator attributes [{}]\", authenticatedEntryAttributes, authenticatorAttributes);\n                attributes.removeIf(authenticatorAttributes::contains);\n            }\n        }\n        this.authenticatedEntryAttributes = attributes.toArray(ArrayUtils.EMPTY_STRING_ARRAY);\n        LOGGER.debug(\"LDAP authentication entry attributes for the authentication request are [{}]\", (Object[]) this.authenticatedEntryAttributes);\n    }","label":0}
{"text":"public static function _media_templates() {\n\t\t$id_prefix = 'tmpl-menu-icons';\n\n\t\t\/\/ Deprecated.\n\t\t$templates = apply_filters( 'menu_icons_media_templates', array() );\n\n\t\tif ( ! empty( $templates ) ) {\n\t\t\tif ( WP_DEBUG ) {\n\t\t\t\t_deprecated_function( 'menu_icons_media_templates', '0.9.0', 'menu_icons_js_templates' );\n\t\t\t}\n\n\t\t\tforeach ( $templates as $key => $template ) {\n\t\t\t\t$id = sprintf( '%s-%s', $id_prefix, $key );\n\t\t\t\tself::_print_tempate( $id, $template );\n\t\t\t}\n\t\t}\n\n\t\trequire_once dirname( __FILE__ ) . '\/media-template.php';\n\t}","label":0}
{"text":"function avg(input, output) {\n\n  var event = input[0];\n  if (event.what === 0 && event.total === 0) {\n    return [];\n  }\n  return [ output, [ 'total', cyan + event.what.toFixed(3) + close ],\n    [ 'average', cyan + (event.what \/ event.total).toFixed(3) + close ],\n    [ 'max', cyan + event.max.toFixed(3) + close ],\n    [ 'min', cyan + event.min.toFixed(3) + close ], [ '' ] ];\n}","label":0}
{"text":"function(template) {\n      if (template) {\n        \/\/ make a shadow root\n        var root = this.createShadowRoot();\n        \/\/ stamp template\n        \/\/ which includes parsing and applying MDV bindings before being\n        \/\/ inserted (to avoid {{}} in attribute values)\n        \/\/ e.g. to prevent <img src=\"images\/{{icon}}\"> from generating a 404.\n        var dom = this.instanceTemplate(template);\n        \/\/ append to shadow dom\n        root.appendChild(dom);\n        \/\/ perform post-construction initialization tasks on shadow root\n        this.shadowRootReady(root, template);\n        \/\/ return the created shadow root\n        return root;\n      }\n    }","label":0}
{"text":"protected function _actionDelete(AnCommandContext $context)\n    {\n        $this->getService('repos:components')\n             ->fetchSet()\n             ->registerEventDispatcher($this->getService('anahita:event.dispatcher'));\n\n        $result = parent::_actionDelete($context);\n\n        $this->getService('anahita:event.dispatcher')\n             ->dispatchEvent('onDeleteActor', array(\n                'actor_id' => $this->getItem()->id,\n                ));\n\n        return $result;\n    }","label":0}
{"text":"public EClass getIfcFontStyle() {\r\n\t\tif (ifcFontStyleEClass == null) {\r\n\t\t\tifcFontStyleEClass = (EClass) EPackage.Registry.INSTANCE.getEPackage(Ifc2x3tc1Package.eNS_URI)\r\n\t\t\t\t\t.getEClassifiers().get(676);\r\n\t\t}\r\n\t\treturn ifcFontStyleEClass;\r\n\t}","label":0}
{"text":"func (c *BitcoindConn) getCurrentNet() (wire.BitcoinNet, error) {\n\thash, err := c.client.GetBlockHash(0)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\n\tswitch *hash {\n\tcase *chaincfg.TestNet3Params.GenesisHash:\n\t\treturn chaincfg.TestNet3Params.Net, nil\n\tcase *chaincfg.RegressionNetParams.GenesisHash:\n\t\treturn chaincfg.RegressionNetParams.Net, nil\n\tcase *chaincfg.MainNetParams.GenesisHash:\n\t\treturn chaincfg.MainNetParams.Net, nil\n\tdefault:\n\t\treturn 0, fmt.Errorf(\"unknown network with genesis hash %v\", hash)\n\t}\n}","label":0}
{"text":"int guessPayloadLength() {\n    int length = 0;\n    \/\/ Total guess at average size of map entry\n    try {\n      Map<String,Object> payload = getBodyMap();\n      length = payload.size()*60;\n    }\n    catch (UnsupportedEncodingException e) {\n      \/\/ No FFDC code needed\n      \/\/ hmm... how do we figure out a reasonable length\n    }\n    return length;\n  }","label":0}
{"text":"public function addWord($word, $value = 1)\n    {\n        if (isset($this->wordsArray[$word])) {\n            $this->wordsArray[$word] += $value;\n        } else {\n            $this->wordsArray[$word] = $value;\n        }\n    }","label":0}
{"text":"public function isValid() {\n        $valid = parent::isValid();\n        if (!filter_var($this->getValue(), FILTER_VALIDATE_EMAIL)) {\n            $valid = false;\n        }\n        \n        return $valid;\n    }","label":0}
{"text":"protected void registerToplevelSecurityExceptions() {\n\n    this.securityExceptions.add(SecurityException.class);\n    this.securityExceptions.add(SecurityErrorUserException.class);\n    registerToplevelSecurityExceptions(\"org.springframework.security.access.AccessDeniedException\");\n    registerToplevelSecurityExceptions(\"org.springframework.security.authentication.AuthenticationServiceException\");\n    registerToplevelSecurityExceptions(\n        \"org.springframework.security.authentication.AuthenticationCredentialsNotFoundException\");\n    registerToplevelSecurityExceptions(\"org.springframework.security.authentication.BadCredentialsException\");\n    registerToplevelSecurityExceptions(\"org.springframework.security.authentication.AccountExpiredException\");\n  }","label":0}
{"text":"@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n    static <T> T wrapConnection(T connection, Origin<T> pool) {\n\n        ReturnObjectOnCloseInvocationHandler<T> handler = new ReturnObjectOnCloseInvocationHandler<T>(connection, pool);\n\n        Class<?>[] implementedInterfaces = connection.getClass().getInterfaces();\n        Class[] interfaces = new Class[implementedInterfaces.length + 1];\n        interfaces[0] = HasTargetConnection.class;\n        System.arraycopy(implementedInterfaces, 0, interfaces, 1, implementedInterfaces.length);\n\n        T proxiedConnection = (T) Proxy.newProxyInstance(connection.getClass().getClassLoader(), interfaces, handler);\n        handler.setProxiedConnection(proxiedConnection);\n\n        return proxiedConnection;\n    }","label":0}
{"text":"function loadFieldsModel(){\n\t\t\tconst initialFieldsModel = angular.isArray(scope.edaEasyFormViewerEasyFormGeneratorFieldsModel)\n        ? loadExistingConfigurationModel(scope.edaEasyFormViewerEasyFormGeneratorFieldsModel) \/\/translate easy form generator to formly fields model\n\t\t\t\t: {};\n\t\t\treturn initialFieldsModel;\n\t\t}","label":0}
{"text":"public static function create(string $signature, array $protectedHeader, ?string $encodedProtectedHeader, array $header = []): self\n    {\n        return new self($signature, $protectedHeader, $encodedProtectedHeader, $header);\n    }","label":0}
{"text":"protected function throwException($message)\n    {\n\n        $near = $this->isAtEnd() ? 'END' : $this->peek(10);\n        $message = \"Failed to lex jade: $message (Line: {$this->line}, Offset: {$this->offset}, Near: `$near`)\";\n        throw new Exception($message);\n    }","label":0}
{"text":"public function setContentHeader($contentType, $charset = 'UTF-8')\n    {\n        if (!$this->response) {\n           return $this->getResponse()->setContentHeader($contentType, $charset);\n        }\n        return parent::setContentHeader($contentType, $charset);\n    }","label":0}
{"text":"func (r *Request) SetQuery(name, value string) *Request {\n\tr.Use(query.Set(name, value))\n\treturn r\n}","label":0}
{"text":"public function attributes(array $names = null)\n    {\n        if (!$this->node instanceof DOMElement) {\n            return null;\n        }\n\n        if ($names === null) {\n            $result = [];\n\n            foreach ($this->node->attributes as $name => $attribute) {\n                $result[$name] = $attribute->value;\n            }\n\n            return $result;\n        }\n\n        $result = [];\n\n        foreach ($this->node->attributes as $name => $attribute) {\n            if (in_array($name, $names, true)) {\n                $result[$name] = $attribute->value;\n            }\n        }\n\n        return $result;\n    }","label":0}
{"text":"def parse string\n      self.styles.inject(string) do |str, (name, options)|\n        glyph, style = options[:match], options[:style]\n        if glyph.is_a? Array\n          str.gsub(\/#{Regexp.escape(glyph.first)}(.*?)\n                    #{Regexp.escape(glyph.last)}\/x) { stylize $1, style }\n        else\n          str.gsub(\/(#{Regexp.escape(glyph)}+)(.*?)\\1\/) { stylize $2, style }\n        end\n      end\n    end","label":0}
{"text":"def run(self, module, options):\n        \n        logger.debug(\"Running maintainability harvester\")\n        return dict(self.harvester.results)","label":0}
{"text":"public CalendarWeek minus(Weeks weeks) {\n\n        if (weeks.isEmpty()) {\n            return this;\n        }\n\n        PlainDate date = this.start.getTemporal().minus(weeks.getAmount(), CalendarUnit.WEEKS);\n        int y = date.getInt(YEAR_OF_WEEKDATE);\n        int w = date.getInt(WEEK_OF_YEAR);\n        return CalendarWeek.of(y, w);\n\n    }","label":0}
{"text":"public static function umask(int $umask = null): int\n    {\n        $oldUmask = self::$umask;\n        if (null !== $umask) {\n            self::$umask = $umask;\n        }\n\n        return $oldUmask;\n    }","label":0}
{"text":"func (n *RequestObserver) Join(req *http.Request, connectionID uint64) {\n\tn.state.id = connectionID\n\tn.state.websocketConnected = n.clock.Now()\n\n\tn.logger.Debugf(\n\t\t\"[%X] API connection from %s\",\n\t\tn.state.id,\n\t\treq.RemoteAddr,\n\t)\n}","label":0}
{"text":"func (e *Elasticsearch) Gather(acc telegraf.Accumulator) error {\n\tif e.client == nil {\n\t\tclient, err := e.createHttpClient()\n\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\te.client = client\n\t}\n\n\tvar wg sync.WaitGroup\n\twg.Add(len(e.Servers))\n\n\tfor _, serv := range e.Servers {\n\t\tgo func(s string, acc telegraf.Accumulator) {\n\t\t\tdefer wg.Done()\n\t\t\turl := e.nodeStatsUrl(s)\n\t\t\te.isMaster = false\n\n\t\t\tif e.ClusterStats {\n\t\t\t\t\/\/ get cat\/master information here so NodeStats can determine\n\t\t\t\t\/\/ whether this node is the Master\n\t\t\t\tif err := e.setCatMaster(s + \"\/_cat\/master\"); err != nil {\n\t\t\t\t\tacc.AddError(fmt.Errorf(mask.ReplaceAllString(err.Error(), \"http(s):\/\/XXX:XXX@\")))\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t\/\/ Always gather node states\n\t\t\tif err := e.gatherNodeStats(url, acc); err != nil {\n\t\t\t\tacc.AddError(fmt.Errorf(mask.ReplaceAllString(err.Error(), \"http(s):\/\/XXX:XXX@\")))\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tif e.ClusterHealth {\n\t\t\t\turl = s + \"\/_cluster\/health\"\n\t\t\t\tif e.ClusterHealthLevel != \"\" {\n\t\t\t\t\turl = url + \"?level=\" + e.ClusterHealthLevel\n\t\t\t\t}\n\t\t\t\tif err := e.gatherClusterHealth(url, acc); err != nil {\n\t\t\t\t\tacc.AddError(fmt.Errorf(mask.ReplaceAllString(err.Error(), \"http(s):\/\/XXX:XXX@\")))\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif e.ClusterStats && (e.isMaster || !e.ClusterStatsOnlyFromMaster || !e.Local) {\n\t\t\t\tif err := e.gatherClusterStats(s+\"\/_cluster\/stats\", acc); err != nil {\n\t\t\t\t\tacc.AddError(fmt.Errorf(mask.ReplaceAllString(err.Error(), \"http(s):\/\/XXX:XXX@\")))\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t}\n\t\t}(serv, acc)\n\t}\n\n\twg.Wait()\n\treturn nil\n}","label":0}
{"text":"func NewAdxrForStream(priceStream gotrade.DOHLCVStreamSubscriber, timePeriod int) (indicator *Adxr, err error) {\n\tind, err := NewAdxr(timePeriod)\n\tpriceStream.AddTickSubscription(ind)\n\treturn ind, err\n}","label":0}
{"text":"public function revParse($arg = null, Array $options = array())\n    {\n        $this->clearAll();\n        $this->addCommandName(self::GIT_REV_PARSE_COMMAND);\n        \/\/ if there are options add them.\n        if (! is_null($options)) {\n            foreach ($options as $option) {\n                $this->addCommandArgument($option);\n            }\n        }\n        if (! is_null($arg)) {\n            $this->addCommandSubject2($arg);\n        }\n\n        return $this->getCommand();\n    }","label":0}
{"text":"public function aggregate($collectionName, $pipelines, $options = [])\n    {\n        foreach ($pipelines as $key => $pipeline) {\n            if (isset($pipeline['$match'])) {\n                $pipelines[$key]['$match'] = $this->buildCondition($pipeline['$match']);\n            }\n        }\n\n        $document = array_merge(\n            [\n                'aggregate' => $collectionName,\n                'pipeline' => $pipelines,\n                'allowDiskUse' => false,\n            ],\n            $options\n        );\n\n        return $document;\n    }","label":0}
{"text":"func (in *WebhookThrottleConfig) DeepCopy() *WebhookThrottleConfig {\n\tif in == nil {\n\t\treturn nil\n\t}\n\tout := new(WebhookThrottleConfig)\n\tin.DeepCopyInto(out)\n\treturn out\n}","label":0}
{"text":"public void service(HttpServletRequest req, HttpServletResponse res) \n        throws ServletException, IOException\n    {\n        String regex = this.getProperty(REGEX);\n        String server = req.getServerName();\n        if (regex != null)\n        \tif (server != null)\n        {\n        \tString match = null;\n        \tif (regex.indexOf('\/') != -1)\n        \t{\n        \t    match = regex.substring(regex.indexOf('\/'));\n        \t    regex = regex.substring(0, regex.indexOf('\/'));\n        \t}\n        \tif (server.matches(regex))\n\t        {\n        \t\tString target = this.getProperty(REGEX_TARGET);\n        \t\tif (target != null)\n        \t\t{\n        \t        if (logger != null)\n        \t        \tlogger.info(\"Redirect \" + server + \" to \" + target);\n                    String requestPath = req.getServletPath();\n        \t        if ((match == null) || (requestPath.matches(match)))\n        \t        \tres.sendRedirect(target);\n        \t        else\n        \t        {\n        \t            boolean fileFound = sendResourceFile(req, res);\n        \t            if (!fileFound)\n        \t                res.sendError(HttpServletResponse.SC_NOT_FOUND, \"File not found\");\n        \t        }\n                    return;\n        \t\t}\n\t        }\n        }\n    \tsuper.service(req, res);\n    }","label":0}
{"text":"function (req, res) {\n      req.session.loggedIn = true;\n      if (config.oauth2.validateHostedDomain) {\n        req.session.allowedDomain = config.oauth2.hostedDomain;\n      }\n      var redirect = req.session.oauth2return || '\/';\n      delete req.session.oauth2return;\n      res.redirect(redirect);\n    }","label":0}
{"text":"function _fnDraw( oSettings )\r\n\t{\r\n\t\t\/* Provide a pre-callback function which can be used to cancel the draw is false is returned *\/\r\n\t\tvar aPreDraw = _fnCallbackFire( oSettings, 'aoPreDrawCallback', 'preDraw', [oSettings] );\r\n\t\tif ( $.inArray( false, aPreDraw ) !== -1 )\r\n\t\t{\r\n\t\t\t_fnProcessingDisplay( oSettings, false );\r\n\t\t\treturn;\r\n\t\t}\r\n\t\r\n\t\tvar i, iLen, n;\r\n\t\tvar anRows = [];\r\n\t\tvar iRowCount = 0;\r\n\t\tvar asStripeClasses = oSettings.asStripeClasses;\r\n\t\tvar iStripes = asStripeClasses.length;\r\n\t\tvar iOpenRows = oSettings.aoOpenRows.length;\r\n\t\tvar oLang = oSettings.oLanguage;\r\n\t\tvar iInitDisplayStart = oSettings.iInitDisplayStart;\r\n\t\tvar bServerSide = _fnDataSource( oSettings ) == 'ssp';\r\n\t\tvar aiDisplay = oSettings.aiDisplay;\r\n\t\r\n\t\toSettings.bDrawing = true;\r\n\t\r\n\t\t\/* Check and see if we have an initial draw position from state saving *\/\r\n\t\tif ( iInitDisplayStart !== undefined && iInitDisplayStart !== -1 )\r\n\t\t{\r\n\t\t\toSettings._iDisplayStart = bServerSide ?\r\n\t\t\t\tiInitDisplayStart :\r\n\t\t\t\tiInitDisplayStart >= oSettings.fnRecordsDisplay() ?\r\n\t\t\t\t\t0 :\r\n\t\t\t\t\tiInitDisplayStart;\r\n\t\r\n\t\t\toSettings.iInitDisplayStart = -1;\r\n\t\t}\r\n\t\r\n\t\tvar iDisplayStart = oSettings._iDisplayStart;\r\n\t\tvar iDisplayEnd = oSettings.fnDisplayEnd();\r\n\t\r\n\t\t\/* Server-side processing draw intercept *\/\r\n\t\tif ( oSettings.bDeferLoading )\r\n\t\t{\r\n\t\t\toSettings.bDeferLoading = false;\r\n\t\t\toSettings.iDraw++;\r\n\t\t\t_fnProcessingDisplay( oSettings, false );\r\n\t\t}\r\n\t\telse if ( !bServerSide )\r\n\t\t{\r\n\t\t\toSettings.iDraw++;\r\n\t\t}\r\n\t\telse if ( !oSettings.bDestroying && !_fnAjaxUpdate( oSettings ) )\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\r\n\t\tif ( aiDisplay.length !== 0 )\r\n\t\t{\r\n\t\t\tvar iStart = bServerSide ? 0 : iDisplayStart;\r\n\t\t\tvar iEnd = bServerSide ? oSettings.aoData.length : iDisplayEnd;\r\n\t\r\n\t\t\tfor ( var j=iStart ; j<iEnd ; j++ )\r\n\t\t\t{\r\n\t\t\t\tvar iDataIndex = aiDisplay[j];\r\n\t\t\t\tvar aoData = oSettings.aoData[ iDataIndex ];\r\n\t\t\t\tif ( aoData.nTr === null )\r\n\t\t\t\t{\r\n\t\t\t\t\t_fnCreateTr( oSettings, iDataIndex );\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tvar nRow = aoData.nTr;\r\n\t\r\n\t\t\t\t\/* Remove the old striping classes and then add the new one *\/\r\n\t\t\t\tif ( iStripes !== 0 )\r\n\t\t\t\t{\r\n\t\t\t\t\tvar sStripe = asStripeClasses[ iRowCount % iStripes ];\r\n\t\t\t\t\tif ( aoData._sRowStripe != sStripe )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t$(nRow).removeClass( aoData._sRowStripe ).addClass( sStripe );\r\n\t\t\t\t\t\taoData._sRowStripe = sStripe;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\t\/* Row callback functions - might want to manipulate the row *\/\r\n\t\t\t\t_fnCallbackFire( oSettings, 'aoRowCallback', null,\r\n\t\t\t\t\t[nRow, aoData._aData, iRowCount, j] );\r\n\t\r\n\t\t\t\tanRows.push( nRow );\r\n\t\t\t\tiRowCount++;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\t\/* Table is empty - create a row with an empty message in it *\/\r\n\t\t\tvar sZero = oLang.sZeroRecords;\r\n\t\t\tif ( oSettings.iDraw == 1 &&  _fnDataSource( oSettings ) == 'ajax' )\r\n\t\t\t{\r\n\t\t\t\tsZero = oLang.sLoadingRecords;\r\n\t\t\t}\r\n\t\t\telse if ( oLang.sEmptyTable && oSettings.fnRecordsTotal() === 0 )\r\n\t\t\t{\r\n\t\t\t\tsZero = oLang.sEmptyTable;\r\n\t\t\t}\r\n\t\r\n\t\t\tanRows[ 0 ] = $( '<tr\/>', { 'class': iStripes ? asStripeClasses[0] : '' } )\r\n\t\t\t\t.append( $('<td \/>', {\r\n\t\t\t\t\t'valign':  'top',\r\n\t\t\t\t\t'colSpan': _fnVisbleColumns( oSettings ),\r\n\t\t\t\t\t'class':   oSettings.oClasses.sRowEmpty\r\n\t\t\t\t} ).html( sZero ) )[0];\r\n\t\t}\r\n\t\r\n\t\t\/* Header and footer callbacks *\/\r\n\t\t_fnCallbackFire( oSettings, 'aoHeaderCallback', 'header', [ $(oSettings.nTHead).children('tr')[0],\r\n\t\t\t_fnGetDataMaster( oSettings ), iDisplayStart, iDisplayEnd, aiDisplay ] );\r\n\t\r\n\t\t_fnCallbackFire( oSettings, 'aoFooterCallback', 'footer', [ $(oSettings.nTFoot).children('tr')[0],\r\n\t\t\t_fnGetDataMaster( oSettings ), iDisplayStart, iDisplayEnd, aiDisplay ] );\r\n\t\r\n\t\tvar body = $(oSettings.nTBody);\r\n\t\r\n\t\tbody.children().detach();\r\n\t\tbody.append( $(anRows) );\r\n\t\r\n\t\t\/* Call all required callback functions for the end of a draw *\/\r\n\t\t_fnCallbackFire( oSettings, 'aoDrawCallback', 'draw', [oSettings] );\r\n\t\r\n\t\t\/* Draw is complete, sorting and filtering must be as well *\/\r\n\t\toSettings.bSorted = false;\r\n\t\toSettings.bFiltered = false;\r\n\t\toSettings.bDrawing = false;\r\n\t}","label":0}
{"text":"def get_queryset(self, *args, **kwargs):\n        \n        qs = super(TreeManager, self).get_queryset(*args, **kwargs)\n\n        # Restrict operations to pages on the current site if needed\n        if settings.PAGES_HIDE_SITES and settings.PAGES_USE_SITE_ID:\n            return qs.order_by(self.tree_id_attr, self.left_attr).filter(sites=settings.SITE_ID)\n        else:\n            return qs.order_by(self.tree_id_attr, self.left_attr)","label":0}
{"text":"func (m *SetQuadMotorsSetpoint) Decode(buf []byte) {\n\tdata := bytes.NewBuffer(buf)\n\tbinary.Read(data, binary.LittleEndian, &m.MOTOR_FRONT_NW)\n\tbinary.Read(data, binary.LittleEndian, &m.MOTOR_RIGHT_NE)\n\tbinary.Read(data, binary.LittleEndian, &m.MOTOR_BACK_SE)\n\tbinary.Read(data, binary.LittleEndian, &m.MOTOR_LEFT_SW)\n\tbinary.Read(data, binary.LittleEndian, &m.TARGET_SYSTEM)\n}","label":0}
{"text":"def reelect_app(self, request, app):\n        \"\"\"\"\"\"\n\n        # disconnect app explicitly to break possibly existing connection\n        app.disconnect()\n        endpoints_size = len(app.locator.endpoints)\n\n        # try x times, where x is the number of different endpoints in app locator.\n        for _ in xrange(0, endpoints_size + 1):\n            # last chance to take app from common pool\n            if len(app.locator.endpoints) == 0:\n                request.logger.info(\n                    \"giving up on connecting to dist-info hosts, falling back to common pool processing\")\n                app = yield self.proxy.reelect_app(request, app)\n                raise gen.Return(app)\n\n            try:\n                # always create new locator to prevent locking as we do connect with timeout\n                # however lock can be still held during TCP timeout\n                locator = Locator(endpoints=app.locator.endpoints)\n                request.logger.info(\"connecting to locator %s\", locator.endpoints[0])\n\n                # first try to connect to locator only on remote host with timeout\n                yield gen.with_timeout(self.service_connect_timeout, locator.connect())\n                request.logger.debug(\"connected to locator %s for %s\", locator.endpoints[0], app.name)\n                app = Service(app.name, locator=locator, timeout=RESOLVE_TIMEOUT)\n\n                # try to resolve and connect to application itself\n                yield gen.with_timeout(self.service_connect_timeout, app.connect())\n                request.logger.debug(\"connected to application %s via %s\", app.name, app.endpoints)\n            except gen.TimeoutError:\n                # on timeout try next endpoint first\n                request.logger.warning(\"timed out while connecting to application\")\n                continue\n            except ServiceError as err:\n                request.logger.warning(\"got error while resolving app - %s\", err)\n                if err.category in LOCATORCATEGORY and err.code == ESERVICENOTAVAILABLE:\n                    # if the application is down - also try next endpoint\n                    continue\n                else:\n                    raise err\n            finally:\n                # drop first endpoint to start next connection from different endpoint\n                # we do this, as default logic of connection attempts in locator do not fit here\n                app.locator.endpoints = app.locator.endpoints[1:]\n            # return connected app\n            raise gen.Return(app)\n        raise PluginApplicationError(42, 42, \"could not connect to application\")","label":0}
{"text":"public function posted($method = 'post')\n    {\n        $postIndicator = $this->getPostIndicator();\n\n        if ($postIndicator->posted($method)) {\n            if ($method == 'post') {\n                $this->setValues($_POST, $_FILES);\n            } else if ($method == 'get') {\n                $this->setValues($_GET);\n            }\n            return true;\n        }\n\n        return false;\n    }","label":0}
{"text":"function subscribeWhenReady(doctype, socket) {\n  if (socket.readyState === WEBSOCKET_STATE.OPEN) {\n    try {\n      socket.send(\n        JSON.stringify({\n          method: 'SUBSCRIBE',\n          payload: {\n            type: doctype\n          }\n        })\n      )\n    } catch (error) {\n      \/\/ eslint-disable-next-line no-console\n      console.warn(`Cannot subscribe to doctype ${doctype}: ${error.message}`)\n      throw error\n    }\n  } else {\n    setTimeout(() => {\n      subscribeWhenReady(doctype, socket)\n    }, 10)\n  }\n}","label":0}
{"text":"public function getBDestructor($family)\n    {\n        if(!array_key_exists($family, $this->destructorsB))\n        {\n            throw new CoreException('\u0414\u0435\u0441\u0442\u0440\u0443\u043a\u0442\u043e\u0440 \u0430\u0433\u0440\u0435\u0433\u0430\u0442\u043d\u044b\u0445(B) \u0442\u0438\u043f\u043e\u0432 \u043f\u0430\u043a\u0435\u0442\u0430 '.$family.' \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\u0430 \u0432 \u043c\u0435\u0434\u0438\u0430\u0442\u043e\u0440\u0435!');\n        }\n\n        return $this->destructorsB[$family];\n    }","label":0}
{"text":"def flush_cache(name=nil)\n      if name\n        name = name.to_s\n        self.cache_hash[name] &&= nil\n      else\n        logger.warn \"RConfig: Flushing config data cache.\"\n        self.suffixes        = {}\n        self.cache           = {}\n        self.cache_files     = {}\n        self.cache_hash      = {}\n        self.last_auto_check = {}\n        self\n      end\n    end","label":0}
{"text":"public static void setJVMProxy(String host, String port) {\n\t\tSystem.setProperty(JVM_PROXY_HOST_PROPERTY, host);\n\t\tSystem.setProperty(JVM_PROXY_PORT_PROPERTY, port);\n\t}","label":0}
{"text":"def get_filters(self):\n        \n        return dict(\n            moment_format=self.format,\n            moment_calendar=self.calendar,\n            moment_fromnow=self.from_now,\n        )","label":0}
{"text":"public static function parseError(RequestException $requestException, $isAssoc = true)\n\t{\n\n\t\t$error = $error = json_decode($requestException->getResponse()->getBody(), $isAssoc);\n\n\t\tif (!is_null($error))\n\t\t{\n\t\t\treturn $error;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn $requestException->getMessage();\n\t\t}\n\t}","label":0}
{"text":"def split(self):\n        \n        try:\n            first, second = self.uri.rsplit('\/', 1)\n        except ValueError:\n            first = ''\n            second = self.uri\n        # we might be already on the root\n        if first.endswith('\/\/'):\n            first = first + '\/'\n        if not first:\n            first = '.'\n        return (self.__class__(\n            first,\n            sep=self.sep,\n            **self._extras()\n            ),\n            second.partition('?')[0]\n            )","label":0}
{"text":"public function getPhpunitXmlDir($searchedDirs = [])\n    {\n        $locations = array_merge([$this->getSystemService()->getCurrentWorkingDirectory()], $searchedDirs);\n        $path      = null;\n\n        foreach ($locations as $location) {\n            if ($this->getFilesystemService()->isReadableFile($location.'\/phpunit.xml')) {\n                $path = $this->getFilesystemService()->getRealPath($location);\n                break;\n            }\n            if ($this->getFilesystemService()->isReadableFile($location.'\/phpunit.xml.dist')) {\n                $path = $this->getFilesystemService()->getRealPath($location);\n                break;\n            }\n        }\n\n        return $path ? $path : '.';\n    }","label":0}
{"text":"def retrieve_order(self, order_id):\n        \"\"\"\"\"\"\n\n        response = self.request(E.retrieveOrderSslCertRequest(\n            E.id(order_id)\n        ))\n\n        return response.as_model(SSLOrder)","label":0}
{"text":"public OutputStream extractData(\n                    final ClientHttpResponse response\n                    )\n    throws IOException\n    {\n        IoUtil.copy( response.getBody(), _output );\n\n        return _output;\n    }","label":0}
{"text":"def user_specific_data_directory(user_context):\n  \"\"\"\"\"\"\n  return  os.path.join(\n    user_context.steam.userdata_directory,\n    user_context.user_id\n  )","label":0}
{"text":"public static <E> void shuffle(List<E> list) {\n        int swapPlace = -1;\n        \n        for(int i = 0; i < list.size(); i++) { \n            swapPlace = (int) (Math.random() * (list.size() - 1));\n            TrivialSwap.swap(list, i, swapPlace);\n        }\n\t}","label":0}
{"text":"func New() (clone *Clone) {\n\tclone = &Clone{}\n\tclone.pipe, _ = zmq.NewSocket(zmq.PAIR)\n\tpipename := fmt.Sprint(\"inproc:\/\/pipe\", pipe_nmb)\n\tpipe_nmb++\n\tclone.pipe.Bind(pipename)\n\tgo clone_agent(pipename)\n\treturn\n}","label":0}
{"text":"def _get_query_spec(cls, params):\n    \"\"\"\"\"\"\n    entity_kind = params[cls.ENTITY_KIND_PARAM]\n    filters = params.get(cls.FILTERS_PARAM)\n    app = params.get(cls._APP_PARAM)\n    ns = params.get(cls.NAMESPACE_PARAM)\n\n    return model.QuerySpec(\n        entity_kind=cls._get_raw_entity_kind(entity_kind),\n        keys_only=bool(params.get(cls.KEYS_ONLY_PARAM, False)),\n        filters=filters,\n        batch_size=int(params.get(cls.BATCH_SIZE_PARAM, cls._BATCH_SIZE)),\n        model_class_path=entity_kind,\n        app=app,\n        ns=ns)","label":0}
{"text":"public function getFks($table): array\n\t{\n\t\t$returnRows = [];\n\n\t\tforeach(parent::getFks($table) as $row)\n\t\t{\n\t\t\t$returnRows[] = [\n\t\t\t\t'child_column' => $row['from'],\n\t\t\t\t'parent_table' => $row['table'],\n\t\t\t\t'parent_column' => $row['to'],\n\t\t\t\t'update' => $row['on_update'],\n\t\t\t\t'delete' => $row['on_delete']\n\t\t\t];\n\t\t}\n\n\t\treturn $returnRows;\n\t}","label":0}
{"text":"public function getAsset($assetType, $assetHandle)\n    {\n        return isset($this->assets[$assetType][$assetHandle]) ? $this->assets[$assetType][$assetHandle] : null;\n    }","label":0}
{"text":"def module(self):\n        \n        modname = ffi.string(lib.EnvDefglobalModule(self._env, self._glb))\n        defmodule = lib.EnvFindDefmodule(self._env, modname)\n\n        return Module(self._env, defmodule)","label":0}
{"text":"private void ensureExpiration() {\n\n        boolean expirationDateSet = false;\n        boolean releaseDateSet = false;\n        if (getFilterQueries() != null) {\n            for (String fq : getFilterQueries()) {\n                if (fq.startsWith(CmsSearchField.FIELD_DATE_EXPIRED + \":\")) {\n                    expirationDateSet = true;\n                }\n                if (fq.startsWith(CmsSearchField.FIELD_DATE_RELEASED + \":\")) {\n                    releaseDateSet = true;\n                }\n            }\n        }\n        if (!expirationDateSet) {\n            addFilterQuery(CmsSearchField.FIELD_DATE_EXPIRED + \":[NOW TO *]\");\n        }\n        if (!releaseDateSet) {\n            addFilterQuery(CmsSearchField.FIELD_DATE_RELEASED + \":[* TO NOW]\");\n        }\n    }","label":0}
{"text":"@Override\n  public void write(char[] cbuf, int off, int len) throws IOException {\n    if(len <= 0) {\n      return;\n    }\n    \/\/ if we havn't last seen a newline, and don't get a CR, insert a newline.\n    if(charsSinceNewline > 0) {\n      if(cbuf[off] != CARRIAGE_RETURN) {\n        super.write(NEWLINEC, 0, NEWLINEC.length);\n        charsSinceNewline = 0;\n      }\n      else {\n        \/\/ length of this line:\n        int nonnl = countNonNewline(cbuf, off + 1, len - 1);\n        \/\/ clear the existing chars.\n        if(nonnl < charsSinceNewline) {\n          super.write(CARRIAGE_RETURN);\n          while(charsSinceNewline > 0) {\n            final int n = Math.min(charsSinceNewline, WHITESPACE.length());\n            super.write(WHITESPACE, 0, n);\n            charsSinceNewline -= n;\n          }\n        }\n        else {\n          charsSinceNewline = 0;\n        }\n      }\n    }\n    charsSinceNewline = tailingNonNewline(cbuf, off, len);\n    super.write(cbuf, off, len);\n    flush();\n  }","label":0}
{"text":"protected function addRecipient(string $headerName, string $address, array $variables): self\n    {\n        $compiledAddress = $this->parseAddress($address, $variables);\n\n        if ('h:reply-to' === $headerName) {\n            $this->message[$headerName] = $compiledAddress;\n        } elseif (isset($this->message[$headerName])) {\n            $this->message[$headerName][] = $compiledAddress;\n        } else {\n            $this->message[$headerName] = [$compiledAddress];\n        }\n        if (array_key_exists($headerName, $this->counters['recipients'])) {\n            ++$this->counters['recipients'][$headerName];\n        }\n\n        return $this;\n    }","label":0}
{"text":"func NewIntFlag(fl cli.IntFlag) *IntFlag {\n\treturn &IntFlag{IntFlag: fl, set: nil}\n}","label":0}
{"text":"func (p *packetConn) WriteTo(b []byte, addr net.Addr) (int, error) {\n\treturn 0, ErrNotImplemented\n}","label":0}
{"text":"public static ServletContextHandler create(Map<String, WebSocketHandlerWrapper> webSocketHandlers,\n                                               Optional<Integer> webSocketIdleTimeoutMillis) {\n        ServletContextHandler webSocketServletContextHandler = null;\n        if (webSocketHandlers != null) {\n            try {\n                webSocketServletContextHandler = new ServletContextHandler(null, \"\/\", true, false);\n                WebSocketUpgradeFilter webSocketUpgradeFilter = WebSocketUpgradeFilter.configureContext(webSocketServletContextHandler);\n                if (webSocketIdleTimeoutMillis.isPresent()) {\n                    webSocketUpgradeFilter.getFactory().getPolicy().setIdleTimeout(webSocketIdleTimeoutMillis.get());\n                }\n                \/\/ Since we are configuring WebSockets before the ServletContextHandler and WebSocketUpgradeFilter is\n                \/\/ even initialized \/ started, then we have to pre-populate the configuration that will eventually\n                \/\/ be used by Jetty's WebSocketUpgradeFilter.\n                NativeWebSocketConfiguration webSocketConfiguration = (NativeWebSocketConfiguration) webSocketServletContextHandler\n                    .getServletContext().getAttribute(NativeWebSocketConfiguration.class.getName());\n                for (String path : webSocketHandlers.keySet()) {\n                    WebSocketCreator webSocketCreator = WebSocketCreatorFactory.create(webSocketHandlers.get(path));\n                    webSocketConfiguration.addMapping(new ServletPathSpec(path), webSocketCreator);\n                }\n            } catch (Exception ex) {\n                logger.error(\"creation of websocket context handler failed.\", ex);\n                webSocketServletContextHandler = null;\n            }\n        }\n        return webSocketServletContextHandler;\n    }","label":0}
{"text":"def _encode_to_binary_string(message, on, off):\n    \n    def to_string(i, s):\n        if i == 0 and s == off:\n            return off * 4\n        return s\n    return ''.join(to_string(i, s) for i, s in enumerate(_encode_binary(message, on=on, off=off)))","label":0}
{"text":"def _create_buttons\n      $log.debug \"XXX: INSIDE create_buttons col_offset #{@col_offset} \"\n      v = Variable.new\n      r = @button_row # @row + 1\n      col = @col + @col_offset\n      @tabs.each_with_index { |t, i| \n        txt = t.text\n        @buttons << TabButton.new(nil) do \n          variable v\n          text  txt\n          name  txt\n          #value txt\n          row  r\n          col col\n          surround_chars ['','']\n          selected_bgcolor 'green'\n          selected_color 'white'\n\n        end\n        b = @buttons.last\n        b.command do\n          set_current_tab i\n        end\n        b.form = @form\n        b.override_graphic  @graphic\n        col += txt.length + @button_gap\n      }\n    end","label":0}
{"text":"func (ps *Plugins) Register(name string, plugin Factory) {\n\tps.lock.Lock()\n\tdefer ps.lock.Unlock()\n\tif ps.registry != nil {\n\t\t_, found := ps.registry[name]\n\t\tif found {\n\t\t\tklog.Fatalf(\"Admission plugin %q was registered twice\", name)\n\t\t}\n\t} else {\n\t\tps.registry = map[string]Factory{}\n\t}\n\n\tklog.V(1).Infof(\"Registered admission plugin %q\", name)\n\tps.registry[name] = plugin\n}","label":0}
{"text":"function indexTriple(g, { subject, predicate, object }) {\n  if (!workingPredicates.includes(predicate)) return;\n  if (!(isIri(subject) && isIri(predicate)) || g[subject] && g[subject][predicate] && g[subject][predicate].includes(object)) return;\n\n  upsert(g, subject, predicate, object);\n\n  g.nTriples++;\n\n  if (isIri(object)) upsert(g, object, `_${predicate}`, subject);\n}","label":0}
{"text":"func (rb *repoBuilder) GenerateTimestamp(prev *data.SignedTimestamp) ([]byte, int, error) {\n\tswitch {\n\tcase rb.repo.cryptoService == nil:\n\t\treturn nil, 0, ErrInvalidBuilderInput{msg: \"cannot generate timestamp without a cryptoservice\"}\n\tcase rb.IsLoaded(data.CanonicalTimestampRole):\n\t\treturn nil, 0, ErrInvalidBuilderInput{msg: \"timestamp has already been loaded\"}\n\t}\n\n\t\/\/ SignTimestamp always serializes the loaded snapshot and signs in the data, so we must always\n\t\/\/ have the snapshot loaded first\n\tif err := rb.checkPrereqsLoaded([]data.RoleName{data.CanonicalRootRole, data.CanonicalSnapshotRole}); err != nil {\n\t\treturn nil, 0, err\n\t}\n\n\tswitch prev {\n\tcase nil:\n\t\tif err := rb.repo.InitTimestamp(); err != nil {\n\t\t\trb.repo.Timestamp = nil\n\t\t\treturn nil, 0, err\n\t\t}\n\tdefault:\n\t\tif err := data.IsValidTimestampStructure(prev.Signed); err != nil {\n\t\t\treturn nil, 0, err\n\t\t}\n\t\trb.repo.Timestamp = prev\n\t}\n\n\tsgnd, err := rb.repo.SignTimestamp(data.DefaultExpires(data.CanonicalTimestampRole))\n\tif err != nil {\n\t\trb.repo.Timestamp = nil\n\t\treturn nil, 0, err\n\t}\n\n\tsgndJSON, err := json.Marshal(sgnd)\n\tif err != nil {\n\t\trb.repo.Timestamp = nil\n\t\treturn nil, 0, err\n\t}\n\n\t\/\/ The snapshot should have been loaded (and not checksummed, since a timestamp\n\t\/\/ cannot have been loaded), so it is awaiting checksumming. Since this\n\t\/\/ timestamp was generated using the snapshot awaiting checksumming, we can\n\t\/\/ remove it from rb.loadedNotChecksummed. There should be no other items\n\t\/\/ awaiting checksumming now since loading\/generating a snapshot should have\n\t\/\/ cleared out everything else in `loadNotChecksummed`.\n\tdelete(rb.loadedNotChecksummed, data.CanonicalSnapshotRole)\n\n\treturn sgndJSON, rb.repo.Timestamp.Signed.Version, nil\n}","label":0}
{"text":"func Digits(digits int) string {\n\tmax := int(math.Pow10(digits)) - 1\n\tnum := privateRand.Intn(max)\n\tformat := fmt.Sprintf(\"%%0%dd\", digits)\n\treturn fmt.Sprintf(format, num)\n}","label":0}
{"text":"func (s *DevicePool) SetDescription(v string) *DevicePool {\n\ts.Description = &v\n\treturn s\n}","label":0}
{"text":"public function getStats()\n    {\n        $service = $this->getService();\n\n        \/\/ stats for a site\n        $response = $service->request('stats', 'GET', NULL, $this->getParams());\n\n        $responseArray = $this->getResponseArray($response);\n\n        if (!$this->isError()) {\n            $this->_data = $responseArray;\n        } else {\n            $this->_data = array();\n        }\n\n        return $this;\n    }","label":0}
{"text":"public function disallow($ability = null, $model = null)\n    {\n        if (is_null($ability)) {\n            return new RemovesAbilities($this);\n        }\n\n        (new RemovesAbilities($this))->to($ability, $model);\n\n        return $this;\n    }","label":0}
{"text":"func ParseBlockCryptKeyServerHalf(s string) (BlockCryptKeyServerHalf, error) {\n\tbuf, err := hex.DecodeString(s)\n\tif err != nil {\n\t\treturn BlockCryptKeyServerHalf{}, errors.WithStack(err)\n\t}\n\tvar serverHalf BlockCryptKeyServerHalf\n\terr = serverHalf.UnmarshalBinary(buf)\n\tif err != nil {\n\t\treturn BlockCryptKeyServerHalf{}, err\n\t}\n\treturn serverHalf, nil\n}","label":0}
{"text":"function after (el, newEl) {\n  if (typeof newEl === 'string') {\n    return el.insertAdjacentHTML('afterend', newEl)\n  } else {\n    var next = el.nextSibling\n    if (next) {\n      return el.parentNode.insertBefore(newEl, next)\n    } else {\n      return el.parentNode.appendChild(newEl)\n    }\n  }\n}","label":0}
{"text":"protected function buildQueryPart(string $section, array $statements): string\n    {\n        switch ($section) {\n            case static::QUERY_PART_JOIN:\n                return $this->buildJoin($statements);\n            case static::QUERY_PART_LIMIT:\n                return isset($statements['limit']) ? 'LIMIT ' . $statements['limit'] : '';\n            case static::QUERY_PART_OFFSET:\n                return isset($statements['offset']) ? 'OFFSET ' . $statements['offset'] : '';\n            case static::QUERY_PART_ORDERBY:\n                $orderBys = '';\n                if (isset($statements['orderBys']) === true && \\is_array($statements['orderBys']) === true) {\n                    foreach ($statements['orderBys'] as $orderBy) {\n                        $orderBys .= $this->wrapSanitizer($orderBy['field']) . ' ' . $orderBy['type'] . ', ';\n                    }\n\n                    if ($orderBys = trim($orderBys, ', ')) {\n                        $orderBys = 'ORDER BY ' . $orderBys;\n                    }\n                }\n\n                return $orderBys;\n            case static::QUERY_PART_GROUPBY:\n                $groupBys = $this->arrayStr($statements['groupBys'], ', ');\n                if ($groupBys !== '' && isset($statements['groupBys']) === true) {\n                    $groupBys = 'GROUP BY ' . $groupBys;\n                }\n\n                return $groupBys;\n        }\n\n        return '';\n    }","label":0}
{"text":"protected function parseTheme(DirectoryInterface $themeDir, array $generalConfig)\n    {\n        $themeConfig = $this->parseConfigYaml('theme.yml', $themeDir);\n\n        \/** @deprecated Deprecated since 3.0, to be removed in 4.0. (config.yml was the old filename) *\/\n        if (empty($themeConfig)) {\n            $themeConfig = $this->parseConfigYaml('config.yml', $themeDir);\n        }\n\n        if ((isset($themeConfig['templatefields'])) && (is_array($themeConfig['templatefields']))) {\n            $templateContentTypes = [];\n\n            foreach ($themeConfig['templatefields'] as $template => $templateFields) {\n                $fieldsContenttype = [\n                    'fields'        => $templateFields,\n                    'singular_name' => 'Template Fields ' . $template,\n                ];\n\n                try {\n                    $templateContentTypes[$template] = $this->parseContentType(\n                        $template,\n                        $fieldsContenttype,\n                        $generalConfig\n                    );\n                } catch (InvalidArgumentException $e) {\n                    $this->exceptions[] = $e->getMessage();\n                }\n            }\n\n            $themeConfig['templatefields'] = $templateContentTypes;\n        }\n\n        return $themeConfig;\n    }","label":0}
{"text":"func SetSceneByName(name string, forceNewWorld bool) error {\n\tsceneMutex.RLock()\n\tscene, ok := scenes[name]\n\tsceneMutex.RUnlock()\n\tif !ok {\n\t\treturn fmt.Errorf(\"scene not registered: %s\", name)\n\t}\n\n\tSetScene(scene.scene, forceNewWorld)\n\n\treturn nil\n}","label":0}
{"text":"private static function updateSet(array $values)\n    {\n        $ret = \"\";\n        foreach($values as $key=>$value)\n            $ret .= $key.\"=\".$value.\", \";\n        $ret = substr($ret,0,-2);\/\/remove last \\\", \\\"\n        return $ret;\n    }","label":0}
{"text":"protected function getAdapter(array $config)\n    {\n        \/\/ Pull parameters from config and set defaults for optional values\n        $path = $config['path'];\n        $writeFlags = array_get($config, 'write_flags', LOCK_EX);\n        $linkHandling = array_get($config, 'link_handling', Local::DISALLOW_LINKS);\n        $permissions = array_get($config, 'permissions', []);\n\n        return new Local($path, $writeFlags, $linkHandling, $permissions);\n    }","label":0}
{"text":"def parse_yaml(self, y):\n        ''''''\n        super(TargetPort, self).parse_yaml(y)\n        self.port_name = y['portName']\n        return self","label":0}
{"text":"func (a *InternalMessageInfo) DiscardUnknown(m Message) {\n\tdi := atomicLoadDiscardInfo(&a.discard)\n\tif di == nil {\n\t\tdi = getDiscardInfo(reflect.TypeOf(m).Elem())\n\t\tatomicStoreDiscardInfo(&a.discard, di)\n\t}\n\tdi.discard(toPointer(&m))\n}","label":0}
{"text":"def is_same_day(self, dt):\n        \n        dt = pendulum.instance(dt)\n\n        return self.to_date_string() == dt.to_date_string()","label":0}
{"text":"public function handle()\n    {\n        $provider = $this->laravel->getProvider(EventServiceProvider::class);\n\n        foreach ($provider->listens() as $event => $listeners) {\n            $this->makeEventAndListeners($event, $listeners);\n        }\n\n        $this->info('Events and listeners generated successfully!');\n    }","label":0}
{"text":"public static final DoubleMatrix2D fillSubdiagonalSymmetricMatrix(DoubleMatrix2D S){\r\n\r\n\t\tif(S.rows() != S.columns()){\r\n\t\t\tthrow new IllegalArgumentException(\"Not square matrix\");\r\n\t\t}\r\n\r\n\t\tboolean isSparse = S instanceof SparseDoubleMatrix2D;\r\n\t\tDoubleFactory2D F2D = (isSparse)? DoubleFactory2D.sparse: DoubleFactory2D.dense;\r\n\t\tfinal DoubleMatrix2D SFull = F2D.make(S.rows(), S.rows());\r\n\r\n\t\tif (isSparse) {\r\n\t\t\tS.forEachNonZero(new IntIntDoubleFunction() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic double apply(int i, int j, double hij) {\r\n\t\t\t\t\tSFull.setQuick(i, j, hij);\r\n\t\t\t\t\tSFull.setQuick(j, i, hij);\r\n\t\t\t\t\treturn hij;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tfor (int i = 0; i < S.rows(); i++) {\r\n\t\t\t\tfor (int j = 0; j < i + 1; j++) {\r\n\t\t\t\t\tdouble sij = S.getQuick(i, j);\r\n\t\t\t\t\tSFull.setQuick(i, j, sij);\r\n\t\t\t\t\tSFull.setQuick(j, i, sij);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn SFull;\r\n\t}","label":0}
{"text":"public function nameContains($needle, $caseSensitive = null)\n    {\n        if ('' === $needle) {\n            return true;\n        }\n        if (null === $caseSensitive) {\n            $caseSensitive = false;\n        }\n\n        if ($caseSensitive) {\n            return false !== mb_strpos($this->name(), $needle);\n        }\n\n        return false !== mb_stripos($this->name(), $needle);\n    }","label":0}
{"text":"public double calculateValue(double value) {\n\t\tJexlContext context = new MapContext();\n\t\tcontext.set(getArg(), value);\n\t\treturn (double) expression.evaluate(context);\n\t}","label":0}
{"text":"def _load_lib():\n    \"\"\"\"\"\"\n    lib_path = _find_lib_path()\n    lib = ctypes.cdll.LoadLibrary(lib_path[0])\n    # DMatrix functions\n    lib.MXGetLastError.restype = ctypes.c_char_p\n    return lib","label":0}
{"text":"func (c *Connector) UpsertSchema(ctx context.Context, scope, namePrefix string, eds []*dosa.EntityDefinition) (*dosa.SchemaStatus, error) {\n\trpcEds := EntityDefsToThrift(eds)\n\trequest := &dosarpc.UpsertSchemaRequest{\n\t\tScope:      &scope,\n\t\tNamePrefix: &namePrefix,\n\t\tEntityDefs: rpcEds,\n\t}\n\n\tresponse, err := c.client.UpsertSchema(ctx, request, getHeaders(c.headers)...)\n\tif err != nil {\n\t\tif !dosarpc.Dosa_UpsertSchema_Helper.IsException(err) {\n\t\t\treturn nil, errors.Wrap(err, \"failed to UpsertSchema due to network issue\")\n\t\t}\n\t\treturn nil, wrapError(err, \"failed to UpsertSchema\", scope)\n\t}\n\n\tstatus := \"\"\n\tif response.Status != nil {\n\t\tstatus = *response.Status\n\t}\n\n\tif response.Version == nil {\n\t\treturn nil, errors.New(\"failed to UpsertSchema: server returns version nil\")\n\t}\n\n\treturn &dosa.SchemaStatus{\n\t\tVersion: *response.Version,\n\t\tStatus:  status,\n\t}, nil\n}","label":0}
{"text":"public function getFieldType($name)\n    {\n        return $this->checkFieldExist($name)->types[$name] != null\n            ? rtrim($this->types[$name], '[]')\n            : null;\n    }","label":0}
{"text":"private void checkStrictParamType(\n      final TemplateNode node, final TemplateParam param, @Nullable SoyValueProvider paramValue) {\n    Kind kind = param.type().getKind();\n    if (kind == Kind.ANY || kind == Kind.UNKNOWN) {\n      \/\/ Nothing to check.  ANY and UKNOWN match all types.\n      return;\n    }\n    if (paramValue == null) {\n      paramValue = NullData.INSTANCE;\n    } else if (paramValue instanceof SoyAbstractCachingValueProvider) {\n      SoyAbstractCachingValueProvider typedValue = (SoyAbstractCachingValueProvider) paramValue;\n      if (!typedValue.isComputed()) {\n        \/\/ in order to preserve laziness we tell the value provider to assert the type when\n        \/\/ computation is triggered\n        typedValue.addValueAssertion(\n            new ValueAssertion() {\n              @Override\n              public void check(SoyValue value) {\n                checkValueType(param, value, node);\n              }\n            });\n        return;\n      }\n    } else if (param.hasDefault() && paramValue.resolve() instanceof UndefinedData) {\n      \/\/ Default parameters are undefined if they're unset.\n      return;\n    }\n    checkValueType(param, paramValue.resolve(), node);\n  }","label":0}
{"text":"function _singularize($tables)\n\t{\n\n\t\tif (!ADODB_Active_Record::$_changeNames) {\n\t\t\treturn $table;\n\t\t}\n\n\t\t$ut = strtoupper($tables);\n\t\t$len = strlen($tables);\n\t\tif($ut[$len-1] != 'S') {\n\t\t\treturn $tables; \/\/ I know...forget oxen\n\t\t}\n\t\tif($ut[$len-2] != 'E') {\n\t\t\treturn substr($tables, 0, $len-1);\n\t\t}\n\t\tswitch($ut[$len-3]) {\n\t\t\tcase 'S':\n\t\t\tcase 'X':\n\t\t\t\treturn substr($tables, 0, $len-2);\n\t\t\tcase 'I':\n\t\t\t\treturn substr($tables, 0, $len-3) . 'y';\n\t\t\tcase 'H';\n\t\t\t\tif($ut[$len-4] == 'C' || $ut[$len-4] == 'S') {\n\t\t\t\t\treturn substr($tables, 0, $len-2);\n\t\t\t\t}\n\t\t\tdefault:\n\t\t\t\treturn substr($tables, 0, $len-1); \/\/ ?\n\t\t}\n\t}","label":0}
{"text":"public function expire($key, $seconds) {\n        return $this->getHandler($this->judge(__FUNCTION__))->expire($key, $seconds);\n    }","label":0}
{"text":"public function removeData()\n    {\n        $cookies = \\Yii::$app->response->cookies;\n\n        \\Yii::$app->session->remove($this->timezoneSessionKey);\n        $cookies->remove($this->timezoneCookieName);\n\n        \\Yii::$app->session->remove($this->citySessionKey);\n        $cookies->remove($this->cityCookieName);\n\n        \\Yii::$app->session->remove($this->regionSessionKey);\n        $cookies->remove($this->regionCookieName);\n\n        \\Yii::$app->session->remove($this->countrySessionKey);\n        $cookies->remove($this->countryCookieName);\n    }","label":0}
{"text":"private void checkScalarTypeExtensions(List<GraphQLError> errors, TypeDefinitionRegistry typeRegistry) {\n        typeRegistry.scalarTypeExtensions()\n                .forEach((name, extensions) -> {\n                    checkTypeExtensionHasCorrespondingType(errors, typeRegistry, name, extensions, ScalarTypeDefinition.class);\n                    checkTypeExtensionDirectiveRedefinition(errors, typeRegistry, name, extensions, ScalarTypeDefinition.class);\n                });\n\n    }","label":0}
{"text":"function RingpopClient(ringpop, subChannel, timers, date, middlewares) {\n    this.ringpop = ringpop;\n    this.subChannel = subChannel;\n    this.timers = timers || globalTimers;\n    this.date = date || Date;\n    this.middlewares = middlewares || [];\n\n    this.config = this.ringpop.config;\n    this.logger = this.ringpop.loggerFactory.getLogger('client');\n\n    \/\/ If no subChannel provided, create one from a new instance\n    \/\/ of TChannel. This client then becomes the owner of that\n    \/\/ instance and is responsible for closing.\n    this.isChannelOwner = false;\n    if (!this.subChannel) {\n        this.tchannel = new TChannel();\n        this.subChannel = this.tchannel.makeSubChannel({\n            serviceName: 'ringpop',\n            trace: false\n        });\n        this.isChannelOwner = true;\n    }\n\n    this.requestsById = {};\n    this.wedgedTimer = null;\n    this.isDestroyed = false;\n}","label":0}
{"text":"def _get_image_size(self, image_path):\n        \"\"\"\"\"\"\n        command = 'du -b %s' % image_path\n        (rc, output) = zvmutils.execute(command)\n        if rc:\n            msg = (\"Error happened when executing command du -b with\"\n                   \"reason: %s\" % output)\n            LOG.error(msg)\n            raise exception.SDKImageOperationError(rs=8)\n        size = output.split()[0]\n        return size","label":0}
{"text":"func (r *reader) readStringN(n uint32) string {\n\treturn string(r.readBytes(n))\n}","label":0}
{"text":"def delete_process_by_id(self, process_type_id):\n        \n        route_values = {}\n        if process_type_id is not None:\n            route_values['processTypeId'] = self._serialize.url('process_type_id', process_type_id, 'str')\n        self._send(http_method='DELETE',\n                   location_id='02cc6a73-5cfb-427d-8c8e-b49fb086e8af',\n                   version='5.0-preview.2',\n                   route_values=route_values)","label":0}
{"text":"def eager_partial_regardless(self, fn, *a, **kw):\n        \"\"\"\"\"\"\n        if self.has_annotations(fn):\n            return self.eager_partial(fn, *a, **kw)\n        return functools.partial(fn, *a, **kw)","label":0}
{"text":"function addComment(start, end, type, value) {\n        assert(typeof start === 'number', 'Comment must have valid position');\n\n        \/\/ Because the way the actual token is scanned, often the comments\n        \/\/ (if any) are skipped twice during the lexical analysis.\n        \/\/ Thus, we need to skip adding a comment if the comment array already\n        \/\/ handled it.\n        if (extra.comments.length > 0) {\n            if (extra.comments[extra.comments.length - 1].range[1] > start) {\n                return;\n            }\n        }\n\n        extra.comments.push({\n            range: [start, end],\n            type: type,\n            value: value\n        });\n    }","label":0}
{"text":"func (it *HasA) TagResults(dst map[string]graph.Value) {\n\tit.tags.TagResult(dst, it.Result())\n\n\tit.primaryIt.TagResults(dst)\n}","label":0}
{"text":"function getdata(err,response){\n  \t\t\tif(err){$scope.errmsg = \"Server error, please try again.\";console.log({error:err})}\n\t  \t\tif(response){\n\t  \t\t\t\/\/console.log(response);\n\t\t\t\tif (response.msg=\"OK\"){\n\t\t\t\t\t$scope.srvdbs = [];\n\t\t\t\t\t$scope.add_db = false;\n\t\t\t\t\t$scope.$emit('reloadmdb', 'reload');\n\t\t\t\t}\n\t\t\t};\n  \t\t}","label":0}
{"text":"@Override\n    public ResponseToRoom only(String... params) {\n        includedVars.addAll(Arrays.asList(params));\n        return this;\n    }","label":0}
{"text":"private function checkPageHasImages() {\n\n        $html = $this->getPageContent();\n\n        \/\/ for newly created page\n        if ($html == '') {\n            return false;\n        }\n\n        $dom = $this->createDOMDocumentFromHTML($html);\n\n        $elements = $dom->getElementsByTagName('img');\n        return ($elements->length) ? true : false;\n\n    }","label":0}
{"text":"public function resolve(Request $request, ArgumentMetadata $argument)\n    {\n        if (\\array_key_exists($argument->getType(), $this->mappingParameters)) {\n            yield $this->mappingParameters[$argument->getType()];\n        }\n        else {\n            foreach ($this->mappingParameters as $value) {\n                $classname = $argument->getType();\n                if ($value instanceof $classname) {\n                    yield $value;\n                }\n            }\n        }\n    }","label":0}
{"text":"@Override\n    public boolean setProperties(Dictionary<String, String> properties) {\n        this.properties = properties;\n        if (this.properties != null)\n        {\n            if (properties.get(\"debug\") != null)\n                debug = Integer.parseInt(properties.get(\"debug\"));\n\n            if (properties.get(\"input\") != null)\n                input = Integer.parseInt(properties.get(\"input\"));\n\n            if (properties.get(\"output\") != null)\n                output = Integer.parseInt(properties.get(\"output\"));\n\n            listings = Boolean.parseBoolean(properties.get(\"listings\"));\n\n            if (properties.get(\"readonly\") != null)\n                readOnly = Boolean.parseBoolean(properties.get(\"readonly\"));\n\n            if (properties.get(\"sendfileSize\") != null)\n                sendfileSize = \n                    Integer.parseInt(properties.get(\"sendfileSize\")) * 1024;\n\n            fileEncoding = properties.get(\"fileEncoding\");\n\n            globalXsltFile = properties.get(\"globalXsltFile\");\n            contextXsltFile = properties.get(\"contextXsltFile\");\n            localXsltFile = properties.get(\"localXsltFile\");\n            readmeFile = properties.get(\"readmeFile\");\n\n            if (properties.get(\"useAcceptRanges\") != null)\n                useAcceptRanges = Boolean.parseBoolean(properties.get(\"useAcceptRanges\"));\n\n            \/\/ Sanity check on the specified buffer sizes\n            if (input < 256)\n                input = 256;\n            if (output < 256)\n                output = 256;\n\n            if (debug > 0) {\n                log(\"DefaultServlet.init:  input buffer size=\" + input +\n                    \", output buffer size=\" + output);\n            }\n\n            return this.setDocBase(this.properties.get(BASE_PATH));\n        }\n        else\n        {\n            return this.setDocBase(null);\n        }\n    }","label":0}
{"text":"function(err){\n                client.del(recommendedZSet, function(err){\n                  async.each(scoreMap,\n                    function(scorePair, callback){\n                      client.zadd(recommendedZSet, scorePair[0], scorePair[1], function(err){\n                        callback();\n                      });\n                    },\n                    \/\/ after all the additions have been made to the recommended set,\n                    function(err){\n                      client.del(tempAllLikedSet, function(err){\n                        client.zcard(recommendedZSet, function(err, length){\n                          client.zremrangebyrank(recommendedZSet, 0, length-config.numOfRecsStore-1, function(err){\n                            cb();\n                          });\n                        });\n                      });\n                    }\n                  );\n                });\n              }","label":0}
{"text":"function executeCommand(command, circles, current, position) {\n            var circle = circles[current],\n                transformed = false;\n\n            switch (command) {\n                case 'increase-x':\n                    circle.x += 10;\n                    transformed = true;\n                    break;\n                case 'decrease-x':\n                    circle.x -= 10;\n                    transformed = true;\n                    break;\n                case 'increase-y':\n                    circle.y += 10;\n                    transformed = true;\n                    break;\n                case 'decrease-y':\n                    circle.y -= 10;\n                    transformed = true;\n                    break;\n                case 'increase-r':\n                    circle.r += 10;\n                    transformed = true;\n                    break;\n                case 'decrease-r':\n                    circle.r -= 10;\n                    transformed = true;\n                    break;\n                case 'bring-to-front':\n                    bringToFront(circles, circle, current);\n                    break;\n                case 'send-to-back':\n                    sendToBack(circles, circle, current);\n                    break;\n                case 'new-circle':\n                    newCircle(position, circles, TOOLBAR_HEIGHT);\n                    break;\n                case 'random-circle':\n                    randomCircle(circles, TOOLBAR_HEIGHT);\n                    break;\n                case 'remove-circle':\n                    removeCircle(circles, current);\n                    break;\n                case 'move':\n                    moveCircles(circles, position);\n                    break;\n                case 'clear':\n                    clear(circles);\n                    break;\n            }\n\n            if (transformed) {\n                circle.x = Math.max(circle.x, 10);\n                circle.y = Math.max(circle.y, 10);\n                circle.r = Math.max(circle.r, 10);\n            }\n\n            return circles;\n        }","label":0}
{"text":"public static List<Map<String, Object>> readExcelToMapList(File file, Integer scale) throws ReadExcelException {\n        return XLSReader.readExcel(file, scale).getDatas();\n    }","label":0}
{"text":"public static Label newActionLabel (String text, String style, ClickHandler onClick)\n    {\n        return makeActionLabel(newLabel(text, style), onClick);\n    }","label":0}
{"text":"public function deleteColumns($names, $deleteRecursiveInSubtables = false)\n    {\n        foreach ($this->rows as $row) {\n            foreach ($names as $name) {\n                $row->deleteColumn($name);\n            }\n            $subTable = $row->getSubtable();\n            if ($subTable) {\n                $subTable->deleteColumns($names, $deleteRecursiveInSubtables);\n            }\n        }\n        if (!is_null($this->summaryRow)) {\n            foreach ($names as $name) {\n                $this->summaryRow->deleteColumn($name);\n            }\n        }\n        if (!is_null($this->totalsRow)) {\n            foreach ($names as $name) {\n                $this->totalsRow->deleteColumn($name);\n            }\n        }\n    }","label":0}
{"text":"public Long getLong(String column) {\r\n\t\tNumber n = getNumber(column);\r\n\t\treturn n != null ? n.longValue() : null;\r\n\t}","label":0}
{"text":"protected function doSendEvent(Event $event): void\n    {\n        if (!$this->shouldUseGearman()) {\n            $this->locator->getEventBus()->receiveEvent($event);\n            return;\n        }\n\n        $envelope = new TransportEnvelope($event, 'php');\n        $channel = $this->router->forEvent($event);\n\n        try {\n            $client = $this->getClient();\n            @$client->doBackground($channel, $envelope->toString(), (string)$event->get('event_id'));\n            $this->validateReturnCode($client, $channel);\n        } catch (\\GearmanException $ge) {\n            if (isset(self::$reconnectCodes[$ge->getCode()])) {\n                $this->destroyClient();\n                $this->locator->getEventBus()->receiveEvent($event);\n                return;\n            }\n\n            throw $ge;\n        } catch (\\Throwable $e) {\n            throw $e;\n        }\n    }","label":0}
{"text":"public function parseTags($string)\n    {\n        foreach ($this->tags as $tag => $code) {\n            if (strpos($string, \"<{$tag}>\") !== false\n                || strpos($string, \"<\/{$tag}>\") !== false\n            ) {\n                $string = str_replace(\"<{$tag}>\", $code, $string);\n                $string = str_replace(\"<\/{$tag}>\", $this->tags['default'], $string);\n            }\n        }\n\n        return $string . $this->tags['default'];\n    }","label":0}
{"text":"public function getSession()\n    {\n        if ($this->session instanceof SessionEntity) {\n            return $this->session;\n        }\n\n        $this->session = $this->server->getSessionStorage()->getByAccessToken($this);\n\n        return $this->session;\n    }","label":0}
{"text":"function (serviceDir, selectedConfiguration) {\n    if (!serviceDir.startsWith('\/')) {\n      throw new Error(`serviceDir (${serviceDir}) must be absolute path.`);\n    }\n\n    \/\/ Create services folder if it doesn't exist.\n    if (!fs.existsSync(serviceDir)) {\n      fs.mkdirSync(serviceDir);\n    }\n\n    \/\/ Names of all the services (must have directory serviceName\/config)\n    var serviceNames = _.filter(fs.readdirSync(serviceDir), function(fileName) {\n      var serviceConfigPath = path.join(serviceDir, fileName, 'config');\n      try {\n        return fs.lstatSync(serviceConfigPath).isDirectory();\n      } catch (err) {\n        return false;\n      }\n    });\n\n    return _.map(serviceNames, function (serviceName) {\n      var servicePath = path.join(serviceDir, serviceName);\n      var configurationPath = path.join(servicePath, 'config', selectedConfiguration);\n      var configuration = null;\n\n      if (!configurationPath.startsWith('\/')) {\n        configurationPath = '.\/' + configurationPath;\n      }\n\n      try {\n        configuration = require(configurationPath);\n        configuration = configuration.default || configuration;\n\n        \/\/ pass directories etc. to configuration\n        if (_.isFunction(configuration)) {\n          configuration = configuration({\n            servicePath: servicePath\n          });\n        }\n      } catch (err) {\n        \/\/ rethrow if the error was not about missing module\n        if ( err.code !== 'MODULE_NOT_FOUND' ) {\n            throw err;\n        }\n        \/\/ ignore missing module errors silently, maybe given profile was not defined for\n        \/\/ the service, which is totally cool... no prob bro!\n      }\n\n      var tasks = [];\n      if (configuration) {\n        \/\/ TODO: move these tasks to separate file and test that they do what they should\n        tasks.push({\n          name: 'serve',\n          run: function () {\n            var app = require('..\/app\/express\/main');\n            return app.start(configuration);\n          },\n          description: 'Start the express app of the service.'\n        });\n\n        \/\/ add tasks declared by features to build\n        var features = plugins.loadFeatures(configuration);\n        _.each(features, function(featureDescription) {\n          _.each(featureDescription.tasks, function (task) {\n            \/\/ wrap task runner function to closure which passes required parameters  to call, which takes only global configuration as parameter and pass feature config implicitly\n            tasks.push({\n              name: task.name,\n              description: task.description,\n              run: function () {\n                return task.run(featureDescription.featureDef.config, configuration, servicePath);\n              }\n            });\n          });\n        });\n      }\n\n      return {\n        name: serviceName,\n        configPath: configurationPath,\n        config: configuration,\n        tasks: tasks\n      };\n    });\n  }","label":0}
{"text":"async def _precache(url, to_type, force=False):\n    '''\n    \n    '''\n    if force:\n        cli.print('%s: force clearing' % url)\n        _clear_cache(url)\n    cli.print('%s: precaching \"%s\"' % (url, to_type))\n    with autodrain_worker():\n        await singletons.workers.async_enqueue_multiconvert(url, to_type)\n    result = TypedResource(url, TypeString(to_type))\n    cli.print('%s: %s precached at: %s' % (url, to_type, result.cache_path))","label":0}
{"text":"func Deserialize(p []byte) *structs.DevInfo {\n\tdevInfo := flat.GetRootAsDevInfo(p, 0)\n\t\/\/ get the # of interfaces\n\tdLen := devInfo.DeviceLength()\n\tinfo := &structs.DevInfo{Timestamp: devInfo.Timestamp(), Device: make([]structs.Device, dLen)}\n\tfDev := &flat.Device{}\n\tsDev := structs.Device{}\n\tfor i := 0; i < dLen; i++ {\n\t\tif devInfo.Device(fDev, i) {\n\t\t\tsDev.Name = string(fDev.Name())\n\t\t\tsDev.RBytes = fDev.RBytes()\n\t\t\tsDev.RPackets = fDev.RPackets()\n\t\t\tsDev.RErrs = fDev.RErrs()\n\t\t\tsDev.RDrop = fDev.RDrop()\n\t\t\tsDev.RFIFO = fDev.RFIFO()\n\t\t\tsDev.RFrame = fDev.RFrame()\n\t\t\tsDev.RCompressed = fDev.RCompressed()\n\t\t\tsDev.RMulticast = fDev.RMulticast()\n\t\t\tsDev.TBytes = fDev.TBytes()\n\t\t\tsDev.TPackets = fDev.TPackets()\n\t\t\tsDev.TErrs = fDev.TErrs()\n\t\t\tsDev.TDrop = fDev.TDrop()\n\t\t\tsDev.TFIFO = fDev.TFIFO()\n\t\t\tsDev.TColls = fDev.TColls()\n\t\t\tsDev.TCarrier = fDev.TCarrier()\n\t\t\tsDev.TCompressed = fDev.TCompressed()\n\t\t}\n\t\tinfo.Device[i] = sDev\n\t}\n\treturn info\n}","label":0}
{"text":"func writeRecords(\n\tclient *as.Client,\n\tkeyPrefix string,\n\tbinName string,\n\tvaluePrefix string,\n\tsize int,\n) {\n\tfor i := 1; i <= size; i++ {\n\t\tkey, _ := as.NewKey(*shared.Namespace, *shared.Set, keyPrefix+strconv.Itoa(i))\n\t\tbin := as.NewBin(binName, valuePrefix+strconv.Itoa(i))\n\n\t\tlog.Printf(\"Put: ns=%s set=%s key=%s bin=%s value=%s\",\n\t\t\tkey.Namespace(), key.SetName(), key.Value(), bin.Name, bin.Value)\n\n\t\tclient.PutBins(shared.WritePolicy, key, bin)\n\t}\n}","label":0}
{"text":"public void validateInjectionPointForDefinitionErrors(InjectionPoint ij, Bean<?> bean, BeanManagerImpl beanManager) {\n        if (ij.getAnnotated().getAnnotation(New.class) != null && ij.getQualifiers().size() > 1) {\n            throw ValidatorLogger.LOG.newWithQualifiers(ij, Formats.formatAsStackTraceElement(ij));\n        }\n        if (ij.getType() instanceof TypeVariable<?>) {\n            throw ValidatorLogger.LOG.injectionPointWithTypeVariable(ij, Formats.formatAsStackTraceElement(ij));\n        }\n\n        \/\/ WELD-1739\n        if (ij.getMember() instanceof Executable && ij.getAnnotated().isAnnotationPresent(Named.class)\n                && ij.getAnnotated().getAnnotation(Named.class).value().equals(\"\")) {\n\n            Executable executable = (Executable) ij.getMember();\n            AnnotatedParameter<?> annotatedParameter = (AnnotatedParameter<?>) ij.getAnnotated();\n\n            if (!executable.getParameters()[annotatedParameter.getPosition()].isNamePresent()) {\n                \/\/ No parameters info available\n                throw ValidatorLogger.LOG.nonFieldInjectionPointCannotUseNamed(ij, Formats.formatAsStackTraceElement(ij));\n            }\n        }\n\n        if (ij.getAnnotated().isAnnotationPresent(Produces.class)) {\n            if (bean != null) {\n                throw BeanLogger.LOG.injectedFieldCannotBeProducer(ij.getAnnotated(), bean);\n            } else {\n                throw BeanLogger.LOG.injectedFieldCannotBeProducer(ij.getAnnotated(), Reflections.<AnnotatedField<?>>cast(ij.getAnnotated()).getDeclaringType());\n            }\n        }\n        boolean newBean = (bean instanceof NewBean);\n        if (!newBean) {\n            checkScopeAnnotations(ij, beanManager.getServices().get(MetaAnnotationStore.class));\n        }\n        checkFacadeInjectionPoint(ij, Instance.class);\n        checkFacadeInjectionPoint(ij, Event.class);\n\n        if (InterceptionFactory.class.equals(Reflections.getRawType(ij.getType())) && !(bean instanceof ProducerMethod<?, ?>)) {\n            throw ValidatorLogger.LOG.invalidInterceptionFactoryInjectionPoint(ij, Formats.formatAsStackTraceElement(ij));\n        }\n\n        for (PlugableValidator validator : plugableValidators) {\n            validator.validateInjectionPointForDefinitionErrors(ij, bean, beanManager);\n        }\n    }","label":0}
{"text":"def function(fname):\n    \n    def _f(func):\n        class WrapFunction(Function):\n            name = fname\n\n            def __call__(self, *args, **kwargs):\n                return func(*args, **kwargs)\n\n        return WrapFunction\n\n    return _f","label":0}
{"text":"public static FileItem[] getRequestFileItemValues(final HttpServletRequest request, final String key) {\n\t\treturn getRequestFileItems(request).get(key);\n\t}","label":0}
{"text":"function(api, id, key, data) {\n  \/\/ get storage object\n  var obj = _getStorageObject(api, id);\n  if(obj === null) {\n    \/\/ create a new storage object\n    obj = {};\n  }\n  \/\/ update key\n  obj[key] = data;\n\n  \/\/ set storage object\n  _setStorageObject(api, id, obj);\n}","label":0}
{"text":"def unique_list(lst):\n    \"\"\"\"\"\"\n    uniq = []\n    for item in lst:\n        if item not in uniq:\n            uniq.append(item)\n    return uniq","label":0}
{"text":"func (s *SecurityProfileSummary) SetArn(v string) *SecurityProfileSummary {\n\ts.Arn = &v\n\treturn s\n}","label":0}
{"text":"def write(self, data):\n        \"\"\"\"\"\"\n        # If nobody is connected, act like all data was written anyway.\n        if self.connected is None:\n            return 0\n        data = to_bytes_safe(data)\n        size = len(data)\n        remaining = size\n        while remaining:\n            count = self._abstract_socket.write(data)\n            remaining -= count\n            if remaining:\n                data = data[count:]\n        return size","label":0}
{"text":"public function clear($group = null) {\n        if( isset($group) )\n            unset($this->settings[$group]);\n        else\n            $this->settings = [];\n\n        return $this;\n    }","label":0}
{"text":"function(content){\n\t\t\tif (typeof content === 'string') {  \/\/$NON-NLS-0$\n\t\t\t\tthis._contentParent.innerHTML = content;\n\t\t\t} else {\n\t\t\t\tthis._contentParent.innerHTML = \"\"; \/\/NON-NLS-0$\n\t\t\t\tthis._contentParent.appendChild(content);\n\t\t\t}\n\t\t}","label":0}
{"text":"public function switchDb($db_name)\n    {\n        $self = $this;\n\n        return $this->app['mongo'] = $this->app->share(\n            function () use ($db_name, $self) {\n                return new Db($db_name, $self->client, $self->app);\n            }\n        );\n    }","label":0}
{"text":"@SuppressWarnings(\"unchecked\")\n  public Timestamp getTimestamp(String name) {\n    return ((Value<Timestamp>) getValue(name)).get();\n  }","label":0}
{"text":"def get_default_config(self):\n        \n        config = super(MQTTHandler, self).get_default_config()\n\n        config.update({\n        })\n\n        return config","label":0}
{"text":"public int[] getTopSentence(int size)\n    {\n        Collection<Integer> values = top.values();\n        size = Math.min(size, values.size());\n        int[] indexArray = new int[size];\n        Iterator<Integer> it = values.iterator();\n        for (int i = 0; i < size; ++i)\n        {\n            indexArray[i] = it.next();\n        }\n        return indexArray;\n    }","label":0}
{"text":"public function breadcrumbsAction() \n\t{\n\t    $default = 'dashboard';\n\t    $id = $this->getRequest()->getQuery('id', $default);\n\t    $pos = strpos($id, '\/');\n\t    $id = false !== $pos ? substr($id, 0, $pos) : $id;\n        $view = $this->getServiceLocator()->get('Zend\\View\\Renderer\\PhpRenderer');\n        $navigation = $view->navigation('navigation');\n        $container = $navigation->getContainer();\n        $page = $container->findOneBy('fragment', $id);\n        $page = null === $page ? $container->findOneBy('fragment', $default) : $page;\n        $page->setActive(true);\n        \n        $viewModel = new ViewModel(array(\n            'breadcrumbs' => $navigation->breadcrumbs()\n        \t\t->setPartial('breadcrumbs')->setRenderInvisible(true)->setMinDepth(0)\n        ));\n        $viewModel->setTerminal(true);\n        \n        return $viewModel;\n\t}","label":0}
{"text":"def scope(scope_type: str) -> Callable:\n    \n\n    def dec(egg_: T) -> T:\n        egg_.__haps_custom_scope = scope_type\n        return egg_\n\n    return dec","label":0}
{"text":"func (s *DescribeStateMachineOutput) SetStateMachineArn(v string) *DescribeStateMachineOutput {\n\ts.StateMachineArn = &v\n\treturn s\n}","label":0}
{"text":"private void setForceFieldDefinitions() throws Exception {\n        String sid = st.nextToken();\n        String svalue = st.nextToken();\n        if (sid.equals(\">bontunit\")) {\n            try {\n                double value1 = new Double(svalue).doubleValue();\n                key = sid.substring(1);\n                parameterSet.put(key, new Double(value1));\n            } catch (NumberFormatException nfe) {\n                throw new IOException(\"VdWaalsTable.ReadvdWaals: \" + \"Malformed Number\");\n            }\n        } else if (sid.equals(\">bond-cubic\")) {\n            try {\n                double value1 = new Double(svalue).doubleValue();\n                key = sid.substring(1);\n                \/\/if (parameterSet.containsKey(key)){logger.debug(\"KeyError: hasKey \"+key);}\n                parameterSet.put(key, new Double(value1));\n            } catch (NumberFormatException nfe) {\n                throw new IOException(\"VdWaalsTable.ReadvdWaals: \" + \"Malformed Number\");\n            }\n        } else if (sid.equals(\">bond-quartic\")) {\n            try {\n                double value1 = new Double(svalue).doubleValue();\n                key = sid.substring(1);\n                \/\/if (parameterSet.containsKey(key)){logger.debug(\"KeyError: hasKey \"+key);}\n                parameterSet.put(key, new Double(value1));\n            } catch (NumberFormatException nfe) {\n                throw new IOException(\"VdWaalsTable.ReadvdWaals: \" + \"Malformed Number\");\n            }\n        } else if (sid.equals(\">angleunit\")) {\n            try {\n                double value1 = new Double(svalue).doubleValue();\n                key = sid.substring(1);\n                \/\/if (parameterSet.containsKey(key)){logger.debug(\"KeyError: hasKey \"+key);}\n                parameterSet.put(key, new Double(value1));\n            } catch (NumberFormatException nfe) {\n                throw new IOException(\"VdWaalsTable.ReadvdWaals: \" + \"Malformed Number\");\n            }\n        } else if (sid.equals(\">angle-sextic\")) {\n            try {\n                double value1 = new Double(svalue).doubleValue();\n                key = sid.substring(1);\n                \/\/if (parameterSet.containsKey(key)){logger.debug(\"KeyError: hasKey \"+key);}\n                parameterSet.put(key, new Double(value1));\n            } catch (NumberFormatException nfe) {\n                throw new IOException(\"VdWaalsTable.ReadvdWaals: \" + \"Malformed Number\");\n            }\n        } else if (sid.equals(\">strbndunit\")) {\n            try {\n                double value1 = new Double(svalue).doubleValue();\n                key = sid.substring(1);\n                \/\/if (parameterSet.containsKey(key)){logger.debug(\"KeyError: hasKey \"+key);}\n                parameterSet.put(key, new Double(value1));\n            } catch (NumberFormatException nfe) {\n                throw new IOException(\"VdWaalsTable.ReadvdWaals: \" + \"Malformed Number\");\n            }\n        } else if (sid.equals(\">opbendunit\")) {\n            try {\n                double value1 = new Double(svalue).doubleValue();\n                key = sid.substring(1);\n                \/\/if (parameterSet.containsKey(key)){logger.debug(\"KeyError: hasKey \"+key);}\n                parameterSet.put(key, new Double(value1));\n            } catch (NumberFormatException nfe) {\n                throw new IOException(\"VdWaalsTable.ReadvdWaals: \" + \"Malformed Number\");\n            }\n        } else if (sid.equals(\">torsionunit\")) {\n            try {\n                double value1 = new Double(svalue).doubleValue();\n                key = sid.substring(1);\n                \/\/if (parameterSet.containsKey(key)){logger.debug(\"KeyError: hasKey \"+key);}\n                parameterSet.put(key, new Double(value1));\n            } catch (NumberFormatException nfe) {\n                throw new IOException(\"VdWaalsTable.ReadvdWaals: \" + \"Malformed Number\");\n            }\n        } else if (sid.equals(\">vdwtype\")) {\n            key = sid.substring(1);\n            \/\/if (parameterSet.containsKey(key)){logger.debug(\"KeyError: hasKey \"+key);}\n            parameterSet.put(key, svalue);\n        } else if (sid.equals(\">radiusrule\")) {\n            key = sid.substring(1);\n            \/\/if (parameterSet.containsKey(key)){logger.debug(\"KeyError: hasKey \"+key);}\n            parameterSet.put(key, svalue);\n        } else if (sid.equals(\">radiustype\")) {\n            key = sid.substring(1);\n            \/\/if (parameterSet.containsKey(key)){logger.debug(\"KeyError: hasKey \"+key);}\n            parameterSet.put(key, svalue);\n        } else if (sid.equals(\">radiussize\")) {\n            key = sid.substring(1);\n            \/\/if (parameterSet.containsKey(key)){logger.debug(\"KeyError: hasKey \"+key);}\n            parameterSet.put(key, svalue);\n        } else if (sid.equals(\">epsilonrule\")) {\n            key = sid.substring(1);\n            \/\/if (parameterSet.containsKey(key)){logger.debug(\"KeyError: hasKey \"+key);}\n            parameterSet.put(key, svalue);\n        } else if (sid.equals(\">a-expterm\")) {\n            try {\n                key = sid.substring(1);\n                \/\/if (parameterSet.containsKey(key)){logger.debug(\"KeyError: hasKey \"+key);}\n                parameterSet.put(key, svalue);\n            } catch (NumberFormatException nfe) {\n                throw new IOException(\"VdWaalsTable.ReadvdWaals: \" + \"Malformed Number\");\n            }\n        } else if (sid.equals(\"b-expterm\")) {\n            try {\n                key = sid.substring(1);\n                \/\/if (parameterSet.containsKey(key)){logger.debug(\"KeyError: hasKey \"+key);}\n                parameterSet.put(key, svalue);\n            } catch (NumberFormatException nfe) {\n                throw new IOException(\"VdWaalsTable.ReadvdWaals: \" + \"Malformed Number\");\n            }\n        } else if (sid.equals(\">c-expterm\")) {\n            try {\n                double value1 = new Double(svalue).doubleValue();\n                key = sid.substring(1);\n                \/\/if (parameterSet.containsKey(key)){logger.debug(\"KeyError: hasKey \"+key);}\n                parameterSet.put(key, new Double(value1));\n            } catch (NumberFormatException nfe) {\n                throw new IOException(\"VdWaalsTable.ReadvdWaals: \" + \"Malformed Number\");\n            }\n        } else if (sid.equals(\">vdw-14-scale\")) {\n            try {\n                double value1 = new Double(svalue).doubleValue();\n                key = sid.substring(1);\n                \/\/if (parameterSet.containsKey(key)){logger.debug(\"KeyError: hasKey \"+key);}\n                parameterSet.put(key, new Double(value1));\n            } catch (NumberFormatException nfe) {\n                throw new IOException(\"VdWaalsTable.ReadvdWaals: \" + \"Malformed Number\");\n            }\n        } else if (sid.equals(\">chg-14-scale\")) {\n            try {\n                double value1 = new Double(svalue).doubleValue();\n                key = sid.substring(1);\n                \/\/if (parameterSet.containsKey(key)){logger.debug(\"KeyError: hasKey \"+key);}\n                parameterSet.put(key, new Double(value1));\n            } catch (NumberFormatException nfe) {\n                throw new IOException(\"VdWaalsTable.ReadvdWaals: \" + \"Malformed Number\");\n            }\n        } else if (sid.equals(\">dielectric\")) {\n            try {\n                double value1 = new Double(svalue).doubleValue();\n                key = sid.substring(1);\n                \/\/if (parameterSet.containsKey(key)){logger.debug(\"KeyError: hasKey \"+key);}\n                parameterSet.put(key, new Double(value1));\n            } catch (NumberFormatException nfe) {\n                throw new IOException(\"VdWaalsTable.ReadvdWaals: \" + \"Malformed Number\");\n            }\n        } else {\n        }\n    }","label":0}
{"text":"@Override\n  public void process(WatchedEvent event) {\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Received ZooKeeper Event, \" + \"type=\" + event.getType() + \", \" + \"state=\"\n          + event.getState() + \", \" + \"path=\" + event.getPath());\n    }\n\n    switch (event.getType()) {\n    case None: {\n      processConnection(event);\n      break;\n    }\n    case NodeCreated: {\n      processNodeCreated(event.getPath());\n      break;\n    }\n    case NodeDeleted: {\n      processNodeDeleted(event.getPath());\n      break;\n    }\n    case NodeDataChanged: {\n      processDataChanged(event.getPath());\n      break;\n    }\n    case NodeChildrenChanged: {\n      processNodeChildrenChanged(event.getPath());\n      break;\n    }\n    default:\n      break;\n    }\n  }","label":0}
{"text":"def plot_masks(mask_1, mask_2, mask_3):\n    \"\"\"\"\"\"\n    fig, ((ax1, ax2, ax3)) = plt.subplots(1, 3, figsize=(12, 5))\n    for ax in [ax1, ax2, ax3]:\n        ax.grid(False)\n        ax.set_xticks([])\n        ax.set_yticks([])\n    ax1.set_title(\"Type 1\")\n    ax1.imshow(mask_1, cmap='viridis')\n    ax2.set_title(\"Type 2\")\n    ax2.imshow(mask_2, cmap='viridis')\n    ax3.set_title(\"Type 3\")\n    ax3.imshow(mask_3, cmap='viridis')\n    return ax1, ax2, ax3","label":0}
{"text":"func (channel MessageQueue) Pop() (*Message, bool) {\n\tmsg, more := <-channel\n\treturn msg, more\n}","label":0}
{"text":"def perform_job(self, job):\n        \n\n        if self.config[\"trace_memory\"]:\n            job.trace_memory_start()\n\n        set_current_job(job)\n\n        try:\n            job.perform()\n\n        except MaxConcurrencyInterrupt:\n            self.log.error(\"Max concurrency reached\")\n            job._save_status(\"maxconcurrency\", exception=True)\n\n        except RetryInterrupt:\n            self.log.error(\"Caught retry\")\n            job.save_retry(sys.exc_info()[1])\n\n        except MaxRetriesInterrupt:\n            self.log.error(\"Max retries reached\")\n            job._save_status(\"maxretries\", exception=True)\n\n        except AbortInterrupt:\n            self.log.error(\"Caught abort\")\n            job.save_abort()\n\n        except TimeoutInterrupt:\n            self.log.error(\"Job timeouted after %s seconds\" % job.timeout)\n            job._save_status(\"timeout\", exception=True)\n\n        except JobInterrupt:\n            self.log.error(\"Job interrupted\")\n            job._save_status(\"interrupt\", exception=True)\n\n        except Exception:\n            self.log.error(\"Job failed\")\n            job._save_status(\"failed\", exception=True)\n\n        finally:\n\n            set_current_job(None)\n\n            self.done_jobs += 1\n\n            if self.config[\"trace_memory\"]:\n                job.trace_memory_stop()","label":0}
{"text":"public function getFacts()\n    {\n        if ($this->facts === null) {\n            $this->setFacts($this->nodeService->getNodeFacts($this->getName()));\n        }\n        return $this->facts;\n    }","label":0}
{"text":"function openSerialPortDevice(readFd) {\n\t\t\/\/Save TTY streams\n\t\tself._readStream = new tty.ReadStream(readFd);\n\t\tself._readStream.setRawMode(true);\n\t\tself._writeStream = self._readStream;\n\t\t\/\/Setup error handlers\n\t\tself._readStream.on(\"error\", function(err) {\n\t\t\tself.emit(\"error\", err);\n\t\t});\n\t\t\/\/Setup read event handlers\n\t\tself._readStream.on(\"data\", function(chunk) {\n\t\t\tself.push(chunk);\n\t\t});\n\t\tself._readStream.on(\"end\", function() {\n\t\t\tself.push(null);\n\t\t});\n\t\tself._readStream.on(\"close\", function() {\n\t\t\tself.emit(\"close\");\n\t\t});\n\t\t\/\/Emit open event\n\t\tself.emit(\"open\",self._readStream);\n\t}","label":0}
{"text":"public function flatten()\n    {\n        return $this->translations->map(function ($values, $groupkey) {\n            return $this->prependGroupkey($values, $groupkey);\n        })->collapse();\n    }","label":0}
{"text":"public void follow(String blogName) {\n        Map<String, String> map = new HashMap<String, String>();\n        map.put(\"url\", JumblrClient.blogUrl(blogName));\n        requestBuilder.post(\"\/user\/follow\", map);\n    }","label":0}
{"text":"def get_shared_nodes(G1: nx.DiGraph, G2: nx.DiGraph) -> List[str]:\n    \"\"\"\"\"\"\n    return list(set(G1.nodes()).intersection(set(G2.nodes())))","label":0}
{"text":"def p_statement_border(p):\n    \n    p[0] = make_sentence('BORDER',\n                         make_typecast(TYPE.ubyte, p[2], p.lineno(1)))","label":0}
{"text":"func (p *Pool) ReadUnlock(ctx context.Context, id uint64) {\n\tp.lock.RUnlock(id)\n}","label":0}
{"text":"private void setTupleValue(Tuple tuple, int position, Object value, AbstractType<?> validator) throws ExecException\n    {\n        if (validator instanceof CollectionType)\n            setCollectionTupleValues(tuple, position, value, validator);\n        else\n           setTupleValue(tuple, position, value);\n    }","label":0}
{"text":"func NewProjectCreateCommand(clientOpts *argocdclient.ClientOptions) *cobra.Command {\n\tvar (\n\t\topts projectOpts\n\t)\n\tvar command = &cobra.Command{\n\t\tUse:   \"create PROJECT\",\n\t\tShort: \"Create a project\",\n\t\tRun: func(c *cobra.Command, args []string) {\n\t\t\tif len(args) == 0 {\n\t\t\t\tc.HelpFunc()(c, args)\n\t\t\t\tos.Exit(1)\n\t\t\t}\n\t\t\tprojName := args[0]\n\t\t\tproj := v1alpha1.AppProject{\n\t\t\t\tObjectMeta: v1.ObjectMeta{Name: projName},\n\t\t\t\tSpec: v1alpha1.AppProjectSpec{\n\t\t\t\t\tDescription:  opts.description,\n\t\t\t\t\tDestinations: opts.GetDestinations(),\n\t\t\t\t\tSourceRepos:  opts.sources,\n\t\t\t\t},\n\t\t\t}\n\t\t\tconn, projIf := argocdclient.NewClientOrDie(clientOpts).NewProjectClientOrDie()\n\t\t\tdefer util.Close(conn)\n\n\t\t\t_, err := projIf.Create(context.Background(), &project.ProjectCreateRequest{Project: &proj})\n\t\t\terrors.CheckError(err)\n\t\t},\n\t}\n\taddProjFlags(command, &opts)\n\treturn command\n}","label":0}
{"text":"func (s *GetJobOutputOutput) SetAcceptRanges(v string) *GetJobOutputOutput {\n\ts.AcceptRanges = &v\n\treturn s\n}","label":0}
{"text":"def encodePathElement(element):\n    \"\"\"\"\"\"\n    return urllib.parse.quote(\n        (\n            element.encode('utf-8')\n            if isinstance(element, str)\n            else str(element)\n            if isinstance(element, int)\n            else element\n        ),\n        safe=d1_common.const.URL_PATHELEMENT_SAFE_CHARS,\n    )","label":0}
{"text":"def run_on_modifications(paths)\n      return pending_result if paths.empty?\n      Guard::UI.info(\"Running: #{paths.join(', ')}\", reset: true)\n      do_run{ @runner.run(paths) }\n    end","label":0}
{"text":"public java.util.List<String> getLoadBalancerNames() {\n        if (loadBalancerNames == null) {\n            loadBalancerNames = new com.amazonaws.internal.SdkInternalList<String>();\n        }\n        return loadBalancerNames;\n    }","label":0}
{"text":"def adapter_type(self, adapter_type):\n        \n\n        self._adapter_type = adapter_type\n        log.info(\"VMware VM '{name}' [{id}]: adapter type changed to {adapter_type}\".format(name=self.name,\n                                                                                            id=self.id,\n                                                                                            adapter_type=adapter_type))","label":0}
{"text":"func (cache autocertCache) Delete(ctx context.Context, name string) error {\n\tcoll, closeColl := cache.coll()\n\tdefer closeColl()\n\terr := coll.RemoveId(name)\n\tif err == nil || errors.Cause(err) == mgo.ErrNotFound {\n\t\treturn nil\n\t}\n\treturn errors.Annotatef(err, \"cannot delete autocert key %q\", name)\n}","label":0}
{"text":"def iter_merge(cls, timeseries_list):\n        \n        # using return without an argument is the way to say \"the\n        # iterator is empty\" when there is nothing to iterate over\n        # (the more you know...)\n        if not timeseries_list:\n            return\n\n        # for ts in timeseries_list:\n        #     if ts.is_floating():\n        #         msg = \"can't merge empty TimeSeries with no default value\"\n        #         raise KeyError(msg)\n\n        # This function mostly wraps _iter_merge, the main point of\n        # this is to deal with the case of tied times, where we only\n        # want to yield the last list of values that occurs for any\n        # group of tied times.\n        index, previous_t, previous_state = -1, object(), object()\n        for index, (t, state) in enumerate(cls._iter_merge(timeseries_list)):\n            if index > 0 and t != previous_t:\n                yield previous_t, previous_state\n            previous_t, previous_state = t, state\n\n        # only yield final thing if there was at least one element\n        # yielded by _iter_merge\n        if index > -1:\n            yield previous_t, previous_state","label":0}
{"text":"public function decrypt($entxt, $key=null, $expire=null)\n    {\n        $key = $key ?: $this->options['key'];\n        if (is_null($expire)) {\n            $expire = $this->options['expire'];\n        }\n        return $this->getAdapter()->decrypt($entxt, $key, $expire);\n    }","label":0}
{"text":"func (s *ProxyInfo) EnableIPTablesPacketTracing(ctx context.Context, contextID string, interval time.Duration) error {\n\n\trequest := &rpcwrapper.Request{\n\t\tPayload: &rpcwrapper.EnableIPTablesPacketTracingPayLoad{\n\t\t\tIPTablesPacketTracing: true,\n\t\t\tInterval:              interval,\n\t\t\tContextID:             contextID,\n\t\t},\n\t}\n\n\tif err := s.rpchdl.RemoteCall(contextID, remoteenforcer.EnableIPTablesPacketTracing, request, &rpcwrapper.Response{}); err != nil {\n\t\treturn fmt.Errorf(\"Unable to enable iptables tracing for contextID %s: %s\", contextID, err)\n\t}\n\n\treturn nil\n}","label":0}
{"text":"public function rgb2gray($c)\n\t{\n\t\tif (isset($c[4])) {\n\t\t\treturn [1, ($c[1] * .21) + ($c[2] * .71) + ($c[3] * .07), ord(1), $c[4]];\n\t\t}\n\n\t\treturn [1, ($c[1] * .21) + ($c[2] * .71) + ($c[3] * .07)];\n\t}","label":0}
{"text":"def each_task\n      return enum_for(__method__) unless block_given?\n\n      @doc.xpath('\/nmaprun\/taskbegin').each do |task_begin|\n        task_end = task_begin.xpath('following-sibling::taskend').first\n\n        yield ScanTask.new(\n          task_begin['task'],\n          Time.at(task_begin['time'].to_i),\n          Time.at(task_end['time'].to_i),\n          task_end['extrainfo']\n        )\n      end\n\n      return self\n    end","label":0}
{"text":"public void writeClassAndObject (Output output, Object object) {\r\n\t\tif (output == null) throw new IllegalArgumentException(\"output cannot be null.\");\r\n\t\tbeginObject();\r\n\t\ttry {\r\n\t\t\tif (object == null) {\r\n\t\t\t\twriteClass(output, null);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tRegistration registration = writeClass(output, object.getClass());\r\n\t\t\tif (references && writeReferenceOrNull(output, object, false)) return;\r\n\t\t\tif (TRACE || (DEBUG && depth == 1)) log(\"Write\", object, output.position());\r\n\t\t\tregistration.getSerializer().write(this, output, object);\r\n\t\t} finally {\r\n\t\t\tif (--depth == 0 && autoReset) reset();\r\n\t\t}\r\n\t}","label":0}
{"text":"protected function executeSchemaCommand(InputInterface $input, OutputInterface $output,\n\t\tSchemaTool $schemaTool, array $metadata, SymfonyStyle $ui)\n\t{\n\t\t$merger = new MetadataMerger();\n\t\t$metadata = $merger->merge($metadata);\n\n\t\treturn parent::executeSchemaCommand($input, $output, $schemaTool, $metadata, $ui);\n\t}","label":0}
{"text":"public synchronized void setImages(BufferedImage leftImage , BufferedImage rightImage ) {\n\t\tthis.leftImage = leftImage;\n\t\tthis.rightImage = rightImage;\n\n\t\tsetPreferredSize(leftImage.getWidth(),leftImage.getHeight(),rightImage.getWidth(),rightImage.getHeight());\n\t}","label":0}
{"text":"public function getDataFromProvider()\n    {\n        $select = $this->get(self::DATA_PARAM);\n        if(is_null($select->getValue())) {\n            return array();\n        }\n        $classname = $select->getValue();\n        if (!class_exists($classname) || !array_key_exists($classname, $select->getOptions())) {\n            throw new NotFoundException;\n        }\n        return (new $classname)->getData();\n\n    }","label":0}
{"text":"public static int readRawVarint32(\n      final int firstByte, final InputStream input) throws IOException {\n    if ((firstByte & 0x80) == 0) {\n      return firstByte;\n    }\n\n    int result = firstByte & 0x7f;\n    int offset = 7;\n    for (; offset < 32; offset += 7) {\n      final int b = input.read();\n      if (b == -1) {\n        throw InvalidProtocolBufferException.truncatedMessage();\n      }\n      result |= (b & 0x7f) << offset;\n      if ((b & 0x80) == 0) {\n        return result;\n      }\n    }\n    \/\/ Keep reading up to 64 bits.\n    for (; offset < 64; offset += 7) {\n      final int b = input.read();\n      if (b == -1) {\n        throw InvalidProtocolBufferException.truncatedMessage();\n      }\n      if ((b & 0x80) == 0) {\n        return result;\n      }\n    }\n    throw InvalidProtocolBufferException.malformedVarint();\n  }","label":0}
{"text":"func (s *ServiceBroker) Unbind(instanceID, bindingID string, details brokerapi.UnbindDetails) error {\n\tserviceBinding := s.findOneBinding(instanceID, bindingID)\n\tserviceBinding.SetActive(false)\n\terr := s.remove(serviceBinding)\n\treturn err\n}","label":0}
{"text":"func (c *CloudNodeLifecycleController) Run(stopCh <-chan struct{}) {\n\tdefer utilruntime.HandleCrash()\n\n\t\/\/ The following loops run communicate with the APIServer with a worst case complexity\n\t\/\/ of O(num_nodes) per cycle. These functions are justified here because these events fire\n\t\/\/ very infrequently. DO NOT MODIFY this to perform frequent operations.\n\n\t\/\/ Start a loop to periodically check if any nodes have been\n\t\/\/ deleted or shutdown from the cloudprovider\n\twait.Until(c.MonitorNodes, c.nodeMonitorPeriod, stopCh)\n}","label":0}
{"text":"function persistSubscriptionLocally(subscription) {\n    let subscriptionJSON = JSON.stringify(subscription);\n    idb.open('web-push-db', 1).then(db => {\n        let tx = db.transaction(['web-push-subcription'], 'readwrite');\n        tx.objectStore('web-push-subcription').put({\n            id: 1,\n            data: subscriptionJSON\n        });\n        return tx.complete;\n    });\n}","label":0}
{"text":"func decodeFrom(opts *options, src interface{}) Into {\n\treturn func(dest interface{}) error {\n\t\tvar fieldHooks FieldHookFunc\n\t\thooks := opts.DecodeHooks\n\n\t\t\/\/ fieldHook goes first because it may replace the source data map.\n\t\tif len(opts.FieldHooks) > 0 {\n\t\t\tfieldHooks = composeFieldHooks(opts.FieldHooks)\n\t\t}\n\n\t\thooks = append(\n\t\t\thooks,\n\t\t\tunmarshalerHook(opts),\n\t\t\t\/\/ durationHook must come before the strconvHook\n\t\t\t\/\/ because the Kind of time.Duration is Int64.\n\t\t\tdurationHook,\n\t\t\tstrconvHook,\n\t\t)\n\n\t\tcfg := mapstructure.DecoderConfig{\n\t\t\tErrorUnused:    !opts.IgnoreUnused,\n\t\t\tResult:         dest,\n\t\t\tSquashEmbedded: true,\n\t\t\tDecodeHook: fromDecodeHookFunc(\n\t\t\t\tsupportPointers(composeDecodeHooks(hooks)),\n\t\t\t),\n\t\t\tFieldHook: mapstructure.FieldHookFunc(fieldHooks),\n\t\t\tTagName:   opts.TagName,\n\t\t}\n\n\t\tdecoder, err := mapstructure.NewDecoder(&cfg)\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"failed to set up decoder: %v\", err)\n\t\t}\n\n\t\tif err := decoder.Decode(src); err != nil {\n\t\t\tif merr, ok := err.(*mapstructure.Error); ok {\n\t\t\t\treturn multierr.Combine(merr.WrappedErrors()...)\n\t\t\t}\n\t\t\treturn err\n\t\t}\n\n\t\treturn nil\n\t}\n}","label":0}
{"text":"function spawnExt(command, args, options, ignoreClose = false,\n                  printMessage = msg => process.stdout.write(msg)) {\n  let proc;\n  const promise = new Promise((resolve, reject) => {\n    let descr = command + ' ' + args.join(' ');\n    let processOutput = '';\n    printMessage(`running: ${descr}\\n`);\n    try {\n      proc = xSpawn.spawn(command, args, options);\n    } catch (e) {\n      console.log(e);\n      reject(e);\n      return {proc: null, promise};\n    }\n    proc.stdout.on('data', printMessage);\n    proc.stderr.on('data', printMessage);\n\n    proc.on('close', function(returnCode) {\n      printMessage(`completed: ${descr}\\n\\n`);\n      \/\/ Many tasks (e.g., tsc) complete but are actually errors;\n      \/\/ Confirm return code is zero.\n      returnCode === 0 || ignoreClose ? resolve(0) : reject(returnCode);\n    });\n    proc.on('error', function(data) {\n      printMessage(`completed with error: ${descr}\\n\\n`);\n      printMessage(`${data.toString()}\\n`);\n      reject(data);\n    });\n  });\n  return {proc, promise};\n}","label":0}
{"text":"def register_from_fields(self, *args):\n        \n        names = []\n        for field in args:\n            widget = self.resolve_widget(field)\n            self.register(widget.config_name)\n            if widget.config_name not in names:\n                names.append(widget.config_name)\n\n        return names","label":0}
{"text":"public static <K, V> ConcurrentMap<K, V> createWeakKeyConcurrentMap(int initialCapacity, int concurrencyLevel) {\n\t\treturn new MapMaker().weakKeys().initialCapacity(initialCapacity).concurrencyLevel(concurrencyLevel).makeMap();\n\t}","label":0}
{"text":"public static function generate_script_dependencies( $maybe_dependencies ) {\n\t\t$dependencies = [];\n\t\tforeach ( $maybe_dependencies as $dependency ) {\n\t\t\tif ( ! wp_script_is( $dependency, 'enqueued' ) && ! wp_script_is( $dependency, 'registered' ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t$dependencies[] = $dependency;\n\t\t}\n\t\treturn $dependencies;\n\t}","label":0}
{"text":"func (window *Window) GLMakeCurrent(glcontext GLContext) error {\n\treturn errorFromInt(int(\n\t\tC.SDL_GL_MakeCurrent(window.cptr(), C.SDL_GLContext(glcontext))))\n}","label":0}
{"text":"func New() *Router {\n\treturn &Router{\n\t\tdynamicRoutes: dynamicSet{},\n\t\troutes:        &Trie{},\n\t\tLogger:        logger,\n\t\tVerbose:       true,\n\t}\n}","label":0}
{"text":"public function getBinaryTypeDeclarationSQL(array $field)\n    {\n        if (! isset($field['length'])) {\n            $field['length'] = $this->getBinaryDefaultLength();\n        }\n\n        $fixed = $field['fixed'] ?? false;\n\n        $maxLength = $this->getBinaryMaxLength();\n\n        if ($field['length'] > $maxLength) {\n            if ($maxLength > 0) {\n                @trigger_error(sprintf(\n                    'Binary field length %d is greater than supported by the platform (%d). Reduce the field length or use a BLOB field instead.',\n                    $field['length'],\n                    $maxLength\n                ), E_USER_DEPRECATED);\n            }\n\n            return $this->getBlobTypeDeclarationSQL($field);\n        }\n\n        return $this->getBinaryTypeDeclarationSQLSnippet($field['length'], $fixed);\n    }","label":0}
{"text":"def remove_eoc_marker(self, text, next_text):\n        \"\"\"\"\"\"\n        if self.cell_marker_start:\n            return text\n\n        if self.is_code() and text[-1] == self.comment + ' -':\n            # remove end of cell marker when redundant with next explicit marker\n            if not next_text or next_text[0].startswith(self.comment + ' + {'):\n                text = text[:-1]\n                # When we do not need the end of cell marker, number of blank lines is the max\n                # between that required at the end of the cell, and that required before the next cell.\n                if self.lines_to_end_of_cell_marker and (self.lines_to_next_cell is None or\n                                                         self.lines_to_end_of_cell_marker > self.lines_to_next_cell):\n                    self.lines_to_next_cell = self.lines_to_end_of_cell_marker\n            else:\n                # Insert blank lines at the end of the cell\n                blank_lines = self.lines_to_end_of_cell_marker\n                if blank_lines is None:\n                    # two blank lines when required by pep8\n                    blank_lines = pep8_lines_between_cells(text[:-1], next_text, self.ext)\n                    blank_lines = 0 if blank_lines < 2 else 2\n                text = text[:-1] + [''] * blank_lines + text[-1:]\n\n        return text","label":0}
{"text":"def keep_alive(self, val: bool) -> None:\n        \n        self._keepalive = val\n        if self._keepalive_handle:\n            self._keepalive_handle.cancel()\n            self._keepalive_handle = None","label":0}
{"text":"def serialize_identity(self, identity):\n    \n    section, check, iterargs = identity\n    values = map(\n        # separators are without space, which is the default in JavaScript;\n        # just in case we need to make these keys in JS.\n        partial(json.dumps, separators=(',', ':'))\n        # iterargs are sorted, because it doesn't matter for the result\n        # but it gives more predictable keys.\n        # Though, arguably, the order generated by the profile is also good\n        # and conveys insights on how the order came to be (clustering of\n        # iterargs). `sorted(iterargs)` however is more robust over time,\n        # the keys will be the same, even if the sorting order changes.\n      , [str(section), check.id, sorted(iterargs)]\n    )\n    return '{{\"section\":{},\"check\":{},\"iterargs\":{}}}'.format(*values)","label":0}
{"text":"protected function saveFields( array $submittedData, $task )\n\t{\n\t\t$task->{$this->fieldSite} = $submittedData[$this->fieldSite];\n\t\t$task->{$this->fieldController} = $submittedData[$this->fieldController];\n\t\t$task->{$this->fieldTSconfig} = $submittedData[$this->fieldTSconfig];\n\t}","label":0}
{"text":"def list_check(*args, func=None):\n    \"\"\"\"\"\"\n    func = func or inspect.stack()[2][3]\n    for var in args:\n        if not isinstance(var, (list, collections.UserList, collections.abc.MutableSequence)):\n            name = type(var).__name__\n            raise ListError(\n                f'Function {func} expected list, {name} got instead.')","label":0}
{"text":"def _update(self):\n        \"\"\"\"\"\"\n        self.clear()\n        self._set_boutons_communs()\n        if self.interface:\n            self.addSeparator()\n            l_actions = self.interface.get_actions_toolbar()\n            self._set_boutons_interface(l_actions)","label":0}
{"text":"func (p *Path) Regex(pattern *regexp.Regexp) *Path {\n\treturn p.Filters(shape.Regexp{Re: pattern, Refs: false})\n}","label":0}
{"text":"public static function genRandomChar($length = 8)\n    {\n        \/\/ \u5bc6\u7801\u5b57\u7b26\u96c6\uff0c\u53ef\u4efb\u610f\u6dfb\u52a0\u4f60\u9700\u8981\u7684\u5b57\u7b26\n        \/\/$chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n        $chars = 'abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ23456789';\n        $char = '';\n        for ($i = 0; $i < $length; $i++) {\n            $char .= $chars[mt_rand(0, strlen($chars) - 1)];\n        }\n        return $char;\n    }","label":0}
{"text":"func (r report) String() string {\n\tresult := &bytes.Buffer{}\n\tfmt.Fprintf(result, \"{\")\n\tfor k := range r {\n\t\tvar status string\n\t\tswitch k {\n\t\tcase statusPending:\n\t\t\tstatus = \"pending\"\n\t\tcase statusDownloading:\n\t\t\tstatus = \"downloading\"\n\t\tcase statusExtracting:\n\t\t\tstatus = \"extracting\"\n\t\tcase statusComplete:\n\t\t\tstatus = \"complete\"\n\t\t}\n\t\tfmt.Fprintf(result, \"%s:{Count: %d, Current: %d, Total: %d}, \", status, r[k].Count, r[k].Current, r[k].Total)\n\t}\n\tfmt.Fprintf(result, \"}\")\n\treturn result.String()\n}","label":0}
{"text":"public function export_for_template(renderer_base $output) {\n        global $CFG, $DB, $PAGE;\n\n        $context = context_course::instance($this->courseid);\n\n        $data = new stdClass();\n        $data->userid = $this->userid;\n        $data->competencyid = $this->competencyid;\n        $data->courseid = $this->courseid;\n        $data->baseurl = $this->baseurl;\n        $data->groupselector = '';\n\n        if (has_any_capability(array('moodle\/competency:usercompetencyview', 'moodle\/competency:coursecompetencymanage'),\n                $context)) {\n            $course = $DB->get_record('course', array('id' => $this->courseid));\n            $currentgroup = groups_get_course_group($course, true);\n            if ($currentgroup !== false) {\n                $select = groups_allgroups_course_menu($course, $PAGE->url, true, $currentgroup);\n                $data->groupselector = $select;\n            }\n            \/\/ Fetch showactive.\n            $defaultgradeshowactiveenrol = !empty($CFG->grade_report_showonlyactiveenrol);\n            $showonlyactiveenrol = get_user_preferences('grade_report_showonlyactiveenrol', $defaultgradeshowactiveenrol);\n            $showonlyactiveenrol = $showonlyactiveenrol || !has_capability('moodle\/course:viewsuspendedusers', $context);\n\n            $users = get_enrolled_users($context, 'moodle\/competency:coursecompetencygradable', $currentgroup,\n                                        'u.*', null, 0, 0, $showonlyactiveenrol);\n\n            $data->users = array();\n            foreach ($users as $user) {\n                $exporter = new user_summary_exporter($user);\n                $user = $exporter->export($output);\n                if ($user->id == $this->userid) {\n                    $user->selected = true;\n                }\n                $data->users[] = $user;\n            }\n            $data->hasusers = true;\n        } else {\n            $data->users = array();\n            $data->hasusers = false;\n        }\n\n        $coursecompetencies = \\core_competency\\api::list_course_competencies($this->courseid);\n        $data->competencies = array();\n        $helper = new performance_helper();\n        foreach ($coursecompetencies as $coursecompetency) {\n            $coursecompetencycontext = $helper->get_context_from_competency($coursecompetency['competency']);\n            $exporter = new competency_exporter($coursecompetency['competency'], array('context' => $coursecompetencycontext));\n            $competency = $exporter->export($output);\n            if ($competency->id == $this->competencyid) {\n                $competency->selected = true;\n            }\n            $data->competencies[] = $competency;\n        }\n        $data->hascompetencies = count($data->competencies);\n        return $data;\n    }","label":0}
{"text":"public function save($oldText, $newText, $data, $lifeTime = 0)\n    {\n        return $this->cacheProvider->save($this->getHashKey($oldText, $newText), $data, $lifeTime);\n    }","label":0}
{"text":"func (s *JobReport) Validate() error {\n\tinvalidParams := request.ErrInvalidParams{Context: \"JobReport\"}\n\tif s.Bucket != nil && len(*s.Bucket) < 1 {\n\t\tinvalidParams.Add(request.NewErrParamMinLen(\"Bucket\", 1))\n\t}\n\tif s.Enabled == nil {\n\t\tinvalidParams.Add(request.NewErrParamRequired(\"Enabled\"))\n\t}\n\tif s.Prefix != nil && len(*s.Prefix) < 1 {\n\t\tinvalidParams.Add(request.NewErrParamMinLen(\"Prefix\", 1))\n\t}\n\n\tif invalidParams.Len() > 0 {\n\t\treturn invalidParams\n\t}\n\treturn nil\n}","label":0}
{"text":"func (c Cap) Union(other Cap) Cap {\n\t\/\/ If the other cap is larger, swap c and other for the rest of the computations.\n\tif c.radius < other.radius {\n\t\tc, other = other, c\n\t}\n\n\tif c.IsFull() || other.IsEmpty() {\n\t\treturn c\n\t}\n\n\t\/\/ TODO: This calculation would be more efficient using s1.ChordAngles.\n\tcRadius := c.Radius()\n\totherRadius := other.Radius()\n\tdistance := c.center.Distance(other.center)\n\tif cRadius >= distance+otherRadius {\n\t\treturn c\n\t}\n\n\tresRadius := 0.5 * (distance + cRadius + otherRadius)\n\tresCenter := InterpolateAtDistance(0.5*(distance-cRadius+otherRadius), c.center, other.center)\n\treturn CapFromCenterAngle(resCenter, resRadius)\n}","label":0}
{"text":"func existsDebit(ns walletdb.ReadBucket, txHash *chainhash.Hash, index uint32, block *Block) (k, credKey []byte, err error) {\n\tk = keyDebit(txHash, index, block)\n\tv := ns.NestedReadBucket(bucketDebits).Get(k)\n\tif v == nil {\n\t\treturn nil, nil, nil\n\t}\n\tif len(v) < 80 {\n\t\tstr := fmt.Sprintf(\"%s: short read (expected 80 bytes, read %v)\",\n\t\t\tbucketDebits, len(v))\n\t\treturn nil, nil, storeError(ErrData, str, nil)\n\t}\n\treturn k, v[8:80], nil\n}","label":0}
{"text":"public static function extractAndValidateOptions(array &$array)\n\t{\n\t\t$options = array();\n\n\t\tif ($array)\n\t\t{\n\t\t\t$last = &$array[count($array)-1];\n\n\t\t\ttry\n\t\t\t{\n\t\t\t\tif (self::isOptionsHash($last))\n\t\t\t\t{\n\t\t\t\t\tarray_pop($array);\n\t\t\t\t\t$options = $last;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (ActiveRecordException $e)\n\t\t\t{\n\t\t\t\tif (!Arry::isHash($last))\n\t\t\t\t\tthrow $e;\n\n\t\t\t\t$options = array('conditions' => $last);\n\t\t\t}\n\t\t}\n\n\t\t\/\/ Check if and order was given\n\t\tif (!array_key_exists(\"order\", $options)) {\n\n\t\t\t\/\/ A static configurator?\n\t\t\tif (static::$defaultOrder) {\n\n\t\t\t\t\/\/ Use that\n\t\t\t\t$options['order'] = static::$defaultOrder;\n\n\t\t\t} else {\n\n\t\t\t\t\/\/ Use my pk's\n\t\t\t\t$options['order'] = join(' ASC, ', static::table()->pk) . ' ASC';\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn $options;\n\t}","label":0}
{"text":"protected function parseStatusArguments(string $status, array $args): array\n    {\n        $name = ucfirst($status);\n\n        return wp_parse_args($args, [\n            'label' => $name,\n            'public' => true,\n            'exclude_from_search' => false,\n            'show_in_admin_all_list' => true,\n            'show_in_admin_status_list' => true,\n            'label_count' => _n_noop(\n                $name.' <span class=\"count\">(%s)<\/span>',\n                $name.' <span class=\"count\">(%s)<\/span>'\n            ),\n            'publish_text' => __('Apply Changes')\n        ]);\n    }","label":0}
{"text":"def destroy(name, conn=None, call=None):\n    '''\n    \n    '''\n    if call == 'function':\n        raise SaltCloudSystemExit(\n            'The destroy action must be called with -d, --destroy, '\n            '-a or --action.'\n        )\n\n    __utils__['cloud.fire_event'](\n        'event',\n        'destroying instance',\n        'salt\/cloud\/{0}\/destroying'.format(name),\n        args={'name': name},\n        sock_dir=__opts__['sock_dir'],\n        transport=__opts__['transport']\n    )\n\n    if not conn:\n        conn = get_conn()   # pylint: disable=E0602\n\n    node = get_node(conn, name)\n    profiles = get_configured_provider()['profiles']  # pylint: disable=E0602\n    if node is None:\n        log.error('Unable to find the VM %s', name)\n    profile = None\n    if 'metadata' in node.extra and 'profile' in node.extra['metadata']:\n        profile = node.extra['metadata']['profile']\n\n    flush_mine_on_destroy = False\n    if profile and profile in profiles and 'flush_mine_on_destroy' in profiles[profile]:\n        flush_mine_on_destroy = profiles[profile]['flush_mine_on_destroy']\n\n    if flush_mine_on_destroy:\n        log.info('Clearing Salt Mine: %s', name)\n\n        mopts_ = salt.config.DEFAULT_MINION_OPTS\n        conf_path = '\/'.join(__opts__['conf_file'].split('\/')[:-1])\n        mopts_.update(\n            salt.config.minion_config(os.path.join(conf_path, 'minion'))\n        )\n        client = salt.client.get_local_client(mopts_)\n        minions = client.cmd(name, 'mine.flush')\n\n    log.info('Clearing Salt Mine: %s, %s', name, flush_mine_on_destroy)\n    log.info('Destroying VM: %s', name)\n    ret = conn.destroy_node(node)\n    if ret:\n        log.info('Destroyed VM: %s', name)\n        # Fire destroy action\n        __utils__['cloud.fire_event'](\n            'event',\n            'destroyed instance',\n            'salt\/cloud\/{0}\/destroyed'.format(name),\n            args={'name': name},\n            sock_dir=__opts__['sock_dir'],\n            transport=__opts__['transport']\n        )\n        if __opts__['delete_sshkeys'] is True:\n            public_ips = getattr(node, __opts__.get('ssh_interface', 'public_ips'))\n            if public_ips:\n                salt.utils.cloud.remove_sshkey(public_ips[0])\n\n            private_ips = getattr(node, __opts__.get('ssh_interface', 'private_ips'))\n            if private_ips:\n                salt.utils.cloud.remove_sshkey(private_ips[0])\n\n        if __opts__.get('update_cachedir', False) is True:\n            __utils__['cloud.delete_minion_cachedir'](name, __active_provider_name__.split(':')[0], __opts__)\n\n        return True\n\n    log.error('Failed to Destroy VM: %s', name)\n    return False","label":0}
{"text":"public function preFlush(PreFlushEventArgs $args)\n    {\n        $uow = $args->getEntityManager()->getUnitOfWork();\n        $result = $uow->getIdentityMap();\n        if(isset($result[$this->targetClass])) {\n            foreach ($result[$this->targetClass] as $entity) {\n                $this->updateEntity($entity);\n            }\n        }\n    }","label":0}
{"text":"func UpgradePrep(stateless bool, b backend.Backend) error {\n\tvar wg sync.WaitGroup\n\n\tb.Stop([]string{\"database\", \"registry@*\", \"controller\", \"builder\", \"logger\", \"logspout\"}, &wg, Stdout, Stderr)\n\twg.Wait()\n\tb.Destroy([]string{\"database\", \"registry@*\", \"controller\", \"builder\", \"logger\", \"logspout\"}, &wg, Stdout, Stderr)\n\twg.Wait()\n\n\tif !stateless {\n\t\tb.Stop([]string{\"store-volume\", \"store-gateway@*\"}, &wg, Stdout, Stderr)\n\t\twg.Wait()\n\t\tb.Destroy([]string{\"store-volume\", \"store-gateway@*\"}, &wg, Stdout, Stderr)\n\t\twg.Wait()\n\n\t\tb.Stop([]string{\"store-metadata\"}, &wg, Stdout, Stderr)\n\t\twg.Wait()\n\t\tb.Destroy([]string{\"store-metadata\"}, &wg, Stdout, Stderr)\n\t\twg.Wait()\n\n\t\tb.Stop([]string{\"store-daemon\"}, &wg, Stdout, Stderr)\n\t\twg.Wait()\n\t\tb.Destroy([]string{\"store-daemon\"}, &wg, Stdout, Stderr)\n\t\twg.Wait()\n\n\t\tb.Stop([]string{\"store-monitor\"}, &wg, Stdout, Stderr)\n\t\twg.Wait()\n\t\tb.Destroy([]string{\"store-monitor\"}, &wg, Stdout, Stderr)\n\t\twg.Wait()\n\t}\n\n\tfmt.Fprintln(Stdout, \"The platform has been stopped, but applications are still serving traffic as normal.\")\n\tfmt.Fprintln(Stdout, \"Your cluster is now ready for upgrade. Install a new deisctl version and run `deisctl upgrade-takeover`.\")\n\tfmt.Fprintln(Stdout, \"For more details, see: http:\/\/docs.deis.io\/en\/latest\/managing_deis\/upgrading-deis\/#graceful-upgrade\")\n\treturn nil\n}","label":0}
{"text":"func (s *ContainerDefinition) SetUlimits(v []*Ulimit) *ContainerDefinition {\n\ts.Ulimits = v\n\treturn s\n}","label":0}
{"text":"function () {\n        return arguments.length ? _.pick(this._, Array.prototype.slice.apply(arguments)) : _.cloneDeep(this._);\n    }","label":0}
{"text":"public function add(string $name, callable $callback): self\n    {\n        if ($this->exists($name)) {\n            throw new LogicException(\n                'The helper function name \"' . $name . '\" is already registered.'\n            );\n        }\n\n        $this->helpers[$name] = $callback;\n\n        return $this;\n    }","label":0}
{"text":"public function savesetsAction(Request $request)\n    {\n        $fileId = $request->get('file_id');\n        $joinedIds = $request->get('ids');\n        if ($joinedIds) {\n            $ids = explode(',', $joinedIds);\n        } else {\n            $ids = [];\n        }\n\n        $volumeManager = $this->get('phlexible_media_manager.volume_manager');\n\n        $volume = $volumeManager->getByFileId($fileId);\n        $file = $volume->findFile($fileId);\n        $volume->setFileMetasets($file, $ids, $this->getUser()->getId());\n\n        return new ResultResponse(true, 'Set added.');\n    }","label":0}
{"text":"def get_share_info(self, grantee_type=None, grantee_id=None,\n                       grantee_name=None, owner=None, owner_type='name'):\n        \n        params = {}\n        if grantee_type:\n            if 'grantee' not in params.keys():\n                params['grantee'] = {}\n            params['grantee'].update({'type': grantee_type})\n        if grantee_id:\n            if 'grantee' not in params.keys():\n                params['grantee'] = {}\n            params['grantee'].update({'id': grantee_id})\n        if grantee_name:\n            if 'grantee' not in params.keys():\n                params['grantee'] = {}\n            params['grantee'].update({'name': grantee_name})\n        if owner:\n            params['owner'] = {'by': owner_type, '_content': owner}\n\n        try:\n            resp = self.request('GetShareInfo', params)\n        # if user never logged in, no mailbox was created\n        except ZimbraSoapServerError as e:\n            if 'mailbox not found for account' in str(e):\n                return []\n            else:\n                raise e\n        if resp and isinstance(resp['share'], list):\n            return resp['share']\n        elif resp and isinstance(resp['share'], dict):\n            return [resp['share']]\n        else:\n            return []","label":0}
{"text":"def get_profile_data(self, raw_token):\n        \"\"\"\"\"\"\n        token_data = json.loads(raw_token)\n        # This header is the 'magic' that makes this empty GET request work.\n        headers = {'Authorization': 'OAuth %s' % token_data['access_token']}\n\n        try:\n            response = self.request('get', self.profile_url, headers=headers)\n            response.raise_for_status()\n        except RequestException as e:\n            logger.error('Unable to fetch user profile: {0}'.format(e))\n            return None\n        else:\n            return response.json() or response.text","label":0}
{"text":"function printError(error) {\n    process.stderr.write(red);\n    console.error(error.trace);\n    process.stderr.write(yellow);\n    console.error('an error occurred, please file an issue');\n    process.stderr.write(reset);\n    process.exit(1);\n  }","label":0}
{"text":"public function getAttributes()\n    {\n        $result = [];\n        foreach ($this->element->getAttributes() as $attribute => $value) {\n            if (null === $value) {\n                $result[] = $attribute;\n                continue;\n            }\n\n            $result[] = \"{$attribute}=\\\"{$value}\\\"\";\n        }\n        return implode(' ', $result);\n    }","label":0}
{"text":"public function read($size = null)\n    {\n        if (feof($this->_stream)) {\n            $this->close();\n            $this->_params['debug']->info(\n                'ERROR: Server closed the connection.'\n            );\n            throw new Horde_Imap_Client_Exception(\n                Horde_Imap_Client_Translation::r(\"Server closed the connection unexpectedly.\"),\n                Horde_Imap_Client_Exception::DISCONNECT\n            );\n        }\n\n        if (($read = fgets($this->_stream)) === false) {\n            $this->_params['debug']->info('ERROR: read\/timeout error.');\n            throw new Horde_Imap_Client_Exception(\n                Horde_Imap_Client_Translation::r(\"Error when communicating with the mail server.\"),\n                Horde_Imap_Client_Exception::SERVER_READERROR\n            );\n        }\n\n        $this->_params['debug']->server(rtrim($read, \"\\r\\n\"));\n\n        return $read;\n    }","label":0}
{"text":"def snake(s):\n    \"\"\"\"\"\"\n    if len(s) < 2:\n        return s.lower()\n    out = s[0].lower()\n    for c in s[1:]:\n        if c.isupper():\n            out += \"_\"\n            c = c.lower()\n        out += c\n    return out","label":0}
{"text":"public void deleteColumn(int column) throws BadElementException {\n        float newWidths[] = new float[--columns];\n        System.arraycopy(widths, 0, newWidths, 0, column);\n        System.arraycopy(widths, column + 1, newWidths, column, columns - column);\n        setWidths(newWidths);\n        System.arraycopy(widths, 0, newWidths, 0, columns);\n        widths = newWidths;\n        Row row;\n        int size = rows.size();\n        for (int i = 0; i < size; i++) {\n            row = (Row) rows.get(i);\n            row.deleteColumn(column);\n            rows.set(i, row);\n        }\n        if (column == columns) {\n            curPosition.setLocation(curPosition.x+1, 0);\n        }\n    }","label":0}
{"text":"func (a *NavigateArgs) SetFrameID(frameID FrameID) *NavigateArgs {\n\ta.FrameID = &frameID\n\treturn a\n}","label":0}
{"text":"public function update()\n    {\n        $tripod = $this->getTripod();\n        if(isset($this->stat))\n        {\n            $tripod->setStat($this->stat);\n        }\n        $tripod->getComposite($this->operation)->update($this);\n    }","label":0}
{"text":"func (e *Exporter) getMemPoolDepth() error {\n\tres, err := e.service.UnconfirmedTxs(maxUnconfirmedTxsToFetch)\n\tif err != nil {\n\t\treturn err\n\t}\n\te.datum.UnconfirmedTxs = float64(res.NumTxs)\n\treturn nil\n}","label":0}
{"text":"def get_adapted_session(adapter):\n        \n        session = requests.Session()\n        session.mount(\"http:\/\/\", adapter)\n        session.mount(\"https:\/\/\", adapter)\n        return session","label":0}
{"text":"def _query(path, method='GET', data=None, params=None, header_dict=None, decode=True):\n    '''\n    \n    '''\n    api_key = config.get_cloud_config_value(\n        'api_key',\n        get_configured_provider(),\n        __opts__,\n        search_global=False,\n    )\n    management_host = config.get_cloud_config_value(\n        'management_host',\n        get_configured_provider(),\n        __opts__,\n        search_global=False,\n        default='api.vultr.com'\n    )\n    url = 'https:\/\/{management_host}\/v1\/{path}?api_key={api_key}'.format(\n        management_host=management_host,\n        path=path,\n        api_key=api_key,\n    )\n\n    if header_dict is None:\n        header_dict = {}\n\n    result = __utils__['http.query'](\n        url,\n        method=method,\n        params=params,\n        data=data,\n        header_dict=header_dict,\n        port=443,\n        text=True,\n        decode=decode,\n        decode_type='json',\n        hide_fields=['api_key'],\n        opts=__opts__,\n    )\n    if 'dict' in result:\n        return result['dict']\n\n    return result","label":0}
{"text":"func NewRESTClient(baseURL *url.URL, versionedAPIPath string, config ContentConfig, maxQPS float32, maxBurst int, rateLimiter flowcontrol.RateLimiter, client *http.Client) (*RESTClient, error) {\n\tbase := *baseURL\n\tif !strings.HasSuffix(base.Path, \"\/\") {\n\t\tbase.Path += \"\/\"\n\t}\n\tbase.RawQuery = \"\"\n\tbase.Fragment = \"\"\n\n\tif config.GroupVersion == nil {\n\t\tconfig.GroupVersion = &schema.GroupVersion{}\n\t}\n\tif len(config.ContentType) == 0 {\n\t\tconfig.ContentType = \"application\/json\"\n\t}\n\tserializers, err := createSerializers(config)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tvar throttle flowcontrol.RateLimiter\n\tif maxQPS > 0 && rateLimiter == nil {\n\t\tthrottle = flowcontrol.NewTokenBucketRateLimiter(maxQPS, maxBurst)\n\t} else if rateLimiter != nil {\n\t\tthrottle = rateLimiter\n\t}\n\treturn &RESTClient{\n\t\tbase:             &base,\n\t\tversionedAPIPath: versionedAPIPath,\n\t\tcontentConfig:    config,\n\t\tserializers:      *serializers,\n\t\tcreateBackoffMgr: readExpBackoffConfig,\n\t\tThrottle:         throttle,\n\t\tClient:           client,\n\t}, nil\n}","label":0}
{"text":"def execute(self, eopatch):\n        \n        # pylint: disable=invalid-name\n        amax_ndvi, amin_ndvi = eopatch.data_timeless[self.argmax_ndvi], eopatch.data_timeless[self.argmin_ndvi]\n        amax_ndvi_slope, amin_ndvi_slope = eopatch.data_timeless[self.argmax_ndvi_slope], \\\n                                           eopatch.data_timeless[self.argmin_ndvi_slope]\n        amax_red = eopatch.data_timeless[self.argmax_red]\n\n        stf_idx = [amax_ndvi, amin_ndvi, amax_ndvi_slope, amin_ndvi_slope, amax_red]\n\n        bands = eopatch.data[self.data_feature][..., self.indices]\n\n        _, h, w, _ = bands.shape\n        hh, ww = np.ogrid[:h, :w]\n        stf = np.concatenate([bands[ii.squeeze(), hh, ww] for ii in stf_idx if ii is not None], axis=-1)\n\n        eopatch.data_timeless[self.feats_feature] = stf\n\n        return eopatch","label":0}
{"text":"def not_left(self, num):\n        \n        if num == None:\n            return FlatList([_get_list(self)[-1]])\n        if num <= 0:\n            return self\n\n        return FlatList(_get_list(self)[num::])","label":0}
{"text":"public static function eq($field, $value, $dqlAlias = null)\n    {\n        return new Comparison(Comparison::EQ, $field, $value, $dqlAlias);\n    }","label":0}
{"text":"function handlePermissions(options) {\n            return canThis(options.context).destroy.user(options.id).then(() => {\n                options.status = 'all';\n                return options;\n            }).catch((err) => {\n                return Promise.reject(new common.errors.NoPermissionError({\n                    err: err,\n                    context: common.i18n.t('errors.api.users.noPermissionToDestroyUser')\n                }));\n            });\n        }","label":0}
{"text":"public double angleTo(LineSegment other) {\n        double angle1 = Math.atan2(this.start.y - this.end.y, this.start.x - this.end.x);\n        double angle2 = Math.atan2(other.start.y - other.end.y, other.start.x - other.end.x);\n        double angle = Math.toDegrees(angle1 - angle2);\n        if (angle <= -180) {\n            angle += 360;\n        }\n        if (angle >= 180) {\n            angle -= 360;\n        }\n        return angle;\n    }","label":0}
{"text":"private function getPath($action, $method, $args)\n    {\n        \/\/first get the key\n        $key = $this->getKey($action, $method, '\/');\n\n        \/\/add a trailing seperator\n        $path = '\/' . $key;\n\n        \/\/if there are paths\n        if (!empty($this->paths)) {\n            \/\/prefix the paths to the path\n            $path = '\/' . implode('\/', $this->paths) . $path;\n        }\n\n        \/\/if there are arguments\n        if (!empty($args)) {\n            \/\/add that too\n            $path .= '\/' . implode('\/', $args);\n        }\n\n        return str_replace('\/\/', '\/', $path);\n    }","label":0}
{"text":"public function handleEvent(ActionEvent $event)\n    {\n        $response = $this->process($event->getAction(), $event->getEnvironment());\n        $event->setResponse($response);\n    }","label":0}
{"text":"func (p *Process) Open() error {\n\tif err := func() error {\n\t\t\/\/ Generate temporary path to run script from.\n\t\tpath, err := ioutil.TempDir(\"\", \"phantomjs-\")\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tp.path = path\n\n\t\t\/\/ Write shim script.\n\t\tscriptPath := filepath.Join(path, \"shim.js\")\n\t\tif err := ioutil.WriteFile(scriptPath, []byte(shim), 0600); err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\t\/\/ Start external process.\n\t\tcmd := exec.Command(p.BinPath, scriptPath)\n\t\tcmd.Env = []string{fmt.Sprintf(\"PORT=%d\", p.Port)}\n\t\tcmd.Stdout = p.Stdout\n\t\tcmd.Stderr = p.Stderr\n\t\tif err := cmd.Start(); err != nil {\n\t\t\treturn err\n\t\t}\n\t\tp.cmd = cmd\n\n\t\t\/\/ Wait until process is available.\n\t\tif err := p.wait(); err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\n\t}(); err != nil {\n\t\tp.Close()\n\t\treturn err\n\t}\n\n\treturn nil\n}","label":0}
{"text":"def consumer(function):\n    \"\"\"\"\"\"\n    @wraps(function)\n    def wrapper(*args, **kwargs):\n        generator = function(*args, **kwargs)\n        next(generator)\n        return generator\n    return wrapper","label":0}
{"text":"func RegisterConversions(s *runtime.Scheme) error {\n\tif err := s.AddGeneratedConversionFunc((*v1alpha1.VolumeAttachment)(nil), (*storage.VolumeAttachment)(nil), func(a, b interface{}, scope conversion.Scope) error {\n\t\treturn Convert_v1alpha1_VolumeAttachment_To_storage_VolumeAttachment(a.(*v1alpha1.VolumeAttachment), b.(*storage.VolumeAttachment), scope)\n\t}); err != nil {\n\t\treturn err\n\t}\n\tif err := s.AddGeneratedConversionFunc((*storage.VolumeAttachment)(nil), (*v1alpha1.VolumeAttachment)(nil), func(a, b interface{}, scope conversion.Scope) error {\n\t\treturn Convert_storage_VolumeAttachment_To_v1alpha1_VolumeAttachment(a.(*storage.VolumeAttachment), b.(*v1alpha1.VolumeAttachment), scope)\n\t}); err != nil {\n\t\treturn err\n\t}\n\tif err := s.AddGeneratedConversionFunc((*v1alpha1.VolumeAttachmentList)(nil), (*storage.VolumeAttachmentList)(nil), func(a, b interface{}, scope conversion.Scope) error {\n\t\treturn Convert_v1alpha1_VolumeAttachmentList_To_storage_VolumeAttachmentList(a.(*v1alpha1.VolumeAttachmentList), b.(*storage.VolumeAttachmentList), scope)\n\t}); err != nil {\n\t\treturn err\n\t}\n\tif err := s.AddGeneratedConversionFunc((*storage.VolumeAttachmentList)(nil), (*v1alpha1.VolumeAttachmentList)(nil), func(a, b interface{}, scope conversion.Scope) error {\n\t\treturn Convert_storage_VolumeAttachmentList_To_v1alpha1_VolumeAttachmentList(a.(*storage.VolumeAttachmentList), b.(*v1alpha1.VolumeAttachmentList), scope)\n\t}); err != nil {\n\t\treturn err\n\t}\n\tif err := s.AddGeneratedConversionFunc((*v1alpha1.VolumeAttachmentSource)(nil), (*storage.VolumeAttachmentSource)(nil), func(a, b interface{}, scope conversion.Scope) error {\n\t\treturn Convert_v1alpha1_VolumeAttachmentSource_To_storage_VolumeAttachmentSource(a.(*v1alpha1.VolumeAttachmentSource), b.(*storage.VolumeAttachmentSource), scope)\n\t}); err != nil {\n\t\treturn err\n\t}\n\tif err := s.AddGeneratedConversionFunc((*storage.VolumeAttachmentSource)(nil), (*v1alpha1.VolumeAttachmentSource)(nil), func(a, b interface{}, scope conversion.Scope) error {\n\t\treturn Convert_storage_VolumeAttachmentSource_To_v1alpha1_VolumeAttachmentSource(a.(*storage.VolumeAttachmentSource), b.(*v1alpha1.VolumeAttachmentSource), scope)\n\t}); err != nil {\n\t\treturn err\n\t}\n\tif err := s.AddGeneratedConversionFunc((*v1alpha1.VolumeAttachmentSpec)(nil), (*storage.VolumeAttachmentSpec)(nil), func(a, b interface{}, scope conversion.Scope) error {\n\t\treturn Convert_v1alpha1_VolumeAttachmentSpec_To_storage_VolumeAttachmentSpec(a.(*v1alpha1.VolumeAttachmentSpec), b.(*storage.VolumeAttachmentSpec), scope)\n\t}); err != nil {\n\t\treturn err\n\t}\n\tif err := s.AddGeneratedConversionFunc((*storage.VolumeAttachmentSpec)(nil), (*v1alpha1.VolumeAttachmentSpec)(nil), func(a, b interface{}, scope conversion.Scope) error {\n\t\treturn Convert_storage_VolumeAttachmentSpec_To_v1alpha1_VolumeAttachmentSpec(a.(*storage.VolumeAttachmentSpec), b.(*v1alpha1.VolumeAttachmentSpec), scope)\n\t}); err != nil {\n\t\treturn err\n\t}\n\tif err := s.AddGeneratedConversionFunc((*v1alpha1.VolumeAttachmentStatus)(nil), (*storage.VolumeAttachmentStatus)(nil), func(a, b interface{}, scope conversion.Scope) error {\n\t\treturn Convert_v1alpha1_VolumeAttachmentStatus_To_storage_VolumeAttachmentStatus(a.(*v1alpha1.VolumeAttachmentStatus), b.(*storage.VolumeAttachmentStatus), scope)\n\t}); err != nil {\n\t\treturn err\n\t}\n\tif err := s.AddGeneratedConversionFunc((*storage.VolumeAttachmentStatus)(nil), (*v1alpha1.VolumeAttachmentStatus)(nil), func(a, b interface{}, scope conversion.Scope) error {\n\t\treturn Convert_storage_VolumeAttachmentStatus_To_v1alpha1_VolumeAttachmentStatus(a.(*storage.VolumeAttachmentStatus), b.(*v1alpha1.VolumeAttachmentStatus), scope)\n\t}); err != nil {\n\t\treturn err\n\t}\n\tif err := s.AddGeneratedConversionFunc((*v1alpha1.VolumeError)(nil), (*storage.VolumeError)(nil), func(a, b interface{}, scope conversion.Scope) error {\n\t\treturn Convert_v1alpha1_VolumeError_To_storage_VolumeError(a.(*v1alpha1.VolumeError), b.(*storage.VolumeError), scope)\n\t}); err != nil {\n\t\treturn err\n\t}\n\tif err := s.AddGeneratedConversionFunc((*storage.VolumeError)(nil), (*v1alpha1.VolumeError)(nil), func(a, b interface{}, scope conversion.Scope) error {\n\t\treturn Convert_storage_VolumeError_To_v1alpha1_VolumeError(a.(*storage.VolumeError), b.(*v1alpha1.VolumeError), scope)\n\t}); err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}","label":0}
{"text":"public CallSite createConstructorSite(CallSite site, Object[] args) {\n        if (!(this instanceof AdaptingMetaClass)) {\n            Class[] params = MetaClassHelper.convertToTypeArray(args);\n            CachedConstructor constructor = (CachedConstructor) chooseMethod(\"<init>\", constructors, params);\n            if (constructor != null) {\n                return ConstructorSite.createConstructorSite(site, this,constructor,params, args);\n            }\n            else {\n                if (args.length == 1 && args[0] instanceof Map) {\n                    constructor = (CachedConstructor) chooseMethod(\"<init>\", constructors, MetaClassHelper.EMPTY_TYPE_ARRAY);\n                    if (constructor != null) {\n                        return new ConstructorSite.NoParamSite(site, this,constructor,params);\n                    }\n                } else if (args.length == 2 && theClass.getEnclosingClass() != null && args[1] instanceof Map) {\n                    Class enclosingClass = theClass.getEnclosingClass();\n                    String enclosingInstanceParamType = args[0] != null ? args[0].getClass().getName() : \"\";\n                    if(enclosingClass.getName().equals(enclosingInstanceParamType)) {\n                        constructor = (CachedConstructor) chooseMethod(\"<init>\", constructors, new Class[]{enclosingClass});\n                        if (constructor != null) {\n                            return new ConstructorSite.NoParamSiteInnerClass(site, this,constructor,params);\n                        }\n                    }\n                }\n            }\n        }\n        return new MetaClassConstructorSite(site, this);\n    }","label":0}
{"text":"function renderPage(page) {\n  if (!page) return '';\n\n  var args = [];\n\n  if (page.category) args.push(page.category);\n  if (page.name) args.push(page.name);\n  if (page.properties) args.push(page.properties);\n\n  \/\/ eslint-disable-next-line no-restricted-globals\n  var res = 'analytics.page(' + map(JSON.stringify, args).join(', ') + ');';\n\n  return res;\n}","label":0}
{"text":"def parse_arguments(argv):\n  \n  parser = argparse.ArgumentParser(\n      description='Runs Preprocessing on structured CSV data.')\n  parser.add_argument('--input-file-pattern',\n                      type=str,\n                      required=True,\n                      help='Input CSV file names. May contain a file pattern')\n  parser.add_argument('--output-dir',\n                      type=str,\n                      required=True,\n                      help='Google Cloud Storage which to place outputs.')\n  parser.add_argument('--schema-file',\n                      type=str,\n                      required=True,\n                      help=('BigQuery json schema file'))\n\n  args = parser.parse_args(args=argv[1:])\n\n  # Make sure the output folder exists if local folder.\n  file_io.recursive_create_dir(args.output_dir)\n\n  return args","label":0}
{"text":"def json_val(path, *, ignore_bad_path=False):\n  \"\"\"\"\"\"\n  return lambda source: get_json_val(source, path, ignore_bad_path=ignore_bad_path)","label":0}
{"text":"protected function _writeFile($content, $duration) {\n\t\t\/\/$cacheTime = date('Y-m-d H:i:s', $timestamp);\n\t\t$now = time();\n\t\tif (!$duration) {\n\t\t\t$cacheTime = 0;\n\t\t} elseif (is_numeric($duration)) {\n\t\t\t$cacheTime = $now + $duration;\n\t\t} else {\n\t\t\t$cacheTime = strtotime($duration, $now);\n\t\t}\n\n\t\t$url = $this->request->here();\n\t\t$url = str_replace($this->request->base, '', $url);\n\t\tif ($url === '\/') {\n\t\t\t$url = '_root';\n\t\t}\n\n\t\t$cache = $url;\n\t\t$prefix = Configure::read('Cache.prefix');\n\t\tif ($prefix) {\n\t\t\t$cache = $prefix . '_' . $url;\n\t\t}\n\t\tif ($url !== '_root') {\n\t\t\t$cache = Inflector::slug($cache);\n\t\t}\n\t\tif (empty($cache)) {\n\t\t\treturn false;\n\t\t}\n\n\t\t$ext = $this->response->mapType($this->response->type());\n\t\t$content = $this->_compress($content, $ext);\n\n\t\t$cache = $cache . '.html';\n\t\t$content = '<!--cachetime:' . $cacheTime . ';ext:' . $ext . '-->' . $content;\n\n\t\t$folder = CACHE . 'views' . DS;\n\t\tif (Configure::read('debug') && !is_dir($folder)) {\n\t\t\tmkdir($folder, 0770, true);\n\t\t}\n\t\t$file = $folder . $cache;\n\n\t\treturn file_put_contents($file, $content);\n\t}","label":0}
{"text":"public void stop() {\n        MBeanServer server = ManagementFactory.getPlatformMBeanServer();\n        ObjectName beanName = null;\n        try {\n            beanName = getObjectName();\n            server.unregisterMBean(beanName);\n        } catch (InstanceNotFoundException e) {\n            LOGGER.debug(\"JMX bean {0} not found\", beanName);\n        } catch (Exception e) {\n            LOGGER.error(e, JcrI18n.cannotUnRegisterMBean, beanName);\n        }\n    }","label":0}
{"text":"protected static function isCertificateResource($resource): bool {\n        if(!is_resource($resource)) {\n            return FALSE;\n        }\n        if(get_resource_type($resource) != 'OpenSSL X.509') {\n            return FALSE;\n        }\n        return TRUE;\n    }","label":0}
{"text":"public void addMasterListeners()\n    {\n        super.addMasterListeners();\n        this.getField(UserInfo.USER_NAME).addListener(new CheckNonNumericListener(null));\n        this.addListener(new ReadOnlyRecordHandler(this.getField(UserInfo.READ_ONLY_RECORD), true));\n        this.addListener(new FileListener(null)\n        {\n            \/**\n             * Make sure the user group ID is non-null (set it to the anon group id)\n             *\/\n            public int doRecordChange(FieldInfo field, int iChangeType, boolean bDisplayOption)\n            { \/\/ Read a valid record\n                switch (iChangeType)\n                {\n                    case DBConstants.ADD_TYPE:\n                    case DBConstants.UPDATE_TYPE:\n                        if (this.getOwner().getField(UserInfo.USER_GROUP_ID).isNull())\n                            if (this.getOwner().getRecordOwner() != null)\n                        {\n                            Record recUserControl = (Record)this.getOwner().getRecordOwner().getRecord(UserControl.USER_CONTROL_FILE);\n                            if (recUserControl == null)\n                            {\n                                recUserControl = new UserControl(this.getOwner().getRecordOwner());\n                                this.getOwner().addListener(new FreeOnFreeHandler(recUserControl));\n                            }\n                            this.getOwner().getField(UserInfo.USER_GROUP_ID).moveFieldToThis(recUserControl.getField(UserControl.ANON_USER_GROUP_ID));\n                        }\n                        break;\n                }\n                return super.doRecordChange(field, iChangeType, bDisplayOption);        \/\/ Initialize the record\n            }\n            \n        });\n    }","label":0}
{"text":"public static function getCoordinateMap($key=NULL)\n    {\n        if ($key) {\n            return isset(self::$_keyCoordinateMap[$key]) ? self::$_keyCoordinateMap[$key] : NULL;\n        } else {\n            return self::$_keyCoordinateMap;\n        }\n    }","label":0}
{"text":"public function onSerialize(DecorateResourceNodeEvent $event)\n    {\n        $options = $event->getOptions();\n\n        if (!in_array(Options::SKIP_RESOURCE_NOTIFICATION, $options)) {\n            $node = $event->getResourceNode();\n            $user = $this->tokenStorage->getToken()->getUser();\n            $followResource = $user !== 'anon.' ?\n                $this->notificationManager->getFollowerResource(\n                    $user->getId(),\n                    $node->getId(),\n                    $node->getClass()\n                ) :\n                false;\n\n            $event->add('notifications', ['enabled' => !empty($followResource)]);\n        }\n    }","label":0}
{"text":"public static PathImpl getLocalWorkDir(ClassLoader loader)\n  {\n    PathImpl path = _localWorkDir.get(loader);\n\n    if (path != null)\n      return path;\n    \n    path = getTmpWorkDir();\n\n    _localWorkDir.setGlobal(path);\n    \n    try {\n      path.mkdirs();\n    } catch (java.io.IOException e) {\n    }\n\n    return path;\n  }","label":0}
{"text":"def set_updated(self):\n        \n        # get latest output\n        output = []\n        for method in self.methods.values():\n            data = method[\"last_output\"]\n            if isinstance(data, list):\n                if self.testing and data:\n                    data[0][\"cached_until\"] = method.get(\"cached_until\")\n                output.extend(data)\n            else:\n                # if the output is not 'valid' then don't add it.\n                if data.get(\"full_text\") or \"separator\" in data:\n                    if self.testing:\n                        data[\"cached_until\"] = method.get(\"cached_until\")\n                    output.append(data)\n        # if changed store and force display update.\n        if output != self.last_output:\n            # has the modules output become urgent?\n            # we only care the update that this happens\n            # not any after then.\n            urgent = True in [x.get(\"urgent\") for x in output]\n            if urgent != self.urgent:\n                self.urgent = urgent\n            else:\n                urgent = False\n            self.last_output = output\n            self._py3_wrapper.notify_update(self.module_full_name, urgent)","label":0}
{"text":"private static ActionRegistry getRegistry(boolean global) {\n        if (global) {\n            return instance;\n        }\n        \n        Page page = ExecutionContext.getPage();\n        ActionRegistry registry = (ActionRegistry) page.getAttribute(ATTR_LOCAL_REGISTRY);\n        \n        if (registry == null) {\n            page.setAttribute(ATTR_LOCAL_REGISTRY, registry = new ActionRegistry());\n        }\n        \n        return registry;\n    }","label":0}
{"text":"def consistency_point(self):\n        \n\n        cp_delta = {}\n        xml_path = 'instances\/instance-data\/counters'\n        netapp_api = NaElement('perf-object-get-instances')\n        netapp_api.child_add_string('objectname', 'wafl')\n        instance = NaElement('instances')\n        instance.child_add_string('instance', 'wafl')\n        counter = NaElement('counters')\n        counter.child_add_string('counter', 'cp_count')\n        netapp_api.child_add(counter)\n        netapp_api.child_add(instance)\n\n        cp_1 = self.get_netapp_elem(netapp_api, xml_path)\n        time.sleep(3)\n        cp_2 = self.get_netapp_elem(netapp_api, xml_path)\n\n        for element in cp_1:\n            if element.find('name').text == 'cp_count':\n                cp_1 = element.find('value').text.rsplit(',')\n                break\n        for element in cp_2:\n            if element.find('name').text == 'cp_count':\n                cp_2 = element.find('value').text.rsplit(',')\n                break\n\n        if not type(cp_2) is list or not type(cp_1) is list:\n            log.error(\"consistency point data not available for filer: %s\"\n                      % self.device)\n            return\n\n        cp_1 = {\n            'wafl_timer': cp_1[0],\n            'snapshot': cp_1[1],\n            'wafl_avail_bufs': cp_1[2],\n            'dirty_blk_cnt': cp_1[3],\n            'full_nv_log': cp_1[4],\n            'b2b': cp_1[5],\n            'flush_gen': cp_1[6],\n            'sync_gen': cp_1[7],\n            'def_b2b': cp_1[8],\n            'con_ind_pin': cp_1[9],\n            'low_mbuf_gen': cp_1[10],\n            'low_datavec_gen': cp_1[11]\n        }\n\n        cp_2 = {\n            'wafl_timer': cp_2[0],\n            'snapshot': cp_2[1],\n            'wafl_avail_bufs': cp_2[2],\n            'dirty_blk_cnt': cp_2[3],\n            'full_nv_log': cp_2[4],\n            'b2b': cp_2[5],\n            'flush_gen': cp_2[6],\n            'sync_gen': cp_2[7],\n            'def_b2b': cp_2[8],\n            'con_ind_pin': cp_2[9],\n            'low_mbuf_gen': cp_2[10],\n            'low_datavec_gen': cp_2[11]\n        }\n\n        for item in cp_1:\n            c1 = int(cp_1[item])\n            c2 = int(cp_2[item])\n            cp_delta[item] = c2 - c1\n\n        for item in cp_delta:\n            self.push(item + '_CP', 'system.system', cp_delta[item])","label":0}
{"text":"function(callback) {\n\t\t\tthis.factory.running = false;\n\t\t\tthis._clearInterval(callback);\n\t\t\tthis.callback(this.callbacks.stop);\n\t\t\tthis.callback(callback);\n\t\t}","label":0}
{"text":"def sync_skills_data(self):\n        \n        self.skills_data = self.load_skills_data()\n        if 'upgraded' in self.skills_data:\n            self.skills_data.pop('upgraded')\n        else:\n            self.skills_data_hash = skills_data_hash(self.skills_data)","label":0}
{"text":"func (s *DescribeCopyProductStatusInput) Validate() error {\n\tinvalidParams := request.ErrInvalidParams{Context: \"DescribeCopyProductStatusInput\"}\n\tif s.CopyProductToken == nil {\n\t\tinvalidParams.Add(request.NewErrParamRequired(\"CopyProductToken\"))\n\t}\n\tif s.CopyProductToken != nil && len(*s.CopyProductToken) < 1 {\n\t\tinvalidParams.Add(request.NewErrParamMinLen(\"CopyProductToken\", 1))\n\t}\n\n\tif invalidParams.Len() > 0 {\n\t\treturn invalidParams\n\t}\n\treturn nil\n}","label":0}
{"text":"public function handle($request, Closure $next)\n    {\n        if ($this->auth->guest()) {\n            if ($request->ajax()) {\n                return response('Unauthorized.', 401);\n            } else {\n                return redirect()->guest('admin\/login');\n            }\n        }\n\n        if ($this->auth->user()->is_admin != 1) return redirect()->guest('admin\/login');\n\n        return $next($request);\n    }","label":0}
{"text":"public function bulkDeleteAction(Request $request): Response\n    {\n        $this->denyAccessUnlessGranted(new Attribute('section', 'edit'));\n        $form = $this->formFactory->deleteSections(\n            new SectionsDeleteData()\n        );\n        $form->handleRequest($request);\n\n        if ($form->isSubmitted()) {\n            $result = $this->submitHandler->handle($form, function (SectionsDeleteData $data) {\n                foreach ($data->getSections() as $sectionId => $selected) {\n                    $section = $this->sectionService->loadSection($sectionId);\n                    $this->sectionService->deleteSection($section);\n\n                    $this->notificationHandler->success(\n                        $this->translator->trans(\n                            \/** @Desc(\"Section '%name%' removed.\") *\/\n                            'section.delete.success',\n                            ['%name%' => $section->name],\n                            'section'\n                        )\n                    );\n                }\n            });\n\n            if ($result instanceof Response) {\n                return $result;\n            }\n        }\n\n        return $this->redirect($this->generateUrl('ezplatform.section.list'));\n    }","label":0}
{"text":"@Override\n\tpublic final SolrQuery doConstructSolrQuery(SolrDataQuery query, @Nullable Class<?> domainType) {\n\n\t\tAssert.notNull(query, \"Cannot construct solrQuery from null value.\");\n\t\tAssert.notNull(query.getCriteria(), \"Query has to have a criteria.\");\n\n\t\tSolrQuery solrQuery = new SolrQuery();\n\t\tsolrQuery.setParam(CommonParams.Q, getQueryString(query, domainType));\n\n\t\tif (query instanceof Query) {\n\t\t\tprocessQueryOptions(solrQuery, (Query) query, domainType);\n\t\t}\n\n\t\tif (query instanceof FacetQuery) {\n\t\t\tprocessFacetOptions(solrQuery, (FacetQuery) query, domainType);\n\t\t}\n\n\t\tif (query instanceof HighlightQuery) {\n\t\t\tprocessHighlightOptions(solrQuery, (HighlightQuery) query, domainType);\n\t\t}\n\n\t\treturn solrQuery;\n\t}","label":0}
{"text":"public function dontSeeDayInMonth($date, $day) {\n        \\PHPUnit_Framework_Assert::assertNotEquals($day, $this->_ParseDate($date)->day);\n    }","label":0}
{"text":"def load_cache(dpath, fname, cfgstr, ext='.cPkl', verbose=None, enabled=True):\n    \n    if verbose is None:\n        verbose = VERBOSE_CACHE\n    if not USE_CACHE or not enabled:\n        if verbose > 1:\n            print('[util_cache] ... cache disabled: dpath=%s cfgstr=%r' %\n                    (basename(dpath), cfgstr,))\n        raise IOError(3, 'Cache Loading Is Disabled')\n    fpath = _args2_fpath(dpath, fname, cfgstr, ext)\n    if not exists(fpath):\n        if verbose > 0:\n            print('[util_cache] ... cache does not exist: dpath=%r fname=%r cfgstr=%r' % (\n                basename(dpath), fname, cfgstr,))\n        raise IOError(2, 'No such file or directory: %r' % (fpath,))\n    else:\n        if verbose > 2:\n            print('[util_cache] ... cache exists: dpath=%r fname=%r cfgstr=%r' % (\n                basename(dpath), fname, cfgstr,))\n        import utool as ut\n        nbytes = ut.get_file_nBytes(fpath)\n        big_verbose = (nbytes > 1E6 and verbose > 2) or verbose > 2\n        if big_verbose:\n            print('[util_cache] About to read file of size %s' % (ut.byte_str2(nbytes),))\n    try:\n        with ut.Timer(fpath, verbose=big_verbose and verbose > 3):\n            data = util_io.load_data(fpath, verbose=verbose > 2)\n    except (EOFError, IOError, ImportError) as ex:\n        print('CORRUPTED? fpath = %s' % (fpath,))\n        if verbose > 1:\n            print('[util_cache] ... cache miss dpath=%s cfgstr=%r' % (\n                basename(dpath), cfgstr,))\n        raise IOError(str(ex))\n    except Exception:\n        print('CORRUPTED? fpath = %s' % (fpath,))\n        raise\n    else:\n        if verbose > 2:\n            print('[util_cache] ... cache hit')\n    return data","label":0}
{"text":"function identify(path, callback) {\n      return self.identifyLocalImage(path, function(err, info) {\n        if (err) {\n          return callback(err);\n        }\n        context.info = info;\n        context.extension = info.extension;\n        return callback(null);\n      });\n    }","label":0}
{"text":"public function indexAction()\n    {\n        $query = (string) $this->params()->fromQuery('query', null);\n        $query = strlen($query) > 0 ? $query : null;\n\n        $orderBy = (string) $this->params()->fromQuery('orderBy', null);\n        $orderBy = strlen($orderBy) > 0 ? $orderBy : null;\n\n        $sort = (string) $this->params()->fromQuery('sort', null);\n        $sort = strlen($sort) > 0 ? $sort : null;\n\n        $page  = (int) $this->params()->fromRoute('page', 1);\n        $limit = $this->getOptions()->getDefaultItemsPerPage();\n\n        $entities = $this->getService()->pagination($page, $limit, $query, $orderBy, $sort);\n\n        $view = new ViewModel(array(\n            'options'  => $this->getOptions(),\n            'entities' => $entities,\n            'query'    => $query,\n            'orderBy'  => $orderBy,\n            'sort'     => $sort,\n        ));\n\n        return $view;\n    }","label":0}
{"text":"func (b *batcher) end() {\n\tif !b.finished {\n\t\tclose(b.input)\n\t\tb.finished = true\n\t}\n}","label":0}
{"text":"def _obj(self):\n        \n        class Objectives(object):\n            def __getitem__(_self, name):\n                return self.getObjective(name)\n\n            def __iter__(_self):\n                return self.getObjectives()\n\n        return Objectives()","label":0}
{"text":"def render_cvmfs_pvc(cvmfs_volume):\n    \"\"\"\"\"\"\n    name = CVMFS_REPOSITORIES[cvmfs_volume]\n    rendered_template = dict(REANA_CVMFS_PVC_TEMPLATE)\n    rendered_template['metadata']['name'] = 'csi-cvmfs-{}-pvc'.format(name)\n    rendered_template['spec']['storageClassName'] = \"csi-cvmfs-{}\".format(name)\n    return rendered_template","label":0}
{"text":"private function return_($value) {\n        if (abs($value) === INF) {\n            return $value;\n        } else if ($value === 'INF') {\n            return INF;\n        } else if ($value === '-INF') {\n            return -INF;\n        } else {\n            return (float) $value;\n        }\n    }","label":0}
{"text":"static public function IsIPv4SubnetWithinSupernet($ipAndCidrSub, $ipAndCidrSuper)\n    {\n\n        $ipAndCidrSubMin   = static::ConvertIPv4ToDecimal(\n            static::GetIPv4NetworkAddress($ipAndCidrSub)\n        );\n\n        $ipAndCidrSubMax   = static::ConvertIPv4ToDecimal(\n            static::GetIPv4BroadcastAddress($ipAndCidrSub)\n        );\n\n        $ipAndCidrSuperMin   = static::ConvertIPv4ToDecimal(\n            static::GetIPv4NetworkAddress($ipAndCidrSuper)\n        );\n\n        $ipAndCidrSuperMax   = static::ConvertIPv4ToDecimal(\n            static::GetIPv4BroadcastAddress($ipAndCidrSuper)\n        );\n\n        if ($ipAndCidrSuperMin <= $ipAndCidrSubMin && $ipAndCidrSuperMax >= $ipAndCidrSubMax) {\n            return true;\n        }\n\n        return false;\n\n    }","label":0}
{"text":"def _traverse_tree(tree, path):\n        \"\"\"\"\"\"\n        path_steps = (step for step in path.split('.') if step != '')\n        # Special handling for first step, because the first step isn't under 'objects'\n        first_step = path_steps.next()\n        subtree = tree[first_step]\n\n        for step in path_steps:\n            subtree = subtree['children'][step]\n        return subtree","label":0}
{"text":"func VerifyAllCombinationsFor9(\n\tt Failable,\n\theader string,\n\ttransform func(a, b, c, d, e, f, g, h, i interface{}) string,\n\tcollection1,\n\tcollection2,\n\tcollection3,\n\tcollection4,\n\tcollection5,\n\tcollection6,\n\tcollection7,\n\tcollection8,\n\tcollection9 interface{}) error {\n\n\tif len(header) != 0 {\n\t\theader = fmt.Sprintf(\"%s\\n\\n\\n\", header)\n\t}\n\n\tvar mapped []string\n\n\tslice1 := reflect.ValueOf(collection1)\n\tslice2 := reflect.ValueOf(collection2)\n\tslice3 := reflect.ValueOf(collection3)\n\tslice4 := reflect.ValueOf(collection4)\n\tslice5 := reflect.ValueOf(collection5)\n\tslice6 := reflect.ValueOf(collection6)\n\tslice7 := reflect.ValueOf(collection7)\n\tslice8 := reflect.ValueOf(collection8)\n\tslice9 := reflect.ValueOf(collection9)\n\n\tfor i1 := 0; i1 < slice1.Len(); i1++ {\n\t\tfor i2 := 0; i2 < slice2.Len(); i2++ {\n\t\t\tfor i3 := 0; i3 < slice3.Len(); i3++ {\n\t\t\t\tfor i4 := 0; i4 < slice4.Len(); i4++ {\n\t\t\t\t\tfor i5 := 0; i5 < slice5.Len(); i5++ {\n\t\t\t\t\t\tfor i6 := 0; i6 < slice6.Len(); i6++ {\n\t\t\t\t\t\t\tfor i7 := 0; i7 < slice7.Len(); i7++ {\n\t\t\t\t\t\t\t\tfor i8 := 0; i8 < slice8.Len(); i8++ {\n\t\t\t\t\t\t\t\t\tfor i9 := 0; i9 < slice9.Len(); i9++ {\n\t\t\t\t\t\t\t\t\t\tp1 := slice1.Index(i1).Interface()\n\t\t\t\t\t\t\t\t\t\tp2 := slice2.Index(i2).Interface()\n\t\t\t\t\t\t\t\t\t\tp3 := slice3.Index(i3).Interface()\n\t\t\t\t\t\t\t\t\t\tp4 := slice4.Index(i4).Interface()\n\t\t\t\t\t\t\t\t\t\tp5 := slice5.Index(i5).Interface()\n\t\t\t\t\t\t\t\t\t\tp6 := slice6.Index(i6).Interface()\n\t\t\t\t\t\t\t\t\t\tp7 := slice7.Index(i7).Interface()\n\t\t\t\t\t\t\t\t\t\tp8 := slice8.Index(i8).Interface()\n\t\t\t\t\t\t\t\t\t\tp9 := slice9.Index(i9).Interface()\n\n\t\t\t\t\t\t\t\t\t\tparameterText := getParameterText(p1, p2, p3, p4, p5, p6, p7, p8, p9)\n\t\t\t\t\t\t\t\t\t\ttransformText := getTransformText(transform, p1, p2, p3, p4, p5, p6, p7, p8, p9)\n\t\t\t\t\t\t\t\t\t\tif transformText != SkipThisCombination {\n\t\t\t\t\t\t\t\t\t\t\tmapped = append(mapped, fmt.Sprintf(\"%s => %s\", parameterText, transformText))\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\toutputText := header + strings.Join(mapped, \"\\n\")\n\treturn VerifyString(t, outputText)\n}","label":0}
{"text":"def resizeEvent(self, event):\r\n        \"\"\"\"\"\"\r\n        if not self.isMaximized() and not self.fullscreen_flag:\r\n            self.window_size = self.size()\r\n        QMainWindow.resizeEvent(self, event)\r\n\r\n        # To be used by the tour to be able to resize\r\n        self.sig_resized.emit(event)","label":0}
{"text":"public function save()\n    {\n        if ($this->validate() && (bool)$this->getUser()->updateAttributes(['nickname' => $this->nickname])) {\n            return $this->getUser();\n        }\n        return false;\n    }","label":0}
{"text":"def line_input(*args, **kwargs):\n    '''\n    \n    '''\n    line_input = wtforms.TextField(*args, **kwargs)\n    line_input.input_type = 'line'\n    return line_input","label":0}
{"text":"private Document loadXML(URL url, boolean useNamespace) {\r\n\t\tInputStream stream = null;\r\n\t\ttry {\r\n\t\t\tstream = url.openConnection().getInputStream();\r\n\t\t\tInputSource source = new InputSource(stream);\r\n\t\t\treturn useNamespace ? loadXMLNS(source) : loadXML(source);\r\n\t\t} catch (Exception e) {\r\n\t\t\tthrow new DomException(e);\r\n\t\t} finally {\r\n\t\t\tclose(stream);\r\n\t\t}\r\n\t}","label":0}
{"text":"private function parsePoolOptions($options)\n    {\n        $defaults = [\n            'pool_class' => $this->poolClass,\n            'item_class' => $this->itemClass,\n            'namespace'  => $this->namespace,\n            'logger'     => $this->logger,\n        ];\n\n        if ($options === null) {\n            return $defaults;\n        }\n\n        if (is_string($options)) {\n            $options = [\n                'namespace' => $options\n            ];\n        }\n\n        if (!is_array($options)) {\n            return $defaults;\n        }\n\n        return array_replace($defaults, $options);\n    }","label":0}
{"text":"def _write_to_datastore(self):\n    \"\"\"\"\"\"\n    # Populate datastore\n    roots_and_submissions = zip([ATTACKS_ENTITY_KEY,\n                                 TARGET_ATTACKS_ENTITY_KEY,\n                                 DEFENSES_ENTITY_KEY],\n                                [self._attacks,\n                                 self._targeted_attacks,\n                                 self._defenses])\n    client = self._datastore_client\n    with client.no_transact_batch() as batch:\n      for root_key, submissions in roots_and_submissions:\n        batch.put(client.entity(client.key(*root_key)))\n        for k, v in iteritems(submissions):\n          entity = client.entity(client.key(\n              *(root_key + [KIND_SUBMISSION, k])))\n          entity['submission_path'] = v.path\n          entity.update(participant_from_submission_path(v.path))\n          batch.put(entity)","label":0}
{"text":"def recover(options):\n    \n\n    event_format = options.kwargs['omode']\n\n    buffer_size = 64*1024\n    fpd = open(options.kwargs['output'], \"r+\")\n    fpd.seek(0, 2) # seek to end\n    fptr = max(fpd.tell() - buffer_size, 0)\n    fptr_eof = 0\n\n    while (fptr > 0):\n        fpd.seek(fptr)\n        event_buffer = fpd.read(buffer_size)\n        (event_start, next_event_start, last_time) = \\\n            get_event_start(event_buffer, event_format)\n        if (event_start != -1):\n            fptr_eof = event_start + fptr\n            break\n        fptr = fptr - buffer_size\n\n    if fptr < 0:\n        # didn't find a valid event, so start over\n        fptr_eof = 0\n        last_time = 0 \n\n    # truncate file here\n    fpd.truncate(fptr_eof)\n    fpd.seek(fptr_eof)\n    fpd.write(\"\\n\")\n    fpd.close()\n\n    return last_time","label":0}
{"text":"func CompressorStrategy(near int64) MergeStrategy {\n\treturn func(chunks []bgzf.Chunk) []bgzf.Chunk {\n\t\tif len(chunks) == 0 {\n\t\t\treturn nil\n\t\t}\n\t\tfor c := 1; c < len(chunks); c++ {\n\t\t\tleftChunk := chunks[c-1]\n\t\t\trightChunk := &chunks[c]\n\t\t\tif leftChunk.End.File+near >= rightChunk.Begin.File {\n\t\t\t\trightChunk.Begin = leftChunk.Begin\n\t\t\t\tif vOffset(leftChunk.End) > vOffset(rightChunk.End) {\n\t\t\t\t\trightChunk.End = leftChunk.End\n\t\t\t\t}\n\t\t\t\tchunks = append(chunks[:c-1], chunks[c:]...)\n\t\t\t\tc--\n\t\t\t}\n\t\t}\n\t\treturn chunks\n\t}\n}","label":0}
{"text":"func (client *Client) Multicast(to []string, messages ...SendingMessage) *MulticastCall {\n\treturn &MulticastCall{\n\t\tc:        client,\n\t\tto:       to,\n\t\tmessages: messages,\n\t}\n}","label":0}
{"text":"private void deployModule(final Node node, final InstanceContext instance, final CountingCompletionHandler<Void> counter) {\n    log.debug(String.format(\"%s - Deploying %s to %s\", NetworkManager.this, instance.component().asModule().module(), node.address()));\n    node.deployModule(instance.component().asModule().module(), Components.buildConfig(instance, cluster), 1, new Handler<AsyncResult<String>>() {\n      @Override\n      public void handle(AsyncResult<String> result) {\n        if (result.failed()) {\n          counter.fail(result.cause());\n        } else {\n          deploymentIDs.put(instance.address(), result.result(), new Handler<AsyncResult<String>>() {\n            @Override\n            public void handle(AsyncResult<String> result) {\n              counter.succeed();\n            }\n          });\n        }\n      }\n    });\n  }","label":0}
{"text":"func (e *Enforcer) SavePolicy() error {\n\tif e.IsFiltered() {\n\t\treturn errors.New(\"cannot save a filtered policy\")\n\t}\n\tif err := e.adapter.SavePolicy(e.model); err != nil {\n\t\treturn err\n\t}\n\tif e.watcher != nil {\n\t\treturn e.watcher.Update()\n\t}\n\treturn nil\n}","label":0}
{"text":"public function bindRequest(Request $request)\n    {\n        $query = $request->query;\n        $session = $request->getSession();\n\n        $adminListName = 'listconfig_' . $request->get('_route');\n\n        $this->page = $request->query->getInt('page', 1);\n        $this->limit = $request->query->getInt('limit', $this->getLimitOptions()[0]);\n\n        $adminListSessionData = $request->getSession()->get($adminListName);\n        if (!$query->has('limit') && null !== $adminListSessionData && isset($adminListSessionData['limit'])) {\n            $this->limit = $adminListSessionData['limit'];\n        }\n\n        if ($request->query->has('limit') && !$request->query->has('page')) {\n            $this->page = 1;\n        }\n\n        \/\/ Allow alphanumeric, _ & . in order by parameter!\n        $this->orderBy = preg_replace('\/[^[a-zA-Z0-9\\_\\.]]\/', '', $request->query->get('orderBy', ''));\n        $this->orderDirection = $request->query->getAlpha('orderDirection', '');\n\n        \/\/ there is a session and the filter param is not set\n        if ($session->has($adminListName) && !$query->has('filter')) {\n            if (!$query->has('page') && !$query->has('limit')) {\n                $this->page = $adminListSessionData['page'];\n            }\n\n            if (!$query->has('orderBy')) {\n                $this->orderBy = $adminListSessionData['orderBy'];\n            }\n\n            if (!$query->has('orderDirection')) {\n                $this->orderDirection = $adminListSessionData['orderDirection'];\n            }\n        }\n\n        \/\/ save current parameters\n        $session->set(\n            $adminListName,\n            [\n                'page' => $this->page,\n                'limit' => $this->limit,\n                'orderBy' => $this->orderBy,\n                'orderDirection' => $this->orderDirection,\n            ]\n        );\n\n        \/\/ Remove limit from query param so it doesn't affect the session of the filter builder\n        $request->query->remove('limit');\n        $this->getFilterBuilder()->bindRequest($request);\n    }","label":0}
{"text":"final protected function cache_query($sql, $result){\n        if( isset($this->query_cache[$sql]) ){\n            $this->query_cache[$sql] = $result;\n        }elseif( count($this->query_cache) >= $this->cache_limit ){\n            \/\/ Remove oldest cache\n            array_shift($this->query_cache);\n            \/\/ save query\n            $this->query_cache[$sql] = $result;\n        }\n    }","label":0}
{"text":"public function php_error_handler($errno, $errstr, $errfile, $errline)\n    {\n        $e = new \\Exception($errstr, $errno);\n        call_user_func($this->error50x, $e);\n    }","label":0}
{"text":"def _find_data_path_schema(data_path, schema_name):\n    \n    if not data_path or data_path == '\/' or data_path == '.':\n        return None\n    directory = os.path.dirname(data_path)\n    path = glob.glob(os.path.join(directory, schema_name))\n    if not path:\n        return _find_schema(directory, schema_name)\n    return path[0]","label":0}
{"text":"def _dict_lower(dictionary: dict):\n        \"\"\"\"\"\"\n        return {key.lower(): [value.lower() for value in value]\n                for key, value in dictionary.items()}","label":0}
{"text":"public function handle()\n    {\n        $filesystem = new Filesystem;\n        $filesystem->copyDirectory(\n            __DIR__ . '\/stubs\/install',\n            base_path()\n        );\n        $this->call('storage:link');\n\n        if ($this->option('migrate')) {\n            $this->call('migrate', ['--path' => str_replace(base_path(), '', __DIR__) . '\/..\/..\/migrations']);\n            $this->call('db:seed', ['--class' => \\Kaiwh\\Admin\\Seeds\\InitAdminSeeder::class]);\n        }\n    }","label":0}
{"text":"def votes(options={})\n      response = connection.get do |req|\n        req.url \"votes\", options\n      end\n      return_error_or_body(response)\n    end","label":0}
{"text":"private void addColumnSelectExample() {\n\t\tadd(new WHeading(HeadingLevel.H3, \"WCheckBoxSelect laid out in columns\"));\n\t\tadd(new ExplanatoryText(\"Setting the layout to COLUMN will make the check boxes be rendered in 'n' columns. The number of columns is\"\n\t\t\t\t+ \" determined by the layoutColumnCount property.\"));\n\t\tfinal WCheckBoxSelect select = new WCheckBoxSelect(\"australian_state\");\n\t\tselect.setToolTip(\"Make a selection\");\n\t\tselect.setButtonLayout(WCheckBoxSelect.LAYOUT_COLUMNS);\n\t\tselect.setButtonColumns(2);\n\t\tadd(select);\n\n\t\tadd(new WHeading(HeadingLevel.H3, \"Options equal to columns\"));\n\t\tString[] options = new String[]{\"Dog\", \"Cat\", \"Bird\"};\n\t\tfinal WCheckBoxSelect select2 = new WCheckBoxSelect(options);\n\t\tselect2.setToolTip(\"Animals\");\n\t\tselect2.setButtonColumns(3);\n\t\tfinal WTextField text = new WTextField();\n\t\ttext.setReadOnly(true);\n\t\ttext.setText(NO_SELECTION);\n\n\t\tWButton update = new WButton(\"Select Animals\");\n\t\tupdate.setAction(new Action() {\n\t\t\t@Override\n\t\t\tpublic void execute(final ActionEvent event) {\n\t\t\t\tString output = select2.getSelected().isEmpty() ? NO_SELECTION : \"The selected animals are: \"\n\t\t\t\t\t\t+ select2.getSelected();\n\t\t\t\ttext.setText(output);\n\t\t\t}\n\t\t});\n\t\tselect2.setDefaultSubmitButton(update);\n\n\t\tadd(select2);\n\t\tadd(update);\n\t\tadd(text);\n\t\tadd(new WAjaxControl(update, text));\n\t}","label":0}
{"text":"def _get_all_cwlkeys(items, default_keys=None):\n    \n    if default_keys:\n        default_keys = set(default_keys)\n    else:\n        default_keys = set([\"metadata__batch\", \"config__algorithm__validate\",\n                            \"config__algorithm__validate_regions\",\n                            \"config__algorithm__validate_regions_merged\",\n                            \"config__algorithm__variant_regions\",\n                            \"validate__summary\",\n                            \"validate__tp\", \"validate__fp\", \"validate__fn\",\n                            \"config__algorithm__coverage\", \"config__algorithm__coverage_merged\",\n                            \"genome_resources__variation__cosmic\", \"genome_resources__variation__dbsnp\",\n                            \"genome_resources__variation__clinvar\"\n        ])\n    all_keys = set([])\n    for data in items:\n        all_keys.update(set(data[\"cwl_keys\"]))\n    all_keys.update(default_keys)\n    return all_keys","label":0}
{"text":"protected function setPatchedPackageData(PackageInterface $package, array $patchesAppliedData)\n    {\n        $extra = $package->getExtra();\n        $extra['patches_applied'] = $patchesAppliedData;\n        $package->setExtra($extra);\n        $this->composer->getRepositoryManager()->getLocalRepository()->write();\n    }","label":0}
{"text":"func (s *GetDocumentAnalysisOutput) SetBlocks(v []*Block) *GetDocumentAnalysisOutput {\n\ts.Blocks = v\n\treturn s\n}","label":0}
{"text":"def qname(self, uri, generate=False):\n        \n        try:\n            prefix, namespace, name = self.g.namespace_manager.compute_qname(uri, generate=generate)\n            qname = ':'.join((prefix, name))\n            return qname\n        except (KeyError, ValueError) as e:\n            return uri.toPython() if isinstance(uri, rdflib.URIRef) else uri","label":0}
{"text":"private function assertValidFields($fields)\n    {\n        if(!isset($fields)) {\n            throw new InvalidArgumentException(\"Fields are empty\");\n        }\n\n        foreach($fields as $field) {\n            if(count(explode('.', $field['key'])) != 2) {\n                throw new InvalidArgumentException('Key has wrong format');\n            }\n        }\n    }","label":0}
{"text":"function Canvas( figure ) {\n\n\t\/\/ INSTANCE ATTRIBUTES \/\/\n\n\tthis._parent = figure;\n\tthis._root = undefined;\n\tthis._children = {};\n\tthis._config = {\n\t\t'width': 500,\n\t\t'height': 500,\n\t\t\"background\": false\n\t};\n\n\t\/\/ REGISTER \/\/\n\tif ( figure._config.hasOwnProperty( 'canvas' )  ) {\n\t\tfigure._config.canvas.push( this._config );\n\t} else {\n\t\tfigure._config.canvas = [ this._config ];\n\t}\n\tif ( figure._children.hasOwnProperty( 'canvas' ) ) {\n\t\tfigure._children.canvas.push( this );\n\t} else {\n\t\tfigure._children.canvas = [ this ];\n\t}\n\n\treturn this;\n\n}","label":0}
{"text":"public synchronized void opportunisticallyRefreshUserData(final String username, final String password)\n\t{\n\t\tif (shouldOpportunisticallyRefreshUserData())\n\t\t{\n\t\t\tthis.lastOpportunisticUserDataRefresh = System.currentTimeMillis();\n\t\t\tThread thread = new Thread(() -> refreshAllUserData(ldap.parseUser(username), password, true));\n\t\t\tthread.setDaemon(true);\n\t\t\tthread.setName(\"UserManager_OpportunisticRefresh\");\n\t\t\tthread.start();\n\t\t}\n\t}","label":0}
{"text":"public function sendCommand(string $command) : string\n    {\n        try {\n            $this->socket->send(json_encode([\n                'action' => 'command',\n                'command' => [\n                    'name' => $command,\n                ]\n            ]));\n            $result = $this->socket->recv();\n            return $result;\n        } catch (\\ZMQException $e) {\n            throw new ClientException($e->getMessage());\n        }\n    }","label":0}
{"text":"func (service *VboxPortType) IPCIAddresssetBus(request *IPCIAddresssetBus) (*IPCIAddresssetBusResponse, error) {\n\tresponse := new(IPCIAddresssetBusResponse)\n\terr := service.client.Call(\"\", request, response)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn response, nil\n}","label":0}
{"text":"protected function getPath(): ?string\n    {\n        $path = $this->input->getOption('path');\n\n        \/\/ First we will check for an explicitly specified path from the user. If one\n        \/\/ exists we will use that as the path to the assets. This allows the free\n        \/\/ storage of assets wherever is best for this developer's web projects.\n        if (\\is_null($path)) {\n            return null;\n        }\n\n        return $this->laravel->basePath().'\/'.$path;\n    }","label":0}
{"text":"public function drop($sure): Database\n    {\n        if (true !== $sure) {\n            $this->throwUnsure();\n        }\n        $link = $this->connect();\n        $sql  = \"DROP DATABASE IF EXISTS `{$this->config->get(ConfigInterface::PARAM_DB_NAME)}`\";\n        if (true !== mysqli_query($link, $sql)) {\n            $mysqlError = mysqli_errno($link) . ': ' . mysqli_error($link);\n            throw new DoctrineStaticMetaException(\n                'Failed to drop the database '\n                . $this->config->get(ConfigInterface::PARAM_DB_NAME)\n                . ' Mysql Error - ' . $mysqlError\n            );\n        }\n\n        return $this;\n    }","label":0}
{"text":"public function detachBehavior($name)\n    {\n        if (isset($this->_behaviors[$name])) {\n            unset($this->_behaviors[$name]);\n        }\n        unset(self::$_names[get_class($this)]);\n\n        return parent::detachBehavior($name);\n    }","label":0}
{"text":"private void toggle() {\n        if (toggle.checked) {\n            element().classList.add(\"completed\");\n        } else {\n            element().classList.remove(\"completed\");\n        }\n        repository().complete(item(), toggle.checked);\n        application().update();\n    }","label":0}
{"text":"public static function getStaticChampionById( string $champion_id, string $locale = 'en_US', string $version = null ) : array\n\t{\n\t\t$data = self::getStaticChampions($locale, $version);\n\t\tif (isset($data['data'][$champion_id]) == false)\n\t\t\tthrow new ArgumentException('Champion with given ID was not found.', 404);\n\n\t\treturn $data['data'][$champion_id];\n\t}","label":0}
{"text":"public static GrowQueue_F32 zeros( int length ) {\n\t\tGrowQueue_F32 out = new GrowQueue_F32(length);\n\t\tout.size = length;\n\t\treturn out;\n\t}","label":0}
{"text":"func (s *SecurityGroupService) NewAuthorizeSecurityGroupEgressParams() *AuthorizeSecurityGroupEgressParams {\n\tp := &AuthorizeSecurityGroupEgressParams{}\n\tp.p = make(map[string]interface{})\n\treturn p\n}","label":0}
{"text":"public static function convertToYotiAttribute(ProtobufAttribute $protobufAttribute)\n    {\n        $yotiAttribute = null;\n\n        \/\/ Application Logo can be empty, return NULL when this occurs.\n        if ($protobufAttribute->getName() == ApplicationProfile::ATTR_APPLICATION_LOGO &&\n          empty($protobufAttribute->getValue())) {\n            return $yotiAttribute;\n        }\n\n        try {\n            $yotiAnchorsMap = AnchorListConverter::convert(\n                $protobufAttribute->getAnchors()\n            );\n            $attrValue = AttributeConverter::convertValueBasedOnContentType(\n                $protobufAttribute->getValue(),\n                $protobufAttribute->getContentType()\n            );\n            $attrName = $protobufAttribute->getName();\n            $attrValue = AttributeConverter::convertValueBasedOnAttributeName(\n                $attrValue,\n                $attrName\n            );\n            $yotiAttribute = new Attribute(\n                $attrName,\n                $attrValue,\n                $yotiAnchorsMap\n            );\n        } catch (AttributeException $e) {\n            error_log(\"{$e->getMessage()} (Attribute: {$protobufAttribute->getName()})\", 0);\n        } catch (\\Exception $e) {\n            error_log($e->getMessage(), 0);\n        }\n\n        return $yotiAttribute;\n    }","label":0}
{"text":"def _generate_union_class_vars(self, data_type):\n        \n        lineno = self.lineno\n        if data_type.catch_all_field:\n            self.emit(\"_catch_all = '%s'\" % data_type.catch_all_field.name)\n        elif not data_type.parent_type:\n            self.emit('_catch_all = None')\n\n        # Generate stubs for class variables so that IDEs like PyCharms have an\n        # easier time detecting their existence.\n        for field in data_type.fields:\n            if is_void_type(field.data_type):\n                field_name = fmt_var(field.name)\n                self.emit('# Attribute is overwritten below the class definition')\n                self.emit('{} = None'.format(field_name))\n\n        if lineno != self.lineno:\n            self.emit()","label":0}
{"text":"def easy_as_pie percent, *args\n      raise ArgumentError, \"Must take a percent argument\" unless percent\n      pie_options = {:\"data-percent\" => percent, :class => 'chart'}\n      \n      options = args.extract_options!\n      pie_options.merge!(options || {})\n\n      label = args.first || \"#{percent}%\"\n\n      content_tag :div, label, pie_options\n    end","label":0}
{"text":"func (u *Unit) relations(predicate relationPredicate) ([]*Relation, error) {\n\tcandidates, err := applicationRelations(u.st, u.doc.Application)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tvar filtered []*Relation\n\tfor _, relation := range candidates {\n\t\trelationUnit, err := relation.Unit(u)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tif include, err := predicate(relationUnit); err != nil {\n\t\t\treturn nil, err\n\t\t} else if include {\n\t\t\tfiltered = append(filtered, relation)\n\t\t}\n\t}\n\treturn filtered, nil\n}","label":0}
{"text":"def decode_file_name(aFilename)\n      prefix,date,ext = aFilename.scan(\/(.*?)\\-(.*?)\\.(.*)\/).flatten\n      return Time.from_date_numeric(date)\n    end","label":0}
{"text":"public function importArticleStatistic($oldId, $newId)\n    {\n        $article = $this->em->getRepository('VipaJournalBundle:Article')->find($newId);\n\n        if (!$article) {\n            $this->consoleOutput->writeln(\"Couldn't find #\" . $newId . \" on the new database.\");\n            return;\n        }\n\n        $this->consoleOutput->writeln(\"Reading view statistics for #\" . $oldId . \"...\");\n        $viewStatsSql = \"SELECT DATE(view_time) AS date, COUNT(*) as view FROM \" .\n            \"article_view_stats WHERE article_id = :id GROUP BY DATE(view_time)\";\n        $viewStatsStatement = $this->dbalConnection->prepare($viewStatsSql);\n        $viewStatsStatement->bindValue('id', $oldId);\n        $viewStatsStatement->execute();\n\n        $this->consoleOutput->writeln(\"Reading download statistics for #\" . $oldId . \"...\");\n        $downloadStatsSql = \"SELECT DATE(download_time) AS date, COUNT(*) as download FROM \" .\n            \"article_download_stats WHERE article_id = :id GROUP BY DATE(download_time)\";\n        $downloadStatsStatement = $this->dbalConnection->prepare($downloadStatsSql);\n        $downloadStatsStatement->bindValue('id', $oldId);\n        $downloadStatsStatement->execute();\n        \n        $pkpViewStats = $viewStatsStatement->fetchAll();\n        $pkpDownloadStats = $downloadStatsStatement->fetchAll();\n        foreach ($pkpViewStats as $stat) {\n            $articleFileStatistic = new ArticleStatistic();\n            $articleFileStatistic->setArticle($article);\n            $articleFileStatistic->setDate(DateTime::createFromFormat('Y-m-d', $stat['date']));\n            $articleFileStatistic->setView($stat['view']);\n            $this->em->persist($articleFileStatistic);\n        }\n\n        if (!$article->getArticleFiles()->isEmpty()) {\n            foreach ($pkpDownloadStats as $stat) {\n                $articleFileStatistic = new ArticleFileStatistic();\n                $articleFileStatistic->setArticleFile($article->getArticleFiles()->first());\n                $articleFileStatistic->setDate(DateTime::createFromFormat('Y-m-d', $stat['date']));\n                $articleFileStatistic->setDownload($stat['download']);\n                $this->em->persist($articleFileStatistic);\n            }\n        }\n\n        $this->em->flush();\n    }","label":0}
{"text":"private static function shouldSandboxUserBeCreated(\n        BunqEnumApiEnvironmentType $environmentType,\n        string $apiKey = null\n    ): bool {\n        return $environmentType->equals(BunqEnumApiEnvironmentType::SANDBOX()) && is_null($apiKey);\n    }","label":0}
{"text":"def create(cls, address, ospf_area=None, **kwargs):\n        \n        return super(LoopbackClusterInterface, cls).create(\n            address=address,\n            network_value='{}\/32'.format(address),\n            interface_id='Loopback Interface',\n            ospfv2_area_ref=ospf_area,\n            **kwargs)","label":0}
{"text":"func (ch *CredHub) GenerateRSA(name string, gen generate.RSA, overwrite Mode) (credentials.RSA, error) {\n\tvar cred credentials.RSA\n\terr := ch.generateCredential(name, \"rsa\", gen, overwrite, &cred)\n\treturn cred, err\n}","label":0}
{"text":"private void configureClearTextWithPriorKnowledge(SocketChannel ch) {\n        ch.pipeline().addLast(connectionHandler,\n            new PrefaceFrameWrittenEventHandler(),\n            new UserEventLogger());\n        configureEndOfPipeline(ch.pipeline());\n    }","label":0}
{"text":"public function is(array $values, array $rules)\n    {\n        try {\n            $this->execute($values, $rules);\n        } catch (\\Exception $ex) {\n            return false;\n        }\n\n        return true;\n    }","label":0}
{"text":"public void writeToFile(StringBuffer content, String filename, String encoding) throws NoSuchPathException, IOException{\n\t\ttry {\n\t\t\tOutputStreamWriter writer = new OutputStreamWriter(new FileOutputStream(filename), encoding);\n\t\t\twriter.write(content.toString(), 0, content.length());\n\t\t\twriter.flush();\n\t\t\twriter.close();\n\t\t} catch (FileNotFoundException e) {\n\t\t\tthrow new NoSuchPathException(e);\n\t\t}\n\t}","label":0}
{"text":"public IndexNode visitFirstIndex(Consumer<? super IndexNode> visitor) {\n    visitor.accept(this);\n    IndexNode refresh = refresh();\n    refresh.getChildren().forEach(n -> n.visitFirstIndex(visitor));\n    return refresh;\n  }","label":0}
{"text":"protected function buildEndpoint()\n    {\n        $endpoint = $this->authorization->apiEndpoint . '\/tables\/' . $this->tableName . '\/';\n\n        \/\/ If there is a specific record ID, append that to the endpoint\n        if ($this->recordID) { $endpoint .= $this->recordID; }\n\n        return $endpoint;\n    }","label":0}
{"text":"def show_headers\n      mail = with_email_locale { mail_and_body.first }\n      render partial: 'rails_email_preview\/emails\/headers', locals: {mail: mail}\n    end","label":0}
{"text":"def mode_assignment(arg):\n    \n    arg = arg.upper()\n    stream_args = ('STREAM', 'CONSOLE', 'STDOUT')\n    try:\n        if arg in stream_args:\n            return 'STREAM'\n        else:\n            return arg\n    except Exception:\n        return None","label":0}
{"text":"def _GetChunk(self):\n    \"\"\"\"\"\"\n\n    found_ref = None\n    for ref in self._blob_refs:\n      if self._offset >= ref.offset and self._offset < (ref.offset + ref.size):\n        found_ref = ref\n        break\n\n    if not found_ref:\n      return None, None\n\n    # If self._current_ref == found_ref, then simply return previously found\n    # chunk. Otherwise, update self._current_chunk value.\n    if self._current_ref != found_ref:\n      self._current_ref = found_ref\n\n      data = data_store.BLOBS.ReadBlobs([found_ref.blob_id])\n      self._current_chunk = data[found_ref.blob_id]\n\n    return self._current_chunk, self._current_ref","label":0}
{"text":"func (p *Packet) IncreaseTCPSeq(incr uint32) {\n\tbuffer := p.ipHdr.Buffer[p.ipHdr.ipHeaderLen:]\n\tp.tcpHdr.tcpSeq = p.tcpHdr.tcpSeq + incr\n\tbinary.BigEndian.PutUint32(buffer[tcpSeqPos:tcpSeqPos+4], p.tcpHdr.tcpSeq)\n}","label":0}
{"text":"func (rm *responseModifier) Header() http.Header {\n\n\t\/\/ Use original header if hijacked\n\tif rm.hijacked {\n\t\treturn rm.rw.Header()\n\t}\n\n\treturn rm.header\n}","label":0}
{"text":"public function putAction(Request $request, User $loggedUser, $type, $widgetId)\n    {\n        $this->checkPortfolioToolAccess($loggedUser);\n\n        $widgetFindEvent = new WidgetFindEvent($widgetId, $type, $loggedUser);\n\n        $this->get('event_dispatcher')->dispatch('icap_portfolio_widget_find_'.$type, $widgetFindEvent);\n\n        $data = $this->getWidgetsManager()->handle($widgetFindEvent->getWidget(), $type, $request->request->all(), $this->get('kernel')->getEnvironment());\n\n        $response = new JsonResponse();\n        $response->setData($data);\n\n        return $response;\n    }","label":0}
{"text":"public function learn(string $dirname = '')\n    {\n        if (empty($dirname))\n        {\n            $dirname = __DIR__ . '\/..\/..\/resources\/*\/*.txt';\n        }\n        else if (!is_dir($dirname) || !is_readable($dirname))\n        {\n            throw new \\InvalidArgumentException('Provided directory could not be found or is not readable');\n        }\n        else\n        {\n            $dirname = rtrim($dirname, '\/');\n            $dirname .= '\/*\/*.txt';\n        }\n\n        \/** @var \\GlobIterator $txt *\/\n        foreach (new \\GlobIterator($dirname) as $txt)\n        {\n            $content = mb_strtolower(file_get_contents($txt->getPathname()));\n\n            echo $txt->getBasename('.txt'), PHP_EOL;\n\n            file_put_contents(\n                substr_replace($txt->getPathname(), 'json', -3),\n                json_encode(\n                    [ $txt->getBasename('.txt') => $this->getNgrams($content) ],\n                    JSON_UNESCAPED_UNICODE\n                )\n            );\n        }\n    }","label":0}
{"text":"public QueryPlus<T> withMaxQueuedBytes(long maxQueuedBytes)\n  {\n    return new QueryPlus<>(\n        query.withOverriddenContext(ImmutableMap.of(QueryContexts.MAX_QUEUED_BYTES_KEY, maxQueuedBytes)),\n        queryMetrics,\n        identity\n    );\n  }","label":0}
{"text":"def create_for_collection_items(item_type, hint):\n        \n        # this leads to infinite loops\n        # try:\n        #     prt_type = get_pretty_type_str(item_type)\n        # except:\n        #     prt_type = str(item_type)\n        return TypeInformationRequiredError(\"Cannot parse object of type {t} as a collection: this type has no valid \"\n                                            \"PEP484 type hint about its contents: found {h}. Please use a standard \"\n                                            \"PEP484 declaration such as Dict[str, Foo] or List[Foo]\"\n                                            \"\".format(t=str(item_type), h=hint))","label":0}
{"text":"public function getLastPageNumber()\n    {\n        $this->loadData();\n        $count = count($this->filteredData);\n\n        return ceil($count \/ $this->pageSize);\n    }","label":0}
{"text":"def h264_profile=(h264_profile)\n      validator = EnumAttributeValidator.new('String', [\"baseline\", \"main\", \"high\", \"high10\", \"high422\", \"high444\"])\n      unless validator.valid?(h264_profile)\n        fail ArgumentError, \"invalid value for 'h264_profile', must be one of #{validator.allowable_values}.\"\n      end\n      @h264_profile = h264_profile\n    end","label":0}
{"text":"def user_exists(name,\n                user=None, host=None, port=None, maintenance_db=None,\n                password=None,\n                runas=None):\n    '''\n    \n    '''\n    return bool(\n        role_get(name,\n                 user=user,\n                 host=host,\n                 port=port,\n                 maintenance_db=maintenance_db,\n                 password=password,\n                 runas=runas,\n                 return_password=False))","label":0}
{"text":"SortedSet<ModuleElement> getModuleList(Map<String, SortedSet<ModuleElement>> map,\n            String groupname) {\n        return map.computeIfAbsent(groupname, g -> new TreeSet<>(configuration.utils.makeModuleComparator()));\n    }","label":0}
{"text":"function addSupport(languages, docLanguage) {\n\t\tif (typeof languages === 'string') {\n\t\t\tlanguages = [languages];\n\t\t}\n\n\t\tlanguages.forEach(function (lang) {\n\t\t\tdocCommentSupport(lang, function (pattern) {\n\t\t\t\tif (!pattern.inside) {\n\t\t\t\t\tpattern.inside = {};\n\t\t\t\t}\n\t\t\t\tpattern.inside.rest = docLanguage;\n\t\t\t});\n\t\t});\n\t}","label":0}
{"text":"function attachMiddleware(app, options) {\n    \/\/ \u65e5\u5fd7\u4e2d\u95f4\u4ef6\n    app.use(log.express());\n    \/\/ \u521d\u59cb\u5316\u4e2d\u95f4\u4ef6\n    app.use(require('.\/lib\/middleware\/init'));\n    \/\/ \u8bbe\u7f6e\u4e0a\u4e0b\u6587\n    app.use(setContext);\n\n    \/\/ \u9644\u52a0\u81ea\u5b9a\u4e49\u4e2d\u95f4\u4ef6\n    beforeMiddlewares.forEach(function (fn) {\n        app.use(fn);\n    });\n\n    \/\/ \u8def\u7531\u7ed1\u5b9a\n    router.use(app);\n\n    \/\/ \u9644\u52a0\u81ea\u5b9a\u4e49\u4e2d\u95f4\u4ef6\n    afterMiddlewares.forEach(function (fn) {\n        app.use(fn);\n    });\n\n    \/\/ \u9875\u9762\u6e32\u67d3\u4e2d\u95f4\u4ef6\n    var renderHTML = require('.\/lib\/middleware\/renderHTML');\n    app.use(renderHTML({\n        templateData: options.templateData,\n        indexFile: options.indexFile\n    }));\n    \/\/ \u9519\u8bef\u5904\u7406\n    app.use(require('.\/lib\/middleware\/error'));\n}","label":0}
{"text":"func (r *EtcdRegistry) UnitState(name string) (state *unit.UnitState, err error) {\n\tvar us *unit.UnitState\n\tus, err = r.stateByMUSKey(name)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn us, nil\n}","label":0}
{"text":"private void handleLeaveEvent(Node node) {\n    SwimMember member = members.get(MemberId.from(node.id().id()));\n    if (member != null && !member.isActive()) {\n      members.remove(member.id());\n    }\n  }","label":0}
{"text":"protected function loadModel($id)\n    {\n        \/\/ \u0415\u0441\u043b\u0438 \u043c\u043e\u0434\u0435\u043b\u044c \u043d\u0435 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0430\n        if (!$this->model) {\n            \/\/ \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u044c \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u043d\u044b\u043c \u0438\u043c\u0435\u043d\u0435\u043c \u043a\u043b\u0430\u0441\u0441\u0430\n            $this->model = call_user_func([$this->modelClass, 'findOne'], [$id]);\n        }\n\n        \/\/ \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u043e\u043b\u044f\n        $this->model->setAttributes($this->attributes);\n\n        \/\/ \u0415\u0441\u043b\u0438 \u043c\u043e\u0434\u0435\u043b\u044c \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\u0430, \u0433\u0435\u043d\u0435\u0440\u0438\u043c Exception\n        if ($this->model === null)\n            throw new HttpException(404, 'Model not found');\n\n        return $this->model;\n    }","label":0}
{"text":"private function _request($method, $url, array $options) {\n\t\ttry {\n\t\t\t$response = $this->httpClient->{$method}($url, $options);\n\t\t} catch(ClientException $e) {\n\t\t\t$response = $e->getResponse();\n\t\t} catch(ConnectException $e) {\n\t\t\t$this->_throwServerError($e);\n\t\t} catch (RequestException $e) {\n\t\t\t$this->_throwServerError($e);\n\t\t}\n\n\t\treturn $response;\n\t}","label":0}
{"text":"func (m *Machine) ApplicationNames() ([]string, error) {\n\tunits, err := m.Units()\n\tif err != nil {\n\t\treturn nil, errors.Trace(err)\n\t}\n\tapps := set.NewStrings()\n\tfor _, unit := range units {\n\t\tapps.Add(unit.ApplicationName())\n\t}\n\treturn apps.SortedValues(), nil\n}","label":0}
{"text":"func ListFetchedFeeds(driver db.DB) (metas []models.FeedMeta, err error) {\n\tlastMetas, err := driver.GetFetchedFeedMetas()\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"Failed to get Meta: %s\", err)\n\t}\n\tif len(lastMetas) == 0 {\n\t\tlog.Infof(\"No feeds found\")\n\t\treturn nil, nil\n\t}\n\n\t\/\/TODO use meta.Year()\n\tuniqYears := map[int]bool{}\n\tfor _, meta := range lastMetas {\n\t\tif strings.HasSuffix(meta.URL, \"jvndb.rdf\") ||\n\t\t\tstrings.HasSuffix(meta.URL, \"jvndb_new.rdf\") {\n\t\t\tuniqYears[c.Latest] = true\n\t\t} else if strings.Contains(meta.URL, \"jvndb\") {\n\t\t\tyearstr := strings.TrimSuffix(strings.Split(meta.URL, \"jvndb_\")[1], \".rdf\")\n\t\t\ty, err := strconv.Atoi(yearstr)\n\t\t\tif err != nil {\n\t\t\t\treturn nil, fmt.Errorf(\"Unable conver to int: %s, err: %s\",\n\t\t\t\t\tyearstr, err)\n\t\t\t}\n\t\t\tuniqYears[y] = true\n\t\t}\n\t}\n\n\tyears := []int{}\n\tfor y := range uniqYears {\n\t\tyears = append(years, y)\n\t}\n\n\tif len(years) == 0 {\n\t\treturn metas, nil\n\t}\n\n\tmetas, err = FetchLatestFeedMeta(driver, years)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn\n}","label":0}
{"text":"public void init(Record record)\n    {\n        super.init(record);\n        this.setMasterSlaveFlag(FileListener.RUN_IN_MASTER | FileListener.DONT_REPLICATE_TO_SLAVE);\n    }","label":0}
{"text":"def granularity_to_time(s):\n    \n    mfact = {\n        'S': 1,\n        'M': 60,\n        'H': 3600,\n        'D': 86400,\n        'W': 604800,\n    }\n    try:\n        f, n = re.match(\"(?P<f>[SMHDW])(?:(?P<n>\\d+)|)\", s).groups()\n        n = n if n else 1\n        return mfact[f] * int(n)\n\n    except Exception as e:\n        raise ValueError(e)","label":0}
{"text":"protected function _setDefaultParams($stub) {\n\t\t$source = $stub['embed-src'];\n\t\t$flashvars = (isset($stub['flashvars'])) ? $stub['flashvars'] : null;\n\t\t$count = count($this->_match);\n\n\t\tfor ($i = 1; $i <= $count; $i++) {\n\t\t\t$source = str_ireplace('$' . $i, $this->_match[$i - 1], $source);\n\t\t\t$flashvars = str_ireplace('$' . $i, $this->_match[$i - 1], $flashvars);\n\t\t}\n\n\t\t$source = $this->_esc($source);\n\t\t$flashvars = $this->_esc($flashvars);\n\n\t\t$this->_objectParams = [\n\t\t\t'movie' => $source,\n\t\t\t'quality' => 'high',\n\t\t\t'allowFullScreen' => 'true',\n\t\t\t'allowScriptAccess' => 'always',\n\t\t\t'pluginspage' => 'http:\/\/www.macromedia.com\/go\/getflashplayer',\n\t\t\t'autoplay' => 'false',\n\t\t\t'autostart' => 'false',\n\t\t\t'flashvars' => $flashvars,\n\t\t];\n\n\t\t$this->_objectAttributes = [\n\t\t\t'type' => 'application\/x-shockwave-flash',\n\t\t\t'data' => $source,\n\t\t\t'width' => $stub['embed-width'],\n\t\t\t'height' => $stub['embed-height'],\n\t\t];\n\n\t\t\/\/separate iframe params and attributes\n\t\t$this->_iframeParams = [\n\t\t\t'wmode' => 'transparent'\n\t\t];\n\t\t$this->_iframeAttributes = [\n\t\t\t'type' => 'text\/html',\n\t\t\t'width' => $stub['embed-width'],\n\t\t\t'height' => $stub['embed-height'],\n\t\t\t'frameborder' => '0',\n\t\t\t'allowfullscreen' => true\n\t\t];\n\t}","label":0}
{"text":"protected function toArrayProperty($p, $pn, $policy, Reader $ar, PolicyResolver $pr, \\ReflectionClass $headRefClass) {\n        $getter = $policy->getter ?: 'get'.ucfirst($pn);\n        $result = null;\n        \n        \/\/ ========== SCALAR TYPES ==========\n        if($column = $ar->getPropertyAnnotation($p, 'Doctrine\\ORM\\Mapping\\Column')) { \/\/ scalar\n            $result = $this->$getter();\n            if(($policy instanceof Policy\\Interfaces\\CustomTo) && $policy->format) {\n                return call_user_func_array($policy->format, [$result, $column->type]);\n            }\n            switch($column->type) {\n                case 'simple_array':\n                    \/\/ @see https:\/\/github.com\/doctrine\/doctrine2\/issues\/4673\n                    if($pr->hasOption(PolicyResolver::SIMPLE_ARRAY_FIX)\n                       && is_array($result)\n                       && (count($result) === 1)\n                       && ($result[0] === null)) {\n                        return [];\n                    } break;\n                case 'date':\n                case 'time':\n                case 'datetime':\n                case 'detetimez':\n                    if($result !== null) {\n                        if($policy instanceof Policy\\Interfaces\\FormatDateTimeTo) {\n                            $result = $result->format($policy->format);\n                            if($result === false) { throw new Exceptions\\PolicyException('Wrong DateTime format for field \"'.$pn.'\"'); }\n                        } else if(!$policy instanceof Policy\\Interfaces\\KeepDateTimeTo) {\n                            $result = $result->format('Y-m-d\\TH:i:s').'.000Z';\n                        }\n                    }\n                    break;\n            }\n        \n        \/\/ ========== RELATIONS ==========\n        } else if($association = static::getPropertyAssociation($p, $ar)) { \/\/ entity or collection\n            $isCollection = false;\n            \n            if($association instanceof OneToMany) {\n                $result = ['__meta' => ['class' => static::getEntityFullName($headRefClass, $association->targetEntity),\n                                       'association' => 'OneToMany'], 'collection' => []];\n                $isCollection = true;\n            } else if($association instanceof ManyToMany) {\n                $result = ['__meta' => ['class' => static::getEntityFullName($headRefClass, $association->targetEntity),\n                                       'association' => 'ManyToMany'], 'collection' => []];\n                $isCollection = true;\n            }\n            \n            $v = $this->$getter();\n            \n            \/\/ ========== COLLECTION RELATION ==========\n            if($isCollection) {\n                $collection = $v;\n                if($collection->count()) {\n                    if($policy instanceof Policy\\Interfaces\\FetchPaginateTo) { \/\/ pagination policy\n                        if($policy->fromTail) {\n                            $offset = $collection->count() - $policy->limit - $policy->offset;\n                            if($offset < 0) { $offset = 0; }\n                            $limit = ($collection->count() > $policy->limit) ? $collection->count() : $policy->limit;\n                            $collection = $collection->slice($offset, $limit);\n                        } else {\n                            $collection = $collection->slice($policy->offset, $policy->limit);\n                        }\n                    }\n                    foreach($collection as $el) {\n                        $result['collection'][] = $el->toArray($policy, $ar, $pr);\n                    }\n                }\n                \n            \/\/ ========== SUB-ENTITY RELATION ==========\n            } else { \/\/ single entity\n                if($v) { $result = $v->toArray($policy, $ar, $pr); }\n            }\n            \n            if(($policy instanceof Policy\\Interfaces\\CustomTo) && $policy->transform) {\n                $result = call_user_func_array($policy->transform, [$v, $result]);\n            }\n            \n        \/\/ ========== NON-DOCTRINE TYPE ==========\n        } else {\n            $result = $this->$getter();\n            if(($policy instanceof Policy\\Interfaces\\CustomTo) && $policy->format) {\n                return call_user_func_array($policy->format, [$result, null]);\n            }\n        }\n        return $result;\n    }","label":0}
{"text":"func NewInstance(fw *choria.Framework) (i *Instance, err error) {\n\ti = &Instance{\n\t\tfw:               fw,\n\t\tcfg:              fw.Config,\n\t\trequests:         make(chan *choria.ConnectorMessage),\n\t\tmu:               &sync.Mutex{},\n\t\tstartTime:        time.Now(),\n\t\tlastMsgProcessed: time.Unix(0, 0),\n\t\tagentDenyList:    []string{},\n\t}\n\n\ti.log = log.WithFields(log.Fields{\"identity\": fw.Config.Identity, \"component\": \"server\"})\n\ti.discovery = discovery.New(fw, i.log)\n\n\treturn i, nil\n}","label":0}
{"text":"@Override\n    public BigDecimal fromBytes(Class targetClass, byte[] bytes)\n    {\n        if (bytes == null)\n        {\n            return null;\n        }\n        int scale = (((bytes[0]) << 24) | ((bytes[1] & 0xff) << 16) | ((bytes[2] & 0xff) << 8) | ((bytes[3] & 0xff)));\n\n        byte[] bibytes = Arrays.copyOfRange(bytes, 4, bytes.length);\n\n        BigInteger bi = new BigInteger(bibytes);\n\n        return new BigDecimal(bi, scale);\n    }","label":0}
{"text":"func (s *NodeInfo) SetZookeeperNodeInfo(v *ZookeeperNodeInfo) *NodeInfo {\n\ts.ZookeeperNodeInfo = v\n\treturn s\n}","label":0}
{"text":"public void unbindInstanceFromSecurityGroup(UnbindSecurityGroupRequest request) {\n        checkNotNull(request, \"request should not be null.\");\n        checkStringNotEmpty(request.getInstanceId(), \"request instanceId should not be empty.\");\n        checkStringNotEmpty(request.getSecurityGroupId(), \"request securityGroupId should not be empty.\");\n        InternalRequest internalRequest = this.createRequest(\n                request, HttpMethodName.PUT, INSTANCE_PREFIX, request.getInstanceId());\n        internalRequest.addParameter(InstanceAction.unbind.name(), null);\n        fillPayload(internalRequest, request);\n        this.invokeHttpClient(internalRequest, AbstractBceResponse.class);\n    }","label":0}
{"text":"def autoencoder_residual_discrete():\n  \"\"\"\"\"\"\n  hparams = autoencoder_residual()\n  hparams.bottleneck_bits = 1024\n  hparams.bottleneck_noise = 0.05\n  hparams.add_hparam(\"discretize_warmup_steps\", 16000)\n  hparams.add_hparam(\"bottleneck_kind\", \"tanh_discrete\")\n  hparams.add_hparam(\"isemhash_noise_dev\", 0.5)\n  hparams.add_hparam(\"isemhash_mix_prob\", 0.5)\n  hparams.add_hparam(\"isemhash_filter_size_multiplier\", 2.0)\n  hparams.add_hparam(\"vq_beta\", 0.25)\n  hparams.add_hparam(\"vq_decay\", 0.999)\n  hparams.add_hparam(\"vq_epsilon\", 1e-5)\n  return hparams","label":0}
{"text":"def _load(cls, attrs, *, context, **kwargs):\n        \n        return unpack_from_dynamodb(\n            model=cls,\n            attrs=attrs or {},\n            expected=cls.Meta.columns,\n            context=context, **kwargs)","label":0}
{"text":"def split_list_by(lst, key):\n  \n\n  first, second = [], []\n  for item in lst:\n    if key(item):\n      second.append(item)\n    else:\n      first.append(item)\n  return (first, second)","label":0}
{"text":"func (m MACCommands) MarshalBinary() ([]byte, error) {\n\tvar out []byte\n\tfor _, mac := range m {\n\t\tb, err := mac.MarshalBinary()\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tout = append(out, b...)\n\t}\n\treturn out, nil\n}","label":0}
{"text":"def _validate_cmdfinalization_callable(cls, func: Callable[[plugin.CommandFinalizationData],\n                                                               plugin.CommandFinalizationData]) -> None:\n        \"\"\"\"\"\"\n        cls._validate_callable_param_count(func, 1)\n        signature = inspect.signature(func)\n        _, param = list(signature.parameters.items())[0]\n        if param.annotation != plugin.CommandFinalizationData:\n            raise TypeError(\"{} must have one parameter declared with type \"\n                            \"'cmd2.plugin.CommandFinalizationData'\".format(func.__name__))\n        if signature.return_annotation != plugin.CommandFinalizationData:\n            raise TypeError(\"{} must declare return a return type of \"\n                            \"'cmd2.plugin.CommandFinalizationData'\".format(func.__name__))","label":0}
{"text":"func (ba *RawByteSlice) ReadFrom(r Reader, sz int) error {\n\tif sz < 0 {\n\t\treturn errorsp.WithStacksAndMessage(ErrBadFormat, \"expecting a size but get %d\", sz)\n\t}\n\t*ba = make(RawByteSlice, sz)\n\n\tn, err := io.ReadFull(r, *ba)\n\tif n != sz {\n\t\tlog.Printf(\"RawByteSlice.ReadFrom: exp %d bytes act %d: %v\", sz, n, err)\n\t}\n\treturn errorsp.WithStacks(err)\n}","label":0}
{"text":"func UniqueInputFieldNamesRule(context *ValidationContext) *ValidationRuleInstance {\n\tknownNameStack := []map[string]*ast.Name{}\n\tknownNames := map[string]*ast.Name{}\n\n\tvisitorOpts := &visitor.VisitorOptions{\n\t\tKindFuncMap: map[string]visitor.NamedVisitFuncs{\n\t\t\tkinds.ObjectValue: {\n\t\t\t\tEnter: func(p visitor.VisitFuncParams) (string, interface{}) {\n\t\t\t\t\tknownNameStack = append(knownNameStack, knownNames)\n\t\t\t\t\tknownNames = map[string]*ast.Name{}\n\t\t\t\t\treturn visitor.ActionNoChange, nil\n\t\t\t\t},\n\t\t\t\tLeave: func(p visitor.VisitFuncParams) (string, interface{}) {\n\t\t\t\t\t\/\/ pop\n\t\t\t\t\tknownNames, knownNameStack = knownNameStack[len(knownNameStack)-1], knownNameStack[:len(knownNameStack)-1]\n\t\t\t\t\treturn visitor.ActionNoChange, nil\n\t\t\t\t},\n\t\t\t},\n\t\t\tkinds.ObjectField: {\n\t\t\t\tKind: func(p visitor.VisitFuncParams) (string, interface{}) {\n\t\t\t\t\tif node, ok := p.Node.(*ast.ObjectField); ok {\n\t\t\t\t\t\tfieldName := \"\"\n\t\t\t\t\t\tif node.Name != nil {\n\t\t\t\t\t\t\tfieldName = node.Name.Value\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif knownNameAST, ok := knownNames[fieldName]; ok {\n\t\t\t\t\t\t\treportError(\n\t\t\t\t\t\t\t\tcontext,\n\t\t\t\t\t\t\t\tfmt.Sprintf(`There can be only one input field named \"%v\".`, fieldName),\n\t\t\t\t\t\t\t\t[]ast.Node{knownNameAST, node.Name},\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tknownNames[fieldName] = node.Name\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\t\t\t\t\treturn visitor.ActionSkip, nil\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}\n\treturn &ValidationRuleInstance{\n\t\tVisitorOpts: visitorOpts,\n\t}\n}","label":0}
{"text":"public Datatype.Builder mergeFrom(Datatype value) {\n    Datatype_Builder defaults = new Datatype.Builder();\n    if (defaults._unsetProperties.contains(Property.TYPE)\n        || !Objects.equals(value.getType(), defaults.getType())) {\n      setType(value.getType());\n    }\n    if (defaults._unsetProperties.contains(Property.INTERFACE_TYPE)\n        || value.isInterfaceType() != defaults.isInterfaceType()) {\n      setInterfaceType(value.isInterfaceType());\n    }\n    if (defaults._unsetProperties.contains(Property.BUILDER)\n        || !Objects.equals(value.getBuilder(), defaults.getBuilder())) {\n      setBuilder(value.getBuilder());\n    }\n    if (defaults._unsetProperties.contains(Property.EXTENSIBLE)\n        || value.isExtensible() != defaults.isExtensible()) {\n      setExtensible(value.isExtensible());\n    }\n    value.getBuilderFactory().ifPresent(this::setBuilderFactory);\n    if (defaults._unsetProperties.contains(Property.GENERATED_BUILDER)\n        || !Objects.equals(value.getGeneratedBuilder(), defaults.getGeneratedBuilder())) {\n      setGeneratedBuilder(value.getGeneratedBuilder());\n    }\n    if (defaults._unsetProperties.contains(Property.VALUE_TYPE)\n        || !Objects.equals(value.getValueType(), defaults.getValueType())) {\n      setValueType(value.getValueType());\n    }\n    if (defaults._unsetProperties.contains(Property.PARTIAL_TYPE)\n        || !Objects.equals(value.getPartialType(), defaults.getPartialType())) {\n      setPartialType(value.getPartialType());\n    }\n    value.getRebuildableType().ifPresent(this::setRebuildableType);\n    if (defaults._unsetProperties.contains(Property.PROPERTY_ENUM)\n        || !Objects.equals(value.getPropertyEnum(), defaults.getPropertyEnum())) {\n      setPropertyEnum(value.getPropertyEnum());\n    }\n    putAllStandardMethodUnderrides(value.getStandardMethodUnderrides());\n    if (defaults._unsetProperties.contains(Property.BUILDER_SERIALIZABLE)\n        || value.isBuilderSerializable() != defaults.isBuilderSerializable()) {\n      setBuilderSerializable(value.isBuilderSerializable());\n    }\n    if (defaults._unsetProperties.contains(Property.HAS_TO_BUILDER_METHOD)\n        || value.getHasToBuilderMethod() != defaults.getHasToBuilderMethod()) {\n      setHasToBuilderMethod(value.getHasToBuilderMethod());\n    }\n    if (value instanceof Value && generatedBuilderAnnotations == ImmutableList.<Excerpt>of()) {\n      generatedBuilderAnnotations = ImmutableList.copyOf(value.getGeneratedBuilderAnnotations());\n    } else {\n      addAllGeneratedBuilderAnnotations(value.getGeneratedBuilderAnnotations());\n    }\n    if (value instanceof Value && valueTypeAnnotations == ImmutableList.<Excerpt>of()) {\n      valueTypeAnnotations = ImmutableList.copyOf(value.getValueTypeAnnotations());\n    } else {\n      addAllValueTypeAnnotations(value.getValueTypeAnnotations());\n    }\n    if (defaults._unsetProperties.contains(Property.VALUE_TYPE_VISIBILITY)\n        || !Objects.equals(value.getValueTypeVisibility(), defaults.getValueTypeVisibility())) {\n      setValueTypeVisibility(value.getValueTypeVisibility());\n    }\n    if (value instanceof Value && nestedClasses == ImmutableList.<Excerpt>of()) {\n      nestedClasses = ImmutableList.copyOf(value.getNestedClasses());\n    } else {\n      addAllNestedClasses(value.getNestedClasses());\n    }\n    return (Datatype.Builder) this;\n  }","label":0}
{"text":"def parameters_dict(self):\n        \n        d = {}\n        for k, v in self.__dict__.items():\n            if not k.startswith(\"_\"):\n                d[k] = v\n        return d","label":0}
{"text":"public static function url(string $path, $uri)\n  {\n    $path = substr($path, 0, 1) != '\/' ? '\/' . $path : $path;\n\n    $root = isset($_SERVER[\"SCRIPT_NAME\"]) ? $_SERVER['SCRIPT_NAME'] : '';\n    $dir = pathinfo($root)['dirname'];\n\n    if (isset($_SERVER['HTTP_HOST'])) {\n      if (isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] != 'off') {\n        $http = 'https:\/\/';\n      } else {\n        $http = 'http:\/\/';\n      }\n\n      $url = $http . $_SERVER['HTTP_HOST'] . ($dir == '\/' ? '' : $dir) . $path;\n    } else {\n      $url = ($uri ? config('app.url') : '') . $path;\n    }\n\n    if (isset($_SERVER['QUERY_STRING'])) {\n      if (str_contains($url, '?')) $url .= '&' . $_SERVER['QUERY_STRING'];\n      if (!str_contains($url, '?')) $url .= '?' . $_SERVER['QUERY_STRING'];\n    }\n\n    return $url;\n  }","label":0}
{"text":"func (p *NodeSvcProxy) SvcProviderUpdate(svcName string, providers []string) {\n\tlog.Infof(\"Node proxy AddSvcSpec: %s %v\", svcName, providers)\n\tp.Mutex.Lock()\n\tdefer p.Mutex.Unlock()\n\t\/\/ check if there is at least one local provider\n\tlocalProv := false\n\tfor _, prov := range providers {\n\t\t_, localProv = p.LocalIP[prov]\n\t\tif localProv {\n\t\t\tbreak\n\t\t}\n\t}\n\n\tif !localProv { \/\/ get rid of the natRules if it exists\n\t\tp.deleteSvcRules(svcName)\n\t\tdelete(p.ProvMap, svcName)\n\t\treturn\n\t}\n\n\t\/\/ Make a new provider map\n\tnewProv := make(map[string]bool)\n\tprovMap := Presence{\n\t\tItems: newProv,\n\t}\n\tp.ProvMap[svcName] = provMap\n\n\tfor _, prov := range providers {\n\t\t_, found := p.LocalIP[prov]\n\t\tif found {\n\t\t\tprovMap.Items[prov] = true\n\t\t}\n\t}\n\n\tp.syncSvc(svcName)\n}","label":0}
{"text":"func (s *CreateStreamProcessorInput) SetRoleArn(v string) *CreateStreamProcessorInput {\n\ts.RoleArn = &v\n\treturn s\n}","label":0}
{"text":"public function query(string $sql, $bind = []): Result\n    {\n        $result = parent::query($sql, $bind);\n        return new Result($this->tableName, $result);\n    }","label":0}
{"text":"static protected function insertValueIntoStructureByPath(array $path, &$target, $value) {\n\t\t$segment = array_shift($path);\n\t\tif (count($path) > 0) {\n\t\t\tif (!array_key_exists($segment, $target)) {\n\t\t\t\t$target[$segment] = array();\n\t\t\t}\n\t\t\tself::insertValueIntoStructureByPath($path, $target[$segment], $value);\n\t\t} else {\n\t\t\t$target[$segment] = $value;\n\t\t}\n\t\tksort($target);\n\t}","label":0}
{"text":"public static function fromProtobuf($input, $object = NULL, &$start = 0, $end = NULL)\n\t{\n\t\tif ($object === null) {\n\t\t\t$object = new EnumDescriptorProto();\n\t\t}\n\n\t\tif ($end === null) {\n\t\t\t$end = strlen($input);\n\t\t}\n\n\t\twhile ($start < $end) {\n\t\t\t$tag = Binary::decodeVarint($input, $start);\n\t\t\t$wireType = $tag & 0x7;\n\t\t\t$number = $tag >> 3;\n\t\t\tswitch ($number) {\n\t\t\t\tcase 1:\n\t\t\t\t\tif ($wireType !== 2) {\n\t\t\t\t\t\tthrow new ProtobufException('Unexpected wire type ' . $wireType . ', expected 2.', $number);\n\t\t\t\t\t}\n\t\t\t\t\t$length = Binary::decodeVarint($input, $start);\n\t\t\t\t\t$expectedStart = $start + $length;\n\t\t\t\t\tif ($expectedStart > $end) {\n\t\t\t\t\t\tthrow new ProtobufException('Not enough data.');\n\t\t\t\t\t}\n\t\t\t\t\t$object->name = substr($input, $start, $length);\n\t\t\t\t\t$start += $length;\n\t\t\t\t\tif ($start !== $expectedStart) {\n\t\t\t\t\t\tthrow new ProtobufException('Unexpected start. Expected ' . $expectedStart . ', got ' . $start . '.', $number);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2:\n\t\t\t\t\tif ($wireType !== 2) {\n\t\t\t\t\t\tthrow new ProtobufException('Unexpected wire type ' . $wireType . ', expected 2.', $number);\n\t\t\t\t\t}\n\t\t\t\t\tif (!(isset($object->value) && is_array($object->value))) {\n\t\t\t\t\t\t$object->value = array();\n\t\t\t\t\t}\n\t\t\t\t\t$length = Binary::decodeVarint($input, $start);\n\t\t\t\t\t$expectedStart = $start + $length;\n\t\t\t\t\tif ($expectedStart > $end) {\n\t\t\t\t\t\tthrow new ProtobufException('Not enough data.');\n\t\t\t\t\t}\n\t\t\t\t\t$object->value[] = EnumValueDescriptorProtoMeta::fromProtobuf($input, null, $start, $start + $length);\n\t\t\t\t\tif ($start !== $expectedStart) {\n\t\t\t\t\t\tthrow new ProtobufException('Unexpected start. Expected ' . $expectedStart . ', got ' . $start . '.', $number);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 3:\n\t\t\t\t\tif ($wireType !== 2) {\n\t\t\t\t\t\tthrow new ProtobufException('Unexpected wire type ' . $wireType . ', expected 2.', $number);\n\t\t\t\t\t}\n\t\t\t\t\t$length = Binary::decodeVarint($input, $start);\n\t\t\t\t\t$expectedStart = $start + $length;\n\t\t\t\t\tif ($expectedStart > $end) {\n\t\t\t\t\t\tthrow new ProtobufException('Not enough data.');\n\t\t\t\t\t}\n\t\t\t\t\t$object->options = EnumOptionsMeta::fromProtobuf($input, null, $start, $start + $length);\n\t\t\t\t\tif ($start !== $expectedStart) {\n\t\t\t\t\t\tthrow new ProtobufException('Unexpected start. Expected ' . $expectedStart . ', got ' . $start . '.', $number);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tswitch ($wireType) {\n\t\t\t\t\t\tcase 0:\n\t\t\t\t\t\t\tBinary::decodeVarint($input, $start);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 1:\n\t\t\t\t\t\t\t$start += 8;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\t$start += Binary::decodeVarint($input, $start);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 5:\n\t\t\t\t\t\t\t$start += 4;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tthrow new ProtobufException('Unexpected wire type ' . $wireType . '.', $number);\n\t\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn $object;\n\t}","label":0}
{"text":"func (p *execProcess) TerminateNicely(killGracePeriod time.Duration) error {\n\t\/\/ Make sure process is being waited on for process state reaping to occur\n\t\/\/ as to avoid forcibly killing the process after killGracePeriod\n\tif p.waitCh == nil {\n\t\tpanic(\"TerminateNicely() must be called after Wait()\")\n\t}\n\n\terr := p.signalGroup(syscall.SIGTERM)\n\tif err != nil {\n\t\treturn bosherr.WrapErrorf(err, \"Sending SIGTERM to process group %d\", p.pgid)\n\t}\n\n\tterminatedCh := make(chan struct{})\n\tstopCheckingTerminatedCh := make(chan struct{})\n\n\tgo func() {\n\t\tfor p.groupExists() {\n\t\t\tselect {\n\t\t\tcase <-time.After(500 * time.Millisecond):\n\t\t\t\t\/\/ nothing to do\n\t\t\tcase <-stopCheckingTerminatedCh:\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\n\t\tclose(terminatedCh)\n\t}()\n\n\tselect {\n\tcase <-terminatedCh:\n\t\t\/\/ nothing to do\n\n\tcase <-time.After(killGracePeriod):\n\t\tclose(stopCheckingTerminatedCh)\n\n\t\terr = p.signalGroup(syscall.SIGKILL)\n\t\tif err != nil {\n\t\t\treturn bosherr.WrapErrorf(err, \"Sending SIGKILL to process group %d\", p.pgid)\n\t\t}\n\t}\n\n\t\/\/ It takes some time for the process to disappear\n\tfor i := 0; i < 20; i++ {\n\t\tif !p.groupExists() {\n\t\t\treturn nil\n\t\t}\n\t\ttime.Sleep(500 * time.Millisecond)\n\t}\n\n\treturn bosherr.Errorf(\"Failed to kill process after grace timeout (PID %d)\", p.pid)\n}","label":0}
{"text":"protected function dataToGlyphSet($data)\n    {\n        $glyphs = array();\n        foreach ($data->icons as $iconProperties) {\n            $glyphs[] = $iconProperties->properties->name;\n        }\n        return $glyphs;\n    }","label":0}
{"text":"def get_config(name, region=None, key=None, keyid=None, profile=None):\n    '''\n    \n    '''\n    conn = _get_conn(region=region, key=key, keyid=keyid, profile=profile)\n\n    if not conn:\n        return None\n    try:\n        cc = conn.describe_cache_clusters(name,\n                                          show_cache_node_info=True)\n    except boto.exception.BotoServerError as e:\n        msg = 'Failed to get config for cache cluster {0}.'.format(name)\n        log.error(msg)\n        log.debug(e)\n        return {}\n    cc = cc['DescribeCacheClustersResponse']['DescribeCacheClustersResult']\n    cc = cc['CacheClusters'][0]\n    ret = odict.OrderedDict()\n    attrs = ['engine', 'cache_parameter_group', 'cache_cluster_id',\n             'cache_security_groups', 'replication_group_id',\n             'auto_minor_version_upgrade', 'num_cache_nodes',\n             'preferred_availability_zone', 'security_groups',\n             'cache_subnet_group_name', 'engine_version', 'cache_node_type',\n             'notification_configuration', 'preferred_maintenance_window',\n             'configuration_endpoint', 'cache_cluster_status', 'cache_nodes']\n    for key, val in six.iteritems(cc):\n        _key = boto.utils.pythonize_name(key)\n        if _key not in attrs:\n            continue\n        if _key == 'cache_parameter_group':\n            if val:\n                ret[_key] = val['CacheParameterGroupName']\n            else:\n                ret[_key] = None\n        elif _key == 'cache_nodes':\n            if val:\n                ret[_key] = [k for k in val]\n            else:\n                ret[_key] = []\n        elif _key == 'cache_security_groups':\n            if val:\n                ret[_key] = [k['CacheSecurityGroupName'] for k in val]\n            else:\n                ret[_key] = []\n        elif _key == 'configuration_endpoint':\n            if val:\n                ret['port'] = val['Port']\n                ret['address'] = val['Address']\n            else:\n                ret['port'] = None\n                ret['address'] = None\n        elif _key == 'notification_configuration':\n            if val:\n                ret['notification_topic_arn'] = val['TopicArn']\n            else:\n                ret['notification_topic_arn'] = None\n        else:\n            ret[_key] = val\n    return ret","label":0}
{"text":"public function createRequest($method, $uri, array $headers = [], array $options = [])\n    {\n        $body = JsonRpc\\json_encode($this->addIdToRequest($method, $options));\n\n        return new Request('POST', $uri, $headers, $body === false ? null : $body);\n    }","label":0}
{"text":"@SafeVarargs\n  public static void assertInserted(String message, DataSet... dataSets) throws DBAssertionError {\n    multipleInsertAssertions(CallInfo.create(message), dataSets);\n  }","label":0}
{"text":"public static void generate(ConfigurationImpl configuration) {\n        PackageIndexFrameWriter packgen;\n        DocPath filename = DocPaths.OVERVIEW_FRAME;\n        try {\n            packgen = new PackageIndexFrameWriter(configuration, filename);\n            packgen.buildPackageIndexFile(\"doclet.Window_Overview\", false);\n            packgen.close();\n        } catch (IOException exc) {\n            configuration.standardmessage.error(\n                        \"doclet.exception_encountered\",\n                        exc.toString(), filename);\n            throw new DocletAbortException(exc);\n        }\n    }","label":0}
{"text":"function getConfig(macro, filename, source) {\n  if (macro.options.configName) {\n    try {\n      \/\/ lazy-loading it here to avoid perf issues of loading it up front.\n      \/\/ No I did not measure. Yes I'm a bad person.\n      \/\/ FWIW, this thing told me that cosmiconfig is 227.1 kb of minified JS\n      \/\/ so that's probably significant... https:\/\/bundlephobia.com\/result?p=cosmiconfig@3.1.0\n      \/\/ Note that cosmiconfig will cache the babel-plugin-macros config \ud83d\udc4d\n      const explorer = require('cosmiconfig')('babel-plugin-macros', {\n        searchPlaces: [\n          'package.json',\n          `.babel-plugin-macrosrc`,\n          `.babel-plugin-macrosrc.json`,\n          `.babel-plugin-macrosrc.yaml`,\n          `.babel-plugin-macrosrc.yml`,\n          `.babel-plugin-macrosrc.js`,\n          `babel-plugin-macros.config.js`,\n        ],\n        packageProp: 'babelMacros',\n        sync: true,\n      })\n      const loaded = explorer.searchSync(filename)\n      if (loaded) {\n        return loaded.config[macro.options.configName]\n      }\n    } catch (error) {\n      \/\/ eslint-disable-next-line no-console\n      console.error(\n        `There was an error trying to load the config \"${\n          macro.options.configName\n        }\" ` +\n          `for the macro imported from \"${source}. ` +\n          `Please see the error thrown for more information.`,\n      )\n      throw error\n    }\n  }\n}","label":0}
{"text":"public function signMerchantRequest($request) {\n\t\tif(!isset($this->merchant_privatekey)) {\n\t\t\tthrow new Trustly_SignatureException('No private key has been loaded for signing');\n\t\t}\n\n\t\t$method = $request->getMethod();\n\t\tif($method === NULL) {\n\t\t\t$method = '';\n\t\t}\n\t\t$uuid = $request->getUUID();\n\t\tif($uuid === NULL) {\n\t\t\t$uuid = '';\n\t\t}\n\n\t\t$data = $request->getData();\n\n\t\t$serial_data = $method . $uuid . $this->serializeData($data);\n\t\t$raw_signature = '';\n\n\t\t$this->clearOpenSSLError();\n\t\tif(openssl_sign($serial_data, $raw_signature, $this->merchant_privatekey, OPENSSL_ALGO_SHA1) === TRUE) {\n\t\t\treturn base64_encode($raw_signature);\n\t\t}\n\n\t\tthrow new Trustly_SignatureException('Failed to sign the outgoing merchant request. '. openssl_error_string());\n\t}","label":0}
{"text":"public function setType(string $value) : Job\n    {\n\n        if ($this->data['type'] !== $value) {\n            $this->data['type'] = $value;\n            $this->setModified('type');\n        }\n\n        return $this;\n    }","label":0}
{"text":"def create_data_table(self):\r\n        \"\"\"\"\"\"\r\n        self.dataTable = DataFrameView(self, self.dataModel,\r\n                                       self.table_header.horizontalHeader(),\r\n                                       self.hscroll, self.vscroll)\r\n        self.dataTable.verticalHeader().hide()\r\n        self.dataTable.horizontalHeader().hide()\r\n        self.dataTable.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOff)\r\n        self.dataTable.setVerticalScrollBarPolicy(Qt.ScrollBarAlwaysOff)\r\n        self.dataTable.setHorizontalScrollMode(QTableView.ScrollPerPixel)\r\n        self.dataTable.setVerticalScrollMode(QTableView.ScrollPerPixel)\r\n        self.dataTable.setFrameStyle(QFrame.Plain)\r\n        self.dataTable.setItemDelegate(QItemDelegate())\r\n        self.layout.addWidget(self.dataTable, 1, 1)\r\n        self.setFocusProxy(self.dataTable)\r\n        self.dataTable.sig_sort_by_column.connect(self._sort_update)\r\n        self.dataTable.sig_fetch_more_columns.connect(self._fetch_more_columns)\r\n        self.dataTable.sig_fetch_more_rows.connect(self._fetch_more_rows)","label":0}
{"text":"public function later($delay, $job, $data = '', $queue = null)\n    {\n        return $this->sqs->sendMessage([\n            'QueueUrl' => $this->getQueue($queue),\n            'MessageBody' => $this->createPayload($job, $queue ?: $this->default, $data),\n            'DelaySeconds' => $this->secondsUntil($delay),\n        ])->get('MessageId');\n    }","label":0}
{"text":"def _save_state(self):\n        \n        ns_prefixes_floating_in = copy.copy(self._ns_prefixes_floating_in)\n        ns_prefixes_floating_out = copy.copy(self._ns_prefixes_floating_out)\n        ns_decls_floating_in = copy.copy(self._ns_decls_floating_in)\n        curr_ns_map = copy.copy(self._curr_ns_map)\n        ns_map_stack = copy.copy(self._ns_map_stack)\n        pending_start_element = self._pending_start_element\n        ns_counter = self._ns_counter\n        # XXX: I have been unable to find a test justifying copying this :\/\n        # for completeness, I\u2019m still doing it\n        ns_auto_prefixes_floating_in = \\\n            copy.copy(self._ns_auto_prefixes_floating_in)\n        try:\n            yield\n        except:  # NOQA: E722\n            self._ns_prefixes_floating_in = ns_prefixes_floating_in\n            self._ns_prefixes_floating_out = ns_prefixes_floating_out\n            self._ns_decls_floating_in = ns_decls_floating_in\n            self._pending_start_element = pending_start_element\n            self._curr_ns_map = curr_ns_map\n            self._ns_map_stack = ns_map_stack\n            self._ns_counter = ns_counter\n            self._ns_auto_prefixes_floating_in = ns_auto_prefixes_floating_in\n            raise","label":0}
{"text":"public double get(int x, int y) {\n    return (x == y) ? 0 : (x < y) \/\/\n        ? matrix[MatrixParadigm.triangleSize(y) + x] \/\/\n        : matrix[MatrixParadigm.triangleSize(x) + y];\n  }","label":0}
{"text":"private function arrayFinder(string $propertyName, $find, Closure $finderClosure)\n    {\n        return $this->filter(function ($data) use ($find, $propertyName, $finderClosure) {\n            try {\n                $attributeValue = $data->{$propertyName};\n            } catch (\\Exception $e) {\n                $attributeValue = null;\n            }\n\n            return is_null($attributeValue)\n                ? null\n                : $finderClosure($find, $attributeValue, $data);\n        });\n    }","label":0}
{"text":"def get(self, obj, cls):\n    \n    method = self._cache.get(cls)\n    if not method:\n      name = \"visit_\" + cls.__name__.lower()\n      method = getattr(obj, name, obj.visit_default)\n      self._cache[cls] = method\n    return method","label":0}
{"text":"def statuses(self):\n        \n        r_json = self._get_json('status')\n        statuses = [Status(self._options, self._session, raw_stat_json)\n                    for raw_stat_json in r_json]\n        return statuses","label":0}
{"text":"public static function fetch( $query, $params = array(), $handler = null, $arguments = array( 'obj' ) ) \n\t{\n\t\treturn Handler::create( $handler )->fetch( $query, $params, $arguments );\n\t}","label":0}
{"text":"protected function parseThemes()\n    {\n        foreach ($this->themesDirs as $dir) {\n            $absDir = $this->fileLocator->locate($dir);\n            $finder = Finder::create()->files()->in($absDir)->name('*.css');\n            foreach ($finder as $file) {\n                $this->addTheme($file->getBasename('.css'), $file->getPathname());\n            }\n        }\n        #save to cache if env prod\n        if ($this->env == 'prod') {\n            $this->cacheDriver->save(static::CACHE_THEMES_NAME, $this->getThemes());\n        }\n    }","label":0}
{"text":"private static HashSet<String> parseExcludeFilter(List<Filter> customFilters) {\n        HashSet<String> excludeKeys = new HashSet<String>();\n        if (CommonUtils.isNotEmpty(customFilters)) {\n            for (Filter filter : customFilters) {\n                if (filter instanceof ExcludeFilter) {\n                    \/\/ \u5b58\u5728\u9700\u8981\u6392\u9664\u7684\u8fc7\u6ee4\u5668\n                    ExcludeFilter excludeFilter = (ExcludeFilter) filter;\n                    String excludeName = excludeFilter.getExcludeName();\n                    if (StringUtils.isNotEmpty(excludeName)) {\n                        String excludeFilterName = startsWithExcludePrefix(excludeName) ?\n                            excludeName.substring(1)\n                            : excludeName;\n                        if (StringUtils.isNotEmpty(excludeFilterName)) {\n                            excludeKeys.add(excludeFilterName);\n                        }\n                    }\n                    customFilters.remove(filter);\n                }\n            }\n        }\n        if (!excludeKeys.isEmpty()) {\n            if (LOGGER.isInfoEnabled()) {\n                LOGGER.info(\"Find exclude filters: {}\", excludeKeys);\n            }\n        }\n        return excludeKeys;\n    }","label":0}
{"text":"func LookupString(i interface{}, path string) (reflect.Value, error) {\n\treturn Lookup(i, strings.Split(path, SplitToken)...)\n}","label":0}
{"text":"public String[] nameToUrls(final String name) throws IOException {\n\n\t\tNameValuePair[] args = {\n\t\t\t\tnew NameValuePair(\n\t\t\t\t\t\tResourceFileLocationDBServlet.OPERATION_ARGUMENT,\n\t\t\t\t\t\tResourceFileLocationDBServlet.LOOKUP_OPERATION),\n\t\t\t\t\t\n\t\t\t\tnew NameValuePair(\n\t\t\t\t\t\tResourceFileLocationDBServlet.NAME_ARGUMENT,\n\t\t\t\t\t\tname)\n\t\t};\n\t\tString locations = doGetMethod(args);\n\t\tif(locations != null) {\n\t\t\treturn locations.split(\"\\n\");\n\t\t}\n\t\treturn null;\n\t}","label":0}
{"text":"private static function matchItem($string, $items)\n    {\n        $decoded = json_decode($string, true);\n\n        foreach ($items as $key => $val) {\n            # class name only  ex: item[0] = ['class']\n            if (is_numeric($key)) {\n                if ($decoded['class'] == $val) {\n                    return true;\n                }\n                # class name with args , example: item[0] = ['class' => {'foo' => 1, 'bar' => 2}]\n            } elseif (is_array($val)) {\n                $decodedArgs = (array)$decoded['args'][0];\n                if ($decoded['class'] == $key &&\n                    count($decodedArgs) > 0 && count(array_diff($decodedArgs, $val)) == 0\n                ) {\n                    return true;\n                }\n                # class name with ID, example: item[0] = ['class' => 'id']\n            } else {\n                if ($decoded['class'] == $key && $decoded['id'] == $val) {\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }","label":0}
{"text":"def auto_cleaned_path(instance, filename: str) -> str:\n    \n    stem, suffix = parse_filename(filename)\n    base_dir = get_base_dir_from_object(instance)\n    target_filename = get_safe_path_name(stem)\n\n    return os.path.join(base_dir, \"{target_filename}{suffix}\".format(target_filename=target_filename,\n                                                                     suffix=suffix))","label":0}
{"text":"public Integer getExpirationCache()\n   {\n      if (childNode.getTextValueForPatternName(\"expiration-cache\") != null && !childNode.getTextValueForPatternName(\"expiration-cache\").equals(\"null\")) {\n         return Integer.valueOf(childNode.getTextValueForPatternName(\"expiration-cache\"));\n      }\n      return null;\n   }","label":0}
{"text":"func NewGetHello(ctx *middleware.Context, handler GetHelloHandler) *GetHello {\n\treturn &GetHello{Context: ctx, Handler: handler}\n}","label":0}
{"text":"@Pure\n\tpublic static <T> TreeSet<T> newTreeSet(Comparator<? super T> comparator) {\n\t\treturn new TreeSet<T>(comparator);\n\t}","label":0}
{"text":"protected function createAdapter(string $adapter, array $config): Adapter\n    {\n        if ($adapter === 'Local') {\n            if (! isset($config['config']['path'])) {\n                throw new RuntimeException('Filesystem local adapter must set `path`');\n            }\n\n            $config = [$config['config']['path']];\n        }\n\n        return Reflection::newInstance(\n            'One\\\\FileSystem\\\\Adapters\\\\' . $adapter,\n            $config\n        );\n    }","label":0}
{"text":"func (a *MetricsAPIInstaller) NewWebService() *restful.WebService {\n\tws := new(restful.WebService)\n\tws.Path(a.prefix)\n\t\/\/ a.prefix contains \"prefix\/group\/version\"\n\tws.Doc(\"API at \" + a.prefix)\n\t\/\/ Backwards compatibility, we accepted objects with empty content-type at V1.\n\t\/\/ If we stop using go-restful, we can default empty content-type to application\/json on an\n\t\/\/ endpoint by endpoint basis\n\tws.Consumes(\"*\/*\")\n\tmediaTypes, streamMediaTypes := negotiation.MediaTypesForSerializer(a.group.Serializer)\n\tws.Produces(append(mediaTypes, streamMediaTypes...)...)\n\tws.ApiVersion(a.group.GroupVersion.String())\n\n\treturn ws\n}","label":0}
{"text":"def _convert_angle_limit(angle, joint, **kwargs):\n    \"\"\"\"\"\"\n    angle_pypot = angle\n\n    # No need to take care of orientation\n    if joint[\"orientation\"] == \"indirect\":\n        angle_pypot = 1 * angle_pypot\n\n    # angle_pypot = angle_pypot + offset\n\n    return angle_pypot * np.pi \/ 180","label":0}
{"text":"def render(self, *args, **kwargs):\n        '''\n        \n        '''\n\n        uid_with_str = args[0]\n\n        slug = kwargs.get('slug', False)\n\n        with_title = kwargs.get('with_title', False)\n\n        glyph = kwargs.get('glyph', '')\n\n        kwd = {\n            'glyph': glyph\n        }\n        curinfo = MCategory.get_by_uid(uid_with_str)\n\n        sub_cats = MCategory.query_sub_cat(uid_with_str)\n\n        if slug:\n            tmpl = 'modules\/info\/catalog_slug.html'\n\n        else:\n            tmpl = 'modules\/info\/catalog_of.html'\n        return self.render_string(tmpl,\n                                  pcatinfo=curinfo,\n                                  sub_cats=sub_cats,\n                                  recs=sub_cats,\n                                  with_title=with_title,\n                                  kwd=kwd)","label":0}
{"text":"def WriteClientMetadata(self,\n                          client_id,\n                          certificate=None,\n                          fleetspeak_enabled=None,\n                          first_seen=None,\n                          last_ping=None,\n                          last_clock=None,\n                          last_ip=None,\n                          last_foreman=None):\n    \"\"\"\"\"\"\n    md = {}\n    if certificate is not None:\n      md[\"certificate\"] = certificate\n\n    if fleetspeak_enabled is not None:\n      md[\"fleetspeak_enabled\"] = fleetspeak_enabled\n\n    if first_seen is not None:\n      md[\"first_seen\"] = first_seen\n\n    if last_ping is not None:\n      md[\"ping\"] = last_ping\n\n    if last_clock is not None:\n      md[\"clock\"] = last_clock\n\n    if last_ip is not None:\n      md[\"ip\"] = last_ip\n\n    if last_foreman is not None:\n      md[\"last_foreman_time\"] = last_foreman\n\n    if not md:\n      raise ValueError(\"NOOP write.\")\n\n    self.metadatas.setdefault(client_id, {}).update(md)","label":0}
{"text":"func (u *Ugen) Ring4(val Input) Input {\n\treturn binOpRing4(u.Rate, u, val, u.NumOutputs)\n}","label":0}
{"text":"public void start() throws Exception {\n    \/\/ Disable HDFS client caching to avoid file system close() affecting other clients\n    System.setProperty(\"fs.hdfs.impl.disable.cache\", \"true\");\n\n    resetClientPools();\n\n    setupTest();\n    startMasters();\n    startWorkers();\n    startProxy();\n\n    \/\/ Reset contexts so that they pick up the updated configuration.\n    reset();\n  }","label":0}
{"text":"public function printScript()\n    {\n        foreach ($this->scripts as $key => $options) {\n            $src = (is_string($options['src'])) ? $options['src'] : $this->getScriptLink($key);\n            if ($options['with_version']) {\n                $src = call_user_func_array($this->assetInsertMethod, [$src, $this->assetVersion]);\n            }\n            echo \"<script type='text\/javascript' src='$src'><\/script>\\n\";\n        }\n        $this->printInlineScript();\n    }","label":0}
{"text":"func (s *snapshot) Persist(sink raft.SnapshotSink) error {\n\tdefer metrics.MeasureSince([]string{\"fsm\", \"persist\"}, time.Now())\n\n\t\/\/ Write the header\n\theader := snapshotHeader{\n\t\tLastIndex: s.state.LastIndex(),\n\t}\n\tencoder := codec.NewEncoder(sink, msgpackHandle)\n\tif err := encoder.Encode(&header); err != nil {\n\t\tsink.Cancel()\n\t\treturn err\n\t}\n\n\t\/\/ Run all the persisters to write the FSM state.\n\tfor _, fn := range persisters {\n\t\tif err := fn(s, sink, encoder); err != nil {\n\t\t\tsink.Cancel()\n\t\t\treturn err\n\t\t}\n\t}\n\treturn nil\n}","label":0}
{"text":"public void marshall(StopLoggingRequest stopLoggingRequest, ProtocolMarshaller protocolMarshaller) {\n\n        if (stopLoggingRequest == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(stopLoggingRequest.getName(), NAME_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }","label":0}
{"text":"private function getServiceSchema($service)\n    {\n        $operation = $service->getOperation();\n        $schema = new \\stdClass();\n        switch (strtolower($service->getMethod())) {\n            case \"post\":\n            case \"put\":\n                try {\n                    $parameters = $operation->getDocumentObjectProperty('parameters', Parameter\\Body::class, true);\n                } catch (MissingDocumentPropertyException $e) {\n                    \/\/ request has no params\n                    break;\n                }\n                foreach ($parameters as $parameter) {\n                    \/**\n                     * there is no schema information available, if $action->parameters[0]->in != 'body'\n                     *\n                     * @link http:\/\/swagger.io\/specification\/#parameterObject\n                     *\/\n                    if ($parameter instanceof Parameter\\Body && $parameter->getIn() === 'body') {\n                        $ref = $parameter->getDocumentObjectProperty('schema', Reference::class)->getDocument();\n                        $schema = $this->resolveSchema($ref);\n                        break;\n                    }\n                }\n                break;\n            case \"get\":\n                try {\n                    $response = $operation->getResponses()->getHttpStatusCode(200);\n                } catch (MissingDocumentPropertyException $e) {\n                    \/\/ no response with status code 200 is defined\n                    break;\n                }\n                $schema = $this->resolveSchema($response->getSchema()->getDocument());\n                break;\n        }\n\n        return $schema;\n    }","label":0}
{"text":"public function toDatatablesJSONString() {\n\t\t$return_object_array = [ ];\n\t\t$fields = $this->getFields ();\n\t\tforeach ( $fields as $field ) {\n\t\t\t$value = call_user_func ( array (\n\t\t\t\t\t$this,\n\t\t\t\t\t'get' . $field \n\t\t\t) );\n\t\t\tif ($value instanceof \\DateTime) {\n\t\t\t\t$value = $value->format ( 'Y-m-d' );\n\t\t\t}\n\t\t\tarray_push ( $return_object_array, array (\n\t\t\t\t\t$field => $value \n\t\t\t) );\n\t\t}\n\t\treturn json_encode ( $this );\n\t}","label":0}
{"text":"func (c *Client) UpdateUser(user User) (updateTime time.Time, err error) {\n\tpayload, err := json.Marshal(user)\n\turi := fmt.Sprintf(\"\/1\/users\/%s\", user.ObjectID())\n\tresp, err := c.doWithBody(\"PUT\", uri, bytes.NewReader(payload))\n\tlog.Println(\"OI\", string(payload))\n\tc.trace(\"UpdateUser >\", uri, string(payload))\n\tif err != nil {\n\t\treturn updateTime, err\n\t}\n\tdefer resp.Body.Close()\n\tbody, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn updateTime, err\n\t}\n\tc.trace(\"UpdateUser < \", uri, string(body))\n\tupdatedAt := &struct {\n\t\tTime time.Time `json:\"updatedAt\"`\n\t}{}\n\terr = json.Unmarshal(body, updatedAt)\n\treturn updatedAt.Time, err\n}","label":0}
{"text":"@Override\n\tpublic void onAdd(Response response) {\n\t\tString message = gson.toJson(response);\n\t\t\n\t\ttry {\n\t\t\tRabbitMqUtils.sendMessage(message, buildQueueNames(response), environment);\n\t\t} catch (IOException e) {\n\t\t\tlogger.error(\"Failed to send response message to output queue.\", e);\n\t\t}\n\t}","label":0}
{"text":"public function addCondition($recordField, $operator, $value)\n    {\n        $this->conditions[] = [\n            $recordField,\n            $operator,\n            $value\n        ];\n        return $this;\n    }","label":0}
{"text":"def founditem_modify_view(request, item_id=None):\n    \n    if request.method == \"POST\":\n        founditem = get_object_or_404(FoundItem, id=item_id)\n        form = FoundItemForm(request.POST, instance=founditem)\n        if form.is_valid():\n            obj = form.save()\n            logger.debug(form.cleaned_data)\n            # SAFE HTML\n            obj.description = safe_html(obj.description)\n            obj.save()\n            messages.success(request, \"Successfully modified found item.\")\n            return redirect(\"founditem_view\", obj.id)\n        else:\n            messages.error(request, \"Error adding found item.\")\n    else:\n        founditem = get_object_or_404(FoundItem, id=item_id)\n        form = FoundItemForm(instance=founditem)\n\n    context = {\"form\": form, \"action\": \"modify\", \"id\": item_id, \"founditem\": founditem}\n    return render(request, \"lostfound\/founditem_form.html\", context)","label":0}
{"text":"@Deprecated\n    public void setDitadir(final File ditaDir) {\n        if (!ditaDir.isAbsolute()) {\n            throw new IllegalArgumentException(\"ditadir attribute value must be an absolute path: \" + ditaDir);\n        }\n        this.ditaDir = ditaDir;\n    }","label":0}
{"text":"public String wrap(String text) {\n        StringBuilder sb = new StringBuilder();\n        int continuationLength = continuation.length();\n        int currentPosition = 0;\n\n        for (String word : text.split(\" \")) {\n            String lastWord;\n            int wordLength = word.length();\n\n            if (currentPosition + wordLength <= width) {\n                if (currentPosition != 0) {\n                    sb.append(\" \");\n                    currentPosition += 1;\n                }\n\n                sb.append(lastWord = word);\n                currentPosition += wordLength;\n            } else {\n                if (currentPosition > 0) {\n                    sb.append(LINE_SEPARATOR);\n                    currentPosition = 0;\n                }\n\n                if (wordLength > width && strict) {\n                    int i = 0;\n                    while (i + width < wordLength) {\n                        sb.append(word.substring(i, width - continuationLength)).append(continuation)\n                                .append(LINE_SEPARATOR);\n                        i += width - continuationLength;\n                    }\n                    String endOfWord = word.substring(i);\n                    sb.append(lastWord = endOfWord);\n                    currentPosition = endOfWord.length();\n                } else {\n                    sb.append(lastWord = word);\n                    currentPosition += wordLength;\n                }\n            }\n\n            int lastNewLine = lastWord.lastIndexOf(\"\\n\");\n            if (lastNewLine != -1) {\n                currentPosition = lastWord.length() - lastNewLine;\n            }\n        }\n\n        return sb.toString();\n    }","label":0}
{"text":"func (b *BackupEngineInfo) GetNumFiles(index int) int32 {\n\treturn int32(C.rocksdb_backup_engine_info_number_files(b.c, C.int(index)))\n}","label":0}
{"text":"private Node getParentNode(Node node) {\n\n\t\tif (node == null || node == root)\n\t\t\treturn null;\n\n\t\tNode newNode = node.getParentNode();\n\t\tif (newNode == null)\n\t\t\treturn null;\n\n\t\tint accept = acceptNode(newNode);\n\n\t\tif (accept == NodeFilter.FILTER_ACCEPT)\n\t\t\treturn newNode;\n\t\telse\n\t\t\t\/\/ if (accept == NodeFilter.SKIP_NODE)\n\t\t\t\/\/ and REJECT too.\n\t\t\treturn getParentNode(newNode);\n\n\t}","label":0}
{"text":"public function unions(): self\n    {\n        $sequence = $this\n            ->sorted([$this, 'sortByStartDate'])\n            ->reduce([$this, 'calculateUnion'], new self())\n        ;\n\n        if ($sequence->intervals === $this->intervals) {\n            return $this;\n        }\n\n        return $sequence;\n    }","label":0}
{"text":"public function isRefunded($allowPartialRefunds = true)\n    {\n        if ($this->data['paymentDetails']['stateName'] === 'REFUND') {\n            return true;\n        }\n\n        if ($allowPartialRefunds && $this->data['paymentDetails']['stateName'] === 'PARTIAL_REFUND') {\n            return true;\n        }\n\n        return false;\n    }","label":0}
{"text":"private void invalidateSync() {\n        Log.d(\"AndroidClockSync\", \"Starting sync...\");\n        new Thread() {\n            @Override\n            public void run() {\n                SntpClient client = new SntpClient();\n                ExponentialBackoff exponentialBackoff = new ExponentialBackoff();\n                while (!client.requestTime(serverHost, 10000)) {\n                    exponentialBackoff.onFailure();\n                    try {\n                        Thread.sleep(exponentialBackoff.exponentialWait());\n                    } catch (InterruptedException e) {\n                        e.printStackTrace();\n                    }\n                }\n                syncDelta = client.getClockOffset();\n                preference.edit().putLong(\"delta\", syncDelta).commit();\n                Log.d(\"AndroidClockSync\", \"Synced. Time delta: \" + syncDelta + \" ms\");\n            }\n        }.start();\n    }","label":0}
{"text":"def string_id(self):\n    \n    id = self.id()\n    if not isinstance(id, basestring):\n      id = None\n    return id","label":0}
{"text":"function mergeTitle( elem ) {\n\t\tmerge( elem, function( old ) {\n\t\t\tvar text = elem.children[ 0 ];\n\n\t\t\tutils.replaceElement( old.children[ 0 ], text );\n\t\t\told.children[ 0 ] = text;\n\t\t} );\n\t}","label":0}
{"text":"protected function parseDirective()\n    {\n        $start = $this->token->getStart();\n        $this->expect(Token::AT_TYPE);\n\n        return new Directive(\n            $this->parseName(),\n            $this->parseArguments(),\n            $this->location($start)\n        );\n    }","label":0}
{"text":"def recursive_children\n      self.children.each do |child|\n        if Parser::AST::Node === child\n          yield child\n          child.recursive_children { |c| yield c }\n        end\n      end\n    end","label":0}
{"text":"public List<CouchDbMultifactorAuthenticationTrustRecord> findOnOrAfterDate(final LocalDateTime onOrAfterDate) {\n        return db.queryView(createQuery(\"by_recordDate\").startKey(onOrAfterDate), CouchDbMultifactorAuthenticationTrustRecord.class);\n    }","label":0}
{"text":"func (prc *RotateProcessor) Change(params imageserver.Params) bool {\n\tif !params.Has(rotateParam) {\n\t\treturn false\n\t}\n\tparams, err := params.GetParams(rotateParam)\n\tif err != nil {\n\t\treturn true\n\t}\n\tif params.Empty() {\n\t\treturn false\n\t}\n\tif params.Has(\"rotation\") {\n\t\treturn true\n\t}\n\treturn false\n}","label":0}
{"text":"public static Message buildDelivered(Zxid deliveredZxid) {\n    ZabMessage.Zxid zxid = toProtoZxid(deliveredZxid);\n    ZabMessage.Delivered delivered =\n      ZabMessage.Delivered.newBuilder().setZxid(zxid).build();\n    return Message.newBuilder().setType(MessageType.DELIVERED)\n                               .setDelivered(delivered).build();\n  }","label":0}
{"text":"public ConnectionOptions withAddresses(String addresses) {\n    this.addresses = Address.parseAddresses(Assert.notNull(addresses, \"addresses\"));\n    return this;\n  }","label":0}
{"text":"func (q *FunctionScoreQuery) Query(query Query) *FunctionScoreQuery {\n\tq.query = query\n\treturn q\n}","label":0}
{"text":"func (s *DescribeConfigurationOutput) SetEngineType(v string) *DescribeConfigurationOutput {\n\ts.EngineType = &v\n\treturn s\n}","label":0}
{"text":"public function set($attribute, $value)\n    {\n        if ($value === [] || $value === '' || $value === null) {\n            return $this->reset($attribute);\n        }\n\n        if ($this->has($attribute)) {\n            $attribute = $this->resolveAttributeName($attribute);\n            $this->attributes[$attribute] = $value;\n        } else {\n            $this->attributes[$attribute] = $value;\n        }\n        $this->batches->add(new Batch(Batch::TYPE['REPLACE'], $attribute, $value));\n\n        return $this;\n    }","label":0}
{"text":"def BGPNeighborPrefixExceeded_neighborPrefixLimit(self, **kwargs):\n        \n        config = ET.Element(\"config\")\n        BGPNeighborPrefixExceeded = ET.SubElement(config, \"BGPNeighborPrefixExceeded\", xmlns=\"http:\/\/brocade.com\/ns\/brocade-notification-stream\")\n        neighborPrefixLimit = ET.SubElement(BGPNeighborPrefixExceeded, \"neighborPrefixLimit\")\n        neighborPrefixLimit.text = kwargs.pop('neighborPrefixLimit')\n\n        callback = kwargs.pop('callback', self._callback)\n        return callback(config)","label":0}
{"text":"public void multipleDeleteEntities(String keyName1, String keyName2) {\n    Datastore datastore = transaction.getDatastore();\n    \/\/ [START multipleDeleteEntities]\n    Key key1 = datastore.newKeyFactory().setKind(\"MyKind\").newKey(keyName1);\n    Key key2 = datastore.newKeyFactory().setKind(\"MyKind\").newKey(keyName2);\n    transaction.delete(key1, key2);\n    transaction.commit();\n    \/\/ [END multipleDeleteEntities]\n  }","label":0}
{"text":"function _callFn(callQueue, target){\n        var result = null;\n        \n        callQueue = callQueue.reverse();\n        baidu.each(callQueue, function(item){\n            result = target.call(item.fnName, item.params);\n            item.callBack(result);\n        });\n    }","label":0}
{"text":"public function getLongVersion()\n    {\n        $output = '';\n\n        if ('UNKNOWN' !== $this->getName()) {\n            if ('UNKNOWN' !== $this->getVersion()) {\n                $output .= sprintf('<info>%s<\/info> version <comment>%s<\/comment>', $this->getName(), $this->getVersion());\n            } else {\n                $output .= sprintf('<info>%s<\/info>', $this->getName());\n            }\n        } else {\n            $output .= '<info>Drupal Console<\/info>';\n        }\n\n        return $output;\n    }","label":0}
{"text":"func (rdb RethinkDBKeyStore) RotateKeyPassphrase(keyID, newPassphraseAlias string) error {\n\tdbPrivateKey, decryptedPrivKey, err := rdb.getKey(keyID)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t\/\/ Get the new passphrase to use for this key\n\tnewPassphrase, _, err := rdb.retriever(dbPrivateKey.KeyID, newPassphraseAlias, false, 1)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t\/\/ Re-encrypt the private bytes with the new passphrase\n\tnewEncryptedKey, err := jose.Encrypt(decryptedPrivKey, KeywrapAlg, EncryptionAlg, newPassphrase)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t\/\/ Update the database object\n\tdbPrivateKey.Private = []byte(newEncryptedKey)\n\tdbPrivateKey.PassphraseAlias = newPassphraseAlias\n\tif _, err := gorethink.DB(rdb.dbName).Table(dbPrivateKey.TableName()).Get(keyID).Update(dbPrivateKey).RunWrite(rdb.sess); err != nil {\n\t\treturn err\n\t}\n\n\treturn nil\n}","label":0}
{"text":"protected <T extends Number> Gauge<T> createColumnFamilyGauge(final String name, Gauge<T> gauge)\n    {\n        return createColumnFamilyGauge(name, gauge, new Gauge<Long>()\n        {\n            public Long value()\n            {\n                long total = 0;\n                for (Metric cfGauge : allColumnFamilyMetrics.get(name))\n                {\n                    total = total + ((Gauge<? extends Number>) cfGauge).value().longValue();\n                }\n                return total;\n            }\n        });\n    }","label":0}
{"text":"func getNextBuildNameFromBuild(build *buildv1.Build, buildConfig *buildv1.BuildConfig) string {\n\tvar buildName string\n\tif buildConfig != nil {\n\t\treturn getNextBuildName(buildConfig)\n\t}\n\t\/\/ for builds created by hand, append a timestamp when cloning\/rebuilding them\n\t\/\/ because we don't have a sequence number to bump.\n\tbuildName = build.Name\n\t\/\/ remove the old timestamp if we're cloning a build that is itself a clone.\n\tif matched, _ := regexp.MatchString(`^.+-\\d{10}$`, buildName); matched {\n\t\tnameElems := strings.Split(buildName, \"-\")\n\t\tbuildName = strings.Join(nameElems[:len(nameElems)-1], \"-\")\n\t}\n\tsuffix := fmt.Sprintf(\"%v\", metav1.Now().UnixNano())\n\tif len(suffix) > 10 {\n\t\tsuffix = suffix[len(suffix)-10:]\n\t}\n\treturn apihelpers.GetName(buildName, suffix, kvalidation.DNS1123SubdomainMaxLength)\n\n}","label":0}
{"text":"protected function httpProcessHeaders()\n    {\n        $this->req->attrs->paramsDone = true;\n        if (isset($this->req->attrs->server['HTTP_CONNECTION'])\n            && preg_match('~(?:^|\\W)Upgrade(?:\\W|$)~i', $this->req->attrs->server['HTTP_CONNECTION'])\n            && isset($this->req->attrs->server['HTTP_UPGRADE'])\n            && (strtolower($this->req->attrs->server['HTTP_UPGRADE']) === 'websocket')\n        ) {\n            if ($this->pool->WS) {\n                $this->pool->WS->inheritFromRequest($this->req, $this);\n            }\n            return false;\n        }\n\n        $this->req = Daemon::$appResolver->getRequest(\n            $this->req,\n            $this,\n            isset($this->pool->config->responder->value) ? $this->pool->config->responder->value : null\n        );\n\n        if ($this->req instanceof \\stdClass) {\n            $this->endRequest($this->req, 0, 0);\n            return false;\n        } else {\n            if ($this->pool->config->sendfile->value\n                && (!$this->pool->config->sendfileonlybycommand->value || isset($this->req->attrs->server['USE_SENDFILE']))\n                && !isset($this->req->attrs->server['DONT_USE_SENDFILE'])\n            ) {\n                $req = $this->req;\n\n                FileSystem::tempnam(\n                    $this->pool->config->sendfiledir->value,\n                    $this->pool->config->sendfileprefix->value,\n                    function ($fn) use ($req) {\n                        FileSystem::open($fn, 'wb', function ($file) use ($req) {\n                            $req->sendfp = $file;\n                        });\n                        $req->header('X-Sendfile: ' . $fn);\n                    }\n                );\n            }\n            $this->req->callInit();\n        }\n        return true;\n    }","label":0}
{"text":"public function log404($notifyAdminOnInternalErrors = false) {\n\t\tif ($this->Controller->name === 'CakeError') {\n\t\t\t$referer = $this->Controller->referer();\n\t\t\t$this->Controller->log('REF: ' . $referer . ' - URL: ' . $this->Controller->request->url, '404');\n\t\t}\n\t}","label":0}
{"text":"def script_dup\n      r = \"require 'fileutils'\\n\"\n      duplicates.each do |entries|\n        flg_first = true\n        r += \"\\n\"\n        entries.each do |entry|\n          src = File.join(@dirname, entry.path, entry.name)\n          if flg_first\n            flg_first = false\n            r += \"# FileUtils.mv( \\\"#{src}\\\", \\\"#{Dir.tmpdir}\\\" )\\n\"\n          else\n            r += \"FileUtils.mv( \\\"#{src}\\\", \\\"#{Dir.tmpdir}\\\" )\\n\"\n          end\n        end\n      end\n      r\n    end","label":0}
{"text":"func (en *en_SX) WeekdayShort(weekday time.Weekday) string {\n\treturn en.daysShort[weekday]\n}","label":0}
{"text":"def get_client(self, email=None, password=None, **__):\n        \"\"\"\"\"\"\n        if self.client is not None:\n            return self.client\n        return Auth(email, password)","label":0}
{"text":"public BoxStoragePolicyAssignment.Info assign(String userID) {\n        return BoxStoragePolicyAssignment.assign(this.getAPI(), this.getID(), userID);\n    }","label":0}
{"text":"public function channelPermAssign($cid, $permid, $permvalue)\n  {\n    if(!is_array($permid))\n    {\n      $permident = (is_numeric($permid)) ? \"permid\" : \"permsid\";\n    }\n    else\n    {\n      $permident = (is_numeric(current($permid))) ? \"permid\" : \"permsid\";\n    }\n\n    $this->execute(\"channeladdperm\", array(\"cid\" => $cid, $permident => $permid, \"permvalue\" => $permvalue));\n  }","label":0}
{"text":"func (a *Aggregator) AddEvent(event *log.Event, id, fingerprint string) {\n\tif a.rateLimit != event.RateLimit {\n\t\ta.rateLimit = event.RateLimit\n\t}\n\n\toutlier := false\n\tif a.outlierTime > 0 && event.TimeMetrics[\"Query_time\"] > a.outlierTime {\n\t\toutlier = true\n\t}\n\n\ta.global.AddEvent(event, outlier)\n\n\tclass, ok := a.classes[id]\n\tif !ok {\n\t\tclass = NewClass(id, fingerprint, a.samples)\n\t\ta.classes[id] = class\n\t}\n\tclass.AddEvent(event, outlier)\n}","label":0}
{"text":"def register(name, func=None):\n    \n\n    def decorator(func):\n        # Perform the registration\n        ControlDaemon._register(name, func)\n        return func\n\n    # If func was given, call the decorator, otherwise, return the\n    # decorator\n    if func:\n        return decorator(func)\n    else:\n        return decorator","label":0}
{"text":"def WriteFlowResults(self, results):\n    \"\"\"\"\"\"\n    for r in results:\n      dest = self.flow_results.setdefault((r.client_id, r.flow_id), [])\n      to_write = r.Copy()\n      to_write.timestamp = rdfvalue.RDFDatetime.Now()\n      dest.append(to_write)","label":0}
{"text":"func LikelySchemaBlob(buf []byte) bool {\n\tif len(buf) == 0 || buf[0] != '{' {\n\t\treturn false\n\t}\n\treturn bytes.Contains(buf, bytesCamliVersion)\n}","label":0}
{"text":"def getEnvironmentFromNameAndProtocol(studyname, protocolname):\n    \n    # StudyName =    \"TEST (1) (DEV)\"\n    # ProtocolName = \"TEST (1)\"\n    # Raw Env      =           \"(DEV)\"\n\n    raw_env = studyname[len(protocolname) :].strip()\n\n    if \"(\" in raw_env:\n        l_brace_pos = raw_env.rfind(\"(\")\n        r_brace_pos = raw_env.rfind(\")\")\n        return raw_env[l_brace_pos + 1 : r_brace_pos]\n    else:\n        return raw_env","label":0}
{"text":"public function getEventPrefix() {\n    static $prefix;\n    if (!$prefix) {\n      if (defined(static::class.'::EVENT_PREFIX'))\n        $prefix = static::EVENT_PREFIX;\n      else\n        $prefix = strtolower(array_slice(explode('\\\\', static::class), -1)[0]);\n    }\n    return $prefix;\n  }","label":0}
{"text":"public ICommandBehavior getCommand(final String commandName) {\n        return dynamicCommands.get(commandName.toLowerCase(Locale.ENGLISH)).getBehavior();\n    }","label":0}
{"text":"public void combine(IntSummaryStatistics other) {\n        count += other.count;\n        sum += other.sum;\n        min = Math.min(min, other.min);\n        max = Math.max(max, other.max);\n    }","label":0}
{"text":"func (w *SegmentWAL) Truncate(mint int64, keep func(uint64) bool) error {\n\t\/\/ The last segment is always active.\n\tif len(w.files) < 2 {\n\t\treturn nil\n\t}\n\tvar candidates []*segmentFile\n\n\t\/\/ All files have to be traversed as there could be two segments for a block\n\t\/\/ with first block having times (10000, 20000) and SECOND one having (0, 10000).\n\tfor _, sf := range w.files[:len(w.files)-1] {\n\t\tif sf.maxTime >= mint {\n\t\t\tbreak\n\t\t}\n\t\t\/\/ Past WAL files are closed. We have to reopen them for another read.\n\t\tf, err := w.openSegmentFile(sf.Name())\n\t\tif err != nil {\n\t\t\treturn errors.Wrap(err, \"open old WAL segment for read\")\n\t\t}\n\t\tcandidates = append(candidates, &segmentFile{\n\t\t\tFile:      f,\n\t\t\tminSeries: sf.minSeries,\n\t\t\tmaxTime:   sf.maxTime,\n\t\t})\n\t}\n\tif len(candidates) == 0 {\n\t\treturn nil\n\t}\n\n\tr := newWALReader(candidates, w.logger)\n\n\t\/\/ Create a new tmp file.\n\tf, err := w.createSegmentFile(filepath.Join(w.dirFile.Name(), \"compact.tmp\"))\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"create compaction segment\")\n\t}\n\tdefer func() {\n\t\tif err := os.RemoveAll(f.Name()); err != nil {\n\t\t\tlevel.Error(w.logger).Log(\"msg\", \"remove tmp file\", \"err\", err.Error())\n\t\t}\n\t}()\n\n\tvar (\n\t\tcsf          = newSegmentFile(f)\n\t\tcrc32        = newCRC32()\n\t\tdecSeries    = []RefSeries{}\n\t\tactiveSeries = []RefSeries{}\n\t)\n\n\tfor r.next() {\n\t\trt, flag, byt := r.at()\n\n\t\tif rt != WALEntrySeries {\n\t\t\tcontinue\n\t\t}\n\t\tdecSeries = decSeries[:0]\n\t\tactiveSeries = activeSeries[:0]\n\n\t\terr := r.decodeSeries(flag, byt, &decSeries)\n\t\tif err != nil {\n\t\t\treturn errors.Wrap(err, \"decode samples while truncating\")\n\t\t}\n\t\tfor _, s := range decSeries {\n\t\t\tif keep(s.Ref) {\n\t\t\t\tactiveSeries = append(activeSeries, s)\n\t\t\t}\n\t\t}\n\n\t\tbuf := w.getBuffer()\n\t\tflag = w.encodeSeries(buf, activeSeries)\n\n\t\t_, err = w.writeTo(csf, crc32, WALEntrySeries, flag, buf.Get())\n\t\tw.putBuffer(buf)\n\n\t\tif err != nil {\n\t\t\treturn errors.Wrap(err, \"write to compaction segment\")\n\t\t}\n\t}\n\tif r.Err() != nil {\n\t\treturn errors.Wrap(r.Err(), \"read candidate WAL files\")\n\t}\n\n\toff, err := csf.Seek(0, io.SeekCurrent)\n\tif err != nil {\n\t\treturn err\n\t}\n\tif err := csf.Truncate(off); err != nil {\n\t\treturn err\n\t}\n\tcsf.Sync()\n\tcsf.Close()\n\n\tcandidates[0].Close() \/\/ need close before remove on platform windows\n\tif err := fileutil.Replace(csf.Name(), candidates[0].Name()); err != nil {\n\t\treturn errors.Wrap(err, \"rename compaction segment\")\n\t}\n\tfor _, f := range candidates[1:] {\n\t\tf.Close() \/\/ need close before remove on platform windows\n\t\tif err := os.RemoveAll(f.Name()); err != nil {\n\t\t\treturn errors.Wrap(err, \"delete WAL segment file\")\n\t\t}\n\t}\n\tif err := w.dirFile.Sync(); err != nil {\n\t\treturn err\n\t}\n\n\t\/\/ The file object of csf still holds the name before rename. Recreate it so\n\t\/\/ subsequent truncations do not look at a non-existent file name.\n\tcsf.File, err = w.openSegmentFile(candidates[0].Name())\n\tif err != nil {\n\t\treturn err\n\t}\n\t\/\/ We don't need it to be open.\n\tcsf.Close()\n\n\tw.mtx.Lock()\n\tw.files = append([]*segmentFile{csf}, w.files[len(candidates):]...)\n\tw.mtx.Unlock()\n\n\treturn nil\n}","label":0}
{"text":"public function render()\n    {\n        $widgetName = 'Uploader_' . md5($this->name);\n        \n        $returnValue = $this->renderLabel();\n        $returnValue .= \"<input type='hidden' name='{$this->name}' id='{$this->name}' value='' \/>\";\n        $returnValue .= \"<div id='{$widgetName}_container' class='form-elt-container file-uploader'>\";\n        \n        \/\/ get the upload max size\n        $fileSize = SystemHelper::getFileUploadLimit();\n        \n        $mimetypes = array();\n        \n        \/\/ add a client validation\n        foreach ($this->validators as $validator) {\n            \/\/ get the valid file extensions\n            if ($validator instanceof tao_helpers_form_validators_FileMimeType) {\n                $options = $validator->getOptions();\n                if (isset($options['mimetype'])) {\n                    $mimetypes = $options['mimetype'];\n                }\n            }\n            \/\/ get the max file size\n            if ($validator instanceof tao_helpers_form_validators_FileSize) {\n                $options = $validator->getOptions();\n                if (isset($options['max'])) {\n                    $validatorMax = (int) $options['max'];\n                    if ($validatorMax > 0 && $validatorMax < $fileSize) {\n                        $fileSize = $validatorMax;\n                    }\n                }\n            }\n        }\n        \n        \/\/ default value for 'auto' is 'true':\n        $auto = 'true';\n        if (isset($this->attributes['auto'])) {\n            if (! $this->attributes['auto'] || $this->attributes['auto'] === 'false') {\n                $auto = 'false';\n            }\n            unset($this->attributes['auto']);\n        }\n        \n        \/\/ initialize the Uploader Js component\n        $returnValue .= '<script type=\"text\/javascript\">\n\t\t\t\trequire([\\'jquery\\',  \\'ui\/feedback\\', \\'ui\/uploader\\'], function($, feedback){\n\t\t\t\t\t $(\"#' . $widgetName . '_container\").uploader({\n\t\t\t\t\t\t\t uploadUrl: \"' . ROOT_URL . 'tao\/File\/upload\",\n\t\t\t\t\t\t\tautoUpload: \"' . $auto . '\"  ,\n\t\t\t\t\t\t\tshowResetButton: \"' . ! $auto . '\" ,\n\t\t\t\t\t\t\tshowUploadButton: \"' . ! $auto . '\" ,\n\t\t\t\t\t\t\tfileSelect  : function(files, done){\n\t\t\t\t\t\t\t\t\t\t\tvar error = [],\n\t\t\t\t\t\t\t\t\t\t\t\tfiles = files.filter(_.isObject),\/\/ due to Chrome drag\\'n\\'drop issue\n\t\t\t\t\t\t\t\t\t\t\t\tgivenLength = files.length,\n\t\t\t\t\t\t\t\t\t\t\t\tfilters = \"' . implode(',', $mimetypes) . '\".split(\",\").filter(function(e){return e.length});\n\n\t\t\t\t\t\t\t\t\t\t\t\tif (filters.length){\n\n\t\t\t\t\t\t\t\t\t\t\t\t\tfiles = _.filter(files, function(file){\n\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn !file.type || _.contains(filters, file.type.replace(\/[\\'\"]+\/g, \\'\\'));\/\/IE9 doesnt detect type, so lets rely on server validation\n\t\t\t\t\t\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\t\t\t\t\t\tif(files.length !== givenLength){\n\t\t\t\t\t\t\t\t\t\t\t\t\t\terror.push( \"Unauthorized files have been removed\");\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t\tfiles = _.filter(files, function(file){\n\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn file.size <= ' . $fileSize . ';\n\t\t\t\t\t\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\t\t\t\t\tif(files.length !== givenLength && !error.length){\n\t\t\t\t\t\t\t\t\t\t\t\t\terror.push( \"Size limit is ' . $fileSize . ' bytes\");\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t\tif (error.length){\n\t\t\t\t\t\t\t\t\t\t\t\t\tfeedback().error(error.join(\",\"));\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t\tdone(files);\n\t\t\t\t\t\t\t\t\t\t\t\tif ( ' . $auto . ' ){\n\t\t\t\t\t\t\t\t\t\t\t\t\t$(this).uploader(\"upload\");\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t }\n\n\t\t\t\t\t }).on(\"upload.uploader\", function(e, file, result){\n\t\t\t\t\t \tif ( result && result.uploaded ){\n\t\t\t\t\t\t\t$(\"input[name=\\'' . $this->getName() . '\\']\").val(result.data);\n\t\t\t\t\t\t}\n\t\t\t\t\t })\n\t\t\t});\n\t\t\t<\/script>';\n        $returnValue .= \"<\/div>\";\n        \n        return (string) $returnValue;\n    }","label":0}
{"text":"public function calculate(VolumeInterface $volume, FolderInterface $folder = null)\n    {\n        if (null === $folder) {\n            $folder = $volume->findRootFolder();\n        }\n\n        $size = 0;\n        $numFiles = 0;\n\n        foreach ($volume->findFilesByFolder($folder) as $file) {\n            $size += $file->getSize();\n            ++$numFiles;\n        }\n\n        $calculatedsize = new CalculatedSize($size, 1, $numFiles);\n\n        foreach ($volume->findFoldersByParentFolder($folder) as $subFolder) {\n            $subCalculatedSize = $this->calculate($volume, $subFolder);\n            $calculatedsize->merge($subCalculatedSize);\n        }\n\n        return $calculatedsize;\n    }","label":0}
{"text":"public void tryRegisterController(Object object) {\n        if (object instanceof IPluginController) {\n            if (pluginControllers == null) {\n                pluginControllers = new ArrayList<>();\n            }\n\n            pluginControllers.add((IPluginController) object);\n        }\n    }","label":0}
{"text":"def create_tar_file(source_files, target=None):\n    \n    if target:\n        filename = target\n    else:\n        _, filename = tempfile.mkstemp()\n\n    with tarfile.open(filename, mode='w:gz') as t:\n        for sf in source_files:\n            # Add all files from the directory into the root of the directory structure of the tar\n            t.add(sf, arcname=os.path.basename(sf))\n    return filename","label":0}
{"text":"func NewSfFbInviteChangeRoleType(Description string) *SfFbInviteChangeRoleType {\n\ts := new(SfFbInviteChangeRoleType)\n\ts.Description = Description\n\treturn s\n}","label":0}
{"text":"public function data( $key )\n    {\n\n        \/\/ string, key clause\n        if( is_scalar( $key ) ) {\n\n            $dataTypes = $this->dataTypesGet( DataType::PRIMARY_KEYS );\n            try {\n                $key = array_combine(\n                    array_keys( $dataTypes ),\n                    explode( Base::KEY_SEPARATOR, $key )\n                );\n            } catch ( \\Exception $e ) {\n                throw new BadKeyException(\n                    sprintf(\n                        \"Passed key `%s` needs %d fragments; it has %d\",\n                        $key,\n                        count( $dataTypes ),\n                        count( explode( Base::KEY_SEPARATOR, $key ) )\n                    )\n                );\n            }\n\n        \/\/ is array\n        } elseif( is_array( $key ) and count( $key ) > 0 ) {\n\n            $dataTypes = $this->dataTypesGet( array_keys( $key ) );\n\n        \/\/ bad argument\n        } else {\n            throw new \\InvalidArgumentException(\"Can't lookup data for entity with this argument -> \" . print_r( $key, true ) );\n        }\n\n        \/\/ we got the right amount of keyFragments?\n        if( count($key) !== count($dataTypes) ) {\n            throw new \\InvalidArgumentException(\n                sprintf(\n                    \"The passed key (%s) can't be married to the repository keys (%s). Epic fail.\",\n                    print_r($key, true),\n                    implode(',', array_keys($dataTypes) )\n                )\n            );\n        }\n\n        \/\/ build where clause\n        $where = array();\n        foreach( $dataTypes as $name => $dataType ) {\n\n            $where[] = sprintf(\n                \"%s = %s\",\n                $this->db->quoteIdent( $name ),\n                $dataType->toQueryTag()\n            );\n            $data[$name] = $key[$name];\n\n        }\n\n        \/\/ build query\n        $query = new Query(\n            sprintf(\n                \"SELECT * FROM ONLY %s WHERE %s\",\n                $this->db->quoteIdent( $this->__get('table') ),\n                implode( ' AND ', $where )\n            ),\n            $data\n        );\n\n        $result = $this->db->query( $query );\n        $data = $result->fetch( Result::FETCH_SINGLE | Result::FLATTEN_PREVENT );\n\n        return $data;\n\n    }","label":0}
{"text":"func (s *StopKeyPhrasesDetectionJobInput) SetJobId(v string) *StopKeyPhrasesDetectionJobInput {\n\ts.JobId = &v\n\treturn s\n}","label":0}
{"text":"def merge(docset, filename=\"\", linenr=0)\n      docs = docset[:comment]\n      code = process_code(docset[:tagname], docset[:code])\n\n      h = {\n        :tagname => docset[:tagname],\n        :name => docs[:name] || code[:name] || \"\",\n        :autodetected => code[:autodetected] || {},\n        :files => [{:filename => filename, :linenr => linenr}],\n      }\n\n      general_merge(h, docs, code)\n      invoke_merge_in_member_tag(h, docs, code)\n\n      # Needs to be calculated last, as it relies on the existance of\n      # :name, :static and :tagname fields.\n      h[:id] = JsDuck::Class.member_id(h)\n\n      h\n    end","label":0}
{"text":"public function updateModifyQuery($modify)\n    {\n        if ($this->relation) {\n            $modify = $this->relation->dsql;\n        }\n\n        $modify->set(\n            $this->actual_field ?: $this->short_name,\n            $this->getSQL()\n        );\n\n        return $this;\n    }","label":0}
{"text":"@SuppressWarnings(\"rawtypes\")\n    public static Hashtable parsePostData(ServletInputStream in, String encoding, boolean multireadPropertyEnabled) \/* 157338 add throws *\/ throws IOException\n    {\n        int inputLen;\n        byte[] postedBytes = null;\n        String postedBody;\n        if (com.ibm.ejs.ras.TraceComponent.isAnyTracingEnabled()&&logger.isLoggable (Level.FINE))\n\t\t\tlogger.logp(Level.FINE, CLASS_NAME,\"parsePostData\",\"parsing chunked post data. encoding = \" + encoding);\n\t\t\n        \n        if (in == null)\n            throw new IllegalArgumentException(\"post data inputstream is null\");\n        try\n        {\n            \/\/\n            \/\/ Make sure we read the entire POSTed body.\n            \/\/\n            ByteArrayOutputStream byteOS = new ByteArrayOutputStream(DEFAULT_BUFFER_SIZE);\n            do\n            {\n            \tbyte [] readInBytes = new byte[DEFAULT_BUFFER_SIZE];\n            \tinputLen = in.read(readInBytes, 0, DEFAULT_BUFFER_SIZE);\n            \tif (inputLen > 0){\n            \t\tbyteOS.write(readInBytes,0,inputLen);\n            \t}\n            }\n            while (inputLen != -1);\n            \n            \/\/ MultiRead Start\n            if (multireadPropertyEnabled) {\n                in.close();\n            }\n            \/\/ MultiRead End\n            \n            postedBytes = byteOS.toByteArray();\n            if (com.ibm.ejs.ras.TraceComponent.isAnyTracingEnabled()&&logger.isLoggable (Level.FINE))\n    \t\t\tlogger.logp(Level.FINE, CLASS_NAME,\"parsePostData\",\"finished reading [\"+postedBytes.length+\"] bytes\");\n    \t\t\n        }\n        catch (IOException e)\n        {\n            com.ibm.wsspi.webcontainer.util.FFDCWrapper.processException(e, \"com.ibm.ws.webcontainer.servlet.RequestUtils.parsePostData\", \"598\");\n            \/\/ begin 157338\n            throw e;\n            \/\/return new Hashtable();\n            \/\/ begin 157338\n        }\n        \/\/ XXX we shouldn't assume that the only kind of POST body\n        \/\/ is FORM data encoded using ASCII or ISO Latin\/1 ... or\n        \/\/ that the body should always be treated as FORM data.\n        \/\/\n        try\n        {\n            postedBody = new String(postedBytes, encoding);\n        }\n        catch (UnsupportedEncodingException e)\n        {\n            com.ibm.wsspi.webcontainer.util.FFDCWrapper.processException(e, \"com.ibm.ws.webcontainer.servlet.RequestUtils.parsePostData\", \"618\");\n            postedBody = new String(postedBytes);\n        }\n        \n        if (WCCustomProperties.PARSE_UTF8_POST_DATA && encoding.equalsIgnoreCase(\"UTF-8\")) {\n            for (byte nextByte : postedBytes) {\n            \tif (nextByte < (byte)0 ) {\n            \t\tencoding = \"8859_1\";            \t\t\n                    if (com.ibm.ejs.ras.TraceComponent.isAnyTracingEnabled()&&logger.isLoggable (Level.FINE))\n            \t\t\tlogger.logp(Level.FINE, CLASS_NAME,\"parsePostData\",\"UTF8 post data, set encoing to 8859_1 to prevent futrther encoding\");\n        \t        break;\n            \t}    \t\n            }\n        }    \n\n        \n        return parseQueryString(postedBody, encoding);\n    }","label":0}
{"text":"public Post postReblog(String blogName, Long postId, String reblogKey) {\n        return this.postReblog(blogName, postId, reblogKey, null);\n    }","label":0}
{"text":"public static function recursiveUnlink($dir) {\n        $result = TRUE;\n\n        if(is_dir($dir)) {\n            foreach(scandir($dir) as $sub) {\n                if(in_array($sub, ['.', '..'])) continue;\n                $result &= self::recursiveUnlink(\"$dir\/$sub\");\n            }\n\n            $result &= rmdir($dir);\n        }\n        elseif(is_file($dir)) {\n            $result &= unlink($dir);\n        }\n        else {\n            $result = FALSE;\n        }\n\n        return (bool)$result;\n    }","label":0}
{"text":"public static int endPos(JCTree tree) {\n        if (tree.hasTag(BLOCK) && ((JCBlock) tree).endpos != Position.NOPOS)\n            return ((JCBlock) tree).endpos;\n        else if (tree.hasTag(SYNCHRONIZED))\n            return endPos(((JCSynchronized) tree).body);\n        else if (tree.hasTag(TRY)) {\n            JCTry t = (JCTry) tree;\n            return endPos((t.finalizer != null) ? t.finalizer\n                          : (t.catchers.nonEmpty() ? t.catchers.last().body : t.body));\n        } else\n            return tree.pos;\n    }","label":0}
{"text":"private boolean getPresenceOfNitro(IAtomContainer ac, IAtom atom) {\n        List neighbours = ac.getConnectedAtomsList(atom);\n        List second = null;\n        IBond bond = null;\n        \/\/int counter = 0;\n        for (int i = 0; i < neighbours.size(); i++) {\n            IAtom neighbour = (IAtom) neighbours.get(i);\n            if (neighbour.getSymbol().equals(\"N\")) {\n                second = ac.getConnectedAtomsList(neighbour);\n                for (int b = 0; b < second.size(); b++) {\n                    IAtom conAtom = (IAtom) second.get(b);\n                    if (conAtom.getSymbol().equals(\"O\")) {\n                        bond = ac.getBond(neighbour, conAtom);\n                        if (bond.getOrder() == IBond.Order.DOUBLE) {\n                            return true;\n                        }\n                    }\n                }\n            }\n        }\n        return false;\n    }","label":0}
{"text":"func (manager *Manager) isSecure(req *http.Request) bool {\n\tif !manager.config.Secure {\n\t\treturn false\n\t}\n\tif req.URL.Scheme != \"\" {\n\t\treturn req.URL.Scheme == \"https\"\n\t}\n\tif req.TLS == nil {\n\t\treturn false\n\t}\n\treturn true\n}","label":0}
{"text":"protected NetworkInfo getActiveNetworkInfo() {\n        ConnectivityManager connectivityManager\n                = (ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);\n        return connectivityManager.getActiveNetworkInfo();\n    }","label":0}
{"text":"public function html($path=null, $pos=0) {\n\t\tif($path === null)\n\t\t\treturn $this->code;\n\t\treturn $this->item($path, $pos)->html();\n\t}","label":0}
{"text":"func Decode(input string, alphabet *Alphabet) ([]byte, error) {\n\tcapacity := utf8.RuneCountInString(input)*733\/1000 + 1 \/\/ log(58) \/ log(256)\n\toutput := make([]byte, capacity)\n\toutputReverseEnd := capacity - 1\n\tvar carry, outputIdx, i int\n\tvar target rune\n\n\t\/\/ prefix 0\n\tzero58Byte := alphabet.encodeTable[0]\n\tprefixZeroes := 0\n\tskipZeros := false\n\n\tfor _, target = range input {\n\t\t\/\/ collect prefix zeros\n\t\tif !skipZeros {\n\t\t\tif target == zero58Byte {\n\t\t\t\tprefixZeroes++\n\t\t\t\tcontinue\n\t\t\t} else {\n\t\t\t\tskipZeros = true\n\t\t\t}\n\t\t}\n\n\t\tcarry = -1\n\t\tif target >= 0 && target < 256 {\n\t\t\tcarry = alphabet.decodeTable[target]\n\t\t} else { \/\/ unicode\n\t\t\tfor i = 0; i < len(alphabet.unicodeDecodeTable); i += 2 {\n\t\t\t\tif alphabet.unicodeDecodeTable[i] == target {\n\t\t\t\t\tcarry = int(alphabet.unicodeDecodeTable[i+1])\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif carry == -1 {\n\t\t\treturn nil, ErrorInvalidBase58String\n\t\t}\n\n\t\toutputIdx = capacity - 1\n\t\tfor ; outputIdx > outputReverseEnd || carry != 0; outputIdx-- {\n\t\t\tcarry += 58 * int(output[outputIdx])\n\t\t\toutput[outputIdx] = byte(uint32(carry) & 0xff) \/\/ same as: byte(uint32(carry) % 256)\n\t\t\tcarry >>= 8                                    \/\/ same as: carry \/= 256\n\t\t}\n\t\toutputReverseEnd = outputIdx\n\t}\n\n\tretBytes := make([]byte, prefixZeroes+(capacity-1-outputReverseEnd))\n\tcopy(retBytes[prefixZeroes:], output[outputReverseEnd+1:])\n\treturn retBytes, nil\n}","label":0}
{"text":"func (g *metadataGraph) node(path string) *metadataNode {\n\tcur := g.root\n\tif path != \"\" {\n\t\tfor _, elem := range strings.Split(path, \"\/\") {\n\t\t\tcur = cur.child(elem)\n\t\t}\n\t}\n\treturn cur\n}","label":0}
{"text":"func NewRouter(cfg *Config, routes []*Route) *Router {\n\thandlers := httpHandlers(routes)\n\tr := &Router{\n\t\toptHandlers:    handlers[http.MethodOptions],\n\t\theadHandlers:   handlers[http.MethodHead],\n\t\tgetHandlers:    handlers[http.MethodGet],\n\t\tpostHandlers:   handlers[http.MethodPost],\n\t\tputHandlers:    handlers[http.MethodPut],\n\t\tpatchHandlers:  handlers[http.MethodPatch],\n\t\tdeleteHandlers: handlers[http.MethodDelete],\n\n\t\tNotFound:   http.NotFound,\n\t\tAppContext: make(map[string]interface{}),\n\t\tconfig:     cfg,\n\t}\n\n\t\/\/ setting the default serve handler\n\tr.serveHandler = r.serve\n\n\treturn r\n}","label":0}
{"text":"def chmod(target):\n    \n    assert isinstance(target, str)\n    assert os.path.exists(target)\n\n    file_mode = stat.S_IRUSR | stat.S_IWUSR\n    folder_mode = stat.S_IRUSR | stat.S_IWUSR | stat.S_IXUSR\n\n    # Remove the immutable attribute recursively if there is one\n    remove_immutable_attribute(target)\n\n    if os.path.isfile(target):\n        os.chmod(target, file_mode)\n\n    elif os.path.isdir(target):\n        # chmod the root item\n        os.chmod(target, folder_mode)\n\n        # chmod recursively in the folder it it's one\n        for root, dirs, files in os.walk(target):\n            for cur_dir in dirs:\n                os.chmod(os.path.join(root, cur_dir), folder_mode)\n            for cur_file in files:\n                os.chmod(os.path.join(root, cur_file), file_mode)\n\n    else:\n        raise ValueError(\"Unsupported file type: {}\".format(target))","label":0}
{"text":"public BaseWindowedBolt<T> ingestionTimeWindow(Time size) {\n        long s = size.toMilliseconds();\n        ensurePositiveTime(s);\n\n        setSizeAndSlide(s, DEFAULT_SLIDE);\n        this.windowAssigner = TumblingIngestionTimeWindows.of(s);\n        return this;\n    }","label":0}
{"text":"public function obtener($llave, $valorAlterno = null)\n    {\n        $this->requerirInicio();\n\n        return isset($this->datos[$llave]) ? $this->datos[$llave] : $valorAlterno;\n    }","label":0}
{"text":"protected static function _GetInstance ($class_name) {\n\t\treturn (isset(static::$_instanceList[$class_name])) ? static::$_instanceList[$class_name] : static::$_instanceList[$class_name] = new static($class_name);\n\t}","label":0}
{"text":"public function package($dir = null, $copyTo = null)\n    {\n        if (true === $this->getPhpunitService()->hasSupport()) {\n            $this->getPhpunitService()->test($dir);\n        }\n\n        $box = $this->getJsonService()->parseFile('box.json');\n        $file = $box['output'];\n\n        $this->getFilesystemService()->createDirectory(dirname($file));\n\n        $this->getSystemService()->execute('bin\/box build', $dir);\n\n        if (null === $copyTo) {\n            return $file;\n        }\n\n        $this->getSystemService()->execute($this->_('sudo cp %s %s', $file, $copyTo));\n\n        return $file;\n    }","label":0}
{"text":"def _match_dbname(self, dbname):\n        \n        for config in self._clusters:\n            if re.match(config['pattern'], dbname):\n                return config\n        raise Exception('No such database %s.' % dbname)","label":0}
{"text":"protected function setSessionToken()\n    {\n        $token = $this->session->get('twitter.oauth_token');\n        $tokenSecret = $this->session->get('twitter.oauth_token_secret');\n\n        $this->setToken($token, $tokenSecret);\n    }","label":0}
{"text":"def _post_run_hook(self, runtime):\n        '''  '''\n        self._anat_file = self.inputs.in_files[0]\n        outputs = self.aggregate_outputs(runtime=runtime)\n        self._mask_file = outputs.tissue_class_map\n        # We are skipping the CSF class because with combination with others\n        # it only shows the skullstriping mask\n        self._seg_files = outputs.tissue_class_files[1:]\n        self._masked = False\n\n        NIWORKFLOWS_LOG.info('Generating report for FAST (in_files %s, '\n                             'segmentation %s, individual tissue classes %s).',\n                             self.inputs.in_files,\n                             outputs.tissue_class_map,\n                             outputs.tissue_class_files)\n\n        return super(FASTRPT, self)._post_run_hook(runtime)","label":0}
{"text":"def get_all_current_trains(self, train_type=None, direction=None):\n        \n        params = None\n        if train_type:\n            url = self.api_base_url + 'getCurrentTrainsXML_WithTrainType'\n            params = {\n                'TrainType': STATION_TYPE_TO_CODE_DICT[train_type]\n            }\n        else:\n            url = self.api_base_url + 'getCurrentTrainsXML'\n\n        response = requests.get(\n            url, params=params, timeout=10)\n\n        if response.status_code != 200:\n            return []\n\n        trains = self._parse_all_train_data(response.content)\n\n        if direction is not None:\n            return self._prune_trains(trains, direction=direction)\n\n        return trains","label":0}
{"text":"func IsPlain(header mail.Header, emptyContentTypeIsPlain bool) bool {\n\tctype := header.Get(\"Content-Type\")\n\tif ctype == \"\" && emptyContentTypeIsPlain {\n\t\treturn true\n\t}\n\n\tmediatype, _, err := mime.ParseMediaType(ctype)\n\tif err != nil {\n\t\treturn false\n\t}\n\tswitch mediatype {\n\tcase \"text\/plain\",\n\t\t\"text\/html\":\n\t\treturn true\n\t}\n\n\treturn false\n\n}","label":0}
{"text":"function comment() {\n    var ret = this.seq(\n        this.stringf(\";\"),\n        this.manyf(this.choicef(WSP, VCHAR)),\n        CRLF);\n    return new ast.Comment(ret[2]);\n}","label":0}
{"text":"public function fetch($key, $value)\n\t{\n\t\tforeach ($this->_data as $data)\n\t\t{\n\t\t\tif ($data->get($key) == $value)\n\t\t\t{\n\t\t\t\treturn $data;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}","label":0}
{"text":"protected function getFormattedReplacements()\n    {\n        $time = $this->getMembers();\n\n        $negative = $this->isNegative();\n\n        return [\n            self::HOUR_FORMAT          => sprintf('%02d', $time['hours']),\n            self::MINUTE_FORMAT        => sprintf('%02d', $time['minutes']),\n            self::SECOND_FORMAT        => sprintf('%02d', $time['seconds']),\n            self::TOTAL_MINUTES_FORMAT => sprintf('%02d', $time['total_minutes']),\n            self::SIGN_ANY             => $negative ? '-' : '+',\n            self::SIGN_NEGATIVE        => $negative ? '-'  : '',\n        ];\n    }","label":0}
{"text":"func (x *Provenance) UnmarshalJSON(data []byte) (err error) {\n\tx2 := provenance{}\n\tif err = json.Unmarshal(data, &x2); err == nil {\n\t\tif x2.Contained != nil {\n\t\t\tfor i := range x2.Contained {\n\t\t\t\tx2.Contained[i] = MapToResource(x2.Contained[i], true)\n\t\t\t}\n\t\t}\n\t\t*x = Provenance(x2)\n\t\treturn x.checkResourceType()\n\t}\n\treturn\n}","label":0}
{"text":"public int[][] getSets() {\n        int n = 0;\n        for (int i = 0; i < forest.length; i++) {\n            if (forest[i] < 0) {\n                n++;\n            }\n        }\n        int[][] sets = new int[n][];\n        int currentSet = 0;\n        for (int i = 0; i < forest.length; i++) {\n            if (forest[i] < 0) {\n                int setSize = 1 - forest[i] - 1;\n                sets[currentSet] = new int[setSize];\n                int currentIndex = 0;\n                for (int element = 0; element < forest.length; element++) {\n                    if (getRoot(element) == i) {\n                        sets[currentSet][currentIndex] = element;\n                        currentIndex++;\n                    }\n                }\n                currentSet++;\n            }\n        }\n        return sets;\n    }","label":0}
{"text":"func NewMockRPCServer(ctrl *gomock.Controller) *MockRPCServer {\n\tmock := &MockRPCServer{ctrl: ctrl}\n\tmock.recorder = &MockRPCServerMockRecorder{mock}\n\treturn mock\n}","label":0}
{"text":"public function replaceName($name)\n    {\n        $atoms = $this->atoms();\n        $numAtoms = count($atoms);\n\n        if ($numAtoms > 0) {\n            if ('' === $name) {\n                array_pop($atoms);\n            } else {\n                $atoms[$numAtoms - 1] = $name;\n            }\n        } elseif ('' !== $name) {\n            $atoms[] = $name;\n        }\n\n        return $this->createPath(\n            $atoms,\n            $this instanceof AbsolutePathInterface,\n            false\n        );\n    }","label":0}
{"text":"func Address() string {\n\treturn fmt.Sprintf(\"%d %s,\\n%s, %s, %s\", Number(100), Street(), City(), State(Small), PostalCode(\"US\"))\n}","label":0}
{"text":"def check(self, records):\n        \"\"\"\"\"\"\n        for value, target in records:\n            LOGGER.info(\"%s [%s]: %s\", self.name, target, value)\n            if value is None:\n                self.notify(self.no_data, value, target)\n                continue\n            for rule in self.rules:\n                if self.evaluate_rule(rule, value, target):\n                    self.notify(rule['level'], value, target, rule=rule)\n                    break\n            else:\n                self.notify('normal', value, target, rule=rule)\n\n            self.history[target].append(value)","label":0}
{"text":"func (s *propConstSolver) PropagateConstant(ctx sessionctx.Context, conditions []Expression) []Expression {\n\ts.ctx = ctx\n\treturn s.solve(conditions)\n}","label":0}
{"text":"def destination(self) -> Optional[Union[str, Set[str]]]:\n        \n        if \"destination\" not in self.data.columns:\n            return None\n        tmp = set(self.data.destination)\n        if len(tmp) == 1:\n            return tmp.pop()\n        logging.warn(\"Several destinations for one flight, consider splitting\")\n        return tmp","label":0}
{"text":"def get_district_for_course(id, opts = {})\n      data, _status_code, _headers = get_district_for_course_with_http_info(id, opts)\n      return data\n    end","label":0}
{"text":"func (c *CtxDimensions) From(ctx context.Context) []interface{} {\n\texisting := ctx.Value(c)\n\tif existing == nil {\n\t\treturn []interface{}{}\n\t}\n\treturn existing.([]interface{})\n}","label":0}
{"text":"@Nullable\n    public final Object extraBinding(int variableId) {\n        if (extraBindings == null) {\n            return null;\n        }\n        return extraBindings.get(variableId);\n    }","label":0}
{"text":"public function col_select(stdClass $row) {\n        $selectcol = '<label class=\"accesshide\" for=\"selectuser_' . $row->userid . '\">';\n        $selectcol .= get_string('selectuser', 'assign', $this->assignment->fullname($row));\n        $selectcol .= '<\/label>';\n        $selectcol .= '<input type=\"checkbox\"\n                              id=\"selectuser_' . $row->userid . '\"\n                              name=\"selectedusers\"\n                              value=\"' . $row->userid . '\"\/>';\n        $selectcol .= '<input type=\"hidden\"\n                              name=\"grademodified_' . $row->userid . '\"\n                              value=\"' . $row->timemarked . '\"\/>';\n        $selectcol .= '<input type=\"hidden\"\n                              name=\"gradeattempt_' . $row->userid . '\"\n                              value=\"' . $row->attemptnumber . '\"\/>';\n        return $selectcol;\n    }","label":0}
{"text":"func (s *Comment) SetContributor(v *User) *Comment {\n\ts.Contributor = v\n\treturn s\n}","label":0}
{"text":"func (o *os) setup() {\n\tfor i := 0; i < 10; i++ {\n\t\t\/\/ wait till there's a valid address from the server\n\t\tif p := strings.Split(o.address(), \":\"); len(p) < 2 {\n\t\t\ttime.Sleep(GossipEvent \/ 100.0)\n\t\t\tcontinue\n\t\t}\n\t\t\/\/ have a valid address, setup, now\n\t\to.subscriber(context.Background(), &Announcement{\n\t\t\tNamespace: o.opts.Namespace,\n\t\t\tAddress:   o.address(),\n\t\t\tTimestamp: time.Now().Unix(),\n\t\t})\n\t\treturn\n\t}\n}","label":0}
{"text":"def p_systemcall_noargs(self, p):\n        ''\n        p[0] = SystemCall(p[2], (), lineno=p.lineno(1))\n        p.set_lineno(0, p.lineno(1))","label":0}
{"text":"protected function getToAddresses( Swift_Mime_Message $message )\n\t{\n\t\t$to = [];\n\n\t\tif ( $message->getTo() )\n\t\t\t$to = array_merge( $to, array_keys( $message->getTo() ) );\n\n\t\tif ( $message->getCc() )\n\t\t\t$to = array_merge( $to, array_keys( $message->getCc() ) );\n\n\t\tif ( $message->getBcc() )\n\t\t\t$to = array_merge( $to, array_keys( $message->getBcc() ) );\n\n\t\treturn $to;\n\t}","label":0}
{"text":"public Optional<SyntheticsAlertCondition> create(long policyId, SyntheticsAlertCondition condition)\n    {\n        return HTTP.POST(String.format(\"\/v2\/alerts_synthetics_conditions\/policies\/%d.json\", policyId), condition, SYNTHETICS_ALERT_CONDITION);\n    }","label":0}
{"text":"function randomBytesSync (size) {\n  var err = null\n\n  for (var i = 0; i < GENERATE_ATTEMPTS; i++) {\n    try {\n      return crypto.randomBytes(size)\n    } catch (e) {\n      err = e\n    }\n  }\n\n  throw err\n}","label":0}
{"text":"private function setQuotePaymentInfoData($quote, $data)\n    {\n        foreach ($data as $key => $value) {\n            $this->getQuotePaymentInfoInstance($quote)->setData($key, $value)->save();\n        }\n    }","label":0}
{"text":"private void fail(final K key) {\n        final String methodName = \"fail(): \";\n        stateLock.writeLock().lock();\n        try {\n            Integer index = actualIndices.remove(key);\n            if (index == null)\n                throw new IllegalArgumentException(\"unknown key: \" + key);\n            elements[index] = FAILED;\n            \/\/ register that this key failed\n            (failedKeys == null ? failedKeys = new ArrayList<K>(actualIndices.size() + 1) : failedKeys).add(key);\n            checkForCompletion();\n            if (tc.isDebugEnabled())\n                Tr.debug(tc, methodName, \"permanent fail for key \" + key);\n            stateLock.postEvent();\n        } finally {\n            stateLock.writeLock().unlock();\n        }\n    }","label":0}
{"text":"public void start(MissionInit missionInit, IVideoProducer videoProducer, VideoProducedObserver observer, MalmoEnvServer envServer)\n    {\n        if (videoProducer == null)\n        {\n            return; \/\/ Don't start up if there is nothing to provide the video.\n        }\n\n        videoProducer.prepare(missionInit);\n        this.missionInit = missionInit;\n        this.videoProducer = videoProducer;\n        this.observer = observer;\n        this.envServer = envServer;\n        this.buffer = BufferUtils.createByteBuffer(this.videoProducer.getRequiredBufferSize());\n        this.headerbuffer = ByteBuffer.allocate(20).order(ByteOrder.BIG_ENDIAN);\n        this.renderWidth = videoProducer.getWidth();\n        this.renderHeight = videoProducer.getHeight();\n        resizeIfNeeded();\n        Display.setResizable(false); \/\/ prevent the user from resizing using the window borders\n\n        ClientAgentConnection cac = missionInit.getClientAgentConnection();\n        if (cac == null)\n            return;\t\/\/ Don't start up if we don't have any connection details.\n\n        String agentIPAddress = cac.getAgentIPAddress();\n        int agentPort = 0;\n        switch (videoProducer.getVideoType())\n        {\n        case LUMINANCE:\n            agentPort = cac.getAgentLuminancePort();\n            break;\n        case DEPTH_MAP:\n            agentPort = cac.getAgentDepthPort();\n            break;\n        case VIDEO:\n            agentPort = cac.getAgentVideoPort();\n            break;\n        case COLOUR_MAP:\n            agentPort = cac.getAgentColourMapPort();\n            break;\n        }\n\n        this.connection = new TCPSocketChannel(agentIPAddress, agentPort, \"vid\");\n        this.failedTCPSendCount = 0;\n\n        try\n        {\n            MinecraftForge.EVENT_BUS.register(this);\n        }\n        catch(Exception e)\n        {\n            System.out.println(\"Failed to register video hook: \" + e);\n        }\n        this.isRunning = true;\n    }","label":0}
{"text":"private void printDoubleWithFields(String name, String fields, double value) {\r\n\t\tprint(METRIC_PREFIX);\r\n\t\tprint(name);\r\n\t\tif (fields != null) {\r\n\t\t\tprint(fields);\r\n\t\t}\r\n\t\tprint(' ');\r\n\t\tprintln(decimalFormat.format(value));\r\n\t}","label":0}
{"text":"def context_class(self):\n        \n        if 'context_class' not in self._cached_values:\n            context_cls_name = getattr(self.settings, 'CONTEXT_CLASS', '')\n            if context_cls_name:\n                context_class = import_object(context_cls_name)\n            else:\n                context_class = Context\n            self._cached_values['context_class'] = context_class\n        return self._cached_values['context_class']","label":0}
{"text":"function(oValues) {\n\t\t\t\tvar sHighColor = \"\",\n\t\t\t\t\tsMediumColor = \"\",\n\t\t\t\t\tsLowColor = \"\";\n\n\t\t\t\tif (oValues.highCount > 0) {\n\t\t\t\t\tsHighColor = \"color: \" + constants.SUPPORT_ASSISTANT_SEVERITY_HIGH_COLOR + \";\";\n\t\t\t\t}\n\n\t\t\t\tif (oValues.mediumCount > 0) {\n\t\t\t\t\tsMediumColor = \"color: \" + constants.SUPPORT_ASSISTANT_SEVERITY_MEDIUM_COLOR + \";\";\n\t\t\t\t}\n\n\t\t\t\tif (oValues.lowCount > 0) {\n\t\t\t\t\tsLowColor = \"color: \" + constants.SUPPORT_ASSISTANT_SEVERITY_LOW_COLOR + \";\";\n\t\t\t\t}\n\n\t\t\t\treturn oValues.name +\n\t\t\t\t\t\" (<span style=\\\"\" + sHighColor + \"\\\"> \" + oValues.highCount + \" \" + oValues.highName + \", <\/span> \" +\n\t\t\t\t\t\"<span style=\\\"\" + sMediumColor + \"\\\"> \" + oValues.mediumCount + \" \" + oValues.mediumName + \", <\/span> \" +\n\t\t\t\t\t\"<span style=\\\"\" + sLowColor + \"\\\"> \" + oValues.lowCount + \" \" + oValues.lowName + \"<\/span> )\";\n\t\t\t}","label":0}
{"text":"def search_for( spec )\n     found = []\n      specs_list.each do |name, version, platform|\n        up_spec = Stickler::SpecLite.new( name, version, platform )\n        found << up_spec if spec =~ up_spec\n      end\n      return found\n    end","label":0}
{"text":"def init_logging():\n    \"\"\"\"\"\"\n    with open(os.path.join(os.path.dirname(__file__),'logging.conf'), 'r') as yf:\n        config = yaml.load(yf)\n    logging.config.dictConfig(config)","label":0}
{"text":"public String getAttribute(String section, String name) {\n        Attributes attr = getManifest().getAttributes(section);\n        return attr != null ? attr.getValue(name) : null;\n    }","label":0}
{"text":"def execute(self, conn, daoinput, transaction = False):\n        \t\n        if not conn:\n\t    dbsExceptionHandler(\"dbsException-failed-connect2host\", \"Oracle\/MigrationRequests\/UpdateRequestStatus. Expects db connection from upper layer.\", \n                                self.logger.exception)\n        if daoinput['migration_status'] == 1:\n           sql = self.sql2 \n        elif daoinput['migration_status'] == 2:\n            sql = self.sql + \" and MIGRATION_STATUS = 1 \"\n        elif daoinput['migration_status'] == 3:\n            sql = self.sql3 + \" and MIGRATION_STATUS = 1 \" \n        else:\n            dbsExceptionHandler(\"dbsException-conflict-data\", \"Oracle\/MigrationRequest\/UpdateRequestStatus. Expected migration status to be 1, 2 or 3\",\n                                self.logger.exception)\n        \n\tresult = self.dbi.processData(sql, daoinput, conn, transaction)","label":0}
{"text":"public function removeDir($withFolder = false)\n    {\n        if (!is_dir($this->dir)) {\n            return $this;\n        }\n\n        foreach (glob($this->dir.'\/*') as $item) {\n            if (is_dir($item)) {\n                static::create($item)->removeDir(true);\n            } else {\n                @unlink($item);\n            }\n        }\n        if ($withFolder) {\n            @rmdir($this->dir);\n        }\n\n        return $this;\n    }","label":0}
{"text":"public function fromBase64URL($data)\n    {\n        if ($remainder = strlen($data) % 4) {\n            $data .= str_repeat('=', 4 - $remainder);\n        }\n\n        return base64_decode(strtr($data, '-_', '+\/'));\n    }","label":0}
{"text":"function hasChildren()\n    {\n        return array( $this->SetName => false,\n                      $this->LetName => true,\n                      $this->DefaultName => true );\n    }","label":0}
{"text":"protected function verifyClass(ClassNode $node, InterfaceNode $interfaceNode): void\n    {\n        $classMethods = $node->getMethods();\n        $interfaceMethods = $interfaceNode->getMethods();\n\n        $notMatchingMethods = $this->findNotMatchingMethodsForBridgeClass($classMethods, $interfaceMethods);\n\n        foreach ($notMatchingMethods as $notMatchingMethod) {\n            $message = sprintf(\n                'The bridge has incorrect method \\'%s\\' signature. That violates the rule \"%s\"',\n                $notMatchingMethod->getName(),\n                static::RULE\n            );\n\n            $this->addViolation($node, [$message]);\n        }\n    }","label":0}
{"text":"public function modifyTable()\n    {\n        $table = $this->getTable();\n        if (!$table->hasPrimaryKey() && !$table->hasBehavior('concrete_inheritance')) {\n            $columnAttributes = array_merge(['primaryKey' => 'true'], $this->getParameters());\n            $this->getTable()->addColumn($columnAttributes);\n        }\n    }","label":0}
{"text":"public static function parseResponse(Response $response)\n    {\n        $jsonData = \\GuzzleHttp\\json_decode($response->getBody(), true);\n        if (\n            (isset($jsonData['errCode']) && 0 === $jsonData['errCode'])\n            || (isset($jsonData['retcode']) && 0 === $jsonData['retcode'])\n        ) {\n            return true;\n        }\n        if (isset($jsonData['retcode']) && 103 === $jsonData['retcode']) {\n            throw new Code103ResponseException($response);\n        }\n\n        return false;\n    }","label":0}
{"text":"public static String[] extractParameterMultiple(String name, Map parameters) {\n\t\tString paramValues = extractParameter(name, parameters);\n\t\treturn StringUtils.stripAll(StringUtils.split(paramValues, \", \"));\n\t}","label":0}
{"text":"protected function GetSuccessURL($sStepName = '')\n    {\n        if (empty($sStepName)) {\n            $sStepName = 'shipping';\n        }\n        $sURL = false;\n        $oShippingStep = TdbShopOrderStep::GetStep($sStepName);\n        \/** @var $oShippingStep TdbShopOrderStep *\/\n        if (!is_null($oShippingStep)) {\n            $sURL = $oShippingStep->GetStepURL(true, true);\n            if ('\/' == substr($sURL, -1)) {\n                $sURL = substr($sURL, 0, -1);\n            }\n\n            if ('shipping' == $sStepName) {\n                $aResponse = array('module_fnc' => array(TGlobal::instance()->GetExecutingModulePointer()->sModuleSpotName => 'ExecuteStep'), MTShopOrderWizardCore::URL_PARAM_STEP_METHOD => '', 'aShipping' => array('shop_shipping_group_id' => TShopBasket::GetInstance()->GetActiveShippingGroup()->id, 'shop_payment_method_id' => $this->GetOwningPaymentMethodId()));\n                $sURL .= '?'.str_replace('&amp;', '&', TTools::GetArrayAsURL($aResponse));\n            }\n        }\n\n        return $sURL;\n    }","label":0}
{"text":"public void ensureHasSpace(int numBytesToAdd) {\n    if (numBytesToAdd < 0) {\n      throw new IllegalArgumentException(\"Number of bytes can't be negative\");\n    }\n    int capacityLeft = getCapacityLeft();\n    if (capacityLeft < numBytesToAdd) {\n      grow(numBytesToAdd - capacityLeft, true);\n    }\n  }","label":0}
{"text":"protected final function insert($data, $cb = null) {\n        if ($cb && $cb instanceof \\Closure) {\n            $data = $cb ($data, $this);\n        }\n        if ($data) {\n            $this->filterFields($data);\n            if (method_exists($this, 'validateNewData')) {\n                if (isset($this->_formData)) {\n                    $this->validateNewData($this->_formData);\n                } else {\n                    $this->validateNewData($data);\n                }\n            }\n            $sql = new InsertSQL($data);\n            $sql->into($this->table)->setDialect($this->dialect);\n            if ($this->autoIncrement) {\n                $sql->autoField($this->primaryKey);\n                $rst = $sql->newId();\n            } else {\n                $rst = $sql->exec(true);\n            }\n            if ($rst) {\n                return $rst;\n            } else {\n                $this->checkSQL($sql);\n\n                return false;\n            }\n        } else {\n            $this->errors = '\u6570\u636e\u4e3a\u7a7a.';\n\n            return false;\n        }\n    }","label":0}
{"text":"public function getPageKeywords()\n    {\n        if (!$this->parser) {\n            return;\n        }\n\n        $node = $this->parser->find('meta[name=keywords]', 0);\n\n        if ($node) {\n            return $node->getAttribute('content');\n        }\n    }","label":0}
{"text":"private static void appendToBuilder(long l, int radix, StringBuilder builder, char[] bufferConversion)\n    {\n        if (radix < Character.MIN_RADIX || radix > Character.MAX_RADIX)\n        {\n            radix = 10;\n        }\n        if (l == 0)\n        {\n            builder.append('0');\n            return;\n        }\n\n        int count = 2;\n        long j = l;\n        boolean negative = l < 0;\n        if (!negative)\n        {\n            count = 1;\n            j = -l;\n        }\n        while ((l \/= radix) != 0)\n        {\n            count++;\n        }\n\n        if (bufferConversion.length < count)\n        {\n            bufferConversion = new char[count];\n        }\n        int finalCount = count;\n\n        char[] buffer = bufferConversion;\n        do \n        {\n            int ch = 0 - (int) (j % radix);\n            if (ch > 9)\n            {\n                ch = ch - 10 + 'a';\n            }\n            else\n            {\n                ch += '0';\n            }\n            buffer[--count] = (char) ch;\n            j \/= radix;\n        }\n        while (j != 0);\n        if (negative)\n        {\n            buffer[0] = '-';\n        }\n        for (int i = 0; i < finalCount; i++)\n        {\n            builder.append(buffer[i]);\n        }\n        \/\/return new String(0, buffer.length, buffer);\n    }","label":0}
{"text":"public function removeTag($tag)\n    {\n        $index = array_search($tag, $this->tags);\n\n        if ($index !== false) {\n            array_splice($this->tags, $index, 1);\n            $this->ref = null;\n        }\n\n        return $this;\n    }","label":0}
{"text":"def add_automation_link(testcase):\n    \"\"\"\"\"\"\n    automation_link = (\n        '<a href=\"{}\">Test Source<\/a>'.format(testcase[\"automation_script\"])\n        if testcase.get(\"automation_script\")\n        else \"\"\n    )\n    testcase[\"description\"] = \"{}<br\/>{}\".format(testcase.get(\"description\") or \"\", automation_link)","label":0}
{"text":"func (rs Rules) Chain() Chain {\n\tif len(rs) == 0 {\n\t\treturn ChainIdentity\n\t}\n\treturn func(ctx context.Context, e *scheduler.Call, z mesos.Response, err error) (context.Context, *scheduler.Call, mesos.Response, error) {\n\t\treturn rs[0].Eval(ctx, e, z, err, rs[1:].Chain())\n\t}\n}","label":0}
{"text":"func (s *PortSpec) SinglePort() (uint16, error) {\n\tif s.IsMultiPort() {\n\t\treturn 0, errors.New(\"Not a single port specification\")\n\t}\n\n\treturn s.Min, nil\n}","label":0}
{"text":"def call_action(self, service_name, action_name, **kwargs):\n        \"\"\"\"\"\"\n        action = self.services[service_name].actions[action_name]\n        return action.execute(**kwargs)","label":0}
{"text":"def stop(self):\n        \"\"\"\"\"\"\n        if self._outstanding:\n            _LOGGER.warning('There were %d outstanding requests',\n                            len(self._outstanding))\n\n        self._initial_message_sent = False\n        self._outstanding = {}\n        self._one_shots = {}\n        self.connection.close()","label":0}
{"text":"func (c *Client) EditInlineMessageLiveLocation(inlineMessageID string, latitude, longitude float64, opts ...sendOption) error {\n\treq := url.Values{}\n\treq.Set(\"inline_message_id\", inlineMessageID)\n\treq.Set(\"latitude\", fmt.Sprint(latitude))\n\treq.Set(\"longitude\", fmt.Sprint(longitude))\n\tfor _, opt := range opts {\n\t\topt(req)\n\t}\n\tvar edited bool\n\terr := c.doRequest(\"editMessageLiveLocation\", req, &edited)\n\treturn err\n}","label":0}
{"text":"protected static function check_plugin($key=null) {\n\t\tif (\\is_null(static::$_plugin)) {\n\t\t\t\/\/ Pull the remote info and store it for later.\n\t\t\tif (false === ($remote = static::get_release_info('Info URI', static::PLUGIN_TEMPLATE))) {\n\t\t\t\tstatic::$_plugin = false;\n\t\t\t\treturn static::$_plugin;\n\t\t\t}\n\n\t\t\t\/\/ Use the main plugin headers as the basis.\n\t\t\tstatic::$_plugin = \\get_plugin_data(\\BLOBCOMMON_INDEX, false, false);\n\n\t\t\t\/\/ And add in what we pulled remotely.\n\t\t\tstatic::$_plugin['InfoURI'] = $remote['json_uri'];\n\t\t\tstatic::$_plugin['DownloadVersion'] = $remote['Version'];\n\t\t\tstatic::$_plugin['DownloadURI'] = $remote['DownloadURI'];\n\t\t}\n\n\t\t\/\/ Requesting just one key?\n\t\tif (! \\is_null($key)) {\n\t\t\treturn \\array_key_exists($key, static::$_plugin) ? static::$_plugin[$key] : false;\n\t\t}\n\n\t\t\/\/ Send everything!\n\t\treturn static::$_plugin;\n\t}","label":0}
{"text":"func OnActivityFailedTimedOutCanceled(activityName string, deciders ...Decider) Decider {\n\treturn OnActivityEvents(activityName, []string{\n\t\tswf.EventTypeActivityTaskFailed,\n\t\tswf.EventTypeActivityTaskTimedOut,\n\t\tswf.EventTypeActivityTaskCanceled,\n\t\tswf.EventTypeScheduleActivityTaskFailed,\n\t}, deciders...)\n}","label":0}
{"text":"public function writeStream($path, $resource, Config $config)\n    {\n        return $this->upload($path, $resource, $config);\n    }","label":0}
{"text":"public function isValidMD5()\n  {\n    \/\/ Get client secret if available\n    $client     = $this->getClient();\n    $clientSecret = '';\n    if ( ! is_null($client)) {\n      $clientSecret = $client->secret;\n    }\n    unset($client);\n\n    \/\/ Get md5 data from header\n    $md5 = $this->getRequest()->header('CONTENT_MD5');\n    \n    \/\/ Do validation for JSON data\n    if ($this->getRequest()->isJson()) {\n      $content = $this->getRequest()->getContent();\n\n      if (empty($md5) and empty($content)) {\n        return true;\n      }\n\n      return (md5($content.$clientSecret) == $md5);\n    }\n\n    \/\/ Do validation for others than JSON data\n    $input = $this->getRequest()->all();\n\n    if ( ! empty($input)) {\n      foreach($input as $key => $item) {\n        if (str_contains($key, '\/')) {\n          unset($input[$key]);\n        }\n      }\n    }\n\n    if (empty($md5) and empty($input)) {\n      return true;\n    }\n\n    return (md5(http_build_query($input).$clientSecret) == $md5);\n  }","label":0}
{"text":"public function setPhpSingularName($phpSingularName = null)\n    {\n        if (null === $phpSingularName) {\n            $this->phpSingularName = self::generatePhpSingularName($this->getPhpName());\n        } else {\n            $this->phpSingularName = $phpSingularName;\n        }\n    }","label":0}
{"text":"func (t *Template) next() item {\n\tif t.peekCount > 0 {\n\t\tt.peekCount--\n\t} else {\n\t\tt.token[0] = t.lex.nextItem()\n\t}\n\treturn t.token[t.peekCount]\n}","label":0}
{"text":"public function source($path, $override_chroot = false) {\n\t\t\/\/ if chroot is enabled, restrict the path to the chroot\n\t\t$this->Source = Filesystem::chroot($path, $override_chroot);\n\t\t\/\/ return self\n\t\treturn($this);\n\t}","label":0}
{"text":"protected function securityScan()\n    {\n        if (\n            is_array($this->files[$this->input_file_name]) && \n            array_key_exists('name', $this->files[$this->input_file_name]) && \n            array_key_exists('tmp_name', $this->files[$this->input_file_name]) && \n            $this->files[$this->input_file_name]['tmp_name'] != null\n        ) {\n            \/\/ there is an uploaded file.\n            if (is_file($this->files[$this->input_file_name]['tmp_name'])) {\n                $file_content = file_get_contents($this->files[$this->input_file_name]['tmp_name']);\n\n                \/\/ scan php open tag\n                if (stripos($file_content, '<?php') !== false || stripos($file_content, '<?=') !== false) {\n                    \/\/ found php open tag. (<?php).\n                    $this->setErrorMessage(\n                        sprintf(static::__('Error! Found php embedded in the uploaded file. (%s).'), $this->files[$this->input_file_name]['name']),\n                        'RDU_SEC_ERR_PHP',\n                        $this->files[$this->input_file_name]['name'],\n                        $this->files[$this->input_file_name]['name'],\n                        $this->files[$this->input_file_name]['size'],\n                        $this->files[$this->input_file_name]['type']\n                    );\n                    return false;\n                }\n\n                \/\/ scan cgi\/perl\n                if (stripos($file_content, '#!\/') !== false && stripos($file_content, '\/perl') !== false) {\n                    \/\/ found cgi\/perl header.\n                    $this->setErrorMessage(\n                        sprintf(static::__('Error! Found cgi\/perl embedded in the uploaded file. (%s).'), $this->files[$this->input_file_name]['name']),\n                        'RDU_SEC_ERR_CGI',\n                        $this->files[$this->input_file_name]['name'],\n                        $this->files[$this->input_file_name]['name'],\n                        $this->files[$this->input_file_name]['size'],\n                        $this->files[$this->input_file_name]['type']\n                    );\n                    return false;\n                }\n\n                \/\/ scan shell script\n                \/\/ reference: https:\/\/en.wikipedia.org\/wiki\/Shell_script \n                \/\/ https:\/\/stackoverflow.com\/questions\/10591086\/shell-script-headers-bin-sh-vs-bin-csh\n                \/\/ https:\/\/www.shellscript.sh\/\n                if (\n                    stripos($file_content, '#!\/') !== false && \n                    (\n                        stripos($file_content, '\/bin\/sh') !== false ||\n                        stripos($file_content, '\/bin\/bash') !== false ||\n                        stripos($file_content, '\/bin\/csh') !== false ||\n                        stripos($file_content, '\/bin\/tcsh') !== false\n                    )\n                ) {\n                    \/\/ found shell script.\n                    $this->setErrorMessage(\n                        sprintf(static::__('Error! Found shell script embedded in the uploaded file. (%s).'), $this->files[$this->input_file_name]['name']),\n                        'RDU_SEC_ERR_CGI',\n                        $this->files[$this->input_file_name]['name'],\n                        $this->files[$this->input_file_name]['name'],\n                        $this->files[$this->input_file_name]['size'],\n                        $this->files[$this->input_file_name]['type']\n                    );\n                    return false;\n                }\n\n                unset($file_content);\n            }\n        }\n\n        return true;\n    }","label":0}
{"text":"public static function export($options)\n    {\n        $defaults = [\n            'collector' => null,\n            'base_path' => getcwd()\n        ];\n        $options += $defaults;\n\n        $collector = $options['collector'];\n\n        $export = [];\n\n        $base = $options['base_path'] ? rtrim($options['base_path'], DS) . DS : '';\n\n        foreach ($collector->export() as $file => $coverage) {\n            $path = $base . $file;\n            $export[$path] = static::_export($path, $collector->parse($file), $coverage);\n        }\n\n        return json_encode($export);\n    }","label":0}
{"text":"public function setJpegOptim(\\PHPImageOptim\\Tools\\Jpeg\\JpegOptim $jpegOptim)\n    {\n        $this->jpegOptim = $jpegOptim;\n        return $this;\n    }","label":0}
{"text":"public function exec( $command ) {\n\t\t$command .= ' 2>&1';\n\t\t$command = escapeshellcmd( $command );\n\t\texec( $command, $output, $return_var );\n\n\t\treturn [ $output, $return_var ];\n\t}","label":0}
{"text":"func (s *UserError) SetUserId(v string) *UserError {\n\ts.UserId = &v\n\treturn s\n}","label":0}
{"text":"def read_csv(fname):\n    \n    values = defaultdict(list)\n    with open(fname) as f:\n        reader = csv.DictReader(f)\n        for row in reader:\n            for (k,v) in row.items():\n                values[k].append(v)\n    npvalues = {k: np.array(values[k]) for k in values.keys()}\n    for k in npvalues.keys():\n        for datatype in [np.int, np.float]:\n            try:\n                npvalues[k][:1].astype(datatype)\n                npvalues[k] = npvalues[k].astype(datatype)\n                break\n            except:\n                pass\n    dao = DataAccessObject(npvalues)\n    return dao","label":0}
{"text":"ConsumerSessionImpl getConsumer(long id) {\n        if (TraceComponent.isAnyTracingEnabled()\n            && tc.isEntryEnabled())\n            SibTr.entry(tc, \"getConsumer\", new Long(id));\n\n        ConsumerSessionImpl consumer = _consumerList.get(id);\n\n        if (TraceComponent.isAnyTracingEnabled()\n            && tc.isEntryEnabled())\n            SibTr.exit(tc, \"getConsumer\", consumer);\n\n        return consumer;\n    }","label":0}
{"text":"func (c Collector) Clone() Collector {\n\tcol := make(Collector)\n\tcol.Copy(c)\n\treturn col\n}","label":0}
{"text":"public function newTagCreateStruct($parentTagId, $mainLanguageCode)\n    {\n        $tagCreateStruct = new TagCreateStruct();\n        $tagCreateStruct->parentTagId = $parentTagId;\n        $tagCreateStruct->mainLanguageCode = $mainLanguageCode;\n\n        return $tagCreateStruct;\n    }","label":0}
{"text":"func New(config *Config) (*Manager, error) {\n\terr := os.MkdirAll(config.StateDir, 0700)\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, \"failed to create state directory\")\n\t}\n\n\traftStateDir := filepath.Join(config.StateDir, \"raft\")\n\terr = os.MkdirAll(raftStateDir, 0700)\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, \"failed to create raft state directory\")\n\t}\n\n\traftCfg := raft.DefaultNodeConfig()\n\n\tif config.ElectionTick > 0 {\n\t\traftCfg.ElectionTick = int(config.ElectionTick)\n\t}\n\tif config.HeartbeatTick > 0 {\n\t\traftCfg.HeartbeatTick = int(config.HeartbeatTick)\n\t}\n\n\tdekRotator, err := NewRaftDEKManager(config.SecurityConfig.KeyWriter(), config.FIPS)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tnewNodeOpts := raft.NodeOptions{\n\t\tID:              config.SecurityConfig.ClientTLSCreds.NodeID(),\n\t\tJoinAddr:        config.JoinRaft,\n\t\tForceJoin:       config.ForceJoin,\n\t\tConfig:          raftCfg,\n\t\tStateDir:        raftStateDir,\n\t\tForceNewCluster: config.ForceNewCluster,\n\t\tTLSCredentials:  config.SecurityConfig.ClientTLSCreds,\n\t\tKeyRotator:      dekRotator,\n\t\tFIPS:            config.FIPS,\n\t}\n\traftNode := raft.NewNode(newNodeOpts)\n\n\t\/\/ the interceptorWrappers are functions that wrap the prometheus grpc\n\t\/\/ interceptor, and add some of code to log errors locally. one for stream\n\t\/\/ and one for unary. this is needed because the grpc unary interceptor\n\t\/\/ doesn't natively do chaining, you have to implement it in the caller.\n\t\/\/ note that even though these are logging errors, we're still using\n\t\/\/ debug level. returning errors from GRPC methods is common and expected,\n\t\/\/ and logging an ERROR every time a user mistypes a service name would\n\t\/\/ pollute the logs really fast.\n\t\/\/\n\t\/\/ NOTE(dperny): Because of the fact that these functions are very simple\n\t\/\/ in their operation and have no side effects other than the log output,\n\t\/\/ they are not automatically tested. If you modify them later, make _sure_\n\t\/\/ that they are correct. If you add substantial side effects, abstract\n\t\/\/ these out and test them!\n\tunaryInterceptorWrapper := func(ctx context.Context, req interface{}, info *grpc.UnaryServerInfo, handler grpc.UnaryHandler) (interface{}, error) {\n\t\t\/\/ pass the call down into the grpc_prometheus interceptor\n\t\tresp, err := grpc_prometheus.UnaryServerInterceptor(ctx, req, info, handler)\n\t\tif err != nil {\n\t\t\tlog.G(ctx).WithField(\"rpc\", info.FullMethod).WithError(err).Debug(\"error handling rpc\")\n\t\t}\n\t\treturn resp, err\n\t}\n\n\tstreamInterceptorWrapper := func(srv interface{}, ss grpc.ServerStream, info *grpc.StreamServerInfo, handler grpc.StreamHandler) error {\n\t\t\/\/ we can't re-write a stream context, so don't bother creating a\n\t\t\/\/ sub-context like in unary methods\n\t\t\/\/ pass the call down into the grpc_prometheus interceptor\n\t\terr := grpc_prometheus.StreamServerInterceptor(srv, ss, info, handler)\n\t\tif err != nil {\n\t\t\tlog.G(ss.Context()).WithField(\"rpc\", info.FullMethod).WithError(err).Debug(\"error handling streaming rpc\")\n\t\t}\n\t\treturn err\n\t}\n\n\topts := []grpc.ServerOption{\n\t\tgrpc.Creds(config.SecurityConfig.ServerTLSCreds),\n\t\tgrpc.StreamInterceptor(streamInterceptorWrapper),\n\t\tgrpc.UnaryInterceptor(unaryInterceptorWrapper),\n\t\tgrpc.MaxRecvMsgSize(transport.GRPCMaxMsgSize),\n\t}\n\n\tm := &Manager{\n\t\tconfig:          *config,\n\t\tcaserver:        ca.NewServer(raftNode.MemoryStore(), config.SecurityConfig),\n\t\tdispatcher:      dispatcher.New(),\n\t\tlogbroker:       logbroker.New(raftNode.MemoryStore()),\n\t\twatchServer:     watchapi.NewServer(raftNode.MemoryStore()),\n\t\tserver:          grpc.NewServer(opts...),\n\t\tlocalserver:     grpc.NewServer(opts...),\n\t\traftNode:        raftNode,\n\t\tstarted:         make(chan struct{}),\n\t\tdekRotator:      dekRotator,\n\t\tremoteListener:  make(chan net.Listener, 1),\n\t\tcontrolListener: make(chan net.Listener, 1),\n\t\terrServe:        make(chan error, 2),\n\t}\n\n\tif config.ControlAPI != \"\" {\n\t\tm.config.ControlAPI = \"\"\n\t\tif err := m.BindControl(config.ControlAPI); err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\n\tif config.RemoteAPI != nil {\n\t\tm.config.RemoteAPI = nil\n\t\t\/\/ The context isn't used in this case (before (*Manager).Run).\n\t\tif err := m.BindRemote(context.Background(), *config.RemoteAPI); err != nil {\n\t\t\tif config.ControlAPI != \"\" {\n\t\t\t\tl := <-m.controlListener\n\t\t\t\tl.Close()\n\t\t\t}\n\t\t\treturn nil, err\n\t\t}\n\t}\n\n\treturn m, nil\n}","label":0}
{"text":"public RecordWriter<Shard, Text> getRecordWriter(final FileSystem fs,\n      JobConf job, String name, final Progressable progress)\n      throws IOException {\n\n    final Path perm = new Path(getWorkOutputPath(job), name);\n\n    return new RecordWriter<Shard, Text>() {\n      public void write(Shard key, Text value) throws IOException {\n        assert (IndexUpdateReducer.DONE.equals(value));\n\n        String shardName = key.getDirectory();\n        shardName = shardName.replace(\"\/\", \"_\");\n\n        Path doneFile =\n            new Path(perm, IndexUpdateReducer.DONE + \"_\" + shardName);\n        if (!fs.exists(doneFile)) {\n          fs.createNewFile(doneFile);\n        }\n      }\n\n      public void close(final Reporter reporter) throws IOException {\n      }\n    };\n  }","label":0}
{"text":"func NewServer(options *Options) *Server {\n\tif options == nil {\n\t\toptions = &Options{\n\t\t\tLogger: log.New(os.Stdout, \"go-sse: \", log.LstdFlags),\n\t\t}\n\t}\n\n\tif options.Logger == nil {\n\t\toptions.Logger = log.New(ioutil.Discard, \"\", log.LstdFlags)\n\t}\n\n\ts := &Server{\n\t\toptions,\n\t\tmake(map[string]*Channel),\n\t\tmake(chan *Client),\n\t\tmake(chan *Client),\n\t\tmake(chan bool),\n\t\tmake(chan string),\n\t}\n\n\tgo s.dispatch()\n\n\treturn s\n}","label":0}
{"text":"public function get($key, $default = false)\n    {\n        $value = $this->memcached->get($key);\n\n        if ($this->memcached->getResultCode() == 0) {\n            return $value;\n        } else {\n            return $default;\n        }\n    }","label":0}
{"text":"public function mergeConfig($configA, $configB)\n    {\n        $configA = $this->makeConfig($configA);\n\n        $configB = $this->makeConfig($configB);\n\n        return (object) array_merge((array) $configA, (array) $configB);\n    }","label":0}
{"text":"protected ExpectState prepareClosure(int pairIndex, String buffer) {\n        ExpectState state;\n        Map<String, Object> prevMap = null;\n        if (g_state != null) {\n            prevMap = g_state.getVars();\n        }\n\n        state = new ExpectState(pairIndex, buffer, prevMap);\n\n        return state;\n    }","label":0}
{"text":"def _to_dict(self):\n        \"\"\"\"\"\"\n        _dict = {}\n        if hasattr(self, 'fonts') and self.fonts is not None:\n            _dict['fonts'] = [x._to_dict() for x in self.fonts]\n        if hasattr(self, 'styles') and self.styles is not None:\n            _dict['styles'] = [x._to_dict() for x in self.styles]\n        return _dict","label":0}
{"text":"def load_model(path):\n    \"\"\"\"\"\"\n    abspath = find_data(path)\n    cached = _model_cache.get(abspath)\n    if cached is not None:\n        log.debug('Using cached copy of %s' % path)\n        return cached\n    log.debug('Loading model %s' % path)\n    try:\n        with io.open(abspath, 'rb') as f:\n            model = six.moves.cPickle.load(f)\n    except IOError:\n        raise ModelNotFoundError('Could not load %s. Have you run `cde data download`?' % path)\n    _model_cache[abspath] = model\n    return model","label":0}
{"text":"public void reset() {\n    statsComputed.set(false);\n    pos = 0;\n    curSize = 0;\n    total = 0L;\n    mean = 0.0;\n    variance = 0.0;\n    stddev = 0.0;\n    min = 0L;\n    max = 0L;\n    for (int i = 0; i < percentileValues.length; ++i) {\n      percentileValues[i] = 0.0;\n    }\n  }","label":0}
{"text":"protected function getBoundary( $textToBound ) {\n\t\t$boundary = md5( 'php-gpglib' . uniqid( mt_rand(), true ) );\n\t\twhile ( strpos( $textToBound, $boundary ) !== false ) {\n\t\t\t$boundary .= '=_';\n\t\t}\n\t\treturn $boundary;\n\t}","label":0}
{"text":"func (s *AssociationDescription) SetMaxErrors(v string) *AssociationDescription {\n\ts.MaxErrors = &v\n\treturn s\n}","label":0}
{"text":"protected function hasValidCredentials( $acct, $credentials )\n\t{\n\t\treturn !is_null( $acct ) && $this->auth->validateCredentials( $acct, $credentials );\n\t}","label":0}
{"text":"def _compute_C1_term(C, dists):\n    \n\n    c1_dists = np.zeros_like(dists)\n    idx = dists < C['Rc11']\n    c1_dists[idx] = C['phi_11']\n    idx = (dists >= C['Rc11']) & (dists <= C['Rc21'])\n    c1_dists[idx] = C['phi_11'] + (C['phi_21'] - C['phi_11']) * \\\n        ((dists[idx] - C['Rc11']) \/ (C['Rc21'] - C['Rc11']))\n    idx = dists > C['Rc21']\n    c1_dists[idx] = C['phi_21']\n    return c1_dists","label":0}
{"text":"def thermostat_state(self):\n        \n        current_state = self.thermostat_info.active_state\n        state = self.get_thermostat_state_by_id(current_state)\n        if not state:\n            self._logger.debug('Manually set temperature, no Thermostat '\n                               'State chosen!')\n        return state","label":0}
{"text":"public void complete(VirtualConnection vc, TCPWriteRequestContext wsc) {\n\n        if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {\n            Tr.debug(tc, \"complete() called: vc=\" + vc);\n        }\n        HttpOutboundServiceContextImpl mySC = (HttpOutboundServiceContextImpl) vc.getStateMap().get(CallbackIDs.CALLBACK_HTTPOSC);\n        \/\/ LI4335 - handle early reads\n        if (mySC.isEarlyRead()) {\n            if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {\n                Tr.debug(tc, \"Notifying app channel of write complete\");\n            }\n            mySC.getAppWriteCallback().complete(vc);\n            return;\n        }\n        \/\/ if only the headers have been sent, then we need to check some\n        \/\/ special case handling scenarios\n        \/\/ 381105 - only start response read after just the headers have been\n        \/\/ sent and no body... eventually need to get the isPartialBody state\n        \/\/ implemented to make this simpler.\n        if (mySC.isHeadersSentState() && 0 == mySC.getNumBytesWritten()) {\n            if (mySC.shouldReadResponseImmediately()) {\n                if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {\n                    Tr.debug(tc, \"Sent headers, reading for response\");\n                }\n                mySC.startResponseRead();\n                return;\n            }\n        }\n\n        \/\/ if we're here and we need to, notify the channel above that the\n        \/\/ write has completed, otherwise start the read for the response\n        \/\/ message\n        if (!mySC.isMessageSent()) {\n            if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {\n                Tr.debug(tc, \"Calling write complete callback of app channel.\");\n            }\n            mySC.getAppWriteCallback().complete(vc);\n        } else {\n            if (mySC.shouldReadResponseImmediately()) {\n                \/\/ we've already done the \"read first\" call so jump to the\n                \/\/ regular method now\n                mySC.readAsyncResponse();\n            } else {\n                \/\/ initial read for a response\n                mySC.startResponseRead();\n            }\n        }\n    }","label":0}
{"text":"private static BiFunction<HttpClientRequest, NettyOutbound, Publisher<Void>> bodySendDelegate(final HttpRequest restRequest) {\n        BiFunction<HttpClientRequest, NettyOutbound, Publisher<Void>> sendDelegate = (reactorNettyRequest, reactorNettyOutbound) -> {\n            for (HttpHeader header : restRequest.headers()) {\n                reactorNettyRequest.header(header.name(), header.value());\n            }\n            if (restRequest.body() != null) {\n                Flux<ByteBuf> nettyByteBufFlux = restRequest.body().map(Unpooled::wrappedBuffer);\n                return reactorNettyOutbound.send(nettyByteBufFlux);\n            } else {\n                return reactorNettyOutbound;\n            }\n        };\n        return sendDelegate;\n    }","label":0}
{"text":"public function index(Request $request)\n\t{\n\t\t\n\t\t$posts = Post::all();\n\t\t\n\t\t$bestTag = Tag::with('postCount')->get()->sortByDesc('postCount');\n\t\t\n\t\t$bestCat = Category::with('postCount')->get()->sortByDesc('postCount');\n\t\t\n\t\t\\Debugbar::info($bestTag);\n\t\t\n\t\treturn view('maikblog::table', [\n\t\t\t\t'posts' => $posts,\n\t\t\t\t'best_tag' => $bestTag,\n\t\t\t\t'best_cat' => $bestCat,\n\t\t]);\n\t}","label":0}
{"text":"public static String getClientConfigurationUri(final OidcRegisteredService registeredService,\n                                                   final String serverPrefix) throws URISyntaxException {\n        return new URIBuilder(serverPrefix\n            .concat('\/' + OidcConstants.BASE_OIDC_URL + '\/' + OidcConstants.CLIENT_CONFIGURATION_URL))\n            .addParameter(OidcConstants.CLIENT_REGISTRATION_CLIENT_ID, registeredService.getClientId())\n            .build()\n            .toString();\n    }","label":0}
{"text":"function (pageData) {\n    var pageUrl = this.url;\n    if (pageData && pageData.pathValues && pageData.pathValues.length > 0){\n      pageUrl.match(\/\\${\\w+}\/gi).forEach(function(placeholder,i){\n        pageUrl = pageUrl.replace(placeholder, pageData.pathValues[i]);\n      });\n    }\n\n    var hasProtocol = !!(pageUrl || '').match('^https?:\\\/\\\/');\n    var urlObj = url.parse(hasProtocol ? pageUrl : config.baseUrl + pageUrl);\n\n    if (pageData && pageData.querystring) {\n      urlObj.search = pageData.querystring;\n    }\n\n    return session.getDriver().get(url.format(urlObj))\n    .then(function() {\n      if (typeof this.onLoad === 'function') {\n        return session.execute(this.onLoad);\n      }\n    }.bind(this));\n  }","label":0}
{"text":"public static Iterator<String> iterator(Reader self) {\n        final BufferedReader bufferedReader;\n        if (self instanceof BufferedReader)\n            bufferedReader = (BufferedReader) self;\n        else\n            bufferedReader = new BufferedReader(self);\n        return new Iterator<String>() {\n            String nextVal \/* = null *\/;\n            boolean nextMustRead = true;\n            boolean hasNext = true;\n\n            public boolean hasNext() {\n                if (nextMustRead && hasNext) {\n                    try {\n                        nextVal = readNext();\n                        nextMustRead = false;\n                    } catch (IOException e) {\n                        hasNext = false;\n                    }\n                }\n                return hasNext;\n            }\n\n            public String next() {\n                String retval = null;\n                if (nextMustRead) {\n                    try {\n                        retval = readNext();\n                    } catch (IOException e) {\n                        hasNext = false;\n                    }\n                } else\n                    retval = nextVal;\n                nextMustRead = true;\n                return retval;\n            }\n\n            private String readNext() throws IOException {\n                String nv = bufferedReader.readLine();\n                if (nv == null)\n                    hasNext = false;\n                return nv;\n            }\n\n            public void remove() {\n                throw new UnsupportedOperationException(\"Cannot remove() from a Reader Iterator\");\n            }\n        };\n    }","label":0}
{"text":"public static void main(String[] args) {\n\t\tif (args.length == 0) {\n\t\t\tSystem.out.println(\n\t\t\t\t\"Usage: BGZFBlockIndex [BGZF block indices...]\\n\\n\"+\n\n\t\t\t\t\"Writes a few statistics about each BGZF block index.\");\n\t\t\treturn;\n\t\t}\n\n\t\tfor (String arg : args) {\n\t\t\tfinal File f = new File(arg);\n\t\t\tif (f.isFile() && f.canRead()) {\n\t\t\t\ttry {\n\t\t\t\t\tSystem.err.printf(\"%s:\\n\", f);\n\t\t\t\t\tfinal BGZFBlockIndex bi = new BGZFBlockIndex(f);\n\t\t\t\t\tfinal long second = bi.secondBlock();\n\t\t\t\t\tfinal long last   = bi.lastBlock();\n\t\t\t\t\tSystem.err.printf(\n\t\t\t\t\t\t\"\\t%d blocks\\n\" +\n\t\t\t\t\t\t\"\\tfirst after 0 is at %#014x\\n\" +\n\t\t\t\t\t\t\"\\tlast          is at %#014x\\n\" +\n\t\t\t\t\t\t\"\\tassociated BGZF file size %d\\n\",\n\t\t\t\t\t\tbi.size()-1,\n\t\t\t\t\t\tbi.secondBlock(), bi.lastBlock(), bi.fileSize());\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\tSystem.err.printf(\"Failed to read %s!\\n\", f);\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t} else\n\t\t\t\tSystem.err.printf(\"%s does not look like a readable file!\\n\", f);\n\t\t}\n\t}","label":0}
{"text":"func (c *connectionBenchmark) runFullThrottle() (time.Duration, error) {\n\tvar (\n\t\tstop  = time.After(c.duration)\n\t\tstart = time.Now()\n\t)\n\tfor {\n\t\tselect {\n\t\tcase <-stop:\n\t\t\treturn time.Since(start), nil\n\t\tdefault:\n\t\t}\n\n\t\tbefore := time.Now()\n\t\terr := c.requester.Request()\n\t\tlatency := time.Since(before).Nanoseconds()\n\t\tif err != nil {\n\t\t\tif err := c.errorHistogram.RecordValue(latency); err != nil {\n\t\t\t\treturn 0, err\n\t\t\t}\n\t\t\tc.errorTotal++\n\t\t} else {\n\t\t\tif err := c.successHistogram.RecordValue(latency); err != nil {\n\t\t\t\treturn 0, err\n\t\t\t}\n\t\t\tc.successTotal++\n\t\t}\n\t}\n}","label":0}
{"text":"private function loadTimezone() {\n\t\t\n\t\tif (!is_null($this->id) and (is_null($this->tzName) or is_null($this->tzOffset))) {\n\t\t\t\n\t\t\t$this->db->setQuery('SELECT timezone_name, timezone_offset FROM `sessions` WHERE id_user = ?');\n\t\t\t$obj = $this->db->loadObject($this->id);\n\t\t\t$this->tzOffset\t= $obj->timezone_offset;\n\t\t\t$this->tzName\t= $obj->timezone_name;\n\t\t\t\n\t\t}\n\t\t\n\t}","label":0}
{"text":"public function local_dates($config = array())\n    {\n        $html   = '';\n        $months = array();\n\n        $translator = $this->getObject('translator');\n\n        for ($i = 1; $i < 13; $i++)\n        {\n            $month  = strtoupper(date('F', mktime(0, 0, 0, $i, 1, 2000)));\n            $long  = $translator->translate($month);\n            $short = $translator->translate($month.'_SHORT');\n\n            if (strpos($short, '_SHORT') !== false) {\n                $short = $long;\n            }\n\n            $months[$i] = array('long' => $long, 'short' => $short);\n        }\n\n        if (!static::isLoaded('local_dates'))\n        {\n            $html = sprintf(\"\n            <script>\n            if(!Koowa) {\n                var Koowa = {};\n            }\n\n            if (!Koowa.Date) {\n                Koowa.Date = {};\n            }\n\n            Koowa.Date.local_month_names = %s;\n            Koowa.Date.getMonthName = function(month, short) {\n                month = parseInt(month, 10);\n\n                if (month < 1 || month > 12) {\n                    throw 'Month index should be between 1 and 12';\n                }\n\n                return Koowa.Date.local_month_names[month][short ? 'short' : 'long'];\n            };\n            <\/script>\n            \", json_encode($months));\n\n            static::setLoaded('local_dates');\n        }\n\n        return $html;\n    }","label":0}
{"text":"def delete_cached(task_id, broker=None):\n    \n    if not broker:\n        broker = get_broker()\n    return broker.cache.delete('{}:{}'.format(broker.list_key, task_id))","label":0}
{"text":"def update(\n    ctx,\n    state,\n    bare=False,\n    dry_run=None,\n    outdated=False,\n    **kwargs\n):\n    \"\"\"\"\"\"\n    from ..core import (\n        ensure_project,\n        do_outdated,\n        do_lock,\n        do_sync,\n        project,\n    )\n\n    ensure_project(three=state.three, python=state.python, warn=True, pypi_mirror=state.pypi_mirror)\n    if not outdated:\n        outdated = bool(dry_run)\n    if outdated:\n        do_outdated(pypi_mirror=state.pypi_mirror)\n    packages = [p for p in state.installstate.packages if p]\n    editable = [p for p in state.installstate.editables if p]\n    if not packages:\n        echo(\n            \"{0} {1} {2} {3}{4}\".format(\n                crayons.white(\"Running\", bold=True),\n                crayons.red(\"$ pipenv lock\", bold=True),\n                crayons.white(\"then\", bold=True),\n                crayons.red(\"$ pipenv sync\", bold=True),\n                crayons.white(\".\", bold=True),\n            )\n        )\n    else:\n        for package in packages + editable:\n            if package not in project.all_packages:\n                echo(\n                    \"{0}: {1} was not found in your Pipfile! Aborting.\"\n                    \"\".format(\n                        crayons.red(\"Warning\", bold=True),\n                        crayons.green(package, bold=True),\n                    ),\n                    err=True,\n                )\n                ctx.abort()\n\n    do_lock(\n        clear=state.clear,\n        pre=state.installstate.pre,\n        keep_outdated=state.installstate.keep_outdated,\n        pypi_mirror=state.pypi_mirror,\n    )\n    do_sync(\n        ctx=ctx,\n        dev=state.installstate.dev,\n        three=state.three,\n        python=state.python,\n        bare=bare,\n        dont_upgrade=not state.installstate.keep_outdated,\n        user=False,\n        clear=state.clear,\n        unused=False,\n        sequential=state.installstate.sequential,\n        pypi_mirror=state.pypi_mirror,\n    )","label":0}
{"text":"public static function InClusterConfig()\n    {\n        $config = new Config();\n        $config->setToken(file_get_contents('\/var\/run\/secrets\/kubernetes.io\/serviceaccount\/token'));\n        $config->setCertificateAuthorityPath('\/var\/run\/secrets\/kubernetes.io\/serviceaccount\/ca.crt');\n        $config->setServer('https:\/\/kubernetes.default.svc');\n\n        return $config;\n    }","label":0}
{"text":"function (path) {\n        if (path && path.match(\/^data:(.*?)base64,\/)) {\n            return path;\n        }\n\n        var rootPath = this.textureRootPath;\n        if (rootPath == null) {\n            rootPath = this.rootPath;\n        }\n        return util$1.relative2absolute(path, rootPath);\n    }","label":0}
{"text":"def ssl connection\n    connection.use_ssl = true\n\n    connection.ciphers     = @ciphers     if @ciphers\n    connection.ssl_timeout = @ssl_timeout if @ssl_timeout\n    connection.ssl_version = @ssl_version if @ssl_version\n\n    connection.verify_depth = @verify_depth\n    connection.verify_mode  = @verify_mode\n\n    if OpenSSL::SSL::VERIFY_PEER == OpenSSL::SSL::VERIFY_NONE and\n       not Object.const_defined?(:I_KNOW_THAT_OPENSSL_VERIFY_PEER_EQUALS_VERIFY_NONE_IS_WRONG) then\n      warn <<-WARNING\n                             !!!SECURITY WARNING!!!\n\nThe SSL HTTP connection to:\n\n  #{connection.address}:#{connection.port}\n\n                           !!!MAY NOT BE VERIFIED!!!\n\nOn your platform your OpenSSL implementation is broken.\n\nThere is no difference between the values of VERIFY_NONE and VERIFY_PEER.\n\nThis means that attempting to verify the security of SSL connections may not\nwork.  This exposes you to man-in-the-middle exploits, snooping on the\ncontents of your connection and other dangers to the security of your data.\n\nTo disable this warning define the following constant at top-level in your\napplication:\n\n  I_KNOW_THAT_OPENSSL_VERIFY_PEER_EQUALS_VERIFY_NONE_IS_WRONG = nil\n\n      WARNING\n    end\n\n    connection.ca_file = @ca_file if @ca_file\n    connection.ca_path = @ca_path if @ca_path\n\n    if @ca_file or @ca_path then\n      connection.verify_callback = @verify_callback if @verify_callback\n    end\n\n    if @certificate and @private_key then\n      connection.cert = @certificate\n      connection.key  = @private_key\n    end\n\n    connection.cert_store = if @cert_store then\n                              @cert_store\n                            else\n                              store = OpenSSL::X509::Store.new\n                              store.set_default_paths\n                              store\n                            end\n  end","label":0}
{"text":"function destroy(oListener) {\n\t\tfor (var n in mTargets) {\n\t\t\tvar oTargetConfig = mTargets[n];\n\t\t\tfor (var i = 0; i < oTargetConfig.listeners.length; i++) {\n\t\t\t\tif (oTargetConfig.listeners[i] === oListener) {\n\t\t\t\t\toTargetConfig.listeners.splice(i, 1);\n\t\t\t\t\toTargetConfig.configurations.splice(i, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (oTargetConfig.listeners && oTargetConfig.listeners.length === 0) {\n\t\t\t\tdelete mTargets[n];\n\t\t\t\toTargetConfig.object._observer = undefined;\n\t\t\t}\n\t\t}\n\t}","label":0}
{"text":"private void initializeSortOrderMap() {\n        try {\n            Document document = createDocumentFromDefaultSortOrderFile();\n            addElementsToSortOrderMap(document.getRootElement(), SORT_ORDER_BASE);\n        } catch (IOException | JDOMException e) {\n            throw new FailureException(e.getMessage(), e);\n        }\n    }","label":0}
{"text":"public int readRawLittleEndian32() throws IOException\n    {\n        \/\/ final byte[] buffer = this.buffer;\n        \/\/ int offset = this.offset;\n\n        final byte[] bs = new byte[4];\n        buffer.get(bs);\n\n        \/\/ final byte b1 = buffer[offset++];\n        \/\/ final byte b2 = buffer[offset++];\n        \/\/ final byte b3 = buffer[offset++];\n        \/\/ final byte b4 = buffer[offset++];\n        \/\/\n        \/\/ this.offset = offset;\n\n        return (((int) bs[0] & 0xff)) |\n                (((int) bs[1] & 0xff) << 8) |\n                (((int) bs[2] & 0xff) << 16) |\n                (((int) bs[3] & 0xff) << 24);\n    }","label":0}
{"text":"def get_drill_bits_d_imperial():\n    \"\"\"\"\"\"\n    step_32nd = np.arange(0.03125, 0.25, 0.03125)\n    step_8th = np.arange(0.25, 1.0, 0.125)\n    step_4th = np.arange(1.0, 2.0, 0.25)\n    maximum = [2.0]\n\n    return np.concatenate((step_32nd,\n                           step_8th,\n                           step_4th,\n                           maximum)) * u.inch","label":0}
{"text":"public function jsonSerialize() {\n    $valid =\n      (!isset($this->initialAlpha) ||\n        $this->validateInitialAlpha($this->initialAlpha)) &&\n      (!isset($this->initialScale) ||\n        $this->validateInitialScale($this->initialScale));\n    if (!$valid) {\n      return NULL;\n    }\n    return parent::jsonSerialize();\n  }","label":0}
{"text":"func (s *BaiduMessage) SetSilentPush(v bool) *BaiduMessage {\n\ts.SilentPush = &v\n\treturn s\n}","label":0}
{"text":"def write_handle(self, handle: int, value: bytes):\n        # noqa: C901\n        # pylint: disable=arguments-differ\n\n        \n\n        if not self.is_connected():\n            raise BluetoothBackendException('Not connected to any device.')\n\n        attempt = 0\n        delay = 10\n        _LOGGER.debug(\"Enter write_ble (%s)\", current_thread())\n\n        while attempt <= self.retries:\n            cmd = \"gatttool --device={} --addr-type={} --char-write-req -a {} -n {} --adapter={}\".format(\n                self._mac, self.address_type, self.byte_to_handle(handle), self.bytes_to_string(value), self.adapter)\n            _LOGGER.debug(\"Running gatttool with a timeout of %d: %s\",\n                          self.timeout, cmd)\n\n            with Popen(cmd,\n                       shell=True,\n                       stdout=PIPE,\n                       stderr=PIPE,\n                       preexec_fn=os.setsid) as process:\n                try:\n                    result = process.communicate(timeout=self.timeout)[0]\n                    _LOGGER.debug(\"Finished gatttool\")\n                except TimeoutExpired:\n                    # send signal to the process group\n                    os.killpg(process.pid, signal.SIGINT)\n                    result = process.communicate()[0]\n                    _LOGGER.debug(\"Killed hanging gatttool\")\n\n            result = result.decode(\"utf-8\").strip(' \\n\\t')\n            if \"Write Request failed\" in result:\n                raise BluetoothBackendException('Error writing handle to sensor: {}'.format(result))\n            _LOGGER.debug(\"Got %s from gatttool\", result)\n            # Parse the output\n            if \"successfully\" in result:\n                _LOGGER.debug(\n                    \"Exit write_ble with result (%s)\", current_thread())\n                return True\n\n            attempt += 1\n            _LOGGER.debug(\"Waiting for %s seconds before retrying\", delay)\n            if attempt < self.retries:\n                time.sleep(delay)\n                delay *= 2\n\n        raise BluetoothBackendException(\"Exit write_ble, no data ({})\".format(current_thread()))","label":0}
{"text":"public function clearcacheAction() {\n        $request = $this->getRequest();\n        $tags = array();\n        if ($request->getParam('tags')) {\n            $tags = explode(',', $request->getParam('tags'));\n        }\n        $createClusterJob = is_null($request->getParam('createClusterJob')) ? 1 :\n            $request->getParam('createClusterJob');\n\n        $this->view->title = 'Clear that cache';\n        Garp_Cache_Manager::purge($tags, $createClusterJob);\n    }","label":0}
{"text":"protected function parseAction($action)\n\t{\n\t\t\/\/ If the action is already a Closure instance, we will just set that instance\n\t\t\/\/ as the \"uses\" property, because there is nothing else we need to do when\n\t\t\/\/ it is available. Otherwise we will need to find it in the action list.\n\t\tif ($action instanceof Closure)\n\t\t{\n\t\t\treturn array('uses' => $action);\n\t\t}\n\n\t\t\/\/ If no \"uses\" property has been set, we will dig through the array to find a\n\t\t\/\/ Closure instance within this list. We will set the first Closure we come\n\t\t\/\/ across into the \"uses\" property that will get fired off by this route.\n\t\telseif ( ! isset($action['uses']))\n\t\t{\n\t\t\t$action['uses'] = $this->findClosure($action);\n\t\t}\n\n\t\treturn $action;\n\t}","label":0}
{"text":"func parseArgs(funcName string, args ...interface{}) (string, error) {\n\tif len(args) != 1 {\n\t\treturn \"\", fmt.Errorf(\"invalid arguments to %s.%s -- \"+\n\t\t\t\"expected database path\", dbType, funcName)\n\t}\n\n\tdbPath, ok := args[0].(string)\n\tif !ok {\n\t\treturn \"\", fmt.Errorf(\"first argument to %s.%s is invalid -- \"+\n\t\t\t\"expected database path string\", dbType, funcName)\n\t}\n\n\treturn dbPath, nil\n}","label":0}
{"text":"public Proxy setAutodetect(boolean autodetect) {\n    if (this.autodetect == autodetect) {\n      return this;\n    }\n    if (autodetect) {\n      verifyProxyTypeCompatibility(ProxyType.AUTODETECT);\n      this.proxyType = ProxyType.AUTODETECT;\n    } else {\n      this.proxyType = ProxyType.UNSPECIFIED;\n    }\n    this.autodetect = autodetect;\n    return this;\n  }","label":0}
{"text":"func (kl *Kubelet) GetPodCgroupParent(pod *v1.Pod) string {\n\tpcm := kl.containerManager.NewPodContainerManager()\n\t_, cgroupParent := pcm.GetPodContainerName(pod)\n\treturn cgroupParent\n}","label":0}
{"text":"function authorize(ctx) {\n  var fn = lookup(ctx.operation, 'middleware', 'authorize');\n  var prefix = describe(ctx);\n\n  if (fn) {\n    return fn(ctx);\n  } else {\n    debug(prefix + 'authorize middleware disabled (not defined)');\n  }\n}","label":0}
{"text":"def flush_all(self, time):\n        \n        logger.info('Flushing memcached')\n        self._send(struct.pack(self.HEADER_STRUCT +\n                               self.COMMANDS['flush']['struct'],\n                               self.MAGIC['request'],\n                               self.COMMANDS['flush']['command'],\n                               0, 4, 0, 0, 4, 0, 0, time))\n\n        (magic, opcode, keylen, extlen, datatype, status, bodylen, opaque,\n         cas, extra_content) = self._get_response()\n\n        if status not in (self.STATUS['success'], self.STATUS['server_disconnected']):\n            raise MemcachedException('Code: %d message: %s' % (status, extra_content), status)\n\n        logger.debug('Memcached flushed')\n        return True","label":0}
{"text":"function (mode, index, item) {\n\/*Line 376 - 'AtomItemsControl.js' *\/                if (!this._created)\n\/*Line 377 - 'AtomItemsControl.js' *\/                    return;\n\n\/*Line 379 - 'AtomItemsControl.js' *\/                Atom.refresh(this, \"allValues\");\n\n\/*Line 381 - 'AtomItemsControl.js' *\/                var value = this.get_value();\n\n\/*Line 383 - 'AtomItemsControl.js' *\/                if (this.hasItems()) {\n\/*Line 384 - 'AtomItemsControl.js' *\/                    this.onCollectionChanged(mode, index, item);\n\/*Line 385 - 'AtomItemsControl.js' *\/                    \/\/this._selectedItems.length = 0;\n\/*Line 386 - 'AtomItemsControl.js' *\/                    if (!(value || this._allowSelectFirst)) {\n\/*Line 387 - 'AtomItemsControl.js' *\/                        AtomBinder.clear(this._selectedItems);\n\/*Line 388 - 'AtomItemsControl.js' *\/                    }\n\/*Line 389 - 'AtomItemsControl.js' *\/                }\n\n\n\/*Line 392 - 'AtomItemsControl.js' *\/                if (value != null) {\n\/*Line 393 - 'AtomItemsControl.js' *\/                    this.set_value(value);\n\/*Line 394 - 'AtomItemsControl.js' *\/                    if (this.get_selectedIndex() != -1)\n\/*Line 395 - 'AtomItemsControl.js' *\/                        return;\n\/*Line 396 - 'AtomItemsControl.js' *\/                }\n\n\/*Line 398 - 'AtomItemsControl.js' *\/                this.selectDefault();\n\n\/*Line 400 - 'AtomItemsControl.js' *\/            }","label":0}
{"text":"private function isAssociative(array $array)\n    {\n        if ($array === []) {\n            return false;\n        }\n\n        $expected = 0;\n\n        foreach ($array as $key => $_) {\n            if ($key !== $expected++) {\n                return true;\n            }\n        }\n\n        return false;\n    }","label":0}
{"text":"func RedisLogColorizer(wr io.Writer) io.Writer {\n\tif !istty(wr) {\n\t\treturn wr\n\t}\n\tpr, pw := io.Pipe()\n\tgo func() {\n\t\trd := bufio.NewReader(pr)\n\t\tfor {\n\t\t\tline, err := rd.ReadString('\\n')\n\t\t\tif err != nil {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tparts := strings.Split(line, \" \")\n\t\t\tif len(parts) > 5 {\n\t\t\t\tvar color string\n\t\t\t\tswitch parts[4] {\n\t\t\t\tcase \".\":\n\t\t\t\t\tcolor = \"\\x1b[35m\"\n\t\t\t\tcase \"-\":\n\t\t\t\t\tcolor = \"\"\n\t\t\t\tcase \"*\":\n\t\t\t\t\tcolor = \"\\x1b[1m\"\n\t\t\t\tcase \"#\":\n\t\t\t\t\tcolor = \"\\x1b[33m\"\n\t\t\t\t}\n\t\t\t\tif color != \"\" {\n\t\t\t\t\tparts[4] = color + parts[4] + \"\\x1b[0m\"\n\t\t\t\t\tline = strings.Join(parts, \" \")\n\t\t\t\t}\n\t\t\t}\n\t\t\tos.Stdout.Write([]byte(line))\n\t\t\tcontinue\n\t\t}\n\t}()\n\treturn pw\n}","label":0}
{"text":"protected function generateEnvironments(\\DOMNode $portalNode, Portal $portal)\n    {\n        foreach ($this->xpath->query('x:environments\/x:environment', $portalNode) as $environmentNode) {\n            \/** @var \\DOMNode $environmentNode *\/\n            $environment = new Environment();\n            $environment->setType($environmentNode->attributes->getNamedItem('type')->nodeValue);\n\n            $this->generateUrls($environmentNode, $environment);\n            $this->generateCustomUrls($environmentNode, $environment);\n\n            $portal->addEnvironment($environment);\n        }\n    }","label":0}
{"text":"def report(self):\n        \n        output = OrderedDict()\n\n        for arg in GLOBAL_ARGUMENTS:\n            output[arg] = getattr(self.args, arg) or self.config.get(arg, None)\n\n        output['title'] = getattr(self.args, 'title') or self.config.get('title', 'Untitled Report')\n        output['run_date'] = datetime.now().strftime('%Y-%m-%d')\n        output['queries'] = []\n\n        for analytic in self.config.get('queries', []):\n            print 'Querying \"%s\"' % analytic['name']\n\n            results = self.query(\n                metrics=analytic['metrics'],\n                dimensions=analytic.get('dimensions', []),\n                filters=analytic.get('filter', None),\n                segment=analytic.get('segment', None),\n                sort=analytic.get('sort', []),\n                start_index=analytic.get('start-index', 1),\n                max_results=analytic.get('max-results', 10)\n            )\n            \n            dimensions_len = len(analytic.get('dimensions', []))\n\n            data = OrderedDict([ \n                ('config', analytic),\n                ('sampled', results.get('containsSampledData', False)),\n                ('sampleSize', int(results.get('sampleSize', 0))),\n                ('sampleSpace', int(results.get('sampleSpace', 0))),\n                ('data_types', OrderedDict()),\n                ('data', OrderedDict())\n            ])\n                    \n            for column in results['columnHeaders'][dimensions_len:]:\n                data['data_types'][column['name']] = column['dataType']\n\n            def cast_data_type(d, dt):\n                if dt == 'INTEGER':\n                    return int(d)\n                elif data_type in ['TIME', 'FLOAT', 'CURRENCY', 'PERCENT']:  \n                    return float(d)\n                else:\n                    raise Exception('Unknown metric data type: %s' % data_type)\n\n            for i, metric in enumerate(analytic['metrics']):\n                data['data'][metric] = OrderedDict()\n                data_type = data['data_types'][metric]\n\n                if dimensions_len:\n                    for row in results.get('rows', []):\n                        column = i + dimensions_len\n                        label = ','.join(row[:dimensions_len]) \n                        value = cast_data_type(row[column], data_type)\n\n                        data['data'][metric][label] = value \n\n                data['data'][metric]['total'] = cast_data_type(results['totalsForAllResults'][metric], data_type)\n\n                # Prevent rate-limiting\n                sleep(1)\n\n            output['queries'].append(data)\n\n        return output","label":0}
{"text":"def _protect_consolidate(self, f):\n        \n        blocks_before = len(self._data.blocks)\n        result = f()\n        if len(self._data.blocks) != blocks_before:\n            self._clear_item_cache()\n        return result","label":0}
{"text":"public final EObject ruleRichStringLiteralStart() throws RecognitionException {\n        EObject current = null;\n\n        Token lv_value_1_0=null;\n\n\n        \tenterRule();\n\n        try {\n            \/\/ InternalSARL.g:10871:2: ( ( () ( (lv_value_1_0= RULE_RICH_TEXT_START ) ) ) )\n            \/\/ InternalSARL.g:10872:2: ( () ( (lv_value_1_0= RULE_RICH_TEXT_START ) ) )\n            {\n            \/\/ InternalSARL.g:10872:2: ( () ( (lv_value_1_0= RULE_RICH_TEXT_START ) ) )\n            \/\/ InternalSARL.g:10873:3: () ( (lv_value_1_0= RULE_RICH_TEXT_START ) )\n            {\n            \/\/ InternalSARL.g:10873:3: ()\n            \/\/ InternalSARL.g:10874:4: \n            {\n            if ( state.backtracking==0 ) {\n\n              \t\t\t\tcurrent = forceCreateModelElement(\n              \t\t\t\t\tgrammarAccess.getRichStringLiteralStartAccess().getRichStringLiteralAction_0(),\n              \t\t\t\t\tcurrent);\n              \t\t\t\n            }\n\n            }\n\n            \/\/ InternalSARL.g:10880:3: ( (lv_value_1_0= RULE_RICH_TEXT_START ) )\n            \/\/ InternalSARL.g:10881:4: (lv_value_1_0= RULE_RICH_TEXT_START )\n            {\n            \/\/ InternalSARL.g:10881:4: (lv_value_1_0= RULE_RICH_TEXT_START )\n            \/\/ InternalSARL.g:10882:5: lv_value_1_0= RULE_RICH_TEXT_START\n            {\n            lv_value_1_0=(Token)match(input,RULE_RICH_TEXT_START,FOLLOW_2); if (state.failed) return current;\n            if ( state.backtracking==0 ) {\n\n              \t\t\t\t\tnewLeafNode(lv_value_1_0, grammarAccess.getRichStringLiteralStartAccess().getValueRICH_TEXT_STARTTerminalRuleCall_1_0());\n              \t\t\t\t\n            }\n            if ( state.backtracking==0 ) {\n\n              \t\t\t\t\tif (current==null) {\n              \t\t\t\t\t\tcurrent = createModelElement(grammarAccess.getRichStringLiteralStartRule());\n              \t\t\t\t\t}\n              \t\t\t\t\tsetWithLastConsumed(\n              \t\t\t\t\t\tcurrent,\n              \t\t\t\t\t\t\"value\",\n              \t\t\t\t\t\tlv_value_1_0,\n              \t\t\t\t\t\t\"org.eclipse.xtend.core.Xtend.RICH_TEXT_START\");\n              \t\t\t\t\n            }\n\n            }\n\n\n            }\n\n\n            }\n\n\n            }\n\n            if ( state.backtracking==0 ) {\n\n              \tleaveRule();\n\n            }\n        }\n\n            catch (RecognitionException re) {\n                recover(input,re);\n                appendSkippedTokens();\n            }\n        finally {\n        }\n        return current;\n    }","label":0}
{"text":"function setupScrollbarEvents(isHorizontal) {\n                    var scrollbarVars = getScrollbarVars(isHorizontal);\n                    var scrollbarVarsInfo = scrollbarVars._info;\n                    var insideIFrame = _windowElementNative.top !== _windowElementNative;\n                    var xy = scrollbarVars._x_y;\n                    var XY = scrollbarVars._X_Y;\n                    var scroll = _strScroll + scrollbarVars._Left_Top;\n                    var strActive = 'active';\n                    var strSnapHandle = 'snapHandle';\n                    var scrollDurationFactor = 1;\n                    var increaseDecreaseScrollAmountKeyCodes = [ 16, 17 ]; \/\/shift, ctrl\n                    var trackTimeout;\n                    var mouseDownScroll;\n                    var mouseDownOffset;\n                    var mouseDownInvertedScale;\n\n                    function getPointerPosition(event) {\n                        return _msieVersion && insideIFrame ? event['screen' + XY] : COMPATIBILITY.page(event)[xy]; \/\/use screen coordinates in EDGE & IE because the page values are incorrect in frames.\n                    }\n                    function getPreparedScrollbarsOption(name) {\n                        return _currentPreparedOptions.scrollbars[name];\n                    }\n                    function increaseTrackScrollAmount() {\n                        scrollDurationFactor = 0.5;\n                    }\n                    function decreaseTrackScrollAmount() {\n                        scrollDurationFactor = 1;\n                    }\n                    function documentKeyDown(event) {\n                        if (FRAMEWORK.inArray(event.keyCode, increaseDecreaseScrollAmountKeyCodes) > -1)\n                            increaseTrackScrollAmount();\n                    }\n                    function documentKeyUp(event) {\n                        if (FRAMEWORK.inArray(event.keyCode, increaseDecreaseScrollAmountKeyCodes) > -1)\n                            decreaseTrackScrollAmount();\n                    }\n                    function onMouseTouchDownContinue(event) {\n                        var originalEvent = event.originalEvent || event;\n                        var isTouchEvent = originalEvent.touches !== undefined;\n                        return _isSleeping || _destroyed || nativeOverlayScrollbarsAreActive() || !_scrollbarsDragScrollingCache || (isTouchEvent && !getPreparedScrollbarsOption('touchSupport')) ? false : COMPATIBILITY.mBtn(event) === 1 || isTouchEvent;\n                    }\n                    function documentDragMove(event) {\n                        if(onMouseTouchDownContinue(event)) {\n                            var trackLength = scrollbarVarsInfo._trackLength;\n                            var handleLength = scrollbarVarsInfo._handleLength;\n                            var scrollRange = scrollbarVarsInfo._maxScroll;\n                            var scrollRaw = (getPointerPosition(event) - mouseDownOffset) * mouseDownInvertedScale;\n                            var scrollDeltaPercent = scrollRaw \/ (trackLength - handleLength);\n                            var scrollDelta = (scrollRange * scrollDeltaPercent);\n                            scrollDelta = isFinite(scrollDelta) ? scrollDelta : 0;\n                            if (_isRTL && isHorizontal && !_rtlScrollBehavior.i)\n                                scrollDelta *= -1;\n\n                            _viewportElement[scroll](MATH.round(mouseDownScroll + scrollDelta));\n\n                            if(_scrollbarsHandleAsync)\n                                refreshScrollbarHandleOffset(isHorizontal, mouseDownScroll + scrollDelta);\n\n                            if (!_supportPassiveEvents)\n                                COMPATIBILITY.prvD(event);\n                        }\n                        else\n                            documentMouseTouchUp(event);\n                    }\n                    function documentMouseTouchUp(event) {\n                        event = event || event.originalEvent;\n\n                        _documentElement.off(_strMouseTouchMoveEvent, documentDragMove)\n                            .off(_strMouseTouchUpEvent, documentMouseTouchUp)\n                            .off(_strKeyDownEvent, documentKeyDown)\n                            .off(_strKeyUpEvent, documentKeyUp)\n                            .off(_strSelectStartEvent, documentOnSelectStart);\n\n                        if(_scrollbarsHandleAsync)\n                            refreshScrollbarHandleOffset(isHorizontal, true);\n\n                        _scrollbarsHandleAsync = false;\n                        removeClass(_bodyElement, _classNameDragging);\n                        removeClass(scrollbarVars._handle, strActive);\n                        removeClass(scrollbarVars._track, strActive);\n                        removeClass(scrollbarVars._scrollbar, strActive);\n\n                        mouseDownScroll = undefined;\n                        mouseDownOffset = undefined;\n                        mouseDownInvertedScale = 1;\n\n                        decreaseTrackScrollAmount();\n\n                        if (trackTimeout !== undefined) {\n                            _base.scrollStop();\n                            clearTimeout(trackTimeout);\n                            trackTimeout = undefined;\n                        }\n\n                        if(event) {\n                            var rect = _hostElementNative.getBoundingClientRect();\n                            var mouseInsideHost = event.clientX >= rect.left && event.clientX <= rect.right && event.clientY >= rect.top && event.clientY <= rect.bottom;\n\n                            \/\/if mouse is outside host element\n                            if (!mouseInsideHost)\n                                hostOnMouseLeave();\n\n                            if (_scrollbarsAutoHideScroll || _scrollbarsAutoHideMove)\n                                refreshScrollbarsAutoHide(false);\n                        }\n                    }\n                    function onHandleMouseTouchDown(event) {\n                        mouseDownScroll = _viewportElement[scroll]();\n                        mouseDownScroll = isNaN(mouseDownScroll) ? 0 : mouseDownScroll;\n                        if (_isRTL && isHorizontal && !_rtlScrollBehavior.n || !_isRTL)\n                            mouseDownScroll = mouseDownScroll < 0 ? 0 : mouseDownScroll;\n\n                        mouseDownInvertedScale = getHostElementInvertedScale()[xy];\n                        mouseDownOffset = getPointerPosition(event);\n\n                        _scrollbarsHandleAsync = !getPreparedScrollbarsOption(strSnapHandle);\n                        addClass(_bodyElement, _classNameDragging);\n                        addClass(scrollbarVars._handle, strActive);\n                        addClass(scrollbarVars._scrollbar, strActive);\n\n                        _documentElement.on(_strMouseTouchMoveEvent, documentDragMove)\n                            .on(_strMouseTouchUpEvent, documentMouseTouchUp)\n                            .on(_strSelectStartEvent, documentOnSelectStart);\n\n                        if(_msieVersion || !_documentMixed)\n                            COMPATIBILITY.prvD(event);\n                        COMPATIBILITY.stpP(event);\n                    }\n                    scrollbarVars._handle.on(_strMouseTouchDownEvent, function(event) {\n                        if (onMouseTouchDownContinue(event))\n                            onHandleMouseTouchDown(event);\n                    });\n                    scrollbarVars._track.on(_strMouseTouchDownEvent, function(event) {\n                        if (onMouseTouchDownContinue(event)) {\n                            var scrollDistance = MATH.round(_viewportSize[scrollbarVars._w_h]);\n                            var trackOffset = scrollbarVars._track.offset()[scrollbarVars._left_top];\n                            var ctrlKey = event.ctrlKey;\n                            var instantScroll = event.shiftKey;\n                            var instantScrollTransition = instantScroll && ctrlKey;\n                            var isFirstIteration = true;\n                            var easing = 'linear';\n                            var decreaseScroll;\n                            var finishedCondition;\n                            var scrollActionFinsished = function(transition) {\n                                if(_scrollbarsHandleAsync)\n                                    refreshScrollbarHandleOffset(isHorizontal, transition);\n                            };\n                            var scrollActionInstantFinished = function() {\n                                scrollActionFinsished();\n                                onHandleMouseTouchDown(event);\n                            };\n                            var scrollAction = function () {\n                                if(!_destroyed) {\n                                    var mouseOffset = (mouseDownOffset - trackOffset) * mouseDownInvertedScale;\n                                    var handleOffset = scrollbarVarsInfo._handleOffset;\n                                    var trackLength = scrollbarVarsInfo._trackLength;\n                                    var handleLength = scrollbarVarsInfo._handleLength;\n                                    var scrollRange = scrollbarVarsInfo._maxScroll;\n                                    var currScroll = scrollbarVarsInfo._currentScroll;\n                                    var scrollDuration = 270 * scrollDurationFactor;\n                                    var timeoutDelay = isFirstIteration ? MATH.max(400, scrollDuration) : scrollDuration;\n                                    var instantScrollPosition = scrollRange * ((mouseOffset - (handleLength \/ 2)) \/ (trackLength - handleLength)); \/\/ 100% * positionPercent\n                                    var rtlIsNormal = _isRTL && isHorizontal && ((!_rtlScrollBehavior.i && !_rtlScrollBehavior.n) || _normalizeRTLCache);\n                                    var decreaseScrollCondition = rtlIsNormal ? handleOffset < mouseOffset : handleOffset > mouseOffset;\n                                    var scrollObj = { };\n                                    var animationObj = {\n                                        easing : easing,\n                                        step : function(now) {\n                                            if(_scrollbarsHandleAsync) {\n                                                _viewportElement[scroll](now); \/\/https:\/\/github.com\/jquery\/jquery\/issues\/4340\n                                                refreshScrollbarHandleOffset(isHorizontal, now);\n                                            }\n                                        }\n                                    };\n                                    instantScrollPosition = isFinite(instantScrollPosition) ? instantScrollPosition : 0;\n                                    instantScrollPosition = _isRTL && isHorizontal && !_rtlScrollBehavior.i ? (scrollRange - instantScrollPosition) : instantScrollPosition;\n\n                                    \/\/_base.scrollStop();\n\n                                    if(instantScroll) {\n                                        _viewportElement[scroll](instantScrollPosition); \/\/scroll instantly to new position\n                                        if(instantScrollTransition) {\n                                            \/\/get the scroll position after instant scroll (in case CSS Snap Points are used) to get the correct snapped scroll position\n                                            \/\/and the animation stops at the correct point\n                                            instantScrollPosition = _viewportElement[scroll]();\n                                            \/\/scroll back to the position before instant scrolling so animation can be performed\n                                            _viewportElement[scroll](currScroll);\n\n                                            instantScrollPosition = rtlIsNormal && _rtlScrollBehavior.i ? (scrollRange - instantScrollPosition) : instantScrollPosition;\n                                            instantScrollPosition = rtlIsNormal && _rtlScrollBehavior.n ? -instantScrollPosition : instantScrollPosition;\n\n                                            scrollObj[xy] = instantScrollPosition;\n                                            _base.scroll(scrollObj, extendDeep(animationObj, {\n                                                duration : 130,\n                                                complete : scrollActionInstantFinished\n                                            }));\n                                        }\n                                        else\n                                            scrollActionInstantFinished();\n                                    }\n                                    else {\n                                        decreaseScroll = isFirstIteration ? decreaseScrollCondition : decreaseScroll;\n                                        finishedCondition = rtlIsNormal\n                                            ? (decreaseScroll ? handleOffset + handleLength >= mouseOffset : handleOffset <= mouseOffset)\n                                            : (decreaseScroll ? handleOffset <= mouseOffset : handleOffset + handleLength >= mouseOffset);\n\n                                        if (finishedCondition) {\n                                            clearTimeout(trackTimeout);\n                                            _base.scrollStop();\n                                            trackTimeout = undefined;\n                                            scrollActionFinsished(true);\n                                        }\n                                        else {\n                                            trackTimeout = setTimeout(scrollAction, timeoutDelay);\n\n                                            scrollObj[xy] = (decreaseScroll ? '-=' : '+=') + scrollDistance;\n                                            _base.scroll(scrollObj, extendDeep(animationObj, {\n                                                duration: scrollDuration\n                                            }));\n                                        }\n                                        isFirstIteration = false;\n                                    }\n                                }\n                            };\n                            if (ctrlKey)\n                                increaseTrackScrollAmount();\n\n                            mouseDownInvertedScale = getHostElementInvertedScale()[xy];\n                            mouseDownOffset = COMPATIBILITY.page(event)[xy];\n\n                            _scrollbarsHandleAsync = !getPreparedScrollbarsOption(strSnapHandle);\n                            addClass(_bodyElement, _classNameDragging);\n                            addClass(scrollbarVars._track, strActive);\n                            addClass(scrollbarVars._scrollbar, strActive);\n\n                            _documentElement.on(_strMouseTouchUpEvent, documentMouseTouchUp)\n                                .on(_strKeyDownEvent, documentKeyDown)\n                                .on(_strKeyUpEvent, documentKeyUp)\n                                .on(_strSelectStartEvent, documentOnSelectStart);\n\n                            scrollAction();\n                            COMPATIBILITY.prvD(event);\n                            COMPATIBILITY.stpP(event);\n                        }\n                    }).on(_strMouseTouchEnter, function() { \/\/make sure both scrollbars will stay visible if one scrollbar is hovered if autoHide is \"scroll\" or \"move\".\n                        _scrollbarsHandleHovered = true;\n                        if (_scrollbarsAutoHideScroll || _scrollbarsAutoHideMove)\n                            refreshScrollbarsAutoHide(true);\n\n                    }).on(_strMouseTouchLeave, function() {\n                        _scrollbarsHandleHovered = false;\n                        if (_scrollbarsAutoHideScroll || _scrollbarsAutoHideMove)\n                            refreshScrollbarsAutoHide(false);\n                    });\n                    scrollbarVars._scrollbar.on(_strMouseTouchDownEvent, function(event) {\n                        COMPATIBILITY.stpP(event);\n                    });\n                    if (_supportTransition) {\n                        scrollbarVars._scrollbar.on(_strTransitionEndEvent, function(event) {\n                            if (event.target !== scrollbarVars._scrollbar[0])\n                                return;\n                            refreshScrollbarHandleLength(isHorizontal);\n                            refreshScrollbarHandleOffset(isHorizontal);\n                        });\n                    }\n                }","label":0}
{"text":"private function getQualityFromExtension($ext, $transform = null): string\n    {\n        \/** @var ConfigModel $settings *\/\n        $config = ImagerService::getConfig();\n\n        switch ($ext) {\n            case 'png':\n                $pngCompression = $config->getSetting('pngCompressionLevel', $transform);\n\n                return max(100 - ($pngCompression * 10), 1);\n\n            case 'webp':\n                return $config->getSetting('webpQuality', $transform);\n        }\n\n        return $config->getSetting('jpegQuality', $transform);\n    }","label":0}
{"text":"function _fnUpdateInfo ( settings )\r\n\t{\r\n\t\t\/* Show information about the table *\/\r\n\t\tvar nodes = settings.aanFeatures.i;\r\n\t\tif ( nodes.length === 0 ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\r\n\t\tvar\r\n\t\t\tlang  = settings.oLanguage,\r\n\t\t\tstart = settings._iDisplayStart+1,\r\n\t\t\tend   = settings.fnDisplayEnd(),\r\n\t\t\tmax   = settings.fnRecordsTotal(),\r\n\t\t\ttotal = settings.fnRecordsDisplay(),\r\n\t\t\tout   = total ?\r\n\t\t\t\tlang.sInfo :\r\n\t\t\t\tlang.sInfoEmpty;\r\n\t\r\n\t\tif ( total !== max ) {\r\n\t\t\t\/* Record set after filtering *\/\r\n\t\t\tout += ' ' + lang.sInfoFiltered;\r\n\t\t}\r\n\t\r\n\t\t\/\/ Convert the macros\r\n\t\tout += lang.sInfoPostFix;\r\n\t\tout = _fnInfoMacros( settings, out );\r\n\t\r\n\t\tvar callback = lang.fnInfoCallback;\r\n\t\tif ( callback !== null ) {\r\n\t\t\tout = callback.call( settings.oInstance,\r\n\t\t\t\tsettings, start, end, max, total, out\r\n\t\t\t);\r\n\t\t}\r\n\t\r\n\t\t$(nodes).html( out );\r\n\t}","label":0}
{"text":"private String buildObjectKey(final Object object) {\r\n\r\n        String objectKey = null;\r\n        final Class<?> objectClass = object.getClass();\r\n\r\n        final KeyGenerator typeGenerator = objectClass.getAnnotation(KeyGenerator.class);\r\n        if (typeGenerator == null) {\r\n            objectKey = generateAggregatedKey(object);\r\n        } else {\r\n            objectKey = generateTypeKey(object, typeGenerator);\r\n        }\r\n\r\n        \/\/ If no Type keyGenerator neither Method Generator were used, use the default toString method\r\n        if (objectKey == null) {\r\n            objectKey = object.toString();\r\n        }\r\n\r\n        return objectKey;\r\n    }","label":0}
{"text":"func (m Reason) Validate(formats strfmt.Registry) error {\n\tvar res []error\n\n\t\/\/ value enum\n\tif err := m.validateReasonEnum(\"\", \"body\", m); err != nil {\n\t\treturn err\n\t}\n\n\tif len(res) > 0 {\n\t\treturn errors.CompositeValidationError(res...)\n\t}\n\treturn nil\n}","label":0}
{"text":"func validateCommonHeader(hdr *common.Header) (*common.ChannelHeader, *common.SignatureHeader, error) {\n\tif hdr == nil {\n\t\treturn nil, nil, errors.New(\"nil header\")\n\t}\n\n\tchdr, err := utils.UnmarshalChannelHeader(hdr.ChannelHeader)\n\tif err != nil {\n\t\treturn nil, nil, err\n\t}\n\n\tshdr, err := utils.GetSignatureHeader(hdr.SignatureHeader)\n\tif err != nil {\n\t\treturn nil, nil, err\n\t}\n\n\terr = validateChannelHeader(chdr)\n\tif err != nil {\n\t\treturn nil, nil, err\n\t}\n\n\terr = validateSignatureHeader(shdr)\n\tif err != nil {\n\t\treturn nil, nil, err\n\t}\n\n\treturn chdr, shdr, nil\n}","label":0}
{"text":"def add_constraints(constrs)\n      GLPK.glp_add_rows(@ptr, constrs.length)\n\n      # Store each constraint and initialize a matrix used to hold\n      # the coefficients of each value in the constraint matrix\n      #\n      # * ia - row (constraint) index\n      # * ja - column (variable) index\n      # * ar - constraint coefficient\n      constrs.each do |constr|\n        store_constraint constr\n        constr.expression.terms.each do |var, coeff|\n          @ia << constr.index\n          @ja << var.index\n          @ar << coeff\n        end\n      end\n\n      ia_buffer = build_pointer_array @ia, :int\n      ja_buffer = build_pointer_array @ja, :int\n      ar_buffer = build_pointer_array @ar, :double\n\n      GLPK.glp_load_matrix(@ptr, @ar.length - 1, ia_buffer, ja_buffer,\n                           ar_buffer)\n\n      @constraints.concat constrs\n    end","label":0}
{"text":"def _get_likelihoods(self, X):\n        \"\"\"\"\"\"\n\n        n_samples = np.shape(X)[0]\n        likelihoods = np.zeros((n_samples, self.k))\n        for i in range(self.k):\n            likelihoods[:, i] = self.multivariate_gaussian(X, self.parameters[i])\n\n        return likelihoods","label":0}
{"text":"func (s *InputLambdaProcessorDescription) SetResourceARN(v string) *InputLambdaProcessorDescription {\n\ts.ResourceARN = &v\n\treturn s\n}","label":0}
{"text":"func (g *BuildGenerator) createBuild(ctx context.Context, build *buildv1.Build) (*buildv1.Build, error) {\n\tif !rest.ValidNamespace(ctx, &build.ObjectMeta) {\n\t\treturn nil, errors.NewConflict(buildv1.Resource(\"build\"), build.Namespace, fmt.Errorf(\"Build.Namespace does not match the provided context\"))\n\t}\n\trest.FillObjectMetaSystemFields(&build.ObjectMeta)\n\terr := g.Client.CreateBuild(ctx, build)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn g.Client.GetBuild(ctx, build.Name, &metav1.GetOptions{})\n}","label":0}
{"text":"public static void enableStrictModeForDevRelease() {\n        StrictMode.setThreadPolicy(\n                new StrictMode.ThreadPolicy.Builder()\n                        .detectDiskReads()\n                        .detectDiskWrites()\n                        .detectNetwork()\n                        .penaltyFlashScreen()\n                        .build()\n        );\n\n    }","label":0}
{"text":"function sha1hex(source) {\n  var hash = crypto.createHash(SHA1);\n  hash.update(new Buffer('' + source));\n  return hash.digest(ENCODING);\n}","label":0}
{"text":"def pic_path\n      if picture\n        # Get path\n        dir = \"public\/uploads\/pictures\/\"\n        full_path = dir+picture.split(\"\/\").last.chomp.strip\n\n        # Get file\n        `wget -P #{dir} #{picture}` if !File.file?(full_path)\n        return full_path\n      end\n    end","label":0}
{"text":"public Object[] singletonArray(Object value) {\n        Object[] result = new Object[1];\n        result[0] = value;\n        return result;\n    }","label":0}
{"text":"func NotRegexp(t TestingT, rx interface{}, str interface{}, msgAndArgs ...interface{}) {\n\tif h, ok := t.(tHelper); ok {\n\t\th.Helper()\n\t}\n\tif assert.NotRegexp(t, rx, str, msgAndArgs...) {\n\t\treturn\n\t}\n\tt.FailNow()\n}","label":0}
{"text":"def status\n      logger.info \"Retrieving Vagrant status for #{description}\"\n      output = connection.execute!(:status).stdout\n      Derelict::Parser::Status.new(output)\n    end","label":0}
{"text":"def show_closed_prs(self):\n        \"\"\"\"\"\"\n        all_prs = self.collect_prs_info()\n        for pr_info in all_prs.get('closed', []):\n            logger.info(\n                '{url} in state {state} ({merged})'.format(**pr_info)\n            )","label":0}
{"text":"def connect(self, address):\n        \n        self.s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.s.setblocking(False)\n        # Disable the Nagle algorithm.\n        self.s.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n\n        yield from self._loop.sock_connect(self.s, address)\n\n        yield from self._notify._connect(address)","label":0}
{"text":"func Encode(content string) (barcode.Barcode, error) {\n\tdata := encodeText(content)\n\n\tvar size *dmCodeSize\n\tfor _, s := range codeSizes {\n\t\tif s.DataCodewords() >= len(data) {\n\t\t\tsize = s\n\t\t\tbreak\n\t\t}\n\t}\n\tif size == nil {\n\t\treturn nil, errors.New(\"to much data to encode\")\n\t}\n\tdata = addPadding(data, size.DataCodewords())\n\tdata = ec.calcECC(data, size)\n\tcode := render(data, size)\n\tif code != nil {\n\t\tcode.content = content\n\t\treturn code, nil\n\t}\n\treturn nil, errors.New(\"unable to render barcode\")\n}","label":0}
{"text":"def push(self, kv):\n        \n        if kv[0] in self: \n            self.__delitem__(kv[0])\n        self.__setitem__(kv[0], kv[1])","label":0}
{"text":"protected function convertProperty(Component\\VCard $input, Component\\VCard $output, Property $property, $targetVersion)\n    {\n        \/\/ Skipping these, those are automatically added.\n        if (in_array($property->name, ['VERSION', 'PRODID'])) {\n            return;\n        }\n\n        $parameters = $property->parameters();\n        $valueType = null;\n        if (isset($parameters['VALUE'])) {\n            $valueType = $parameters['VALUE']->getValue();\n            unset($parameters['VALUE']);\n        }\n        if (!$valueType) {\n            $valueType = $property->getValueType();\n        }\n        $newProperty = $output->createProperty(\n            $property->name,\n            $property->getParts(),\n            [], \/\/ parameters will get added a bit later.\n            $valueType\n        );\n\n        if (Document::VCARD30 === $targetVersion) {\n            if ($property instanceof Property\\Uri && in_array($property->name, ['PHOTO', 'LOGO', 'SOUND'])) {\n                $newProperty = $this->convertUriToBinary($output, $newProperty);\n            } elseif ($property instanceof Property\\VCard\\DateAndOrTime) {\n                \/\/ In vCard 4, the birth year may be optional. This is not the\n                \/\/ case for vCard 3. Apple has a workaround for this that\n                \/\/ allows applications that support Apple's extension still\n                \/\/ omit birthyears in vCard 3, but applications that do not\n                \/\/ support this, will just use a random birthyear. We're\n                \/\/ choosing 1604 for the birthyear, because that's what apple\n                \/\/ uses.\n                $parts = DateTimeParser::parseVCardDateTime($property->getValue());\n                if (is_null($parts['year'])) {\n                    $newValue = '1604-'.$parts['month'].'-'.$parts['date'];\n                    $newProperty->setValue($newValue);\n                    $newProperty['X-APPLE-OMIT-YEAR'] = '1604';\n                }\n\n                if ('ANNIVERSARY' == $newProperty->name) {\n                    \/\/ Microsoft non-standard anniversary\n                    $newProperty->name = 'X-ANNIVERSARY';\n\n                    \/\/ We also need to add a new apple property for the same\n                    \/\/ purpose. This apple property needs a 'label' in the same\n                    \/\/ group, so we first need to find a groupname that doesn't\n                    \/\/ exist yet.\n                    $x = 1;\n                    while ($output->select('ITEM'.$x.'.')) {\n                        ++$x;\n                    }\n                    $output->add('ITEM'.$x.'.X-ABDATE', $newProperty->getValue(), ['VALUE' => 'DATE-AND-OR-TIME']);\n                    $output->add('ITEM'.$x.'.X-ABLABEL', '_$!<Anniversary>!$_');\n                }\n            } elseif ('KIND' === $property->name) {\n                switch (strtolower($property->getValue())) {\n                    case 'org':\n                        \/\/ vCard 3.0 does not have an equivalent to KIND:ORG,\n                        \/\/ but apple has an extension that means the same\n                        \/\/ thing.\n                        $newProperty = $output->createProperty('X-ABSHOWAS', 'COMPANY');\n                        break;\n\n                    case 'individual':\n                        \/\/ Individual is implicit, so we skip it.\n                        return;\n\n                    case 'group':\n                        \/\/ OS X addressbook property\n                        $newProperty = $output->createProperty('X-ADDRESSBOOKSERVER-KIND', 'GROUP');\n                        break;\n                }\n            }\n        } elseif (Document::VCARD40 === $targetVersion) {\n            \/\/ These properties were removed in vCard 4.0\n            if (in_array($property->name, ['NAME', 'MAILER', 'LABEL', 'CLASS'])) {\n                return;\n            }\n\n            if ($property instanceof Property\\Binary) {\n                $newProperty = $this->convertBinaryToUri($output, $newProperty, $parameters);\n            } elseif ($property instanceof Property\\VCard\\DateAndOrTime && isset($parameters['X-APPLE-OMIT-YEAR'])) {\n                \/\/ If a property such as BDAY contained 'X-APPLE-OMIT-YEAR',\n                \/\/ then we're stripping the year from the vcard 4 value.\n                $parts = DateTimeParser::parseVCardDateTime($property->getValue());\n                if ($parts['year'] === $property['X-APPLE-OMIT-YEAR']->getValue()) {\n                    $newValue = '--'.$parts['month'].'-'.$parts['date'];\n                    $newProperty->setValue($newValue);\n                }\n\n                \/\/ Regardless if the year matched or not, we do need to strip\n                \/\/ X-APPLE-OMIT-YEAR.\n                unset($parameters['X-APPLE-OMIT-YEAR']);\n            }\n            switch ($property->name) {\n                case 'X-ABSHOWAS':\n                    if ('COMPANY' === strtoupper($property->getValue())) {\n                        $newProperty = $output->createProperty('KIND', 'ORG');\n                    }\n                    break;\n                case 'X-ADDRESSBOOKSERVER-KIND':\n                    if ('GROUP' === strtoupper($property->getValue())) {\n                        $newProperty = $output->createProperty('KIND', 'GROUP');\n                    }\n                    break;\n                case 'X-ANNIVERSARY':\n                    $newProperty->name = 'ANNIVERSARY';\n                    \/\/ If we already have an anniversary property with the same\n                    \/\/ value, ignore.\n                    foreach ($output->select('ANNIVERSARY') as $anniversary) {\n                        if ($anniversary->getValue() === $newProperty->getValue()) {\n                            return;\n                        }\n                    }\n                    break;\n                case 'X-ABDATE':\n                    \/\/ Find out what the label was, if it exists.\n                    if (!$property->group) {\n                        break;\n                    }\n                    $label = $input->{$property->group.'.X-ABLABEL'};\n\n                    \/\/ We only support converting anniversaries.\n                    if (!$label || '_$!<Anniversary>!$_' !== $label->getValue()) {\n                        break;\n                    }\n\n                    \/\/ If we already have an anniversary property with the same\n                    \/\/ value, ignore.\n                    foreach ($output->select('ANNIVERSARY') as $anniversary) {\n                        if ($anniversary->getValue() === $newProperty->getValue()) {\n                            return;\n                        }\n                    }\n                    $newProperty->name = 'ANNIVERSARY';\n                    break;\n                \/\/ Apple's per-property label system.\n                case 'X-ABLABEL':\n                    if ('_$!<Anniversary>!$_' === $newProperty->getValue()) {\n                        \/\/ We can safely remove these, as they are converted to\n                        \/\/ ANNIVERSARY properties.\n                        return;\n                    }\n                    break;\n            }\n        }\n\n        \/\/ set property group\n        $newProperty->group = $property->group;\n\n        if (Document::VCARD40 === $targetVersion) {\n            $this->convertParameters40($newProperty, $parameters);\n        } else {\n            $this->convertParameters30($newProperty, $parameters);\n        }\n\n        \/\/ Lastly, we need to see if there's a need for a VALUE parameter.\n        \/\/\n        \/\/ We can do that by instantating a empty property with that name, and\n        \/\/ seeing if the default valueType is identical to the current one.\n        $tempProperty = $output->createProperty($newProperty->name);\n        if ($tempProperty->getValueType() !== $newProperty->getValueType()) {\n            $newProperty['VALUE'] = $newProperty->getValueType();\n        }\n\n        $output->add($newProperty);\n    }","label":0}
{"text":"public static function get_users_in_context(userlist $userlist) {\n        $context = $userlist->get_context();\n\n        if (!$context instanceof \\context_user) {\n            return;\n        }\n\n        $userlist->add_user($context->instanceid);\n    }","label":0}
{"text":"function saveFiles(config, [css, fonts]) {\n\n\tlet res = Q().then(() => {\n\t\tlet deferred = Q.defer()\n\t\tif(!config.simulate) {\n\t\t\tmkdirp(config.outputDir, error => {\n\t\t\t\tif(error) {\n\t\t\t\t\tdeferred.reject(new Error(error))\n\t\t\t\t} else {\n\t\t\t\t\tdeferred.resolve()\n\t\t\t\t}\n\t\t\t})\n\t\t} else {\n\t\t\tdeferred.resolve()\n\t\t}\n\t\treturn deferred.promise\n\t})\n\tfonts\n\t\t.forEach(({inputFont, outputFont, inputText, outputText}) => {\n\t\t\tres = res.then(() => {\n\t\t\t\tlet deferred = Q.defer()\n\t\t\t\tlet mime = 'font\/woff2' \/\/ For Base64\n\t\t\t\tif(config.verbose)\n\t\t\t\t\tconsole.log(config.base64 ?\n\t\t\t\t\t\t`Writing in file ${inputFont}` :\n\t\t\t\t\t\t`Saving ${outputFont}`)\n\t\t\t\tlet req = request({\n\t\t\t\t\turl: inputFont,\n\t\t\t\t\theader: {\n\t\t\t\t\t\t'User-Agent': config.userAgent\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.on('response', response => {\n\t\t\t\t\tif(config.base64) {\n\t\t\t\t\t\tmime = response.headers['content-type'] || 'font\/woff2'\n\t\t\t\t\t\tdeferred.resolve()\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.on('error', e => {\n\t\t\t\t\tdeferred.reject(new Error(e))\n\t\t\t\t})\n\t\t\t\tif(!config.base64) {\n\t\t\t\t\tlet file = path.resolve(config.outputDir, outputFont)\n\t\t\t\t\tcss = css.replace(inputText, outputText);\n\t\t\t\t\tif(!config.simulate\n\t\t\t\t\t&&(config.overwriting\n\t\t\t\t\t  || !fs.existsSync(file))) {\n\t\t\t\t\t\treq.pipe(fs.createWriteStream(file))\n\t\t\t\t\t\treq.on('end', () => {\n\t\t\t\t\t\t\tdeferred.resolve()\n\t\t\t\t\t\t})\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif(!config.overwriting\n\t\t\t\t\t\t|| fs.existsSync(file)) {\n\t\t\t\t\t\t\tif(config.verbose)\n\t\t\t\t\t\t\t\tconsole.log('Passing - overwriting is disabled')\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdeferred.resolve()\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tlet chunks = []\n\t\t\t\t\treq.on('data', chunk => {\n\t\t\t\t\t\tchunks.push(chunk)\n\t\t\t\t\t}).on('end', (x) => {\n\t\t\t\t\t\tres = res.then(() => {\n\t\t\t\t\t\t\tlet body = Buffer.concat(chunks).toString('base64')\n\t\t\t\t\t\t\tcss = css.replace(inputText, `url('data:${mime};base64,${body}')`)\n\t\t\t\t\t\t})\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t\treturn deferred.promise\n\t\t\t})\n\t\t})\n\tres.then(() => {\n\t\tlet deferred  = Q.defer()\n\t\tlet file = path.resolve(config.outputDir, config.cssFile)\n\t\tif(config.verbose)\n\t\t\tconsole.log(`Saving ${path.basename(config.cssFile)}`)\n\t\tif(!config.simulate&&(config.overwriting||!fs.existsSync(file))) {\n\t\t\tfs.writeFile(file, css, 'utf8', e => {\n\t\t\t\tif(e) {\n\t\t\t\t\tdeferred.reject(new Error(e))\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tdeferred.resolve()\n\t\t\t})\n\t\t} else deferred.resolve()\n\t\treturn deferred.promise\n\t})\n\treturn res\n}","label":0}
{"text":"def task(self, task_uuid):\n        \n        request = clearly_pb2.FindTaskRequest(task_uuid=task_uuid)\n        task = self._stub.find_task(request)\n        if task.uuid:\n            ClearlyClient._display_task(task, True, True, True)\n        else:\n            print(EMPTY)","label":0}
{"text":"func (bg *Reader) Close() error {\n\tif bg.control != nil {\n\t\tclose(bg.control)\n\t\tclose(bg.waiting)\n\t\t<-bg.done\n\t}\n\tif bg.err == io.EOF {\n\t\treturn nil\n\t}\n\treturn bg.err\n}","label":0}
{"text":"public static Object[] parse(Reader reader, Class<?>[] types,\n                                 Converter<Object, Map<String, Object>> mc) throws IOException,\n            ParseException {\n        return (Object[]) parse(reader, new JSONVisitor(types,\n                new JSONValue(mc)), JSONToken.LSQUARE);\n    }","label":0}
{"text":"func (ctx *Context) Query(key string, defaults ...string) string {\n\treturn (*Queries)(ctx.req).MustString(key, defaults...)\n}","label":0}
{"text":"public function descendants($includeSelf = false, $depth = null)\n    {\n        $this->filter([\n            'lft__gte' => $this->getModel()->lft,\n            'rgt__lte' => $this->getModel()->rgt,\n            'root' => $this->getModel()->root,\n        ])->order(['lft']);\n\n        if (false === $includeSelf) {\n            $this->exclude([\n                'pk' => $this->getModel()->pk,\n            ]);\n        }\n\n        if (null !== $depth) {\n            $this->filter([\n                'level__lte' => $this->getModel()->level + $depth,\n            ]);\n        }\n\n        return $this;\n    }","label":0}
{"text":"def extract_dmg(self, path='.'):\n        \n        dmg_fd, dmg_fn = tempfile.mkstemp(prefix='fuzzfetch-', suffix='.dmg')\n        os.close(dmg_fd)\n        out_tmp = tempfile.mkdtemp(prefix='fuzzfetch-', suffix='.tmp')\n        try:\n            _download_url(self.artifact_url('dmg'), dmg_fn)\n            if std_platform.system() == 'Darwin':\n                LOG.info('.. extracting')\n                subprocess.check_call(['hdiutil', 'attach', '-quiet', '-mountpoint', out_tmp, dmg_fn])\n                try:\n                    apps = [mt for mt in os.listdir(out_tmp) if mt.endswith('app')]\n                    assert len(apps) == 1\n                    shutil.copytree(os.path.join(out_tmp, apps[0]), os.path.join(path, apps[0]), symlinks=True)\n                finally:\n                    subprocess.check_call(['hdiutil', 'detach', '-quiet', out_tmp])\n            else:\n                LOG.warning('.. can\\'t extract target.dmg on %s', std_platform.system())\n                shutil.copy(dmg_fn, os.path.join(path, 'target.dmg'))\n        finally:\n            shutil.rmtree(out_tmp, onerror=onerror)\n            os.unlink(dmg_fn)","label":0}
{"text":"private boolean isRtlLayoutUsed() {\n        return Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1 &&\n                getResources().getConfiguration().getLayoutDirection() == View.LAYOUT_DIRECTION_RTL;\n    }","label":0}
{"text":"public static function script($self, $arg1) \n    {\n        $params = func_get_args();\n        $params = array_slice($params, 2);\n        $return = null;\n        $config = self::$config;\n        if (phpQueryPlugin_Scripts::$scriptMethods[$arg1]) {\n            phpQuery::callbackRun(\n                phpQueryPlugin_Scripts::$scriptMethods[$arg1],\n                array($self, $params, &$return, $config)\n            );\n        } else if ($arg1 != '__config' && file_exists(dirname(__FILE__).\"\/Scripts\/$arg1.php\")) {\n            phpQuery::debug(\"Loading script '$arg1'\");\n            include dirname(__FILE__).\"\/Scripts\/$arg1.php\";\n        } else {\n            phpQuery::debug(\"Requested script '$arg1' doesn't exist\");\n        }\n        return $return\n        ? $return\n        : $self;\n    }","label":0}
{"text":"private void channelActiveSideEffects(final ChannelHandlerContext ctx) {\n        long interval = env().keepAliveInterval();\n        if (env().continuousKeepAliveEnabled()) {\n            continuousKeepAliveFuture = ctx.executor().scheduleAtFixedRate(new Runnable() {\n                @Override\n                public void run() {\n                    if (shouldSendKeepAlive()) {\n                        createAndWriteKeepAlive(ctx);\n                    }\n                }\n            }, interval, interval, TimeUnit.MILLISECONDS);\n        }\n    }","label":0}
{"text":"static function removeGroup( $contentclass_id, $contentclass_version, $group_id )\n    {\n        if ( $contentclass_version == null )\n        {\n            eZPersistentObject::removeObject( eZContentClassClassGroup::definition(),\n                                              array(\"contentclass_id\" => $contentclass_id,\n                                                    \"group_id\" => $group_id ) );\n        }\n        else\n        {\n            eZPersistentObject::removeObject( eZContentClassClassGroup::definition(),\n                                              array(\"contentclass_id\" => $contentclass_id,\n                                                    \"contentclass_version\" =>$contentclass_version,\n                                                    \"group_id\" => $group_id ) );\n        }\n    }","label":0}
{"text":"public void onCancel() {\n    mSerializingExecutor.execute(() -> {\n      try {\n        cancelRequest(mContext);\n        replyCancel();\n      } catch (Exception e) {\n        LogUtils.warnWithException(LOG, \"Exception occurred while cancelling write request {}.\",\n            mContext.getRequest(), e);\n        Throwables.throwIfUnchecked(e);\n        abort(new Error(AlluxioStatusException.fromCheckedException(e), true));\n      }\n    });\n  }","label":0}
{"text":"public function loginAction()\n    {\n        $authPlugin = $this->cmsAuthentication();\n\n        $redirectKey = $this->options->getRedirectKey();\n        $redirect = $this->options->getUseRedirectParameter()\n            ? $this->params()->fromQuery($redirectKey, false)\n            : false;\n\n        $url = $this->url()->fromRoute(\n            null,\n            [],\n            $redirect ? ['query' => [$redirectKey => $redirect]] : []\n        );\n\n        $prg = $this->prg($url, true);\n        \/\/ Return early if prg plugin returned a response\n        if ($prg instanceof Response) {\n            return $prg;\n        }\n\n        $post = $prg;\n\n        $form = $this->loginForm;\n        $fm   = $this->flashMessenger();\n\n        if ($this->forwardingController && $fm->hasCurrentErrorMessages()) {\n            foreach($fm->getCurrentErrorMessages() as $messages) {\n                $form->setMessages($messages);\n            }\n            $fm->clearCurrentMessages($fm::NAMESPACE_ERROR);\n        } elseif ($fm->hasErrorMessages()) {\n            foreach($fm->getErrorMessages() as $messages) {\n                $form->setMessages($messages);\n            }\n        }\n\n        $form->setAttribute('action', $this->url()->fromRoute());\n        if ($redirect) {\n            $form->get($redirectKey)->setValue($redirect);\n        }\n\n        if ($post && $form->setData($post)->isValid()) {\n\n            \/\/ clear adapters\n            $this->cmsAuthentication()->getAuthenticationAdapter()->resetAdapters();\n            $this->cmsAuthentication()->getAuthenticationService()->clearIdentity();\n\n            $routeMatch = $this->getEvent()->getRouteMatch();\n            $this->getRequest()->setPost(new Parameters($post));\n            $this->options->setLoginRoute($routeMatch->getMatchedRouteName());\n            $this->forwardingController = $routeMatch->getParam('controller');\n\n            return $this->forward()->dispatch(\n                $this->forwardingController,\n                ['action' => 'authenticate']\n            );\n        }\n\n        $this->forwardingController = null;\n\n        $registrationRoute    = $this->options->getRegistrationRoute();\n        $resetCredentialRoute = $this->options->getResetCredentialRoute();\n\n        return new ViewModel(compact('form', 'registrationRoute', 'resetCredentialRoute'));\n    }","label":0}
{"text":"public void loadModel(String path) {\n        Config cfg = Config.newConfig(path);\n\n        loadSection(this, cfg, \"r\");\n        loadSection(this, cfg, \"p\");\n        loadSection(this, cfg, \"e\");\n        loadSection(this, cfg, \"m\");\n\n        loadSection(this, cfg, \"g\");\n    }","label":0}
{"text":"protected static function splitUrlVersion($version)\n    {\n        $pos = strpos($version, '#');\n\n        \/\/ number version or empty version\n        if (false !== $pos) {\n            $url = substr($version, 0, $pos);\n            $version = substr($version, $pos);\n        } else {\n            $url = $version;\n            $version = '#';\n        }\n\n        return array($url, $version);\n    }","label":0}
{"text":"def read_data(self, timeout=10.0):\n        \"\"\"\"\"\"\n        # Read from stdout in a separate thread and consume data from\n        # the queue.\n        start_time = time.time()\n        while True:\n            # Wait for data to be available or a timeout.\n            data = None\n            try:\n                data = self.stdout_reader.queue.get(timeout=timeout)\n                if data:\n                    yield data\n                else:\n                    # End of file.\n                    break\n            except queue.Empty:\n                # Queue read timed out.\n                end_time = time.time()\n                if not data:\n                    if end_time - start_time >= timeout:\n                        # Nothing interesting has happened for a while --\n                        # FFmpeg is probably hanging.\n                        raise ReadTimeoutError('ffmpeg output: {}'.format(\n                            ''.join(self.stderr_reader.queue.queue)\n                        ))\n                    else:\n                        start_time = end_time\n                        # Keep waiting.\n                        continue","label":0}
{"text":"public function getList($filter = array()) {\n        $res = array();\n        $dbres = \\CAgent::GetList(array(\"MODULE_ID\" => \"ASC\"), $filter);\n        while ($item = $dbres->Fetch()) {\n            $res[] = $item;\n        }\n        return $res;\n    }","label":0}
{"text":"static int[] drop(int[] itemset) {\n        if (itemset.length >= 1) {\n            int n = itemset.length - 1;\n            int[] newItemset = new int[n];\n\n            System.arraycopy(itemset, 1, newItemset, 0, n);\n\n            return newItemset;\n        } else {\n            return null;\n        }\n    }","label":0}
{"text":"private Status run(JavaSparkContext sc, PrintWriter reportWriter, AlluxioConfiguration conf) {\n    \/\/ Check whether Spark driver can recognize Alluxio classes and filesystem\n    Status driverStatus = CheckerUtils.performIntegrationChecks();\n    String driverAddress = sc.getConf().get(\"spark.driver.host\");\n    switch (driverStatus) {\n      case FAIL_TO_FIND_CLASS:\n        reportWriter.printf(\"Spark driver: %s failed to recognize Alluxio classes.%n%n\",\n            driverAddress);\n        return driverStatus;\n      case FAIL_TO_FIND_FS:\n        reportWriter.printf(\"Spark driver: %s failed to recognize Alluxio filesystem.%n%n\",\n            driverAddress);\n        return driverStatus;\n      default:\n        reportWriter.printf(\"Spark driver: %s can recognize Alluxio filesystem.%n%n\",\n            driverAddress);\n        break;\n    }\n\n    if (!CheckerUtils.supportAlluxioHA(reportWriter, conf)) {\n      return Status.FAIL_TO_SUPPORT_HA;\n    }\n\n    return runSparkJob(sc, reportWriter);\n  }","label":0}
{"text":"func (p *PWMPin) DutyCycle() (duty uint32, err error) {\n\tbuf, err := p.read(p.pwmDutyCyclePath())\n\tif err != nil {\n\t\treturn\n\t}\n\n\tval, e := strconv.Atoi(string(buf))\n\treturn uint32(val), e\n}","label":0}
{"text":"def start\n    @em_lock.synchronize{\n      # TODO on event of the process ending this thread will be\n      # shutdown before a local finalizer can be run,\n      # would be good to gracefully shut this down \/ wait for completion\n      @reactor_thread  = Thread.new {\n        begin\n          EventMachine.run\n        rescue Exception => e\n          # TODO option to autorestart the reactor on errors ?\n          puts \"Critical exception #{e}\\n#{e.backtrace.join(\"\\n\")}\"\n        ensure\n          @em_lock.synchronize { @reactor_thread = nil }\n        end\n      } unless @reactor_thread\n    }\n    sleep 0.01 until EventMachine.reactor_running? # XXX hack but needed\n    self\n  end","label":0}
{"text":"public static Object convertProperty(Object dynaPropVal) {\r\n        Object propertyValue = null;\r\n        if (dynaPropVal == null) {\r\n            throw new IllegalArgumentException(\"Unable to convertProperty on null object.\");\r\n        }\r\n        Class<?> propClass = dynaPropVal.getClass();\r\n        String propName = propClass.getName();\r\n        \/\/Check the dynamic propery for ArrayOfXXX object\r\n        if (propName.contains(\"ArrayOf\")) {\r\n            String methodName = propName.substring(propName.indexOf(\"ArrayOf\") + \"ArrayOf\".length());\r\n            \/\/ If object is ArrayOfXXX object, then get the XXX[] by invoking getXXX() on the object. For Ex:\r\n            \/\/ ArrayOfManagedObjectReference.getManagedObjectReference() returns ManagedObjectReference[] array.\r\n            try {\r\n                Method getMethod;\r\n                try {\r\n                    getMethod = propClass.getMethod(\"get\" + methodName, (Class[]) null);\r\n                }\r\n                catch (NoSuchMethodException ignore) {\r\n                    getMethod = propClass.getMethod(\"get_\" + methodName.toLowerCase(), (Class[]) null);\r\n                }\r\n                propertyValue = getMethod.invoke(dynaPropVal, (Object[]) null);\r\n            }\r\n            catch (Exception e) {\r\n                log.error(\"Exception caught trying to convertProperty\", e);\r\n            }\r\n        }\r\n        \/\/Handle the case of an unwrapped array being deserialized.\r\n        else if (dynaPropVal.getClass().isArray()) {\r\n            propertyValue = dynaPropVal;\r\n        }\r\n        else {\r\n            propertyValue = dynaPropVal;\r\n        }\r\n\r\n        return propertyValue;\r\n    }","label":0}
{"text":"public static <T> OptionalKind<T> narrow(final Higher<optional, T> future) {\n    return (OptionalKind<T>)future;\n  }","label":0}
{"text":"public float calculateHeights() {\n\t\tmaxHeight = 0;\n\t\tfor (int k = 0; k < cells.length; ++k) {\n\t\t\tPdfPCell cell = cells[k];\n\t\t\tfloat height = 0;\n\t\t\tif (cell == null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse {\n\t\t\t\theight = cell.getMaxHeight();\n\t\t\t\tif ((height > maxHeight) && (cell.getRowspan() == 1))\n\t\t\t\t\tmaxHeight = height;\n\t\t\t}\n\t\t}\n\t\tcalculated = true;\n\t\treturn maxHeight;\n\t}","label":0}
{"text":"func WithTransforms(t []*Transform) OptionFunc {\n\treturn func(n *Node) error {\n\t\tn.transforms = t\n\t\treturn nil\n\t}\n}","label":0}
{"text":"func TLSConfig(serverName string) *tls.Config {\n\treturn &tls.Config{ServerName: serverName, RootCAs: RootCAs}\n}","label":0}
{"text":"def date_of_birth(self, value):\n        \n        if value:\n            self._date_of_birth = parse(value).date() if isinstance(value, type_check) else value","label":0}
{"text":"def prepare_data_maybe_download(directory):\n    \n    filename = 'ubuntu_dialogs.tgz'\n    url = 'http:\/\/cs.mcgill.ca\/~jpineau\/datasets\/ubuntu-corpus-1.0\/ubuntu_dialogs.tgz'\n    dialogs_path = os.path.join(directory, 'dialogs')\n\n    # test it there are some dialogs in the path\n    if not os.path.exists(os.path.join(directory, \"10\", \"1.tst\")):\n        # dialogs are missing\n        archive_path = os.path.join(directory, filename)\n        if not os.path.exists(archive_path):\n            # archive missing, download it\n            print(\"Downloading %s to %s\" % (url, archive_path))\n            filepath, _ = urllib.request.urlretrieve(url, archive_path)\n            print \"Successfully downloaded \" + filepath\n\n        # unpack data\n        if not os.path.exists(dialogs_path):\n            print(\"Unpacking dialogs ...\")\n            with tarfile.open(archive_path) as tar:\n                tar.extractall(path=directory)\n            print(\"Archive unpacked.\")\n\n        return","label":0}
{"text":"func (t *TextView) HasFocus() bool {\n\t\/\/ Implemented here with locking because this may be used in the \"changed\"\n\t\/\/ callback.\n\tt.Lock()\n\tdefer t.Unlock()\n\treturn t.hasFocus\n}","label":0}
{"text":"protected function validateInput($input)\n    {\n        \/\/ check\n        $keys = [\n            'form',\n            'elements',\n        ];\n\n        switch (gettype($input)) {\n            case 'array':\n                foreach ($keys as $key) {\n                    if (array_key_exists($key, $input) === false) {\n                        throw new \\Exception(\n                            'Input invalid! Please make sure that input array contains keys (form, elements).'\n                        );\n                    }\n                }\n                break;\n        }\n\n        return true;\n    }","label":0}
{"text":"private function loadEmbedManyCollection(PersistentCollectionInterface $collection)\n    {\n        $rawData = $collection->getRawData();\n\n        if ($rawData) {\n            $mapping = $collection->getMapping();\n            $owner   = $collection->getOwner();\n\n            foreach ($rawData as $key => $data) {\n                if ($mapping->type === Type::MAP) {\n                    $key = (string)$key;\n                } else {\n                    $key = (int)$key;\n                }\n\n                $embeddedDocument = $this->uow->getAssociationPersister()->loadEmbed($mapping, $data, $owner, $key, $collection->isReadOnly());\n\n                if ($mapping->type === Type::MAP) {\n                    $collection->set($key, $embeddedDocument);\n                } else {\n                    $collection->add($embeddedDocument);\n                }\n            }\n        }\n    }","label":0}
{"text":"public function inplace_editable_name() {\n\n        $displayname = format_string($this->get_name());\n\n        return new \\core\\output\\inplace_editable('core_analytics', 'modelname', $this->model->id,\n            has_capability('moodle\/analytics:managemodels', \\context_system::instance()), $displayname, $this->model->name);\n    }","label":0}
{"text":"func (ds *dockerService) RemoveContainer(_ context.Context, r *runtimeapi.RemoveContainerRequest) (*runtimeapi.RemoveContainerResponse, error) {\n\tds.performPlatformSpecificContainerForContainer(r.ContainerId)\n\n\t\/\/ Ideally, log lifecycle should be independent of container lifecycle.\n\t\/\/ However, docker will remove container log after container is removed,\n\t\/\/ we can't prevent that now, so we also clean up the symlink here.\n\terr := ds.removeContainerLogSymlink(r.ContainerId)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\terr = ds.client.RemoveContainer(r.ContainerId, dockertypes.ContainerRemoveOptions{RemoveVolumes: true, Force: true})\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to remove container %q: %v\", r.ContainerId, err)\n\t}\n\treturn &runtimeapi.RemoveContainerResponse{}, nil\n}","label":0}
{"text":"public function getRelation($name) {\n        \/\/ We want to run a relationship query without any constrains so that we will\n        \/\/ not have to remove these where clauses manually which gets really hacky\n        \/\/ and error prone. We don't want constraints because we add eager ones.\n        $relation = Relation::noConstraints(function () use ($name) {\n            try {\n                return $this->getModel()->{$name}();\n            } catch (\\Exception $e) {\n                throw $e;\/\/RelationNotFoundException::make($this->getModel(), $name);\n            }\n        });\n\n        $nested = $this->relationsNestedUnder($name);\n\n        \/\/ If there are nested relationships set on the query, we will put those onto\n        \/\/ the query instances so that they can be handled after this relationship\n        \/\/ is loaded. In this way they will all trickle down as they are loaded.\n        if (count($nested) > 0) {\n            $relation->getQuery()->with($nested);\n        }\n\n        return $relation;\n    }","label":0}
{"text":"def Deserialize(self, reader):\n        \n        self.Version = reader.ReadUInt32()\n        self.Services = reader.ReadUInt64()\n        self.Timestamp = reader.ReadUInt32()\n        self.Port = reader.ReadUInt16()\n        self.Nonce = reader.ReadUInt32()\n        self.UserAgent = reader.ReadVarString().decode('utf-8')\n        self.StartHeight = reader.ReadUInt32()\n        logger.debug(\"Version start height: T %s \" % self.StartHeight)\n        self.Relay = reader.ReadBool()","label":0}
{"text":"func inPhotoSpace(f *drive.File) bool {\n\tfor _, v := range f.Spaces {\n\t\tif v == \"photos\" {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}","label":0}
{"text":"public static function verify($password, $hash)\n    {\n        $salt = Binary::getSlice($hash, 0, self::SALT_FINAL_LENGTH + 7);\n        return (crypt($password, $salt) === $hash);\n    }","label":0}
{"text":"function checkCommonArgs(args) {\n        if (args.length < 2) throw new Error(\"File1, File2, and callback required\");\n        if (typeof args.at(1) != \"string\") throw new Error(\"File2 required\");\n        if (typeof args.at(0) != \"string\") throw new Error(\"File1 required\");\n        if (!args.callbackGiven()) throw new Error(\"Callback required\");\n    }","label":0}
{"text":"static public function image($value=null)\n    {\n        if ($value) {\n            $value = Config::getUploadFileRelativePath($value);\n            return DataHelper::formatPath($value);\n        }\n        \n        return '';\n    }","label":0}
{"text":"def get_parts(self):\n        \n        parts = []\n        start_byte = 0\n        for i in range(1, self.total + 1):\n            end_byte = start_byte + self.part_size\n            if end_byte >= self.file_size - 1:\n                end_byte = self.file_size\n            parts.append({\n                'part': i,\n                'offset': start_byte,\n                'limit': end_byte\n            })\n            start_byte = end_byte\n        return parts","label":0}
{"text":"private function aIntercept($b) {\n        return (float) ($this->sum($this->yVector) \/ $this->count) - \n        ($b * ($this->sum($this->xVector) \/ $this->count));\n    }","label":0}
{"text":"public void marshall(StopStreamProcessorRequest stopStreamProcessorRequest, ProtocolMarshaller protocolMarshaller) {\n\n        if (stopStreamProcessorRequest == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(stopStreamProcessorRequest.getName(), NAME_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }","label":0}
{"text":"def _format_from_dict(self, format_string, **kwargs):\n        \n        kwargs_copy = self.base_dict.copy()\n        kwargs_copy.update(**kwargs)\n        localpath = format_string.format(**kwargs_copy)\n        if kwargs.get('fullpath', False):\n            return self.fullpath(localpath=localpath)\n        return localpath","label":0}
{"text":"function (e, editor) {\n        if (ko.isWriteableObservable(model)) {\n            var editorValue = editor.html.get();\n            var current = model();\n            if (current !== editorValue) {\n                model(editorValue);\n            }\n        }\n    }","label":0}
{"text":"private String getProperty(String propertyName) {\n            return propertyName == null ? null : (String) getPropertyValue(propertyName);\n        }","label":0}
{"text":"function($super, properties, data) {\n            $super(properties, data);\n            $.extend(true, this.hcConfig.yAxis, {\n                minPadding: 0,\n                maxPadding: 0\n            });\n        }","label":0}
{"text":"def _contour_helper(self, args, kwargs):\n        \"\"\"\"\"\"\n        contour_kwargs = {}\n        contour_kwargs['measurement'] = kwargs.pop('measurement', 'poles')\n        contour_kwargs['method'] = kwargs.pop('method', 'exponential_kamb')\n        contour_kwargs['sigma'] = kwargs.pop('sigma', 3)\n        contour_kwargs['gridsize'] = kwargs.pop('gridsize', 100)\n        contour_kwargs['weights'] = kwargs.pop('weights', None)\n        lon, lat, totals = contouring.density_grid(*args, **contour_kwargs)\n        return lon, lat, totals, kwargs","label":0}
{"text":"def open(self, path, filename=None):\n        \n        scheme, key = self.getkey(path, filename=filename)\n        return BotoReadFileHandle(scheme, key)","label":0}
{"text":"function parseIntValue(value, description) {\n        if (description === void 0) { description = \"integer\"; }\n        if (angular.isString(value)) {\n            try {\n                return parseInt(value);\n            }\n            catch (e) {\n                console.log(\"Failed to parse \" + description + \" with text '\" + value + \"'\");\n            }\n        }\n        else if (angular.isNumber(value)) {\n            return value;\n        }\n        return null;\n    }","label":0}
{"text":"private function isImage(FileInterface $file) {\n    $image = $this->getImage($file);\n\n    if ($image === NULL) {\n      return FALSE;\n    }\n\n    return $image->isValid();\n  }","label":0}
{"text":"@Override\n    public String toUrl() {\n        List<NameValuePair> params = new ArrayList<NameValuePair>(getParams());\n\n        params.add(new BasicNameValuePair(\"fetch\", getFetch().toString()));\n\n        return String.format(\"\/%s\/create.js?%s\", type.toLowerCase().replaceAll(\" \", \"\"),\n                URLEncodedUtils.format(params, \"utf-8\"));\n    }","label":0}
{"text":"public void deleteWorkflow(String workflowId, boolean archiveWorkflow) {\n        Preconditions.checkArgument(StringUtils.isNotBlank(workflowId), \"Workflow id cannot be blank\");\n\n        Object[] params = new Object[]{\"archiveWorkflow\", archiveWorkflow};\n        delete(params, \"workflow\/{workflowId}\/remove\", workflowId);\n    }","label":0}
{"text":"def chown(dirs, user=None, group=None):\n    \"\"\"\"\"\"\n    if isinstance(dirs, basestring):\n        dirs = [dirs]\n    args = ' '.join(dirs)\n    if user and group:\n        return sudo('chown {}:{} {}'.format(user, group, args))\n    elif user:\n        return sudo('chown {} {}'.format(user, args))\n    elif group:\n        return sudo('chgrp {} {}'.format(group, args))\n    else:\n        return None","label":0}
{"text":"@Override\n  public final String getFor(final Class<?> pClass, final String pThingName) {\n    if (\"list\".equals(pThingName)) {\n      if (pClass == PaymentFrom.class || pClass == PaymentTo.class\n        || pClass == PrepaymentFrom.class || pClass == PrepaymentTo.class\n          || pClass == SubaccountLine.class || pClass == AdditionCostLine.class\n            || pClass == Account.class) {\n        return PrcPageWithSubaccTypes.class.getSimpleName();\n      } else {\n        return PrcEntitiesPage.class.getSimpleName();\n      }\n    } else if (\"about\".equals(pThingName)) {\n      return PrcAbout.class.getSimpleName();\n    }\n    return null;\n  }","label":0}
{"text":"protected function _send_http2_server_push_header( $wp_dependences, $type ) {\n\t\tglobal $wp_version;\n\n\t\t$registerd = $wp_dependences->registered;\n\t\t$wp_dependences->all_deps( $wp_dependences->queue );\n\n\t\t$handles = $wp_dependences->to_do;\n\t\t$handles = apply_filters( 'inc2734_wp_page_speed_optimization_http2_server_push_handles', $handles, $type );\n\n\t\tif ( ! $handles ) {\n\t\t\treturn;\n\t\t}\n\n\t\tforeach ( $handles as $handle ) {\n\t\t\tif ( ! isset( $registerd[ $handle ] ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t$src = $registerd[ $handle ]->src;\n\t\t\tif ( ! $src ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t$ver = $registerd[ $handle ]->ver ? $registerd[ $handle ]->ver : $wp_version;\n\t\t\t$src = add_query_arg( 'ver', $ver, $src );\n\n\t\t\theader( sprintf( 'Link: <%s>; rel=preload; as=%s', esc_url_raw( $src ), $type ), false );\n\t\t}\n\t}","label":0}
{"text":"def video_top(body_output, targets, model_hparams, vocab_size):\n  \"\"\"\"\"\"\n  del targets  # unused arg\n  num_channels = model_hparams.problem.num_channels\n  shape = common_layers.shape_list(body_output)\n  reshape_shape = shape[:-1] + [num_channels, vocab_size]\n  res = tf.reshape(body_output, reshape_shape)\n  # Calculate argmax so as to have a summary with the produced images.\n  x = tf.argmax(tf.reshape(res, [-1, vocab_size]), axis=-1)\n  x = tf.reshape(x, shape[:-1] + [num_channels])\n  common_video.gif_summary(\"results\", x, max_outputs=1)\n  return res","label":0}
{"text":"@SafeVarargs\n    public static @Nonnull JsonObject object(Entry<String,JsonElement>...fields) {\n        JsonObject object = new JsonObject();\n        object.add(fields);\n        return object;\n    }","label":0}
{"text":"def edit_user(self, user_id, user_object):\n        \n        return self.user_service.editObject(user_object, id=user_id)","label":0}
{"text":"def get_user_favorites(self):\n        \n\n        return self.parse_raw_response(requests_util.run_request('get', self.API_BASE_URL + '\/user\/favorites',\n                                                                 headers=self.__get_header_with_auth()))","label":0}
{"text":"def add(self, host_value):\n        \n        host_obj = self._host_factory(host_value)\n        if self._get_match(host_obj) is not None:\n            return\n        self._add_new(host_obj)","label":0}
{"text":"def rollback(self):\n        \"\"\"\"\"\"\n        for p in self._moves:\n            logging.info(\"Moving to %s\\n from %s\", *p)\n\n        for new_path, path in self._moves:\n            try:\n                logger.debug('Replacing %s from %s', new_path, path)\n                if os.path.isfile(new_path):\n                    os.unlink(new_path)\n                elif os.path.isdir(new_path):\n                    rmtree(new_path)\n                renames(path, new_path)\n            except OSError as ex:\n                logger.error(\"Failed to restore %s\", new_path)\n                logger.debug(\"Exception: %s\", ex)\n\n        self.commit()","label":0}
{"text":"protected function get_options() {\n        global $CFG;\n\n        require_once(\"$CFG->libdir\/filelib.php\");\n        require_once(\"$CFG->dirroot\/repository\/lib.php\");\n        $defaults = array(\n            'mainfile' => '', 'subdirs' => 0, 'maxbytes' => -1, 'maxfiles' => 1,\n            'accepted_types' => '*', 'return_types' => FILE_INTERNAL, 'areamaxbytes' => FILE_AREA_MAX_BYTES_UNLIMITED,\n            'context' => context_system::instance());\n        foreach($this->options as $k => $v) {\n            $defaults[$k] = $v;\n        }\n\n        return $defaults;\n    }","label":0}
{"text":"public function count_teams($activitygroup = 0) {\n\n        $count = 0;\n\n        $participants = $this->list_participants($activitygroup, true);\n\n        \/\/ If a team submission grouping id is provided all good as all returned groups\n        \/\/ are the submission teams, but if no team submission grouping was specified\n        \/\/ $groups will contain all participants groups.\n        if ($this->get_instance()->teamsubmissiongroupingid) {\n\n            \/\/ We restrict the users to the selected group ones.\n            $groups = groups_get_all_groups($this->get_course()->id,\n                                            array_keys($participants),\n                                            $this->get_instance()->teamsubmissiongroupingid,\n                                            'DISTINCT g.id, g.name');\n\n            $count = count($groups);\n\n            \/\/ When a specific group is selected we don't count the default group users.\n            if ($activitygroup == 0) {\n                if (empty($this->get_instance()->preventsubmissionnotingroup)) {\n                    \/\/ See if there are any users in the default group.\n                    $defaultusers = $this->get_submission_group_members(0, true);\n                    if (count($defaultusers) > 0) {\n                        $count += 1;\n                    }\n                }\n            } else if ($activitygroup != 0 && empty($groups)) {\n                \/\/ Set count to 1 if $groups returns empty.\n                \/\/ It means the group is not part of $this->get_instance()->teamsubmissiongroupingid.\n                $count = 1;\n            }\n        } else {\n            \/\/ It is faster to loop around participants if no grouping was specified.\n            $groups = array();\n            foreach ($participants as $participant) {\n                if ($group = $this->get_submission_group($participant->id)) {\n                    $groups[$group->id] = true;\n                } else if (empty($this->get_instance()->preventsubmissionnotingroup)) {\n                    $groups[0] = true;\n                }\n            }\n\n            $count = count($groups);\n        }\n\n        return $count;\n    }","label":0}
{"text":"def whisper(self, user, message):\n        \n        if user[0] == '#':\n            LOGGER.warning(f\"Whisper is for users only.\")\n        else:\n            super().message('#jtv', f\".w {user} {message}\")","label":0}
{"text":"public function userUsernameFromDn($dn) {\n\n    $ldap_entry = @$this->dnExists($dn, 'ldap_entry', array());\n    if (!$ldap_entry || !is_array($ldap_entry)) {\n      return FALSE;\n    }\n    else {\n      return $this->userUsernameFromLdapEntry($ldap_entry);\n    }\n\n  }","label":0}
{"text":"public static byte[] md2Hash(String data, Charset charset) throws NoSuchAlgorithmException {\n\t\treturn md2Hash(data.getBytes(charset));\n\t}","label":0}
{"text":"public function mount(): void\n    {\n        if (count($this->collections) > 0) {\n            foreach ($this->collections as $collection) {\n                $micro = new MicroCollection();\n                \/\/ Set the main handler. ie. a controller instance\n                $micro->setHandler($collection['className'], true);\n                \/\/ Set a common prefix for all routes\n\n                if ($this->prefix) {\n                    $micro->setPrefix($this->prefix);\n                }\n\n                \/\/ Use the method 'index' in PostsController\n                $micro->{$collection['method']}($collection['pattern'], $collection['function']);\n\n                $this->application->mount($micro);\n            }\n        }\n\n        return;\n    }","label":0}
{"text":"function listenHandler( event ) {\n\t\t\t\tvar handler = rawHandler.apply( this, arguments );\n\t\t\t\tif ( handler === false) {\n\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t}\n\t\t\t\treturn( handler );\n\t\t}","label":0}
{"text":"function IncomingMessage(socket) {\n  stream.Stream.call(this);\n\n  \/\/ TODO Remove one of these eventually.\n  this.socket = socket;\n  this.connection = socket;\n\n  this.httpVersion = null;\n  this.complete = false;\n  this.headers = {};\n  this.trailers = {};\n\n  this.readable = true;\n\n  this._paused = false;\n  this._pendings = [];\n\n  this._endEmitted = false;\n\n  \/\/ request (server) only\n  this.url = '';\n\n  this.method = null;\n\n  \/\/ response (client) only\n  this.statusCode = null;\n  this.client = this.socket;\n}","label":0}
{"text":"def _get_grouped_dicoms(dicom_input):\n    \n    # if all dicoms have an instance number try sorting by instance number else by position\n    if [d for d in dicom_input if 'InstanceNumber' in d]:\n        dicoms = sorted(dicom_input, key=lambda x: x.InstanceNumber)\n    else:\n        dicoms = common.sort_dicoms(dicom_input)\n    # now group per stack\n    grouped_dicoms = [[]]  # list with first element a list\n    timepoint_index = 0\n    previous_stack_position = -1\n\n    # loop over all sorted dicoms\n    stack_position_tag = Tag(0x2001, 0x100a)  # put this there as this is a slow step and used a lot\n    for index in range(0, len(dicoms)):\n        dicom_ = dicoms[index]\n        stack_position = 0\n        if stack_position_tag in dicom_:\n            stack_position = common.get_is_value(dicom_[stack_position_tag])\n        if previous_stack_position == stack_position:\n            # if the stack number is the same we move to the next timepoint\n            timepoint_index += 1\n            if len(grouped_dicoms) <= timepoint_index:\n                grouped_dicoms.append([])\n        else:\n            # if it changes move back to the first timepoint\n            timepoint_index = 0\n        grouped_dicoms[timepoint_index].append(dicom_)\n        previous_stack_position = stack_position\n\n    return grouped_dicoms","label":0}
{"text":"public String getResultString() throws TransformerException {\n        return withExceptionHandling(new Trans<String>() {\n                public String transform() {\n                    return transformation.transformToString();\n                }\n            });\n    }","label":0}
{"text":"public Token postXAuth(final String email, final String password) {\n        OAuthRequest request = constructXAuthPost(email, password);\n        setToken(\"\", \"\"); \/\/ Empty token is required for Scribe to execute XAuth.\n        sign(request);\n        return clearXAuth(request.send());\n    }","label":0}
{"text":"func (ci CellID) ChildEnd() CellID {\n\tol := ci.lsb()\n\treturn CellID(uint64(ci) + ol + ol>>2)\n}","label":0}
{"text":"private static void checkContentType(String contentType, String accept, String ext, boolean strict) throws PageException {\n\n\tif (!StringUtil.isEmpty(ext, true)) {\n\t    ext = ext.trim().toLowerCase();\n\t    if (ext.startsWith(\"*.\")) ext = ext.substring(2);\n\t    if (ext.startsWith(\".\")) ext = ext.substring(1);\n\n\t\tString blacklistedTypes = SystemUtil.getSystemPropOrEnvVar(\n\t\t\t\tSystemUtil.SETTING_UPLOAD_EXT_BLACKLIST, SystemUtil.DEFAULT_UPLOAD_EXT_BLACKLIST\n\t\t).toLowerCase();\n\t\tArray blacklist = ListUtil.listToArrayRemoveEmpty(blacklistedTypes, ',');\n\n\t\tfor (int i=blacklist.size(); i > 0; i--) {\n\t\t\tif (ext.equals(Caster.toString(blacklist.getE(i)).trim())){\n\t\t\t\tthrow new ApplicationException(\"Upload of files with extension [\" + ext + \"] is not permitted.  \"\n\t\t\t\t\t\t+ \"You can configure the \"\n\t\t\t\t\t\t+ SystemUtil.SETTING_UPLOAD_EXT_BLACKLIST\n\t\t\t\t\t\t+ \" System property or the \"\n\t\t\t\t\t\t+ SystemUtil.convertSystemPropToEnvVar(SystemUtil.SETTING_UPLOAD_EXT_BLACKLIST)\n\t\t\t\t\t\t+ \" Environment variable to allow that file type.\"\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\telse ext = null;\n\n\tif (StringUtil.isEmpty(accept, true)) return;\n\n\tMimeType mt = MimeType.getInstance(contentType), sub;\n\n\tArray whishedTypes = ListUtil.listToArrayRemoveEmpty(accept, ',');\n\tint len = whishedTypes.size();\n\tfor (int i = 1; i <= len; i++) {\n\t    String whishedType = Caster.toString(whishedTypes.getE(i)).trim().toLowerCase();\n\t    if (whishedType.equals(\"*\")) return;\n\t    \/\/ check mimetype\n\t    if (ListUtil.len(whishedType, \"\/\", true) == 2) {\n\t\tsub = MimeType.getInstance(whishedType);\n\t\tif (mt.match(sub)) return;\n\t    }\n\n\t    \/\/ check extension\n\t    if (ext != null && !strict) {\n\t\tif (whishedType.startsWith(\"*.\")) whishedType = whishedType.substring(2);\n\t\tif (whishedType.startsWith(\".\")) whishedType = whishedType.substring(1);\n\t\tif (ext.equals(whishedType)) return;\n\t    }\n\t}\n\tthrow new ApplicationException(\"The MIME type of the uploaded file [\" + contentType + \"] was not accepted by the server.\",\n\t\t\"only this [\" + accept + \"] mime type are accepted\");\n    }","label":0}
{"text":"def app(environ, start_response):\n    \"\"\"\"\"\"\n    r = HttpRequestHandler(environ, start_response, Router).dispatch()\n    return r","label":0}
{"text":"func ResolveScopeSpecifiers(ctx context.Context, scopeSpecs []string) []auth.Access {\n\trequestedAccessSet := make(map[auth.Access]struct{}, 2*len(scopeSpecs))\n\n\tfor _, scopeSpecifier := range scopeSpecs {\n\t\t\/\/ There should be 3 parts, separated by a `:` character.\n\t\tparts := strings.SplitN(scopeSpecifier, \":\", 3)\n\n\t\tif len(parts) != 3 {\n\t\t\tdcontext.GetLogger(ctx).Infof(\"ignoring unsupported scope format %s\", scopeSpecifier)\n\t\t\tcontinue\n\t\t}\n\n\t\tresourceType, resourceName, actions := parts[0], parts[1], parts[2]\n\n\t\tresourceType, resourceClass := splitResourceClass(resourceType)\n\t\tif resourceType == \"\" {\n\t\t\tcontinue\n\t\t}\n\n\t\t\/\/ Actions should be a comma-separated list of actions.\n\t\tfor _, action := range strings.Split(actions, \",\") {\n\t\t\trequestedAccess := auth.Access{\n\t\t\t\tResource: auth.Resource{\n\t\t\t\t\tType:  resourceType,\n\t\t\t\t\tClass: resourceClass,\n\t\t\t\t\tName:  resourceName,\n\t\t\t\t},\n\t\t\t\tAction: action,\n\t\t\t}\n\n\t\t\t\/\/ Add this access to the requested access set.\n\t\t\trequestedAccessSet[requestedAccess] = struct{}{}\n\t\t}\n\t}\n\n\trequestedAccessList := make([]auth.Access, 0, len(requestedAccessSet))\n\tfor requestedAccess := range requestedAccessSet {\n\t\trequestedAccessList = append(requestedAccessList, requestedAccess)\n\t}\n\n\treturn requestedAccessList\n}","label":0}
{"text":"public function updateMemberGroups($data, Member $member)\n    {\n        if (isset($data['memberof'])) {\n            $ldapGroups = is_array($data['memberof']) ? $data['memberof'] : [$data['memberof']];\n            foreach ($ldapGroups as $groupDN) {\n                foreach (LDAPGroupMapping::get() as $mapping) {\n                    if (!$mapping->DN) {\n                        $this->getLogger()->debug(\n                            sprintf(\n                                'LDAPGroupMapping ID %s is missing DN field. Skipping',\n                                $mapping->ID\n                            )\n                        );\n                        continue;\n                    }\n\n                    \/\/ the user is a direct member of group with a mapping, add them to the SS group.\n                    if ($mapping->DN == $groupDN) {\n                        $group = $mapping->Group();\n                        if ($group && $group->exists()) {\n                            $group->Members()->add($member, [\n                                'IsImportedFromLDAP' => '1'\n                            ]);\n                            $mappedGroupIDs[] = $mapping->GroupID;\n                        }\n                    }\n\n                    \/\/ the user *might* be a member of a nested group provided the scope of the mapping\n                    \/\/ is to include the entire subtree. Check all those mappings and find the LDAP child groups\n                    \/\/ to see if they are a member of one of those. If they are, add them to the SS group\n                    if ($mapping->Scope == 'Subtree') {\n                        $childGroups = $this->getNestedGroups($mapping->DN, ['dn']);\n                        if (!$childGroups) {\n                            continue;\n                        }\n\n                        foreach ($childGroups as $childGroupDN => $childGroupRecord) {\n                            if ($childGroupDN == $groupDN) {\n                                $group = $mapping->Group();\n                                if ($group && $group->exists()) {\n                                    $group->Members()->add($member, [\n                                        'IsImportedFromLDAP' => '1'\n                                    ]);\n                                    $mappedGroupIDs[] = $mapping->GroupID;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        \/\/ Lookup the previous mappings and see if there is any mappings no longer present.\n        $unmappedGroups = $member->Groups()->alterDataQuery(function (DataQuery $query) {\n            \/\/ join with the Group_Members table because we only want those group members assigned by this module.\n            $query->leftJoin(\"Group_Members\", '\"Group_Members\".\"GroupID\" = \"Group\".\"ID\"');\n            $query->where('\"Group_Members\".\"IsImportedFromLDAP\" = 1');\n        });\n\n        \/\/ Don't remove associations which have just been added and we know are already correct!\n        if (!empty($mappedGroupIDs)) {\n            $unmappedGroups = $unmappedGroups->filter(\"GroupID:NOT\", $mappedGroupIDs);\n        }\n\n        \/\/ Remove the member from any previously mapped groups, where the mapping\n        \/\/ has since been removed in the LDAP data source\n        if ($unmappedGroups->count()) {\n            foreach ($unmappedGroups as $group) {\n                $group->Members()->remove($member);\n            }\n        }\n    }","label":0}
{"text":"protected function fromFileType($path)\n    {\n        switch( Filesystem::getExtension($path) )\n        {\n            case 'png' : return imagecreatefrompng($path);\n            case 'gif' : return imagecreatefromgif($path);\n            case 'jpg' :\n            case 'jpeg':\n            default    : return imagecreatefromjpeg($path);\n        }\n    }","label":0}
{"text":"func generateKey(keypath string, salt []byte, keyiter int) (key *[secret.SecretKeyLength]byte, isPass bool, err error) {\n\t\/\/ if a keypath is given try and use it\n\tif keypath != \"\" {\n\t\tkey, err := secret.ReadKeyFromDisk(keypath)\n\t\tif err != nil {\n\t\t\treturn nil, false, fmt.Errorf(\"unable to build secret service: %v\", err)\n\t\t}\n\t\treturn key, false, nil\n\t}\n\n\t\/\/ otherwise read in a passphrase from disk and use that, remember to reset your terminal afterwards\n\tvar passphrase string\n\tfmt.Printf(\"Passphrase: \")\n\tfmt.Scanln(&passphrase)\n\n\t\/\/ derive key and return it\n\tkeySlice := pbkdf2.Key([]byte(passphrase), salt, keyiter, 32, sha256.New)\n\tkeyBytes, err := secret.KeySliceToArray(keySlice)\n\tif err != nil {\n\t\treturn nil, true, err\n\t}\n\n\treturn keyBytes, true, nil\n}","label":0}
{"text":"func (f *Flash) GetString(key string) string {\n\tr, _ := f.Get(key).(string)\n\treturn r\n}","label":0}
{"text":"public static netbridge_binding get(nitro_service service, String name) throws Exception{\n\t\tnetbridge_binding obj = new netbridge_binding();\n\t\tobj.set_name(name);\n\t\tnetbridge_binding response = (netbridge_binding) obj.get_resource(service);\n\t\treturn response;\n\t}","label":0}
{"text":"public Chat chatWith(EntityBareJid jid) {\n        Chat chat = chats.get(jid);\n        if (chat == null) {\n            synchronized (chats) {\n                \/\/ Double-checked locking.\n                chat = chats.get(jid);\n                if (chat != null) {\n                    return chat;\n                }\n                chat = new Chat(connection(), jid);\n                chats.put(jid, chat);\n            }\n        }\n        return chat;\n    }","label":0}
{"text":"public function getHelper($helperType)\n    {\n        if ($this->isValidKey($helperType)) {\n            return $this->getHelperMap()->get($helperType);\n        } else {\n            throw new InvalidArgumentException('Invalid form helper type given');\n        }\n    }","label":0}
{"text":"public function setSiteAccess(SiteAccess $siteAccess = null)\n    {\n        if ($siteAccess === null) {\n            return;\n        }\n\n        $this->matchConfig = $this->configResolver->getParameter('block_view', 'ezsettings', $siteAccess->name);\n    }","label":0}
{"text":"func WithBundle(bundleDir string, ociSpec *specs.Spec) containerd.NewContainerOpts {\n\treturn func(ctx context.Context, client *containerd.Client, c *containers.Container) error {\n\t\tif c.Labels == nil {\n\t\t\tc.Labels = make(map[string]string)\n\t\t}\n\t\tuid, gid := getSpecUser(ociSpec)\n\t\tif uid == 0 && gid == 0 {\n\t\t\tc.Labels[DockerContainerBundlePath] = bundleDir\n\t\t\treturn idtools.MkdirAllAndChownNew(bundleDir, 0755, idtools.Identity{UID: 0, GID: 0})\n\t\t}\n\n\t\tp := string(filepath.Separator)\n\t\tcomponents := strings.Split(bundleDir, string(filepath.Separator))\n\t\tfor _, d := range components[1:] {\n\t\t\tp = filepath.Join(p, d)\n\t\t\tfi, err := os.Stat(p)\n\t\t\tif err != nil && !os.IsNotExist(err) {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\tif os.IsNotExist(err) || fi.Mode()&1 == 0 {\n\t\t\t\tp = fmt.Sprintf(\"%s.%d.%d\", p, uid, gid)\n\t\t\t\tif err := idtools.MkdirAndChown(p, 0700, idtools.Identity{UID: uid, GID: gid}); err != nil && !os.IsExist(err) {\n\t\t\t\t\treturn err\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif c.Labels == nil {\n\t\t\tc.Labels = make(map[string]string)\n\t\t}\n\t\tc.Labels[DockerContainerBundlePath] = p\n\t\treturn nil\n\t}\n}","label":0}
{"text":"def export(self, storage_client, overwrite=True):\n        \n        '''\n            \n        '''\n        \n        title = '%s.export' % self.__class__.__name__\n        \n    # validate storage client\n        method_list = [ 'save', 'load', 'list', 'export', 'delete', 'remove', '_import', 'collection_name' ]\n        for method in method_list:\n            if not getattr(storage_client, method, None):\n                from labpack.parsing.grammar import join_words\n                raise ValueError('%s(storage_client=...) must be a client object with %s methods.' % (title, join_words(method_list)))\n            \n    # walk collection folder to find files\n        import os\n        count = 0\n        skipped = 0\n        for file_path, file_id in self._walk():\n            path_segments = file_path.split(os.sep)\n            record_key = os.path.join(*path_segments)\n            record_key = record_key.replace('\\\\','\/')\n            \n    # retrieve data and metadata\n            try:\n                record_data = self.drive.get_media(fileId=file_id).execute()\n            except:\n                raise DriveConnectionError(title)\n            try:\n                file = self.drive.get(fileId=file_id, fields='modifiedTime').execute()\n                client_modified = file.get('modifiedTime', '')\n            except:\n                raise DriveConnectionError(title)\n            \n    # import record into storage client\n            last_modified = 0.0\n            if client_modified:\n                from labpack.records.time import labDT\n                last_modified = labDT.fromISO(client_modified).epoch()\n            outcome = storage_client._import(record_key, record_data, overwrite=overwrite, last_modified=last_modified)\n            if outcome:\n                count += 1\n            else:\n                skipped += 1\n            \n    # report outcome\n        plural = ''\n        skip_insert = ''\n        new_folder = storage_client.collection_name\n        if count != 1:\n            plural = 's'\n        if skipped > 0:\n            skip_plural = ''\n            if skipped > 1:\n                skip_plural = 's'\n            skip_insert = ' %s record%s skipped to avoid overwrite.' % (str(skipped), skip_plural)\n        exit_msg = '%s record%s exported to %s.%s' % (str(count), plural, new_folder, skip_insert)\n        return exit_msg","label":0}
{"text":"public static List<SourceInfo> getSourceInfo(String tenantId, List<Trace> items)\n                                throws RetryAttemptException {\n        List<SourceInfo> sourceInfoList = new ArrayList<SourceInfo>();\n\n        int curpos=0;\n\n        \/\/ This method initialises the deriver with a list of trace fragments\n        \/\/ that will need to be referenced when correlating a consumer with a producer\n        for (int i = 0; i < items.size(); i++) {\n\n            \/\/ Need to check for Producer nodes\n            Trace trace = items.get(i);\n            StringBuffer nodeId = new StringBuffer(trace.getFragmentId());\n\n            for (int j = 0; j < trace.getNodes().size(); j++) {\n                Node node = trace.getNodes().get(j);\n                int len = nodeId.length();\n\n                initialiseSourceInfo(sourceInfoList, tenantId, trace, nodeId, j,\n                        node);\n\n                \/\/ Trim the node id for use with next node\n                nodeId.delete(len, nodeId.length());\n            }\n\n            \/\/ Apply origin information to the source info\n            EndpointRef ep = EndpointUtil.getSourceEndpoint(trace);\n            for (int j=curpos; j < sourceInfoList.size(); j++) {\n                SourceInfo si = sourceInfoList.get(j);\n                si.setEndpoint(ep);\n            }\n\n            curpos = sourceInfoList.size();\n        }\n\n        return sourceInfoList;\n    }","label":0}
{"text":"def on_taskend(self, task):\n        \n        key = 'timer' if task.elapsed else 'end'\n        filename = self.files.get(key)\n\n        if filename:\n            self._play_sound(filename)","label":0}
{"text":"function (context, payload) {\n        var state = context.state;\n        var entity = state.$name;\n        \/\/ If the payload is an array, then the payload should be an array of\n        \/\/ data so let's pass the whole payload as data.\n        if (Array.isArray(payload)) {\n            return context.dispatch(state.$connection + \"\/update\", { entity: entity, data: payload }, { root: true });\n        }\n        \/\/ If the payload doesn't have `data` property, we'll assume that\n        \/\/ the user has passed the object as the payload so let's define\n        \/\/ the whole payload as a data.\n        if (payload.data === undefined) {\n            return context.dispatch(state.$connection + \"\/update\", { entity: entity, data: payload }, { root: true });\n        }\n        \/\/ Else destructure the payload and let root action handle it.\n        return context.dispatch(state.$connection + \"\/update\", __assign({ entity: entity }, payload), { root: true });\n    }","label":0}
{"text":"public static final String applyPrefix(String property)\r\n    {\r\n        int addIdx = property.lastIndexOf(Add);\r\n        if (addIdx != -1)\r\n        {\r\n            return property.substring(0, addIdx);\r\n        }\r\n        else\r\n        {\r\n            int assignIdx = property.lastIndexOf(Assign);\r\n            if (assignIdx != -1)\r\n            {\r\n                return property.substring(0, assignIdx);\r\n            }\r\n            else\r\n            {\r\n                if (property.endsWith(Remove))\r\n                {\r\n                    return property.substring(0, property.length()-1);\r\n                }\r\n                else\r\n                {\r\n                    return property;\r\n                }\r\n            }\r\n        }\r\n    }","label":0}
{"text":"final public static function checkUnknownColumn($columns)\n    {\n        $unknown = array_diff((array) $columns, self::getColumns());\n        if (!empty($unknown)) {\n            throw new UnknownColumnException(static::class, $unknown);\n        }\n    }","label":0}
{"text":"func randomNonZero() uint64 {\n\tbuf := make([]byte, 8)\n\tn, err := io.ReadFull(rand.Reader, buf)\n\tif err != nil || n != 8 {\n\t\tpanic(\"Unable to fully read from rand.Reader\")\n\t}\n\tu, x := binary.Uvarint(buf)\n\tif u == 0 || x == 0 || x < 0 {\n\t\treturn randomNonZero()\n\t}\n\treturn u\n}","label":0}
{"text":"public T fetchUsingFirst(Method testMethod) {\n        T usedAnnotation = getAnnotationOnClassLevel();\n        if (isDefinedOn(testMethod)) {\n            usedAnnotation = fetchFrom(testMethod);\n        }\n\n        return usedAnnotation;\n    }","label":0}
{"text":"function getShardID(int $shardCount) {\n        if(\\PHP_INT_SIZE === 4) {\n            $time = \\base_convert(\\substr($this->binary, 0, 42), 2, 10);\n            $shard = (int) \\bcmod($time, ((string) $shardCount));\n            \n            return $shard;\n        } else {\n            $time = $this->value >> 22;\n            return ($time % $shardCount);\n        }\n    }","label":0}
{"text":"protected BytesBuff ensureCapacity(int addBytes) {\r\n\t\tif (addBytes < 0) {\r\n\t\t\tthrow new IllegalArgumentException(String.format(\"addBytes: %d (expected: >= 0)\", addBytes));\r\n\t\t}\r\n\t\tensureCapacityUnsafe(addBytes);\r\n\t\treturn this;\r\n\t}","label":0}
{"text":"func Convert_core_LocalVolumeSource_To_v1_LocalVolumeSource(in *core.LocalVolumeSource, out *v1.LocalVolumeSource, s conversion.Scope) error {\n\treturn autoConvert_core_LocalVolumeSource_To_v1_LocalVolumeSource(in, out, s)\n}","label":0}
{"text":"public function chars() {\n\t\t$chars = new ArrayObject();\n\t\tfor ($i = 0, $l = $this->length(); $i < $l; $i++) {\n\t\t\t$chars->push($this->at($i));\n\t\t}\n\t\treturn $chars;\n\t}","label":0}
{"text":"public void marshall(CreateBGPPeerRequest createBGPPeerRequest, ProtocolMarshaller protocolMarshaller) {\n\n        if (createBGPPeerRequest == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(createBGPPeerRequest.getVirtualInterfaceId(), VIRTUALINTERFACEID_BINDING);\n            protocolMarshaller.marshall(createBGPPeerRequest.getNewBGPPeer(), NEWBGPPEER_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }","label":0}
{"text":"function start(callback) {\n  let handle = {close(){server.close()}}\n  check(function _check(err, inUse) {\n    if (err) throw err\n    if (inUse) {\n      server = {close(){}}\n      init(callback)\n    }\n    else {\n      server = dynalite({\n        createTableMs: 0\n      }).listen(5000, function _server(err) {\n        if (err) {\n          \/\/ if we err then the db has been started elsewhere..\n          \/\/ just try to continue\n          console.log(err)\n        }\n        init(callback)\n      })\n    }\n  })\n  return handle\n}","label":0}
{"text":"public static <T extends MailChimpObject> T fromJson(String json, Class<T> clazz) {\n\t\ttry {\n\t\t\treturn MailChimpGsonFactory.createGson().fromJson(json, clazz);\n\t\t} catch(JsonParseException e) {\n\t\t\tthrow new IllegalArgumentException(e);\n\t\t}\n\t}","label":0}
{"text":"public function change()\n    {\n        $table = $this->table('link', array('id' => false, 'primary_key' => array('link')));\n        $table->addColumn('link', 'string', array('limit' => 100))\n              ->addColumn('url', 'string', array('limit' => 500))\n              ->addColumn('active', 'boolean')\n              ->create();\n    }","label":0}
{"text":"function getCmd(program, opt) {\n            var cmd,\n                expr;\n\n            if(program==='ogr2ogr') {\n\n                if(opt==='where') {\n                    expr = [\n                        '-where ',\n                        \"\\\"\", specs.key, \" IN \",\n                        \"('\", specs.val, \"')\\\" \",\n                        '-clipsrc ',\n                        specs.bounds.join(' ')\n                    ].join('');\n                }\n                else if(opt==='clipsrc') {\n                    expr = [\n                        '-clipsrc ',\n                        specs.bounds.join(' ')\n                    ].join('');\n                }\n                else  expr = '';\n\n                cmd = [\n                    \"ogr2ogr -f GeoJSON\",\n                    expr,\n                    common.geojsonDir + common.tn(r, s.name, v.name, 'geo.json'),\n                    common.wgetDir + common.srcPrefix + common.bn(r, v.src, 'shp')\n                ].join(' ');\n\n            }\n            else if(program==='mapshaper') {\n                cmd = [\n                    mapshaper,\n                    common.wgetDir + common.srcPrefix + common.bn(r, v.src, 'shp'),\n                    \"encoding=utf8\",\n                    \"-clip\",\n                    common.wgetDir + common.tn(r, s.name, specs.src, 'shp'),\n                    \"-filter remove-empty\",\n                    \"-o\",\n                    common.geojsonDir + common.tn(r, s.name, v.name, 'geo.json')\n               ].join(' ');\n            }\n\n            return cmd;\n        }","label":0}
{"text":"def get_tag_names(self):\n        \"\"\"\"\"\"\n        root = etree.fromstring(self.xml_full_text.encode('utf-8'))\n        return self.get_children_tag_names(root)","label":0}
{"text":"private function evaluateLimits()\n    {\n        $limits        = new \\stdClass();\n        $limits->rules = $this->limits;\n\n        $this->excludeIrrelevantRules($limits);\n\n        $this->getCacheModel()->evaluateLimits($limits, $this->campaignId);\n    }","label":0}
{"text":"public static <T> Level0ArrayOperator<BigInteger[],BigInteger> onArrayFor(final BigInteger... elements) {\r\n        return onArrayOf(Types.BIG_INTEGER, VarArgsUtil.asRequiredObjectArray(elements));\r\n    }","label":0}
{"text":"public void close() {\n        if (animation != null) {\n            animation.setRate(-1);\n            animation.play();\n            animation.setOnFinished(e -> {\n                closeDialog();\n            });\n        } else {\n            setOpacity(0);\n            setVisible(false);\n            closeDialog();\n        }\n\n    }","label":0}
{"text":"def switch_read_index(new_name)\n      new_index = [config.read_alias, new_name].join('_')\n\n      old_index =\n        if client.indices.exists_alias?(name: config.read_alias)\n          client.indices.get_alias(name: config.read_alias).keys.first\n        end\n\n      remove_action =\n        ({ remove: { index: old_index, alias: config.read_alias } } if old_index)\n\n      client.indices.update_aliases(body: {\n                                      actions: [\n                                        remove_action,\n                                        { add: { index: new_index, alias: config.read_alias } }\n                                      ].compact\n                                    })\n    end","label":0}
{"text":"private WritableRaster netdif() {\n        \/\/ get rows and cols from the active region\n        HashMap<String, Double> regionMap = CoverageUtilities.getRegionParamsFromGridCoverage(inFlow);\n        int cols = regionMap.get(CoverageUtilities.COLS).intValue();\n        int rows = regionMap.get(CoverageUtilities.ROWS).intValue();\n\n        int[] flow = new int[2];\n        int[] oldflow = new int[2];\n\n        RandomIter flowIter = CoverageUtilities.getRandomIterator(inFlow);\n        RandomIter streamIter = CoverageUtilities.getRandomIterator(inStream);\n        RandomIter rasterIter = CoverageUtilities.getRandomIterator(inRaster);\n        int[][] dir = ModelsSupporter.DIR_WITHFLOW_ENTERING;\n\n        \/\/ create new matrix\n        double[][] segna = new double[cols][rows];\n\n        pm.beginTask(msg.message(\"working\") + \"h.netdif\", 3 * rows);\n        \/\/ First step: It marks with 1 the points which are at the upstream\n        \/\/ beginning\n        \/\/ of a link or stream\n        for( int j = 0; j < rows; j++ ) {\n            for( int i = 0; i < cols; i++ ) {\n                flow[0] = i;\n                flow[1] = j;\n                \/\/ looks for the source\n                if (ModelsEngine.isSourcePixel(flowIter, flow[0], flow[1])) {\n                    segna[i][j] = 1;\n                } else if (!isNovalue(flowIter.getSampleDouble(i, j, 0)) && flowIter.getSampleDouble(i, j, 0) != 10.0) {\n                    for( int k = 1; k <= 8; k++ ) {\n                        if (flowIter.getSampleDouble(flow[0] + dir[k][1], flow[1] + dir[k][0], 0) == dir[k][2]) {\n                            if (streamIter.getSampleDouble(flow[0] + dir[k][1], flow[1] + dir[k][0], 0) == streamIter\n                                    .getSampleDouble(i, j, 0)) {\n                                segna[i][j] = 0;\n                                break;\n                            } else {\n                                segna[i][j] = 1;\n                            }\n                        }\n                    }\n                }\n            }\n            pm.worked(1);\n        }\n        WritableRaster diffImage = CoverageUtilities.createWritableRaster(cols, rows, null, inFlow.getRenderedImage()\n                .getSampleModel(), null);\n        WritableRandomIter diffIter = RandomIterFactory.createWritable(diffImage, null);\n        \/\/ Second step: It calculate the difference among the first and the last\n        \/\/ point of a link\n        for( int j = 0; j < rows; j++ ) {\n            for( int i = 0; i < cols; i++ ) {\n                if (segna[i][j] > 0) {\n                    flow[0] = i;\n                    flow[1] = j;\n                    oldflow[0] = i;\n                    oldflow[1] = j;\n                    if (!isNovalue(flowIter.getSampleDouble(flow[0], flow[1], 0))) {\n                        \/\/ call go_downstream in FluidUtils\n                        ModelsEngine.go_downstream(flow, flowIter.getSampleDouble(flow[0], flow[1], 0));\n                        while( segna[flow[0]][flow[1]] < 1 && !isNovalue(flowIter.getSampleDouble(flow[0], flow[1], 0))\n                                && flowIter.getSampleDouble(flow[0], flow[1], 0) != 10.0\n                                && streamIter.getSampleDouble(flow[0], flow[1], 0) == streamIter.getSampleDouble(i, j, 0) ) {\n                            oldflow[0] = flow[0];\n                            oldflow[1] = flow[1];\n                            if (!ModelsEngine.go_downstream(flow, flowIter.getSampleDouble(flow[0], flow[1], 0)))\n                                return null;\n                        }\n                        diffIter.setSample(\n                                i,\n                                j,\n                                0,\n                                Math.abs(rasterIter.getSampleDouble(i, j, 0)\n                                        - rasterIter.getSampleDouble(oldflow[0], oldflow[1], 0)));\n                        \/\/ Assign to any point inside the link the value of the\n                        \/\/ difference\n                        flow[0] = i;\n                        flow[1] = j;\n                        if (!ModelsEngine.go_downstream(flow, flowIter.getSampleDouble(flow[0], flow[1], 0)))\n                            return null;\n                        while( !isNovalue(flowIter.getSampleDouble(flow[0], flow[1], 0))\n                                && flowIter.getSampleDouble(flow[0], flow[1], 0) != 10.0\n                                && streamIter.getSampleDouble(flow[0], flow[1], 0) == streamIter.getSampleDouble(i, j, 0) ) {\n                            diffIter.setSample(flow[0], flow[1], 0, diffIter.getSampleDouble(i, j, 0));\n                            if (!ModelsEngine.go_downstream(flow, flowIter.getSampleDouble(flow[0], flow[1], 0)))\n                                return null;\n                        }\n                        if (flowIter.getSampleDouble(flow[0], flow[1], 0) == 10\n                                && streamIter.getSampleDouble(flow[0], flow[1], 0) == streamIter.getSampleDouble(i, j, 0)) {\n                            diffIter.setSample(flow[0], flow[1], 0, diffIter.getSampleDouble(i, j, 0));\n                        }\n                    }\n                }\n            }\n            pm.worked(1);\n        }\n        for( int j = 0; j < rows; j++ ) {\n            for( int i = 0; i < cols; i++ ) {\n                if (isNovalue(streamIter.getSampleDouble(i, j, 0))) {\n                    diffIter.setSample(i, j, 0, doubleNovalue);\n                }\n            }\n            pm.worked(1);\n        }\n        pm.done();\n\n        diffIter.done();\n        flowIter.done();\n        rasterIter.done();\n        streamIter.done();\n        return diffImage;\n    }","label":0}
{"text":"public function indexAction($id, $slug)\n    {\n        $player = $this->getDoctrine()->getRepository('VideoGamesRecordsCoreBundle:Player')->getPlayerWithGames($id);\n        if ($slug !== $player->getSlug()) {\n            return $this->redirectToRoute('vgr_player_index', ['id' => $player->getIdPlayer(), 'slug' => $player->getSlug()], 301);\n        }\n\n        $nbPlayer = $this->getDoctrine()->getRepository('VideoGamesRecordsCoreBundle:Player')->getNbPlayer(['nbChart>0' => true]);\n\n        $rows = $this->getDoctrine()->getRepository('VideoGamesRecordsCoreBundle:PlayerChart')->getRows(\n            [\n                'idPlayer' => $id,\n                'limit' => 1,\n                'orderBy' => [\n                    'column' => 'pc.dateModif',\n                    'order' => 'DESC',\n                ],\n            ]\n        );\n        if (count($rows) == 1) {\n            $lastChart = $rows[0];\n        } else {\n            $lastChart = null;\n        }\n\n        \/\/----- breadcrumbs\n        $breadcrumbs = $this->get('white_october_breadcrumbs');\n        $breadcrumbs->addRouteItem('Home', 'homepage');\n        $breadcrumbs->addItem($player->getPseudo());\n\n        return $this->render(\n            'VideoGamesRecordsCoreBundle:Player:index.html.twig',\n            [\n                'player' => $player,\n                'nbPlayer' => $nbPlayer,\n                'lastChart' => $lastChart\n            ]\n        );\n    }","label":0}
{"text":"public void generateMessageHeaderStub() throws IOException\n    {\n        final String messageHeader = \"MessageHeader\";\n        try (Writer out = outputManager.createOutput(messageHeader))\n        {\n            final StringBuilder sb = new StringBuilder();\n            final List<Token> tokens = ir.headerStructure().tokens();\n\n            imports = new TreeSet<>();\n            imports.add(\"io\");\n\n            generateTypeDeclaration(sb, messageHeader);\n            generateTypeBodyComposite(sb, messageHeader, tokens.subList(1, tokens.size() - 1));\n\n            generateEncodeDecode(sb, messageHeader, tokens.subList(1, tokens.size() - 1), false, false);\n            generateCompositePropertyElements(sb, messageHeader, tokens.subList(1, tokens.size() - 1));\n            out.append(generateFileHeader(ir.namespaces()));\n            out.append(sb);\n        }\n    }","label":0}
{"text":"func (m HostCertificateManager) ReplaceCACertificatesAndCRLs(ctx context.Context, caCert []string, caCrl []string) error {\n\treq := types.ReplaceCACertificatesAndCRLs{\n\t\tThis:   m.Reference(),\n\t\tCaCert: caCert,\n\t\tCaCrl:  caCrl,\n\t}\n\n\t_, err := methods.ReplaceCACertificatesAndCRLs(ctx, m.Client(), &req)\n\treturn err\n}","label":0}
{"text":"public static String ensureAbsolutePath(String path, String paramName) {\n        requireNonNull(path, paramName);\n        if (path.isEmpty() || path.charAt(0) != '\/') {\n            throw new IllegalArgumentException(paramName + \": \" + path + \" (expected: an absolute path)\");\n        }\n        return path;\n    }","label":0}
{"text":"func (c *Client) secGroupCreateHelper(url, method, name string, rules []SecGroupRule, spaceGuids []string) (*SecGroup, error) {\n\treqRules := make([]map[string]interface{}, len(rules))\n\n\tfor i, rule := range rules {\n\t\treqRules[i] = convertStructToMap(rule)\n\t\tprotocol := strings.ToLower(reqRules[i][\"protocol\"].(string))\n\n\t\t\/\/ if not icmp protocol need to remove the Code\/Type fields\n\t\tif protocol != \"icmp\" {\n\t\t\tdelete(reqRules[i], \"code\")\n\t\t\tdelete(reqRules[i], \"type\")\n\t\t}\n\t}\n\n\treq := c.NewRequest(method, url)\n\t\/\/set up request body\n\tinputs := map[string]interface{}{\n\t\t\"name\":  name,\n\t\t\"rules\": reqRules,\n\t}\n\n\tif spaceGuids != nil {\n\t\tinputs[\"space_guids\"] = spaceGuids\n\t}\n\treq.obj = inputs\n\t\/\/fire off the request and check for problems\n\tresp, err := c.DoRequest(req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tif resp.StatusCode != 201 { \/\/ Both create and update should give 201 CREATED\n\t\tvar response SecGroupCreateResponse\n\n\t\tbodyRaw, _ := ioutil.ReadAll(resp.Body)\n\n\t\terr = json.Unmarshal(bodyRaw, &response)\n\t\tif err != nil {\n\t\t\treturn nil, errors.Wrap(err, \"Error unmarshaling response\")\n\t\t}\n\n\t\treturn nil, fmt.Errorf(`Request failed CF API returned with status code %d\n-------------------------------\nError Code  %s\nCode        %d\nDescription %s`,\n\t\t\tresp.StatusCode, response.ErrorCode, response.Code, response.Description)\n\t}\n\t\/\/get the json from the response body\n\treturn respBodyToSecGroup(resp.Body, c)\n}","label":0}
{"text":"function() {\n      \n      \/\/ Unsubscribe all listeners to click and submit events\n      this.clickEvent.unsubscribeAll();\n      this.submitEvent.unsubscribeAll();\n      \n      \/\/ Purge element (remove listeners on el and childNodes recursively)\n      util.Event.purgeElement(this.el, true);\n      \n      \/\/ Remove from DOM\n      if(Dom.inDocument(this.el)) {\n         this.el.parentNode.removeChild(this.el);\n      }\n      \n   }","label":0}
{"text":"def mul(self, o):\n        \n        if self.is_integer and o.is_integer:\n            # Two integers!\n            a, b = self.lower_bound, o.lower_bound\n            ret = StridedInterval(bits=self.bits,\n                                  stride=0,\n                                  lower_bound=a * b,\n                                  upper_bound=a * b\n                                  )\n\n            if a * b > (2 ** self.bits - 1):\n                logger.warning('Overflow in multiplication detected.')\n\n            return ret.normalize()\n\n        else:\n            # All other cases\n\n            # Cut from both north pole and south pole\n            si1_psplit = self._psplit()\n            si2_psplit = o._psplit()\n            all_resulting_intervals = list()\n\n            for si1 in si1_psplit:\n                for si2 in si2_psplit:\n                    tmp_unsigned_mul = self._wrapped_unsigned_mul(si1, si2)\n                    tmp_signed_mul = self._wrapped_signed_mul(si1, si2)\n                    for tmp_meet in tmp_unsigned_mul._multi_valued_intersection(tmp_signed_mul):\n                        all_resulting_intervals.append(tmp_meet)\n        return StridedInterval.least_upper_bound(*all_resulting_intervals).normalize()","label":0}
{"text":"protected function injectMethod(ClassReflection $class, $methodTag)\n    {\n        $data = $this->parseMethod($methodTag);\n\n        \/\/ Bail if the method format is invalid\n        if (!$data) {\n            return false;\n        }\n\n        $method = new MethodReflection($data['name'], $class->getLine());\n        $method->setDocComment($data['description']);\n        $method->setShortDesc($data['description']);\n\n        if ($data['hint']) {\n            $method->setHint(array(array($data['hint'], null)));\n        }\n\n        \/\/ Add arguments to the method\n        foreach ($data['args'] as $name => $arg) {\n            $param = new ParameterReflection($name, $class->getLine());\n            if (!empty($arg['hint'])) {\n                $param->setHint(array(array($arg['hint'], null)));\n            }\n            if (!empty($arg['default'])) {\n                $param->setDefault($arg['default']);\n            }\n            $method->addParameter($param);\n        }\n\n        $class->addMethod($method);\n\n        return true;\n    }","label":0}
{"text":"func (a *Agent) Publisher(ctx context.Context, subscriptionID string) (exec.LogPublisher, func(), error) {\n\t\/\/ TODO(stevvooe): The level of coordination here is WAY too much for logs.\n\t\/\/ These should only be best effort and really just buffer until a session is\n\t\/\/ ready. Ideally, they would use a separate connection completely.\n\n\tvar (\n\t\terr       error\n\t\tpublisher api.LogBroker_PublishLogsClient\n\t)\n\n\terr = a.withSession(ctx, func(session *session) error {\n\t\tpublisher, err = api.NewLogBrokerClient(session.conn.ClientConn).PublishLogs(ctx)\n\t\treturn err\n\t})\n\tif err != nil {\n\t\treturn nil, nil, err\n\t}\n\n\t\/\/ make little closure for ending the log stream\n\tsendCloseMsg := func() {\n\t\t\/\/ send a close message, to tell the manager our logs are done\n\t\tpublisher.Send(&api.PublishLogsMessage{\n\t\t\tSubscriptionID: subscriptionID,\n\t\t\tClose:          true,\n\t\t})\n\t\t\/\/ close the stream forreal\n\t\tpublisher.CloseSend()\n\t}\n\n\treturn exec.LogPublisherFunc(func(ctx context.Context, message api.LogMessage) error {\n\t\t\tselect {\n\t\t\tcase <-ctx.Done():\n\t\t\t\tsendCloseMsg()\n\t\t\t\treturn ctx.Err()\n\t\t\tdefault:\n\t\t\t}\n\n\t\t\treturn publisher.Send(&api.PublishLogsMessage{\n\t\t\t\tSubscriptionID: subscriptionID,\n\t\t\t\tMessages:       []api.LogMessage{message},\n\t\t\t})\n\t\t}), func() {\n\t\t\tsendCloseMsg()\n\t\t}, nil\n}","label":0}
{"text":"@Override\n\tpublic long dynamicQueryCount(DynamicQuery dynamicQuery,\n\t\tProjection projection) {\n\t\treturn commerceAddressPersistence.countWithDynamicQuery(dynamicQuery,\n\t\t\tprojection);\n\t}","label":0}
{"text":"public function dispatchTransitionEvents(\n        MachineInterface $machine,\n        $object,\n        StateLineStack $stateLineStack,\n        Transition $transition\n    ) {\n        $this\n            ->eventDispatcher\n            ->dispatch(\n                ElcodiStateTransitionMachineEvents::ALL_TRANSITIONS,\n                TransitionEvent::create(\n                    $object,\n                    $stateLineStack,\n                    $transition\n                )\n            );\n\n        $this\n            ->eventDispatcher\n            ->dispatch(\n                str_replace(\n                    [\n                        '{machine_id}',\n                        '{state_name}',\n                    ],\n                    [\n                        $machine->getId(),\n                        $transition->getStart()->getName(),\n                    ],\n                    ElcodiStateTransitionMachineEvents::TRANSITION_FROM_STATE\n                ),\n                TransitionEvent::create(\n                    $object,\n                    $stateLineStack,\n                    $transition\n                )\n            );\n\n        $this\n            ->eventDispatcher\n            ->dispatch(\n                str_replace(\n                    [\n                        '{machine_id}',\n                        '{state_name}',\n                    ],\n                    [\n                        $machine->getId(),\n                        $transition->getFinal()->getName(),\n                    ],\n                    ElcodiStateTransitionMachineEvents::TRANSITION_TO_STATE\n                ),\n                TransitionEvent::create(\n                    $object,\n                    $stateLineStack,\n                    $transition\n                )\n            );\n\n        $this\n            ->eventDispatcher\n            ->dispatch(\n                str_replace(\n                    [\n                        '{machine_id}',\n                        '{transition_name}',\n                    ],\n                    [\n                        $machine->getId(),\n                        $transition->getName(),\n                    ],\n                    ElcodiStateTransitionMachineEvents::TRANSITION\n                ),\n                TransitionEvent::create(\n                    $object,\n                    $stateLineStack,\n                    $transition\n                )\n            );\n    }","label":0}
{"text":"def validate(cls, cfg, path=\"\", nested=0, parent_cfg=None):\n        \n\n        # number of critical errors found\n        num_crit = 0\n\n        # number of non-critical errors found\n        num_warn = 0\n\n\n        # check for missing keys in the config\n        for name in dir(cls):\n            if nested > 0:\n                break\n            try:\n                attr = getattr(cls, name)\n                if isinstance(attr, Attribute):\n                    if attr.default is None and name not in cfg:\n                        # no default value defined, which means its required\n                        # to be set in the config file\n                        if path:\n                            attr_full_name = \"%s.%s\" % (path, name)\n                        else:\n                            attr_full_name = name\n                        raise vodka.exceptions.ConfigErrorMissing(\n                            attr_full_name, attr)\n                    attr.preload(cfg, name)\n\n            except vodka.exceptions.ConfigErrorMissing as inst:\n                if inst.level == \"warn\":\n                    vodka.log.warn(inst.explanation)\n                    num_warn += 1\n                elif inst.level == \"critical\":\n                    vodka.log.error(inst.explanation)\n                    num_crit += 1\n\n\n        if type(cfg) in [dict, Config]:\n            keys = list(cfg.keys())\n            if nested > 0:\n                for _k, _v in cfg.items():\n                    _num_crit, _num_warn = cls.validate(\n                        _v,\n                        path=(\"%s.%s\" % (path, _k)),\n                        nested=nested-1,\n                        parent_cfg=cfg\n                    )\n                    num_crit += _num_crit\n                    num_warn += _num_warn\n                return num_crit, num_warn\n        elif type(cfg) == list:\n            keys = list(range(0, len(cfg)))\n        else:\n            raise ValueError(\"Cannot validate non-iterable config value\")\n\n\n\n        # validate existing keys in the config\n        for key in keys:\n            try:\n                _num_crit, _num_warn = cls.check(cfg, key, path)\n                num_crit += _num_crit\n                num_warn += _num_warn\n            except (\n                vodka.exceptions.ConfigErrorUnknown,\n                vodka.exceptions.ConfigErrorValue,\n                vodka.exceptions.ConfigErrorType\n            ) as inst:\n                if inst.level == \"warn\":\n                    vodka.log.warn(inst.explanation)\n                    num_warn += 1\n                elif inst.level == \"critical\":\n                    vodka.log.error(inst.explanation)\n                    num_crit += 1\n\n        return num_crit, num_warn","label":0}
{"text":"func SetCursor(x, y int) {\n\tif is_cursor_hidden(cursor_x, cursor_y) && !is_cursor_hidden(x, y) {\n\t\toutbuf.WriteString(funcs[t_show_cursor])\n\t}\n\n\tif !is_cursor_hidden(cursor_x, cursor_y) && is_cursor_hidden(x, y) {\n\t\toutbuf.WriteString(funcs[t_hide_cursor])\n\t}\n\n\tcursor_x, cursor_y = x, y\n\tif !is_cursor_hidden(cursor_x, cursor_y) {\n\t\twrite_cursor(cursor_x, cursor_y)\n\t}\n}","label":0}
{"text":"def input_stages(self):\n        \"\"\"\"\"\"\n        if self._properties.get(\"inputStages\") is None:\n            return []\n        return [\n            _helpers._int_or_none(entry)\n            for entry in self._properties.get(\"inputStages\")\n        ]","label":0}
{"text":"public void reset() {\n        done = false;\n        for (int i = 0; i < current.length; ++i) {\n            current[i] = 0;\n        }\n    }","label":0}
{"text":"def list_books(self):\n        '''  '''\n        names = []\n        try:\n            for n in self.cur.execute(\"SELECT name FROM book;\").fetchall():\n                names.extend(n)\n        except:\n            self.error(\"ERROR: cannot find database table 'book'\")\n        return(names)","label":0}
{"text":"func (m *Driver) Start() error {\n\tgo func() {\n\t\tfor {\n\t\t\tpacket, err := m.adaptor().ReadMAVLinkPacket()\n\t\t\tif err != nil {\n\t\t\t\tm.Publish(ErrorIOEvent, err)\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tm.Publish(PacketEvent, packet)\n\t\t\tmessage, err := packet.MAVLinkMessage()\n\t\t\tif err != nil {\n\t\t\t\tm.Publish(ErrorMAVLinkEvent, err)\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tm.Publish(MessageEvent, message)\n\t\t\ttime.Sleep(m.interval)\n\t\t}\n\t}()\n\treturn nil\n}","label":0}
{"text":"public function executeRules(Context $context)\n    {\n        foreach ($this->rules as $rule) {\n            $rule->execute($context);\n        }\n    }","label":0}
{"text":"public function validate($value, Constraint $constraint)\n    {\n        if (!$value instanceof FieldDefinitionData) {\n            return;\n        }\n\n        $fieldType = $this->fieldTypeService->getFieldType($value->getFieldTypeIdentifier());\n        $this->processValidationErrors($fieldType->validateValidatorConfiguration($value->validatorConfiguration));\n    }","label":0}
{"text":"func (c *Captcha) Create(num int, t StrType) (*Image, string) {\n\tif num <= 0 {\n\t\tnum = 4\n\t}\n\tdst := NewImage(c.size.X, c.size.Y)\n\t\/\/tmp := NewImage(c.size.X, c.size.Y)\n\tc.drawBkg(dst)\n\tc.drawNoises(dst)\n\n\tstr := string(c.randStr(num, int(t)))\n\tc.drawString(dst, str)\n\t\/\/c.drawString(tmp, str)\n\n\treturn dst, str\n}","label":0}
{"text":"public com.google.api.ads.admanager.axis.v201808.SslScanResult getSslScanResult() {\n        return sslScanResult;\n    }","label":0}
{"text":"protected function buildMarkdownText($markdown, $data)\n    {\n        return $this->textView\n                ?? $markdown->renderText($this->markdown, $data);\n    }","label":0}
{"text":"public function getSecond(): Period\n    {\n        $datepoint = $this->setTime(\n            (int) $this->format('H'),\n            (int) $this->format('i'),\n            (int) $this->format('s')\n        );\n\n        return new Period($datepoint, $datepoint->add(new DateInterval('PT1S')));\n    }","label":0}
{"text":"public static function settings($name = 'default') {\n\t\tif (!empty(self::$_engines[$name])) {\n\t\t\treturn self::$_engines[$name]->settings();\n\t\t}\n\t\treturn array();\n\t}","label":0}
{"text":"protected final int isLeft(double[] a, double[] b, double[] o) {\n    final double cross = getRX(a, o) * getRY(b, o) - getRY(a, o) * getRX(b, o);\n    if(cross == 0) {\n      \/\/ Compare manhattan distances - same angle!\n      final double dista = Math.abs(getRX(a, o)) + Math.abs(getRY(a, o));\n      final double distb = Math.abs(getRX(b, o)) + Math.abs(getRY(b, o));\n      return Double.compare(dista, distb);\n    }\n    return Double.compare(cross, 0);\n  }","label":0}
{"text":"func handleAccountOrigin(h goa.Handler) goa.Handler {\n\n\treturn func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {\n\t\torigin := req.Header.Get(\"Origin\")\n\t\tif origin == \"\" {\n\t\t\t\/\/ Not a CORS request\n\t\t\treturn h(ctx, rw, req)\n\t\t}\n\t\tif cors.MatchOrigin(origin, \"http:\/\/swagger.goa.design\") {\n\t\t\tctx = goa.WithLogContext(ctx, \"origin\", origin)\n\t\t\trw.Header().Set(\"Access-Control-Allow-Origin\", origin)\n\t\t\trw.Header().Set(\"Vary\", \"Origin\")\n\t\t\trw.Header().Set(\"Access-Control-Max-Age\", \"600\")\n\t\t\trw.Header().Set(\"Access-Control-Allow-Credentials\", \"true\")\n\t\t\tif acrm := req.Header.Get(\"Access-Control-Request-Method\"); acrm != \"\" {\n\t\t\t\t\/\/ We are handling a preflight request\n\t\t\t\trw.Header().Set(\"Access-Control-Allow-Methods\", \"GET, POST, PUT, PATCH, DELETE\")\n\t\t\t}\n\t\t\treturn h(ctx, rw, req)\n\t\t}\n\n\t\treturn h(ctx, rw, req)\n\t}\n}","label":0}
{"text":"public function locate($actionIdentifier)\n    {\n        if (array_key_exists($actionIdentifier, self::ACTION_FACTORY_METHOD_MAP)) {\n            return $this->factory->{self::ACTION_FACTORY_METHOD_MAP[$actionIdentifier]}();\n        }","label":0}
{"text":"public function hide(User $actor = null)\n    {\n        if (! $this->hidden_at) {\n            $this->hidden_at = Carbon::now();\n            $this->hidden_user_id = $actor ? $actor->id : null;\n\n            $this->raise(new Hidden($this));\n        }\n\n        return $this;\n    }","label":0}
{"text":"public void setXSIZE(Integer newXSIZE) {\n\t\tInteger oldXSIZE = xsize;\n\t\txsize = newXSIZE;\n\t\tif (eNotificationRequired())\n\t\t\teNotify(new ENotificationImpl(this, Notification.SET, AfplibPackage.IDD__XSIZE, oldXSIZE, xsize));\n\t}","label":0}
{"text":"def make_energies_hdu(self, extname=\"ENERGIES\"):\n        \n        if self._evals is None:\n            return None\n        cols = [fits.Column(\"ENERGY\", \"1E\", unit='MeV',\n                            array=self._evals)]\n        hdu = fits.BinTableHDU.from_columns(\n            cols, self.make_header(), name=extname)\n        return hdu","label":0}
{"text":"private function setupApp()\n    {\n        if ($this->session instanceof \\SessionHandlerInterface)\n        {\n            $serverStack = new SessionProvider(\n                new WampServer(\n                    $this->getContainer()->get(\"jdare_clank.clank_app\")\n                ),\n                $this->session\n            );\n\n        }else{\n            $serverStack = new WampServer(\n                $this->getContainer()->get(\"jdare_clank.clank_app\")\n            );\n        }\n\n\n        $this->app = new WsServer(\n            $serverStack\n        );\n    }","label":0}
{"text":"def default_gw_ipaddr\n      ip = case `\/bin\/uname -s`.rstrip\n           when 'Linux'\n             `\/sbin\/ip route get 8.8.8.8`.split(\"\\n\")[0].split.last\n           when 'SunOS'\n             `\/sbin\/ifconfig $(\/usr\/sbin\/route -n get 1.1.1.1  | awk '$1 == \"interface:\" {print $2}') | awk '$1 == \"inet\" { print $2 }'`\n           else\n             raise \"Unsupported platform to detect gateway IP address: #{`\/bin\/uname`}\"\n           end\n      ip = ip.rstrip\n      raise \"Failed to run command lines or empty result\" if ip == '' || $?.exitstatus != 0\n      ip\n    end","label":0}
{"text":"func (b *batch) Delete(key []byte) error {\n\tb.b.Delete(key)\n\tb.size++\n\treturn nil\n}","label":0}
{"text":"public final EObject ruleUntilToken() throws RecognitionException {\n        EObject current = null;\n\n        Token otherlv_0=null;\n        EObject lv_terminal_1_0 = null;\n\n\n\n        \tenterRule();\n\n        try {\n            \/\/ InternalXtext.g:3378:2: ( (otherlv_0= '->' ( (lv_terminal_1_0= ruleTerminalTokenElement ) ) ) )\n            \/\/ InternalXtext.g:3379:2: (otherlv_0= '->' ( (lv_terminal_1_0= ruleTerminalTokenElement ) ) )\n            {\n            \/\/ InternalXtext.g:3379:2: (otherlv_0= '->' ( (lv_terminal_1_0= ruleTerminalTokenElement ) ) )\n            \/\/ InternalXtext.g:3380:3: otherlv_0= '->' ( (lv_terminal_1_0= ruleTerminalTokenElement ) )\n            {\n            otherlv_0=(Token)match(input,43,FollowSets000.FOLLOW_47); \n\n            \t\t\tnewLeafNode(otherlv_0, grammarAccess.getUntilTokenAccess().getHyphenMinusGreaterThanSignKeyword_0());\n            \t\t\n            \/\/ InternalXtext.g:3384:3: ( (lv_terminal_1_0= ruleTerminalTokenElement ) )\n            \/\/ InternalXtext.g:3385:4: (lv_terminal_1_0= ruleTerminalTokenElement )\n            {\n            \/\/ InternalXtext.g:3385:4: (lv_terminal_1_0= ruleTerminalTokenElement )\n            \/\/ InternalXtext.g:3386:5: lv_terminal_1_0= ruleTerminalTokenElement\n            {\n\n            \t\t\t\t\tnewCompositeNode(grammarAccess.getUntilTokenAccess().getTerminalTerminalTokenElementParserRuleCall_1_0());\n            \t\t\t\t\n            pushFollow(FollowSets000.FOLLOW_2);\n            lv_terminal_1_0=ruleTerminalTokenElement();\n\n            state._fsp--;\n\n\n            \t\t\t\t\tif (current==null) {\n            \t\t\t\t\t\tcurrent = createModelElementForParent(grammarAccess.getUntilTokenRule());\n            \t\t\t\t\t}\n            \t\t\t\t\tset(\n            \t\t\t\t\t\tcurrent,\n            \t\t\t\t\t\t\"terminal\",\n            \t\t\t\t\t\tlv_terminal_1_0,\n            \t\t\t\t\t\t\"org.eclipse.xtext.Xtext.TerminalTokenElement\");\n            \t\t\t\t\tafterParserOrEnumRuleCall();\n            \t\t\t\t\n\n            }\n\n\n            }\n\n\n            }\n\n\n            }\n\n\n            \tleaveRule();\n\n        }\n\n            catch (RecognitionException re) {\n                recover(input,re);\n                appendSkippedTokens();\n            }\n        finally {\n        }\n        return current;\n    }","label":0}
{"text":"def _from_deprecated_son(cls, id_dict, run):\n        \n        course_key = CourseLocator(\n            id_dict['org'],\n            id_dict['course'],\n            run,\n            id_dict['revision'],\n            deprecated=True,\n        )\n        return cls(course_key, id_dict['category'], id_dict['name'], deprecated=True)","label":0}
{"text":"public function count()\n    {\n        $quotedColumn = DataObject::getSchema()->sqlColumnForField($this->dataClass(), 'ID');\n        return $this->getFinalisedQuery()->count(\"DISTINCT {$quotedColumn}\");\n    }","label":0}
{"text":"protected function removeImpossibleArraySubtypes(array $types): array\n    {\n        $subTypes = $this->getSubTypes();\n\n        if (count($subTypes) === 0) {\n            return $types;\n        }\n\n        $subHandler = $this->setTypes($subTypes);\n\n        foreach ($this->value as $item) {\n            $subHandler = $subHandler->setTypes($subHandler->getPossibleTypes($item));\n        }\n\n        $possibleSubTypes = $subHandler->types;\n\n        return count($possibleSubTypes) === count($subTypes)\n            ? $types\n            : array_filter($types, function($type) use ($possibleSubTypes) {\n                return substr($type, -2) !== '[]' || in_array(substr($type, 0, -2), $possibleSubTypes);\n            });\n    }","label":0}
{"text":"def close(self):\n        \n        now = time.time()\n        try:\n            file.close(self)\n            _mkdirIfNotExists(self._destpath.dirname())\n            self.finalpath = self._destpath\n            os.rename(self.name, self.finalpath.path)\n            os.utime(self.finalpath.path, (now, now))\n        except:\n            return defer.fail()\n        return defer.succeed(self.finalpath)","label":0}
{"text":"def list(self):\n        \n        mylist = []\n        for prod in self.product_list:\n            if self.purchasable(prod) and not self.entitled(prod):\n                mylist.append(prod)\n        return mylist","label":0}
{"text":"def distance_from_location_using_u_v_w(cls, u=None, v=None, w=None, timestep=None, location=None):\n        \n        # Move horizontally\n        distance_horiz = 0\n        azimuth = 0\n        angle = 0\n        depth = location.depth\n\n        if u is not 0 and v is not 0:\n            s_and_d = AsaMath.speed_direction_from_u_v(u=u,v=v) # calculates velocity in m\/s from transformed u and v\n            distance_horiz = s_and_d['speed'] * timestep # calculate the horizontal distance in meters using the velocity and model timestep\n            angle = s_and_d['direction']\n            # Great circle calculation \n            # Calculation takes in azimuth (heading from North, so convert our mathematical angle to azimuth)\n            azimuth = AsaMath.math_angle_to_azimuth(angle=angle)\n            \n        distance_vert = 0.\n        if w is not None:\n            # Move vertically\n            # Depth is positive up, negative down.  w wil be negative if moving down, and positive if moving up\n            distance_vert = w * timestep\n            depth += distance_vert # calculate the vertical distance in meters using w (m\/s) and model timestep (s)\n            \n\n        if distance_horiz != 0:\n            vertical_angle = math.degrees(math.atan(distance_vert \/ distance_horiz))\n            gc_result = AsaGreatCircle.great_circle(distance=distance_horiz, azimuth=azimuth, start_point=location) \n        else:\n            # Did we go up or down?\n            vertical_angle = 0.\n            if distance_vert < 0:\n                # Down\n                vertical_angle = 270.\n            elif distance_vert > 0:\n                # Up\n                vertical_angle = 90.\n            gc_result = { 'latitude': location.latitude, 'longitude': location.longitude, 'reverse_azimuth': 0 }\n            \n        #logger.info(\"Particle moving from %fm to %fm from a vertical speed of %f m\/s over %s seconds\" % (location.depth, depth, w, str(timestep)))            \n        gc_result['azimuth'] = azimuth\n        gc_result['depth'] = depth\n        gc_result['distance'] = distance_horiz\n        gc_result['angle'] = angle\n        gc_result['vertical_distance'] = distance_vert\n        gc_result['vertical_angle'] = vertical_angle\n        return gc_result","label":0}
{"text":"def connect(self):\n        \"\"\"\"\"\"\n        transport = self._defs.find_device()\n        if not transport:\n            raise interface.NotFoundError('{} not connected'.format(self))\n\n        log.debug('using transport: %s', transport)\n        for _ in range(5):  # Retry a few times in case of PIN failures\n            connection = self._defs.Client(transport=transport,\n                                           ui=self.ui,\n                                           state=self.__class__.cached_state)\n            self._verify_version(connection)\n\n            try:\n                connection.ping(msg='', pin_protection=True)  # unlock PIN\n                return connection\n            except (self._defs.PinException, ValueError) as e:\n                log.error('Invalid PIN: %s, retrying...', e)\n                continue\n            except Exception as e:\n                log.exception('ping failed: %s', e)\n                connection.close()  # so the next HID open() will succeed\n                raise","label":0}
{"text":"protected function configureMetadata()\n    {\n        $this->entityMetadata->setCollection($this->collectionName);\n        if (!empty($this->primaryKey)) {\n            $this->entityMetadata->setPrimaryKey($this->primaryKey);\n        }\n    }","label":0}
{"text":"public function processOutput($output)\n\t{\n\t\tif($this->hasEventHandler('onProcessOutput'))\n\t\t{\n\t\t\t$event=new COutputEvent($this,$output);\n\t\t\t$this->onProcessOutput($event);\n\t\t\tif(!$event->handled)\n\t\t\t\techo $output;\n\t\t}\n\t\telse\n\t\t\techo $output;\n\t}","label":0}
{"text":"private function prSorter($user = null)\n    {\n        $username = null;\n\n        if ($user instanceof User) {\n            $username = $this->getUsernameForGitHubMatching($user);\n            $username = strtolower($username);\n        }\n\n        return function ($a, $b) use ($username) {\n            $prA = (int) $a['number'];\n            $prB = (int) $b['number'];\n            $loginA = isset($a['head']['user']['login']) ? strtolower($a['head']['user']['login']) : 'unknown';\n            $loginB = isset($b['head']['user']['login']) ? strtolower($b['head']['user']['login']) : 'unknown';\n\n            if ($loginA === $loginB && $loginA === $username) {\n                \/\/ Everyone is owner\n                return ($prA > $prB) ? -1 : 1;\n\n            } elseif ($loginA === $username || $loginB === $username) {\n                \/\/ One is owner\n                if ($loginA === $username) {\n                    return -1;\n                }\n\n                if ($loginB === $username) {\n                    return 1;\n                }\n            }\n\n            \/\/ No one is owner\n            return ($prA > $prB) ? -1 : 1;\n        };\n    }","label":0}
{"text":"def bed(args):\n    \n    from jcvi.formats.blast import BlastLine\n    p = OptionParser(bed.__doc__)\n\n    opts, args = p.parse_args(args)\n\n    if len(args) != 1:\n        sys.exit(not p.print_help())\n\n    btabfile, = args\n    btab = Btab(btabfile)\n    for b in btab:\n        Bline = BlastLine(b.blastline)\n        print(Bline.bedline)","label":0}
{"text":"func (c *cache) notify(id types.UID, timestamp time.Time) {\n\tlist, ok := c.subscribers[id]\n\tif !ok {\n\t\t\/\/ No one to notify.\n\t\treturn\n\t}\n\tnewList := []*subRecord{}\n\tfor i, r := range list {\n\t\tif timestamp.Before(r.time) {\n\t\t\t\/\/ Doesn't meet the time requirement; keep the record.\n\t\t\tnewList = append(newList, list[i])\n\t\t\tcontinue\n\t\t}\n\t\tr.ch <- c.get(id)\n\t\tclose(r.ch)\n\t}\n\tif len(newList) == 0 {\n\t\tdelete(c.subscribers, id)\n\t} else {\n\t\tc.subscribers[id] = newList\n\t}\n}","label":0}
{"text":"def setup_hydrocarbon_ff(graph):\n    \"\"\"\"\"\"\n    # A) Define parameters.\n    # the bond parameters:\n    bond_params = {\n        (6, 1): 310*kcalmol\/angstrom**2,\n        (6, 6): 220*kcalmol\/angstrom**2,\n    }\n    # for every (a, b), also add (b, a)\n    for key, val in list(bond_params.items()):\n        if key[0] != key[1]:\n            bond_params[(key[1], key[0])] = val\n    # the bend parameters\n    bend_params = {\n        (1, 6, 1): 35*kcalmol\/rad**2,\n        (1, 6, 6): 30*kcalmol\/rad**2,\n        (6, 6, 6): 60*kcalmol\/rad**2,\n    }\n    # for every (a, b, c), also add (c, b, a)\n    for key, val in list(bend_params.items()):\n        if key[0] != key[2]:\n            bend_params[(key[2], key[1], key[0])] = val\n\n    # B) detect all internal coordinates and corresponding energy terms.\n    terms = []\n    # bonds\n    for i0, i1 in graph.edges:\n        K = bond_params[(graph.numbers[i0], graph.numbers[i1])]\n        terms.append(BondStretchTerm(K, i0, i1))\n    # bends (see b_bending_angles.py for the explanation)\n    for i1 in range(graph.num_vertices):\n        n = list(graph.neighbors[i1])\n        for index, i0 in enumerate(n):\n            for i2 in n[:index]:\n                K = bend_params[(graph.numbers[i0], graph.numbers[i1], graph.numbers[i2])]\n                terms.append(BendAngleTerm(K, i0, i1, i2))\n\n    # C) Create and return the force field\n    return ForceField(terms)","label":0}
{"text":"public function apply_forced_settings() {\n        global $CFG;\n\n        $updated = false;\n\n        foreach ($this->forceable as $property) {\n\n            if (isset($CFG->{\"grade_$property\"}) and isset($CFG->{\"grade_{$property}_flag\"}) and\n                                                    ((int) $CFG->{\"grade_{$property}_flag\"} & 1)) {\n\n                if ($CFG->{\"grade_$property\"} == -1) {\n                    continue; \/\/temporary bc before version bump\n                }\n                $this->$property = $CFG->{\"grade_$property\"};\n                $updated = true;\n            }\n        }\n\n        return $updated;\n    }","label":0}
{"text":"func (System) After(d time.Duration) <-chan time.Time {\n\treturn time.After(d)\n}","label":0}
{"text":"func addInterruptHandler(handler func()) {\n\t\/\/ Create the channel and start the main interrupt handler which invokes\n\t\/\/ all other callbacks and exits if not already done.\n\tif interruptChannel == nil {\n\t\tinterruptChannel = make(chan os.Signal, 1)\n\t\tsignal.Notify(interruptChannel, signals...)\n\t\tgo mainInterruptHandler()\n\t}\n\n\taddHandlerChannel <- handler\n}","label":0}
{"text":"function( data ) {\n\t\tif ( data && rnotwhite.test( data ) ) {\n\t\t\t\/\/ We use execScript on Internet Explorer\n\t\t\t\/\/ We use an anonymous function so that context is window\n\t\t\t\/\/ rather than jQuery in Firefox\n\t\t\t( window.execScript || function( data ) {\n\t\t\t\twindow[ \"eval\" ].call( window, data );\n\t\t\t} )( data );\n\t\t}\n\t}","label":0}
{"text":"public function distanceField($lat, $lng, $fieldName = null, $tableName = null) {\n\t\tif ($tableName === null) {\n\t\t\t$tableName = $this->_table->alias();\n\t\t}\n\t\t$fieldName = (!empty($fieldName) ? $fieldName : 'distance');\n\t\treturn [$tableName . '.' . $fieldName => $this->distanceExpr($lat, $lng, null, null, $tableName)];\n\t}","label":0}
{"text":"func (cg *ContextGroup) Handle(method, path string, handler http.HandlerFunc) {\n\tcg.group.Handle(method, path, func(w http.ResponseWriter, r *http.Request, params map[string]string) {\n\t\tif params != nil {\n\t\t\tr = r.WithContext(AddParamsToContext(r.Context(), params))\n\t\t}\n\t\thandler(w, r)\n\t})\n}","label":0}
{"text":"func (fv *FeatureVector) UnknownRequiredFeatures() []FeatureBit {\n\tvar unknown []FeatureBit\n\tfor feature := range fv.features {\n\t\tif feature%2 == 0 && !fv.IsKnown(feature) {\n\t\t\tunknown = append(unknown, feature)\n\t\t}\n\t}\n\treturn unknown\n}","label":0}
{"text":"func NewREST(imageRegistry image.Registry, imageStreamRegistry imagestream.Registry, registry registryhostname.RegistryHostnameRetriever) *REST {\n\treturn &REST{\n\t\timageRegistry:       imageRegistry,\n\t\timageStreamRegistry: imageStreamRegistry,\n\t\tstrategy:            NewStrategy(registry),\n\t}\n}","label":0}
{"text":"def render_to_response(self, context):\n        \n        self.setup_forms()\n        return TemplateResponse(\n            self.request, self.form_template,\n            context, current_app=self.admin_site.name)","label":0}
{"text":"func NewOperationExecutor(\n\toperationGenerator OperationGenerator) OperationExecutor {\n\n\treturn &operationExecutor{\n\t\tpendingOperations: nestedpendingoperations.NewNestedPendingOperations(\n\t\t\ttrue \/* exponentialBackOffOnError *\/),\n\t\toperationGenerator: operationGenerator,\n\t}\n}","label":0}
{"text":"protected function makeJSON(array $arrayToJsonify, array $headers): array\n    {\n        if (empty($headers['Content-Type'])) {\n            $headers['Content-Type'] = 'application\/json';\n        }\n        \/** @var string $body *\/\n        $body = \\json_encode($arrayToJsonify, JSON_PRETTY_PRINT);\n        return [$body, $headers];\n    }","label":0}
{"text":"def make_spo(sub, prd, obj):\n    '''\n    \n\n    '''\n    # To establish string as a curie and expand,\n    # we use a global curie_map(.yaml)\n    # sub are allways uri  (unless a bnode)\n    # prd are allways uri (unless prd is 'a')\n    # should fail loudly if curie does not exist\n    if prd == 'a':\n        prd = 'rdf:type'\n\n    try:\n        (subcuri, subid) = re.split(r':', sub)\n    except Exception:\n        LOG.error(\"not a Subject Curie  '%s'\", sub)\n        raise ValueError\n\n    try:\n        (prdcuri, prdid) = re.split(r':', prd)\n    except Exception:\n        LOG.error(\"not a Predicate Curie  '%s'\", prd)\n        raise ValueError\n    objt = ''\n\n    # object is a curie or bnode or literal [string|number]\n\n    objcuri = None\n    match = re.match(CURIERE, obj)\n    if match is not None:\n        try:\n            (objcuri, objid) = re.split(r':', obj)\n        except ValueError:\n            match = None\n    if match is not None and objcuri in CURIEMAP:\n        objt = CURIEMAP[objcuri] + objid.strip()\n        # allow unexpanded bnodes in object\n        if objcuri != '_' or CURIEMAP[objcuri] != '_:b':\n            objt = '<' + objt + '>'\n    elif obj.isnumeric():\n        objt = '\"' + obj + '\"'\n    else:\n        # Literals may not contain the characters \", LF, CR '\\'\n        # except in their escaped forms. internal quotes as well.\n        obj = obj.strip('\"').replace('\\\\', '\\\\\\\\').replace('\"', '\\'')\n        obj = obj.replace('\\n', '\\\\n').replace('\\r', '\\\\r')\n        objt = '\"' + obj + '\"'\n\n    # allow unexpanded bnodes in subject\n    if subcuri is not None and subcuri in CURIEMAP and \\\n            prdcuri is not None and prdcuri in CURIEMAP:\n        subjt = CURIEMAP[subcuri] + subid.strip()\n        if subcuri != '_' or CURIEMAP[subcuri] != '_:b':\n            subjt = '<' + subjt + '>'\n\n        return subjt + ' <' + CURIEMAP[prdcuri] + prdid.strip() + '> ' + objt + ' .'\n    else:\n        LOG.error(\n            'Cant work with: <%s> %s , <%s> %s, %s',\n            subcuri, subid, prdcuri, prdid, objt)\n        return None","label":0}
{"text":"@Override public void setUniqueID(Integer uniqueID)\n   {\n      ProjectFile parent = getParentFile();\n\n      if (m_uniqueID != null)\n      {\n         parent.getCalendars().unmapUniqueID(m_uniqueID);\n      }\n\n      parent.getCalendars().mapUniqueID(uniqueID, this);\n\n      m_uniqueID = uniqueID;\n   }","label":0}
{"text":"func (w *BatchedFileWriter) Write(p []byte) (n int, err error) {\n\tw.activeBuffer.Write(p)\n\n\tif size, _ := w.activeBuffer.Size(); size >= minUploadPartSize {\n\t\tw.logger.WithField(\"size\", size).Debug(\"Buffer size ready for request\")\n\t\tw.uploadPartInput()\n\t} else {\n\t\tw.logger.WithField(\"size\", size).Debug(\"Buffer size not big enough vor request\")\n\t}\n\n\tlength := len(p)\n\tw.totalSize += length\n\treturn length, nil\n}","label":0}
{"text":"def generate_data_for_edit_page(self):\n        \n\n        if not self.can_edit:\n            return {}\n\n        if self.edit_form:\n            return self.edit_form.to_dict()\n\n        return self.generate_simple_data_page()","label":0}
{"text":"public static function getXmlTagAliasList()\n    {\n        if ( self::$xmlTagAliasList === null )\n        {\n            $ezoeIni = eZINI::instance( 'ezoe.ini' );\n            self::$xmlTagAliasList = $ezoeIni->variable( 'EditorSettings', 'XmlTagNameAlias' );\n        }\n        return self::$xmlTagAliasList;\n    }","label":0}
{"text":"public static function get_all() {\n        $states = array();\n        $us = new ReflectionClass('question_state');\n        foreach ($us->getStaticProperties() as $name => $notused) {\n            $states[] = self::$$name;\n        }\n        return $states;\n    }","label":0}
{"text":"def install_table(self, connection, table, logger = None):\n        \n        # first install all partitions of the table\n\n        queries = []\n        query_tmpl = 'SELECT * FROM {}'\n        for partition in table.partitions:\n            partition.localize()\n            installed_name = self.install(connection, partition)\n            queries.append(query_tmpl.format(installed_name))\n\n        # now create view with union of all partitions.\n        query = 'CREATE VIEW {} AS {} '.format( table.vid, '\\nUNION ALL\\n'.join(queries))\n        logger.debug('Creating view for table.\\n    table: {}\\n    query: {}'.format(table.vid, query))\n        self._execute(connection, query, fetch=False)","label":0}
{"text":"public void push(List<Metric> rawMetrics) {\n    List<Metric> validMetrics = ValidCharacters.toValidValues(filter(rawMetrics));\n    List<Metric> metrics = transformMetrics(validMetrics);\n\n    LOGGER.debug(\"Scheduling push of {} metrics\", metrics.size());\n    final UpdateTasks tasks = getUpdateTasks(BasicTagList.EMPTY,\n        identifyCountersForPush(metrics));\n    final int maxAttempts = 5;\n    int attempts = 1;\n    while (!pushQueue.offer(tasks) && attempts <= maxAttempts) {\n      ++attempts;\n      final UpdateTasks droppedTasks = pushQueue.remove();\n      LOGGER.warn(\"Removing old push task due to queue full. Dropping {} metrics.\",\n          droppedTasks.numMetrics);\n      numMetricsDroppedQueueFull.increment(droppedTasks.numMetrics);\n    }\n    if (attempts >= maxAttempts) {\n      LOGGER.error(\"Unable to push update of {}\", tasks);\n      numMetricsDroppedQueueFull.increment(tasks.numMetrics);\n    } else {\n      LOGGER.debug(\"Queued push of {}\", tasks);\n    }\n  }","label":0}
{"text":"def try_unlink (self):\n        \n        try:\n            self.unlink ()\n            return True\n        except OSError as e:\n            if e.errno == 2:\n                return False # ENOENT\n            raise","label":0}
{"text":"public function _pathinfo() {\n\n        if(isset($this->server['PATH_INFO'])) {\n            return $this->server['PATH_INFO'];\n        }\n\n        return str_replace(\n            '\/index.php',\n            '',\n            explode('?',$this->uri)[0]\n        );\n\n\n        $inputEncoding = NULL;\n        $outputEncoding = NULL;\n        \/\/\u53c2\u8003Zend Framework\u5bf9pahtinfo\u7684\u5904\u7406, \u66f4\u597d\u7684\u517c\u5bb9\u6027\n        $pathInfo = NULL;\n\n        \/\/\u5904\u7406requestUri\n        $requestUri   = $this->uri;\n        $finalBaseUrl = $this->baseurl;\n\n        \/\/ Remove the query string from REQUEST_URI\n        if ($pos = strpos($requestUri, '?')) {\n            $requestUri = substr($requestUri, 0, $pos);\n        }\n\n        if ((NULL !== $finalBaseUrl) && (false === ($pathInfo = substr($requestUri, strlen($finalBaseUrl))))  ) {\n            \/\/ If substr() returns false then PATH_INFO is set to an empty string\n            $pathInfo = '\/';\n        }\n        elseif (NULL === $finalBaseUrl) {\n            $pathInfo = $requestUri;\n        }\n\n        if ($pathInfo) {\n            \/\/\u9488\u5bf9iis\u7684utf8\u7f16\u7801\u505a\u5f3a\u5236\u8f6c\u6362\n            \/\/\u53c2\u8003http:\/\/docs.moodle.org\/ja\/%E5%A4%9A%E8%A8%80%E8%AA%9E%E5%AF%BE%E5%BF%9C%EF%BC%9A%E3%82%B5%E3%83%BC%E3%83%90%E3%81%AE%E8%A8%AD%E5%AE%9A\n            if (!empty($inputEncoding) && !empty($outputEncoding) && (stripos($_SERVER['SERVER_SOFTWARE'], 'Microsoft-IIS') !== false || stripos($_SERVER['SERVER_SOFTWARE'], 'ExpressionDevServer') !== false) ) {\n                if (function_exists('mb_convert_encoding')) {\n                    $pathInfo = mb_convert_encoding($pathInfo, $outputEncoding, $inputEncoding);\n                }\n                else if (function_exists('iconv')) {\n                    $pathInfo = iconv($inputEncoding, $outputEncoding, $pathInfo);\n                }\n            }\n        }\n        else {\n            $pathInfo = '\/';\n        }\n\n        return '\/' . ltrim(urldecode($pathInfo), '\/');\n    }","label":0}
{"text":"private void quietRollback(Connection conn) {\r\n\t\tif (null != conn) {\r\n\t\t\ttry {\r\n\t\t\t\tconn.rollback();\r\n\t\t\t} catch (Exception e) {\r\n\t\t\t\tStaticLog.error(e);\r\n\t\t\t}\r\n\t\t}\r\n\t}","label":0}
{"text":"func (s *AssociationOverview) SetStatus(v string) *AssociationOverview {\n\ts.Status = &v\n\treturn s\n}","label":0}
{"text":"protected function _isAvailableWithSameSeries($aVouchers)\n    {\n        if (is_array($aVouchers)) {\n            $sId = $this->getId();\n            if (isset($aVouchers[$sId])) {\n                unset($aVouchers[$sId]);\n            }\n            $oSeries = $this->getSerie();\n            if (!$oSeries->oxvoucherseries__oxallowsameseries->value) {\n                foreach ($aVouchers as $voucherId => $voucherNr) {\n                    $oVoucher = oxNew(\\OxidEsales\\Eshop\\Application\\Model\\Voucher::class);\n                    $oVoucher->load($voucherId);\n                    if ($this->oxvouchers__oxvoucherserieid->value == $oVoucher->oxvouchers__oxvoucherserieid->value) {\n                        $oEx = oxNew(\\OxidEsales\\Eshop\\Core\\Exception\\VoucherException::class);\n                        $oEx->setMessage('ERROR_MESSAGE_VOUCHER_NOTALLOWEDSAMESERIES');\n                        $oEx->setVoucherNr($this->oxvouchers__oxvouchernr->value);\n                        throw $oEx;\n                    }\n                }\n            }\n        }\n\n        return true;\n    }","label":0}
{"text":"InputSource createInputSource(byte[] data, String systemId) {\n\n        InputSource result = new InputSource(new ByteArrayInputStream(data));\n        result.setSystemId(systemId);\n        return result;\n    }","label":0}
{"text":"func main() {\n\tvar args []string\n\n\t\/\/ Detect the current user to figure out what their ~ is.\n\tusr, err := user.Current()\n\tfatalOnError(err)\n\n\t\/\/ Load the list of aliases from the file at dbPath.\n\taliases, err := LoadAliases(path.Join(usr.HomeDir, dbPath))\n\tfatalOnError(err)\n\tdefer aliases.Close()\n\n\t\/\/ Parse arguments which might get passed to \"wol\".\n\tparser := flags.NewParser(&cliFlags, flags.Default & ^flags.HelpFlag)\n\targs, err = parser.Parse()\n\n\tec := 0\n\tswitch {\n\n\t\/\/ Parse Error, print usage.\n\tcase err != nil:\n\t\tec = printUsageGetExitCode(\"\", 1)\n\n\t\/\/ No arguments, or help requested, print usage.\n\tcase len(os.Args) == 1 || cliFlags.Help:\n\t\tec = printUsageGetExitCode(\"\", 0)\n\n\t\/\/ \"--version\" requested.\n\tcase cliFlags.Version:\n\t\tfmt.Printf(\"%s\\n\", wol.Version)\n\n\t\/\/ Make sure we are being asked to run a something.\n\tcase len(args) == 0:\n\t\tec = printUsageGetExitCode(\"No command specified, see usage:\\n\", 1)\n\n\t\/\/ All other cases go here.\n\tcase true:\n\t\tcmd, cmdArgs := strings.ToLower(args[0]), args[1:]\n\t\tif fn, ok := cmdMap[cmd]; ok {\n\t\t\terr = fn(cmdArgs, aliases)\n\t\t} else {\n\t\t\terr = wakeCmd(args, aliases)\n\t\t}\n\t\tfatalOnError(err)\n\t}\n\tos.Exit(ec)\n}","label":0}
{"text":"func (self *Operation) List() ([]*OperationInfo, error) {\n\tvar res []interface{}\n\t\/\/ params := Params{Params: []interface{}{self.Key}}\n\tparams := []interface{}{self.Key}\n\tif err := self.Call(\"operation.list\", params, &res); err != nil {\n\t\treturn nil, err\n\t}\n\n\toperations := make([]*OperationInfo, len(res), len(res))\n\tfor i, r := range res {\n\t\toperations[i] = ToOperationInfo(r.(map[string]interface{}))\n\t}\n\treturn operations, nil\n}","label":0}
{"text":"public static double squaredDistance(int[] x, int[] y) {\n        if (x.length != y.length) {\n            throw new IllegalArgumentException(\"Input vector sizes are different.\");\n        }\n\n        double sum = 0.0;\n        for (int i = 0; i < x.length; i++) {\n            sum += sqr(x[i] - y[i]);\n        }\n\n        return sum;\n    }","label":0}
{"text":"def _get_event_status(self, message):\n        \n        status = None\n\n        if message.event_status == LRR_EVENT_STATUS.TRIGGER:\n            status = True\n        elif message.event_status == LRR_EVENT_STATUS.RESTORE:\n            status = False\n\n        return status","label":0}
{"text":"public function renderViewContents($scopeItems)\n    {\n        $shouldRender = function() {\n            $app = Application::getFacadeApplication();\n\n            \/\/ If you hook into this event and use `preventRendering()`,\n            \/\/ you can prevent the block from being displayed.\n            $event = new BlockBeforeRender($this->block);\n            $app->make('director')->dispatch('on_block_before_render', $event);\n\n            return $event->proceed();\n        };\n\n        if (!$shouldRender()) {\n            return;\n        }\n\n        unset($shouldRender);\n\n        extract($scopeItems);\n        if (!$this->outputContent) {\n            ob_start();\n            include $this->template;\n            $this->outputContent = ob_get_contents();\n            ob_end_clean();\n        }\n\n        \/\/ The translatable texts in the block header\/footer need to be printed\n        \/\/ out in the system language.\n        $loc = Localization::getInstance();\n        $loc->pushActiveContext(Localization::CONTEXT_UI);\n\n        if ($this->blockViewHeaderFile) {\n            include $this->blockViewHeaderFile;\n        }\n\n        $this->controller->registerViewAssets($this->outputContent);\n\n        $this->onBeforeGetContents();\n        $this->fireOnBlockOutputEvent();\n        echo $this->outputContent;\n        $this->onAfterGetContents();\n\n        if ($this->blockViewFooterFile) {\n            include $this->blockViewFooterFile;\n        }\n\n        $loc->popActiveContext();\n    }","label":0}
{"text":"def md2rst(md_lines):\n    ''\n    lvl2header_char = {1: '=', 2: '-', 3: '~'}\n    for md_line in md_lines:\n        if md_line.startswith('#'):\n            header_indent, header_text = md_line.split(' ', 1)\n            yield header_text\n            header_char = lvl2header_char[len(header_indent)]\n            yield header_char * len(header_text)\n        else:\n            yield md_line","label":0}
{"text":"protected function reduceEventsToMinMaxRange()\n    {\n        $events = (isset($this->cal['VEVENT'])) ? $this->cal['VEVENT'] : array();\n\n        if (!empty($events)) {\n            foreach ($events as $key => $anEvent) {\n                if ($this->doesEventStartOutsideWindow($anEvent)) {\n                    $this->eventCount--;\n\n                    unset($events[$key]);\n\n                    continue;\n                }\n            }\n\n            $this->cal['VEVENT'] = $events;\n        }\n    }","label":0}
{"text":"public final boolean isWebElementSufficientlyShown(WebElement webElement){\n\t\tfinal WebView webView = viewFetcher.getFreshestView(viewFetcher.getCurrentViews(WebView.class, true));\n\t\tfinal int[] xyWebView = new int[2];\n\n\t\tif(webView != null && webElement != null){\n\t\t\twebView.getLocationOnScreen(xyWebView);\n\n\t\t\tif(xyWebView[1] + webView.getHeight() > webElement.getLocationY())\n\t\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}","label":0}
{"text":"public static function between($n, $min, $max, $inclusive = true){\n\t\t\n\t\tif($inclusive){\n\t\t\treturn static::greaterThanOrEqualTo($n, $min) &&\n\t\t\t\t\tstatic::lessThanOrEqualTo($n, $max);\n\t\t}\n\t\t\n\t\treturn static::greaterThan($n, $min) &&\n\t\t\t\tstatic::lessThan($n, $$max);\n\t\t\n\t}","label":0}
{"text":"function _browseDir (dir, fileList) {\n  fileList || (fileList = [])\n\n  try {\n    fs.readdirSync(dir)\n      .map(item => _buildFullPath(dir, item))\n      .map(item => _addFileOrContinueBrowsing(item, fileList))\n  } catch (e) {\n    throw new Error(e.message)\n  }\n\n  return fileList\n}","label":0}
{"text":"private String writeStringArray(String name, String[] values) {\n        StringBuffer buffer = new StringBuffer();\n        buffer.append(\"        \").append(name).append(\"=[\");\n        for (int i = 0; i < values.length; i++) {\n            buffer.append(\"'\").append(values[i]).append(\"'\");\n            if (i < values.length - 1) {\n                buffer.append(\", \");\n            }\n        }\n        buffer.append(\"]\\n\");\n        return buffer.toString();\n    }","label":0}
{"text":"protected function getProviderFactoryBasedOnConfig(UserConfig $userConfig)\n    {\n        $areaId   = $userConfig->provider->getAreaId();\n        $area     = $this->twoFactorProvidersService->getAreaManager()->getById($areaId);\n        $provider = $this->twoFactorProvidersService->getEnabledInArea($area);\n\n        $data = [\n            'id'  => array_get($provider->settings, 'client_id'),\n            'key' => array_get($provider->settings, 'secret_key'),\n        ];\n\n        return new Yubikey($data);\n    }","label":0}
{"text":"public void marshall(SearchProfilesRequest searchProfilesRequest, ProtocolMarshaller protocolMarshaller) {\n\n        if (searchProfilesRequest == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(searchProfilesRequest.getNextToken(), NEXTTOKEN_BINDING);\n            protocolMarshaller.marshall(searchProfilesRequest.getMaxResults(), MAXRESULTS_BINDING);\n            protocolMarshaller.marshall(searchProfilesRequest.getFilters(), FILTERS_BINDING);\n            protocolMarshaller.marshall(searchProfilesRequest.getSortCriteria(), SORTCRITERIA_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }","label":0}
{"text":"func (m *SpiderMenu) Checked(row int) bool {\n\treturn m.items[row].checked\n}","label":0}
{"text":"public function find($id, Data $data = null)\n    {\n        $id = $this->normalizeID($id);\n        $registry = Registry::getInstance();\n\n        if (!$data) {\n            if ($data = $registry->get($this->class, $id)) {\n                return $data;\n            }\n        }\n\n        if (!$record = $this->doFind($id)) {\n            return false;\n        }\n\n        $data = $this->pack($record, $data ?: null);\n        $registry->set($data);\n\n        return $data;\n    }","label":0}
{"text":"public static GetStatusPOptions toGetStatusOptions(ExistsPOptions existsOptions) {\n    GetStatusPOptions.Builder getStatusOptionsBuilder = GetStatusPOptions.newBuilder();\n    if (existsOptions.hasCommonOptions()) {\n      getStatusOptionsBuilder.setCommonOptions(existsOptions.getCommonOptions());\n    }\n    if (existsOptions.hasLoadMetadataType()) {\n      getStatusOptionsBuilder.setLoadMetadataType(existsOptions.getLoadMetadataType());\n    }\n    return getStatusOptionsBuilder.build();\n  }","label":0}
{"text":"public function getCurrentCommit()\n    {\n        \/** @var $result CallResult *\/\n        $result = $this->getSvn()->{'info'}($this->getRepositoryPath(), array(\n            '--xml',\n            '--revision' => 'HEAD'\n        ));\n        $result->assertSuccess(sprintf('Cannot get info for \"%s\"', $this->getRepositoryPath()));\n\n        $xml    = simplexml_load_string($result->getStdOut());\n        if (!$xml) {\n            throw new \\RuntimeException(sprintf('Cannot read info XML for \"%s\"', $this->getRepositoryPath()));\n        }\n\n        $commit = $xml->xpath('\/info\/entry\/commit[@revision]');\n        if (empty($commit)) {\n            throw new \\RuntimeException(sprintf('Cannot read info XML for \"%s\"', $this->getRepositoryPath()));\n        }\n\n        $commit = reset($commit);\n        return (string)($commit['revision']);\n    }","label":0}
{"text":"func (sr *sr_Cyrl_BA) WeekdayAbbreviated(weekday time.Weekday) string {\n\treturn sr.daysAbbreviated[weekday]\n}","label":0}
{"text":"def max(self, axis=None, skipna=True, *args, **kwargs):\n        \n        # TODO: skipna is broken with max.\n        # See https:\/\/github.com\/pandas-dev\/pandas\/issues\/24265\n        nv.validate_max(args, kwargs)\n        nv.validate_minmax_axis(axis)\n\n        mask = self.isna()\n        if skipna:\n            values = self[~mask].asi8\n        elif mask.any():\n            return NaT\n        else:\n            values = self.asi8\n\n        if not len(values):\n            # short-circut for empty max \/ min\n            return NaT\n\n        result = nanops.nanmax(values, skipna=skipna)\n        # Don't have to worry about NA `result`, since no NA went in.\n        return self._box_func(result)","label":0}
{"text":"public function get( $key ) {\n\t\t$key = sanitize_key( $key );\n\n\t\treturn isset( $_SESSION[ $key ] ) ? json_decode( $_SESSION[ $key ] ) : false;\n\t}","label":0}
{"text":"function (event) {\n                var\n                    reader = event.target,\n                    buffer,\n                    len,\n                    result,\n                    idx;\n                _gpfAssert(reader === this._reader, \"Unexpected change of reader\");\n                if (reader.error) {\n                    gpfFireEvent.call(this,\n                        gpfI.IReadableStream.ERROR,\n                        {\n                            \/\/ According to W3C\n                            \/\/ http:\/\/www.w3.org\/TR\/domcore\/#interface-domerror\n                            error: {\n                                name: reader.error.name,\n                                message: reader.error.message\n                            }\n                        },\n                        this._eventsHandler\n                    );\n                } else if (reader.readyState === FileReader.DONE) {\n                    buffer = new Int8Array(reader.result);\n                    len = buffer.length;\n                    result = [];\n                    for (idx = 0; idx < len; ++idx) {\n                        result.push(buffer[idx]);\n                    }\n                    gpfFireEvent.call(this, gpfI.IReadableStream.EVENT_DATA, {buffer: result}, this._eventsHandler);\n                }\n            }","label":0}
{"text":"func (p *PeriodicConfig) Next(fromTime time.Time) (time.Time, error) {\n\tif *p.SpecType == PeriodicSpecCron {\n\t\tif e, err := cronexpr.Parse(*p.Spec); err == nil {\n\t\t\treturn cronParseNext(e, fromTime, *p.Spec)\n\t\t}\n\t}\n\n\treturn time.Time{}, nil\n}","label":0}
{"text":"public Set<String> getPropertyNames() {\n    return Sets.newHashSet(\n        Iterables.concat(this.commonProperties.stringPropertyNames(), this.specProperties.stringPropertyNames()));\n  }","label":0}
{"text":"public static Single<Long> remove(CacheConfigBean cacheConfigBean, String key, Object member) {\n        Set<Object> members = new HashSet<>();\n        members.add(member);\n        return removes(cacheConfigBean, key, members);\n    }","label":0}
{"text":"function addModulesToPackageJson(externalModules, packageJson, pathToPackageRoot) {\n  _.forEach(externalModules, externalModule => {\n    const splitModule = _.split(externalModule, '@');\n    \/\/ If we have a scoped module we have to re-add the @\n    if (_.startsWith(externalModule, '@')) {\n      splitModule.splice(0, 1);\n      splitModule[0] = '@' + splitModule[0];\n    }\n    let moduleVersion = _.join(_.tail(splitModule), '@');\n    \/\/ We have to rebase file references to the target package.json\n    moduleVersion = rebaseFileReferences(pathToPackageRoot, moduleVersion);\n    packageJson.dependencies = packageJson.dependencies || {};\n    packageJson.dependencies[_.first(splitModule)] = moduleVersion;\n  });\n}","label":0}
{"text":"func (r *MemoryTTL) Set(key string, value interface{}) error {\n\tr.Lock()\n\tdefer r.Unlock()\n\n\tr.cache.Set(key, value)\n\tr.setAts[key] = time.Now()\n\treturn nil\n}","label":0}
{"text":"def remove_metadata_key(self, key, prefix=None):\n        \n        self.manager.remove_metadata_key(self, key, prefix=prefix)","label":0}
{"text":"protected function inheritDocs($class)\n    {\n        \/\/ inherit for properties\n        foreach ($class->properties as $p) {\n            if ($p->hasTag('inheritdoc') && ($inheritTag = $p->getFirstTag('inheritdoc')) !== null) {\n                $inheritedProperty = $this->inheritPropertyRecursive($p, $class);\n                if (!$inheritedProperty) {\n                    $this->errors[] = [\n                        'line' => $p->startLine,\n                        'file' => $class->sourceFile,\n                        'message' => \"Method {$p->name} has no parent to inherit from in {$class->name}.\",\n                    ];\n                    continue;\n                }\n\n                \/\/ set all properties that are empty.\n                foreach (['shortDescription', 'type', 'types'] as $property) {\n                    if (empty($p->$property) || is_string($p->$property) && trim($p->$property) === '') {\n                        $p->$property = $inheritedProperty->$property;\n                    }\n                }\n                \/\/ descriptions will be concatenated.\n                $p->description = trim($p->description) . \"\\n\\n\"\n                    . trim($inheritedProperty->description) . \"\\n\\n\"\n                    . $inheritTag->getContent();\n\n                $p->removeTag('inheritdoc');\n            }\n        }\n\n        \/\/ inherit for methods\n        foreach ($class->methods as $m) {\n            if ($m->hasTag('inheritdoc') && ($inheritTag = $m->getFirstTag('inheritdoc')) !== null) {\n                $inheritedMethod = $this->inheritMethodRecursive($m, $class);\n                if (!$inheritedMethod) {\n                    $this->errors[] = [\n                        'line' => $m->startLine,\n                        'file' => $class->sourceFile,\n                        'message' => \"Method {$m->name} has no parent to inherit from in {$class->name}.\",\n                    ];\n                    continue;\n                }\n                \/\/ set all properties that are empty.\n                foreach (['shortDescription', 'return', 'returnType', 'returnTypes', 'exceptions'] as $property) {\n                    if (empty($m->$property) || is_string($m->$property) && trim($m->$property) === '') {\n                        $m->$property = $inheritedMethod->$property;\n                    }\n                }\n                \/\/ descriptions will be concatenated.\n                $m->description = trim($m->description) . \"\\n\\n\"\n                    . trim($inheritedMethod->description) . \"\\n\\n\"\n                    . $inheritTag->getContent();\n\n                foreach ($m->params as $i => $param) {\n                    if (!isset($inheritedMethod->params[$i])) {\n                        $this->errors[] = [\n                            'line' => $m->startLine,\n                            'file' => $class->sourceFile,\n                            'message' => \"Method param $i does not exist in parent method, @inheritdoc not possible in {$m->name} in {$class->name}.\",\n                        ];\n                        continue;\n                    }\n                    if (empty($param->description) || trim($param->description) === '') {\n                        $param->description = $inheritedMethod->params[$i]->description;\n                    }\n                    if (empty($param->type) || trim($param->type) === '') {\n                        $param->type = $inheritedMethod->params[$i]->type;\n                    }\n                    if (empty($param->types)) {\n                        $param->types = $inheritedMethod->params[$i]->types;\n                    }\n                }\n                $m->removeTag('inheritdoc');\n            }\n        }\n    }","label":0}
{"text":"def _run(self, *args: Any, **kwargs: Any) -> None:\n        \n        try:\n            self._body(*args, **kwargs)\n            if _logger is not None:\n                _log(INFO, \"Process\", self.local.name, \"die-finish\")\n        except Interrupt:\n            if _logger is not None:\n                _log(INFO, \"Process\", self.local.name, \"die-interrupt\")","label":0}
{"text":"public function mergeInto(Miner $Miner, $overrideLimit = true)\n    {\n        if ($this->isSelect()) {\n            $this->mergeSelectInto($Miner);\n            $this->mergeFromInto($Miner);\n            $this->mergeJoinInto($Miner);\n            $this->mergeWhereInto($Miner);\n            $this->mergeGroupByInto($Miner);\n            $this->mergeHavingInto($Miner);\n            $this->mergeOrderByInto($Miner);\n            \n            if ($overrideLimit) {\n                $this->mergeLimitInto($Miner);\n            }\n        } elseif ($this->isInsert()) {\n            $this->mergeInsertInto($Miner);\n            $this->mergeSetInto($Miner);\n        } elseif ($this->isReplace()) {\n            $this->mergeReplaceInto($Miner);\n            $this->mergeSetInto($Miner);\n        } elseif ($this->isUpdate()) {\n            $this->mergeUpdateInto($Miner);\n            $this->mergeJoinInto($Miner);\n            $this->mergeSetInto($Miner);\n            $this->mergeWhereInto($Miner);\n            \n            \/\/ ORDER BY and LIMIT are only applicable when updating a single table.\n            if (! $this->join) {\n                $this->mergeOrderByInto($Miner);\n                \n                if ($overrideLimit) {\n                    $this->mergeLimitInto($Miner);\n                }\n            }\n        } elseif ($this->isDelete()) {\n            $this->mergeDeleteInto($Miner);\n            $this->mergeFromInto($Miner);\n            $this->mergeJoinInto($Miner);\n            $this->mergeWhereInto($Miner);\n            \n            \/\/ ORDER BY and LIMIT are only applicable when deleting from a single\n            \/\/ table.\n            if ($this->isDeleteTableFrom()) {\n                $this->mergeOrderByInto($Miner);\n                \n                if ($overrideLimit) {\n                    $this->mergeLimitInto($Miner);\n                }\n            }\n        }\n        \n        return $Miner;\n    }","label":0}
{"text":"public function getString()\n    {\n        $html = '';\n        if ($this->error->has()) {\n            $html .= '<ul class=\"ccm-error\">';\n            foreach ($this->error->getList() as $error) {\n                $html .= '<li>';\n                if ($error instanceof HtmlAwareErrorInterface && $error->messageContainsHtml()) {\n                    $html .= (string) $error;\n                } else {\n                    $html .= nl2br(h((string) $error));\n                }\n                $html .= '<\/li>';\n            }\n            $html .= '<\/ul>';\n        }\n\n        return $html;\n    }","label":0}
{"text":"@Override\n    public InetAddress getHostAddress(URL url) {\n        try {\n            return (InetAddress) _getHostAddress.invoke(getInstance(), new Object[] { url });\n        } catch (Exception e) {\n            FFDCFilter.processException(e, getClass().getName(), \"getHostAddress\", url);\n            return null;\n        }\n    }","label":0}
{"text":"public String buildCheckRecursive() {\n\n        StringBuffer retValue = new StringBuffer(256);\n\n        \/\/ show the checkbox only for folders\n        if (isOperationOnFolder()) {\n            retValue.append(\"<tr>\\n\\t<td colspan=\\\"3\\\" style=\\\"white-space: nowrap;\\\" unselectable=\\\"on\\\">\");\n            retValue.append(\"<input type=\\\"checkbox\\\" name=\\\"\");\n            retValue.append(PARAM_RECURSIVE);\n            retValue.append(\"\\\" value=\\\"true\\\">&nbsp;\");\n            retValue.append(key(Messages.GUI_TOUCH_MODIFY_SUBRESOURCES_0));\n            retValue.append(\"<\/td>\\n<\/tr>\\n\");\n        }\n        return retValue.toString();\n    }","label":0}
{"text":"public function delete( ServerRequestInterface $request, ResponseInterface $response )\n\t{\n\t\t$view = $this->getView();\n\n\t\ttry\n\t\t{\n\t\t\t$cntl = \\Aimeos\\Controller\\Frontend::create( $this->getContext(), 'subscription' );\n\n\t\t\t$view->items = $cntl->cancel( $view->param( 'id' ) );\n\t\t\t$view->total = 1;\n\n\t\t\t$status = 200;\n\t\t}\n\t\tcatch( \\Aimeos\\Controller\\Frontend\\Exception $e )\n\t\t{\n\t\t\t$status = 403;\n\t\t\t$view->errors = $this->getErrorDetails( $e, 'controller\/frontend' );\n\t\t}\n\t\tcatch( \\Aimeos\\MShop\\Exception $e )\n\t\t{\n\t\t\t$status = 404;\n\t\t\t$view->errors = $this->getErrorDetails( $e, 'mshop' );\n\t\t}\n\t\tcatch( \\Exception $e )\n\t\t{\n\t\t\t$status = 500;\n\t\t\t$view->errors = $this->getErrorDetails( $e );\n\t\t}\n\n\t\treturn $this->render( $response, $view, $status );\n\t}","label":0}
{"text":"function cacheKey (id) {\n    \/\/  get cache id\n    var cacheId = stableId({\n        columnsId: this.cache.model.columnsId,\n        modelViewInstanceIds: this.modelViewInstanceIds,\n        recordIds: this.ids,\n    })\n    \/\/ create cache key\n    return `${this.cache.model.name}:view:id:collection:${cacheId}`\n}","label":0}
{"text":"def _stop_instance(self):\n        \n        try:\n            vm_stop = self.compute.virtual_machines.power_off(\n                self.running_instance_id, self.running_instance_id\n            )\n        except Exception as error:\n            raise AzureCloudException(\n                'Unable to stop instance: {0}.'.format(error)\n            )\n\n        vm_stop.wait()","label":0}
{"text":"def set_plot_CO_mass(self,fig=3123,xaxis='mass',linestyle=['-'],marker=['o'],color=['r'],age_years=True,sparsity=500,markersparsity=200,withoutZlabel=False,t0_model=[]):\n\t\t\n\t\t'''\n\t\t\t\n\t\t'''\n\n\t\tif len(t0_model)==0:\n\t\t\tt0_model = len(self.runs_H5_surf)*[0]\n\n\t\tplt.figure(fig)\n                for i in range(len(self.runs_H5_surf)):\n                        sefiles=se(self.runs_H5_surf[i])\n\t\t\tcycles=range(int(sefiles.se.cycles[0]),int(sefiles.se.cycles[-1]),sparsity)\n\t\t\tmini=sefiles.get(\"mini\")\n\t\t\tzini=sefiles.get(\"zini\")\n\t\t\tlabel=str(mini)+'$M_{\\odot}$, Z='+str(zini)\n\t\t\tif xaxis=='cycles':\n\t\t\t\tx=cycles\n\t\t\tif xaxis=='age':\n\t\t\t\tx=sefiles.get(cycles,'age')\n                        \tif age_years==True:\n                                \tx=np.array(x)*sefiles.get('age_unit')\/(365*24*3600)\n\t\t\t\tx = x - x[t0_model[i]]\n\t\t\tif xaxis=='mass':\n\t\t\t\tx=sefiles.get(cycles,'mass')\n\t\t\tx=x[t0_model[i]:]\n\t\t\tc12=sefiles.get(cycles,'C-12')[t0_model[i]:]\n\t\t\to16=sefiles.get(cycles,'O-16')[t0_model[i]:]\n\t\t\tif withoutZlabel==True:\n\t\t\t\tplt.plot(x,4.\/3.*np.array(c12)\/np.array(o16),label=label.split(',')[0],marker=marker[i],linestyle=linestyle[i],markevery=markersparsity,color=color[i])\n\n\t\t\telse:\n\t\t\t\tplt.plot(x,4.\/3.*np.array(c12)\/np.array(o16),label=label,marker=marker[i],linestyle=linestyle[i],markevery=markersparsity,color=color[i])\n\t\t\tif xaxis=='mass':\n\t\t\t\tplt.xlim(7,0.5)\n\t\t\t\t#plt.gca().invert_xaxis()\t\n\t                        plt.xlabel('$M\/M_{\\odot}$',fontsize=18)\n\t\n                        plt.ylabel('C\/O Ratio', fontsize=18)\n\t\t\tplt.legend(loc=1)","label":0}
{"text":"@Override\n    public Link linkGetProperty(Invocation invocation, String propName) throws Exception {\n        return new ShadowObjectPropertyGetLink( invocation.builder(), this );\n    }","label":0}
{"text":"public final AtomEntry<JsonObject> readAtomEntry(final InputStream in) {\n\n        try (final JsonReader jsonReader = Json.createReader(new InputStreamReader(in))) {\n            final JsonObject jsonObj = jsonReader.readObject();\n            try {\n            \n                final String eventStreamId = ((JsonString) JsonPath.read(jsonObj, \"$.content.eventStreamId\")).getString();\n                final int eventNumber = ((JsonNumber) JsonPath.read(jsonObj, \"$.content.eventNumber\")).intValue();\n                final String eventType = ((JsonString) JsonPath.read(jsonObj, \"$.content.eventType\")).getString();\n                final String eventId = ((JsonString) JsonPath.read(jsonObj, \"$.content.eventId\")).getString();\n        \n                final JsonObject escMetaObj = JsonPath.read(jsonObj, \"$.content.metadata\");\n        \n                final String dataContentTypeStr = escMetaObj.getString(\"data-content-type\");\n                final EnhancedMimeType dataContentType = EnhancedMimeType.create(dataContentTypeStr);\n                final JsonObject data = JsonPath.read(jsonObj, \"$.content.data\");\n        \n                final EnhancedMimeType metaContentType;\n                final String metaTypeStr;\n                final JsonObject meta;\n                if (escMetaObj.containsKey(\"meta-type\")) {\n                    metaTypeStr = escMetaObj.getString(\"meta-type\");\n                    final String metaContentTypeStr = escMetaObj.getString(\"meta-content-type\");\n                    metaContentType = EnhancedMimeType.create(metaContentTypeStr);\n                    meta = escMetaObj;\n                } else {\n                    metaTypeStr = null;\n                    metaContentType = null;\n                    meta = null;\n                }\n        \n                return new AtomEntry<JsonObject>(eventStreamId, eventNumber, eventType, eventId, dataContentType,\n                        metaContentType, metaTypeStr, data, meta);\n    \n            } catch (final RuntimeException ex) {\n                LOG.error(\"Failed to parse JSON atom feed: \" + jsonObj);\n                throw ex;\n            }\n        }\n        \n    }","label":0}
{"text":"public function sendConfirmationEmail(\n        $recipient,\n        ApiOrderInterface $apiOrder,\n        $templatePath,\n        ContactInterface $customerContact = null\n    ) {\n        if (empty($recipient)) {\n            $this->writeLog('No recipient specified.');\n\n            return false;\n        }\n\n        $tmplData = array(\n            'order' => $apiOrder,\n            'contact' => $customerContact,\n        );\n\n        return $this->sendOrderMail($recipient, $templatePath, $tmplData, $apiOrder);\n    }","label":0}
{"text":"public function getView(Driver $driver)\n    {\n        $this->dataExporter->setModelClass($this->modelClass);\n        $this->view->setParam('menu', $this->container->getParameter('symfonyid.admin.menu.menu_name'));\n        $this->view->setParam('action_method', $this->translator->trans('page.list', array(), $this->container->getParameter('symfonyid.admin.translation_domain')));\n        $this->view->setParam('allow_create', $this->allowCreate);\n        $this->view->setParam('allow_delete', $this->allowBulkDelete);\n        $this->view->setParam('allow_download', $this->dataExporter->isAllowExport($driver, $this->container->getParameter('symfonyid.admin.max_records')));\n        $this->view->setParam('number', $this->container->getParameter('symfonyid.admin.number'));\n        $this->view->setParam('formating_number', $this->formatNumber);\n\n        $this->setHeader();\n        $this->setRecords($driver);\n\n        return $this->view;\n    }","label":0}
{"text":"func (base *Base) Reader(ctx context.Context, path string, offset int64) (io.ReadCloser, error) {\n\tctx, done := dcontext.WithTrace(ctx)\n\tdefer done(\"%s.Reader(%q, %d)\", base.Name(), path, offset)\n\n\tif offset < 0 {\n\t\treturn nil, storagedriver.InvalidOffsetError{Path: path, Offset: offset, DriverName: base.StorageDriver.Name()}\n\t}\n\n\tif !storagedriver.PathRegexp.MatchString(path) {\n\t\treturn nil, storagedriver.InvalidPathError{Path: path, DriverName: base.StorageDriver.Name()}\n\t}\n\n\trc, e := base.StorageDriver.Reader(ctx, path, offset)\n\treturn rc, base.setDriverName(e)\n}","label":0}
{"text":"@Override\n    protected void defineWidgets() {\n\n        \/\/ initialize the cache object to use for the dialog\n        initCacheObject();\n\n        setKeyPrefix(KEY_PREFIX);\n\n        \/\/ widgets to display\n        addWidget(new CmsWidgetDialogParameter(this, \"keys\", PAGES[0], new CmsDisplayWidget()));\n        addWidget(new CmsWidgetDialogParameter(this, \"variations\", PAGES[0], new CmsDisplayWidget()));\n        addWidget(new CmsWidgetDialogParameter(this, \"maxSize\", PAGES[0], new CmsDisplayWidget()));\n        addWidget(new CmsWidgetDialogParameter(this, \"avgSize\", PAGES[0], new CmsDisplayWidget()));\n        addWidget(new CmsWidgetDialogParameter(this, \"curSize\", PAGES[0], new CmsDisplayWidget()));\n    }","label":0}
{"text":"def send_message(self, text, chat_id, reply_to_message_id=None, disable_web_page_preview=False, reply_markup=None):\n        \n        self.logger.info('sending message \"%s\"', format(text.replace('\\n', '\\\\n')))\n        payload = dict(text=text,\n                       chat_id=chat_id,\n                       reply_to_message_id=reply_to_message_id,\n                       disable_web_page_preview=disable_web_page_preview,\n                       reply_markup=reply_markup)\n        return Message.from_api(self, **self._get('sendMessage', payload))","label":0}
{"text":"protected function typeToPDOParamType($type)\n    {\n        switch ($type) {\n        case \"boolean\":\n            return PDO::PARAM_BOOL;\n        case \"integer\":\n            return PDO::PARAM_STR;\n        case \"NULL\":\n            return PDO::PARAM_NULL;\n        case \"resource\":\n            return PDO::PARAM_LOB;\n        case \"double\":\n        case \"string\":\n        default:\n            return PDO::PARAM_STR;\n        }\n    }","label":0}
{"text":"protected function _initArticle($sHeapTable, $iCnt, & $blContinue)\n    {\n        $oRs = $this->getDb()->selectLimit(\"select oxid from $sHeapTable\", 1, $iCnt);\n        if ($oRs != false && $oRs->count() > 0) {\n            $oArticle = oxNew(\\OxidEsales\\Eshop\\Application\\Model\\Article::class);\n            $oArticle->setLoadParentData(true);\n\n            $oArticle->setLanguage(\\OxidEsales\\Eshop\\Core\\Registry::getSession()->getVariable(\"iExportLanguage\"));\n\n            if ($oArticle->load($oRs->fields[0])) {\n                \/\/ if article exists, do not stop export\n                $blContinue = true;\n                \/\/ check price\n                $dMinPrice = \\OxidEsales\\Eshop\\Core\\Registry::getConfig()->getRequestParameter(\"sExportMinPrice\");\n                if (!isset($dMinPrice) || (isset($dMinPrice) && ($oArticle->getPrice()->getBruttoPrice() >= $dMinPrice))) {\n                    \/\/Saulius: variant title added\n                    $sTitle = $oArticle->oxarticles__oxvarselect->value ? \" \" . $oArticle->oxarticles__oxvarselect->value : \"\";\n                    $oArticle->oxarticles__oxtitle->setValue($oArticle->oxarticles__oxtitle->value . $sTitle);\n\n                    $oArticle = $this->updateArticle($oArticle);\n\n                    return $oArticle;\n                }\n            }\n        }\n    }","label":0}
{"text":"func (v *CmdTeamRename) helpRenameWrongLevel() (err error) {\n\tif v.PrevName.Depth() != v.NewName.Depth() {\n\t\treturn nil\n\t}\n\tif v.PrevName.Depth() < 3 {\n\t\treturn nil\n\t}\n\t\/\/ Scan the parts of both names looking for the first difference.\n\t\/\/ Skip the root and the end. Because the root is not this case,\n\t\/\/ and the end is not a problem.\n\t\/\/ If it is in the middle then tell the user what to do.\n\tfor i := 1; i < len(v.PrevName.Parts)-1; i++ {\n\t\tprevPart := v.PrevName.Parts[i]\n\t\tnewPart := v.NewName.Parts[i]\n\t\tif !prevPart.Eq(newPart) {\n\t\t\ta1 := keybase1.TeamName{Parts: v.PrevName.Parts[:i+1]}\n\t\t\ta2 := keybase1.TeamName{Parts: v.NewName.Parts[:i+1]}\n\t\t\treturn fmt.Errorf(\"You must first rename `%v` to `%v`\", a1, a2)\n\t\t}\n\t}\n\treturn nil\n}","label":0}
{"text":"def execution_engine_model_changed(self, model, prop_name, info):\n        \n\n        notebook = self.view['notebook']\n        active_state_machine_id = self.model.state_machine_manager.active_state_machine_id\n\n        if active_state_machine_id is None:\n            # un-mark all state machine that are marked with execution-running style class\n            for tab in self.tabs.values():\n                label = notebook.get_tab_label(tab['page']).get_child().get_children()[0]\n                if label.get_style_context().has_class(constants.execution_running_style_class):\n                    label.get_style_context().remove_class(constants.execution_running_style_class)\n        else:\n            # mark active state machine with execution-running style class\n            page = self.get_page_for_state_machine_id(active_state_machine_id)\n            if page:\n                label = notebook.get_tab_label(page).get_child().get_children()[0]\n                label.get_style_context().add_class(constants.execution_running_style_class)","label":0}
{"text":"async def export_wallet(self, von_wallet: Wallet, path: str) -> None:\n        \n\n        LOGGER.debug('WalletManager.export_wallet >>> von_wallet %s, path %s', von_wallet, path)\n\n        if not von_wallet.handle:\n            LOGGER.debug('WalletManager.export_wallet <!< Wallet %s is closed', von_wallet.name)\n            raise WalletState('Wallet {} is closed'.format(von_wallet.name))\n\n        await wallet.export_wallet(\n            von_wallet.handle,\n            json.dumps({\n                'path': path,\n                **von_wallet.access_creds\n            }))\n\n        LOGGER.debug('WalletManager.export_wallet <<<')","label":0}
{"text":"function toggleEdit() {\n    document.body.classList.toggle('form-rendered', editing)\n    if (!editing) {\n      $('.build-wrap').formBuilder('setData', $('.render-wrap').formRender('userData'))\n    } else {\n      const formRenderData = $('.build-wrap').formBuilder('getData', dataType)\n      $('.render-wrap').formRender({\n        formData: formRenderData,\n        templates: templates,\n        dataType,\n      })\n      window.sessionStorage.setItem('formData', formRenderData)\n    }\n    return (editing = !editing)\n  }","label":0}
{"text":"func (v *Value) GroupObjxMap(grouper func(int, Map) string) *Value {\n\tgroups := make(map[string][](Map))\n\tv.EachObjxMap(func(index int, val Map) bool {\n\t\tgroup := grouper(index, val)\n\t\tif _, ok := groups[group]; !ok {\n\t\t\tgroups[group] = make([](Map), 0)\n\t\t}\n\t\tgroups[group] = append(groups[group], val)\n\t\treturn true\n\t})\n\treturn &Value{data: groups}\n}","label":0}
{"text":"protected function findPrimaryKey($table,$indices)\n\t{\n\t\t$indices=implode(', ',preg_split('\/\\s+\/',$indices));\n\t\t$sql=<<<EOD\nSELECT attnum, attname FROM pg_catalog.pg_attribute WHERE\n\tattrelid=(\n\t\tSELECT oid FROM pg_catalog.pg_class WHERE relname=:table AND relnamespace=(\n\t\t\tSELECT oid FROM pg_catalog.pg_namespace WHERE nspname=:schema\n\t\t)\n\t)\n\tAND attnum IN ({$indices})\nEOD;\n\t\t$command=$this->getDbConnection()->createCommand($sql);\n\t\t$command->bindValue(':table',$table->name);\n\t\t$command->bindValue(':schema',$table->schemaName);\n\t\tforeach($command->queryAll() as $row)\n\t\t{\n\t\t\t$name=$row['attname'];\n\t\t\tif(isset($table->columns[$name]))\n\t\t\t{\n\t\t\t\t$table->columns[$name]->isPrimaryKey=true;\n\t\t\t\tif($table->primaryKey===null)\n\t\t\t\t\t$table->primaryKey=$name;\n\t\t\t\telseif(is_string($table->primaryKey))\n\t\t\t\t\t$table->primaryKey=array($table->primaryKey,$name);\n\t\t\t\telse\n\t\t\t\t\t$table->primaryKey[]=$name;\n\t\t\t}\n\t\t}\n\t}","label":0}
{"text":"private function createRepositoryDefinition(ResourceInterface $resource)\n    {\n        $definition = new Definition($resource->getRepository(), [$resource->getModel()]);\n        $definition->setFactory([new Reference('lug.manager.'.$resource->getName()), 'getRepository']);\n        $definition->addTag('lug.repository', ['resource' => $resource->getName()]);\n\n        return $definition;\n    }","label":0}
{"text":"function getAsset(key) {\n  return new Promise((resolve, reject) => {\n    return instance.assets.then(db => {\n      const req = db.transaction(db.name)\n        .objectStore(db.name).get(key);\n      req.onsuccess = event => {\n        const undef = event.target.result === undefined;\n        const value = undef ? undefined : event.target.result.value;\n        resolve(value);\n      };\n      req.onerror = event => reject(event);\n    });\n  });\n}","label":0}
{"text":"@Override\n    public Map<String, Optional<Partition>> getPartitionsByNames(String databaseName, String tableName, List<String> partitionNames)\n    {\n        requireNonNull(partitionNames, \"partitionNames is null\");\n        if (partitionNames.isEmpty()) {\n            return ImmutableMap.of();\n        }\n\n        List<Partition> partitions = batchGetPartition(databaseName, tableName, partitionNames);\n\n        Map<String, List<String>> partitionNameToPartitionValuesMap = partitionNames.stream()\n                .collect(toMap(identity(), HiveUtil::toPartitionValues));\n        Map<List<String>, Partition> partitionValuesToPartitionMap = partitions.stream()\n                .collect(toMap(Partition::getValues, identity()));\n\n        ImmutableMap.Builder<String, Optional<Partition>> resultBuilder = ImmutableMap.builder();\n        for (Entry<String, List<String>> entry : partitionNameToPartitionValuesMap.entrySet()) {\n            Partition partition = partitionValuesToPartitionMap.get(entry.getValue());\n            resultBuilder.put(entry.getKey(), Optional.ofNullable(partition));\n        }\n        return resultBuilder.build();\n    }","label":0}
{"text":"func (s *ActivityTaskScheduledEventAttributes) SetScheduleToStartTimeout(v string) *ActivityTaskScheduledEventAttributes {\n\ts.ScheduleToStartTimeout = &v\n\treturn s\n}","label":0}
{"text":"private static function applyPreConditionToLoopContext(\n        StatementsAnalyzer $statements_analyzer,\n        PhpParser\\Node\\Expr $pre_condition,\n        array $pre_condition_clauses,\n        Context $loop_context,\n        Context $outer_context\n    ) {\n        $pre_referenced_var_ids = $loop_context->referenced_var_ids;\n        $loop_context->referenced_var_ids = [];\n\n        $loop_context->inside_conditional = true;\n\n        if (ExpressionAnalyzer::analyze($statements_analyzer, $pre_condition, $loop_context) === false) {\n            return [];\n        }\n\n        $loop_context->inside_conditional = false;\n\n        $new_referenced_var_ids = $loop_context->referenced_var_ids;\n        $loop_context->referenced_var_ids = array_merge($pre_referenced_var_ids, $new_referenced_var_ids);\n\n        $asserted_var_ids = Context::getNewOrUpdatedVarIds($outer_context, $loop_context);\n\n        $loop_context->clauses = Algebra::simplifyCNF(\n            array_merge($outer_context->clauses, $pre_condition_clauses)\n        );\n\n        $reconcilable_while_types = Algebra::getTruthsFromFormula(\n            $loop_context->clauses,\n            $new_referenced_var_ids\n        );\n\n        $changed_var_ids = [];\n\n        if ($reconcilable_while_types) {\n            $pre_condition_vars_in_scope_reconciled = Reconciler::reconcileKeyedTypes(\n                $reconcilable_while_types,\n                $loop_context->vars_in_scope,\n                $changed_var_ids,\n                $new_referenced_var_ids,\n                $statements_analyzer,\n                [],\n                true,\n                new CodeLocation($statements_analyzer->getSource(), $pre_condition)\n            );\n\n            $loop_context->vars_in_scope = $pre_condition_vars_in_scope_reconciled;\n        }\n\n        foreach ($asserted_var_ids as $var_id) {\n            $loop_context->clauses = Context::filterClauses(\n                $var_id,\n                $loop_context->clauses,\n                null,\n                $statements_analyzer\n            );\n        }\n\n        return $asserted_var_ids;\n    }","label":0}
{"text":"function getOriginalPositionFor(lineNumber, columnNumber, moduleIds, context) {\n  const position = getOriginalPositionDetailsFor(\n    lineNumber,\n    columnNumber,\n    moduleIds,\n    context,\n  );\n  if (position.functionName) {\n    position.name = position.functionName;\n  }\n  delete position.functionName;\n  return position;\n}","label":0}
{"text":"public function deleteEntryByKey($key)\n    {\n        if (isset($this->array['Key2Tags'][$key])) {\n            unset($this->array['Key2Tags'][$key]);\n\n            foreach ($this->array['Tags2Key'] as $tag => $tagKeys) {\n                if (isset($tagKeys[$key])) {\n                    unset($this->array['Tags2Key'][$tag][$key]);\n                }\n            }\n        }\n\n        return false;\n    }","label":0}
{"text":"public function populate(Smarty_Template_Source $source, Smarty_Internal_Template $_template = null)\n    {\n        $uid = '';\n        $sources = array();\n        $exists = true;\n        foreach ($_template->smarty->getTemplateDir() as $key => $directory) {\n            try {\n                $s = Smarty_Resource::source(null, $source->smarty, '[' . $key . ']' . $source->name);\n                if (!$s->exists) {\n                    continue;\n                }\n                $sources[$s->uid] = $s;\n                $uid .= $s->filepath;\n            }\n            catch (SmartyException $e) {\n            }\n        }\n\n        if (!$sources) {\n            $source->exists = false;\n            $source->template = $_template;\n\n            return;\n        }\n\n        $sources = array_reverse($sources, true);\n        reset($sources);\n        $s = current($sources);\n\n        $source->components = $sources;\n        $source->filepath = $s->filepath;\n        $source->uid = sha1($uid);\n        $source->exists = $exists;\n        if ($_template && $_template->smarty->compile_check) {\n            $source->timestamp = $s->timestamp;\n        }\n        \/\/ need the template at getContent()\n        $source->template = $_template;\n    }","label":0}
{"text":"public function onNick(Event $event)\n    {\n        $msg = $event->getMessage();\n\n        $oldNick = $msg['nick'];\n        $newNick = $msg['params']['nickname'];\n\n        $this->storage->updateNickname($oldNick, $newNick);\n    }","label":0}
{"text":"public function init() {\n\n        parent::init();\n        $this->registerTranslations();\n        \n        if(!$this->secure)\n            $this->uploadAction = '\/uploader\/one-file\/create';\n\n        \/\/ set min & max file sizes\n        if(is_null($this->minFileSize))\n            $this->minFileSize = isset(\\Yii::$app->params['fileSize']['min']) ? \\Yii::$app->params['fileSize']['min'] : 0.01;\n        if(is_null($this->maxFileSize))\n            $this->maxFileSize = isset(\\Yii::$app->params['fileSize']['max']) ? \\Yii::$app->params['fileSize']['max'] : 2;\n\n        \/\/ errors of the file uploading\n        $this->errors['size'] = Yii::t('byone', 'File size can be from {minFileSize} to {maxFileSize}Mb', ['minFileSize' => $this->minFileSize, 'maxFileSize' => $this->maxFileSize]);\n        $this->errors['type'] = Yii::t('byone', 'There is not right file type! Allowed types - {acceptFileTypes}.', ['acceptFileTypes' => $this->acceptFileTypes]);\n        $this->errors['maxFiles'] = Yii::t('byone', 'Only {maxFiles} file(s) can be uploaded.', ['maxFiles' => $this->maxFiles]);\n\n        \/\/ captions of the buttons and other strings that should be translated\n        self::$defaults['choose']['label'] = Yii::t('byone', 'Photo');\n        self::$defaults['choose']['caption'] = Yii::t('byone', 'Choose a file');\n        self::$defaults['delete']['question'] = Yii::t('byone', 'Are you shure you want to delete this element?');\n        self::$defaults['crop']['caption'] = Yii::t('byone', 'Upload');\n        \n        \/\/ set buttons by widget parameters or defaults\n        foreach(self::$defaults as $name => $values) {\n            foreach($values as $property => $value)\n                if(!isset($this->btns[$name][$property]))\n                    $this->btns[$name][$property] = $property == 'action' && !$this->secure \n                        ? str_replace('-secure', '', self::$defaults[$name][$property])\n                        : self::$defaults[$name][$property];\n        }\n        \n        \/\/ full path server side handlers\n        $this->btns['delete']['action'] = Url::toRoute($this->btns['delete']['action']);\n        $this->btns['save']['action'] = Url::toRoute($this->btns['save']['action']);\n        $this->btns['crop']['action'] = Url::toRoute($this->btns['crop']['action']);\n        $this->btns['swap']['action'] = Url::toRoute($this->btns['swap']['action']);\n        \n        $this->blueimp['url'] = Url::toRoute($this->uploadAction);\n        \n        $this->blueimp['minFileSize'] = $this->minFileSize;\n        $this->blueimp['maxFileSize'] = $this->maxFileSize;\n        \n        \/\/ max files that can be uploaded\n        $this->blueimp['maxFiles'] = $this->maxFiles;\n\n        \/\/ if model name is not set, set it\n        if(!isset($this->modelName))\n            $this->modelName = get_class($this->model);\n        \/\/ parent_id has to exist\n        if(is_null($this->model->id))\n            $this->model->id = false;\n        if(is_null($this->parent_id))\n            $this->parent_id = $this->model->id;\n        if(is_null($this->subdir))\n            $this->subdir = $this->model->id;\n        \/\/ POST-type data for the handler\n        $this->blueimp['formData'] = [\n            'model' => $this->modelName,\n            'parent_id' => $this->parent_id,\n            'subdir' => $this->subdir,\n            'cropAllowed' => ($this->cropAllowed ? 1 : 0),\n        ];\n        \n        \/\/ min pixels for X and Y when cropping\n        $minW = $this->model->getMin();\n        $aspectRatio = $this->model->getAspectRatio();\n        $minH = $minW * $aspectRatio;\n\n        \/\/ send params to JavaScript environment\n        $options = [\n            'btns' => $this->btns,\n            'barClass' => $this->barClass,\n            'cropAllowed' => $this->cropAllowed,\n            'minW' => $minW,\n            'minH' => $minH,\n            'aspectRatio' => $aspectRatio,\n            'appendixView' => $this->appendixView,\n            'acceptFileTypes' => $this->acceptFileTypes,\n            'errors' => $this->errors,\n        ];\n        $this->view->registerJs(\n            \"editLine.options = \" . json_encode($options) . \";\", \n            View::POS_READY, \n            'editLineOptions'\n        );\n        \n        \/\/ assets \n        BlueimpAsset::register($this->view);\n        EditLineAsset::register($this->view);\n        if($this->draggable) {\n            JQueryUiAsset::register($this->view);\n            DraggableAsset::register($this->view);\n        }\n        if($this->cropAllowed) \n            JcropAsset::register($this->view);\n        \/\/ plugin\n        $selector = $name = $this->blueimp['name'];\n        $option = json_encode($this->blueimp);\n        $script = \"jQuery('#{$selector}').{$name}({$option});\";\n        $this->view->registerJs($script, View::POS_END, 'byone-plugin');\n    }","label":0}
{"text":"protected function parse_tags( $response, $repo_type ) {\n\t\t$tags     = [];\n\t\t$rollback = [];\n\n\t\tforeach ( (array) $response as $tag ) {\n\t\t\t\/\/ $download_base    = implode(\n\t\t\t\/\/ '\/',\n\t\t\t\/\/ [\n\t\t\t\/\/ $repo_type['base_download'],\n\t\t\t\/\/ $this->type->owner,\n\t\t\t\/\/ $this->type->owner,\n\t\t\t\/\/ 'get\/',\n\t\t\t\/\/ ]\n\t\t\t\/\/ );\n\t\t\t$download_base    = \"{$repo_type['base_download']}\/{$this->type->owner}\/{$this->type->owner}\/get\/\";\n\t\t\t$tags[]           = $tag;\n\t\t\t$rollback[ $tag ] = $download_base . $tag . '.zip';\n\t\t}\n\n\t\treturn [ $tags, $rollback ];\n\t}","label":0}
{"text":"func (c *Characteristic) SetValue(b []byte) {\n\tif c.rhandler != nil {\n\t\tpanic(\"charactristic has been configured with a read handler\")\n\t}\n\tc.props |= CharRead\n\t\/\/ c.secure |= CharRead\n\tc.value = make([]byte, len(b))\n\tcopy(c.value, b)\n}","label":0}
{"text":"protected static AbatisService getInstance(Context context, String dbName, int version) {\n      if (instance == null) {\n         instance = new AbatisService(context, dbName, version);\n      }\n      return instance;\n   }","label":0}
{"text":"protected function ensure_node_is_visible($node) {\n\n        if (!$this->running_javascript()) {\n            return;\n        }\n\n        \/\/ Exception if it timesout and the element is still there.\n        $msg = 'The \"' . $node->getXPath() . '\" xpath node is not visible and it should be visible';\n        $exception = new ExpectationException($msg, $this->getSession());\n\n        \/\/ It will stop spinning once the isVisible() method returns true.\n        $this->spin(\n            function($context, $args) {\n                if ($args->isVisible()) {\n                    return true;\n                }\n                return false;\n            },\n            $node,\n            self::get_extended_timeout(),\n            $exception,\n            true\n        );\n    }","label":0}
{"text":"private void slideKnob(Event event) {\r\n\t\tint x = DOM.eventGetClientX(event);\r\n\t\tif (x > 0) {\r\n\t\t\tint lineWidth = lineElement.getOffsetWidth();\r\n\t\t\tint lineLeft = lineElement.getAbsoluteLeft();\r\n\t\t\tdouble percent = (double) (x - lineLeft) \/ lineWidth * 1.0;\r\n\t\t\tsetCurrentValue(getTotalRange() * percent + minValue, true);\r\n\t\t}\r\n\t}","label":0}
{"text":"public function withHeaders(array $array, int $code = null)\n  {\n    foreach($array as $field => $i) {\n      array_push($this->headers, $field .': '. $i);\n    }\n\n    if ($code != null) {\n      $this->code = $code;\n      header('HTTP\/1.1 '.$this->code);\n      return $this->send();\n    }\n\n    return $this;\n  }","label":0}
{"text":"def encode_request(name, uuid, callable, address):\n    \n    client_message = ClientMessage(payload_size=calculate_size(name, uuid, callable, address))\n    client_message.set_message_type(REQUEST_TYPE)\n    client_message.set_retryable(RETRYABLE)\n    client_message.append_str(name)\n    client_message.append_str(uuid)\n    client_message.append_data(callable)\n    AddressCodec.encode(client_message, address)\n    client_message.update_frame_length()\n    return client_message","label":0}
{"text":"public function drawCircle($x, $y, $radius, $param4 = null, $param5 = null, $param6 = null)\n    {\n        \/\/ Don't convert units and call parent::drawCircle(), since it calls drawEllipse which will convert units twice!\n        return $this->drawEllipse($x - $radius, $y - $radius, $x + $radius, $y + $radius, $param4, $param5, $param6);\n    }","label":0}
{"text":"public function getShopConfVar($varName, $shopId = null, $module = '')\n    {\n        if (!$shopId) {\n            $shopId = $this->getShopId();\n        }\n\n        if ($shopId == $this->getShopId() && (!$module || $module == Config::OXMODULE_THEME_PREFIX . $this->getConfigParam('sTheme'))) {\n            $varValue = $this->getConfigParam($varName);\n            if ($varValue !== null) {\n                return $varValue;\n            }\n        }\n\n        $db = \\OxidEsales\\Eshop\\Core\\DatabaseProvider::getDb(\\OxidEsales\\Eshop\\Core\\DatabaseProvider::FETCH_MODE_ASSOC);\n\n        $query = \"select oxvartype, \" . $this->getDecodeValueQuery() . \" as oxvarvalue from oxconfig where oxshopid = '{$shopId}' and oxmodule = '{$module}' and oxvarname = \" . $db->quote($varName);\n        $rs = $db->select($query);\n\n        if ($rs != false && $rs->count() > 0) {\n            return $this->decodeValue($rs->fields['oxvartype'], $rs->fields['oxvarvalue']);\n        }\n    }","label":0}
{"text":"public function redirectToEntity(\n        Action $action,\n        $entity,\n        array $parameters = [],\n        $referenceType = UrlGeneratorInterface::ABSOLUTE_PATH,\n        $status = 302\n    ): RedirectResponse {\n        $url = $this->adminRouter->generateAdminEntityPath(\n            $action->getAdmin(),\n            $entity,\n            $action->getCode(),\n            $parameters,\n            $referenceType\n        );\n\n        return new RedirectResponse($url, $status);\n    }","label":0}
{"text":"function SelectLimit($sql,$nrows=-1,$offset=-1,$inputarr=false,$secs2cache=0)\n\t{\n\t\tif ($nrows > 0) {\n\t\t\tif ($offset <= 0) $str = \" ROWS $nrows \";\n\t\t\telse {\n\t\t\t\t$a = $offset+1;\n\t\t\t\t$b = $offset+$nrows;\n\t\t\t\t$str = \" ROWS $a TO $b\";\n\t\t\t}\n\t\t} else {\n\t\t\t\/\/ ok, skip\n\t\t\t$a = $offset + 1;\n\t\t\t$str = \" ROWS $a TO 999999999\"; \/\/ 999 million\n\t\t}\n\t\t$sql .= $str;\n\n\t\treturn ($secs2cache) ?\n\t\t\t\t$this->CacheExecute($secs2cache,$sql,$inputarr)\n\t\t\t:\n\t\t\t\t$this->Execute($sql,$inputarr);\n\t}","label":0}
{"text":"public static void doSetIgnoreCaseRecursively(ComparatorItem comparatorItem, boolean ignoreCase) {\n    ComparatorItem tmp = comparatorItem;\n    while (tmp != null) {\n      tmp.setIgnoreCase(ignoreCase);\n      tmp = tmp.getNextComparatorItem();\n    }\n  }","label":0}
{"text":"func (f *CLI) prompt() {\n\tdefer fmt.Println(f.action() + \"ing...\")\n\tif f.yes {\n\t\treturn\n\t}\n\tfmt.Printf(\"%s completion for %s? \", f.action(), f.Name)\n\tvar answer string\n\tfmt.Scanln(&answer)\n\n\tswitch strings.ToLower(answer) {\n\tcase \"y\", \"yes\":\n\t\treturn\n\tdefault:\n\t\tfmt.Println(\"Cancelling...\")\n\t\tos.Exit(1)\n\t}\n}","label":0}
{"text":"public function get($name = null, $defaultValue = null)\n    {\n        if ($name == null) return $_GET;\n        $rs = isset($_GET[$name]) ? $_GET[$name] : $defaultValue;\n        \/\/Collect.category_id \u83b7\u53d6 Collect[category_id]\n        if ($rs == null && stripos($name, '.') > 0) {\n            $arr = explode('.', $name);\n            $rs2 = $_GET[$arr[0]];\n            if (isset($rs2[$arr[1]])) {\n                $rs = $rs2[$arr[1]];\n            }\n        }\n        return $rs;\n    }","label":0}
{"text":"function parseBinaryExpression() {\n        var expr, token, prec, stack, right, operator, left, i;\n\n        left = parseUnaryExpression();\n\n        token = lookahead;\n        prec = binaryPrecedence(token);\n        if (prec === 0) {\n            return left;\n        }\n        token.prec = prec;\n        lex();\n\n        right = parseUnaryExpression();\n\n        stack = [left, token, right];\n\n        while ((prec = binaryPrecedence(lookahead)) > 0) {\n\n            \/\/ Reduce: make a binary expression from the three topmost entries.\n            while ((stack.length > 2) && (prec <= stack[stack.length - 2].prec)) {\n                right = stack.pop();\n                operator = stack.pop().value;\n                left = stack.pop();\n                expr = delegate.createBinaryExpression(operator, left, right);\n                stack.push(expr);\n            }\n\n            \/\/ Shift.\n            token = lex();\n            token.prec = prec;\n            stack.push(token);\n            expr = parseUnaryExpression();\n            stack.push(expr);\n        }\n\n        \/\/ Final reduce to clean-up the stack.\n        i = stack.length - 1;\n        expr = stack[i];\n        while (i > 1) {\n            expr = delegate.createBinaryExpression(stack[i - 1].value, stack[i - 2], expr);\n            i -= 2;\n        }\n\n        return expr;\n    }","label":0}
{"text":"public static Object getFieldValue(Object object, String fieldName) {\n        try {\n            return getDeclaredFieldInHierarchy(object.getClass(), fieldName).get(object);\n        } catch (IllegalArgumentException e) {\n            throw new RuntimeException(e);\n        } catch (IllegalAccessException e) {\n            throw new RuntimeException(e);\n        }\n    }","label":0}
{"text":"protected function handleQueryResponse(Transaction $transaction, $data)\n    {\n        $result = $transaction->getResult();\n        $parentResult = $transaction->getParent()->getResult();\n        $eventResult = null;\n\n        foreach ($data->Results as $event) {\n            if ($event->TransAct_ReferenceID === $parentResult->getExternalId()) {\n                $eventResult = $event;\n\n                \/\/ We don't break in case the transaction has multiple events in the same query-- we want the latest\n            }\n        }\n\n        $resultType = $parentResult->getStatus()->getValue();\n\n        if (null !== $eventResult) {\n            switch ($eventResult->ResultingStatus) {\n                case 'Scheduled':\n                    $resultType = Result\\ResultStatus::PENDING;\n                    break;\n\n                case 'Cancelled':\n                    $resultType = Result\\ResultStatus::CANCELLED;\n                    break;\n\n                case 'In-Process':\n                    $resultType = Result\\ResultStatus::PROCESSED;\n                    break;\n\n                case 'Cleared':\n                    $resultType = Result\\ResultStatus::APPROVED;\n                    break;\n\n                case 'Failed Verification':\n                case 'Returned-NSF':\n                case 'Returned-Other':\n                    $resultType = Result\\ResultStatus::DECLINED;\n                    break;\n\n                case 'Charged Back':\n                    $resultType = Result\\ResultStatus::CHARGED_BACK;\n                    break;\n\n                case 'Merchant Hold':\n                case 'Processor Hold':\n                    $resultType = Result\\ResultStatus::HOLD;\n                    break;\n            }\n        }\n\n        $result->setStatus(new Result\\ResultStatus($resultType));\n    }","label":0}
{"text":"public MessageType readMessage(Reader is)\n    throws IOException\n  {\n    JsonReaderImpl jIn = new JsonReaderImpl(is, _jsonFactory);\n    \n    return readMessage(jIn);\n  }","label":0}
{"text":"function getFields(def, obj) {\n\t\tvar a = {};\n\t\t\n\t\t\/\/ if not an object, return the value\n\t\tif (!_.isObject(obj)) {\n\t\t\treturn obj;\n\t\t}\n\t\t\n\t\t\/\/ check for type override\n\t\tvar defType = _.get(obj, 'attributes.xsi:type') || _.get(obj, 'attributes.type');\n\t\tdefType     = defType ? defType.replace(\/^vim25\\:\/i, '') : null;\n\n\t\t\/\/ if there is a type override and it is a valid type, set the def to that type\n\t\t\/\/ and add the type to the attributes\n\t\tif (defType && _.has(_client.types, defType)) {\n\t\t\tdef = _client.types[defType]();\n\t\t\ta.attributes = {\n\t\t\t\t'xsi:type': defType\n\t\t\t};\n\t\t}\n\t\t\n\t\t\/\/ loop through each field in the type definition and look for fields\n\t\t\/\/ that were supplied by the user\n\t\t_.forEach(def, function(v, k) {\n\t\t\tif (_.has(obj, k)) {\n\t\t\t\tif (Array.isArray(obj[k])) {\n\t\t\t\t\ta[k] = _.map(obj[k], function(o) {\n\t\t\t\t\t\treturn getFields(v, o);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\telse if (_.isObject(v) && _.isObject(obj[k])) {\n\t\t\t\t\ta[k] = getFields(v, obj[k]);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\ta[k] = obj[k];\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\t\n\t\t\/\/ return the new arguments object\n\t\treturn a;\n\t}","label":0}
{"text":"protected function _styleToString(&$style) {\n\n        if (is_array($style)) {\n            $css = $this->newStyle();\n            foreach ($style as $prop => $val) {\n                $css[$prop] = $val;\n            }\n            return $css->css();\n        } elseif (is_a($style, '\\\\s4y\\\\Style')) {\n            return $style->css();\n        }\n        return $style.PHP_EOL;\n    }","label":0}
{"text":"public void update(List<?> values) {\n\t\tfor (Object value : values) {\n\t\t\tthis.update(Value.get(value));\n\t\t}\n\t}","label":0}
{"text":"public function isPodWithinStore($storeName,$pod)\n    {\n        return (array_key_exists($storeName,$this->podConnections)) ? array_key_exists($pod,$this->podConnections[$storeName]) : false;\n    }","label":0}
{"text":"public function todo_itemCount($id) {\n        \/\/ I know eloquent does this, but having trouble so hand crafting using DB\n        $record =  DB::table('todo_items')->where('priority_id', '=', $id)->get();\n        return count($record);\n    }","label":0}
{"text":"private function validatePluginClass($pluginClass)\n    {\n        if (!class_exists($pluginClass)) {\n            throw new InvalidConfigException(sprintf(\n                'The plugin class %s does not exist.',\n                $pluginClass\n            ));\n        }\n\n        if (!in_array('Puli\\Manager\\Api\\PuliPlugin', class_implements($pluginClass))) {\n            throw new InvalidConfigException(sprintf(\n                'The plugin class %s must implement PuliPlugin.',\n                $pluginClass\n            ));\n        }\n    }","label":0}
{"text":"public function union($collection)\n    {\n        $union = clone $this;\n\n        \/** @var ModelInterface $otherModel *\/\n        foreach ($collection->diff($this) as $otherModel) {\n            $union->push($otherModel);\n        }\n\n        return $union;\n    }","label":0}
{"text":"func needsScheduling(stream *imagev1.ImageStream) bool {\n\tfor _, tagRef := range stream.Spec.Tags {\n\t\tif tagImportable(tagRef) && tagRef.ImportPolicy.Scheduled {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}","label":0}
{"text":"public String getTimexMod() {\n    if (Timex3_Type.featOkTst && ((Timex3_Type)jcasType).casFeat_timexMod == null)\n      jcasType.jcas.throwFeatMissing(\"timexMod\", \"de.unihd.dbs.uima.types.heideltime.Timex3\");\n    return jcasType.ll_cas.ll_getStringValue(addr, ((Timex3_Type)jcasType).casFeatCode_timexMod);}","label":0}
{"text":"func NewEvaluatorSuite(exprs []Expression, avoidColumnEvaluator bool) *EvaluatorSuite {\n\te := &EvaluatorSuite{}\n\n\tfor i := 0; i < len(exprs); i++ {\n\t\tif col, isCol := exprs[i].(*Column); isCol && !avoidColumnEvaluator {\n\t\t\tif e.columnEvaluator == nil {\n\t\t\t\te.columnEvaluator = &columnEvaluator{inputIdxToOutputIdxes: make(map[int][]int)}\n\t\t\t}\n\t\t\tinputIdx, outputIdx := col.Index, i\n\t\t\te.columnEvaluator.inputIdxToOutputIdxes[inputIdx] = append(e.columnEvaluator.inputIdxToOutputIdxes[inputIdx], outputIdx)\n\t\t\tcontinue\n\t\t}\n\t\tif e.defaultEvaluator == nil {\n\t\t\te.defaultEvaluator = &defaultEvaluator{\n\t\t\t\toutputIdxes: make([]int, 0, len(exprs)),\n\t\t\t\texprs:       make([]Expression, 0, len(exprs)),\n\t\t\t}\n\t\t}\n\t\te.defaultEvaluator.exprs = append(e.defaultEvaluator.exprs, exprs[i])\n\t\te.defaultEvaluator.outputIdxes = append(e.defaultEvaluator.outputIdxes, i)\n\t}\n\n\tif e.defaultEvaluator != nil {\n\t\te.defaultEvaluator.vectorizable = Vectorizable(e.defaultEvaluator.exprs)\n\t}\n\treturn e\n}","label":0}
{"text":"public void marshall(ProvisionedProductDetail provisionedProductDetail, ProtocolMarshaller protocolMarshaller) {\n\n        if (provisionedProductDetail == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(provisionedProductDetail.getName(), NAME_BINDING);\n            protocolMarshaller.marshall(provisionedProductDetail.getArn(), ARN_BINDING);\n            protocolMarshaller.marshall(provisionedProductDetail.getType(), TYPE_BINDING);\n            protocolMarshaller.marshall(provisionedProductDetail.getId(), ID_BINDING);\n            protocolMarshaller.marshall(provisionedProductDetail.getStatus(), STATUS_BINDING);\n            protocolMarshaller.marshall(provisionedProductDetail.getStatusMessage(), STATUSMESSAGE_BINDING);\n            protocolMarshaller.marshall(provisionedProductDetail.getCreatedTime(), CREATEDTIME_BINDING);\n            protocolMarshaller.marshall(provisionedProductDetail.getIdempotencyToken(), IDEMPOTENCYTOKEN_BINDING);\n            protocolMarshaller.marshall(provisionedProductDetail.getLastRecordId(), LASTRECORDID_BINDING);\n            protocolMarshaller.marshall(provisionedProductDetail.getProductId(), PRODUCTID_BINDING);\n            protocolMarshaller.marshall(provisionedProductDetail.getProvisioningArtifactId(), PROVISIONINGARTIFACTID_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }","label":0}
{"text":"def delete_enrollment(session, enrollment):\n    \n    uidentity = enrollment.uidentity\n    uidentity.last_modified = datetime.datetime.utcnow()\n\n    session.delete(enrollment)\n    session.flush()","label":0}
{"text":"@SuppressWarnings(\"rawtypes\")\n    @Override\n    public void basicValidate(final String section) throws ConfigException {\n        ConfigurationUtils.defaultValidate((ConfigurationComponent) this, section);\n    }","label":0}
{"text":"protected function wordWrap(string $string, int $width): string\n\t{\n\t\treturn trim(preg_replace(sprintf('\/(.{1,%1$u})(?:\\s|$)|(.{%1$u})\/uS', $width), '$1$2' . PHP_EOL, $string));\n\t}","label":0}
{"text":"public static function factory($config = array())\n    {\n        \/\/ We just use this for validation. The configs are set in the parent's\n        \/\/ factory methid.\n        Collection::fromConfig($config, array(), array('index_id', 'derived_key'));\n        $solr = parent::factory($config);\n\n        \/\/ Get the configs relevant to Acquia Search.\n        $indexId = $solr->getConfig('index_id');\n        $derivedKey = $solr->getConfig('derived_key');\n\n        \/\/ Set the base bath to point to the configured index.\n        $solr->getConfig()->set('base_path', '\/solr\/' . $indexId);\n\n        \/\/ Attach the Acquia Search HMAC Authentication plugin to the client.\n        $signature = new Signature($derivedKey);\n        $plugin = new AcquiaSearchAuthPlugin($indexId, $signature);\n        $solr->addSubscriber($plugin);\n\n        return $solr;\n    }","label":0}
{"text":"public AVQuery<T> whereLessThan(String key, Object value) {\n    conditions.whereLessThan(key, value);\n    return this;\n  }","label":0}
{"text":"func (db *DB) CheckSchemaVersion() error {\n\tschemaVersion, err := db.SchemaVersion()\n\tif err != nil {\n\t\treturn fmt.Errorf(\"error fetching schema version: %v\", err)\n\t}\n\n\texpectedSchemaVersion := db.schema().latestSchema()\n\tif schemaVersion != expectedSchemaVersion {\n\t\treturn &IncompatibleSchemaError{\n\t\t\tSchemaVersion:         schemaVersion,\n\t\t\tExpectedSchemaVersion: expectedSchemaVersion,\n\t\t}\n\t}\n\n\treturn nil\n}","label":0}
{"text":"func (s *specAggregator) UpdateAPIServiceSpec(apiServiceName string, spec *spec.Swagger, etag string) error {\n\ts.rwMutex.Lock()\n\tdefer s.rwMutex.Unlock()\n\n\tspecInfo, existingService := s.openAPISpecs[apiServiceName]\n\tif !existingService {\n\t\treturn fmt.Errorf(\"APIService %q does not exists\", apiServiceName)\n\t}\n\n\t\/\/ For APIServices (non-local) specs, only merge their \/apis\/ prefixed endpoint as it is the only paths\n\t\/\/ proxy handler delegates.\n\tif specInfo.apiService.Spec.Service != nil {\n\t\tspec = aggregator.FilterSpecByPathsWithoutSideEffects(spec, []string{\"\/apis\/\"})\n\t}\n\n\treturn s.tryUpdatingServiceSpecs(&openAPISpecInfo{\n\t\tapiService: specInfo.apiService,\n\t\tspec:       spec,\n\t\thandler:    specInfo.handler,\n\t\tetag:       etag,\n\t})\n}","label":0}
{"text":"public function createDeleteForm(SakonninFile $file)\n    {\n        return $this->createFormBuilder()\n            ->setAction($this->generateUrl('file_delete', array('id' => $file->getId())))\n            ->setMethod('DELETE')\n            ->getForm()\n        ;\n    }","label":0}
{"text":"func (db *DB) XZSort(key []byte, offset int, size int, alpha bool, desc bool, sortBy []byte, sortGet [][]byte) ([][]byte, error) {\n\tvalues, err := db.ZRangeByLex(key, nil, nil, store.RangeClose, 0, -1)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn db.xsort(values, offset, size, alpha, desc, sortBy, sortGet)\n}","label":0}
{"text":"public void toBinDate(TimeZone tz, byte[] bytes, Date value) throws PSQLException {\n    long millis = value.getTime();\n\n    if (tz == null) {\n      tz = getDefaultTz();\n    }\n    \/\/ It \"getOffset\" is UNTESTED\n    \/\/ See org.postgresql.jdbc.AbstractJdbc2Statement.setDate(int, java.sql.Date,\n    \/\/ java.util.Calendar)\n    \/\/ The problem is we typically do not know for sure what is the exact required date\/timestamp\n    \/\/ type\n    \/\/ Thus pgjdbc sticks to text transfer.\n    millis += tz.getOffset(millis);\n\n    long secs = toPgSecs(millis \/ 1000);\n    ByteConverter.int4(bytes, 0, (int) (secs \/ 86400));\n  }","label":0}
{"text":"def get_owner_access_token(self):\n        \"\"\"\"\"\"\n        from .database import Session\n        db_session = Session.object_session(self)\n        owner = db_session.query(User).filter_by(\n            id_=self.owner_id).first()\n        return owner.access_token","label":0}
{"text":"def crc24(blob):\n    \"\"\"\"\"\"\n    CRC24_INIT = 0x0B704CE\n    CRC24_POLY = 0x1864CFB\n\n    crc = CRC24_INIT\n    for octet in bytearray(blob):\n        crc ^= (octet << 16)\n        for _ in range(8):\n            crc <<= 1\n            if crc & 0x1000000:\n                crc ^= CRC24_POLY\n    assert 0 <= crc < 0x1000000\n    crc_bytes = struct.pack('>L', crc)\n    assert crc_bytes[:1] == b'\\x00'\n    return crc_bytes[1:]","label":0}
{"text":"def start(queue, profile=None, tag='salt\/engine\/sqs', owner_acct_id=None):\n    '''\n    \n    '''\n    if __opts__.get('__role') == 'master':\n        fire_master = salt.utils.event.get_master_event(\n            __opts__,\n            __opts__['sock_dir'],\n            listen=False).fire_event\n    else:\n        fire_master = __salt__['event.send']\n\n    message_format = __opts__.get('sqs.message_format', None)\n\n    sqs = _get_sqs_conn(profile)\n    q = None\n    while True:\n        if not q:\n            q = sqs.get_queue(queue, owner_acct_id=owner_acct_id)\n            q.set_message_class(boto.sqs.message.RawMessage)\n\n        _process_queue(q, queue, fire_master, tag=tag, owner_acct_id=owner_acct_id, message_format=message_format)","label":0}
{"text":"def gen_ldm(src, dst):\n        \n        return ReilBuilder.build(ReilMnemonic.LDM, src, ReilEmptyOperand(), dst)","label":0}
{"text":"function get_font_size()\n    {\n\n        if ($this->__font_size_calculated) {\n            return $this->_props[\"font_size\"];\n        }\n\n        if (!isset($this->_props[\"font_size\"])) {\n            $fs = self::$_defaults[\"font_size\"];\n        } else {\n            $fs = $this->_props[\"font_size\"];\n        }\n\n        if (!isset($this->_parent_font_size)) {\n            $this->_parent_font_size = self::$default_font_size;\n        }\n\n        switch ((string)$fs) {\n            case \"xx-small\":\n            case \"x-small\":\n            case \"small\":\n            case \"medium\":\n            case \"large\":\n            case \"x-large\":\n            case \"xx-large\":\n                $fs = self::$default_font_size * self::$font_size_keywords[$fs];\n                break;\n\n            case \"smaller\":\n                $fs = 8 \/ 9 * $this->_parent_font_size;\n                break;\n\n            case \"larger\":\n                $fs = 6 \/ 5 * $this->_parent_font_size;\n                break;\n\n            default:\n                break;\n        }\n\n        \/\/ Ensure relative sizes resolve to something\n        if (($i = mb_strpos($fs, \"em\")) !== false) {\n            $fs = (float)mb_substr($fs, 0, $i) * $this->_parent_font_size;\n        } else if (($i = mb_strpos($fs, \"ex\")) !== false) {\n            $fs = (float)mb_substr($fs, 0, $i) * $this->_parent_font_size;\n        } else {\n            $fs = (float)$this->length_in_pt($fs);\n        }\n\n        \/\/see __set and __get, on all assignments clear cache!\n        $this->_prop_cache[\"font_size\"] = null;\n        $this->_props[\"font_size\"] = $fs;\n        $this->__font_size_calculated = true;\n        return $this->_props[\"font_size\"];\n\n    }","label":0}
{"text":"private function addBuildListeners(Project $project)\n    {\n        \/\/ Add the default listener\n        $project->addBuildListener($this->createLogger());\n\n        foreach ($this->listeners as $listenerClassname) {\n            try {\n                $clz = Phing::import($listenerClassname);\n            } catch (Exception $e) {\n                $msg = \"Unable to instantiate specified listener \"\n                    . \"class \" . $listenerClassname . \" : \"\n                    . $e->getMessage();\n                throw new ConfigurationException($msg);\n            }\n\n            $listener = new $clz();\n\n            if ($listener instanceof StreamRequiredBuildLogger) {\n                throw new ConfigurationException(\"Unable to add \" . $listenerClassname . \" as a listener, since it requires explicit error\/output streams. (You can specify it as a -logger.)\");\n            }\n            $project->addBuildListener($listener);\n        }\n    }","label":0}
{"text":"private function _getInvalidExtensions($moduleId)\n    {\n        $extendedShopClasses = $this->getModuleExtensions($moduleId);\n        $invalidModuleClasses = [];\n\n        foreach ($extendedShopClasses as $extendedShopClass => $moduleClasses) {\n            foreach ($moduleClasses as $moduleClass) {\n                if (\\OxidEsales\\Eshop\\Core\\NamespaceInformationProvider::isNamespacedClass($moduleClass)) {\n                    \/** @var \\Composer\\Autoload\\ClassLoader $composerClassLoader *\/\n                    $composerClassLoader = include VENDOR_PATH . 'autoload.php';\n                    if (!$composerClassLoader->findFile($moduleClass)) {\n                        $invalidModuleClasses[$extendedShopClass][] = $moduleClass;\n                    }\n                } else {\n                    \/** Note: $aDeletedExt is passed by reference *\/\n                    $this->backwardsCompatibleGetInvalidExtensions($moduleClass, $invalidModuleClasses, $extendedShopClass);\n                }\n            }\n        }\n\n        return $invalidModuleClasses;\n    }","label":0}
{"text":"public synchronized void unregisterThrow(ObjectName objName) throws JMException {\n\t\tif (mbeanServer == null) {\n\t\t\tthrow new JMException(\"JmxServer has not be started\");\n\t\t}\n\t\tmbeanServer.unregisterMBean(objName);\n\t\tregisteredCount--;\n\t}","label":0}
{"text":"def compute_accept_value(key: Union[str, bytes]) -> str:\n        \n        sha1 = hashlib.sha1()\n        sha1.update(utf8(key))\n        sha1.update(b\"258EAFA5-E914-47DA-95CA-C5AB0DC85B11\")  # Magic value\n        return native_str(base64.b64encode(sha1.digest()))","label":0}
{"text":"func NewRootInfo(RootNamespaceId string, HomeNamespaceId string) *RootInfo {\n\ts := new(RootInfo)\n\ts.RootNamespaceId = RootNamespaceId\n\ts.HomeNamespaceId = HomeNamespaceId\n\treturn s\n}","label":0}
{"text":"private function fixArray($data, $key = null)\n    {\n        if (!is_array($data) || ($key && isset($data[$key]))) {\n            $data = [$data];\n        }\n\n        return $data;\n    }","label":0}
{"text":"function processAfterStateChange(el) {\n    const optionValue = el.dataset.optionValue;\n    const optionIndex = Array.prototype.slice.call(el.parentNode.children).indexOf(el);\n    this.setSelectedOption(optionValue);\n    elementScroll.scroll(el);\n    emitAndFire(this, 'listbox-change', {\n        index: optionIndex,\n        selected: [optionValue],\n        el\n    });\n}","label":0}
{"text":"public AnalyzedText analyze(String text) throws NetworkException, AnalysisException {\n\t\tif (null == text) {\n\t\t\tthrow new RuntimeException(\"text param cannot be null.\");\n\t\t}\n\n\t\tQueryBuilder requestBody = generatePOSTBody();\n\n\t\ttry {\n\t\t\trequestBody.addParam(\"text\", text);\n\t\t\t\n\t\t} catch (UnsupportedEncodingException e) {\n\t\t\tthrow new RuntimeException(\"Could not url encode form params.\");\n\t\t}\n\n\t\tAnalyzedText response = sendRequest(\n\t\t\t\t\"\", \n\t\t\t\trequestBody.build(),\n\t\t\t\tContentType.FORM,\n\t\t\t\t\"POST\", \n\t\t\t\tAnalyzedText.class);\n\t\t\n\t\tresponse.createAnnotationLinks();\n\n\t\treturn response;\n\t}","label":0}
{"text":"private TemplateClass tryLoadTemplate(String tmplName, RythmEngine engine, TemplateClass callerClass, ICodeType codeType, boolean processTagName) {\n        \/\/logger.info(\">>> try load %s on [%s] with processTagName: %s\", tmplName, callerClass.getKey(), processTagName);\n        if (null == engine) {\n            engine = getDefaultEngine();\n        }\n        if (engine.templateRegistered(tmplName)) {\n            return null;\n        }\n        String rythmSuffix = engine.conf().resourceNameSuffix();\n        final List<String> suffixes = new ArrayList<String>(Arrays.asList(RythmEngine.VALID_SUFFIXES));\n        if (null == codeType) {\n            codeType = TemplateResourceBase.getTypeOfPath(engine, tmplName);\n        }\n        if (ICodeType.DefImpl.RAW == codeType) {\n            \/\/ use caller's code type\n            codeType = callerClass.codeType;\n        }\n        final String tagNameOrigin = tmplName;\n        boolean hasSuffix = false;\n        String suffix = \"\";\n        if (processTagName) {\n            boolean withRythmSuffix = S.notEmpty(rythmSuffix);\n            for (String s : suffixes) {\n                if (tmplName.endsWith(s)) {\n                    tmplName = tmplName.substring(0, tmplName.lastIndexOf(s));\n                    suffix = s;\n                    hasSuffix = true;\n                    break;\n                }\n                if (withRythmSuffix && (tmplName.endsWith(s) || tmplName.endsWith(s + rythmSuffix))) {\n                    tmplName = tmplName.substring(0, tmplName.lastIndexOf(s));\n                    suffix = s + rythmSuffix;\n                    hasSuffix = true;\n                    break;\n                }\n            }\n        }\n        tmplName = tmplName.replace('.', '\/');\n        String sfx = codeType.resourceNameSuffix();\n        if (S.notEmpty(sfx) && !suffixes.get(0).equals(sfx)) {\n            suffixes.remove(sfx);\n            suffixes.add(0, sfx);\n        }\n\n        final List<String> roots = new ArrayList<String>();\n        String root0 = this.getResourceLoaderRoot().replace('\\\\', '\/');\n        if (root0.endsWith(\"\/\")) {\n            root0 = root0.substring(0, root0.length() - 1);\n        }\n\n        roots.add(root0);\n\n        \/\/ call template using relative path\n        String currentPath = callerClass.getKey().toString();\n        int pos = currentPath.lastIndexOf(\"\/\");\n        if (-1 != pos) {\n            currentPath = currentPath.substring(0, pos);\n            if (currentPath.startsWith(root0)) {\n                if (currentPath.length() > root0.length()) {\n                    roots.add(0, currentPath);\n                }\n            } else {\n                if (currentPath.startsWith(\"\/\")) {\n                    currentPath = currentPath.substring(1);\n                }\n                if (!currentPath.startsWith(root0)) currentPath = root0 + \"\/\" + currentPath;\n                roots.add(0, currentPath);\n            }\n        }\n        \n        \/\/ call tag with import path\n        if (null != callerClass.importPaths) {\n            for (String s: callerClass.importPaths) {\n                if (s.startsWith(\"java\")) {\n                    continue;\n                }\n                roots.add(0, root0 + \"\/\" + s.replace('.', '\/'));\n            }\n        }\n\n        String tmplName0 = tmplName;\n        for (String root : roots) {\n            String tmplName1 = tmplName0;\n            if (root.startsWith(\"\/\") && !tmplName1.startsWith(\"\/\")) {\n                tmplName1 = \"\/\" + tmplName0;\n            }\n            tmplName = tmplName1.startsWith(root) ? tmplName1 : root + \"\/\" + tmplName0;\n            if (hasSuffix) {\n                ITemplateResource resource = load(tmplName + suffix);\n                if (null == resource || !resource.isValid()) {\n                    continue;\n                }\n                TemplateClass tc = engine.resourceManager().resourceLoaded(resource, false);\n                return tc;\n            } else {\n                for (String suffix0 : suffixes) {\n                    String path = tmplName + suffix0;\n                    ITemplateResource resource = load(path);\n                    if (null == resource || !resource.isValid()) {\n                        continue;\n                    }\n                    TemplateClass tc = engine.resourceManager().resourceLoaded(resource, false);\n                    return tc;\n                }\n            }\n        }\n        TemplateClass tc = processTagName ? tryLoadTemplate(tagNameOrigin, engine, callerClass, codeType, false) : null;\n        if (null == tc) {\n            TemplateResourceManager.reportNonResource(tmplName);\n        }\n        return tc;\n    }","label":0}
{"text":"public function boot()\n    {\n        $this->mergeConfigFrom($this->configPath(), 'iplimit');\n        $this->loadMigrationsFrom(__DIR__.'\/database\/migrations');\n        $this->app->singleton(IpLimitService::class, function ($app) {\n            return new IpLimitService($app['config']->get('iplimit'));\n        });\n    }","label":0}
{"text":"public function render($total_count=null)\n    {\n        if ($this->hasPages()) {\n            if (!empty($total_count)) {\n                if ($this->simple) {\n                    return sprintf('<nav aria-label=\"Page navigation\" class=\"text-center\"><ul class=\"pagination\"><li><i class=\"count\">\u5171'. ceil($total_count\/config('manage_rows_num')) .'\u9875\uff0c\u6bcf\u9875'. config('manage_rows_num') .'\u6761\u6570\u636e<\/i><\/li>%s %s<li><i class=\"count\">\u8df3\u8f6c\u5230<\/i><\/li><li><form action=\"\" class=\"search-form\" method=\"get\"><input type=\"text\" class=\"go_page\" value=\"'. input('page') .'\" style=\"width:35px;\"><input type=\"submit\" name=\"page\" class=\"go\" value=\"GO\" \/><\/form><\/li><\/ul><\/nav>', $this->getPreviousButton(), $this->getNextButton());\n                } else {\n                    return sprintf('<nav aria-label=\"Page navigation\" class=\"text-center\"><ul class=\"pagination\"><li><i class=\"count\">\u5171'. ceil($total_count\/config('manage_rows_num')) .'\u9875\uff0c\u6bcf\u9875'. config('manage_rows_num') .'\u6761\u6570\u636e<\/i><\/li>%s %s %s<li><i class=\"count\">\u8df3\u8f6c\u5230<\/i><\/li><li><form action=\"\" class=\"search-form\" method=\"get\"><input type=\"text\" name=\"page\" class=\"go_page\" value=\"'. input('page') .'\" style=\"width:35px;\"><input type=\"submit\" class=\"go\" value=\"GO\" \/><\/form><\/li><\/ul><\/nav>', $this->getPreviousButton(), $this->getLinks(), $this->getNextButton());\n                }\n            } else {\n                if ($this->simple) {\n                    return sprintf('<nav aria-label=\"Page navigation\" class=\"text-center\"><ul class=\"pagination\">%s %s %s<\/ul><\/nav>', $this->getPreviousButton(), $this->getNextButton());\n                } else {\n                    return sprintf('<nav aria-label=\"Page navigation\" class=\"text-center\"><ul class=\"pagination\">%s %s %s<\/ul><\/nav>', $this->getPreviousButton(), $this->getLinks(), $this->getNextButton());\n                }\n            }\n            \n        }\n\n    }","label":0}
{"text":"private function getColumnHeaders(&$results) {\n    $html = '<h3>Column Headers<\/h3><pre>';\n\n    $headers = $results->getColumnHeaders();\n    foreach ($headers as $header) {\n      $html .= <<<HTML\n\nColumn Name = {$header->getName()}\nColumn Type = {$header->getColumnType()}\nData Type   = {$header->getDataType()}\n\nHTML;\n    }\n\n    $html .= '<\/pre>';\n    return $html;\n  }","label":0}
{"text":"def cmd_path(self, cmd):\n        \n        for binscript in self.bin.files:\n\n            if binscript.path.endswith('\/{0}'.format(cmd)):\n\n                return binscript.path\n\n        raise ValueError('The command {0} was not found.'.format(cmd))","label":0}
{"text":"public function disconnect() {\n        if ($this->isConnected() && $this->connection !== false && is_integer($this->connection) === false) {\n            $this->errors = array_merge($this->errors, imap_errors() ?: []);\n            $this->connected = !imap_close($this->connection, IMAP::CL_EXPUNGE);\n        }\n\n        return $this;\n    }","label":0}
{"text":"protected function getIffSignature($data)\n\t{\n\t\t$signature = substr($data, 0, self::LONG_SIZE);\n\n\t\t\/\/ Check if image is IFF\n\t\tif ($signature !== self::IFF_HEADER_AMIGA && $signature !== self::IFF_HEADER_MAYA)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn $signature;\n\t\t}\n\t}","label":0}
{"text":"public function AddMessage($ConversationID = '') {\n      $this->Form->SetModel($this->ConversationMessageModel);\n      if (is_numeric($ConversationID) && $ConversationID > 0)\n         $this->Form->AddHidden('ConversationID', $ConversationID);\n      \n      if ($this->Form->AuthenticatedPostBack()) {\n         $ConversationID = $this->Form->GetFormValue('ConversationID', '');\n         $Conversation = $this->ConversationModel->GetID($ConversationID, Gdn::Session()->UserID);   \n         \n         $this->EventArguments['Conversation'] = $Conversation;\n         $this->EventArguments['ConversationID'] = $ConversationID;\n         $this->FireEvent('BeforeAddMessage');\n         \n         $NewMessageID = $this->Form->Save();\n         \n         if ($NewMessageID) {\n            if ($this->DeliveryType() == DELIVERY_TYPE_ALL)\n               Redirect('messages\/'.$ConversationID.'\/#'.$NewMessageID, 302);\n               \n            $this->SetJson('MessageID', $NewMessageID);\n            \/\/ If this was not a full-page delivery type, return the partial response\n            \/\/ Load all new messages that the user hasn't seen yet (including theirs)\n            $LastMessageID = $this->Form->GetFormValue('LastMessageID');\n            if (!is_numeric($LastMessageID))\n               $LastMessageID = $NewMessageID - 1;\n            \n            $Session = Gdn::Session();\n            $MessageData = $this->ConversationMessageModel->GetNew($ConversationID, $LastMessageID);\n            $this->Conversation = $Conversation;\n            $this->MessageData = $MessageData;\n\n            $this->View = 'messages';\n         } else {\n            \/\/ Handle ajax based errors...\n            if ($this->DeliveryType() != DELIVERY_TYPE_ALL)\n               $this->ErrorMessage($this->Form->Errors());\n         }\n      }\n      $this->Render();      \n   }","label":0}
{"text":"public function normalize($queryNorm)\n    {\n        \/\/ incorporate boost\n        $queryNorm *= $this->_query->getBoost();\n\n        foreach ($this->_weights as $weight) {\n            $weight->normalize($queryNorm);\n        }\n    }","label":0}
{"text":"public function getMaximumCRAPIndex() {\n\t\t$maximumCRAP = 0;\n\t\tforeach ($this->getFiles() as $file) {\n\t\t\tforeach ($file->getLines() as $line) {\n\t\t\t\tif ($line->getType() == CloverLine::TYPE_METHOD) {\n\t\t\t\t\tif ($line->getCrap() > $maximumCRAP) {\n\t\t\t\t\t\t$maximumCRAP = $line->getCRAP();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tforeach ($this->getPackages() as $package) {\n\t\t\tforeach ($package->getFiles() as $file) {\n\t\t\t\tforeach ($file->getLines() as $line) {\n\t\t\t\t\tif ($line->getType() == CloverLine::TYPE_METHOD) {\n\t\t\t\t\t\tif ($line->getCrap() > $maximumCRAP) {\n\t\t\t\t\t\t\t$maximumCRAP = $line->getCRAP();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn $maximumCRAP;\n\t}","label":0}
{"text":"public void setCriterionTypeGroup(com.google.api.ads.adwords.axis.v201809.cm.CriterionTypeGroup criterionTypeGroup) {\n        this.criterionTypeGroup = criterionTypeGroup;\n    }","label":0}
{"text":"private function updateUsersTable()\n    {\n        Schema::table('users', function ($table) {\n            foreach ($this->fields as $field => $value) {\n                if (!Schema::hasColumn('users', $field)) {\n                    $type  = $value['type'];\n                    $query = $table->$type($field);\n\n                    if (isset($value['extra'])) {\n                        $extra = $value['extra'];\n                        $query->$extra();\n                    }\n\n                    if ($field == 'role_id') {\n                        $table->foreign('role_id')->references('id')->on('roles');\n                    }\n                }\n            }\n\n            if (!Schema::hasColumn('users', 'created_at') && !Schema::hasColumn('users', 'updated_at')) {\n                $table->timestamps();\n            }\n\n            if (!Schema::hasColumn('users', 'deleted_at')) {\n                $table->softDeletes();\n            }\n        });\n    }","label":0}
{"text":"public function getStatus(){\n        $rest = $this->getService( self::API_VPN_CLIENT_STATUS);\n        $rest->GET();\n\n        return $rest->getResult( models\\VPN\\Client\\Status::class);\n    }","label":0}
{"text":"public void marshall(RecordTag recordTag, ProtocolMarshaller protocolMarshaller) {\n\n        if (recordTag == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(recordTag.getKey(), KEY_BINDING);\n            protocolMarshaller.marshall(recordTag.getValue(), VALUE_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }","label":0}
{"text":"public Element getIdElement(String id) {\n    WeakReference<Element> ref = objWithId.get(id);\n    return (ref != null) ? ref.get() : null;\n  }","label":0}
{"text":"func quote(s string) string {\n\tq := make([]byte, 2+2*len(s))\n\ti := 0\n\tq[i], i = '\"', i+1\n\tfor _, c := range []byte(s) {\n\t\tif c == '\"' {\n\t\t\tq[i], i = '\\\\', i+1\n\t\t\tq[i], i = '\"', i+1\n\t\t} else {\n\t\t\tq[i], i = c, i+1\n\t\t}\n\t}\n\tq[i], i = '\"', i+1\n\treturn string(q[:i])\n}","label":0}
{"text":"public static void compress(String folderPath, String zipFilePath) throws IOException {\n    File folder = new File(folderPath);\n    if (!folder.exists() || !folder.isDirectory()) {\n      throw new IOException(\"Folder \" + folderPath + \" does't exist or isn't a directory\");\n    }\n\n    File zipFile = new File(zipFilePath);\n    if (!zipFile.exists()) {\n      File zipFolder = zipFile.getParentFile();\n      if (!zipFolder.exists()) {\n        if (!zipFolder.mkdirs()) {\n          throw new IOException(\"Zip folder \" + zipFolder.getAbsolutePath() + \" not created\");\n        }\n      }\n      if (!zipFile.createNewFile()) {\n        throw new IOException(\"Zip file \" + zipFilePath + \" not created\");\n      }\n    }\n\n    BufferedInputStream bis;\n    ZipOutputStream zos = new ZipOutputStream(\n        new BufferedOutputStream(new FileOutputStream(zipFile)));\n    try {\n      final int BUFFER_SIZE = 8 * 1024; \/\/ 8K\n      byte buffer[] = new byte[BUFFER_SIZE];\n      for (String fileName : folder.list()) {\n        if (fileName.equals(\".\") || fileName.equals(\"..\")) {\n          continue;\n        }\n\n        File file = new File(folder, fileName);\n        if (!file.isFile()) {\n          continue;\n        }\n\n        FileInputStream fis = new FileInputStream(file);\n        bis = new BufferedInputStream(fis, BUFFER_SIZE);\n        try {\n          ZipEntry entry = new ZipEntry(fileName);\n          zos.putNextEntry(entry);\n          int count;\n          while ((count = bis.read(buffer, 0, BUFFER_SIZE)) != -1) {\n            zos.write(buffer, 0, count);\n          }\n        } finally {\n          try {\n            bis.close();\n          } catch (IOException e) {\n            \/\/ Ignore\n          }\n        }\n      }\n    } finally {\n      try {\n        zos.close();\n      } catch (IOException e) {\n        \/\/ Ignore\n      }\n    }\n  }","label":0}
{"text":"protected function getLanguages(array $paths = [])\n    {\n        \/\/ Get language path\n        $dir_lang = $this->getLangPath();\n\n        \/\/ Only use the default locale\n        if ($this->config('default_locale_only')) {\n            return [\n                $this->default_locale => \"{$dir_lang}\/{$this->default_locale}\",\n            ];\n        }\n\n        \/\/ Get all language paths\n        foreach (glob(\"{$dir_lang}\/*\", GLOB_ONLYDIR) as $path) {\n            $paths[basename($path)] = $path;\n        }\n\n        return $paths;\n    }","label":0}
{"text":"public SDVariable logLoss(String name, @NonNull SDVariable label, @NonNull SDVariable predictions) {\n        return logLoss(name, label, predictions, null, LossReduce.MEAN_BY_NONZERO_WEIGHT_COUNT, LogLoss.DEFAULT_EPSILON);\n    }","label":0}
{"text":"func (lk *etcdLock) waitForLock() {\n\t\/\/ If timeout is not specified, set it to high value\n\ttimeoutIntvl := time.Second * time.Duration(20000)\n\tif lk.timeout != 0 {\n\t\ttimeoutIntvl = time.Second * time.Duration(lk.timeout)\n\t}\n\n\tlog.Infof(\"Waiting to acquire lock (%s\/%s)\", lk.name, lk.myID)\n\n\t\/\/ Create a timer\n\ttimer := time.NewTimer(timeoutIntvl)\n\tdefer timer.Stop()\n\n\t\/\/ Wait for changes\n\tfor {\n\t\t\/\/ wait on watch channel for holder to release the lock\n\t\tselect {\n\t\tcase <-timer.C:\n\t\t\tlk.mutex.Lock()\n\t\t\tif lk.timeout != 0 {\n\t\t\t\tlk.mutex.Unlock()\n\t\t\t\tlog.Infof(\"Lock timeout on lock %s\/%s\", lk.name, lk.myID)\n\n\t\t\t\tlk.eventChan <- LockEvent{EventType: LockAcquireTimeout}\n\n\t\t\t\tlog.Infof(\"Lock acquire timed out. Stopping lock\")\n\n\t\t\t\tlk.watchCancel()\n\n\t\t\t\t\/\/ Release the lock\n\t\t\t\tlk.Release()\n\n\t\t\t\treturn\n\t\t\t}\n\t\t\tlk.mutex.Unlock()\n\t\tcase watchResp := <-lk.watchCh:\n\t\t\tif watchResp != nil {\n\t\t\t\tlog.Debugf(\"Received watch notification(%s\/%s): %+v\", lk.name, lk.myID, watchResp)\n\n\t\t\t\tif watchResp.Action == \"expire\" || watchResp.Action == \"delete\" ||\n\t\t\t\t\twatchResp.Action == \"compareAndDelete\" {\n\t\t\t\t\tlog.Infof(\"Retrying to acquire lock\")\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t}\n\t\tcase <-lk.stopChan:\n\t\t\tlog.Infof(\"Stopping lock\")\n\t\t\tlk.watchCancel()\n\t\t\treturn\n\t\t}\n\t}\n}","label":0}
{"text":"public void printStuff() {\n        System.out.println(\"Font name:   \" + fontName);\n        System.out.println(\"Full name:   \" + fullName);\n        System.out.println(\"Family name: \" + familyName);\n        System.out.println(\"Subfamily name: \" + subFamilyName);\n        System.out.println(\"Notice:      \" + notice);\n        System.out.println(\"xHeight:     \" + (xHeight));\n        System.out.println(\"capheight:   \" + (capHeight));\n\n        int italic = (int)(italicAngle >> 16);\n        System.out.println(\"Italic:      \" + italic);\n        System.out.print(\"ItalicAngle: \" + (short)(italicAngle \/ 0x10000));\n        if ((italicAngle % 0x10000) > 0) {\n            System.out.print(\".\"\n                             + (short)((italicAngle % 0x10000) * 1000)\n                               \/ 0x10000);\n        }\n        System.out.println();\n        System.out.println(\"Ascender:    \" + (ascender));\n        System.out.println(\"Descender:   \" + (descender));\n        System.out.println(\"FontBBox:    [\" + (fontBBox1)\n                           + \" \" + (fontBBox2) + \" \"\n                           + (fontBBox3) + \" \"\n                           + (fontBBox4) + \"]\");\n    }","label":0}
{"text":"public EClass getIfcObjective() {\r\n\t\tif (ifcObjectiveEClass == null) {\r\n\t\t\tifcObjectiveEClass = (EClass) EPackage.Registry.INSTANCE.getEPackage(Ifc2x3tc1Package.eNS_URI)\r\n\t\t\t\t\t.getEClassifiers().get(330);\r\n\t\t}\r\n\t\treturn ifcObjectiveEClass;\r\n\t}","label":0}
{"text":"public EEnum getRenderingIntentReserved() {\n\t\tif (renderingIntentReservedEEnum == null) {\n\t\t\trenderingIntentReservedEEnum = (EEnum)EPackage.Registry.INSTANCE.getEPackage(AfplibPackage.eNS_URI).getEClassifiers().get(180);\n\t\t}\n\t\treturn renderingIntentReservedEEnum;\n\t}","label":0}
{"text":"protected function updateSite($multisite) {\n    $this->say(\"Deploying updates to <comment>$multisite<\/comment>...\");\n    $this->switchSiteContext($multisite);\n\n    $this->invokeCommand('drupal:update');\n\n    $this->say(\"Finished deploying updates to $multisite.\");\n  }","label":0}
{"text":"func Shell(client *SSHForwardingClient) error {\n\tsession, finalize, err := makeSession(client)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tdefer finalize()\n\n\tif err = session.Shell(); err != nil {\n\t\treturn err\n\t}\n\n\tsession.Wait()\n\treturn nil\n}","label":0}
{"text":"func WriteError(w http.ResponseWriter, err error) {\n\tif err == nil || w == nil {\n\t\tglog.Errorf(\"unexpected HTTP error handling, error %v, writer %v\", err, w)\n\t\treturn\n\t}\n\n\tstatusCode := http.StatusInternalServerError\n\terrMsg := err.Error()\n\n\t\/\/ Based on the type of error we get we need to process things\n\t\/\/ slightly differently to extract the error message.\n\t\/\/ In the 'errcode.*' cases there are two different type of\n\t\/\/ error that could be returned. errocode.ErrorCode is the base\n\t\/\/ type of error object - it is just an 'int' that can then be\n\t\/\/ used as the look-up key to find the message. errorcode.Error\n\t\/\/ extends errorcode.Error by adding error-instance specific\n\t\/\/ data, like 'details' or variable strings to be inserted into\n\t\/\/ the message.\n\t\/\/\n\t\/\/ Ideally, we should just be able to call err.Error() for all\n\t\/\/ cases but the errcode package doesn't support that yet.\n\t\/\/\n\t\/\/ Additionally, in both errcode cases, there might be an http\n\t\/\/ status code associated with it, and if so use it.\n\tswitch err.(type) {\n\tcase errcode.ErrorCode:\n\t\tdaError, _ := err.(errcode.ErrorCode)\n\t\tstatusCode = daError.Descriptor().HTTPStatusCode\n\t\terrMsg = daError.Message()\n\n\tcase errcode.Error:\n\t\t\/\/ For reference, if you're looking for a particular error\n\t\t\/\/ then you can do something like :\n\t\t\/\/   import ( derr \"github.com\/docker\/docker\/errors\" )\n\t\t\/\/   if daError.ErrorCode() == derr.ErrorCodeNoSuchContainer { ... }\n\n\t\tdaError, _ := err.(errcode.Error)\n\t\tstatusCode = daError.ErrorCode().Descriptor().HTTPStatusCode\n\t\terrMsg = daError.Message\n\n\tdefault:\n\t\t\/\/ This part of will be removed once we've\n\t\t\/\/ converted everything over to use the errcode package\n\n\t\t\/\/ FIXME: this is brittle and should not be necessary.\n\t\t\/\/ If we need to differentiate between different possible error types,\n\t\t\/\/ we should create appropriate error types with clearly defined meaning\n\t\terrStr := strings.ToLower(err.Error())\n\t\tfor keyword, status := range map[string]int{\n\t\t\t\"not found\":             http.StatusNotFound,\n\t\t\t\"no such\":               http.StatusNotFound,\n\t\t\t\"bad parameter\":         http.StatusBadRequest,\n\t\t\t\"conflict\":              http.StatusConflict,\n\t\t\t\"impossible\":            http.StatusNotAcceptable,\n\t\t\t\"wrong login\/password\":  http.StatusUnauthorized,\n\t\t\t\"hasn't been activated\": http.StatusForbidden,\n\t\t} {\n\t\t\tif strings.Contains(errStr, keyword) {\n\t\t\t\tstatusCode = status\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t}\n\n\tif statusCode == 0 {\n\t\tstatusCode = http.StatusInternalServerError\n\t}\n\n\thttp.Error(w, errMsg, statusCode)\n}","label":0}
{"text":"func (h *Haikunator) randomString(s []string) string {\n\tsize := len(s)\n\n\tif size <= 0 {\n\t\treturn \"\"\n\t}\n\n\treturn s[h.Random.Intn(size)]\n}","label":0}
{"text":"def delegate(self, fn, *args, **kwargs):\n        \"\"\"\"\"\"\n        callback = functools.partial(fn, *args, **kwargs)\n        coro = self.loop.run_in_executor(self.subexecutor, callback)\n        return asyncio.ensure_future(coro)","label":0}
{"text":"func NewRFCErrorOrPanic(code Code, err error, version string) *rfc2119.Error {\n\trfcError, err2 := NewRFCError(code, err, version)\n\tif err2 != nil {\n\t\tpanic(err2.Error())\n\t}\n\treturn rfcError\n}","label":0}
{"text":"public boolean storeDocument(String name, String type, String id,\n            EsRequest doc) throws IOException {\n        CloseableHttpClient client = HttpClients.createDefault();\n        HttpPost method = new HttpPost(String.format(\"http:\/\/%s:%d\/%s\/%s\/%s\", host, port, name, type, id));\n        try {\n            StringEntity requestEntity = new StringEntity(doc.toString(), ContentType.APPLICATION_JSON);\n            method.setEntity(requestEntity);\n            CloseableHttpResponse resp = client.execute(method);\n            int statusCode = resp.getStatusLine().getStatusCode();\n            return statusCode == HttpStatus.SC_CREATED || statusCode == HttpStatus.SC_OK;\n        } finally {\n            method.releaseConnection();\n        }\n    }","label":0}
{"text":"@Override\n    public void setPeriod(int pPeriod) {\n\tif (pPeriod < 0) {\n\t    throw new IllegalArgumentException(\"Period cannot be negative\");\n\t}\n\tint actual = Math.max(pPeriod, MIN_PERIOD);\n\tlog.debug(\"Changing clock period to {}\", actual);\n\tperiod = actual;\n\n\tif (isRunning()) {\n\t    stop();\n\t    start(false);\n\t}\n    }","label":0}
{"text":"public function exec($statement, $params = array())\n    {\n\t\t\n        if (count($params) > 0){\n        \t$sth = $this->dbConnector->prepare($statement);\n        \t$this->preparedExec = true;\n        \t$this->lastPreparedExecStatement = $sth;\n        \t$sth->execute($params);\n        \t$returnValue = $sth->rowCount();\n        }\n        else{\n        \t$this->preparedExec = false;\n        \ttry {\n        \t    $returnValue = $this->dbConnector->exec($statement);\n        \t} catch (PDOException $e) {\n        \t    common_Logger::w('Error in statement: '.$statement);\n        \t    throw $e;\n        \t}\n        }\n\n        return (int) $returnValue;\n    }","label":0}
{"text":"func (s *sigHead) cache() (err error) {\n\tif !s.clean {\n\t\ts.Protected, err = s.protected.Base64()\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ts.Unprotected, err = s.unprotected.Base64()\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\ts.clean = true\n\treturn nil\n}","label":0}
{"text":"private void readFeatureManifests() {\n        \/\/ For each bundle repository, we need to look at the manifest files\n        for (final BundleRepositoryHolder holder : BundleRepositoryRegistry.holders()) {\n\n            \/\/ Checking isDirectory is just paranoia: Things don't get into the BundleRepositoryRegistry if they don't exist\n            File libFeatureDir = new File(holder.getInstallDir(), ProvisionerConstants.LIB_FEATURE_PATH);\n            if (libFeatureDir.isDirectory()) {\n\n                \/\/ Let's look at all the manifest files in this dir\n                libFeatureDir.listFiles(new FileFilter() {\n                    @Override\n                    public boolean accept(File file) {\n                        if (file == null || !file.isFile())\n                            return false; \/\/ NEXT!\n\n                        \/\/ Note: we always return false. We do the work as we see the files,\n                        \/\/ instead of iterating to build a list that we then have to iterate over again...\n\n                        String name = file.getName();\n                        int pos = name.lastIndexOf('.');\n                        if (pos < 0)\n                            return false; \/\/ NEXT!\n\n                        \/\/ Look only at the file extension, case insensitively\n                        if (name.regionMatches(true, pos, \".mf\", 0, 3)) {\n\n                            \/\/ Pessimistic test first: Is this a file we know is bad?\n                            BadFeature bad = knownBadFeatures.get(file);\n                            if (isFeatureStillBad(file, bad))\n                                return false; \/\/ NEXT!\n\n                            \/\/ Test: if we've seen this file before, is it the same as what we saw last time?\n                            SubsystemFeatureDefinitionImpl def = knownFeatures.get(file);\n                            if (isCachedEntryValid(file, def))\n                                return false; \/\/ NEXT!\n\n                            \/\/ Either we haven't seen it, or it changed, so we need to build a new\n                            \/\/ definition for it. We also know the cache is dirty\n                            isDirty = true;\n\n                            try {\n                                \/\/ We need to start with the details, as we'll have to read the information from the manifest\n                                ProvisioningDetails details = new ProvisioningDetails(file, null);\n\n                                \/\/ Now build the immutables\n                                ImmutableAttributes attr = FeatureDefinitionUtils.loadAttributes(holder.getFeatureType(),\n                                                                                                 file,\n                                                                                                 details);\n\n                                if (!attr.isSupportedFeatureVersion()) {\n                                    \/\/ this feature should be ignored (perhaps backlevel version)\n                                    \/\/ add it to list of files to skip\n                                    knownBadFeatures.put(file, new BadFeature(file.lastModified(), file.length()));\n                                    return false; \/\/ NEXT\n                                }\n\n                                \/\/ we're good to go: basic attributes read and a good feature version!\n                                def = new SubsystemFeatureDefinitionImpl(attr, details);\n\n                                \/\/ update cache(s) with new definition\n                                updateMaps(def);\n\n                            } catch (IOException e) {\n                                \/\/ TODO: NLS MESSAGE\n                                \/\/ We have no message for \"An exception occurred reading the feature manifest\"\n                                if (tc.isDebugEnabled()) {\n                                    Tr.debug(tc, \"An exception occurred while reading the feature manifest\", e.toString());\n                                }\n                                knownBadFeatures.put(file, new BadFeature(file.lastModified(), file.length()));\n                            }\n                        }\n\n                        return false; \/\/ NEXT!\n                    }\n                });\n            }\n        }\n    }","label":0}
{"text":"public function generate($table)\n    {\n        $this->checkTable($table);\n\n        $config = $this->Table->behaviors()->Proffer->config();\n\n        foreach ($config as $field => $settings) {\n            $records = $this->{$this->Table->alias()}->find()\n                ->select([$this->Table->primaryKey(), $field, $settings['dir']])\n                ->where([\n                    \"$field IS NOT NULL\",\n                    \"$field != ''\"\n                ]);\n\n            foreach ($records as $item) {\n                if ($this->param('verbose')) {\n                    $this->out(\n                        __('Processing ' . $this->Table->alias() . ' ' . $item->get($this->Table->primaryKey()))\n                    );\n                }\n\n                if (!empty($this->param('path-class'))) {\n                    $class = (string)$this->param('path-class');\n                    $path = new $class($this->Table, $item, $field, $settings);\n                } else {\n                    $path = new ProfferPath($this->Table, $item, $field, $settings);\n                }\n\n                if (!empty($this->param('image-class'))) {\n                    $class = (string)$this->param('image-class');\n                    $transform = new $class($this->Table, $path);\n                } else {\n                    $transform = new ImageTransform($this->Table, $path);\n                }\n\n                $transform->processThumbnails($settings);\n\n                if ($this->param('verbose')) {\n                    $this->out(__('Thumbnails regenerated for ' . $path->fullPath()));\n                } else {\n                    $this->out(__('Thumbnails regenerated for ' . $this->Table->alias() . ' ' . $item->get($field)));\n                }\n            }\n        }\n\n        $this->out($this->nl(0));\n        $this->out(__('<info>Completed<\/info>'));\n    }","label":0}
{"text":"func (whisper *Whisper) LightClientModeConnectionRestricted() bool {\n\tval, exist := whisper.settings.Load(restrictConnectionBetweenLightClientsIdx)\n\tif !exist || val == nil {\n\t\treturn false\n\t}\n\tv, ok := val.(bool)\n\treturn v && ok\n}","label":0}
{"text":"public static Document buildControlDocument(String fromXML)\n        throws SAXException, IOException {\n        return buildDocument(newControlParser(), new StringReader(fromXML));\n    }","label":0}
{"text":"public function toFieldDefinition(StorageFieldDefinition $storageDef, FieldDefinition $fieldDef)\n    {\n        $useSeconds = (bool)$storageDef->dataInt2;\n        $dateInterval = $this->getDateIntervalFromXML($storageDef->dataText5);\n\n        $fieldDef->fieldTypeConstraints->fieldSettings = new FieldSettings(\n            array(\n                'defaultType' => $storageDef->dataInt1,\n                'useSeconds' => $useSeconds,\n                'dateInterval' => $dateInterval,\n            )\n        );\n\n        \/\/ Building default value\n        switch ($fieldDef->fieldTypeConstraints->fieldSettings['defaultType']) {\n            case DateAndTimeType::DEFAULT_CURRENT_DATE:\n                $data = array(\n                    'rfc850' => null,\n                    'timestamp' => time(), \/\/ @deprecated timestamp is no longer used and will be removed in a future version.\n                    'timestring' => 'now',\n                );\n                break;\n\n            case DateAndTimeType::DEFAULT_CURRENT_DATE_ADJUSTED:\n                if (!$useSeconds) {\n                    $dateInterval->s = 0;\n                }\n                $date = new DateTime();\n                $date->add($dateInterval);\n                $data = array(\n                    'rfc850' => null,\n                    'timestamp' => $date->getTimestamp(), \/\/ @deprecated timestamp is no longer used and will be removed in a future version.\n                    'timestring' => $dateInterval->format('%y years, %m months, %d days, %h hours, %i minutes, %s seconds'),\n                );\n                break;\n\n            default:\n                $data = null;\n        }\n\n        $fieldDef->defaultValue->data = $data;\n    }","label":0}
{"text":"public function set_labels( $labels ) {\n\t\t$this->merge( $this->labels, $labels );\n\t\t$this->update_arg( 'labels', $this->labels );\n\t}","label":0}
{"text":"void setLanguage(final Locale locale) {\n\n        if (!m_languageSelect.getValue().equals(locale)) {\n            m_languageSelect.setValue(locale);\n        }\n    }","label":0}
{"text":"public Option getOptionWithShortForm( String shortForm ) throws InvalidOptionException\n    {\n        for (Option option : options)\n        {\n            if (shortForm.equals( option.getShortForm() )) return option;\n        }\n\n        throw new InvalidOptionException( shortForm );\n    }","label":0}
{"text":"@Override\n\tpublic boolean eIsSet(int featureID) {\n\t\tswitch (featureID) {\n\t\t\tcase AfplibPackage.GCBIMG__FORMAT:\n\t\t\t\treturn FORMAT_EDEFAULT == null ? format != null : !FORMAT_EDEFAULT.equals(format);\n\t\t\tcase AfplibPackage.GCBIMG__RES:\n\t\t\t\treturn RES_EDEFAULT == null ? res != null : !RES_EDEFAULT.equals(res);\n\t\t\tcase AfplibPackage.GCBIMG__WIDTH:\n\t\t\t\treturn WIDTH_EDEFAULT == null ? width != null : !WIDTH_EDEFAULT.equals(width);\n\t\t\tcase AfplibPackage.GCBIMG__HEIGHT:\n\t\t\t\treturn HEIGHT_EDEFAULT == null ? height != null : !HEIGHT_EDEFAULT.equals(height);\n\t\t}\n\t\treturn super.eIsSet(featureID);\n\t}","label":0}
{"text":"@Override\n\tpublic void dispose() throws Exception {\n\t\ttry {\n\t\t\towlEditorKit.getModelManager().removeListener(getModelManagerListener());\n\t\t\tconnectionManager.dispose();\n\t\t} catch (Exception e) {\n\t\t\tlog.warn(e.getMessage());\n\t\t}\n\t}","label":0}
{"text":"public java.util.Map<java.lang.String, org.tensorflow.framework.TensorInfo> getInputsMap() {\n    return internalGetInputs().getMap();\n  }","label":0}
{"text":"def RenameGroup(r, group, new_name):\n    \n\n    body = {\n        \"new_name\": new_name,\n    }\n\n    return r.request(\"put\", \"\/2\/groups\/%s\/rename\" % group, content=body)","label":0}
{"text":"public function handle()\n    {\n        \/** @var \\Illuminate\\Database\\Connection|CouchbaseConnection $connection *\/\n        $connection = $this->databaseManager->connection($this->option('database'));\n        if ($connection instanceof CouchbaseConnection) {\n            \/** @var \\Couchbase\\Bucket $bucket *\/\n            $bucket = $connection->openBucket($this->argument('bucket'));\n            foreach ($this->config as $name => $document) {\n                $bucket->manager()->insertDesignDocument($name, $document);\n                $this->comment(\"created view name [{$name}]\");\n            }\n        }\n\n        return;\n    }","label":0}
{"text":"func NewCmdSimpleFSList(cl *libcmdline.CommandLine, g *libkb.GlobalContext) cli.Command {\n\treturn cli.Command{\n\t\tName:         \"ls\",\n\t\tArgumentHelp: \"<path>\",\n\t\tUsage:        \"list directory contents\",\n\t\tAction: func(c *cli.Context) {\n\t\t\tcl.ChooseCommand(&CmdSimpleFSList{Contextified: libkb.NewContextified(g)}, \"ls\", c)\n\t\t\tcl.SetNoStandalone()\n\t\t},\n\t\tFlags: []cli.Flag{\n\t\t\tcli.BoolFlag{\n\t\t\t\tName:  \"rec, recursive\",\n\t\t\t\tUsage: \"recurse into subdirectories\",\n\t\t\t},\n\t\t\t\/* TODO: currently this option does nothing.\n\t\t\tcli.BoolFlag{\n\t\t\t\tName:  \"dirs-first\",\n\t\t\t\tUsage: \"list directories first\",\n\t\t\t},\n\t\t\t*\/\n\t\t\tcli.BoolFlag{\n\t\t\t\tName:  \"nocolor\",\n\t\t\t\tUsage: \"remove color formatting\",\n\t\t\t},\n\t\t\tcli.BoolFlag{\n\t\t\t\tName:  \"1, one\",\n\t\t\t\tUsage: \"one entry per line\",\n\t\t\t},\n\t\t\tcli.BoolFlag{\n\t\t\t\tName:  \"a, all\",\n\t\t\t\tUsage: \"include entries starting with '.'\",\n\t\t\t},\n\t\t\tcli.BoolFlag{\n\t\t\t\tName:  \"l, long\",\n\t\t\t\tUsage: \"long listing\",\n\t\t\t},\n\t\t\tcli.BoolFlag{\n\t\t\t\tName:  \"r, sort-reverse\",\n\t\t\t\tUsage: \"reverse any sorting\",\n\t\t\t},\n\t\t\tcli.BoolFlag{\n\t\t\t\tName:  \"t, sort-time\",\n\t\t\t\tUsage: \"sort entries by modify time\",\n\t\t\t},\n\t\t\tcli.BoolFlag{\n\t\t\t\tName:  \"s, sort-size\",\n\t\t\t\tUsage: \"sort entries by size\",\n\t\t\t},\n\t\t\tcli.BoolFlag{\n\t\t\t\tName:  \"w, windows\",\n\t\t\t\tUsage: \"windows style dir\",\n\t\t\t},\n\t\t\tcli.IntFlag{\n\t\t\t\tName:  \"rev\",\n\t\t\t\tUsage: \"a revision number for the KBFS folder\",\n\t\t\t},\n\t\t\tcli.StringFlag{\n\t\t\t\tName:  \"time\",\n\t\t\t\tUsage: \"a time for the KBFS folder (eg \\\"2018-07-27 22:05\\\")\",\n\t\t\t},\n\t\t\tcli.StringFlag{\n\t\t\t\tName:  \"reltime, relative-time\",\n\t\t\t\tUsage: \"a relative time for the KBFS folder (eg \\\"5m\\\")\",\n\t\t\t},\n\t\t},\n\t}\n\n}","label":0}
{"text":"func FilterOutInPlace(input []Expression, filter func(Expression) bool) (remained, filteredOut []Expression) {\n\tfor i := len(input) - 1; i >= 0; i-- {\n\t\tif filter(input[i]) {\n\t\t\tfilteredOut = append(filteredOut, input[i])\n\t\t\tinput = append(input[:i], input[i+1:]...)\n\t\t}\n\t}\n\treturn input, filteredOut\n}","label":0}
{"text":"def check_type(param, datatype):\n    \n    if param is None:\n        return param\n\n    if getattr(datatype, 'clean', None) and callable(datatype.clean):\n        try:\n            return datatype.clean(param)\n        except ValueError:\n            raise BadArgumentError(param)\n\n    elif isinstance(datatype, str):\n        # You've given it something like `'bool'` as a string.\n        # This is the legacy way of doing it.\n        datatype = {\n            'str': str,\n            'bool': bool,\n            'float': float,\n            'date': datetime.date,\n            'datetime': datetime.datetime,\n            'timedelta': datetime.timedelta,\n            'json': 'json',  # exception\n            'int': int,\n        }[datatype]\n\n    if datatype is str and not isinstance(param, basestring):\n        try:\n            param = str(param)\n        except ValueError:\n            param = str()\n\n    elif datatype is int and not isinstance(param, int):\n        try:\n            param = int(param)\n        except ValueError:\n            param = int()\n\n    elif datatype is bool and not isinstance(param, bool):\n        param = str(param).lower() in (\"true\", \"t\", \"1\", \"y\", \"yes\")\n\n    elif (\n        datatype is datetime.datetime and\n        not isinstance(param, datetime.datetime)\n    ):\n        try:\n            param = dtutil.string_to_datetime(param)\n        except ValueError:\n            param = None\n\n    elif datatype is datetime.date and not isinstance(param, datetime.date):\n        try:\n            param = dtutil.string_to_datetime(param).date()\n        except ValueError:\n            param = None\n\n    elif (\n        datatype is datetime.timedelta and\n        not isinstance(param, datetime.timedelta)\n    ):\n        try:\n            param = dtutil.strHoursToTimeDelta(param)\n        except ValueError:\n            param = None\n\n    elif datatype == \"json\" and isinstance(param, basestring):\n        try:\n            param = json.loads(param)\n        except ValueError:\n            param = None\n\n    return param","label":0}
{"text":"func checkWriteFilesUnderCoreos(cfg node, report *Report) {\n\tc := cfg.Child(\"coreos\").Child(\"write_files\")\n\tif c.IsValid() {\n\t\treport.Info(c.line, \"write_files doesn't belong under coreos\")\n\t}\n}","label":0}
{"text":"public function boot()\n    {\n        $configPath = __DIR__ . '\/..\/config\/debugbar.php';\n        $this->publishes([$configPath => $this->getConfigPath()], 'config');\n\n        $routeConfig = [\n            'namespace' => 'Barryvdh\\Debugbar\\Controllers',\n            'prefix' => $this->app['config']->get('debugbar.route_prefix'),\n            'domain' => $this->app['config']->get('debugbar.route_domain'),\n            'middleware' => [DebugbarEnabled::class],\n        ];\n\n        $this->getRouter()->group($routeConfig, function($router) {\n            $router->get('open', [\n                'uses' => 'OpenHandlerController@handle',\n                'as' => 'debugbar.openhandler',\n            ]);\n\n            $router->get('clockwork\/{id}', [\n                'uses' => 'OpenHandlerController@clockwork',\n                'as' => 'debugbar.clockwork',\n            ]);\n\n            $router->get('telescope\/{id}', [\n                'uses' => 'TelescopeController@show',\n                'as' => 'debugbar.telescope',\n            ]);\n            \n            $router->get('assets\/stylesheets', [\n                'uses' => 'AssetController@css',\n                'as' => 'debugbar.assets.css',\n            ]);\n\n            $router->get('assets\/javascript', [\n                'uses' => 'AssetController@js',\n                'as' => 'debugbar.assets.js',\n            ]);\n\n            $router->delete('cache\/{key}\/{tags?}', [\n                'uses' => 'CacheController@delete',\n                'as' => 'debugbar.cache.delete',\n            ]);\n        });\n\n        $this->registerMiddleware(InjectDebugbar::class);\n    }","label":0}
{"text":"public function createIndexes(array $indexes, array $options = [])\n    {\n        if (empty($indexes)) {\n            throw new InvalidArgumentException('$indexes array cannot be empty.');\n        }\n\n        $compiledIndexes = array_map(function (Index $index) {\n            return $index->toArray();\n        }, $indexes);\n\n        $this->executeCommand(\n            ['createIndexes' => $this->collectionName, 'indexes' => $compiledIndexes],\n            $options\n        );\n\n        return array_map(function (Index $index) {\n            return $index->getName();\n        }, $indexes);\n    }","label":0}
{"text":"func (q *MoreLikeThisQuery) Field(fields ...string) *MoreLikeThisQuery {\n\tq.fields = append(q.fields, fields...)\n\treturn q\n}","label":0}
{"text":"public static sdx_network_config get(nitro_service client) throws Exception\r\n\t{\r\n\t\tsdx_network_config resource = new sdx_network_config();\r\n\t\tresource.validate(\"get\");\r\n\t\treturn ((sdx_network_config[]) resource.get_resources(client))[0];\r\n\t}","label":0}
{"text":"protected function isColumnForeignKeyOrDuplicated(Column $column)\n    {\n        $delegateTable = $column->getTable();\n        $table = $this->getTable();\n        $fks = [];\n\n        if (!isset($this->double_defined)) {\n            $this->double_defined = [];\n\n            foreach ($this->delegates+[$table->getName() => 1] as $key => $value) {\n                $delegateTable = $this->getDelegateTable($key);\n                foreach ($delegateTable->getColumns() as $columnDelegated) {\n                    if (isset($this->double_defined[$columnDelegated->getName()])) {\n                        $this->double_defined[$columnDelegated->getName()]++;\n                    } else {\n                        $this->double_defined[$columnDelegated->getName()] = 1;\n                    }\n                }\n            }\n        }\n\n        if (1<$this->double_defined[$column->getName()]) {\n            return true;\n        }\n\n        foreach ($delegateTable->getForeignKeysReferencingTable($table->getName()) as $fk) {\n            \/** @var \\Propel\\Generator\\Model\\ForeignKey $fk *\/\n            $fks[] = $fk->getForeignColumnName();\n        }\n\n        foreach ($table->getForeignKeysReferencingTable($delegateTable->getName()) as $fk) {\n            $fks[] = $fk->getForeignColumnName();\n        }\n\n        if (in_array($column->getName(), $fks) || $table->hasColumn($column->getName())) {\n            return true;\n        }\n\n        return false;\n    }","label":0}
{"text":"func (s *Resource) SetPartition(v string) *Resource {\n\ts.Partition = &v\n\treturn s\n}","label":0}
{"text":"public function get_service_metas( $meta_name = false )\n    {\n        $meta_value = false;\n        if( $meta_name &&  array_key_exists( $meta_name, $this->_service_metas ) )\n        {\n            $meta_value = $this->_service_metas[$meta_name];\n        }\n\n        return ( $meta_value ) ? $meta_value : $this->_service_metas;\n    }","label":0}
{"text":"function(model_s, create, options){\n      var toAdd = model_s instanceof Array ? model_s : [model_s],\n          self = this;\n\n      ko.utils.arrayForEach(toAdd, function(attributes){\n        var model;\n        if(attributes instanceof Model){\n          model = attributes;\n          model.collection = self;\n        }else{\n          model = new self.model(attributes, {collection: self});\n        }\n        self.models.push(model);\n        if(create) model.save(options);\n      });\n    }","label":0}
{"text":"public void error(final CellField<T> cellField) {\r\n        ArgUtils.notNull(cellField, \"cellField\");\r\n        error(cellField, getMessageKey(), getMessageVariables(cellField));\r\n    }","label":0}
{"text":"public static function driver($table=null,$pk='id',$config = 'dao'){\n        $class = get_called_class();\n        $key = $class.':'.$table.':'.(is_string($config)?$config:md5(json_encode($config)));\n\n        if($driver = Pool::get($key)) {\n            return $driver;\n        }\n\n        $config = is_array($config)?:static::config($config);\n\n        return Pool::set($key,static::create($table,$pk,$config));\n    }","label":0}
{"text":"def cut_matrix(self, n):\n        \"\"\"\"\"\"\n        cm = np.zeros((n, n))\n\n        for part in self.partition:\n            from_, to = self.direction.order(part.mechanism, part.purview)\n            # All indices external to this part\n            external = tuple(set(self.indices) - set(to))\n            cm[np.ix_(from_, external)] = 1\n\n        return cm","label":0}
{"text":"@Override\n    public Object generate(Client<?> client, String dataType)\n    {\n        return UUID.randomUUID().toString();\n    }","label":0}
{"text":"func (s *SentimentScore) SetNeutral(v float64) *SentimentScore {\n\ts.Neutral = &v\n\treturn s\n}","label":0}
{"text":"public function buildMultiFieldQuery( $searchText, $solrFields = array(), $boostFields = array() )\n    {\n        \/\/ simple implode implying an OR functionality\n        $multiFieldQuery = '';\n        \/\/ prepare boostfields arguments if any\n        $processedBoostFields = array();\n        foreach ( $boostFields as $baseName => $boostValue )\n        {\n            if ( strpos( $boostValue, ':' ) !== false && is_numeric( $baseName ) )\n            {\n                \/\/ split at the first colon, leave the rest intact\n                list( $baseName, $boostValue ) = explode( ':', $boostValue, 2 );\n            }\n            if ( is_numeric( $boostValue ) )\n            {\n                \/\/ Get internal field name.\n                $baseName = eZSolr::getFieldName( $baseName );\n                $processedBoostFields[$baseName] = $boostValue;\n            }\n        }\n\n\n        foreach ( $solrFields as $field )\n        {\n            \/\/don't mind the last extra space, it's ignored by Solr\n            $multiFieldQuery .= $field . ':(' . $searchText . ')';\n            \/\/ check if we need to apply a boost\n            if ( array_key_exists( $field, $processedBoostFields ) )\n            {\n                $multiFieldQuery .= '^' . $processedBoostFields[$field];\n            }\n\n            $multiFieldQuery .= ' ';\n\n        }\n        return $multiFieldQuery;\n    }","label":0}
{"text":"func (sw *OvsSwitch) AddBgp(hostname string, routerIP string,\n\tAs string, neighborAs, neighbor string) error {\n\tif sw.netType == \"vlan\" && sw.ofnetAgent != nil {\n\t\terr := sw.ofnetAgent.AddBgp(routerIP, As, neighborAs, neighbor)\n\t\tif err != nil {\n\t\t\tlog.Errorf(\"Error adding BGP server\")\n\t\t\treturn err\n\t\t}\n\t}\n\n\treturn nil\n}","label":0}
{"text":"def GetFrequencyStopTimes(self, problems=None):\n    \n    stoptimes_list = [] # list of stoptime lists to be returned\n    stoptime_pattern = self.GetStopTimes()\n    first_secs = stoptime_pattern[0].arrival_secs # first time of the trip\n    stoptime_class = self.GetGtfsFactory().StopTime\n    # for each start time of a headway run\n    for run_secs in self.GetFrequencyStartTimes():\n      # stop time list for a headway run\n      stoptimes = []\n      # go through the pattern and generate stoptimes\n      for st in stoptime_pattern:\n        arrival_secs, departure_secs = None, None # default value if the stoptime is not timepoint\n        if st.arrival_secs != None:\n          arrival_secs = st.arrival_secs - first_secs + run_secs\n        if st.departure_secs != None:\n          departure_secs = st.departure_secs - first_secs + run_secs\n        # append stoptime\n        stoptimes.append(stoptime_class(problems=problems, stop=st.stop,\n                                        arrival_secs=arrival_secs,\n                                        departure_secs=departure_secs,\n                                        stop_headsign=st.stop_headsign,\n                                        pickup_type=st.pickup_type,\n                                        drop_off_type=st.drop_off_type,\n                                        shape_dist_traveled= \\\n                                            st.shape_dist_traveled,\n                                        stop_sequence=st.stop_sequence,\n                                        timepoint=st.timepoint))\n      # add stoptimes to the stoptimes_list\n      stoptimes_list.append ( stoptimes )\n    return stoptimes_list","label":0}
{"text":"public function exportFile( stdClass $params )\n\t{\n\t\t$this->_checkParams( $params, array( 'site', 'items' ) );\n\t\t$this->_setLocale( $params->site );\n\t\t$context = $this->_getContext();\n\n\t\t$items = (array) $params->items;\n\t\t$lang = ( property_exists( $params, 'lang' ) ) ? (array) $params->lang : array();\n\n\t\t$config = $context->getConfig();\n\n\t\t\/** controller\/extjs\/catalog\/export\/text\/default\/exportdir\n\t\t * Directory where exported files of catalog texts are stored\n\t\t *\n\t\t * All exported files are stored in this file system directory directory.\n\t\t *\n\t\t * The export directory must be relative to the \"basedir\" configuration\n\t\t * option. If\n\t\t *\n\t\t *  \/var\/www\/test\n\t\t *\n\t\t * is the configured base directory and the export directory should be\n\t\t * located in\n\t\t *\n\t\t *  \/var\/www\/test\/htdocs\/files\/exports\n\t\t *\n\t\t * then the configuration for the export directory must be\n\t\t *\n\t\t *  htdocs\/files\/exports\n\t\t *\n\t\t * Avoid leading and trailing slashes for the export directory string!\n\t\t *\n\t\t * @param string Relative path in the file system\n\t\t * @since 2014.03\n\t\t * @category Developer\n\t\t * @see controller\/extjs\/media\/default\/basedir\n\t\t *\/\n\t\t$dir = $config->get( 'controller\/extjs\/catalog\/export\/text\/default\/exportdir', 'uploads' );\n\n\t\t\/** controller\/extjs\/catalog\/export\/text\/default\/dirperms\n\t\t * Directory permissions used when creating the directory if it doesn't exist\n\t\t *\n\t\t * The representation of the permissions is in octal notation (using 0-7)\n\t\t * with a leading zero. The first number after the leading zero are the\n\t\t * permissions for the web server creating the directory, the second is\n\t\t * for the primary group of the web server and the last number represents\n\t\t * the permissions for everyone else.\n\t\t *\n\t\t * You should use 0700 for the permissions as the web server needs\n\t\t * to write into the new directory but the files shouldn't be publicall\n\t\t * available. The group permissions are only important if you plan to\n\t\t * retrieve the files directly via FTP or by other means because then\n\t\t * you need to be able to read and manage those files. In this case use\n\t\t * 0770 as permissions.\n\t\t *\n\t\t * A more detailed description of the meaning of the Unix file permission\n\t\t * bits can be found in the Wikipedia article about\n\t\t * {@link https:\/\/en.wikipedia.org\/wiki\/File_system_permissions#Numeric_notation file system permissions}\n\t\t *\n\t\t * @param integer Octal Unix permission representation\n\t\t * @since 2014.03\n\t\t * @category Developer\n\t\t * @category User\n\t\t *\/\n\t\t$perms = $config->get( 'controller\/extjs\/catalog\/export\/text\/default\/dirperms', 0700 );\n\n\t\t\/** controller\/extjs\/catalog\/export\/text\/default\/downloaddir\n\t\t * Directory where the exported files can be found through the web\n\t\t *\n\t\t * The exported files are stored in this directory directory.\n\t\t *\n\t\t * The download directory must be relative to the document root of your\n\t\t * virtual host. If the document root is\n\t\t *\n\t\t *  \/var\/www\/test\/htdocs\n\t\t *\n\t\t * and the exported files will be in\n\t\t *\n\t\t *  \/var\/www\/test\/htdocs\/files\/exports\n\t\t *\n\t\t * then the configuration for the download directory must be\n\t\t *\n\t\t *  files\/exports\n\t\t *\n\t\t * Avoid leading and trailing slashes for the export directory string!\n\t\t *\n\t\t * @param string Relative path in the URL\n\t\t * @since 2014.03\n\t\t * @category Developer\n\t\t *\/\n\t\t$downloaddir = $config->get( 'controller\/extjs\/catalog\/export\/text\/default\/downloaddir', 'uploads' );\n\n\t\t$foldername = 'catalog-text-export_' . date('Y-m-d_H:i:s') . '_' . md5( time() . getmypid() );\n\t\t$tmpfolder = $dir . DIRECTORY_SEPARATOR . $foldername;\n\n\t\tif( is_dir( $dir ) === false && mkdir( $dir, $perms, true ) === false ) {\n\t\t\tthrow new Controller_ExtJS_Exception( sprintf( 'Couldn\\'t create directory \"%1$s\" with permissions \"%2$o\"', $dir, $perms ) );\n\t\t}\n\n\t\t$context->getLogger()->log( sprintf( 'Create export directory for catalog IDs: %1$s', implode( ',', $items ) ), MW_Logger_Abstract::DEBUG );\n\n\t\t$filename = $this->_exportData( $items, $lang, $tmpfolder );\n\t\t$downloadFile = $downloaddir . DIRECTORY_SEPARATOR . basename( $filename );\n\n\t\treturn array(\n\t\t\t'file' => '<a href=\"'.$downloadFile.'\">'.$context->getI18n()->dt( 'controller\/extjs', 'Download' ).'<\/a>',\n\t\t);\n\t}","label":0}
{"text":"public function getHtmlOutput(\\Zend_View_Abstract $view)\n    {\n        $htmlDiv = \\MUtil_Html::div();\n\n        $title = $this->getTitle();\n        if ($title) {\n            $htmlDiv->h3($title, array('class' => 'title'));\n        }\n\n        $form = parent::getHtmlOutput($view);\n\n        $htmlDiv[] = $form;\n\n        return $htmlDiv;\n    }","label":0}
{"text":"def requestConnection(self, wanInterfaceId=1, timeout=1):\n        \n        namespace = Wan.getServiceType(\"requestConnection\") + str(wanInterfaceId)\n        uri = self.getControlURL(namespace)\n\n        self.execute(uri, namespace, \"RequestConnection\", timeout=timeout)","label":0}
{"text":"func hasDeadStates(a *Automaton) bool {\n\tliveStates := liveStates(a)\n\tnumLive := liveStates.Cardinality()\n\tnumStates := a.numStates()\n\tassert2(numLive <= int64(numStates), \"numLive=%v numStates=%v %v\", numLive, numStates, liveStates)\n\treturn numLive < int64(numStates)\n}","label":0}
{"text":"func (c *Client) Read(path string) ([]byte, error) {\n\tvar stream io.ReadCloser\n\tvar err error\n\n\tif stream, err = c.ReadStream(path); err != nil {\n\t\treturn nil, err\n\t}\n\tdefer stream.Close()\n\n\tbuf := new(bytes.Buffer)\n\t_, err = buf.ReadFrom(stream)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn buf.Bytes(), nil\n}","label":0}
{"text":"async def load(cls, db, identifier=None, redis_key=None):\n        \n        if not identifier and not redis_key:\n            raise InvalidQuery('Must supply identifier or redis_key')\n        if redis_key is None:\n            redis_key = cls.make_key(identifier)\n        if await db.exists(redis_key):\n            data = await db.hgetall(redis_key)\n            kwargs = {}\n            for key_bin, value_bin in data.items():\n                key, value = key_bin, value_bin\n                column = getattr(cls, key, False)\n                if not column or (column.field_type == str):\n                    kwargs[key] = value\n                elif column.field_type == datetime:\n                    kwargs[key] = datetime.strptime(value, DATETIME_FORMAT)\n                else:\n                    kwargs[key] = column.field_type(value)\n            kwargs['loading'] = True\n            return cls(**kwargs)\n        else:\n            logger.debug(\"No Redis key found: {}\".format(redis_key))\n            return None","label":0}
{"text":"public static int readUnsignedShortLittleEndian(InputStream io) throws IOException {\r\n\t\tint value = io.read();\r\n\t\tif (value < 0) throw new EOFException();\r\n\t\tint i = io.read();\r\n\t\tif (i < 0) throw new EOFException();\r\n\t\treturn value | (i << 8);\r\n\t}","label":0}
{"text":"public function set($key, $value)\n    {\n        if (strpos($key, '.') !== false) {\n            $this->setSubValue($key, $value);\n        } else {\n            $this->setByKey($key, $value);\n        }\n\n        $this->resetLang();\n    }","label":0}
{"text":"protected function _normalizeData($args, $path = '')\n    {\n        $data = [];\n        foreach ($args as $key => $value) {\n            if ($path) {\n                \/\/ Fold string keys with [].\n                \/\/ Numeric keys result in a=b&a=c. While this isn't\n                \/\/ standard behavior in PHP, it is common in other platforms.\n                if (!is_numeric($key)) {\n                    $key = \"{$path}[{$key}]\";\n                } else {\n                    $key = $path;\n                }\n            }\n            if (is_array($value)) {\n                uksort($value, 'strcmp');\n                $data = array_merge($data, $this->_normalizeData($value, $key));\n            } else {\n                $data[] = [$key, $value];\n            }\n        }\n\n        return $data;\n    }","label":0}
{"text":"func (s *ListTasksInput) SetServiceName(v string) *ListTasksInput {\n\ts.ServiceName = &v\n\treturn s\n}","label":0}
{"text":"public Vec getRow(int r)\n    {\n        if(r < 0 || r >= rows())\n            throw new ArithmeticException(\"Row was not a valid value \" + r + \" not in [0,\" + (rows()-1) + \"]\");\n        DenseVector c = new DenseVector(cols());\n        for(int j =0; j < cols(); j++)\n            c.set(j, get(r, j));\n        return c;\n    }","label":0}
{"text":"final public function upsert(TagKey $key, TagValue $value)\n    {\n        $this->m[$key->getName()] = new Tag($key, $value);\n    }","label":0}
{"text":"def _is_proper_sequence(seq):\n    \"\"\"\"\"\"\n    return (isinstance(seq, collections.abc.Sequence) and\n            not isinstance(seq, str))","label":0}
{"text":"func NewResourceConfig(c *config.RawConfig) *ResourceConfig {\n\tresult := &ResourceConfig{raw: c}\n\tresult.interpolateForce()\n\treturn result\n}","label":0}
{"text":"def core__create_superuser_session(superuser, lifetime)\n      token = core__encode_token(lifetime, superuser_id: superuser.id)\n      session[:lato_core__superuser_session_token] = token\n    end","label":0}
{"text":"protected function columns($data = null)\n    {\n        if (is_null($data)) {\n            $this->_columns = $this->extruct(\n                Query::from('INFORMATION_SCHEMA.COLUMNS', false)\n                ->select('COLUMN_NAME')\n                ->where('TABLE_SCHEMA', '=', Config::get('database.database'))\n                ->andwhere('TABLE_NAME', '=', $this->_prifixTable)\n                ->get(Query::GET_ARRAY)\n                );\n            \/\/\n            return $this->_columns;\n        } else {\n            $this->_columns = $data['columns'];\n        }\n    }","label":0}
{"text":"def merge_dicts(dict1, dict2, deep_merge=True):\n    \"\"\"\"\"\"\n    if deep_merge:\n        if isinstance(dict1, list) and isinstance(dict2, list):\n            return dict1 + dict2\n\n        if not isinstance(dict1, dict) or not isinstance(dict2, dict):\n            return dict2\n\n        for key in dict2:\n            dict1[key] = merge_dicts(dict1[key], dict2[key]) if key in dict1 else dict2[key]  # noqa pylint: disable=line-too-long\n        return dict1\n    dict3 = dict1.copy()\n    dict3.update(dict2)\n    return dict3","label":0}
{"text":"func (s *Credentials) SetRefreshTokenExpiration(v time.Time) *Credentials {\n\ts.RefreshTokenExpiration = &v\n\treturn s\n}","label":0}
{"text":"@Override\n    public boolean isDone() {\n\n        \/\/F743-609CodRev - read volatile variable only once\n        boolean done = ivDone;\n        if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {\n            Tr.debug(tc, \"isDone: \" + done + \" Future object: \" + this);\n        }\n\n        return (done);\n    }","label":0}
{"text":"public function get(string $entryIdentifier)\n    {\n        if (!$this->isValidEntryIdentifier($entryIdentifier)) {\n            throw new \\InvalidArgumentException('\"' . $entryIdentifier . '\" is not a valid cache entry identifier.', 1233058294);\n        }\n\n        $rawResult = $this->backend->get($entryIdentifier);\n        if ($rawResult === false) {\n            return false;\n        }\n        return ($this->useIgBinary === true) ? igbinary_unserialize($rawResult) : unserialize($rawResult);\n    }","label":0}
{"text":"public void marshall(DescribeConfigRuleEvaluationStatusRequest describeConfigRuleEvaluationStatusRequest, ProtocolMarshaller protocolMarshaller) {\n\n        if (describeConfigRuleEvaluationStatusRequest == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(describeConfigRuleEvaluationStatusRequest.getConfigRuleNames(), CONFIGRULENAMES_BINDING);\n            protocolMarshaller.marshall(describeConfigRuleEvaluationStatusRequest.getNextToken(), NEXTTOKEN_BINDING);\n            protocolMarshaller.marshall(describeConfigRuleEvaluationStatusRequest.getLimit(), LIMIT_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }","label":0}
{"text":"public function get($resource, $body = null, $params = [])\n    {\n        return $this->send($this->prepare('GET', $resource, $body, $params));\n    }","label":0}
{"text":"func (fv *FeatureVector) IsKnown(bit FeatureBit) bool {\n\t_, known := fv.featureNames[bit]\n\treturn known\n}","label":0}
{"text":"func (c *OpenChannel) isBorked(chanBucket *bbolt.Bucket) (bool, error) {\n\tchannel, err := fetchOpenChannel(chanBucket, &c.FundingOutpoint)\n\tif err != nil {\n\t\treturn false, err\n\t}\n\n\treturn channel.chanStatus != ChanStatusDefault, nil\n}","label":0}
{"text":"public function addDispatcher($name, DispatcherInterface $dispatcher)\n    {\n        $name = strtolower($name);\n\n        $dispatcher->name = $name;\n\n        $this->dispatchers[$name] = $dispatcher;\n\n        return $this;\n    }","label":0}
{"text":"func (r *Req) SetProxyUrl(rawurl string) error {\n\ttrans := r.getTransport()\n\tif trans == nil {\n\t\treturn errors.New(\"req: no transport\")\n\t}\n\tu, err := url.Parse(rawurl)\n\tif err != nil {\n\t\treturn err\n\t}\n\ttrans.Proxy = http.ProxyURL(u)\n\treturn nil\n}","label":0}
{"text":"def _create_one(self, ctx):\n        \n        assert isinstance(ctx, ResourceQueryContext)\n\n        fields = dict_pick(ctx.data, self._model_columns)\n        model = self.model_cls(**fields)\n        return model","label":0}
{"text":"public void marshall(UpdateFleetRequest updateFleetRequest, ProtocolMarshaller protocolMarshaller) {\n\n        if (updateFleetRequest == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(updateFleetRequest.getImageName(), IMAGENAME_BINDING);\n            protocolMarshaller.marshall(updateFleetRequest.getImageArn(), IMAGEARN_BINDING);\n            protocolMarshaller.marshall(updateFleetRequest.getName(), NAME_BINDING);\n            protocolMarshaller.marshall(updateFleetRequest.getInstanceType(), INSTANCETYPE_BINDING);\n            protocolMarshaller.marshall(updateFleetRequest.getComputeCapacity(), COMPUTECAPACITY_BINDING);\n            protocolMarshaller.marshall(updateFleetRequest.getVpcConfig(), VPCCONFIG_BINDING);\n            protocolMarshaller.marshall(updateFleetRequest.getMaxUserDurationInSeconds(), MAXUSERDURATIONINSECONDS_BINDING);\n            protocolMarshaller.marshall(updateFleetRequest.getDisconnectTimeoutInSeconds(), DISCONNECTTIMEOUTINSECONDS_BINDING);\n            protocolMarshaller.marshall(updateFleetRequest.getDeleteVpcConfig(), DELETEVPCCONFIG_BINDING);\n            protocolMarshaller.marshall(updateFleetRequest.getDescription(), DESCRIPTION_BINDING);\n            protocolMarshaller.marshall(updateFleetRequest.getDisplayName(), DISPLAYNAME_BINDING);\n            protocolMarshaller.marshall(updateFleetRequest.getEnableDefaultInternetAccess(), ENABLEDEFAULTINTERNETACCESS_BINDING);\n            protocolMarshaller.marshall(updateFleetRequest.getDomainJoinInfo(), DOMAINJOININFO_BINDING);\n            protocolMarshaller.marshall(updateFleetRequest.getAttributesToDelete(), ATTRIBUTESTODELETE_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }","label":0}
{"text":"func (s *ListDevicesOutput) SetDevices(v []*DeviceSummary) *ListDevicesOutput {\n\ts.Devices = v\n\treturn s\n}","label":0}
{"text":"public static byte[] copyByteBufToByteArray(ByteBuf input) {\n        byte[] copy;\n        int length = input.readableBytes();\n        if (input.hasArray()) {\n            byte[] inputBytes = input.array();\n            int offset = input.arrayOffset() + input.readerIndex();\n            copy = Arrays.copyOfRange(inputBytes, offset, offset + length);\n            return copy;\n        } else {\n            copy = new byte[length];\n            input.getBytes(input.readerIndex(), copy);\n        }\n        return copy;\n    }","label":0}
{"text":"protected function displayString(StringResource $resource, array $parameters)\n    {\n        extract($parameters, EXTR_SKIP);\n        eval('; ?>' . $resource->getContents() . '<?php ;');\n    }","label":0}
{"text":"static Map<String, Object> sumOfDelta(Map<String, Object> state, Map<String, Object> delta) {\n        InstanceKey instanceId = (InstanceKey) delta.get(\"InstanceKey\");\n        if (instanceId == null) {\n            throw new RuntimeException(\"InstanceKey can not be null\");\n        }\n        for (String key : delta.keySet()) {\n            Object existing = state.get(key);\n            Object current = delta.get(key);\n            if (current instanceof Number) {\n                if (existing == null) {\n                    existing = 0;\n                }\n                Number v = (Number) existing;\n                Number d = (Number) delta.get(key);\n                state.put(key, v.longValue() + d.longValue());\n            } else if (current instanceof NumberList) {\n                if (existing == null) {\n                    state.put(key, current);\n                } else {\n                    state.put(key, ((NumberList) existing).sum((NumberList) current));\n                }\n            } else {\n                Object o = delta.get(key);\n                if (o instanceof String[]) {\n                    String[] vs = (String[]) o;\n                    if (vs.length == 1) {\n                        Object previousAggregateString = state.get(key);\n                        if (previousAggregateString instanceof AggregateString) {\n                            state.put(key, ((AggregateString) previousAggregateString).update(null, vs[0], instanceId));\n                        } else {\n                            state.put(key, AggregateString.create(vs[0], instanceId));\n                        }\n                    } else {\n                        \/\/ it should always be AggregateString here since that's all we add above\n                        AggregateString pas = (AggregateString) state.get(key);\n                        state.put(key, pas.update(vs[0], vs[1], instanceId));\n                    }\n                } else {\n                    state.put(key, String.valueOf(o));\n                }\n\n            }\n        }\n        return state;\n    }","label":0}
{"text":"def write_tree_to_json_tree(destpath, json_tree):\n    \n    parent_dir, _ = os.path.split(destpath)\n    if not os.path.exists(parent_dir):\n        os.makedirs(parent_dir, exist_ok=True)\n    with open(destpath, 'w', encoding='utf8') as json_file:\n        json.dump(json_tree, json_file, indent=2, ensure_ascii=False)","label":0}
{"text":"public String nextCDATA() throws JSONException {\n        char         c;\n        int          i;\n        StringBuffer sb = new StringBuffer();\n        for (;;) {\n            c = next();\n            if (c == 0) {\n                throw syntaxError(\"Unclosed CDATA\");\n            }\n            sb.append(c);\n            i = sb.length() - 3;\n            if (i >= 0 && sb.charAt(i) == ']' &&\n                          sb.charAt(i + 1) == ']' && sb.charAt(i + 2) == '>') {\n                sb.setLength(i);\n                return sb.toString();\n            }\n        }\n    }","label":0}
{"text":"@Override\r\n\tpublic EClass getIfcMaterialProfileSet() {\r\n\t\tif (ifcMaterialProfileSetEClass == null) {\r\n\t\t\tifcMaterialProfileSetEClass = (EClass) EPackage.Registry.INSTANCE.getEPackage(Ifc4Package.eNS_URI)\r\n\t\t\t\t\t.getEClassifiers().get(368);\r\n\t\t}\r\n\t\treturn ifcMaterialProfileSetEClass;\r\n\t}","label":0}
{"text":"protected Iterator<WorkUnit> getWorkUnitIterator(Iterator<Dataset> datasetIterator, String previousDatasetUrnWatermark,\n      @Nullable String previousPartitionUrnWatermark, int maximumWorkUnits) throws IOException {\n    return new DeepIterator(datasetIterator, previousDatasetUrnWatermark, previousPartitionUrnWatermark,\n            maximumWorkUnits);\n  }","label":0}
{"text":"public function addPreserveText($text, $styleFont = null, $styleParagraph = null) {\r\n\t\tif($this->_insideOf == 'footer' || $this->_insideOf == 'header') {\r\n\t\t\t$ptext = new PHPWord_Section_Footer_PreserveText($text, $styleFont, $styleParagraph);\r\n\t\t\t$this->_elementCollection[] = $ptext;\r\n\t\t\treturn $ptext;\r\n\t\t} else {\r\n\t\t\ttrigger_error('addPreserveText only supported in footer\/header.');\r\n\t\t}\r\n\t}","label":0}
{"text":"def partition(list_, columns=2):\n    \n\n    iter_ = iter(list_)\n    columns = int(columns)\n    rows = []\n\n    while True:\n        row = []\n        for column_number in range(1, columns + 1):\n            try:\n                value = six.next(iter_)\n            except StopIteration:\n                pass\n            else:\n                row.append(value)\n\n        if not row:\n            return rows\n        rows.append(row)","label":0}
{"text":"def safe_unit_norm(a):\n    \n    if 1 == len(a.shape):\n        n = np.linalg.norm(a)\n        if n:\n            return a \/ n\n        return a\n\n    norm = np.sum(np.abs(a) ** 2, axis=-1) ** (1. \/ 2)\n\n    # Dividing by a norm of zero will cause a warning to be issued. Set those\n    # values to another number. It doesn't matter what, since we'll be dividing\n    # a vector of zeros by the number, and 0 \/ N always equals 0.\n    norm[norm == 0] = -1e12\n    return a \/ norm[:, np.newaxis]","label":0}
{"text":"func (q *Quotas) PrefixListUsage(prefix string, qo *QueryOptions) ([]*QuotaUsage, *QueryMeta, error) {\n\tif qo == nil {\n\t\tqo = &QueryOptions{Prefix: prefix}\n\t} else {\n\t\tqo.Prefix = prefix\n\t}\n\n\treturn q.ListUsage(qo)\n}","label":0}
{"text":"private function collectColumns(TableDiff $tableDiff)\n    {\n        foreach ($tableDiff->getCreatedColumns() as $column) {\n            $this->createColumnQueries = array_merge(\n                $this->createColumnQueries,\n                $this->platform->getCreateColumnSQLQueries($column, $tableDiff->getNewAsset()->getName())\n            );\n        }\n\n        foreach ($tableDiff->getDroppedColumns() as $column) {\n            $this->dropColumnQueries = array_merge(\n                $this->dropColumnQueries,\n                $this->platform->getDropColumnSQLQueries($column, $tableDiff->getNewAsset()->getName())\n            );\n        }\n\n        foreach ($tableDiff->getAlteredColumns() as $columnDiff) {\n            $this->alterColumnQueries = array_merge(\n                $this->alterColumnQueries,\n                $this->platform->getAlterColumnSQLQueries($columnDiff, $tableDiff->getNewAsset()->getName())\n            );\n        }\n    }","label":0}
{"text":"func defaultLogLevels(r *Ringpop) error {\n\treturn LogLevels(map[string]logging.Level{\n\t\t\"damping\":       logging.Error,\n\t\t\"dissemination\": logging.Error,\n\t\t\"gossip\":        logging.Error,\n\t\t\"join\":          logging.Warn,\n\t\t\"membership\":    logging.Error,\n\t\t\"ring\":          logging.Error,\n\t\t\"suspicion\":     logging.Error,\n\t})(r)\n}","label":0}
{"text":"public function run( $directory, $type ) {\n\n\t\t$data\t= Yii::$app->fileManager->handleFileUpload( $directory, $type );\n\t\t$keys\t= array_keys( $data );\n\n\t\tif( !in_array( 'error', array_keys( $data ) ) ) {\n\n\t\t\t\/\/ Trigger Ajax Success\n\t\t\treturn AjaxUtil::generateSuccess( Yii::$app->coreMessage->getMessage( CoreGlobal::MESSAGE_REQUEST ), $data );\n\t\t}\n\n\t\t\/\/ Trigger Ajax Failure\n\t\treturn AjaxUtil::generateFailure( Yii::$app->coreMessage->getMessage( CoreGlobal::ERROR_REQUEST ), $data );\n\t}","label":0}
{"text":"def _get_or_add_tx_rich(self):\n        \n        dLbl = self._get_or_add_dLbl()\n\n        # having a c:spPr or c:txPr when a c:tx is present causes the \"can't\n        # save\" bug on bubble charts. Remove c:spPr and c:txPr when present.\n        dLbl._remove_spPr()\n        dLbl._remove_txPr()\n\n        return dLbl.get_or_add_tx_rich()","label":0}
{"text":"func (c *Client) MultipleBatch(operations []BatchOperationIndexed, opts ...interface{}) (res MultipleBatchRes, err error) {\n\tbody := map[string][]BatchOperationIndexed{\"requests\": operations}\n\tpath := c.path(\"\/indexes\/*\/batch\")\n\terr = c.transport.Request(&res, http.MethodPost, path, body, call.Write, opts...)\n\tres.wait = c.waitTask\n\treturn\n}","label":0}
{"text":"private static byte[] applyCipher(byte[] keyBytes, byte[] textBytes) {\n        byte[] result = new byte[textBytes.length];\n        for (int i = 0; i < result.length; i++) {\n            int keyPos = i % keyBytes.length;\n            result[i] = (byte) (textBytes[i] ^ keyBytes[keyPos]);\n        }\n        return result;\n    }","label":0}
{"text":"func HasFuzzySearch(ctx context.Context) bool {\n\t_, ok := ctx.Value(ctxKeyFuzzySearch).(bool)\n\treturn ok\n}","label":0}
{"text":"func (m *RateLimit_Action) Validate() error {\n\tif m == nil {\n\t\treturn nil\n\t}\n\n\tswitch m.ActionSpecifier.(type) {\n\n\tcase *RateLimit_Action_SourceCluster_:\n\n\t\t{\n\t\t\ttmp := m.GetSourceCluster()\n\n\t\t\tif v, ok := interface{}(tmp).(interface{ Validate() error }); ok {\n\n\t\t\t\tif err := v.Validate(); err != nil {\n\t\t\t\t\treturn RateLimit_ActionValidationError{\n\t\t\t\t\t\tfield:  \"SourceCluster\",\n\t\t\t\t\t\treason: \"embedded message failed validation\",\n\t\t\t\t\t\tcause:  err,\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\tcase *RateLimit_Action_DestinationCluster_:\n\n\t\t{\n\t\t\ttmp := m.GetDestinationCluster()\n\n\t\t\tif v, ok := interface{}(tmp).(interface{ Validate() error }); ok {\n\n\t\t\t\tif err := v.Validate(); err != nil {\n\t\t\t\t\treturn RateLimit_ActionValidationError{\n\t\t\t\t\t\tfield:  \"DestinationCluster\",\n\t\t\t\t\t\treason: \"embedded message failed validation\",\n\t\t\t\t\t\tcause:  err,\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\tcase *RateLimit_Action_RequestHeaders_:\n\n\t\t{\n\t\t\ttmp := m.GetRequestHeaders()\n\n\t\t\tif v, ok := interface{}(tmp).(interface{ Validate() error }); ok {\n\n\t\t\t\tif err := v.Validate(); err != nil {\n\t\t\t\t\treturn RateLimit_ActionValidationError{\n\t\t\t\t\t\tfield:  \"RequestHeaders\",\n\t\t\t\t\t\treason: \"embedded message failed validation\",\n\t\t\t\t\t\tcause:  err,\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\tcase *RateLimit_Action_RemoteAddress_:\n\n\t\t{\n\t\t\ttmp := m.GetRemoteAddress()\n\n\t\t\tif v, ok := interface{}(tmp).(interface{ Validate() error }); ok {\n\n\t\t\t\tif err := v.Validate(); err != nil {\n\t\t\t\t\treturn RateLimit_ActionValidationError{\n\t\t\t\t\t\tfield:  \"RemoteAddress\",\n\t\t\t\t\t\treason: \"embedded message failed validation\",\n\t\t\t\t\t\tcause:  err,\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\tcase *RateLimit_Action_GenericKey_:\n\n\t\t{\n\t\t\ttmp := m.GetGenericKey()\n\n\t\t\tif v, ok := interface{}(tmp).(interface{ Validate() error }); ok {\n\n\t\t\t\tif err := v.Validate(); err != nil {\n\t\t\t\t\treturn RateLimit_ActionValidationError{\n\t\t\t\t\t\tfield:  \"GenericKey\",\n\t\t\t\t\t\treason: \"embedded message failed validation\",\n\t\t\t\t\t\tcause:  err,\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\tcase *RateLimit_Action_HeaderValueMatch_:\n\n\t\t{\n\t\t\ttmp := m.GetHeaderValueMatch()\n\n\t\t\tif v, ok := interface{}(tmp).(interface{ Validate() error }); ok {\n\n\t\t\t\tif err := v.Validate(); err != nil {\n\t\t\t\t\treturn RateLimit_ActionValidationError{\n\t\t\t\t\t\tfield:  \"HeaderValueMatch\",\n\t\t\t\t\t\treason: \"embedded message failed validation\",\n\t\t\t\t\t\tcause:  err,\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\tdefault:\n\t\treturn RateLimit_ActionValidationError{\n\t\t\tfield:  \"ActionSpecifier\",\n\t\t\treason: \"value is required\",\n\t\t}\n\n\t}\n\n\treturn nil\n}","label":0}
{"text":"func FileExistsOfSize(path string, sz int64) bool {\n\tfi, err := os.Stat(path)\n\n\tif err != nil {\n\t\treturn false\n\t}\n\n\treturn !fi.IsDir() && fi.Size() == sz\n}","label":0}
{"text":"def divide(n, m):\n    \n    avg = int(n \/ m)\n    remain = n - m * avg\n    data = list(itertools.repeat(avg, m))\n    for i in range(len(data)):\n        if not remain:\n            break\n        data[i] += 1\n        remain -= 1\n    return data","label":0}
{"text":"def second_textx_model(self, model_parser):\n        \"\"\"\"\"\"\n\n        if self.grammar_parser.debug:\n            self.grammar_parser.dprint(\"RESOLVING MODEL PARSER: second_pass\")\n\n        self._resolve_rule_refs(self.grammar_parser, model_parser)\n        self._determine_rule_types(model_parser.metamodel)\n        self._resolve_cls_refs(self.grammar_parser, model_parser)\n\n        return model_parser","label":0}
{"text":"static function getInstance($name = null)\n  {\n    if (empty($name)) {\n      $name = get_called_class();\n    }\n    if (!empty(static::$plugins[$name])) {\n      return static::$plugins[$name];\n    }\n    return false;\n  }","label":0}
{"text":"@Override\n  public SimpleOrderedMap<Object> createListOutput(boolean shardRequests, int number) {\n    SimpleOrderedMap<Object> output = super.createListOutput(shardRequests, number);\n    output.add(NAME_SOFTLIMIT, softLimit);\n    output.add(NAME_HARDLIMIT, hardLimit);\n    return output;\n  }","label":0}
{"text":"public NotificationChain basicSetValidationTime(Parameter newValidationTime, NotificationChain msgs) {\n\t\tParameter oldValidationTime = validationTime;\n\t\tvalidationTime = newValidationTime;\n\t\tif (eNotificationRequired()) {\n\t\t\tENotificationImpl notification = new ENotificationImpl(this, Notification.SET, BpsimPackage.TIME_PARAMETERS__VALIDATION_TIME, oldValidationTime, newValidationTime);\n\t\t\tif (msgs == null) msgs = notification; else msgs.add(notification);\n\t\t}\n\t\treturn msgs;\n\t}","label":0}
{"text":"def profile_view(name, **kwargs):\n    \n    ctx = Context(**kwargs)\n    ctx.execute_action('profile:view', **{\n        'storage': ctx.repo.create_secure_service('storage'),\n        'name': name,\n    })","label":0}
{"text":"func ConvertSpaceToModel(appSpace app.Space) space.Space {\n\tmodelSpace := space.Space{}\n\n\tif appSpace.ID != nil {\n\t\tmodelSpace.ID = *appSpace.ID\n\t}\n\tif appSpace.Attributes != nil {\n\t\tif appSpace.Attributes.CreatedAt != nil {\n\t\t\tmodelSpace.CreatedAt = *appSpace.Attributes.CreatedAt\n\t\t}\n\t\tif appSpace.Attributes.UpdatedAt != nil {\n\t\t\tmodelSpace.UpdatedAt = *appSpace.Attributes.UpdatedAt\n\t\t}\n\t\tif appSpace.Attributes.Version != nil {\n\t\t\tmodelSpace.Version = *appSpace.Attributes.Version\n\t\t}\n\t\tif appSpace.Attributes.Name != nil {\n\t\t\tmodelSpace.Name = *appSpace.Attributes.Name\n\t\t}\n\t\tif appSpace.Attributes.Description != nil {\n\t\t\tmodelSpace.Description = *appSpace.Attributes.Description\n\t\t}\n\t}\n\tif appSpace.Relationships != nil && appSpace.Relationships.OwnedBy != nil &&\n\t\tappSpace.Relationships.OwnedBy.Data != nil && appSpace.Relationships.OwnedBy.Data.ID != nil {\n\t\tmodelSpace.OwnerID = *appSpace.Relationships.OwnedBy.Data.ID\n\t}\n\tif appSpace.Relationships != nil && appSpace.Relationships.SpaceTemplate != nil &&\n\t\tappSpace.Relationships.SpaceTemplate.Data != nil {\n\t\tmodelSpace.SpaceTemplateID = appSpace.Relationships.SpaceTemplate.Data.ID\n\t}\n\treturn modelSpace\n}","label":0}
{"text":"def group_by_day(self):\n        \n        hourly_data_by_day = OrderedDict()\n        for d in xrange(1, 366):\n            hourly_data_by_day[d] = []\n        a_per = self.header.analysis_period\n        indx_per_day = 24 * a_per.timestep\n        start_doy = sum(a_per._num_of_days_each_month[:a_per.st_time.month-1]) \\\n            + a_per.st_time.day\n        if not a_per.is_reversed:\n            for i in range(0, len(self._values), indx_per_day):\n                hourly_data_by_day[start_doy] = self._values[i:i + indx_per_day]\n                start_doy += 1\n        else:\n            end_ind = 24 * a_per.timestep * (365 - start_doy)\n            for i in range(0, end_ind + 1, indx_per_day):\n                hourly_data_by_day[start_doy] = self._values[i:i + indx_per_day]\n                start_doy += 1\n            start_doy = 1\n            for i in range(end_ind, len(self._values), indx_per_day):\n                hourly_data_by_day[start_doy] = self._values[i:i + indx_per_day]\n                start_doy += 1\n        return hourly_data_by_day","label":0}
{"text":"public String convertColorFidelityColSubToString(EDataType eDataType, Object instanceValue) {\n\t\treturn instanceValue == null ? null : instanceValue.toString();\n\t}","label":0}
{"text":"public function base_uri(){\n    \t$uri = $this->uri();\n\t\tif (($strpos = strpos($uri, '?')) !== false) \n\t\t\t$uri = substr($uri, 0, $strpos);\n\t\treturn $uri;\n    }","label":0}
{"text":"func (c *Category) Validate() error {\n\tif c.Term == \"\" {\n\t\treturn errors.New(ErrValidation, errorMessages, \"feed category term must not be empty\")\n\t}\n\tif c.Scheme != \"\" {\n\t\tif _, err := url.Parse(c.Scheme); err != nil {\n\t\t\treturn errors.Annotate(err, ErrValidation, errorMessages, \"feed category scheme is not parsable\")\n\t\t}\n\t}\n\treturn nil\n}","label":0}
{"text":"def setup_parser_common(parser):\n    \"\"\"\"\"\"\n    from rez.build_process_ import get_build_process_types\n    from rez.build_system import get_valid_build_systems\n\n    process_types = get_build_process_types()\n    parser.add_argument(\n        \"--process\", type=str, choices=process_types, default=\"local\",\n        help=\"the build process to use (default: %(default)s).\")\n\n    # add build system choices valid for this package\n    package = get_current_developer_package()\n    clss = get_valid_build_systems(os.getcwd(), package=package)\n\n    if clss:\n        if len(clss) == 1:\n            cls_ = clss[0]\n            title = \"%s build system arguments\" % cls_.name()\n            group = parser.add_argument_group(title)\n            cls_.bind_cli(parser, group)\n\n        types = [x.name() for x in clss]\n    else:\n        types = None\n\n    parser.add_argument(\n        \"-b\", \"--build-system\", dest=\"buildsys\", choices=types,\n        help=\"the build system to use. If not specified, it is detected. Set \"\n        \"'build_system' or 'build_command' to specify the build system in the \"\n        \"package itself.\")\n\n    parser.add_argument(\n        \"--variants\", nargs='+', type=int, metavar=\"INDEX\",\n        help=\"select variants to build (zero-indexed).\")\n    parser.add_argument(\n        \"--ba\", \"--build-args\", dest=\"build_args\", metavar=\"ARGS\",\n        help=\"arguments to pass to the build system. Alternatively, list these \"\n        \"after a '--'.\")\n    parser.add_argument(\n        \"--cba\", \"--child-build-args\", dest=\"child_build_args\", metavar=\"ARGS\",\n        help=\"arguments to pass to the child build system, if any. \"\n        \"Alternatively, list these after a second '--'.\")","label":0}
{"text":"private List<String> determineListOfDownloadsToProcess() {\n        List<String> list = new ArrayList<>();\n\n        if (!Config.getBoolConfigProperty(ConfigProperty.DOWNLOAD_DEPENDENCIES)) {\n            return list;\n        }\n\n        \/\/ for IEDriver\n        if (SystemUtils.IS_OS_WINDOWS\n                && !checkForPresenceOf(ConfigProperty.SELENIUM_IEDRIVER_PATH,\n                        SeLionConstants.WEBDRIVER_IE_DRIVER_PROPERTY, SeLionConstants.IE_DRIVER)) {\n            Config.setConfigProperty(ConfigProperty.SELENIUM_IEDRIVER_PATH, SeLionConstants.SELION_HOME_DIR\n                    + SeLionConstants.IE_DRIVER);\n            list.add(\"iedriver\");\n        }\n\n        \/\/ for MicrosoftWebDriver\n        if (SystemUtils.IS_OS_WINDOWS\n                && !checkForPresenceOf(ConfigProperty.SELENIUM_EDGEDRIVER_PATH,\n                        SeLionConstants.WEBDRIVER_EDGE_DRIVER_PROPERTY, SeLionConstants.EDGE_DRIVER)) {\n            Config.setConfigProperty(ConfigProperty.SELENIUM_EDGEDRIVER_PATH, SeLionConstants.SELION_HOME_DIR\n                    + SeLionConstants.EDGE_DRIVER);\n            list.add(\"edgedriver\");\n        }\n\n        \/\/ for chromedriver\n        if (!checkForPresenceOf(ConfigProperty.SELENIUM_CHROMEDRIVER_PATH,\n                SeLionConstants.WEBDRIVER_CHROME_DRIVER_PROPERTY, SeLionConstants.CHROME_DRIVER)) {\n            Config.setConfigProperty(ConfigProperty.SELENIUM_CHROMEDRIVER_PATH, SeLionConstants.SELION_HOME_DIR\n                    + SeLionConstants.CHROME_DRIVER);\n            list.add(\"chromedriver\");\n        }\n\n        \/\/ for phantomjs\n        if (!checkForPresenceOf(ConfigProperty.SELENIUM_PHANTOMJS_PATH,\n                SeLionConstants.WEBDRIVER_PHANTOMJS_DRIVER_PROPERTY, SeLionConstants.PHANTOMJS_DRIVER)) {\n            Config.setConfigProperty(ConfigProperty.SELENIUM_PHANTOMJS_PATH, SeLionConstants.SELION_HOME_DIR\n                    + SeLionConstants.PHANTOMJS_DRIVER);\n            list.add(\"phantomjs\");\n        }\n\n        \/\/ for GeckoDriver\n        if (!checkForPresenceOf(ConfigProperty.SELENIUM_GECKODRIVER_PATH,\n                SeLionConstants.WEBDRIVER_GECKO_DRIVER_PROPERTY, SeLionConstants.GECKO_DRIVER)) {\n            Config.setConfigProperty(ConfigProperty.SELENIUM_GECKODRIVER_PATH, SeLionConstants.SELION_HOME_DIR\n                    + SeLionConstants.GECKO_DRIVER);\n            list.add(\"geckodriver\");\n        }\n\n        return list;\n    }","label":0}
{"text":"private function appendArticlePageConfig(ContainerBuilder $container)\n    {\n        $paths = $container->getParameter('sulu.content.structure.paths');\n        $paths['article_page'] = $this->cloneArticleConfig($paths['article'], 'article_page');\n        $container->setParameter('sulu.content.structure.paths', $paths);\n\n        $defaultTypes = $container->getParameter('sulu.content.structure.default_types');\n        $defaultTypes['article_page'] = $defaultTypes['article'];\n        $container->setParameter('sulu.content.structure.default_types', $defaultTypes);\n    }","label":0}
{"text":"func (p *Package) EncodeJSON(name string, e interface{}) {\n\tif p.err != nil {\n\t\treturn\n\t}\n\n\tb, err := json.Marshal(e)\n\tif err != nil {\n\t\tp.err = err\n\t\treturn\n\t}\n\tr := bytes.NewReader(b)\n\n\tp.Copy(name, r)\n}","label":0}
{"text":"public function limit(int $n): self\n    {\n        return new self(new Limit($this->getIterator(), 0, $n), $this->type);\n    }","label":0}
{"text":"func (b *HogeJSONBuilder) Remove(info *HogePropertyInfo) *HogeJSONBuilder {\n\tdelete(b._properties, info.fieldName)\n\treturn b\n}","label":0}
{"text":"func (z *Person) UnmarshalMsg(bts []byte) (o []byte, err error) {\n\tvar field []byte\n\t_ = field\n\tvar zb0001 uint32\n\tzb0001, bts, err = msgp.ReadMapHeaderBytes(bts)\n\tif err != nil {\n\t\treturn\n\t}\n\tfor zb0001 > 0 {\n\t\tzb0001--\n\t\tfield, bts, err = msgp.ReadMapKeyZC(bts)\n\t\tif err != nil {\n\t\t\treturn\n\t\t}\n\t\tswitch msgp.UnsafeString(field) {\n\t\tcase \"first\":\n\t\t\tz.First, bts, err = msgp.ReadStringBytes(bts)\n\t\t\tif err != nil {\n\t\t\t\treturn\n\t\t\t}\n\t\tcase \"last\":\n\t\t\tz.Last, bts, err = msgp.ReadStringBytes(bts)\n\t\t\tif err != nil {\n\t\t\t\treturn\n\t\t\t}\n\t\tdefault:\n\t\t\tbts, err = msgp.Skip(bts)\n\t\t\tif err != nil {\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t}\n\to = bts\n\treturn\n}","label":0}
{"text":"def collection(name=None):\n    \n    if name is None:\n        collection = Collection.query.get_or_404(1)\n    else:\n        collection = Collection.query.filter(\n            Collection.name == name).first_or_404()\n\n    # TODO add breadcrumbs\n    # breadcrumbs = current_breadcrumbs + collection.breadcrumbs(ln=g.ln)[1:]\n    return render_template([\n        'invenio_collections\/collection_{0}.html'.format(collection.id),\n        'invenio_collections\/collection_{0}.html'.format(slugify(name, '_')),\n        current_app.config['COLLECTIONS_DEFAULT_TEMPLATE']\n    ], collection=collection)","label":0}
{"text":"static ClassifiedTBox classify(OntologyImpl.UnclassifiedOntologyTBox onto) {\n\n\t\tDefaultDirectedGraph<ObjectPropertyExpression, DefaultEdge> objectPropertyGraph =\n\t\t\t\tgetObjectPropertyGraph(onto);\n\t\tEquivalencesDAGImpl<ObjectPropertyExpression> objectPropertyDAG =\n\t\t\t\tEquivalencesDAGImpl.getEquivalencesDAG(objectPropertyGraph);\n\n\t\tDefaultDirectedGraph<DataPropertyExpression, DefaultEdge> dataPropertyGraph =\n\t\t\t\tgetDataPropertyGraph(onto);\n\t\tEquivalencesDAGImpl<DataPropertyExpression> dataPropertyDAG =\n\t\t\t\tEquivalencesDAGImpl.getEquivalencesDAG(dataPropertyGraph);\n\n\t\tEquivalencesDAGImpl<ClassExpression> classDAG =\n\t\t\t\tEquivalencesDAGImpl.getEquivalencesDAG(getClassGraph(onto, objectPropertyGraph, dataPropertyGraph));\n\n\t\tEquivalencesDAGImpl<DataRangeExpression> dataRangeDAG =\n\t\t\t\tEquivalencesDAGImpl.getEquivalencesDAG(getDataRangeGraph(onto, dataPropertyGraph));\n\n\t\tchooseObjectPropertyRepresentatives(objectPropertyDAG);\n\t\tchooseDataPropertyRepresentatives(dataPropertyDAG);\n\t\tchooseClassRepresentatives(classDAG, objectPropertyDAG, dataPropertyDAG);\n\t\tchooseDataRangeRepresentatives(dataRangeDAG, dataPropertyDAG);\n\n\t\tClassifiedTBoxImpl r = new ClassifiedTBoxImpl(\n                onto.classes(),\n                onto.objectProperties(),\n                onto.dataProperties(),\n                onto.annotationProperties(),\n                classDAG,\n                objectPropertyDAG,\n                dataPropertyDAG,\n                dataRangeDAG,\n                onto.getDisjointClassesAxioms(),\n                onto.getDisjointObjectPropertiesAxioms(),\n                onto.getDisjointDataPropertiesAxioms(),\n                onto.getReflexiveObjectPropertyAxioms(),\n                onto.getIrreflexiveObjectPropertyAxioms(),\n                onto.getFunctionalObjectProperties(),\n                onto.getFunctionalDataProperties());\n\/\/\t\tif (equivalenceReduced) {\n\/\/\t\t\tr = getEquivalenceSimplifiedReasoner(r);\n\/\/\t\t}\n\t\treturn r;\n\t}","label":0}
{"text":"func (client *Client) AsyncRequest(asyncCommand AsyncCommand, callback WaitAsyncJobResultFunc) {\n\tctx, cancel := context.WithTimeout(context.Background(), client.Timeout)\n\tdefer cancel()\n\n\tclient.AsyncRequestWithContext(ctx, asyncCommand, callback)\n}","label":0}
{"text":"def enable_category(self, category: str) -> None:\n        \n        for cmd_name in list(self.disabled_commands):\n            func = self.disabled_commands[cmd_name].command_function\n            if hasattr(func, HELP_CATEGORY) and getattr(func, HELP_CATEGORY) == category:\n                self.enable_command(cmd_name)","label":0}
{"text":"def construct_include(self, node):\n        \"\"\"\"\"\"\n\n        filename = os.path.join(self._root, self.construct_scalar(node))\n        filename = os.path.abspath(filename)\n        extension = os.path.splitext(filename)[1].lstrip('.')\n\n        with open(filename, 'r') as f:\n            if extension in ('yaml', 'yml'):\n                return yaml.load(f, Loader=self)\n            else:\n                return ''.join(f.readlines())","label":0}
{"text":"public function getPreAuthorizationUrl(string $preAuthCode = '', string $redirectUri = '', string $state = '')\n    {\n        $redirectUri || $redirectUri = $this->app->config['redirect_uri_install'];\n        $preAuthCode || $preAuthCode = $this->getPreAuthCode()['pre_auth_code'];\n        $state || $state = rand();\n\n        $params = [\n            'suite_id' => $this->app['config']['suite_id'],\n            'redirect_uri' => $redirectUri,\n            'pre_auth_code' => $preAuthCode,\n            'state' => $state,\n        ];\n\n        return 'https:\/\/open.work.weixin.qq.com\/3rdapp\/install?'.http_build_query($params);\n    }","label":0}
{"text":"protected function loadCount(Select $select) : int\n    {\n        $limit  = $select->getLimit();\n        $offset = $select->getOffset();\n\n        $select->offset(0)->limit(null);\n\n        $rows = $this->connection->load(\n            $select->setColumns(['count' => Expr::count()])\n        )->asArray();\n\n        if (empty($rows)) {\n            return 0;\n        }\n\n        $count = (int)$rows[0]['count'] - $offset;\n\n        return $limit !== null ? min($limit, $count) : $count;\n    }","label":0}
{"text":"public static String getPDBLegend() {\n\t\tStringBuilder s = new StringBuilder();\n\t\ts.append(\"<\/pre><\/div>\");\n\t\ts.append(\"          <div class=\\\"subText\\\">\");\n\t\ts.append(\"          <b>Legend:<\/b>\");\n\t\ts.append(\"          <span class=\\\"m\\\">Green<\/span> - identical residues |\");\n\t\ts.append(\"          <span class=\\\"sm\\\">Pink<\/span> - similar residues | \");\n\t\ts.append(\"          <span class=\\\"qg\\\">Blue<\/span> - sequence mismatch |\");\n\t\ts.append(\"          <span class=\\\"dm\\\">Brown<\/span> - insertion\/deletion |\");\n\t\ts.append(\"      <\/div>\");\n\t\ts.append(String.format(\"%n\"));\n\t\treturn s.toString();\n\t}","label":0}
{"text":"func (p *Packfile) GetByOffset(o int64) (plumbing.EncodedObject, error) {\n\thash, err := p.FindHash(o)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn p.objectAtOffset(o, hash)\n}","label":0}
{"text":"public PropertyConstraint all(String propertyName, Constraint[] constraints) {\n        return value(propertyName, all(constraints));\n    }","label":0}
{"text":"static void switchDollarSignPropsToBrackets(Node def, final AbstractCompiler compiler) {\n    checkState(def.isObjectLit() || def.isClassMembers());\n    for (Node keyNode : def.children()) {\n      Node value = keyNode.getFirstChild();\n      if (value != null && value.isFunction()) {\n        NodeUtil.visitPostOrder(\n            value.getLastChild(),\n            new NodeUtil.Visitor() {\n              @Override\n              public void visit(Node n) {\n                if (n.isString()\n                    && n.getString().equals(\"$\")\n                    && n.getParent().isGetProp()\n                    && n.getGrandparent().isGetProp()) {\n                  Node dollarChildProp = n.getGrandparent();\n                  dollarChildProp.setToken(Token.GETELEM);\n                  compiler.reportChangeToEnclosingScope(dollarChildProp);\n                }\n              }\n            });\n      }\n    }\n  }","label":0}
{"text":"public function moveToTrash($id)\n    {\n        $user = AppUser::find($id);\n\n        if (!$user) {\n            return response()->json(null, 404);\n        }\n\n        if (!$user->delete()) {\n            return response()->json(null, 500); \/\/ @codeCoverageIgnore\n        }\n\n        return response()->json(null, 204);\n    }","label":0}
{"text":"def _set_seed(self):\n        \n        if self.flags['SEED'] is not None:\n            tf.set_random_seed(self.flags['SEED'])\n            np.random.seed(self.flags['SEED'])","label":0}
{"text":"def find_by_title(self, title):\n        \n        for entry in self.entries:\n            if entry.title == title:\n                return entry\n        raise EntryNotFoundError(\"Entry not found for title: %s\" % title)","label":0}
{"text":"def dataReceived(self, data):\n        \n        def write(result):\n            print \"Writing %r\" % result\n            self.transport.write(result)\n        d = self.d()\n        d.addCallback(write)  # errors are silently ignored!\n        d.callback(data)","label":0}
{"text":"public function destroy(Group $group)\n    {\n        $ml = $this->guiHandler->getManialink($group, $this);\n        if ($ml) {\n            $this->guiHandler->addToHide($ml, $this);\n        }\n    }","label":0}
{"text":"protected function assertNoSpacing(File $phpCsFile, array $first, array $second): void\n    {\n        $tokens = $phpCsFile->getTokens();\n\n        $lastIndexOfFirst = $first['tagEnd'];\n        $lastLineOfFirst = $tokens[$lastIndexOfFirst]['line'];\n\n        $tagIndexOfSecond = $second['index'];\n        $firstLineOfSecond = $tokens[$tagIndexOfSecond]['line'];\n\n        if ($lastLineOfFirst === $firstLineOfSecond - 1) {\n            return;\n        }\n\n        $fix = $phpCsFile->addFixableError('No newline expected between tags of the same type `' . $first['tag'] . '`', $tagIndexOfSecond, 'NoNewlineBetweenSameType');\n        if (!$fix) {\n            return;\n        }\n\n        $phpCsFile->fixer->beginChangeset();\n\n        for ($i = $first['tagEnd'] + 1; $i < $second['start']; $i++) {\n            if ($tokens[$i]['line'] <= $lastLineOfFirst || $tokens[$i]['line'] >= $firstLineOfSecond) {\n                continue;\n            }\n\n            $phpCsFile->fixer->replaceToken($i, '');\n        }\n\n        $phpCsFile->fixer->endChangeset();\n    }","label":0}
{"text":"public function setDowngraded($downgraded)\n    {\n        if ($downgraded) {\n            $this->_data[Horde_Imap_Client::FETCH_DOWNGRADED] = true;\n        } else {\n            unset($this->_data[Horde_Imap_Client::FETCH_DOWNGRADED]);\n        }\n    }","label":0}
{"text":"public int indexOf(IESigType eSigType, String id) {\n        return items.indexOf(new ESigItem(eSigType, id));\n    }","label":0}
{"text":"func NewRSAOAEPKeyDecrypt(alg jwa.KeyEncryptionAlgorithm, privkey *rsa.PrivateKey) (*RSAOAEPKeyDecrypt, error) {\n\tswitch alg {\n\tcase jwa.RSA_OAEP, jwa.RSA_OAEP_256:\n\tdefault:\n\t\treturn nil, errors.Wrap(ErrUnsupportedAlgorithm, \"invalid RSA OAEP decrypt algorithm\")\n\t}\n\n\treturn &RSAOAEPKeyDecrypt{\n\t\talg:     alg,\n\t\tprivkey: privkey,\n\t}, nil\n}","label":0}
{"text":"public function setSanitizeFilter($filter) {\n        $this->filterName = $this->findFilter($filter);        \n        $this->sanitizeFilter = $filter;\n    }","label":0}
{"text":"public ProcedureRunner getNibbleDeleteProc(String procName,\n                                               Table catTable,\n                                               Column column,\n                                               ComparisonOperation op)\n    {\n        ProcedureRunner pr = m_defaultProcCache.get(procName);\n        if (pr == null) {\n            Procedure newCatProc =\n                    StatementCompiler.compileNibbleDeleteProcedure(\n                            catTable, procName, column, op);\n            VoltProcedure voltProc = new ProcedureRunner.StmtProcedure();\n            pr = new ProcedureRunner(voltProc, m_site, newCatProc);\n            \/\/ this will ensure any created fragment tasks know to load the plans\n            \/\/ for this plan-on-the-fly procedure\n            pr.setProcNameToLoadForFragmentTasks(newCatProc.getTypeName());\n            m_defaultProcCache.put(procName, pr);\n            \/\/ also list nibble delete into default procedures\n            m_defaultProcManager.m_defaultProcMap.put(procName.toLowerCase(), pr.getCatalogProcedure());\n        }\n        return pr;\n    }","label":0}
{"text":"public final void bounce() {\n        ScaleTransition transition = new ScaleTransition(Duration.millis(200), this);\n        setCache(true);\n        setCacheHint(CacheHint.SCALE);\n        transition.setAutoReverse(true);\n        transition.setFromX(1);\n        transition.setToX(.8);\n        transition.setFromY(1);\n        transition.setToY(.8);\n        transition.setCycleCount(2);\n        transition.setOnFinished(evt -> setCache(false));\n        transition.play();\n    }","label":0}
{"text":"private int[] makeUVCoordDeltas(AttributeData map, SortableVertex[] sortVertices) {\n        \/\/ UV coordinate scaling factor\n        float scale = 1.0f \/ map.precision;\n        int vc = sortVertices.length;\n        int prevU = 0, prevV = 0;\n        int[] intUVCoords = new int[vc * CTM_UV_ELEMENT_COUNT];\n        for (int i = 0; i < vc; ++i) {\n            \/\/ Get old UV coordinate index (before vertex sorting)\n            int oldIdx = sortVertices[i].originalIndex;\n\n            \/\/ Convert to fixed point\n            int u = (int) floor(scale * map.values[oldIdx * 2] + 0.5f);\n            int v = (int) floor(scale * map.values[oldIdx * 2 + 1] + 0.5f);\n\n            \/\/ Calculate delta and store it in the converted array. NOTE: Here we rely\n            \/\/ on the fact that vertices are sorted, and usually close to each other,\n            \/\/ which means that UV coordinates should also be close to each other...\n            intUVCoords[i * 2] = u - prevU;\n            intUVCoords[i * 2 + 1] = v - prevV;\n\n            prevU = u;\n            prevV = v;\n        }\n        return intUVCoords;\n    }","label":0}
{"text":"private function removeDir($dir, $rmSelf = true)\n    {\n        $dir = rtrim($dir, '\/');\n        \n        \/\/ \u4e0d\u5904\u7406\u975e\u6cd5\u8def\u5f84\n        $dir = $this->safePath($dir);\n    \n        if(!$dir || !$d = dir($dir)) {\n            return;\n        }\n\n        $do = true;\n        while (false !== ($entry = @$d->read())) {\n            if($entry[0] == '.') {\n                continue;\n            }\n            \n            $path = $dir.'\/'.$entry;\n            if (is_dir($path)) {\n                $do && $do = static::removeDirs($path, true);\n            } else {\n                $do && $do = false !== @unlink($path);\n            }\n        }\n            \n        @$d->close();\n        \n        $rmSelf && @rmdir($dir);\n        \n        return $do;\n    }","label":0}
{"text":"def info(name):\n    '''\n    \n    '''\n    if salt.utils.stringutils.contains_whitespace(name):\n        raise SaltInvocationError('Group name cannot contain whitespace')\n    try:\n        # getgrnam seems to cache weirdly, so don't use it\n        grinfo = next(iter(x for x in grp.getgrall() if x.gr_name == name))\n    except StopIteration:\n        return {}\n    else:\n        return _format_info(grinfo)","label":0}
{"text":"public function up()\n    {\n        Schema::create($this->getTableName(), function (Blueprint $table) {\n            $table->string('id', 191);\n            $table->text('value')->nullable();\n        });\n    }","label":0}
{"text":"func New() *GCNotifier {\n\tn := &gcnotifier{\n\t\tgcCh:   make(chan struct{}, 1),\n\t\tdoneCh: make(chan struct{}, 1),\n\t}\n\t\/\/ sentinel is dead immediately after the call to SetFinalizer\n\truntime.SetFinalizer(&sentinel{gcCh: n.gcCh, doneCh: n.doneCh}, finalizer)\n\t\/\/ n will be dead when the GCNotifier that wraps it (see the return below) is dead\n\truntime.SetFinalizer(n, autoclose)\n\t\/\/ we wrap the internal gcnotifier object in a GCNotifier so that we can\n\t\/\/ safely call autoclose when the GCNotifier becomes unreachable\n\treturn &GCNotifier{n: n}\n}","label":0}
{"text":"public function arrayGet($arr, $key, $fallback = null)\n    {\n        if (is_array($arr)) {\n            if (array_key_exists($key, $arr)) {\n                return $arr[$key];\n            } else {\n                return $fallback;\n            }\n        } else {\n            trigger_error(\"Auth_OpenID::arrayGet (key = \".$key.\") expected \" .\n                          \"array as first parameter, got \" .\n                          gettype($arr), E_USER_WARNING);\n\n            return false;\n        }\n    }","label":0}
{"text":"def num_rings(self):\n\t\t\n\n\t\tnum = self._libinput.libinput_device_tablet_pad_get_num_rings(\n\t\t\tself._handle)\n\t\tif num < 0:\n\t\t\traise AttributeError('This device is not a tablet pad device')\n\t\treturn num","label":0}
{"text":"func (s *RobotSoftwareSuite) SetVersion(v string) *RobotSoftwareSuite {\n\ts.Version = &v\n\treturn s\n}","label":0}
{"text":"def adjustBytesDownloaded(infoHash, adjustment)\n      torrentData = @torrentData[infoHash]\n      if ! torrentData\n        @logger.warn \"Asked to adjust uploaded bytes for a non-existent torrent #{QuartzTorrent.bytesToHex(infoHash)}\"\n        return\n      end\n      \n      runInReactorThread do\n        torrentData.bytesDownloaded += adjustment\n        torrentData.bytesDownloadedDataOnly += adjustment\n      end\n    end","label":0}
{"text":"public StorableIndex<S> unique(boolean unique) {\r\n        if (unique == mUnique) {\r\n            return this;\r\n        }\r\n        return new StorableIndex<S>(mProperties, mDirections, unique, mClustered, false);\r\n    }","label":0}
{"text":"function(eventTags) {\n    if (typeof eventTags === 'object' && !Array.isArray(eventTags) && eventTags !== null) {\n      return true;\n    } else {\n      throw new Error(sprintf(ERROR_MESSAGES.INVALID_EVENT_TAGS, MODULE_NAME));\n    }\n  }","label":0}
{"text":"private void checkAndNotify(final FileStatusEntry parent, final FileStatusEntry[] previous, final Path[] currentPaths)\n      throws IOException {\n\n    int c = 0;\n    final FileStatusEntry[] current =\n        currentPaths.length > 0 ? new FileStatusEntry[currentPaths.length] : FileStatusEntry.EMPTY_ENTRIES;\n    for (final FileStatusEntry previousEntry : previous) {\n      while (c < currentPaths.length && comparator.compare(previousEntry.getPath(), currentPaths[c]) > 0) {\n        current[c] = createPathEntry(parent, currentPaths[c]);\n        doCreate(current[c]);\n        c++;\n      }\n      if (c < currentPaths.length && comparator.compare(previousEntry.getPath(), currentPaths[c]) == 0) {\n        doMatch(previousEntry, currentPaths[c]);\n        checkAndNotify(previousEntry, previousEntry.getChildren(), listPaths(currentPaths[c]));\n        current[c] = previousEntry;\n        c++;\n      } else {\n        checkAndNotify(previousEntry, previousEntry.getChildren(), EMPTY_PATH_ARRAY);\n        doDelete(previousEntry);\n      }\n    }\n\n    for (; c < currentPaths.length; c++) {\n      current[c] = createPathEntry(parent, currentPaths[c]);\n      doCreate(current[c]);\n    }\n    parent.setChildren(current);\n  }","label":0}
{"text":"public void handleControlMessage(SIBUuid8 sourceMEUuid, ControlMessage cMsg)\n    throws SIIncorrectCallException, SIErrorException, SIResourceException\n  {\n    if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled())\n      SibTr.entry(tc, \"handleControlMessage\", new Object[] { sourceMEUuid, cMsg });\n\n    \/\/ Next work out type of ControlMessage and process it\n    ControlMessageType type = cMsg.getControlMessageType();\n\n    \/\/ First check to see whether this is an \"are you flushed\" reply.\n    \/\/ Such messages will not be mappable to a stream ID since we\n    \/\/ don't yet have a stream data structure (that's why we sent the\n    \/\/ query in the first place).  Or...these could be stale messages\n    \/\/ for streams we don't care about.  Either way, handle them\n    \/\/ elsewhere.\n    if(type == ControlMessageType.FLUSHED)\n    {\n      _targetStreamManager.handleFlushedMessage((ControlFlushed)cMsg);\n    }\n    else if(type == ControlMessageType.NOTFLUSHED)\n    {\n      _targetStreamManager.handleNotFlushedMessage((ControlNotFlushed)cMsg);\n    }\n    else if (type == ControlMessageType.SILENCE)\n    {\n      _targetStreamManager.handleSilenceMessage((ControlSilence) cMsg);\n    }\n    else if (type == ControlMessageType.ACKEXPECTED)\n    {\n      _targetStreamManager.handleAckExpectedMessage((ControlAckExpected) cMsg);\n    }\n    else\n    {\n      \/\/ Not a recognised type\n      \/\/ throw exception\n    }\n  }","label":0}
{"text":"public function getProgressLimit()\n    {\n        if ($this->progressLimit === null) {\n            $this->setProgressLimit($this->config->get('concrete.i18n.community_translation.progress_limit', 90));\n        }\n\n        return $this->progressLimit;\n    }","label":0}
{"text":"function() {\n    var allOptions = this.dropdown.options,\n        i=0, j=allOptions.length;\n\n    \/\/ Look for multi-select selections\n    if(lang.isArray(this.value)) {\n        var allValues = this.value,\n            m=0, n=allValues.length,\n            hash = {};\n        \/\/ Reset all selections and stash options in a value hash\n        for(; i<j; i++) {\n            allOptions[i].selected = false;\n            hash[allOptions[i].value] = allOptions[i];\n        }\n        for(; m<n; m++) {\n            if(hash[allValues[m]]) {\n                hash[allValues[m]].selected = true;\n            }\n        }\n    }\n    \/\/ Only need to look for a single selection\n    else {\n        for(; i<j; i++) {\n            if(this.value === allOptions[i].value) {\n                allOptions[i].selected = true;\n            }\n        }\n    }\n}","label":0}
{"text":"public function size($size = null)\n    {\n        if (!in_array($size, self::SIZES)) {\n            Checkers::notice('Button size error, size [' . $size . '] unknown');\n            $this->size = self::SIZE_NORMAL;\n        } else {\n            $this->size = $size;\n        }\n        return $this;\n    }","label":0}
{"text":"def get_all_comments_of_letter(self, letter_id):\n        \n        return self._iterate_through_pages(\n            get_function=self.get_comments_of_letter_per_page,\n            resource=LETTER_COMMENTS,\n            **{'letter_id': letter_id}\n        )","label":0}
{"text":"def set_input_path(input_job)\n      job_name = input_job.job_name\n      input_filter = job_config['input_filter']\n\n      s3_path = \"\/data\/1-parse\/#{job_name}\/segments\/*\/#{input_filter}\"\n      build_s3_uri(s3_path)\n    end","label":0}
{"text":"public function initFromArray(array $data) {\n\n        $this->traitInitFromArray($data);\n\n        if (!empty($data['wire_deposit_information'])) {\n            $this->setWireDepositInformation((new WireDepositPart())->initFromArray($data['wire_deposit_information']));\n        }\n\n        if (!empty($data['sepa_deposit_information'])) {\n            $this->setSepaDepositInformation((new SepaDepositPart())->initFromArray($data['sepa_deposit_information']));\n        }\n\n        return $this;\n\n    }","label":0}
{"text":"def manage_schedule(self, tag, data):\n        '''\n        \n        '''\n        func = data.get('func', None)\n        name = data.get('name', None)\n        schedule = data.get('schedule', None)\n        where = data.get('where', None)\n        persist = data.get('persist', None)\n\n        funcs = {'delete': ('delete_job', (name, persist)),\n                 'add': ('add_job', (schedule, persist)),\n                 'modify': ('modify_job',\n                            (name, schedule, persist)),\n                 'enable': ('enable_schedule', ()),\n                 'disable': ('disable_schedule', ()),\n                 'enable_job': ('enable_job', (name, persist)),\n                 'disable_job': ('disable_job', (name, persist)),\n                 'postpone_job': ('postpone_job', (name, data)),\n                 'skip_job': ('skip_job', (name, data)),\n                 'reload': ('reload', (schedule,)),\n                 'list': ('list', (where,)),\n                 'save_schedule': ('save_schedule', ()),\n                 'get_next_fire_time': ('get_next_fire_time',\n                                        (name,))}\n\n        # Call the appropriate schedule function\n        try:\n            alias, params = funcs.get(func)\n            getattr(self.schedule, alias)(*params)\n        except TypeError:\n            log.error('Function \"%s\" is unavailable in salt.utils.scheduler',\n                      func)","label":0}
{"text":"def edges\n      edge_ary = Array.new(4)\n      edge_ary[0] = FiniteLine.new( base_point, base_point+u_vector)\n      edge_ary[1] = FiniteLine.new( base_point+u_vector, base_point+u_vector+v_vector)\n      edge_ary[2] = FiniteLine.new( base_point+u_vector+v_vector, base_point+v_vector)\n      edge_ary[3] = FiniteLine.new( base_point+v_vector, base_point)\n      return edge_ary\n    end","label":0}
{"text":"private static void encodeTabAnchorTag(FacesContext context, ResponseWriter writer, Tab tab,\n\t\t\tString hiddenInputFieldID, int tabindex, boolean disabled) throws IOException {\n\t\twriter.startElement(\"a\", tab);\n\t\twriter.writeAttribute(\"id\", tab.getClientId().replace(\":\", \"_\") + \"_tab\", \"id\");\n\t\twriter.writeAttribute(\"role\", \"tab\", \"role\");\n\t\tif (tab.isDisabled() || disabled) {\n\t\t\twriter.writeAttribute(\"onclick\", \"event.preventDefault(); return false;\", null);\n\t\t} else {\n\t\t\twriter.writeAttribute(\"data-toggle\", \"tab\", \"data-toggle\");\n\t\t\twriter.writeAttribute(\"href\", \"#\" + tab.getClientId().replace(\":\", \"_\") + \"_pane\", \"href\");\n\t\t\tString onclick = \"document.getElementById('\" + hiddenInputFieldID + \"').value='\" + String.valueOf(tabindex)\n\t\t\t\t\t+ \"';\";\n\t\t\tAJAXRenderer.generateBootsFacesAJAXAndJavaScript(context, tab, writer, \"click\", onclick, false, true);\n\t\t}\n\t\tR.encodeHTML4DHTMLAttrs(writer, tab.getAttributes(), new String[] { \"style\", \"tabindex\" });\n\n\t\tUIComponent iconFacet = tab.getFacet(\"anchor\");\n\t\tif (null != iconFacet) {\n\t\t\ticonFacet.encodeAll(FacesContext.getCurrentInstance());\n\t\t\tif (null != tab.getTitle()) {\n\t\t\t\twriter.writeText(\" \" + tab.getTitle(), null);\n\t\t\t}\n\t\t} else {\n\t\t\twriter.writeText(tab.getTitle(), null);\n\t\t}\n\t\twriter.endElement(\"a\");\n\t}","label":0}
{"text":"@XmlElementDecl(namespace = \"http:\/\/schema.intuit.com\/finance\/v3\", name = \"CreditMemo\", substitutionHeadNamespace = \"http:\/\/schema.intuit.com\/finance\/v3\", substitutionHeadName = \"IntuitObject\")\n    public JAXBElement<CreditMemo> createCreditMemo(CreditMemo value) {\n        return new JAXBElement<CreditMemo>(_CreditMemo_QNAME, CreditMemo.class, null, value);\n    }","label":0}
{"text":"public function execute(HttpManagerInterface $httpManager, array $parameters = [])\n    {\n        $response = $httpManager->request('unblock', 'POST', http_build_query($parameters));\n        $xml      = new \\SimpleXMLElement($response);\n\n        $array = [];\n        foreach ($xml->orders->order as $item) {\n            $array[] = (new Order())\n                ->setAddress(Uniteller\\xml_get($item, 'address'))\n                ->setApprovalCode(Uniteller\\xml_get($item, 'approvalcode'))\n                ->setBankName(Uniteller\\xml_get($item, 'bankname'))\n                ->setBillNumber(Uniteller\\xml_get($item, 'billnumber'))\n                ->setBookingcomId(Uniteller\\xml_get($item, 'bookingcom_id'))\n                ->setBookingcomPincode(Uniteller\\xml_get($item, 'bookingcom_pincode'))\n                ->setCardIdp(Uniteller\\xml_get($item, 'card_idp'))\n                ->setCardHolder(Uniteller\\xml_get($item, 'cardholder'))\n                ->setCardNumber(Uniteller\\xml_get($item, 'cardnumber'))\n                ->setCardType(Uniteller\\xml_get($item, 'cardtype'))\n                ->setComment(Uniteller\\xml_get($item, 'comment'))\n                ->setCurrency(Uniteller\\xml_get($item, 'currency'))\n                ->setCvc2((bool)Uniteller\\xml_get($item, 'cvc2'))\n                ->setDate(Uniteller\\xml_get($item, 'date'))\n                ->setEmail(Uniteller\\xml_get($item, 'email'))\n                ->setEMoneyType(Uniteller\\xml_get($item, 'emoneytype'))\n                ->setEOrderData(Uniteller\\xml_get($item, 'eorderdata'))\n                ->setErrorCode(Uniteller\\xml_get($item, 'error_code'))\n                ->setErrorComment(Uniteller\\xml_get($item, 'error_comment'))\n                ->setFirstName(Uniteller\\xml_get($item, 'firstname'))\n                ->setGdsPaymentPurposeId(Uniteller\\xml_get($item, 'gds_payment_purpose_id'))\n                ->setIData(Uniteller\\xml_get($item, 'idata'))\n                ->setIp(Uniteller\\xml_get($item, 'ipaddress'))\n                ->setLastName(Uniteller\\xml_get($item, 'lastname'))\n                ->setLoanId(Uniteller\\xml_get($item, 'loan_id'))\n                ->setMessage(Uniteller\\xml_get($item, 'message'))\n                ->setMiddleName(Uniteller\\xml_get($item, 'middlename'))\n                ->setNeedConfirm((bool) Uniteller\\xml_get($item, 'need_confirm'))\n                ->setOrderNumber(Uniteller\\xml_get($item, 'ordernumber'))\n                ->setParentOrderNumber(Uniteller\\xml_get($item, 'parent_order_number'))\n                ->setPaymentType(Uniteller\\xml_get($item, 'paymenttype'))\n                ->setPhone(Uniteller\\xml_get($item, 'phone'))\n                ->setPtCode(Uniteller\\xml_get($item, 'pt_code'))\n                ->setRecommendation(Uniteller\\xml_get($item, 'recommendation'))\n                ->setResponseCode(Uniteller\\xml_get($item, 'response_code'))\n                ->setStatus(Uniteller\\xml_get($item, 'status'))\n                ->setTotal(Uniteller\\xml_get($item, 'total'))\n                ->setPacketDate(Uniteller\\xml_get($item, 'packetdate'))\n            ;\n        }\n\n        return $array;\n    }","label":0}
{"text":"func (c *ModelCommandBase) ActiveBranch() (string, error) {\n\tif c._activeBranch != \"\" {\n\t\treturn c._activeBranch, nil\n\t}\n\t\/\/ If we need to look up the model generation, we need to ensure we\n\t\/\/ have access to the model details.\n\tif err := c.maybeInitModel(); err != nil {\n\t\treturn \"\", errors.Trace(err)\n\t}\n\tdetails, err := c.store.ModelByName(c._controllerName, c._modelName)\n\tif err != nil {\n\t\tif !c.runStarted {\n\t\t\treturn \"\", errors.Trace(err)\n\t\t}\n\t\tdetails, err = c.modelDetails(c._controllerName, c._modelName)\n\t\tif err != nil {\n\t\t\treturn \"\", errors.Trace(err)\n\t\t}\n\t}\n\tc._activeBranch = details.ActiveBranch\n\treturn c._activeBranch, nil\n}","label":0}
{"text":"func (s *UserPhoneConfig) SetPhoneType(v string) *UserPhoneConfig {\n\ts.PhoneType = &v\n\treturn s\n}","label":0}
{"text":"public static function build($component, array $options = [])\n    {\n        if (is_array($component)) {\n            return \"(\\n\" . implode(\",\\n\", $component) . \"\\n)\";\n        }\n\n        if ($component->isSubpartition) {\n            return trim('SUBPARTITION ' . $component->name . ' ' . $component->options);\n        }\n\n        $subpartitions = empty($component->subpartitions) ? '' : ' ' . self::build($component->subpartitions);\n\n        return trim(\n            'PARTITION ' . $component->name\n            . (empty($component->type) ? '' : ' VALUES ' . $component->type . ' ' . $component->expr . ' ')\n            . ((! empty($component->options) && ! empty($component->type)) ? '' : ' ') . $component->options . $subpartitions\n        );\n    }","label":0}
{"text":"def span_tokenize_sents(self, strings):\n        \n        raise NotImplementedError(\"span_tokenizer and span_tokenzie_sents not yet implemented. ;)\")\n        for s in strings:\n            yield list(self.span_tokenize(s))","label":0}
{"text":"protected function loadRepo(Repo $repo = null)\n    {\n        if (null == $repo) {\n            return null;\n        }\n        $this->loadExtraInfos($repo);\n        $this->loadPackagistInfos($repo);\n\n        return $repo;\n    }","label":0}
{"text":"def _forward_word(text, pos):\n    \n    while pos < len(text) and not text[pos].isalnum():\n        pos += 1\n    while pos < len(text) and text[pos].isalnum():\n        pos += 1\n    return text, pos","label":0}
{"text":"def parse_qs(self, qs):\n        \n        qs_state = urllib2.urlparse.parse_qs(qs)\n        ret = {}\n        for qs_var, qs_value_list in qs_state.items():\n            if len(qs_value_list) > 1:\n                return None\n\n            ret[qs_var] = qs_value_list[0]\n\n        return ret","label":0}
{"text":"def define_baseargs(self, parser):\n        '''\n        \n        '''\n        parser.add_argument('--name', default=sys.argv[0],\n            help='Name to identify this instance')\n        parser.add_argument('--log-level', default=None,\n            help='Logging level as picked from the logging module')\n        parser.add_argument('--log-format', default=None,\n            # TODO add more formats\n            choices=(\"json\", \"pretty\",),\n            help=(\"Force the format of the logs. By default, if the \"\n                  \"command is from a terminal, print colorful logs. \"\n                  \"Otherwise print json.\"),\n        )\n        parser.add_argument('--log-file', default=None,\n            help='Writes logs to log file if specified, default: %(default)s',\n        )\n        parser.add_argument('--quiet', default=False, action=\"store_true\",\n            help='if true, does not print logs to stderr, default: %(default)s',\n        )\n        parser.add_argument('--metric-grouping-interval', default=None, type=int,\n            help='To group metrics based on time interval ex:10 i.e;(10 sec)',\n        )\n        parser.add_argument('--debug', default=False, action=\"store_true\",\n            help='To run the code in debug mode',\n        )","label":0}
{"text":"func (d *DNSProvider) CleanUp(domain, token, keyAuth string) error {\n\tfqdn, _ := dns01.GetRecord(domain, keyAuth)\n\n\trecords, err := d.getRecords(domain)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"namedotcom: %v\", err)\n\t}\n\n\tfor _, rec := range records {\n\t\tif rec.Fqdn == fqdn && rec.Type == \"TXT\" {\n\t\t\trequest := &namecom.DeleteRecordRequest{\n\t\t\t\tDomainName: domain,\n\t\t\t\tID:         rec.ID,\n\t\t\t}\n\t\t\t_, err := d.client.DeleteRecord(request)\n\t\t\tif err != nil {\n\t\t\t\treturn fmt.Errorf(\"namedotcom: %v\", err)\n\t\t\t}\n\t\t}\n\t}\n\n\treturn nil\n}","label":0}
{"text":"function(query){\n\n                if(query.filter) {\n                    var clone = canReflect.serialize(query);\n                    var filter = query.filter;\n                    clone.filter = {};\n                    clone.filter[prop] = filter;\n                    return clone;\n                } else {\n                    return query;\n                }\n            }","label":0}
{"text":"def _uninstall_signal_handlers(self):\n        \n        signal.signal(signal.SIGINT, signal.SIG_DFL)\n        signal.signal(signal.SIGTERM, signal.SIG_DFL)","label":0}
{"text":"public SQLStatement parse(final boolean useCache) {\n        Optional<SQLStatement> cachedSQLStatement = getSQLStatementFromCache(useCache);\n        if (cachedSQLStatement.isPresent()) {\n            return cachedSQLStatement.get();\n        }\n        LexerEngine lexerEngine = LexerEngineFactory.newInstance(dbType, sql);\n        SQLStatement result = SQLParserFactory.newInstance(dbType, shardingRule, lexerEngine, shardingTableMetaData, sql).parse();\n        if (useCache) {\n            parsingResultCache.put(sql, result);\n        }\n        return result;\n    }","label":0}
{"text":"func generatePassword() string {\n\tvar s string\n\tfor i := 0; i < 100; i++ {\n\t\ts := random.AlphaNum(32)\n\t\tif !strings.ContainsAny(s, random.PossibleNumbers) {\n\t\t\tcontinue\n\t\t}\n\n\t\tif !strings.ContainsAny(s, random.PossibleLowerCase) {\n\t\t\tcontinue\n\t\t}\n\n\t\tif !strings.ContainsAny(s, random.PossibleUpperCase) {\n\t\t\tcontinue\n\t\t}\n\n\t\treturn s\n\t}\n\n\t\/\/ if an acceptable password cannot be generated in 100 tries, give up\n\treturn s\n}","label":0}
{"text":"def clear_authentication(self):\n        \n        self._authentication = None\n        self.access_token = None\n        self.refresh_token = None\n        self.http.cookies.clear()\n        self.user = None","label":0}
{"text":"def pot_ana(r, rho):\n    \n    I = 1.0\n    sigma = 1.0 \/ rho\n    phi = np.divide(I, (2.0 * np.pi * sigma * r))\n    return phi","label":0}
{"text":"public function httpPost(RequestInterface $request, ResponseInterface $response)\n    {\n        $path = $request->getPath();\n\n        \/\/ Only handling xml\n        $contentType = $request->getHeader('Content-Type');\n        if (null === $contentType) {\n            return;\n        }\n        if (false === strpos($contentType, 'application\/xml') && false === strpos($contentType, 'text\/xml')) {\n            return;\n        }\n\n        \/\/ Making sure the node exists\n        try {\n            $node = $this->server->tree->getNodeForPath($path);\n        } catch (DAV\\Exception\\NotFound $e) {\n            return;\n        }\n\n        $requestBody = $request->getBodyAsString();\n\n        \/\/ If this request handler could not deal with this POST request, it\n        \/\/ will return 'null' and other plugins get a chance to handle the\n        \/\/ request.\n        \/\/\n        \/\/ However, we already requested the full body. This is a problem,\n        \/\/ because a body can only be read once. This is why we preemptively\n        \/\/ re-populated the request body with the existing data.\n        $request->setBody($requestBody);\n\n        $message = $this->server->xml->parse($requestBody, $request->getUrl(), $documentType);\n\n        switch ($documentType) {\n            \/\/ Both the DAV:share-resource and CALENDARSERVER:share requests\n            \/\/ behave identically.\n            case '{'.Plugin::NS_CALENDARSERVER.'}share':\n\n                $sharingPlugin = $this->server->getPlugin('sharing');\n                $sharingPlugin->shareResource($path, $message->sharees);\n\n                $response->setStatus(200);\n                \/\/ Adding this because sending a response body may cause issues,\n                \/\/ and I wanted some type of indicator the response was handled.\n                $response->setHeader('X-Sabre-Status', 'everything-went-well');\n\n                \/\/ Breaking the event chain\n                return false;\n\n            \/\/ The invite-reply document is sent when the user replies to an\n            \/\/ invitation of a calendar share.\n            case '{'.Plugin::NS_CALENDARSERVER.'}invite-reply':\n\n                \/\/ This only works on the calendar-home-root node.\n                if (!$node instanceof CalendarHome) {\n                    return;\n                }\n                $this->server->transactionType = 'post-invite-reply';\n\n                \/\/ Getting ACL info\n                $acl = $this->server->getPlugin('acl');\n\n                \/\/ If there's no ACL support, we allow everything\n                if ($acl) {\n                    $acl->checkPrivileges($path, '{DAV:}write');\n                }\n\n                $url = $node->shareReply(\n                    $message->href,\n                    $message->status,\n                    $message->calendarUri,\n                    $message->inReplyTo,\n                    $message->summary\n                );\n\n                $response->setStatus(200);\n                \/\/ Adding this because sending a response body may cause issues,\n                \/\/ and I wanted some type of indicator the response was handled.\n                $response->setHeader('X-Sabre-Status', 'everything-went-well');\n\n                if ($url) {\n                    $writer = $this->server->xml->getWriter();\n                    $writer->contextUri = $request->getUrl();\n                    $writer->openMemory();\n                    $writer->startDocument();\n                    $writer->startElement('{'.Plugin::NS_CALENDARSERVER.'}shared-as');\n                    $writer->write(new LocalHref($url));\n                    $writer->endElement();\n                    $response->setHeader('Content-Type', 'application\/xml');\n                    $response->setBody($writer->outputMemory());\n                }\n\n                \/\/ Breaking the event chain\n                return false;\n\n            case '{'.Plugin::NS_CALENDARSERVER.'}publish-calendar':\n\n                \/\/ We can only deal with IShareableCalendar objects\n                if (!$node instanceof ISharedCalendar) {\n                    return;\n                }\n                $this->server->transactionType = 'post-publish-calendar';\n\n                \/\/ Getting ACL info\n                $acl = $this->server->getPlugin('acl');\n\n                \/\/ If there's no ACL support, we allow everything\n                if ($acl) {\n                    $acl->checkPrivileges($path, '{DAV:}share');\n                }\n\n                $node->setPublishStatus(true);\n\n                \/\/ iCloud sends back the 202, so we will too.\n                $response->setStatus(202);\n\n                \/\/ Adding this because sending a response body may cause issues,\n                \/\/ and I wanted some type of indicator the response was handled.\n                $response->setHeader('X-Sabre-Status', 'everything-went-well');\n\n                \/\/ Breaking the event chain\n                return false;\n\n            case '{'.Plugin::NS_CALENDARSERVER.'}unpublish-calendar':\n\n                \/\/ We can only deal with IShareableCalendar objects\n                if (!$node instanceof ISharedCalendar) {\n                    return;\n                }\n                $this->server->transactionType = 'post-unpublish-calendar';\n\n                \/\/ Getting ACL info\n                $acl = $this->server->getPlugin('acl');\n\n                \/\/ If there's no ACL support, we allow everything\n                if ($acl) {\n                    $acl->checkPrivileges($path, '{DAV:}share');\n                }\n\n                $node->setPublishStatus(false);\n\n                $response->setStatus(200);\n\n                \/\/ Adding this because sending a response body may cause issues,\n                \/\/ and I wanted some type of indicator the response was handled.\n                $response->setHeader('X-Sabre-Status', 'everything-went-well');\n\n                \/\/ Breaking the event chain\n                return false;\n        }\n    }","label":0}
{"text":"def cmd(send, msg, args):\n    \n    parser = arguments.ArgParser(args['config'])\n    parser.add_argument('stock', nargs='?', default=random_stock())\n    try:\n        cmdargs = parser.parse_args(msg)\n    except arguments.ArgumentException as e:\n        send(str(e))\n        return\n    send(gen_stock(cmdargs.stock))","label":0}
{"text":"def move(self, d_xyz):\r\n        \r\n        return Space(Place(self)).move(d_xyz, inplace=False)[0].surface","label":0}
{"text":"public function setOriginal($data)\n    {\n        if (is_array($this->column)) {\n            foreach ($this->column as $key => $column) {\n                $this->original[$key] = array_get($data, $column);\n            }\n\n            return;\n        }\n\n        $this->original = array_get($data, $this->column);\n    }","label":0}
{"text":"func (kl *Kubelet) StartGarbageCollection() {\n\tloggedContainerGCFailure := false\n\tgo wait.Until(func() {\n\t\tif err := kl.containerGC.GarbageCollect(); err != nil {\n\t\t\tklog.Errorf(\"Container garbage collection failed: %v\", err)\n\t\t\tkl.recorder.Eventf(kl.nodeRef, v1.EventTypeWarning, events.ContainerGCFailed, err.Error())\n\t\t\tloggedContainerGCFailure = true\n\t\t} else {\n\t\t\tvar vLevel klog.Level = 4\n\t\t\tif loggedContainerGCFailure {\n\t\t\t\tvLevel = 1\n\t\t\t\tloggedContainerGCFailure = false\n\t\t\t}\n\n\t\t\tklog.V(vLevel).Infof(\"Container garbage collection succeeded\")\n\t\t}\n\t}, ContainerGCPeriod, wait.NeverStop)\n\n\t\/\/ when the high threshold is set to 100, stub the image GC manager\n\tif kl.kubeletConfiguration.ImageGCHighThresholdPercent == 100 {\n\t\tklog.V(2).Infof(\"ImageGCHighThresholdPercent is set 100, Disable image GC\")\n\t\treturn\n\t}\n\n\tprevImageGCFailed := false\n\tgo wait.Until(func() {\n\t\tif err := kl.imageManager.GarbageCollect(); err != nil {\n\t\t\tif prevImageGCFailed {\n\t\t\t\tklog.Errorf(\"Image garbage collection failed multiple times in a row: %v\", err)\n\t\t\t\t\/\/ Only create an event for repeated failures\n\t\t\t\tkl.recorder.Eventf(kl.nodeRef, v1.EventTypeWarning, events.ImageGCFailed, err.Error())\n\t\t\t} else {\n\t\t\t\tklog.Errorf(\"Image garbage collection failed once. Stats initialization may not have completed yet: %v\", err)\n\t\t\t}\n\t\t\tprevImageGCFailed = true\n\t\t} else {\n\t\t\tvar vLevel klog.Level = 4\n\t\t\tif prevImageGCFailed {\n\t\t\t\tvLevel = 1\n\t\t\t\tprevImageGCFailed = false\n\t\t\t}\n\n\t\t\tklog.V(vLevel).Infof(\"Image garbage collection succeeded\")\n\t\t}\n\t}, ImageGCPeriod, wait.NeverStop)\n}","label":0}
{"text":"def moment_magnitude_scalar(moment):\n    '''\n    \n    '''\n    if isinstance(moment, np.ndarray):\n        return (2. \/ 3.) * (np.log10(moment) - 9.05)\n    else:\n        return (2. \/ 3.) * (log10(moment) - 9.05)","label":0}
{"text":"public function updateAbandonedCartDatafields($email, $websiteId, $quoteId, $parentStoreName)\r\n    {\r\n        $website = $this->storeManager->getWebsite($websiteId);\r\n\r\n        \/\/ Load the origin quote\r\n        $quoteModel = $this->magentoQuoteFactory->create()\r\n            ->loadByIdWithoutStore($quoteId);\r\n        $items = $quoteModel->getAllItems();\r\n\r\n        \/\/ Nominate the most expensive item in the cart as the 'abandoned product'\r\n        $nominatedAbandonedCartItem = $this->ddgQuoteFactory->create()\r\n            ->getMostExpensiveItems($items);\r\n\r\n        if ($lastQuoteId = $website->getConfig(\r\n            \\Dotdigitalgroup\\Email\\Helper\\Config::XML_PATH_CONNECTOR_MAPPING_LAST_QUOTE_ID\r\n        )\r\n        ) {\r\n            $data[] = [\r\n                'Key' => $lastQuoteId,\r\n                'Value' => $quoteId,\r\n            ];\r\n        }\r\n        if ($abandonedProductName = $website->getConfig(\r\n            \\Dotdigitalgroup\\Email\\Helper\\Config::XML_PATH_CONNECTOR_ABANDONED_PRODUCT_NAME\r\n        )\r\n        ) {\r\n            $data[] = [\r\n                'Key' => $abandonedProductName,\r\n                'Value' => $nominatedAbandonedCartItem->getName(),\r\n            ];\r\n        }\r\n        if ($storeName = $website->getConfig(\r\n            \\Dotdigitalgroup\\Email\\Helper\\Config::XML_PATH_CONNECTOR_CUSTOMER_STORE_NAME\r\n        )\r\n        ) {\r\n            $data[] = [\r\n                'Key' => $storeName,\r\n                'Value' => $parentStoreName,\r\n            ];\r\n        }\r\n        if ($websiteName = $website->getConfig(\r\n            \\Dotdigitalgroup\\Email\\Helper\\Config::XML_PATH_CONNECTOR_CUSTOMER_WEBSITE_NAME\r\n        )\r\n        ) {\r\n            $data[] = [\r\n                'Key' => $websiteName,\r\n                'Value' => $website->getName(),\r\n            ];\r\n        }\r\n        if (!empty($data)) {\r\n            $client = $this->helper->getWebsiteApiClient($website);\r\n            $client->updateContactDatafieldsByEmail(\r\n                $email,\r\n                $data\r\n            );\r\n        }\r\n    }","label":0}
{"text":"public function edit($id, $data) {\n\t\t$record = $this->read(null, $id);\n\t\tif (!$record) {\n\t\t\tthrow new OutOfBoundsException('view.fail');\n\t\t}\n\n\t\tif (empty($data)) {\n\t\t\treturn;\n\t\t}\n\n\t\t$data[$this->alias] = array_merge(\n\t\t\tarray_diff_key($data[$this->alias], $record[$this->alias]),\n\t\t\tarray_diff($data[$this->alias], $record[$this->alias])\n\t\t);\n\n\t\t$validate = $this->validate;\n\t\tforeach (array_keys($this->validate) as $field) {\n\t\t\tif (!isset($data[$this->alias][$field])) {\n\t\t\t\tunset($this->validate[$field]);\n\t\t\t}\n\t\t}\n\n\t\t$this->id = $id;\n\t\t$this->data = $data;\n\n\t\t$result = $this->save(null, false);\n\n\t\t$this->validate = $validate;\n\t\t$this->data = Hash::merge($record, $result);\n\n\t\tif (!$result) {\n\t\t\treturn false;\n\t\t}\n\n\t\t$this->triggerEvent('Model.' . $this->name . '.afterEdit', $this);\n\t\treturn $data;\n\t}","label":0}
{"text":"func (c *Client) ConfigGet() (*models.DaemonConfiguration, error) {\n\tresp, err := c.Daemon.GetConfig(nil)\n\tif err != nil {\n\t\treturn nil, Hint(err)\n\t}\n\treturn resp.Payload, nil\n}","label":0}
{"text":"def parse(self, expression):\n        \n        if isinstance(expression, (list, dict)):\n            return (True if expression else False, expression)\n        if sys.version_info[0] > 2:\n            self.next = self.tokenize(expression).__next__\n        else:\n            self.next = self.tokenize(expression).next\n        self.token = self.next()\n        return self.expression()","label":0}
{"text":"function getArguments(type, args = {}) {\n  const fields = getTypeFields(type);\n\n  return reduce(fields, (args, field) => {\n    \/\/ Extract non null fields, those are not required in the arguments\n    if (field.type instanceof GraphQLNonNull && field.name !== 'id') {\n      field.type = field.type.ofType;\n    }\n\n    if (field.type instanceof GraphQLScalarType) {\n      args[field.name] = field;\n    }\n\n    return args;\n  }, {\n    ...args,\n    orderBy: {\n      name: 'orderBy',\n      type: getOrderByType(type, fields)\n    }\n  });\n}","label":0}
{"text":"public static function generate(array $segments, $key, $algorithm = 'HS256')\n    {\n        if (count($segments) == 2) {\n            $data = implode('.', $segments);\n\n            if (Algorithm::validate($algorithm)) {\n                list($function, $algorithm) = Algorithm::map($algorithm);\n\n                switch ($function) {\n                    case 'HMAC':\n                        return Hmac::hash($algorithm, $data, $key, true);\n                    case 'hash_hmac':\n                        return hash_hmac($algorithm, $data, $key, true);\n                    case 'openssl':\n                        return openssl_sign($data, $signature, $key, $algorithm);\n                }\n            }\n        }\n\n        return false;\n    }","label":0}
{"text":"def mcube(self, **kwargs):\n        \n        kwargs_copy = self.base_dict.copy()\n        kwargs_copy.update(**kwargs)\n        kwargs_copy['dataset'] = kwargs.get('dataset', self.dataset(**kwargs))\n        kwargs_copy['component'] = kwargs.get(\n            'component', self.component(**kwargs))\n        self._replace_none(kwargs_copy)        \n        localpath = NameFactory.mcube_format.format(**kwargs_copy)\n        if kwargs.get('fullpath', False):\n            return self.fullpath(localpath=localpath)\n        return localpath","label":0}
{"text":"@Override\n\tpublic int compareTo(Column o) {\n\t\tint diff = name.compareToIgnoreCase(o.name);\n\t\tif(diff!=0) return diff;\n\t\treturn name.compareTo(o.name);\n\t}","label":0}
{"text":"def api_method(f):\n    '''\n    \n    '''\n\n    @wraps(f)\n    def wrapped(*args, **kwargs):\n        # Get the instance and call the method\n        algorithm = get_context()\n        if algorithm is None:\n            raise RuntimeError(\n                '{} method must be called during live trading'.format(\n                    f.__name__))\n        return getattr(algorithm, f.__name__)(*args, **kwargs)\n\n    # register api redirection\n    setattr(pylivetrader.api, f.__name__, wrapped)\n    pylivetrader.api.__all__.append(f.__name__)\n    f.is_api_method = True\n\n    return f","label":0}
{"text":"public function getDeliveryTypes()\n    {\n        $oLang = \\OxidEsales\\Eshop\\Core\\Registry::getLang();\n        $iLang = $oLang->getTplLanguage();\n\n        $aDelTypes = [];\n        $oType = new stdClass();\n        $oType->sType = \"a\";      \/\/ amount\n        $oType->sDesc = $oLang->translateString(\"amount\", $iLang);\n        $aDelTypes['a'] = $oType;\n        $oType = new stdClass();\n        $oType->sType = \"s\";      \/\/ Size\n        $oType->sDesc = $oLang->translateString(\"size\", $iLang);\n        $aDelTypes['s'] = $oType;\n        $oType = new stdClass();\n        $oType->sType = \"w\";      \/\/ Weight\n        $oType->sDesc = $oLang->translateString(\"weight\", $iLang);\n        $aDelTypes['w'] = $oType;\n        $oType = new stdClass();\n        $oType->sType = \"p\";      \/\/ Price\n        $oType->sDesc = $oLang->translateString(\"price\", $iLang);\n        $aDelTypes['p'] = $oType;\n\n        return $aDelTypes;\n    }","label":0}
{"text":"public function routeName() {\n        if (!$this->currentRoute) {\n            $request = $this->stack->getCurrentRequest();\n\n            if ($request instanceof Request) {\n                $this->currentRoute = $request->get('_route');\n            }\n        }\n\n        return $this->currentRoute;\n    }","label":0}
{"text":"func (c *mockGCECloud) GetApiIngressStatus(cluster *kops.Cluster) ([]kops.ApiIngressStatus, error) {\n\treturn nil, fmt.Errorf(\"mockGCECloud::GetApiIngressStatus not implemented\")\n}","label":0}
{"text":"public function assertUserGroupWithNameDoesntExistInGroup( $name, $parentGroup )\n    {\n        Assertion::assertFalse(\n            $this->getUserGroupManager()->checkUserGroupExistenceByName( $name, $parentGroup ),\n            \"UserGroup with name '$name' was found in parent group '$parentGroup'.\"\n        );\n    }","label":0}
{"text":"def _elements(self, IDs, func, aspList):\n        \n        res = []\n        for asp in aspList:\n            if (asp in [0, 180]):\n                # Generate func for conjunctions and oppositions\n                if func == self.N:\n                    res.extend([func(ID, asp) for ID in IDs])\n                else:\n                    res.extend([func(ID) for ID in IDs])\n            else:\n                # Generate Dexter and Sinister for others\n                res.extend([self.D(ID, asp) for ID in IDs])\n                res.extend([self.S(ID, asp) for ID in IDs])\n        return res","label":0}
{"text":"func Create(y int, mon time.Month, d, h, m, s, ns int, location string) (*Carbon, error) {\n\tl, err := time.LoadLocation(location)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn create(y, mon, d, h, m, s, ns, l), nil\n}","label":0}
{"text":"static boolean patchShadedLibraryId(InputStream in, OutputStream out, String originalName, String name)\n            throws IOException {\n        byte[] buffer = new byte[8192];\n        int length;\n        \/\/ We read the whole native lib into memory to make it easier to monkey-patch the id.\n        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(in.available());\n\n        while ((length = in.read(buffer)) > 0) {\n            byteArrayOutputStream.write(buffer, 0, length);\n        }\n        byteArrayOutputStream.flush();\n        byte[] bytes = byteArrayOutputStream.toByteArray();\n        byteArrayOutputStream.close();\n\n        final boolean patched;\n        \/\/ Try to patch the library id.\n        if (!patchShadedLibraryId(bytes, originalName, name)) {\n            \/\/ We did not find the Id, check if we used a originalName that has the os and arch as suffix.\n            \/\/ If this is the case we should also try to patch with the os and arch suffix removed.\n            String os = PlatformDependent.normalizedOs();\n            String arch = PlatformDependent.normalizedArch();\n            String osArch = \"_\" + os + \"_\" + arch;\n            if (originalName.endsWith(osArch)) {\n                patched = patchShadedLibraryId(bytes,\n                        originalName.substring(0, originalName.length() - osArch.length()), name);\n            } else {\n                patched = false;\n            }\n        } else {\n            patched = true;\n        }\n        out.write(bytes, 0, bytes.length);\n        return patched;\n    }","label":0}
{"text":"func (s *DeleteClusterInput) SetSkipFinalClusterSnapshot(v bool) *DeleteClusterInput {\n\ts.SkipFinalClusterSnapshot = &v\n\treturn s\n}","label":0}
{"text":"def export_dict(mesh, encoding=None):\n    \n\n    def encode(item, dtype=None):\n        if encoding is None:\n            return item.tolist()\n        else:\n            if dtype is None:\n                dtype = item.dtype\n            return util.array_to_encoded(item, dtype=dtype, encoding=encoding)\n\n    # metadata keys we explicitly want to preserve\n    # sometimes there are giant datastructures we don't\n    # care about in metadata which causes exports to be\n    # extremely slow, so skip all but known good keys\n    meta_keys = ['units', 'file_name', 'file_path']\n    metadata = {k: v for k, v in mesh.metadata.items() if k in meta_keys}\n\n    export = {\n        'metadata': metadata,\n        'faces': encode(mesh.faces),\n        'face_normals': encode(mesh.face_normals),\n        'vertices': encode(mesh.vertices)\n    }\n    if mesh.visual.kind == 'face':\n        export['face_colors'] = encode(mesh.visual.face_colors)\n    elif mesh.visual.kind == 'vertex':\n        export['vertex_colors'] = encode(mesh.visual.vertex_colors)\n\n    return export","label":0}
{"text":"func (jt *jointab) Procure(bldr builder, col *sqlparser.ColName, to int) string {\n\tfrom, joinVar := jt.Lookup(col)\n\t\/\/ If joinVar is empty, generate a unique name.\n\tif joinVar == \"\" {\n\t\tsuffix := \"\"\n\t\ti := 0\n\t\tfor {\n\t\t\tif !col.Qualifier.IsEmpty() {\n\t\t\t\tjoinVar = col.Qualifier.Name.CompliantName() + \"_\" + col.Name.CompliantName() + suffix\n\t\t\t} else {\n\t\t\t\tjoinVar = col.Name.CompliantName() + suffix\n\t\t\t}\n\t\t\tif _, ok := jt.vars[joinVar]; !ok {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\ti++\n\t\t\tsuffix = strconv.Itoa(i)\n\t\t}\n\t\tjt.vars[joinVar] = struct{}{}\n\t\tjt.refs[col.Metadata.(*column)] = joinVar\n\t}\n\tbldr.SupplyVar(from, to, col, joinVar)\n\treturn joinVar\n}","label":0}
{"text":"void setParentConnection(final JmsJcaConnectionImpl connection) {\n\n        if (TraceComponent.isAnyTracingEnabled() && TRACE.isEntryEnabled()) {\n            SibTr.entry(this, TRACE, \"setParentConnection\", connection);\n        }\n\n        _connection = connection;\n\n        if (TraceComponent.isAnyTracingEnabled() && TRACE.isEntryEnabled()) {\n            SibTr.exit(this, TRACE, \"setParentConnection\");\n        }\n\n    }","label":0}
{"text":"public function send($apiMethod, array $params = [], $requestMethod = \"POST\")\n    {\n        $requestMethod = strtoupper($requestMethod);\n\n        $httpRequest        = $this->_createHttpRequest($apiMethod, $params, $requestMethod);\n        $httpResponse       = $httpRequest->send();\n\n        $apiResponse = new ApiResponse([\n            'api'                   => $this,\n            'httpClientRequest'     => $httpRequest,\n            'httpClientResponse'    => $httpResponse,\n            'apiMethod'             => $apiMethod,\n        ]);\n\n        return $apiResponse;\n    }","label":0}
{"text":"@XmlElementDecl(namespace = \"http:\/\/www.w3.org\/1998\/Math\/MathML\", name = \"gt\")\n    public JAXBElement<RelationsType> createGt(RelationsType value) {\n        return new JAXBElement<RelationsType>(_Gt_QNAME, RelationsType.class, null, value);\n    }","label":0}
{"text":"@Override\n    public void initialize(Map<String, Object> puProperties)\n    {\n        reader = new RethinkDBEntityReader(kunderaMetadata);\n        setExternalProperties(puProperties);\n        initializePropertyReader();\n        PersistenceUnitMetadata pum = kunderaMetadata.getApplicationMetadata()\n                .getPersistenceUnitMetadata(getPersistenceUnit());\n\n        Properties pumProps = pum.getProperties();\n\n        if (puProperties != null)\n        {\n            pumProps.putAll(puProperties);\n        }\n\n        String host = pumProps.getProperty(\"kundera.nodes\");\n        String port = pumProps.getProperty(\"kundera.port\");\n\n        if (host == null || port == null)\n        {\n            throw new KunderaException(\"Hostname\/IP or Port is null.\");\n        }\n\n        connection = r.connection().hostname(host).port(Integer.parseInt(port)).connect();\n\n    }","label":0}
{"text":"def _parse_hz(self,hz,Hz,dHzdz):\n        \n        if isinstance(hz,dict):\n            hz= [hz]\n        try:\n            nhz= len(hz)\n        except TypeError:\n            hz= [hz]\n            Hz= [Hz]\n            dHzdz= [dHzdz]\n            nhz= 1\n        if nhz != self._nsigma and nhz != 1:\n            raise ValueError('Number of hz functions needs to be equal to the number of Sigma functions or to 1')\n        if nhz == 1 and self._nsigma > 1:\n            hz= [hz[0] for ii in range(self._nsigma)]\n            if not isinstance(hz[0],dict):\n                Hz= [Hz[0] for ii in range(self._nsigma)]\n                dHzdz= [dHzdz[0] for ii in range(self._nsigma)]\n        self._Hz= Hz\n        self._hz= hz\n        self._dHzdz= dHzdz       \n        self._nhz= len(self._hz)\n        if isinstance(hz[0],dict):\n            self._hz_dict= copy.copy(hz)\n            self._parse_hz_dict()\n        else:\n            self._hz_dict= None\n        return None","label":0}
{"text":"def peek(self, deserialized_tx):\n        \n        self.batch_id = deserialized_tx.object.batch_id\n        self.prev_batch_id = deserialized_tx.object.prev_batch_id\n        self.producer = deserialized_tx.object.producer\n        if self.batch_history.exists(batch_id=self.batch_id):\n            raise BatchAlreadyProcessed(\n                f\"Batch {self.batch_id} has already been processed\"\n            )\n        if self.prev_batch_id != self.batch_id:\n            if not self.batch_history.exists(batch_id=self.prev_batch_id):\n                raise InvalidBatchSequence(\n                    f\"Invalid import sequence. History does not exist for prev_batch_id. \"\n                    f\"Got file='{self.filename}', prev_batch_id=\"\n                    f\"{self.prev_batch_id}, batch_id={self.batch_id}.\"\n                )","label":0}
{"text":"def Search(self,key):\n\t\t\n\n\t\tresults = []\n\t\tfor group in self.groups:\n\t\t\tif group.id.lower().find(key.lower()) != -1:  results.append(group)\n\t\t\telif group.name.lower().find(key.lower()) != -1:  results.append(group)\n\t\t\telif group.description.lower().find(key.lower()) != -1:  results.append(group)\n\n\t\treturn(results)","label":0}
{"text":"protected function prepareOffset(int $offset, int $total): int\n    {\n        if ($offset < -$total || $offset > $total - 1) {\n            $message = sprintf('Offset (%d) out of range[%d, %d]', $offset, -$total, $total - 1);\n            throw new DomainException($message);\n        }\n\n        if ($offset < 0) {\n            $offset += $total;\n        }\n\n        return $offset;\n    }","label":0}
{"text":"func (s *GlobalConfiguration) SetSupportLowFramerateInputs(v string) *GlobalConfiguration {\n\ts.SupportLowFramerateInputs = &v\n\treturn s\n}","label":0}
{"text":"def page(self, course):\n        \n        data = list(self.database.user_tasks.aggregate(\n            [\n                {\n                    \"$match\":\n                        {\n                            \"courseid\": course.get_id(),\n                            \"username\": {\"$in\": self.user_manager.get_course_registered_users(course, False)}\n                        }\n                },\n                {\n                    \"$group\":\n                        {\n                            \"_id\": \"$taskid\",\n                            \"viewed\": {\"$sum\": 1},\n                            \"attempted\": {\"$sum\": {\"$cond\": [{\"$ne\": [\"$tried\", 0]}, 1, 0]}},\n                            \"attempts\": {\"$sum\": \"$tried\"},\n                            \"succeeded\": {\"$sum\": {\"$cond\": [\"$succeeded\", 1, 0]}}\n                        }\n                }\n            ]))\n\n        # Load tasks and verify exceptions\n        files = self.task_factory.get_readable_tasks(course)\n        output = {}\n        errors = []\n        for task in files:\n            try:\n                output[task] = course.get_task(task)\n            except Exception as inst:\n                errors.append({\"taskid\": task, \"error\": str(inst)})\n        tasks = OrderedDict(sorted(list(output.items()), key=lambda t: (t[1].get_order(), t[1].get_id())))\n\n        # Now load additional informations\n        result = OrderedDict()\n        for taskid in tasks:\n            result[taskid] = {\"name\": tasks[taskid].get_name(self.user_manager.session_language()), \"viewed\": 0, \"attempted\": 0, \"attempts\": 0, \"succeeded\": 0,\n                              \"url\": self.submission_url_generator(taskid)}\n        for entry in data:\n            if entry[\"_id\"] in result:\n                result[entry[\"_id\"]][\"viewed\"] = entry[\"viewed\"]\n                result[entry[\"_id\"]][\"attempted\"] = entry[\"attempted\"]\n                result[entry[\"_id\"]][\"attempts\"] = entry[\"attempts\"]\n                result[entry[\"_id\"]][\"succeeded\"] = entry[\"succeeded\"]\n        if \"csv\" in web.input():\n            return make_csv(result)\n        return self.template_helper.get_renderer().course_admin.task_list(course, result, errors)","label":0}
{"text":"public function insert(array $values) {\n        if (!$this->checkExists()) return false;\n\n        $this->current = self::OP_INSERT;\n        $this->query = 'INSERT INTO `' . $this->name . '` (';\n        $columns = array();\n        $noOfColumns = 0;\n        foreach (array_values($values) as $ky => $row) {\n            $rowArray = $this->checkModel($row, true);\n            if ($ky === 0) $noOfColumns = count($rowArray);\n\n            if (count($rowArray) !== $noOfColumns) {\n                throw new Exception('All rows must have the same number of columns in table \"' . $this->name .\n                '\". Set others as null');\n            }\n\n            if (count($rowArray) === 0)\n                    throw new Exception('You cannot insert an empty row into table \"' . $this->name . '\"');\n\n            foreach ($rowArray as $column => &$value) {\n                if (empty($value) && $value != 0) continue;\n\n                $column = Util::camelTo_($column);\n\n                if (!in_array($column, $columns)) $columns[] = $column;\n                $this->values[$ky][':' . $column] = $value;\n            }\n        }\n\n        $this->query .= '`' . join('`, `', $columns) . '`';\n        $this->query .= ') VALUES (';\n        $this->query .= ':' . join(', :', $columns);\n        $this->query .= ')';\n\n        $this->multiple = true;\n        $this->doPost = self::OP_INSERT;\n        if ($this->delayExecute) {\n            return $this;\n        }\n\n        return $this->execute();\n    }","label":0}
{"text":"private String formatWithStatementLocation(String format, StatementInfo statementInfo, Object... args) {\n        return format(format, args) + format(\" [%s:%s]\", statementInfo.getSourceFileName(), statementInfo.getLineNumber());\n    }","label":0}
{"text":"def _validate_auths(self, path, obj, app):\n        \n        errs = []\n\n        for k, v in six.iteritems(obj.authorizations or {}):\n            if k not in app.raw.authorizations:\n                errs.append('auth {0} not found in resource list'.format(k))\n\n            if app.raw.authorizations[k].type in ('basicAuth', 'apiKey') and v != []:\n                errs.append('auth {0} should be an empty list'.format(k))\n\n        return path, obj.__class__.__name__, errs","label":0}
{"text":"func NewPlainLogger(name string, l LevelInfo) (Sender, error) {\n\treturn setup(MakePlainLogger(), name, l)\n}","label":0}
{"text":"function WorkerPool(pool_size, file_name) {\n  events.EventEmitter.call(this);\n\n  this._pool_size = pool_size;\n  this._file_name = file_name;\n\n  this._workers = []; \/\/ All the available workers\n  this._active_workers = []; \/\/ Active workers\n  this._idle_workers = []; \/\/ Idle workers\n  this._pending_removal_workers = []; \/\/ Workers which are pending to be removed\n\n  this._pending_jobs = [];\n  this._is_terminated = false;\n  this._pending_jobs_timeout_id = null;\n\n  this._initialize();\n}","label":0}
{"text":"public function debug( $message, $group = false ) {\n\t\tstatic $start_time = null;\n\t\tif ( null === $start_time ) {\n\t\t\t$start_time = microtime( true );\n\t\t}\n\t\t$debug = $this->get_runner()->config['debug'];\n\t\tif ( ! $debug ) {\n\t\t\treturn;\n\t\t}\n\t\tif ( true !== $debug && $group !== $debug ) {\n\t\t\treturn;\n\t\t}\n\t\t$time   = round( microtime( true ) - ( defined( 'WP_CLI_START_MICROTIME' ) ? WP_CLI_START_MICROTIME : $start_time ), 3 );\n\t\t$prefix = 'Debug';\n\t\tif ( $group && true === $debug ) {\n\t\t\t$prefix = 'Debug (' . $group . ')';\n\t\t}\n\t\t$this->_line( \"$message ({$time}s)\", $prefix, '%B', STDERR );\n\t}","label":0}
{"text":"def save(self, role, commit=True):\n        \n        self.is_instance(role)\n\n        schema = RoleSchema()\n        valid = schema.process(role)\n        if not valid:\n            return valid\n\n        db.session.add(role)\n        if commit:\n            db.session.commit()\n\n        events.role_saved_event.send(role)\n        return role","label":0}
{"text":"def extract_value(self, data):\n        \n        if self.name not in data and not self.allow_missing:\n            raise exceptions.FieldNotFound('Field {} is missing from request'.format(self.name))\n        \n        if self.multiple_inputs:\n            self.value = []\n            for value in data.getlist(self.name):\n                if self.strip_value:\n                    value = value.strip()\n                if value == '' and self.convert_empty_to_none:\n                    value = None\n\n                self.value.append(value)\n        else:\n            self.value = data.get(self.name)\n            if self.value is not None:\n                if self.strip_value:\n                    self.value = self.value.strip()\n                if self.value == '' and self.convert_empty_to_none:\n                    self.value = None\n\n        # Convert the value to the correct data type\n        self.convert_value()","label":0}
{"text":"public UnsupportedOperationException asJDKException() {\n        UnsupportedOperationException e = new UnsupportedOperationException(getMessage()) {\n            @Override\n            public synchronized Throwable fillInStackTrace() {\n                return this;\n            }\n        };\n        e.setStackTrace(getStackTrace());\n        return e;\n    }","label":0}
{"text":"public static function routes($callback = null, array $options = [])\n    {\n        $callback = $callback ?: function ($router) {\n            $router->all();\n        };\n\n        $defaultOptions = [\n            'prefix' => 'oauth',\n            'namespace' => '\\MoeenBasra\\LaravelPassportMongoDB\\Http\\Controllers',\n        ];\n\n        $options = array_merge($defaultOptions, $options);\n\n        Route::group($options, function ($router) use ($callback) {\n            $callback(new RouteRegistrar($router));\n        });\n    }","label":0}
{"text":"public static void marshallByteArray(byte[] array, ObjectOutput out) throws IOException {\n      final int size = array == null ? NULL_VALUE : array.length;\n      marshallSize(out, size);\n      if (size <= 0) {\n         return;\n      }\n      out.write(array);\n   }","label":0}
{"text":"static Class<?> getSetterType(Method setter) {\n\t\tClass<?>[] parameterTypes = setter.getParameterTypes();\n\t\tif (parameterTypes.length != 1) {\n\t\t\tthrow new BeanUtilsException(\n\t\t\t\t\tString.format(\"Method %s has %d parameters and cannot be a setter\", setter.getName(), parameterTypes.length));\n\t\t}\n\n\t\treturn parameterTypes[0];\n\t}","label":0}
{"text":"function(event, args) {\n      var size = args[0];\n\t\t\/\/ TODO: do not hardcode those sizes !!\n      WireIt.sn(this.bodyEl, null, {width: (size[0]-14)+\"px\", height: (size[1]-( this.ddHandle ? 44 : 14) )+\"px\"});\n   }","label":0}
{"text":"func NewNotFoundError(entity string, value string) NotFoundError {\n\treturn NotFoundError{entity: entity, key: \"id\", value: value}\n}","label":0}
{"text":"public function setORMParameters($table, $view, $primaryKey)\n    {\n        $this->ORMParameters['table'] = $table;\n        $this->ORMParameters['view'] = $view;\n        $this->ORMParameters['primaryKey'] = is_array($primaryKey) ? $primaryKey : [$primaryKey];\n    \n    }","label":0}
{"text":"@Override\r\n\tpublic EClass getIfcMeasureValue() {\r\n\t\tif (ifcMeasureValueEClass == null) {\r\n\t\t\tifcMeasureValueEClass = (EClass) EPackage.Registry.INSTANCE.getEPackage(Ifc4Package.eNS_URI)\r\n\t\t\t\t\t.getEClassifiers().get(1141);\r\n\t\t}\r\n\t\treturn ifcMeasureValueEClass;\r\n\t}","label":0}
{"text":"public static Document getOwnerDocument()\n   {\n      Document doc = documentThreadLocal.get();\n      if (doc == null)\n      {\n         doc = getDocumentBuilder().newDocument();\n         documentThreadLocal.set(doc);\n      }\n      return doc;\n   }","label":0}
{"text":"public static final <A> Collection<A> toConcurrentLazyCollection(final Stream<A> stream) {\n        return toConcurrentLazyCollection(stream.iterator());\n    }","label":0}
{"text":"public void marshall(ListResolversByFunctionRequest listResolversByFunctionRequest, ProtocolMarshaller protocolMarshaller) {\n\n        if (listResolversByFunctionRequest == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(listResolversByFunctionRequest.getApiId(), APIID_BINDING);\n            protocolMarshaller.marshall(listResolversByFunctionRequest.getFunctionId(), FUNCTIONID_BINDING);\n            protocolMarshaller.marshall(listResolversByFunctionRequest.getNextToken(), NEXTTOKEN_BINDING);\n            protocolMarshaller.marshall(listResolversByFunctionRequest.getMaxResults(), MAXRESULTS_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }","label":0}
{"text":"public static void main(String[] pstrArgs) \r\n    {\r\n        IniFile objINI = null;\r\n        String  strFile = null;\r\n\r\n        if (pstrArgs.length == 0) return;\r\n\r\n        strFile = pstrArgs[0];\r\n        \/\/ Following call will load the strFile if one exists.\r\n        objINI = new IniFile(strFile);\r\n\r\n\/\/        objINI.addSection(\"QADatabase\", \"QA database connection details\\nUsed for QA Testing\");\r\n\/\/        objINI.setStringProperty(\"QADatabase\", \"SID\", \"ORCL\", null);\r\n\/\/        objINI.setStringProperty(\"QADatabase\", \"UserId\", \"System\", null);\r\n\/\/        objINI.setStringProperty(\"QADatabase\", \"Password\", \"Manager\", null);\r\n\/\/        objINI.setStringProperty(\"QADatabase\", \"HostName\", \"DBServer\", null);\r\n\/\/        objINI.setIntegerProperty(\"QADatabase\", \"Port\", 1521, null);\r\n\/\/        objINI.setStringProperty(\"QADatabase\", \"OracleHome\", \"%ORACLE_HOME%\", null);\r\n\/\/        \r\n        \/\/ objINI.setSectionComments(\"Folders\", \"Directories where generated files are stored\");\r\n        objINI.setStringProperty(\"Folders\", \"folder1\", \"G:\\\\Temp\", null);\r\n        objINI.setStringProperty(\"Folders\", \"folder2\", \"G:\\\\Temp\\\\Backup\", null);\r\n\r\n        \/\/ Save changes back to strFile.\r\n        objINI.save();\r\n        objINI = null;\r\n    }","label":0}
{"text":"public function setError($param, $message, $translate = false, $translationParams = array())\n    {\n        $this->errors[] = new FormError($param, $message, $translate, $translationParams);\n\n        \/\/ Call isValid to update valid status in restore data handlers\n        $this->isValid();\n    }","label":0}
{"text":"func (z *Big) Neg(x *Big) *Big {\n\tif debug {\n\t\tx.validate()\n\t}\n\tif !z.invalidContext(z.Context) && !z.checkNaNs(x, x, negation) {\n\t\txform := x.form \/\/ copy in case z == x\n\t\tz.copyAbs(x)\n\t\tif !z.IsFinite() || z.compact != 0 || z.Context.RoundingMode == ToNegativeInf {\n\t\t\tz.form = xform ^ signbit\n\t\t}\n\t}\n\treturn z.Context.round(z)\n}","label":0}
{"text":"protected static void fireArrayEndEvent( JsonConfig jsonConfig ) {\n      if( jsonConfig.isEventTriggeringEnabled() ){\n         for( Iterator listeners = jsonConfig.getJsonEventListeners()\n               .iterator(); listeners.hasNext(); ){\n            JsonEventListener listener = (JsonEventListener) listeners.next();\n            try{\n               listener.onArrayEnd();\n            }catch( RuntimeException e ){\n               log.warn( e );\n            }\n         }\n      }\n   }","label":0}
{"text":"public int pointToPosition(int x, int y) {\n        Rect frame = mTouchFrame;\n        if (frame == null) {\n            mTouchFrame = new Rect();\n            frame = mTouchFrame;\n        }\n\n        final int count = getChildCount();\n        for (int i = count - 1; i >= 0; i--) {\n            View child = getChildAt(i);\n            if (child.getVisibility() == View.VISIBLE) {\n                child.getHitRect(frame);\n                if (frame.contains(x, y)) {\n                    return mFirstPosition + i;\n                }\n            }\n        }\n        return INVALID_POSITION;\n    }","label":0}
{"text":"func (s *Gateway) SetAmazonSideAsn(v int64) *Gateway {\n\ts.AmazonSideAsn = &v\n\treturn s\n}","label":0}
{"text":"public boolean isStopWord(HString text) {\n    if (text == null) {\n      return true;\n    } else if (text.isInstance(Types.TOKEN)) {\n      return isTokenStopWord(Cast.as(text));\n    }\n    return text.tokens().stream().allMatch(this::isTokenStopWord);\n  }","label":0}
{"text":"public function sismembers($key, $member) {\n        try {\n            return $this->getRedis()->sIsMember($key, $member);\n        } catch (RedisException $ex) {\n            throw new ConnectException();\n        }\n    }","label":0}
{"text":"def analysis(analysis_id):\n    \"\"\"\"\"\"\n    analysis_obj = store.analysis(analysis_id)\n    if analysis_obj is None:\n        return abort(404)\n\n    if request.method == 'PUT':\n        analysis_obj.update(request.json)\n        store.commit()\n\n    data = analysis_obj.to_dict()\n    data['failed_jobs'] = [job_obj.to_dict() for job_obj in analysis_obj.failed_jobs]\n    data['user'] = analysis_obj.user.to_dict() if analysis_obj.user else None\n    return jsonify(**data)","label":0}
{"text":"@SuppressWarnings(\"WeakerAccess\")\n  public Cluster resizeCluster(String instanceId, String clusterId, int numServeNodes) {\n    return ApiExceptions.callAndTranslateApiException(\n        resizeClusterAsync(instanceId, clusterId, numServeNodes));\n  }","label":0}
{"text":"def get_params(self, *args, **kwargs):\n        '''\n        \n        '''\n        kwargs.update(self._data)\n        if args and kwargs:\n            raise ValueError('Cannot mix positional and named parameters')\n        if args:\n            return list(args)\n        else:\n            return kwargs","label":0}
{"text":"function setOption($name, $value) \n    {\n        $availableOptions = array('errorHandlingAPIBreak', 'hashedDirectoryUmask', 'hashedDirectoryLevel', 'automaticCleaningFactor', 'automaticSerialization', 'fileNameProtection', 'memoryCaching', 'onlyMemoryCaching', 'memoryCachingLimit', 'cacheDir', 'caching', 'lifeTime', 'fileLocking', 'writeControl', 'readControl', 'readControlType', 'pearErrorMode', 'hashedDirectoryGroup', 'cacheFileMode', 'cacheFileGroup');\n        if (in_array($name, $availableOptions)) {\n            $property = '_'.$name;\n            $this->$property = $value;\n        }\n    }","label":0}
{"text":"def combine_last_two_dimensions(x):\n  \n  x_shape = common_layers.shape_list(x)\n  a, b = x_shape[-2:]\n  return tf.reshape(x, x_shape[:-2] + [a * b])","label":0}
{"text":"function buildErrorObject(params){\n  params = params || {};\n\n  \/\/If the userDetail is already set, not building the error object again.\n  if(params.err && params.err.userDetail){\n    return params;\n  }\n\n  var err = params.err || {message: \"Unexpected Error\"};\n  var msg = params.msg || params.err.message || \"Unexpected Error\";\n  var httpCode = params.httpCode || 500;\n  \/\/Custom Error Code\n  var code = params.code || \"FH-MBAAS-ERROR\";\n\n  var response = {\n    errorFields: {\n      userDetail: msg,\n      systemDetail: msg + ' - ' + util.inspect(err),\n      code: code\n    },\n    httpCode: httpCode\n  };\n  if (params.explain) {\n    response.errorFields.explain = params.explain;\n  }\n\n  return response;\n}","label":0}
{"text":"public void setStarttime(Object starttime) throws PageException {\n\tif (StringUtil.isEmpty(starttime)) return;\n\tthis.starttime = DateCaster.toTime(pageContext.getTimeZone(), starttime);\n    }","label":0}
{"text":"func (s *CompareFacesInput) SetSimilarityThreshold(v float64) *CompareFacesInput {\n\ts.SimilarityThreshold = &v\n\treturn s\n}","label":0}
{"text":"private static String getText(Element element) {\n    if (element.getFirstChild() == null) {\n      return \"\";\n    }\n    return ((Text) element.getFirstChild()).getData().trim();\n  }","label":0}
{"text":"def set_cache_dir(directory):\n    \n    global cache_dir\n\n    if directory is None:\n        cache_dir = None\n        return\n\n    if not os.path.exists(directory):\n        os.makedirs(directory)\n    if not os.path.isdir(directory):\n        raise ValueError(\"not a directory\")\n    cache_dir = directory","label":0}
{"text":"private function _readExternalBook()\r\n\t{\r\n\t\t$length = self::_GetInt2d($this->_data, $this->_pos + 2);\r\n\t\t$recordData = $this->_readRecordData($this->_data, $this->_pos + 4, $length);\r\n\r\n\t\t\/\/ move stream pointer to next record\r\n\t\t$this->_pos += 4 + $length;\r\n\r\n\t\t\/\/ offset within record data\r\n\t\t$offset = 0;\r\n\r\n\t\t\/\/ there are 4 types of records\r\n\t\tif (strlen($recordData) > 4) {\r\n\t\t\t\/\/ external reference\r\n\t\t\t\/\/ offset: 0; size: 2; number of sheet names ($nm)\r\n\t\t\t$nm = self::_GetInt2d($recordData, 0);\r\n\t\t\t$offset += 2;\r\n\r\n\t\t\t\/\/ offset: 2; size: var; encoded URL without sheet name (Unicode string, 16-bit length)\r\n\t\t\t$encodedUrlString = self::_readUnicodeStringLong(substr($recordData, 2));\r\n\t\t\t$offset += $encodedUrlString['size'];\r\n\r\n\t\t\t\/\/ offset: var; size: var; list of $nm sheet names (Unicode strings, 16-bit length)\r\n\t\t\t$externalSheetNames = array();\r\n\t\t\tfor ($i = 0; $i < $nm; ++$i) {\r\n\t\t\t\t$externalSheetNameString = self::_readUnicodeStringLong(substr($recordData, $offset));\r\n\t\t\t\t$externalSheetNames[] = $externalSheetNameString['value'];\r\n\t\t\t\t$offset += $externalSheetNameString['size'];\r\n\t\t\t}\r\n\r\n\t\t\t\/\/ store the record data\r\n\t\t\t$this->_externalBooks[] = array(\r\n\t\t\t\t'type' => 'external',\r\n\t\t\t\t'encodedUrl' => $encodedUrlString['value'],\r\n\t\t\t\t'externalSheetNames' => $externalSheetNames,\r\n\t\t\t);\r\n\r\n\t\t} elseif (substr($recordData, 2, 2) == pack('CC', 0x01, 0x04)) {\r\n\t\t\t\/\/ internal reference\r\n\t\t\t\/\/ offset: 0; size: 2; number of sheet in this document\r\n\t\t\t\/\/ offset: 2; size: 2; 0x01 0x04\r\n\t\t\t$this->_externalBooks[] = array(\r\n\t\t\t\t'type' => 'internal',\r\n\t\t\t);\r\n\t\t} elseif (substr($recordData, 0, 4) == pack('vCC', 0x0001, 0x01, 0x3A)) {\r\n\t\t\t\/\/ add-in function\r\n\t\t\t\/\/ offset: 0; size: 2; 0x0001\r\n\t\t\t$this->_externalBooks[] = array(\r\n\t\t\t\t'type' => 'addInFunction',\r\n\t\t\t);\r\n\t\t} elseif (substr($recordData, 0, 2) == pack('v', 0x0000)) {\r\n\t\t\t\/\/ DDE links, OLE links\r\n\t\t\t\/\/ offset: 0; size: 2; 0x0000\r\n\t\t\t\/\/ offset: 2; size: var; encoded source document name\r\n\t\t\t$this->_externalBooks[] = array(\r\n\t\t\t\t'type' => 'DDEorOLE',\r\n\t\t\t);\r\n\t\t}\r\n\t}","label":0}
{"text":"private AttributeType getBasicAttributeType(Object value) {\n    if (value == null) {\n      return null;\n    }\n\n    if (value instanceof Integer) {\n      return INT;\n    } else if (value instanceof Double || value instanceof Float) {\n      return DECIMAL;\n    } else if (value instanceof Long) {\n      return LONG;\n    } else if (value instanceof Boolean) {\n      return BOOL;\n    } else {\n      return STRING;\n    }\n  }","label":0}
{"text":"def graph_from_adjacency_matrix(matrix, node_prefix='', directed=False):\n    \n\n    node_orig = 1\n\n    if directed:\n        graph = Dot(graph_type='digraph')\n    else:\n        graph = Dot(graph_type='graph')\n\n    for row in matrix:\n        if not directed:\n            skip = matrix.index(row)\n            r = row[skip:]\n        else:\n            skip = 0\n            r = row\n        node_dest = skip + 1\n\n        for e in r:\n            if e:\n                graph.add_edge(\n                    Edge(\n                        node_prefix + node_orig,\n                        node_prefix + node_dest))\n            node_dest += 1\n        node_orig += 1\n\n    return graph","label":0}
{"text":"public void setLoggingLevel(final int loggingLevel, final Class<?>... deviceClassNames) {\n\n        if (rootLoggingLevel < loggingLevel) {\n            setRootLoggingLevel(loggingLevel);\n        }\n        System.out.println(\"set logging to \" + LoggingLevel.getLevelFromInt(loggingLevel));\n        final Logger tangoLogger = LoggerFactory.getLogger(\"org.tango.server\");\n        if (tangoLogger instanceof ch.qos.logback.classic.Logger) {\n            final ch.qos.logback.classic.Logger logbackLogger = (ch.qos.logback.classic.Logger) tangoLogger;\n            logbackLogger.setLevel(LoggingLevel.getLevelFromInt(loggingLevel));\n        }\n        final Logger blackboxLogger = LoggerFactory.getLogger(Constants.CLIENT_REQUESTS_LOGGER);\n        if (blackboxLogger instanceof ch.qos.logback.classic.Logger) {\n            final ch.qos.logback.classic.Logger logbackLogger = (ch.qos.logback.classic.Logger) blackboxLogger;\n            logbackLogger.setLevel(LoggingLevel.getLevelFromInt(loggingLevel));\n        }\n        for (int i = 0; i < deviceClassNames.length; i++) {\n            final Logger deviceLogger = LoggerFactory.getLogger(deviceClassNames[i]);\n            if (deviceLogger instanceof ch.qos.logback.classic.Logger) {\n                final ch.qos.logback.classic.Logger logbackLogger = (ch.qos.logback.classic.Logger) deviceLogger;\n                logbackLogger.setLevel(LoggingLevel.getLevelFromInt(loggingLevel));\n            }\n        }\n\n    }","label":0}
{"text":"func (node *TrieNode) Match(data []byte) *TrieNode {\n\tdataLen := len(data)\n\tsuffixLen := len(node.suffix)\n\tif dataLen < suffixLen {\n\t\treturn nil \/\/ ### return, cannot be fully matched ###\n\t}\n\n\tfor i := 0; i < suffixLen; i++ {\n\t\tif data[i] != node.suffix[i] {\n\t\t\treturn nil \/\/ ### return, no match ###\n\t\t}\n\t}\n\n\tif dataLen == suffixLen {\n\t\tif node.PathLen > 0 {\n\t\t\treturn node \/\/ ### return, full match ###\n\t\t}\n\t\treturn nil \/\/ ### return, invalid match ###\n\t}\n\n\tdata = data[suffixLen:]\n\tnumChildren := len(node.children)\n\tfor i := 0; i < numChildren; i++ {\n\t\tmatchedNode := node.children[i].Match(data)\n\t\tif matchedNode != nil {\n\t\t\treturn matchedNode \/\/ ### return, match found ###\n\t\t}\n\t}\n\n\treturn nil \/\/ ### return, no valid path ###\n}","label":0}
{"text":"public Csv arrayElementDelimiter(String delimiter) {\n\t\tPreconditions.checkNotNull(delimiter);\n\t\tinternalProperties.putString(FORMAT_ARRAY_ELEMENT_DELIMITER, delimiter);\n\t\treturn this;\n\t}","label":0}
{"text":"function (xmlNode, nodeName) {\n\n            var childs = xmlNode.childNodes;\n\n            for (var i = 0; i < childs.length; ++i) {\n\n                var item = childs.item(i);\n\n                if (item.nodeType !== 1) {\n                    continue;\n                }\n\n                if ((item.nodeName && !nodeName) || (nodeName && nodeName === item.nodeName)) {\n                    return item;\n                }\n            }\n\n            return null;\n        }","label":0}
{"text":"protected function validateField($fieldName, $value)\n    {\n        if (!$this->validateValue($value)) {\n            $this->validationError(\n                $fieldName,\n                _t(\n                    __CLASS__ . '.InvalidValue',\n                    'Synonyms cannot contain words separated by spaces'\n                )\n            );\n        }\n    }","label":0}
{"text":"public boolean visitTypeHierarchy(TypeMirror type, TypeVisitor visitor) {\n    boolean result = true;\n    if (type == null) {\n      return result;\n    }\n    if (type.getKind() == TypeKind.DECLARED) {\n      result = visitor.accept((DeclaredType) type);\n    }\n    for (TypeMirror superType : directSupertypes(type)) {\n      if (!result) {\n        return false;\n      }\n      result = visitTypeHierarchy(superType, visitor);\n    }\n    return result;\n  }","label":0}
{"text":"public function isValueValid($value) {\n\t\treturn $value instanceof Type\\AudienceType || $value instanceof Type\\OrganizationType || $value instanceof Type\\PersonType;\n\t}","label":0}
{"text":"public function getBlockURL($filename = null)\n    {\n        $obj = $this->blockType;\n        if ($obj->getPackageID() > 0) {\n            if (is_dir(DIR_PACKAGES_CORE . '\/' . $obj->getPackageHandle())) {\n                $base = ASSETS_URL . '\/' . DIRNAME_PACKAGES . '\/' . $obj->getPackageHandle(\n                    ) . '\/' . DIRNAME_BLOCKS . '\/' . $obj->getBlockTypeHandle();\n            } else {\n                $base = DIR_REL . '\/' . DIRNAME_PACKAGES . '\/' . $obj->getPackageHandle(\n                    ) . '\/' . DIRNAME_BLOCKS . '\/' . $obj->getBlockTypeHandle();\n            }\n        } else {\n            if (file_exists(DIR_FILES_BLOCK_TYPES . '\/' . $obj->getBlockTypeHandle() . '\/' . $filename)) {\n                $base = REL_DIR_APPLICATION . '\/' . DIRNAME_BLOCKS . '\/' . $obj->getBlockTypeHandle();\n            } else {\n                $base = ASSETS_URL . '\/' . DIRNAME_BLOCKS . '\/' . $obj->getBlockTypeHandle();\n            }\n        }\n\n        return $base;\n    }","label":0}
{"text":"public void setCasId(String v) {\n    if (ProcessingStep_Type.featOkTst && ((ProcessingStep_Type)jcasType).casFeat_casId == null)\n      jcasType.jcas.throwFeatMissing(\"casId\", \"edu.cmu.lti.oaqa.framework.types.ProcessingStep\");\n    jcasType.ll_cas.ll_setStringValue(addr, ((ProcessingStep_Type)jcasType).casFeatCode_casId, v);}","label":0}
{"text":"protected function getSanitizedValue($value)\n    {\n        $validation_result = $this->getValidator()->validate($value);\n\n        if ($validation_result->getSeverity() > IncidentInterface::NOTICE) {\n            throw new BadValueException(\n                sprintf(\n                    \"Given value for attribute '%s' on entity type '%s' is not valid.\",\n                    $this->getName(),\n                    $this->getType() ? $this->getType()->getName() : 'undefined'\n                )\n            );\n        }\n\n        return $validation_result->getSanitizedValue();\n    }","label":0}
{"text":"function() {\n    var htmlBridge;\n    if (_currentElement && (htmlBridge = _getHtmlBridge(_flashState.bridge))) {\n      var pos = _getElementPosition(_currentElement);\n      _extend(htmlBridge.style, {\n        width: pos.width + \"px\",\n        height: pos.height + \"px\",\n        top: pos.top + \"px\",\n        left: pos.left + \"px\",\n        zIndex: \"\" + _getSafeZIndex(_globalConfig.zIndex)\n      });\n    }\n  }","label":0}
{"text":"func (s *scope) makevar(varname string) string {\n\ts.n++\n\tvar genName = varname + strconv.Itoa(s.n)\n\ts.stack[len(s.stack)-1][varname] = genName\n\treturn genName\n}","label":0}
{"text":"private StringBuilder verboseHelp() {\n        StringBuilder verboseHelp = new StringBuilder(getScriptUsage());\n        verboseHelp.append(NL);\n        verboseHelp.append(getHelpPart(\"global.actions\"));\n        verboseHelp.append(NL);\n        for (ExeAction action : ExeAction.values()) {\n            verboseHelp.append(NL);\n            verboseHelp.append(\"    \");\n            verboseHelp.append(action.toString());\n            verboseHelp.append(NL);\n            verboseHelp.append(getDescription(action));\n            verboseHelp.append(NL);\n        }\n        verboseHelp.append(NL);\n        verboseHelp.append(getHelpPart(\"global.options\"));\n        verboseHelp.append(NL);\n        verboseHelp.append(getHelpPart(\"global.options.statement\"));\n        verboseHelp.append(NL);\n        verboseHelp.append(NL);\n        return verboseHelp;\n    }","label":0}
{"text":"def fillna(self, series, addition=0):\n        \n        if series.dtype == numpy.object:\n            return series\n\n        return series.fillna(self.missing_value + addition).astype(self.dtype)","label":0}
{"text":"def set_broad_fig_style(self):\n        ''''''\n        plt.rcParams.update({\n            'figure.figsize' : [self.frontierswidth\/self.inchpercm*4, self.frontierswidth\/self.inchpercm*1.5],\n        })","label":0}
{"text":"public Geometry toGeometry(final FeatureCollection featureCollection) {\n        if (featureCollection == null) {\n            return null;\n        }\n        final Geometry geometry = new Geometry();\n        final Feature location =\n                populateBoundaries(geometry, featureCollection);\n        populateLocation(geometry, location);\n        return geometry;\n    }","label":0}
{"text":"public static final String base64Decode(String str) {\n        if (str == null) {\n            return null;\n        } else {\n            byte data[] = getBytes(str);\n            return toString(base64Decode(data));\n        }\n    }","label":0}
{"text":"public Optional<List<String>> getList(String key) {\n    return this.get(key).map(v -> ImmutableList.copyOf(Splitter.on(',').split(v)));\n  }","label":0}
{"text":"public static void sendMail(String to, String title, String content, String from, String key) throws Exception {\n        setFrom(from);\n        setKey(key);\n        sendMail(to, title, content);\n    }","label":0}
{"text":"public void printHtmlHeading(PrintWriter out)\n    {\n        if (this.getScreenField().getConverter() != null)\n            super.printHtmlHeading(out);\n        else if (this.getScreenField().getParentScreen() instanceof GridScreen)\n        { \/\/ These are command buttons such as \"Form\" or \"Detail\"\n            String strImage = \"Form\";\n            if (((SButtonBox)this.getScreenField()).getImageButtonName() != null)\n                strImage = ((SButtonBox)this.getScreenField()).getImageButtonName();\n            out.println(\"<th align=\\\"center\\\" valign=\\\"center\\\"><img src=\\\"\" + HtmlConstants.IMAGE_DIR + \"buttons\/\" + strImage + \".gif\\\" width=\\\"16\\\" height=\\\"16\\\" alt=\\\"Open this record\\\"><\/th>\");\n        }\n    }","label":0}
{"text":"public java.util.List<? extends com.google.appengine.v1.VersionOrBuilder> \n      getVersionsOrBuilderList() {\n    return versions_;\n  }","label":0}
{"text":"func (m *MemSwapBytes) UnmarshalJSON(s []byte) error {\n\tb := MemBytes(*m)\n\treturn b.UnmarshalJSON(s)\n}","label":0}
{"text":"func (o options) shouldCompress(contentType string, statusCode int) bool {\n\t\/\/ If contentTypes is nil we handle all content types.\n\tif len(o.contentTypes) > 0 {\n\t\tct := strings.ToLower(contentType)\n\t\tct = strings.Split(ct, \";\")[0]\n\t\tfound := false\n\t\tfor _, v := range o.contentTypes {\n\t\t\tif strings.HasPrefix(ct, v) {\n\t\t\t\tfound = true\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\tif !found {\n\t\t\treturn false\n\t\t}\n\t}\n\tif len(o.statusCodes) > 0 {\n\t\t_, ok := o.statusCodes[statusCode]\n\t\tif !ok {\n\t\t\treturn false\n\t\t}\n\t}\n\n\treturn true\n}","label":0}
{"text":"func (q *TransmitLimitedQueue) queueBroadcast(b Broadcast, initialTransmits int) {\n\tq.mu.Lock()\n\tdefer q.mu.Unlock()\n\n\tq.lazyInit()\n\n\tif q.idGen == math.MaxInt64 {\n\t\t\/\/ it's super duper unlikely to wrap around within the retransmit limit\n\t\tq.idGen = 1\n\t} else {\n\t\tq.idGen++\n\t}\n\tid := q.idGen\n\n\tlb := &limitedBroadcast{\n\t\ttransmits: initialTransmits,\n\t\tmsgLen:    int64(len(b.Message())),\n\t\tid:        id,\n\t\tb:         b,\n\t}\n\tunique := false\n\tif nb, ok := b.(NamedBroadcast); ok {\n\t\tlb.name = nb.Name()\n\t} else if _, ok := b.(UniqueBroadcast); ok {\n\t\tunique = true\n\t}\n\n\t\/\/ Check if this message invalidates another.\n\tif lb.name != \"\" {\n\t\tif old, ok := q.tm[lb.name]; ok {\n\t\t\told.b.Finished()\n\t\t\tq.deleteItem(old)\n\t\t}\n\t} else if !unique {\n\t\t\/\/ Slow path, hopefully nothing hot hits this.\n\t\tvar remove []*limitedBroadcast\n\t\tq.tq.Ascend(func(item btree.Item) bool {\n\t\t\tcur := item.(*limitedBroadcast)\n\n\t\t\t\/\/ Special Broadcasts can only invalidate each other.\n\t\t\tswitch cur.b.(type) {\n\t\t\tcase NamedBroadcast:\n\t\t\t\t\/\/ noop\n\t\t\tcase UniqueBroadcast:\n\t\t\t\t\/\/ noop\n\t\t\tdefault:\n\t\t\t\tif b.Invalidates(cur.b) {\n\t\t\t\t\tcur.b.Finished()\n\t\t\t\t\tremove = append(remove, cur)\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true\n\t\t})\n\t\tfor _, cur := range remove {\n\t\t\tq.deleteItem(cur)\n\t\t}\n\t}\n\n\t\/\/ Append to the relevant queue.\n\tq.addItem(lb)\n}","label":0}
{"text":"func (m *MemLogger) Errorf(format string, args ...interface{}) {\n\tm.LogCall(logging.Error, 1, format, args)\n}","label":0}
{"text":"function (message) {\n    var that = this;\n    that._traceLogEventsCount();\n    that.mc.trigger(TypeMsg$3.OnCreateError, message);\n  }","label":0}
{"text":"function(raw_directive, widget_config) {\n\n\t\tif (Lava.schema.DEBUG && widget_config.type != 'widget') Lava.t(\"Property directive requires a widget\");\n\n\t\tthis._parseProperty(widget_config, raw_directive, 'properties');\n\n\t}","label":0}
{"text":"public function useMultisitesFolder()\n    {\n        $site = Multisites::inst()->getActiveSite();\n        if (!$site) {\n            return $this->owner;\n        }\n        $multisiteFolder = $site->Folder();\n\n        if (!$multisiteFolder->exists()) {\n            $site->createAssetsSubfolder(true);\n            $multisiteFolder = $site->Folder();\n        }\n\n        $this->owner->setFolderName($multisiteFolder->Name.'\/'.$this->owner->getFolderName());\n\n        return $this->owner;\n    }","label":0}
{"text":"func putChanEdgePolicyUnknown(edges *bbolt.Bucket, channelID uint64,\n\tfrom []byte) error {\n\n\tvar edgeKey [33 + 8]byte\n\tcopy(edgeKey[:], from)\n\tbyteOrder.PutUint64(edgeKey[33:], channelID)\n\n\tif edges.Get(edgeKey[:]) != nil {\n\t\treturn fmt.Errorf(\"Cannot write unknown policy for channel %v \"+\n\t\t\t\" when there is already a policy present\", channelID)\n\t}\n\n\treturn edges.Put(edgeKey[:], unknownPolicy)\n}","label":0}
{"text":"protected function appendArrayDoc(TypeDoc $doc, array $siblingsDoc) : array\n    {\n        \/\/ CollectionDoc should be managed as ArrayDoc\n        if (!$doc instanceof ArrayDoc && get_class($doc) !== CollectionDoc::class) {\n            return $siblingsDoc;\n        }\n        \/** @var $doc ArrayDoc|CollectionDoc *\/\n        \/\/ add mandatory \"items\" field\n        if ($doc instanceof ArrayDoc && null !== $doc->getItemValidation()) {\n            $siblingsDoc['items'] = $this->normalize($doc->getItemValidation());\n        } else {\n            $siblingsDoc['items']['type'] = $this->guessItemsType($doc->getSiblingList());\n        }\n\n        return $siblingsDoc;\n    }","label":0}
{"text":"public static synchronized UnsupportedDurationField getInstance(DurationFieldType type) {\n        UnsupportedDurationField field;\n        if (cCache == null) {\n            cCache = new HashMap<DurationFieldType, UnsupportedDurationField>(7);\n            field = null;\n        } else {\n            field = cCache.get(type);\n        }\n        if (field == null) {\n            field = new UnsupportedDurationField(type);\n            cCache.put(type, field);\n        }\n        return field;\n    }","label":0}
{"text":"public AnalyzedSentence getRawAnalyzedSentence(String sentence) throws IOException {\n    List<String> tokens = language.getWordTokenizer().tokenize(sentence);\n    Map<Integer, String> softHyphenTokens = replaceSoftHyphens(tokens);\n\n    List<AnalyzedTokenReadings> aTokens = language.getTagger().tag(tokens);\n    if (language.getChunker() != null) {\n      language.getChunker().addChunkTags(aTokens);\n    }\n    int numTokens = aTokens.size();\n    int posFix = 0; \n    for (int i = 1; i < numTokens; i++) {\n      aTokens.get(i).setWhitespaceBefore(aTokens.get(i - 1).isWhitespace());\n      aTokens.get(i).setStartPos(aTokens.get(i).getStartPos() + posFix);\n      if (!softHyphenTokens.isEmpty() && softHyphenTokens.get(i) != null) {\n        aTokens.get(i).addReading(language.getTagger().createToken(softHyphenTokens.get(i), null));\n        posFix += softHyphenTokens.get(i).length() - aTokens.get(i).getToken().length();\n      }\n    }\n        \n    AnalyzedTokenReadings[] tokenArray = new AnalyzedTokenReadings[tokens.size() + 1];\n    AnalyzedToken[] startTokenArray = new AnalyzedToken[1];\n    int toArrayCount = 0;\n    AnalyzedToken sentenceStartToken = new AnalyzedToken(\"\", SENTENCE_START_TAGNAME, null);\n    startTokenArray[0] = sentenceStartToken;\n    tokenArray[toArrayCount++] = new AnalyzedTokenReadings(startTokenArray, 0);\n    int startPos = 0;\n    for (AnalyzedTokenReadings posTag : aTokens) {\n      posTag.setStartPos(startPos);\n      tokenArray[toArrayCount++] = posTag;\n      startPos += posTag.getToken().length();\n    }\n\n    \/\/ add additional tags\n    int lastToken = toArrayCount - 1;\n    \/\/ make SENT_END appear at last not whitespace token\n    for (int i = 0; i < toArrayCount - 1; i++) {\n      if (!tokenArray[lastToken - i].isWhitespace()) {\n        lastToken -= i;\n        break;\n      }\n    }\n\n    tokenArray[lastToken].setSentEnd();\n\n    if (tokenArray.length == lastToken + 1 && tokenArray[lastToken].isLinebreak()) {\n      tokenArray[lastToken].setParagraphEnd();\n    }\n    return new AnalyzedSentence(tokenArray);\n  }","label":0}
{"text":"public function up()\n    {\n        Schema::table(config('laravel-video-chat.table.conversations_table'), function (Blueprint $table) {\n            $table->boolean('is_accepted')->default(false)->after('second_user_id');\n        });\n    }","label":0}
{"text":"private function appendAttribute($attrName, $attrValue)\n    {\n        $xml1 = defined('ENT_XML1') ? ENT_XML1 : 16;\n\n        $attrName = htmlspecialchars($attrName, $xml1 | ENT_COMPAT);\n        $attrValue = htmlspecialchars($attrValue, $xml1 | ENT_COMPAT);\n\n        $this->outString .= ' '.$attrName.'=\"'.$attrValue.'\"';\n    }","label":0}
{"text":"func IsBtrfsFilesystem(path string) bool {\n\t_, err := RunBtrFSCmd(false, \"filesystem\", \"df\", path)\n\treturn err == nil\n}","label":0}
{"text":"public function encrypt($data, $key = null, $iv = null)\n    {\n        $iv = $iv ?: $this->getRandomKey(static::DEFAULT_RANDOM_BYTE_LENGTH);\n\n        $key = sha1($iv . $key);\n\n        return base64_encode($iv . $this->doEncrypt($data, $key));\n    }","label":0}
{"text":"public static <T1, T2, T3, T4, T5, T6> Sextuple<T1, T2, T3, T4, T5, T6> newTuple(\n\t\t\tT1 e1, T2 e2, T3 e3, T4 e4, T5 e5, T6 e6) {\n\t\treturn new Sextuple<T1, T2, T3, T4, T5, T6>(e1, e2, e3, e4, e5, e6);\n\t}","label":0}
{"text":"public function configureInputDefinition(InputDefinition $definition)\n    {\n        foreach ($this->fields as $field) {\n            if ($field->includeAsOption()) {\n                $definition->addOption($field->getAsOption());\n            }\n        }\n    }","label":0}
{"text":"public static Locale parseLocale(String localeString) {\n    if (localeString == null) {\n      return Locale.US;\n    }\n    String[] groups = localeString.split(\"[-_]\");\n    switch (groups.length) {\n      case 1:\n        return new Locale(groups[0]);\n      case 2:\n        return new Locale(groups[0], Ascii.toUpperCase(groups[1]));\n      case 3:\n        return new Locale(groups[0], Ascii.toUpperCase(groups[1]), groups[2]);\n      default:\n        throw new IllegalArgumentException(\"Malformed localeString: \" + localeString);\n    }\n  }","label":0}
{"text":"def get_client_for_file(self, filename):\r\n        \"\"\"\"\"\"\r\n        client = None\r\n        for idx, cl in enumerate(self.get_clients()):\r\n            if self.filenames[idx] == filename:\r\n                self.tabwidget.setCurrentIndex(idx)\r\n                client = cl\r\n                break\r\n        return client","label":0}
{"text":"function defaultStrategy(projectDir, builder, cb)\n{\n  const pkg = fs.realpathSync(INSTALLER_PACKAGE);\n  builder.buildFromPackage(pkg, projectDir, cb);\n}","label":0}
{"text":"def getSoname(filename):\n    \n    cmd = [\"objdump\", \"-p\", \"-j\", \".dynamic\", filename]\n    m = re.search(r'\\s+SONAME\\s+([^\\s]+)', compat.exec_command(*cmd))\n    if m:\n        return m.group(1)","label":0}
{"text":"public void defrag() {\n\n        if (cacheReadonly) {\n            return;\n        }\n\n        if (fileFreePosition == INITIAL_FREE_POS) {\n            return;\n        }\n\n        database.logger.appLog.logContext(SimpleLog.LOG_NORMAL, \"start\");\n\n        try {\n            boolean wasNio = dataFile.wasNio();\n\n            cache.saveAll();\n\n            DataFileDefrag dfd = new DataFileDefrag(database, this, fileName);\n\n            dfd.process();\n            close(false);\n            deleteFile(wasNio);\n            renameDataFile(wasNio);\n            backupFile();\n            database.getProperties().setProperty(\n                HsqlDatabaseProperties.hsqldb_cache_version,\n                HsqlDatabaseProperties.THIS_CACHE_VERSION);\n            database.getProperties().save();\n            cache.clear();\n\n            cache = new Cache(this);\n\n            open(cacheReadonly);\n            dfd.updateTableIndexRoots();\n            dfd.updateTransactionRowIDs();\n        } catch (Throwable e) {\n            database.logger.appLog.logContext(e, null);\n\n            if (e instanceof HsqlException) {\n                throw (HsqlException) e;\n            } else {\n                throw new HsqlException(\n                    e, Error.getMessage(ErrorCode.GENERAL_IO_ERROR),\n                    ErrorCode.GENERAL_IO_ERROR);\n            }\n        }\n\n        database.logger.appLog.logContext(SimpleLog.LOG_NORMAL, \"end\");\n    }","label":0}
{"text":"func (c *Client) AddNicToVirtualMachine(p *AddNicToVirtualMachineParameter) (*VirtualMachine, error) {\n\tobj, err := c.Request(\"addNicToVirtualMachine\", convertParamToMap(p))\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn obj.(*VirtualMachine), err\n}","label":0}
{"text":"protected String getUniqueString(FieldDescriptor field) throws SequenceManagerException\r\n    {\r\n        ResultSetAndStatement rsStmt = null;\r\n        String returnValue = null;\r\n        try\r\n        {\r\n            rsStmt = getBrokerForClass().serviceJdbcAccess().executeSQL(\r\n                    \"select newid()\", field.getClassDescriptor(), Query.NOT_SCROLLABLE);\r\n            if (rsStmt.m_rs.next())\r\n            {\r\n                returnValue = rsStmt.m_rs.getString(1);\r\n            }\r\n            else\r\n            {\r\n                LoggerFactory.getDefaultLogger().error(this.getClass()\r\n                        + \": Can't lookup new oid for field \" + field);\r\n            }\r\n        }\r\n        catch (PersistenceBrokerException e)\r\n        {\r\n            throw new SequenceManagerException(e);\r\n        }\r\n        catch (SQLException e)\r\n        {\r\n            throw new SequenceManagerException(e);\r\n        }\r\n\r\n        finally\r\n        {\r\n            \/\/ close the used resources\r\n            if (rsStmt != null) rsStmt.close();\r\n        }\r\n        return returnValue;\r\n    }","label":0}
{"text":"protected function replaceRouteParameters($path, array &$parameters)\n    {\n        $this->ensureTenancyInParameters($path, $parameters);\n\n        $path = $this->replaceNamedParameters($path, $parameters);\n\n        $path = preg_replace_callback('\/\\{.*?\\}\/', function ($match) use (&$parameters) {\n            return (empty($parameters) && ! Str::endsWith($match[0], '?}'))\n                ? $match[0]\n                : array_shift($parameters);\n        }, $path);\n\n        return trim(preg_replace('\/\\{.*?\\?\\}\/', '', $path), '\/');\n    }","label":0}
{"text":"public function getModuleDefinition($module)\n    {\n        $module = strtolower($module);\n        \n        if (!array_key_exists($module, $this->definitions)) {\n            $path = $this->locateModule($module);\n            $config = array();\n    \n            if($path){\n    \n                $definition = $path . DIRECTORY_SEPARATOR . $this->getOption('definition_file');\n    \n                \/**\n                 * Read version from definition file (e.g. definition.ini)\n                 * from either module directory or PHAR archive\n                *\/\n                if(is_dir($path) && file_exists($definition)){\n                    $config = \\Zend\\Config\\Factory::fromFile($definition);\n                } else if(is_file($path) && file_exists('phar:\/\/'.$definition)){\n                    $config = \\Zend\\Config\\Factory::fromFile('phar:\/\/'.$definition);\n                }\n            }\n    \n            $this->definitions[$module] = $config;\n        }\n    \n        return $this->definitions[$module];\n    }","label":0}
{"text":"func (m *callback) LoginURL(s connector.Scopes, callbackURL, state string) (string, error) {\n\tu, err := url.Parse(callbackURL)\n\tif err != nil {\n\t\treturn \"\", fmt.Errorf(\"failed to parse callbackURL %q: %v\", callbackURL, err)\n\t}\n\tu.Path = u.Path + m.pathSuffix\n\tv := u.Query()\n\tv.Set(\"state\", state)\n\tu.RawQuery = v.Encode()\n\treturn u.String(), nil\n}","label":0}
{"text":"public Circle set (ICircle c) {\n        return set(c.x(), c.y(), c.radius());\n    }","label":0}
{"text":"public function addRoute($methods, $uri, $action)\n    {\n        if (\\is_string($action)) {\n            $action = ['uses' => $action, 'controller' => $action];\n        } elseif ($action instanceof Closure) {\n            $action = [$action];\n        }\n\n        $action = $this->mergeLastGroupAttributes($action);\n\n        $action = $this->addControllerMiddlewareToRouteAction($action);\n\n        $uri = $uri === '\/' ? $uri : '\/'.\\trim($uri, '\/');\n\n        if (! empty($action['prefix'])) {\n            $uri = '\/'.\\ltrim(\\rtrim(\\trim($action['prefix'], '\/').'\/'.\\trim($uri, '\/'), '\/'), '\/');\n\n            unset($action['prefix']);\n        }\n\n        $action['uri'] = $uri;\n\n        return $this->adapter->addRoute((array) $methods, $action['version'], $uri, $action);\n    }","label":0}
{"text":"void onItemEditStarted(@Observes NavItemEditStartedEvent event) {\n        currentlyEditedItem.filter(e -> !e.equals(event.getNavItemEditor())).ifPresent(NavItemEditor::cancelEdition);\n        currentlyEditedItem = Optional.of(event.getNavItemEditor());\n    }","label":0}
{"text":"def render_label(content, label_for=None, label_class=None, label_title=\"\"):\n    \n    attrs = {}\n    if label_for:\n        attrs[\"for\"] = label_for\n    if label_class:\n        attrs[\"class\"] = label_class\n    if label_title:\n        attrs[\"title\"] = label_title\n    return render_tag(\"label\", attrs=attrs, content=content)","label":0}
{"text":"def runner(\n        engine,\n        configfile,\n        output_vars,\n        interval,\n        pause,\n        mpi,\n        tracker,\n        port,\n        bmi_class\n):\n    \n    # keep track of info\n    # update mpi information or use rank 0\n    runner = mmi.runner.Runner(\n        engine=engine,\n        configfile=configfile,\n        output_vars=output_vars,\n        interval=interval,\n        pause=pause,\n        mpi=mpi,\n        tracker=tracker,\n        port=port,\n        bmi_class=bmi_class\n    )\n    runner.run()","label":0}
{"text":"@SuppressWarnings(\"nls\")\n\tpublic void flush()\n\t{\n\t\tsynchronized (this)\n\t\t{\n\t\t\t\/\/ write xml header\n\t\t\tif (!hasXmlHeader)\n\t\t\t{\n\t\t\t\tout.println(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> \");\n\t\t\t\tout.println(\"<java version=\\\"\" + System.getProperty(\"java.version\") + \"\\\" class=\\\"com.googlecode.openbeans.XMLDecoder\\\"> \");\n\t\t\t\thasXmlHeader = true;\n\t\t\t}\n\n\t\t\t\/\/ preprocess pending objects\n\t\t\tfor (Iterator<Object> iter = flushPending.iterator(); iter.hasNext();)\n\t\t\t{\n\t\t\t\tObject o = iter.next();\n\t\t\t\tRecord rec = objRecordMap.get(o);\n\t\t\t\tif (rec != null)\n\t\t\t\t{\n\t\t\t\t\tpreprocess(o, rec);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t\/\/ flush pending objects\n\t\t\tfor (Iterator<Object> iter = flushPending.iterator(); iter.hasNext();)\n\t\t\t{\n\t\t\t\tObject o = iter.next();\n\t\t\t\tflushObject(o, INDENT_UNIT);\n\t\t\t\t\/\/ remove flushed obj\n\t\t\t\titer.remove();\n\t\t\t}\n\n\t\t\t\/\/ clear statement records\n\t\t\tobjRecordMap.clear();\n\t\t\tflushPendingStat.clear();\n\t\t\tobjPrePendingCache.clear();\n\t\t\tclazzCounterMap.clear();\n\n\t\t\t\/\/ remove all old->new mappings\n\t\t\tsuper.clear();\n\t\t}\n\t}","label":0}
{"text":"protected function appendPsForUniqueClauseTo(&$sb, array &$params)\n    {\n        if (1 !== substr_count($this->column, '?')) {\n            throw new InvalidClauseException(sprintf('Could not build SQL for expression \"%s\" because Criteria::RAW works only with a clause containing a single question mark placeholder', $this->column));\n        }\n        $params[] = ['table' => null, 'type' => $this->type, 'value' => $this->value];\n        $sb .= str_replace('?', ':p' . count($params), $this->column);\n    }","label":0}
{"text":"func (s *DeleteGroupMembershipInput) SetMemberName(v string) *DeleteGroupMembershipInput {\n\ts.MemberName = &v\n\treturn s\n}","label":0}
{"text":"func PgExtensionByExtname(db XODB, extname pgtypes.Name) (*PgExtension, error) {\n\tvar err error\n\n\t\/\/ sql query\n\tconst sqlstr = `SELECT ` +\n\t\t`tableoid, cmax, xmax, cmin, xmin, oid, ctid, extname, extowner, extnamespace, extrelocatable, extversion, extconfig, extcondition ` +\n\t\t`FROM pg_catalog.pg_extension ` +\n\t\t`WHERE extname = $1`\n\n\t\/\/ run query\n\tXOLog(sqlstr, extname)\n\tpe := PgExtension{}\n\n\terr = db.QueryRow(sqlstr, extname).Scan(&pe.Tableoid, &pe.Cmax, &pe.Xmax, &pe.Cmin, &pe.Xmin, &pe.Oid, &pe.Ctid, &pe.Extname, &pe.Extowner, &pe.Extnamespace, &pe.Extrelocatable, &pe.Extversion, &pe.Extconfig, &pe.Extcondition)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn &pe, nil\n}","label":0}
{"text":"def load(self, id, *args, **kwargs):\n        \n        self._pre_load(id, *args, **kwargs)\n        response = self._load(id, *args, **kwargs)\n        response = self._post_load(response, *args, **kwargs)\n        return response","label":0}
{"text":"def console_rect(\n    con: tcod.console.Console,\n    x: int,\n    y: int,\n    w: int,\n    h: int,\n    clr: bool,\n    flag: int = BKGND_DEFAULT,\n) -> None:\n    \n    lib.TCOD_console_rect(_console(con), x, y, w, h, clr, flag)","label":0}
{"text":"func NewTStandardClient(inputProtocol, outputProtocol TProtocol) *TStandardClient {\n\treturn &TStandardClient{\n\t\tiprot: inputProtocol,\n\t\toprot: outputProtocol,\n\t}\n}","label":0}
{"text":"protected static function formatDebugDumps () {\n\t\t$dumps = '';\n\t\t$lastDump = FALSE;\n\t\t$app = static::$app ?: (static::$app = & \\MvcCore\\Application::GetInstance());\n\t\t$appRoot = $app->GetRequest()->GetAppRoot();\n\t\tforeach (self::$dumps as $values) {\n\t\t\tlist($dumpResult, $lastDumpLocal) = self::formatDebugDump($values, $appRoot);\n\t\t\t$dumps .= $dumpResult;\n\t\t\tif ($lastDumpLocal) $lastDump = $lastDumpLocal;\n\t\t}\n\t\treturn [$dumps, $lastDump];\n\t}","label":0}
{"text":"function ( x, a1, a2, b1, b2 ) {\n\n\t\treturn b1 + ( x - a1 ) * ( b2 - b1 ) \/ ( a2 - a1 );\n\n\t}","label":0}
{"text":"func (h *heapData) Swap(i, j int) {\n\th.queue[i], h.queue[j] = h.queue[j], h.queue[i]\n\titem := h.items[h.queue[i]]\n\titem.index = i\n\titem = h.items[h.queue[j]]\n\titem.index = j\n}","label":0}
{"text":"func (h *Handler) handleGetStatus(w http.ResponseWriter, r *http.Request) {\n\tif !validHeaderAcceptJSON(r.Header) {\n\t\thttp.Error(w, \"JSON only acceptable response\", http.StatusNotAcceptable)\n\t\treturn\n\t}\n\tstatus := getStatusResponse{\n\t\tState:   h.api.State(),\n\t\tNodes:   h.api.Hosts(r.Context()),\n\t\tLocalID: h.api.Node().ID,\n\t}\n\tif err := json.NewEncoder(w).Encode(status); err != nil {\n\t\th.logger.Printf(\"write status response error: %s\", err)\n\t}\n}","label":0}
{"text":"def ensure_file(url, path, md5sum=None):\n    \n\n    if not os.path.isfile(path) or (md5sum and md5sum != file_md5(path)):\n        download_file(url, path)","label":0}
{"text":"public static char max(final char a, final char b, final char c) {\r\n        final char m = (a >= b) ? a : b;\r\n\r\n        return (m >= c) ? m : c;\r\n    }","label":0}
{"text":"public void print(ProjectModel project, File f, boolean includeClasses)\n\t\t\tthrows IOException {\n\t\tFileWriter writer = new FileWriter(f);\n\t\tprint(project, writer, includeClasses);\n\t\twriter.close();\n\t}","label":0}
{"text":"def output_extras(self, output_file):\n        \n        output_directory = dirname(output_file)\n\n        def local_path(name):\n            return join(output_directory, self.path_helper.local_name(name))\n\n        files_directory = \"%s_files%s\" % (basename(output_file)[0:-len(\".dat\")], self.path_helper.separator)\n        names = filter(lambda o: o.startswith(files_directory), self.output_directory_contents)\n        return dict(map(lambda name: (local_path(name), name), names))","label":0}
{"text":"func (p *Provider) backoffDuration() time.Duration {\n\t\/\/ Use the default backoff\n\tbackoff := DefaultBackoff\n\n\t\/\/ Check for a server specified backoff\n\tp.backoffLock.Lock()\n\tif p.backoff != 0 {\n\t\tbackoff = p.backoff\n\t}\n\tif p.noRetry {\n\t\tbackoff = 0\n\t}\n\tp.backoffLock.Unlock()\n\n\treturn backoff\n}","label":0}
{"text":"public function doFilterResponseById( $viafID ) {\n\n\t\t$xml = $this->requestResponseFor( $viafID );\n\n\t\tif ( $this->httpRequest->getLastError() !== '' ) {\n\t\t\treturn $this->addMessage( array( 'onoi-remi-request-error', $this->httpRequest->getLastError(), $viafID ) );\n\t\t}\n\n\t\tif ( $xml === null || $xml === '' || $xml === false ) {\n\t\t\treturn $this->addMessage( array( 'onoi-remi-response-empty', $viafID ) );\n\t\t}\n\n\t\t$dom = new DOMDocument();\n\t\t$dom->loadXml( $xml );\n\n\t\t$this->doProcessDom( $dom, $viafID );\n\n\t\t$this->filteredRecord->set( 'retrieved-from', 'http:\/\/viaf.org\/' );\n\t}","label":0}
{"text":"public function findPostingsForAccount(Account $account)\n    {\n        $q = $this->getEntityManager()->createQuery('\n\n            SELECT     p\n            FROM       HarvestCloudCoreBundle:Posting p\n            WHERE      p.account = :account\n\n        ')->setParameter('account', $account);\n\n        return $q->getResult();\n    }","label":0}
{"text":"@SuppressWarnings(\"checkstyle:all\")\n\tprotected void generateDocumentationFormatterImpl() {\n\t\tfinal TypeReference formatter = getDocumentationFormatterImpl();\n\t\tStringConcatenationClient content = new StringConcatenationClient() {\n\t\t\t@SuppressWarnings(\"synthetic-access\")\n\t\t\t@Override\n\t\t\tprotected void appendTo(TargetStringConcatenation it) {\n\t\t\t\tit.append(\"\/** Formatter a documentation string.\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\" *\/\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"public class DocumentationFormatter implements \"); \/\/$NON-NLS-1$\n\t\t\t\tit.append(getIDocumentationFormatter());\n\t\t\t\tit.append(\" {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLineIfNotEmpty();\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\tprivate static final String SPACE_CHAR = \\\" \\\";\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\tprivate static final String NL_CHAR = \\\"\\\\n\\\";\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\tprivate static final String EMPTY_STR = \\\"\\\";\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\tprivate String mlLinePrefix;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\tprivate String mlStart;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\tprivate String mlEnd;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\tprivate String slPrefix;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLineIfNotEmpty();\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\tprotected static boolean isNewLine(char character) {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tif (character == '\\\\n' || character == '\\\\r' || character == '\\\\f') {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\treturn true;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\treturn ((((1 << Character.LINE_SEPARATOR)\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t| (1 << Character.PARAGRAPH_SEPARATOR)) >> Character.getType((int) character)) & 1) != 0;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLineIfNotEmpty();\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t@\"); \/\/$NON-NLS-1$\n\t\t\t\tit.append(Pure.class);\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\tpublic String getMultilineCommentStartSymbols() {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\treturn this.mlStart;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLineIfNotEmpty();\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\tpublic void setMultilineCommentStartSymbols(String symbols) {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tthis.mlStart = symbols;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLineIfNotEmpty();\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t@\"); \/\/$NON-NLS-1$\n\t\t\t\tit.append(Pure.class);\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\tpublic String getMultilineCommentEndSymbols() {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\treturn this.mlEnd;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLineIfNotEmpty();\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\tpublic void setMultilineCommentEndSymbols(String symbols) {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tthis.mlEnd = symbols;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLineIfNotEmpty();\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t@\"); \/\/$NON-NLS-1$\n\t\t\t\tit.append(Pure.class);\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\tpublic String getMultilineCommentLinePrefix() {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\treturn this.mlLinePrefix;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLineIfNotEmpty();\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\tpublic void setMultilineCommentLinePrefix(String prefix) {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tthis.mlLinePrefix = prefix;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLineIfNotEmpty();\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t@\"); \/\/$NON-NLS-1$\n\t\t\t\tit.append(Pure.class);\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\tpublic String getSinglelineCommentPrefix() {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\treturn this.slPrefix;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLineIfNotEmpty();\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t@\"); \/\/$NON-NLS-1$\n\t\t\t\tit.append(Pure.class);\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\tprotected \"); \/\/$NON-NLS-1$\n\t\t\t\tit.append(Set.class);\n\t\t\t\tit.append(\"<Character> getSinglelineCommentSpecialChars() {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tfinal \"); \/\/$NON-NLS-1$\n\t\t\t\tit.append(Set.class);\n\t\t\t\tit.append(\"<Character> set = new \"); \/\/$NON-NLS-1$\n\t\t\t\tit.append(TreeSet.class);\n\t\t\t\tit.append(\"<>();\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tset.add('*');\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tset.add('+');\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tset.add('-');\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tset.add('=');\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\treturn set;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLineIfNotEmpty();\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\tpublic void setSinglelineCommentPrefix(String prefix) {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tthis.slPrefix = prefix;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLineIfNotEmpty();\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t@\"); \/\/$NON-NLS-1$\n\t\t\t\tit.append(Inject.class);\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\tpublic void setGrammarAccess(\"); \/\/$NON-NLS-1$\n\t\t\t\tit.append(DocumentationBuilderFragment.this.grammarAccessExtensions.getGrammarAccess(getGrammar()));\n\t\t\t\tit.append(\" access) {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tif (this.mlStart == null || this.mlEnd == null) {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\"); \/\/$NON-NLS-1$\n\t\t\t\tit.append(AbstractRule.class);\n\t\t\t\tit.append(\" mlRule = access.getML_COMMENTRule();\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\tfor (\"); \/\/$NON-NLS-1$\n\t\t\t\tit.append(AbstractElement.class);\n\t\t\t\tit.append(\" element : ((\"); \/\/$NON-NLS-1$\n\t\t\t\tit.append(Group.class);\n\t\t\t\tit.append(\") mlRule.getAlternatives()).getElements()) {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\\tif (element instanceof \"); \/\/$NON-NLS-1$\n\t\t\t\tit.append(Keyword.class);\n\t\t\t\tit.append(\" && this.mlStart == null) {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\\t\\tthis.mlStart = ((\"); \/\/$NON-NLS-1$\n\t\t\t\tit.append(Keyword.class);\n\t\t\t\tit.append(\") element).getValue();\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\\t} else if (element instanceof \"); \/\/$NON-NLS-1$\n\t\t\t\tit.append(UntilToken.class);\n\t\t\t\tit.append(\" && this.mlEnd == null) {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\\t\\tthis.mlEnd = ((\"); \/\/$NON-NLS-1$\n\t\t\t\tit.append(Keyword.class);\n\t\t\t\tit.append(\") ((\"); \/\/$NON-NLS-1$\n\t\t\t\tit.append(UntilToken.class);\n\t\t\t\tit.append(\") element).getTerminal()).getValue();\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tif (this.mlLinePrefix == null) {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\tthis.mlLinePrefix = this.mlStart.substring(this.mlStart.length() - 1);\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tif (this.slPrefix == null) {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\"); \/\/$NON-NLS-1$\n\t\t\t\tit.append(AbstractRule.class);\n\t\t\t\tit.append(\" slRule = access.getSL_COMMENTRule();\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\tfor (\"); \/\/$NON-NLS-1$\n\t\t\t\tit.append(AbstractElement.class);\n\t\t\t\tit.append(\" element : ((\"); \/\/$NON-NLS-1$\n\t\t\t\tit.append(Group.class);\n\t\t\t\tit.append(\") slRule.getAlternatives()).getElements()) {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\\tif (element instanceof \"); \/\/$NON-NLS-1$\n\t\t\t\tit.append(Keyword.class);\n\t\t\t\tit.append(\") {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\\t\\tthis.slPrefix = ((\"); \/\/$NON-NLS-1$\n\t\t\t\tit.append(Keyword.class);\n\t\t\t\tit.append(\") element).getValue().trim();\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\\t\\tbreak;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLineIfNotEmpty();\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t@\"); \/\/$NON-NLS-1$\n\t\t\t\tit.append(Pure.class);\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\tpublic String formatMultilineComment(String doc) {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\treturn formatMultilineComment(doc, (String) null);\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLineIfNotEmpty();\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t@\"); \/\/$NON-NLS-1$\n\t\t\t\tit.append(Pure.class);\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\tpublic String formatMultilineComment(String doc, String indentation) {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\"); \/\/$NON-NLS-1$\n\t\t\t\tit.append(IAppendable.class);\n\t\t\t\tit.append(\" appendable = new \"); \/\/$NON-NLS-1$\n\t\t\t\tit.append(StringBuilderBasedAppendable.class);\n\t\t\t\tit.append(\"();\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tformatMultilineComment(doc, indentation, appendable);\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\treturn appendable.getContent();\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLineIfNotEmpty();\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t@\"); \/\/$NON-NLS-1$\n\t\t\t\tit.append(Pure.class);\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\tpublic void formatMultilineComment(String doc, \"); \/\/$NON-NLS-1$\n\t\t\t\tit.append(IAppendable.class);\n\t\t\t\tit.append(\" appendable) {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tformatMultilineComment(doc, null, appendable);\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLineIfNotEmpty();\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t@\"); \/\/$NON-NLS-1$\n\t\t\t\tit.append(Pure.class);\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\tpublic void formatMultilineComment(String doc, String indentation, \"); \/\/$NON-NLS-1$\n\t\t\t\tit.append(IAppendable.class);\n\t\t\t\tit.append(\" appendable) {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tif (!\"); \/\/$NON-NLS-1$\n\t\t\t\tit.append(Strings.class);\n\t\t\t\tit.append(\".isEmpty(doc)) {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\tfinal \"); \/\/$NON-NLS-1$\n\t\t\t\tit.append(SortedMap.class);\n\t\t\t\tit.append(\"<Integer, Replacement> replacements = new \"); \/\/$NON-NLS-1$\n\t\t\t\tit.append(TreeMap.class);\n\t\t\t\tit.append(\"();\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\tformatMultlineComment(indentation, Strings.newLine(), new AppendableAccessor(appendable, doc, replacements, 0, doc.length()));\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLineIfNotEmpty();\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t@\"); \/\/$NON-NLS-1$\n\t\t\t\tit.append(Pure.class);\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\tpublic void formatMultilineComment(\"); \/\/$NON-NLS-1$\n\t\t\t\tit.append(ITextReplacerContext.class);\n\t\t\t\tit.append(\" context, \"); \/\/$NON-NLS-1$\n\t\t\t\tit.append(IComment.class);\n\t\t\t\tit.append(\" comment) {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tformatMultlineComment(context.getIndentationString(), context.getNewLinesString(1), new RegionAccessor(context, comment));\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLineIfNotEmpty();\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t@\"); \/\/$NON-NLS-1$\n\t\t\t\tit.append(Pure.class);\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\tpublic String formatSinglelineComment(String doc) {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\treturn formatSinglelineComment(doc, (String) null);\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLineIfNotEmpty();\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t@\"); \/\/$NON-NLS-1$\n\t\t\t\tit.append(Pure.class);\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tpublic String formatSinglelineComment(String doc, String indentation) {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\"); \/\/$NON-NLS-1$\n\t\t\t\tit.append(StringBuilderBasedAppendable.class);\n\t\t\t\tit.append(\" appendable = new \"); \/\/$NON-NLS-1$\n\t\t\t\tit.append(StringBuilderBasedAppendable.class);\n\t\t\t\tit.append(\"();\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tformatSinglelineComment(doc, indentation, appendable);\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\treturn appendable.getContent();\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLineIfNotEmpty();\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t@\"); \/\/$NON-NLS-1$\n\t\t\t\tit.append(Pure.class);\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\tpublic void formatSinglelineComment(String doc, \"); \/\/$NON-NLS-1$\n\t\t\t\tit.append(IAppendable.class);\n\t\t\t\tit.append(\" appendable) {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tformatSinglelineComment(doc, null, appendable);\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLineIfNotEmpty();\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t@\"); \/\/$NON-NLS-1$\n\t\t\t\tit.append(Pure.class);\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\tpublic void formatSinglelineComment(String doc, String indentation, \"); \/\/$NON-NLS-1$\n\t\t\t\tit.append(IAppendable.class);\n\t\t\t\tit.append(\" appendable) {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tif (!\"); \/\/$NON-NLS-1$\n\t\t\t\tit.append(Strings.class);\n\t\t\t\tit.append(\".isEmpty(doc)) {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\tfinal \"); \/\/$NON-NLS-1$\n\t\t\t\tit.append(SortedMap.class);\n\t\t\t\tit.append(\"<Integer, Replacement> replacements = new \"); \/\/$NON-NLS-1$\n\t\t\t\tit.append(TreeMap.class);\n\t\t\t\tit.append(\"<>();\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\tint offset = doc.indexOf(getSinglelineCommentPrefix());\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\tif (offset < 0) {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\\toffset = 0;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\tint endOffset = doc.indexOf(NL_CHAR, offset);\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\tif (endOffset < 0) {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\\tendOffset = doc.length();\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\tformatSinglelineComment(\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\\tindentation,\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\\tnew AppendableAccessor(appendable, doc, replacements, offset, endOffset));\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLineIfNotEmpty();\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\tpublic void formatSinglelineComment(\"); \/\/$NON-NLS-1$\n\t\t\t\tit.append(ITextReplacerContext.class);\n\t\t\t\tit.append(\" context, \"); \/\/$NON-NLS-1$\n\t\t\t\tit.append(IComment.class);\n\t\t\t\tit.append(\" comment) {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tformatSinglelineComment(context.getIndentationString(), new RegionAccessor(context, comment));\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLineIfNotEmpty();\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\tprivate <T> void formatSinglelineComment(String indentationString, FormattedTextAccessor<T> backend) {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tfinal String indent = \"); \/\/$NON-NLS-1$\n\t\t\t\tit.append(Strings.class);\n\t\t\t\tit.append(\".emptyIfNull(indentationString);\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tfinal String comment = backend.getCommentText();\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\/\/ Compute the starting offset of the text inside the comment\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tint offset = comment.indexOf(getSinglelineCommentPrefix());\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tif (offset < 0) {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\tbackend.replace(0, 0, getSinglelineCommentPrefix());\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\toffset = 0;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t} else {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\toffset += getSinglelineCommentPrefix().length();\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tfinal int endOffset = comment.length();\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tT currentLine = backend.getFirstLine(backend.getCommentOffset());\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tboolean firstLine = true;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\twhile (currentLine != null) {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\tString lineText = backend.getLineText(currentLine);\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\tint lineOffset = backend.getLineOffset(currentLine);\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\tint lineLength = backend.getLineLength(currentLine);\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\/\/ Clamp the line text to the comment area.\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\tif (firstLine) {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\\tif (lineOffset < offset) {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\\t\\tfinal int len = offset - lineOffset;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\\t\\tlineText = lineText.substring(len);\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\\t\\tlineOffset += len;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\\t\\tlineLength -= len;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t} else if (lineOffset >= endOffset) {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\\t\/\/ After the end of comment\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\\tbackend.applyReplacements();\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\\treturn;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t} else {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\\tfinal String prefix;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\\tif (!startsWith(lineText, 0, getSinglelineCommentPrefix())) {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\\t\\tprefix = indent + getSinglelineCommentPrefix();\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\\t} else {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\\t\\tprefix = indent;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\\tbackend.replace(lineOffset, 0, prefix);\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\/\/ Skip the comment characters that corresponds to the Javadoc format: \/\/[*-+=].\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\tint realCommentStart = 0;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\tfinal \"); \/\/$NON-NLS-1$\n\t\t\t\tit.append(Set.class);\n\t\t\t\tit.append(\"<Character> specialChars = getSinglelineCommentSpecialChars();\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\twhile (realCommentStart < lineLength && specialChars.contains(lineText.charAt(realCommentStart))) {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\\t++realCommentStart;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\/\/ Search for the first non whitespace\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\tint firstNonWhiteSpacePos = realCommentStart;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\twhile (firstNonWhiteSpacePos < lineLength && Character.isWhitespace(lineText.charAt(firstNonWhiteSpacePos))) {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\\t++firstNonWhiteSpacePos;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\/\/ Add whitespace at the beginning.\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\tif (firstNonWhiteSpacePos == lineLength) {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\\t\/\/ Empty comment\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\\tif (realCommentStart < firstNonWhiteSpacePos) {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\\t\\tbackend.replace(realCommentStart + lineOffset, lineLength - realCommentStart, EMPTY_STR);\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t} else {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\\tfinal int expectedNbWhiteSpaces = getWhiteSpacesOnFirstLine();\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\\tfinal int nbWhiteSpaces = firstNonWhiteSpacePos - realCommentStart;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\\tif (nbWhiteSpaces != expectedNbWhiteSpaces) {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\\t\\tbackend.replace(realCommentStart + lineOffset, nbWhiteSpaces, makeWhiteSpaces(expectedNbWhiteSpaces));\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\\t\/\/ Format the comment text\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\\tformatLineText(\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\\t\\tlineText.substring(firstNonWhiteSpacePos, lineLength), true,\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\\t\\tnew SubAccessor<>(backend, lineOffset + firstNonWhiteSpacePos));\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\\t\/\/ Remove trailing whitespaces\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\\tint endOfText = lineLength;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\\twhile ((endOfText - 1) > firstNonWhiteSpacePos && Character.isWhitespace(lineText.charAt(endOfText - 1))) {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\\t\\t--endOfText;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\\tif (endOfText < lineLength) {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\\t\\tbackend.replace(endOfText + lineOffset, lineLength - endOfText, EMPTY_STR);\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\tfirstLine = false;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\tcurrentLine = backend.getNextLine(currentLine);\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tbackend.applyReplacements();\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLineIfNotEmpty();\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\tprivate static String safeSubstring(String text, int start, int length) {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tif (text == null) {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\treturn EMPTY_STR;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tfinal int index = Math.max(0, start);\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tfinal int len = Math.max(0, Math.min(length, text.length()));\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\treturn text.substring(index, index + len);\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLineIfNotEmpty();\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\tprivate static boolean startsWith(String text, int start, String pattern) {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\treturn safeSubstring(text, start, pattern.length()).equals(pattern);\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLineIfNotEmpty();\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\tprivate static String makeWhiteSpaces(int nb) {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tfinal StringBuilder b = new StringBuilder();\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tfor (int i = 0; i < nb; ++i) {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\tb.append(SPACE_CHAR);\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\treturn b.toString();\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLineIfNotEmpty();\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\tprotected int getWhiteSpacesOnFirstLine() {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\treturn 1;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLineIfNotEmpty();\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\tprotected int getWhiteSpacesOnOtherLines() {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\treturn 1;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLineIfNotEmpty();\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\tprotected <T> void formatLineText(String lineText, boolean isMultlineComment, FormattedTextAccessor<T> backend) {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLineIfNotEmpty();\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\tprivate <T> boolean formatMultlineCommentFirstLine(String lineText, String indentationString, String newLineString, int endCommentOffset, FormattedTextAccessor<T> backend) {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\/\/ Skip the comment characters that corresponds to the Javadoc format: \/**.\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tint realCommentStart = 0;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\twhile (realCommentStart < lineText.length() && startsWith(lineText, realCommentStart, getMultilineCommentLinePrefix())) {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\trealCommentStart += getMultilineCommentLinePrefix().length();\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\/\/ Search for the first non whitespace\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tint firstNonWhiteSpacePos = realCommentStart;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tboolean hasNonSpaceChar = false;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\twhile (firstNonWhiteSpacePos < lineText.length() && Character.isWhitespace(lineText.charAt(firstNonWhiteSpacePos))) {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\tif (!Character.isSpaceChar(lineText.charAt(firstNonWhiteSpacePos))) {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\\thasNonSpaceChar = true;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t++firstNonWhiteSpacePos;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\/\/ Add whitespace at the beginning.\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tfinal int expectedNbWhiteSpaces = getWhiteSpacesOnFirstLine();\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tfinal int nbWhiteSpaces = firstNonWhiteSpacePos - realCommentStart;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tif (hasNonSpaceChar || nbWhiteSpaces != expectedNbWhiteSpaces) {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\tbackend.replace(realCommentStart, nbWhiteSpaces, makeWhiteSpaces(expectedNbWhiteSpaces));\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\/\/ Treat the end of comment\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tif (endCommentOffset <= lineText.length()) {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\/\/ Comment end at the first line. Insert a newline character\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\/\/ Search for the end of comment text.\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\tint endPos = endCommentOffset;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\tfinal int end = endPos;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\twhile ((endPos - 1) > firstNonWhiteSpacePos && Character.isWhitespace(lineText.charAt(endPos - 1))) {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\\t--endPos;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\/\/ Format the comment text\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\tformatLineText(lineText.substring(firstNonWhiteSpacePos, endPos), true, new SubAccessor<>(backend, firstNonWhiteSpacePos));\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\/\/ Do the replacement\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\tbackend.replace(endPos, end - endPos, newLineString + indentationString + SPACE_CHAR);\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\/\/ We don't need to treat more line\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\treturn true;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\/\/ Format the comment text\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tformatLineText(lineText.substring(firstNonWhiteSpacePos, lineText.length()), true, new SubAccessor<>(backend, firstNonWhiteSpacePos));\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\treturn false;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLineIfNotEmpty();\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\tprivate <T> boolean formatMultlineCommentOtherLines(String lineText, String indentationString, String newLineString, int endCommentOffset, FormattedTextAccessor<T> backend) {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\/\/ Search for the comment prefix (usually \\\" * \\\"\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tint realCommentStart = 0;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\twhile (realCommentStart < lineText.length() && Character.isWhitespace(lineText.charAt(realCommentStart))) {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t++realCommentStart;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tboolean foundStar = false;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tif (realCommentStart < lineText.length() && startsWith(lineText, realCommentStart, getMultilineCommentLinePrefix())) {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\trealCommentStart += getMultilineCommentLinePrefix().length();\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\tfoundStar = true;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\twhile (realCommentStart < lineText.length() && Character.isWhitespace(lineText.charAt(realCommentStart))) {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\\t++realCommentStart;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\/\/ Compute the standard prefix.\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tStringBuilder prefix = new StringBuilder(indentationString);\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tprefix.append(SPACE_CHAR);\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tprefix.append(getMultilineCommentLinePrefix());\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tprefix.append(makeWhiteSpaces(getWhiteSpacesOnOtherLines()));\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\/\/ Force replacement by the line's prefix\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tint minBoundForEnd = 0;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tif (endCommentOffset > lineText.length() || foundStar || realCommentStart < endCommentOffset) {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\tbackend.replace(0, realCommentStart, prefix.toString());\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\tif (foundStar) {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\\tminBoundForEnd = prefix.length();\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\/\/ Format the comment text\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tif (endCommentOffset <= lineText.length()) {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\/\/ End of comment on the current line.\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\tint endPosition = endCommentOffset;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\tfinal int end = endPosition;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\twhile ((endPosition - 1) >= minBoundForEnd && Character.isWhitespace(lineText.charAt(endPosition - 1))) {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\\t--endPosition;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\tif (endPosition > 0) {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\\t\/\/ Comment end with a text before. Insert a newline character\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\\tbackend.replace(endPosition, end - endPosition, newLineString + indentationString + SPACE_CHAR);\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t} else {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\\t\/\/ Replace spaces before end of comment if they exist\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\\tbackend.replace(endPosition, end - endPosition, indentationString + SPACE_CHAR);\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\/\/ We don't need to treat more line\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\treturn true;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\treturn false;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLineIfNotEmpty();\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\tprivate <T> void formatMultlineComment(String indentationString, String newLineString, FormattedTextAccessor<T> backend) {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tfinal String indent = Strings.emptyIfNull(indentationString);\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tfinal String comment = backend.getCommentText();\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\/\/ Compute the starting offset of the text inside the comment\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tint offset = comment.indexOf(getMultilineCommentStartSymbols());\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tif (offset < 0) {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\tbackend.replace(0, 0, getMultilineCommentStartSymbols());\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\toffset = 0;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t} else {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\\toffset += getMultilineCommentStartSymbols().length();\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\/\/ Compute the ending offset of the text inside the comment\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\tint endOffset = comment.indexOf(getMultilineCommentEndSymbols(), offset);\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\tif (endOffset < 0) {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\\tendOffset = comment.length();\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\\tbackend.replace(endOffset, 0, getMultilineCommentEndSymbols());\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\/\/ Go through the lines\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\tT currentLine = backend.getFirstLine(backend.getCommentOffset());\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\tboolean firstLine = true;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\twhile (currentLine != null) {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\\tString lineText = backend.getLineText(currentLine);\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\\tint lineOffset = backend.getLineOffset(currentLine);\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\\tint lineLength = backend.getLineLength(currentLine);\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\\t\/\/ Clamp the line text to the comment area.\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\\tif (lineOffset < offset) {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\\t\\tfinal int len = offset - lineOffset;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\\t\\tlineText = lineText.substring(len);\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\\t\\tlineOffset += len;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\\t\\tlineLength -= len;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\\tif ((lineOffset + lineLength) > endOffset) {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\\t\\tfinal int len = lineOffset + lineLength - endOffset;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\\t\\tlineText = lineText.substring(0, lineText.length() - len);\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\\t\\tlineLength -= len;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\\tif (firstLine) {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\\t\\tif (formatMultlineCommentFirstLine(lineText, indent, newLineString, endOffset - lineOffset, new SubAccessor(backend, lineOffset))) {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\\t\\t\\tbackend.applyReplacements();\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\\t\\t\\treturn;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\\t\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\\t} else {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\\tif (formatMultlineCommentOtherLines(lineText, indent, newLineString, endOffset - lineOffset, new SubAccessor(backend, lineOffset))) {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\\t\\tbackend.applyReplacements();\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\\t\\treturn;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\tfirstLine = false;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\tcurrentLine = backend.getNextLine(currentLine);\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tbackend.applyReplacements();\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.newLineIfNotEmpty();\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\tpublic interface FormattedTextAccessor<T> {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tT getFirstLine(int offset);\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tT getNextLine(T currentLine);\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tint getLineOffset(T currentLine);\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tint getLineLength(T currentLine);\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tString getLineText(T line);\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tString getCommentText();\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tint getCommentOffset();\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tint getCommentEndOffset();\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tReplacement replace(int offset, int length, String newText);\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tvoid applyReplacements();\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLineIfNotEmpty();\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\tpublic class SubAccessor<T> implements FormattedTextAccessor<T> {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tprivate final FormattedTextAccessor<T> parent;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tprivate final int offsetInParent;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tpublic SubAccessor(FormattedTextAccessor<T> parent, int offsetInParent) {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\tassert parent != null;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\tthis.parent = parent;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\tthis.offsetInParent = offsetInParent;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tpublic T getFirstLine(int offset) {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\treturn this.parent.getFirstLine(offset);\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tpublic T getNextLine(T currentLine) {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\treturn this.parent.getNextLine(currentLine);\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tpublic int getLineOffset(T currentLine) {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\treturn this.parent.getLineOffset(currentLine);\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tpublic int getLineLength(T currentLine) {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\treturn this.parent.getLineLength(currentLine);\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tpublic String getLineText(T line) {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\treturn this.parent.getLineText(line);\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tpublic String getCommentText() {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\treturn this.parent.getCommentText();\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tpublic int getCommentOffset() {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\treturn this.parent.getCommentOffset();\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tpublic int getCommentEndOffset() {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\treturn this.parent.getCommentEndOffset();\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tpublic Replacement replace(int offset, int length, String newText) {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\treturn this.parent.replace(this.offsetInParent + offset, length, newText);\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tpublic final void applyReplacements() {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\tthrow new UnsupportedOperationException();\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLineIfNotEmpty();\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\tpublic static class Line {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tprivate final int offset;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tprivate final int length;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tpublic static Line newInstance(String text, int offset) {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\tif (offset < 0 || offset >= text.length()) {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\\treturn null;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\tint soffset = offset;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\twhile (soffset >= 0 && !isNewLine(text.charAt(soffset))) {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\\t--soffset;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t++soffset;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\tint eoffset = soffset;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\twhile (eoffset < text.length() && !isNewLine(text.charAt(eoffset))) {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\\t++eoffset;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\tfinal int length = \"); \/\/$NON-NLS-1$\n\t\t\t\tit.append(Math.class);\n\t\t\t\tit.append(\".max(0, eoffset - soffset);\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\treturn new Line(soffset, length);\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tprivate Line(int offset, int length) {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\tthis.offset = offset;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\tthis.length = length;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tpublic int getOffset() {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\treturn this.offset;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tpublic int getLength() {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\treturn this.length;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tpublic String toString() {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\treturn \\\"offset: \\\" + getOffset() + \\\"; length: \\\" + getLength();\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLineIfNotEmpty();\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\tpublic static abstract class AbstractReplacementAccessor<T> implements FormattedTextAccessor<T> {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tprivate final String documentation;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tprivate \"); \/\/$NON-NLS-1$\n\t\t\t\tit.append(SortedMap.class);\n\t\t\t\tit.append(\"<Integer, Replacement> replacements;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tprivate boolean applied;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tpublic AbstractReplacementAccessor(String documentation, \"); \/\/$NON-NLS-1$\n\t\t\t\tit.append(SortedMap.class);\n\t\t\t\tit.append(\"<Integer, Replacement> replacements) {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\tthis.documentation = documentation;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\tthis.replacements = replacements;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tprotected final void checkNotApplied() {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\tif (this.applied) {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\\tthrow new IllegalStateException(\\\"Changes are already applied\\\");\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\tthis.applied = true;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tpublic String getCommentText() {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\treturn this.documentation;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tprotected \"); \/\/$NON-NLS-1$\n\t\t\t\tit.append(SortedMap.class);\n\t\t\t\tit.append(\"<Integer, Replacement> getReplacements() {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\tif (this.replacements == null) {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\\tthis.replacements = new \"); \/\/$NON-NLS-1$\n\t\t\t\tit.append(TreeMap.class);\n\t\t\t\tit.append(\"<>();\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\treturn this.replacements;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tpublic Replacement replace(int offset, int length, String newText) {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\tReplacement rep = getReplacements().remove(offset);\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\tif (rep == null) {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\\trep = new Replacement(offset, length, newText);\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t} else {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\\trep = new Replacement(offset, rep.getLength() + length, rep.getText() + newText);\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\tgetReplacements().put(offset, rep);\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\treturn rep;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tprotected static void applyReplacements(\"); \/\/$NON-NLS-1$\n\t\t\t\tit.append(IAppendable.class);\n\t\t\t\tit.append(\" appendable, String text, \"); \/\/$NON-NLS-1$\n\t\t\t\tit.append(Map.class);\n\t\t\t\tit.append(\"<Integer, Replacement> replacements) {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\tint offset = 0;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\tfor (final Replacement replacement : replacements.values()) {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\\tif (replacement.getOffset() < offset) {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\\t\\tappendable.append(\\\"<<<Conflicting replacements>>>\\\");\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\\t} else {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\\t\\tassert offset >= 0;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\\t\\tassert replacement.getOffset() <= text.length();\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\\t\\tString notReplacedString = text.substring(offset, replacement.getOffset());\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\\t\\tappendable.append(notReplacedString);\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\\t\\toffset += notReplacedString.length();\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\\t\\tappendable.append(replacement.getText());\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\\t\\toffset += replacement.getLength();\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\tif (offset < text.length()) {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\\tString notReplacedString = text.substring(offset);\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\\tappendable.append(notReplacedString);\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLineIfNotEmpty();\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\tpublic static abstract class AbstractDebuggingAccessor<T> extends AbstractReplacementAccessor<T> {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tprivate String buffer;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tpublic AbstractDebuggingAccessor(String text, \"); \/\/$NON-NLS-1$\n\t\t\t\tit.append(SortedMap.class);\n\t\t\t\tit.append(\"<Integer, Replacement> replacements) {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\tsuper(text, replacements);\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tprivate String computeBuffer() {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\"); \/\/$NON-NLS-1$\n\t\t\t\tit.append(IAppendable.class);\n\t\t\t\tit.append(\" appendable = new \"); \/\/$NON-NLS-1$\n\t\t\t\tit.append(FakeTreeAppendable.class);\n\t\t\t\tit.append(\"();\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\tapplyReplacements(appendable, getCommentText(), getReplacements());\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\treturn appendable.getContent();\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tpublic String toString() {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\tif (this.buffer == null) {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\\tthis.buffer = computeBuffer();\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\treturn this.buffer;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLineIfNotEmpty();\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tpublic Replacement replace(int offset, int length, String newText) {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\tfinal Replacement rep = super.replace(offset, length, newText);\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\tthis.buffer = computeBuffer();\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\treturn rep;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLineIfNotEmpty();\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLineIfNotEmpty();\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\tpublic static class RegionAccessor extends AbstractReplacementAccessor<\"); \/\/$NON-NLS-1$\n\t\t\t\tit.append(ILineRegion.class);\n\t\t\t\tit.append(\"> {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tprivate final \"); \/\/$NON-NLS-1$\n\t\t\t\tit.append(ITextReplacerContext.class);\n\t\t\t\tit.append(\" context;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tprivate final \"); \/\/$NON-NLS-1$\n\t\t\t\tit.append(ITextRegionAccess.class);\n\t\t\t\tit.append(\" access;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tprivate final \"); \/\/$NON-NLS-1$\n\t\t\t\tit.append(IComment.class);\n\t\t\t\tit.append(\" comment;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tpublic RegionAccessor(\"); \/\/$NON-NLS-1$\n\t\t\t\tit.append(ITextReplacerContext.class);\n\t\t\t\tit.append(\" context, \"); \/\/$NON-NLS-1$\n\t\t\t\tit.append(IComment.class);\n\t\t\t\tit.append(\" comment) {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\tsuper(comment.getText(), null);\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\tthis.context = context;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\tthis.comment = comment;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\tthis.access = comment.getTextRegionAccess();\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLineIfNotEmpty();\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tpublic String getCommentText() {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\treturn this.comment.getText();\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLineIfNotEmpty();\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tpublic String getLineText(\"); \/\/$NON-NLS-1$\n\t\t\t\tit.append(ILineRegion.class);\n\t\t\t\tit.append(\" line) {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\"); \/\/$NON-NLS-1$\n\t\t\t\tit.append(ITextSegment.class);\n\t\t\t\tit.append(\" segment = this.access.regionForOffset(line.getOffset(), line.getLength());\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\treturn segment.getText();\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLineIfNotEmpty();\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tpublic int getCommentOffset() {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\treturn this.comment.getOffset();\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLineIfNotEmpty();\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tpublic int getCommentEndOffset() {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\treturn this.comment.getEndOffset();\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLineIfNotEmpty();\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tpublic \"); \/\/$NON-NLS-1$\n\t\t\t\tit.append(ILineRegion.class);\n\t\t\t\tit.append(\" getFirstLine(int offset) {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\treturn this.access.regionForLineAtOffset(offset);\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLineIfNotEmpty();\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tpublic \"); \/\/$NON-NLS-1$\n\t\t\t\tit.append(ILineRegion.class);\n\t\t\t\tit.append(\" getNextLine(\"); \/\/$NON-NLS-1$\n\t\t\t\tit.append(ILineRegion.class);\n\t\t\t\tit.append(\" currentLine) {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\treturn currentLine.getNextLine();\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLineIfNotEmpty();\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tpublic int getLineOffset(\"); \/\/$NON-NLS-1$\n\t\t\t\tit.append(ILineRegion.class);\n\t\t\t\tit.append(\" currentLine) {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\treturn currentLine.getOffset() - getCommentOffset();\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLineIfNotEmpty();\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tpublic int getLineLength(\"); \/\/$NON-NLS-1$\n\t\t\t\tit.append(ILineRegion.class);\n\t\t\t\tit.append(\" currentLine) {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\treturn currentLine.getLength();\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLineIfNotEmpty();\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tpublic void applyReplacements() {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\tcheckNotApplied();\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\tfor (Replacement replacement : getReplacements().values()) {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\\t\"); \/\/$NON-NLS-1$\n\t\t\t\tit.append(ITextSegment.class);\n\t\t\t\tit.append(\" target = this.access.regionForOffset(replacement.getOffset() + getCommentOffset(), replacement.getLength());\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\\tthis.context.addReplacement(target.replaceWith(replacement.getText()));\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLineIfNotEmpty();\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLineIfNotEmpty();\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\tprivate static class AppendableAccessor extends AbstractReplacementAccessor<Line> {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tprivate final \"); \/\/$NON-NLS-1$\n\t\t\t\tit.append(IAppendable.class);\n\t\t\t\tit.append(\" target;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tprivate final int commentOffset;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tprivate final int commentEndOffset;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tpublic AppendableAccessor(\"); \/\/$NON-NLS-1$\n\t\t\t\tit.append(IAppendable.class);\n\t\t\t\tit.append(\" target, String documentation, \"); \/\/$NON-NLS-1$\n\t\t\t\tit.append(SortedMap.class);\n\t\t\t\tit.append(\"<Integer, Replacement> replacements, int commentOffset, int commentEndOffset) {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\tsuper(documentation, replacements);\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\tthis.target = target;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\tthis.commentOffset = commentOffset;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\tthis.commentEndOffset = commentEndOffset;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLineIfNotEmpty();\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tpublic Line getFirstLine(int offset) {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\treturn Line.newInstance(getCommentText(), offset);\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLineIfNotEmpty();\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tpublic Line getNextLine(Line currentLine) {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\tint index = getCommentText().indexOf(NL_CHAR, currentLine.getOffset());\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\tif (index < 0) {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t\\treturn null;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\treturn Line.newInstance(getCommentText(), index + 1);\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLineIfNotEmpty();\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tpublic int getLineOffset(Line currentLine) {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\treturn currentLine.getOffset();\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLineIfNotEmpty();\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tpublic int getLineLength(Line currentLine) {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\treturn currentLine.getLength();\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLineIfNotEmpty();\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tpublic String getLineText(Line line) {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\tfinal int offset = line.getOffset();\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\treturn getCommentText().substring(offset, offset + line.getLength());\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLineIfNotEmpty();\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tpublic int getCommentOffset() {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\treturn this.commentOffset;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLineIfNotEmpty();\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tpublic int getCommentEndOffset() {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\treturn this.commentEndOffset;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLineIfNotEmpty();\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tpublic void applyReplacements() {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\tcheckNotApplied();\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\tapplyReplacements(this.target, getCommentText(), getReplacements());\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLineIfNotEmpty();\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLineIfNotEmpty();\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\tpublic static class Replacement {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tprivate final int offset;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tprivate final int length;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tprivate final String text;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tpublic Replacement(int offset, int length, String text) {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\tthis.offset = offset;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\tthis.length = length;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\tthis.text = text;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tpublic int getOffset() {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\treturn this.offset;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tpublic int getLength() {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\treturn this.length;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tpublic String getText() {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\treturn this.text;\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\tpublic String toString() {\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t\\treturn \\\"offset: \\\" + getOffset() + \\\"; length: \\\" + getLength() + \\\"; new text: \\\" + getText();\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLineIfNotEmpty();\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"\\t}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLineIfNotEmpty();\n\t\t\t\tit.newLine();\n\t\t\t\tit.append(\"}\"); \/\/$NON-NLS-1$\n\t\t\t\tit.newLineIfNotEmpty();\n\t\t\t\tit.newLine();\n\t\t\t}\n\n\t\t};\n\t\tJavaFileAccess createJavaFile = getFileAccessFactory().createJavaFile(formatter, content);\n\t\tcreateJavaFile.writeTo(getSrcGen());\n\t}","label":0}
{"text":"public static void verifyChain(List<X509Certificate> chain)\n\t{\n\t\tif (chain == null || chain.isEmpty())\n\t\t\tthrow new IllegalArgumentException(\"Must provide a chain that is non-null and non-empty\");\n\n\t\tfor (int i = 0; i < chain.size(); i++)\n\t\t{\n\t\t\tfinal X509Certificate certificate = chain.get(i);\n\t\t\tfinal int issuerIndex = (i != 0) ?\n\t\t\t                        i - 1 :\n\t\t\t                        0; \/\/ The index of the issuer is the previous cert (& the root must, of course, sign itself)\n\t\t\tfinal X509Certificate issuer = chain.get(issuerIndex);\n\n\t\t\t\/\/ Verify the certificate was indeed issued by the previous certificate in the chain\n\t\t\ttry\n\t\t\t{\n\t\t\t\tcertificate.verify(issuer.getPublicKey());\n\t\t\t}\n\t\t\tcatch (GeneralSecurityException e)\n\t\t\t{\n\t\t\t\tfinal String msg = \"Failure verifying \" + certificate + \" against claimed issuer \" + issuer;\n\n\t\t\t\tthrow new IllegalArgumentException(msg + \": \" + e.getMessage(), e);\n\t\t\t}\n\t\t}\n\t}","label":0}
{"text":"def verify(opts):\n    \n    resources = _load(opts.resources, opts.output_dir)\n    if opts.all:\n        opts.resource_names = ALL\n    invalid = _invalid(resources, opts.resource_names)\n    if not invalid:\n        if not opts.quiet:\n            print(\"All resources successfully downloaded\")\n        return 0\n    else:\n        if not opts.quiet:\n            print(\"Invalid or missing resources: {}\".format(', '.join(invalid)))\n        return 1","label":0}
{"text":"void split(treeNode parent, Point newCentre, int newCentreIndex){\n\t\t\n\t\t\/\/loop counter variable\n\t\tint i;\n\n\t\t\/\/1. Counts how many points belong to the new and how many points belong to the old centre\n\t\tint nOld = 0;\n\t\tint nNew = 0;\n\t\tfor(i=0;i<parent.n;i++){\n\t\t\tPoint centre = determineClosestCentre(parent.points[i], parent.centre, newCentre);\n\t\t\tif(centre == newCentre){\n\t\t\t\tnNew++;\n\t\t\t} else {\n\t\t\t\tnOld++;\n\t\t\t} \n\t\t}\n\n\t\t\/\/2. initalizes the arrays for the pointer\n\t\t\n\t\t\/\/array for pointer on the points belonging to the old centre\n\t\tPoint[] oldPoints = new Point[nOld];\n\n\t\t\/\/array for pointer on the points belonging to the new centre\n\t\tPoint[] newPoints = new Point[nNew];\n\n\t\tint indexOld = 0;\n\t\tint indexNew = 0;\n\n\t\tfor(i=0;i<parent.n;i++){\n\t\t\tPoint centre = determineClosestCentre(parent.points[i],parent.centre,newCentre);\n\t\t\tif(centre == newCentre){\n\t\t\t\tnewPoints[indexNew] = parent.points[i];\n\t\t\t\tnewPoints[indexNew].centreIndex = newCentreIndex;\n\t\t\t\tindexNew++;\n\t\t\t} else if(centre == parent.centre){\n\t\t\t\toldPoints[indexOld] = parent.points[i];\n\t\t\t\tindexOld++;\n\t\t\t} else {\n\t\t\t\t\/\/printf(\"ERROR !!! NO CENTER NEAREST !! \\n\");\n\t\t\t}\n\t\t}\n\n\t\t\/\/left child: old centre\n\t\ttreeNode lc = new treeNode(nOld, oldPoints, \n\t\t\t\t\t\tparent.centre, parent);\n\t\t\/*lc.centre = parent.centre;\n\t\tlc.points = oldPoints;\n\t\tlc.n = nOld;\n\n\t\tlc.lc = null;\n\t\tlc.rc = null;\n\t\tlc.parent = parent;\n\n\t\ttreeNodeTargetFunctionValue(lc);*\/\n\t\t\n\t\t\/\/right child: new centre\n\t\ttreeNode rc = new treeNode(nNew, newPoints, newCentre, \n\t\t\t\t\t\t\t parent);\n\t\t\/*rc.centre = newCentre;\n\t\trc.points = newPoints;\n\t\trc.n = nNew;\n\n\t\trc.lc = null;\n\t\trc.rc = null;\n\t\trc.parent = parent;\n\n\t\ttreeNodeTargetFunctionValue(rc);*\/\n\n\t\t\/\/set childs of the parent node\n\t\tparent.lc = lc;\n\t\tparent.rc = rc;\n\n\t\t\/\/propagate the cost changes to the parent nodes\n\t\twhile(parent != null){\n\t\t\tparent.cost = parent.lc.cost + parent.rc.cost;\n\t\t\tparent = parent.parent;\n\t\t}\n\n\t}","label":0}
{"text":"func (s *Service) newClientResolveRevision(repo *v1alpha1.Repository, revision string) (git.Client, string, error) {\n\trepoURL := git.NormalizeGitURL(repo.Repo)\n\tappRepoPath := tempRepoPath(repoURL)\n\tgitClient, err := s.gitFactory.NewClient(repo.Repo, appRepoPath, repo.Username, repo.Password, repo.SSHPrivateKey, repo.InsecureIgnoreHostKey)\n\tif err != nil {\n\t\treturn nil, \"\", err\n\t}\n\tcommitSHA, err := gitClient.LsRemote(revision)\n\tif err != nil {\n\t\treturn nil, \"\", err\n\t}\n\treturn gitClient, commitSHA, nil\n}","label":0}
{"text":"def del_record(cls, fqdn, name, type):\n        \"\"\"\"\"\"\n        meta = cls.get_fqdn_info(fqdn)\n        url = meta['domain_records_href']\n        delete_url = url\n        if name:\n            delete_url = '%s\/%s' % (delete_url, name)\n        if type:\n            delete_url = '%s\/%s' % (delete_url, type)\n        return cls.json_delete(delete_url)","label":0}
{"text":"def request_point_create(self, foc, lid, pid, control_cb=None, save_recent=0):\n        \n        Validation.foc_check(foc)\n        lid = Validation.lid_check_convert(lid)\n        pid = Validation.pid_check_convert(pid)\n        save_recent = validate_int(save_recent, 'save_recent')\n        logger.debug(\"request_point_create foc=%i lid='%s' pid='%s' save_recent=%d\", foc, lid, pid, save_recent)\n\n        if foc == R_CONTROL:\n            Validation.callable_check(control_cb)\n            if save_recent:\n                logger.warning('ignoring non-zero save_recent value for control')\n            evt = self._request(foc, C_CREATE, (lid,), {'lid': pid}, is_crud=True)\n            with self.__pending_controls:\n                self.__pending_controls[evt.id_] = control_cb\n            return evt\n        elif control_cb:\n            raise ValueError('callback specified for Feed')\n        else:\n            return self._request(foc, C_CREATE, (lid,), {'lid': pid, 'saveRecent': save_recent}, is_crud=True)","label":0}
{"text":"func (s *LDAPService) SearchLdap(p *SearchLdapParams) (*SearchLdapResponse, error) {\n\tresp, err := s.cs.newRequest(\"searchLdap\", p.toURLValues())\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tvar r SearchLdapResponse\n\tif err := json.Unmarshal(resp, &r); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn &r, nil\n}","label":0}
{"text":"private void copyObjectIDsToBatch(BatchResult batchResult, DBObjectBatch dbObjBatch) {\r\n        if (batchResult.getResultObjectCount() < dbObjBatch.getObjectCount()) {\r\n            m_logger.warn(\"Batch result returned fewer objects ({}) than input batch ({})\",\r\n                          batchResult.getResultObjectCount(), dbObjBatch.getObjectCount());\r\n        }\r\n        Iterator<ObjectResult> resultIter = batchResult.getResultObjects().iterator();\r\n        Iterator<DBObject> objectIter = dbObjBatch.getObjects().iterator();\r\n        while (resultIter.hasNext()) {\r\n            if (!objectIter.hasNext()) {\r\n                m_logger.warn(\"Batch result has more objects ({}) than input batch ({})!\",\r\n                              batchResult.getResultObjectCount(), dbObjBatch.getObjectCount());\r\n                break;\r\n            }\r\n            ObjectResult objResult = resultIter.next();\r\n            DBObject dbObj = objectIter.next();\r\n            if (Utils.isEmpty(dbObj.getObjectID())) {\r\n                dbObj.setObjectID(objResult.getObjectID());\r\n            } else if (!dbObj.getObjectID().equals(objResult.getObjectID())) {\r\n                m_logger.warn(\"Batch results out of order: expected ID '{}', got '{}'\",\r\n                              dbObj.getObjectID(), objResult.getObjectID());\r\n            }\r\n        }\r\n    }","label":0}
{"text":"@SuppressWarnings(\"unused\")\n  @Deprecated\n  private void validateSubIfd(IFD ifd, int n) {\n    boolean thumbnail = ifd.getParent().getImageSize() > ifd.getImageSize();\n    IfdTags metadata = ifd.getMetadata();\n\n    checkRequiredTag(metadata, \"ImageLength\", 1, \"SubIFD\" + n);\n    checkRequiredTag(metadata, \"ImageWidth\", 1, \"SubIFD\" + n);\n    int spp = -1;\n    if (checkRequiredTag(metadata, \"SamplesPerPixel\", 1, \"SubIFD\" + n)) {\n      spp = (int) metadata.get(\"SamplesPerPixel\").getFirstNumericValue();\n      checkRequiredTag(metadata, \"BitsPerSample\", spp, \"SubIFD\" + n);\n    }\n    if (checkRequiredTag(metadata, \"Compression\", 1, \"SubIFD\" + n)) {\n      int comp = (int) metadata.get(\"Compression\").getFirstNumericValue();\n      if (comp == 1)\n        checkForbiddenTag(metadata, \"CompressedBitsPerPixel\", \"IFD\" + n);\n    }\n    checkRequiredTag(metadata, \"XResolution\", 1, \"SubIFD\" + n);\n    checkRequiredTag(metadata, \"YResolution\", 1, \"SubIFD\" + n);\n    checkForbiddenTag(metadata, \"SubIFDs\", \"IFD\" + n);\n    if (thumbnail)\n      checkRequiredTag(metadata, \"NewSubfileType\", 1, new long[] {1}, \"SubIFD\" + n);\n    else\n      checkRequiredTag(metadata, \"NewSubfileType\", 1, new long[] {0}, \"SubIFD\" + n);\n    if (checkRequiredTag(metadata, \"PhotometricInterpretation\", 1, new long[] {1, 2, 6, 32803,\n        32767}, \"SubIFD\" + n)) {\n      int photo = (int) metadata.get(\"PhotometricInterpretation\").getFirstNumericValue();\n      if (photo != 6) {\n        checkForbiddenTag(metadata, \"YCbCrCoefficients\", \"SubIFD\" + n);\n        checkForbiddenTag(metadata, \"YCbCrSubSampling\", \"SubIFD\" + n);\n        checkForbiddenTag(metadata, \"YCbCrPositioning\", \"SubIFD\" + n);\n        checkForbiddenTag(metadata, \"ReferenceBlackWhite\", \"SubIFD\" + n);\n      }\n      if (photo == 2 || photo == 3) {\n        if (spp != 3) {\n          validation.addError(\"Invalid SampesPerPixel value fo TiffEP\", \"SubIFD\" + n, spp);\n        }\n      } else if (photo == 1 || photo == 32803) {\n        if (spp != 1) {\n          validation.addError(\"Invalid SampesPerPixel value fo TiffEP\", \"SubIFD\" + n, spp);\n        }\n        if (photo == 32803) {\n          checkRequiredTag(metadata, \"CFARepeatPatternDim\", 2, \"SubIFD\" + n);\n          checkRequiredTag(metadata, \"CFAPattern\", -1, \"SubIFD\" + n);\n        }\n      }\n    }\n    checkRequiredTag(metadata, \"PlanarConfiguration\", 1, new long[] {1, 2}, \"SubIFD\" + n);\n    checkRequiredTag(metadata, \"ResolutionUnit\", 1, new long[] {1, 2, 3}, \"SubIFD\" + n);\n\n    if (!thumbnail) {\n      if (ifd.hasStrips()) {\n        checkRequiredTag(metadata, \"StripBYTECount\", -1, \"SubIFD\" + n);\n        checkRequiredTag(metadata, \"StripOffsets\", -1, \"SubIFD\" + n);\n        checkRequiredTag(metadata, \"RowsPerStrip\", 1, \"SubIFD\" + n);\n        if (ifd.hasTiles()) {\n          validation.addErrorLoc(\"Image in both strips and tiles\", \"SubIFD\");\n        }\n      } else if (ifd.hasTiles()) {\n        checkRequiredTag(metadata, \"TileLength\", 1, \"SubIFD\" + n);\n        checkRequiredTag(metadata, \"TileOffsets\", 1, \"SubIFD\" + n);\n        checkRequiredTag(metadata, \"TileWidth\", -1, \"SubIFD\" + n);\n      }\n    } else {\n      checkRequiredTag(metadata, \"StripBYTECount\", -1, \"SubIFD\" + n);\n      checkRequiredTag(metadata, \"StripOffsets\", -1, \"SubIFD\" + n);\n      checkRequiredTag(metadata, \"RowsPerStrip\", 1, \"SubIFD\" + n);\n      checkForbiddenTag(metadata, \"TileLength\", \"SubIFD\" + n);\n      checkForbiddenTag(metadata, \"TileOffsets\", \"SubIFD\" + n);\n      checkForbiddenTag(metadata, \"TileWidth\", \"SubIFD\" + n);\n    }\n\n    int nycbcr = 0;\n    if (metadata.containsTagId(TiffTags.getTagId(\"YCbCrCoefficients\")))\n      nycbcr++;\n    if (metadata.containsTagId(TiffTags.getTagId(\"YCbCrSubSampling\")))\n      nycbcr++;\n    if (metadata.containsTagId(TiffTags.getTagId(\"YCbCrPositioning\")))\n      nycbcr++;\n    if (metadata.containsTagId(TiffTags.getTagId(\"ReferenceBlackWhite\")))\n      nycbcr++;\n    if (nycbcr > 0 && nycbcr != 4) {\n      checkRequiredTag(metadata, \"YCbCrCoefficients\", 3, \"SubIFD\" + n);\n      checkRequiredTag(metadata, \"YCbCrSubSampling\", 2, \"SubIFD\" + n);\n      checkRequiredTag(metadata, \"YCbCrPositioning\", 1, \"SubIFD\" + n);\n      checkRequiredTag(metadata, \"ReferenceBlackWhite\", 6, \"SubIFD\" + n);\n    }\n    if (thumbnail) {\n      checkForbiddenTag(metadata, \"YCbCrCoefficients\", \"IFD\" + n);\n      checkForbiddenTag(metadata, \"YCbCrSubSampling\", \"IFD\" + n);\n      checkForbiddenTag(metadata, \"YCbCrPositioning\", \"IFD\" + n);\n      checkForbiddenTag(metadata, \"ReferenceBlackWhite\", \"IFD\" + n);\n    }\n\n    checkForbiddenTag(metadata, \"PrimaryChromaticities\", \"IFD\" + n);\n    checkForbiddenTag(metadata, \"WhitePoint\", \"IFD\" + n);\n    checkForbiddenTag(metadata, \"TransferFunction\", \"IFD\" + n);\n  }","label":0}
{"text":"public Iterable<ESigItemIssue> getIssues() {\n        if (sortIssues) {\n            sortIssues = false;\n            Collections.sort(issues);\n        }\n        \n        return issues;\n    }","label":0}
{"text":"func (r *Ring) Capacity() int {\n\tr.Lock()\n\tdefer r.Unlock()\n\n\treturn r.capacity()\n}","label":0}
{"text":"public function operatorEval( core_kernel_classes_Container $firstPart,  core_kernel_classes_Container $secondPart)\r\n    {\r\n        $returnValue = (bool) false;\r\n\r\n        \r\n        if ($firstPart instanceof core_kernel_classes_Resource ) {\r\n        \t$firstPart = new core_kernel_classes_Literal($firstPart->getUri());\r\n\t\t}\r\n        if ($secondPart instanceof core_kernel_classes_Resource ) {\r\n       \t\t$secondPart = new core_kernel_classes_Literal($secondPart->getUri());\r\n        }\r\n        common_Logger::d('First Value : '. $firstPart->literal, array('Generis Expression'));\r\n        common_Logger::d('Second Value : '. $secondPart->literal, array('Generis Expression'));\r\n        common_Logger::d('Operator : '. $this->getLogicalOperator()->getLabel(), array('Generis Expression'));\r\n        \r\n        switch($this->getLogicalOperator()->getUri()) {\r\n\t\t\tcase RulesRdf::INSTANCE_EQUALS_OPERATOR_URI : {\r\n\t\t\t\t$returnValue = $this->evalEquals($firstPart,$secondPart);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase RulesRdf::INSTANCE_DIFFERENT_OPERATOR_URI : {\r\n\t\t\t\t$returnValue = $this->evalDifferent($firstPart,$secondPart);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\tcase RulesRdf::INSTANCE_SUP_EQ_OPERATOR_URI : {\r\n\t\t\t\t$returnValue = $this->evalSupEquals($firstPart,$secondPart);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase RulesRdf::INSTANCE_INF_EQ_OPERATOR_URI : {\r\n\t\t\t\t$returnValue = $this->evalInfEquals($firstPart,$secondPart);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase RulesRdf::INSTANCE_SUP_OPERATOR_URI : {\r\n\t\t\t\t$returnValue = $this->evalSup($firstPart,$secondPart);\t\t\t\t\r\n\t\t\t\tbreak;\t\t\t\r\n\t\t\t}\r\n\t\t\tcase RulesRdf::INSTANCE_INF_OPERATOR_URI : {\r\n\t\t\t\t$returnValue = $this->evalInf($firstPart,$secondPart);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tdefault: {\r\n\t\t\t\tvar_dump($this);\r\n\t\t\t\tthrow new common_Exception('Expression ' . $this->getLabel() . ' do not have knowm operator');\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t$logValue = $returnValue ? ' TRUE ' : ' FALSE ';\r\n\t\tcommon_Logger::d('Expression Value : '. $logValue, array('Generis Expression'));\r\n        \r\n\r\n        return (bool) $returnValue;\r\n    }","label":0}
{"text":"@Override\n    public long skip(long toSkip) throws IOException {\n        for (long i = 0; i < toSkip; i++) {\n            int intRead = read();\n            if (intRead == -1) return i;\n        }\n        return toSkip;\n    }","label":0}
{"text":"def is_webdriver_mobile(webdriver):\n        \n        browser = webdriver.capabilities['browserName']\n\n        if (browser == u('iPhone') or \n            browser == u('android')):\n            return True\n        else:\n            return False","label":0}
{"text":"public boolean isDryRun() {\n\tString run = getSingle(\"dryrun\");\n\tif (run == null) return false;\n\tif (run.equalsIgnoreCase(\"yes\")) return true;\n\treturn false;\n    }","label":0}
{"text":"public <U extends T, A, B, C> OngoingMatchingR3<T, U, A, B, C, R> when(\n      DecomposableMatchBuilder3<U, A, B, C> decomposableMatchBuilder) {\n    return new OngoingMatchingR3<>(this, decomposableMatchBuilder.build());\n  }","label":0}
{"text":"public static function buildDefaultTime($duration) {\n\t\t$minutes = $duration % HOUR;\n\t\t$duration = $duration - $minutes;\n\t\t$hours = $duration \/ HOUR;\n\n\t\t$seconds = $minutes % MINUTE;\n\t\treturn static::pad($hours) . ':' . static::pad($minutes \/ MINUTE) . ':' . static::pad($seconds \/ SECOND);\n\t}","label":0}
{"text":"public Article get(int id) {\n\t\tlong time = System.currentTimeMillis();\n\n\t\t\/\/ Look for an article with this id in the Article HashMap\n\t\tfor(List<Article> articleList : articleMap.values()) {\n\t\t\tfor(Article article : articleList) {\n\t\t\t\tif(article.getId() == id) {\n\t\t\t\t\tlog(\"get(\" + id + \") took \" + (System.currentTimeMillis() - time) + \"ms\");\n\t\t\t\t\treturn article;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t\/\/ If none was found, try searching in the favorites database\n\t\tfor(Article article : favoriteDatabase.getAll()) {\n\t\t\tif(article.getId() == id) {\n\t\t\t\tlog(\"get(\" + id + \") took \" + (System.currentTimeMillis() - time) + \"ms\");\n\t\t\t\treturn article;\n\t\t\t}\n\t\t}\n\n\t\tlog(\"Could not find Article with id \" + id, Log.WARN);\n\t\tlog(\"get(\" + id + \") took \" + (System.currentTimeMillis() - time) + \"ms\");\n\t\treturn null;\n\t}","label":0}
{"text":"func (s *EC2InstanceDetails) SetSizeFlexEligible(v bool) *EC2InstanceDetails {\n\ts.SizeFlexEligible = &v\n\treturn s\n}","label":0}
{"text":"public Object opt(int index) {\n\t\treturn (index < 0 || index >= this.length()) ? null : this.list\n\t\t\t\t.get(index);\n\t}","label":0}
{"text":"func AsPartialObjectMetadata(m metav1.Object) *metav1beta1.PartialObjectMetadata {\n\tswitch t := m.(type) {\n\tcase *metav1.ObjectMeta:\n\t\treturn &metav1beta1.PartialObjectMetadata{ObjectMeta: *t}\n\tdefault:\n\t\treturn &metav1beta1.PartialObjectMetadata{\n\t\t\tObjectMeta: metav1.ObjectMeta{\n\t\t\t\tName:                       m.GetName(),\n\t\t\t\tGenerateName:               m.GetGenerateName(),\n\t\t\t\tNamespace:                  m.GetNamespace(),\n\t\t\t\tSelfLink:                   m.GetSelfLink(),\n\t\t\t\tUID:                        m.GetUID(),\n\t\t\t\tResourceVersion:            m.GetResourceVersion(),\n\t\t\t\tGeneration:                 m.GetGeneration(),\n\t\t\t\tCreationTimestamp:          m.GetCreationTimestamp(),\n\t\t\t\tDeletionTimestamp:          m.GetDeletionTimestamp(),\n\t\t\t\tDeletionGracePeriodSeconds: m.GetDeletionGracePeriodSeconds(),\n\t\t\t\tLabels:                     m.GetLabels(),\n\t\t\t\tAnnotations:                m.GetAnnotations(),\n\t\t\t\tOwnerReferences:            m.GetOwnerReferences(),\n\t\t\t\tFinalizers:                 m.GetFinalizers(),\n\t\t\t\tClusterName:                m.GetClusterName(),\n\t\t\t\tInitializers:               m.GetInitializers(),\n\t\t\t\tManagedFields:              m.GetManagedFields(),\n\t\t\t},\n\t\t}\n\t}\n}","label":0}
{"text":"func (s *DeleteRuleGroupInput) SetRuleGroupId(v string) *DeleteRuleGroupInput {\n\ts.RuleGroupId = &v\n\treturn s\n}","label":0}
{"text":"def find_service_by_type(self, service_type):\n        \n        for service in self._services:\n            if service_type == service.type:\n                return service\n        return None","label":0}
{"text":"func (s *StandardsSubscriptionRequest) SetStandardsInput(v map[string]*string) *StandardsSubscriptionRequest {\n\ts.StandardsInput = v\n\treturn s\n}","label":0}
{"text":"def tokenize_words(self):\n        \n        if not self.is_tagged(SENTENCES):\n            self.tokenize_sentences()\n        tok = self.__word_tokenizer\n        text = self.text\n        dicts = []\n        for sentence in self[SENTENCES]:\n            sent_start, sent_end = sentence[START], sentence[END]\n            sent_text = text[sent_start:sent_end]\n            spans = tok.span_tokenize(sent_text)\n            for start, end in spans:\n                dicts.append({START: start+sent_start, END: end+sent_start, TEXT: sent_text[start:end]})\n        self[WORDS] = dicts\n        return self","label":0}
{"text":"public FieldSchema getField(String name) {\n    for (FieldSchema field : fieldSchemas)\n      if (field.getName().equals(name))\n        return field;\n    return null;\n  }","label":0}
{"text":"private void processCalendars()\n   {\n      List<Row> rows = getRows(\"calendar\", null, null);\n      m_reader.processCalendars(rows);\n   }","label":0}
{"text":"func MergedAddresses(machineAddresses, providerAddresses []Address) []Address {\n\tmerged := make([]Address, 0, len(providerAddresses)+len(machineAddresses))\n\tproviderValues := set.NewStrings()\n\tfor _, address := range providerAddresses {\n\t\t\/\/ Older versions of Juju may have stored an empty address so ignore it here.\n\t\tif address.Value == \"\" || providerValues.Contains(address.Value) {\n\t\t\tcontinue\n\t\t}\n\t\tproviderValues.Add(address.Value)\n\t\tmerged = append(merged, address)\n\t}\n\tfor _, address := range machineAddresses {\n\t\tif !providerValues.Contains(address.Value) {\n\t\t\tmerged = append(merged, address)\n\t\t}\n\t}\n\treturn merged\n}","label":0}
{"text":"function () {\n\t\t\tvar series = this,\n\t\t\t\tpoints = series.points,\n\t\t\t\toptions,\n\t\t\t\tlevel,\n\t\t\t\tdataLabelsGroup = this.dataLabelsGroup,\n\t\t\t\tdataLabels;\n\t\t\teach(points, function (point) {\n\t\t\t\tif (point.node.isVisible) {\n\t\t\t\t\tlevel = series.levelMap[point.level];\n\t\t\t\t\tif (!point.isLeaf || level) {\n\t\t\t\t\t\toptions = undefined;\n\t\t\t\t\t\t\/\/ If not a leaf, then label should be disabled as default\n\t\t\t\t\t\tif (!point.isLeaf) {\n\t\t\t\t\t\t\toptions = {enabled: false};\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (level) {\n\t\t\t\t\t\t\tdataLabels = level.dataLabels;\n\t\t\t\t\t\t\tif (dataLabels) {\n\t\t\t\t\t\t\t\toptions = merge(options, dataLabels);\n\t\t\t\t\t\t\t\tseries._hasPointLabels = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\toptions = merge(options, point.options.dataLabels);\n\t\t\t\t\t\tpoint.dlOptions = options;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdelete point.dlOptions;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\tthis.dataLabelsGroup = this.group;\n\t\t\tSeries.prototype.drawDataLabels.call(this);\n\t\t\tthis.dataLabelsGroup = dataLabelsGroup;\n\t\t}","label":0}
{"text":"def conv3x3(in_planes, out_planes, fn, stride=1):\n    \"\"\"\"\"\"\n    return fn(in_planes, out_planes, kernel_size=3, stride=stride, padding=1, bias=False)","label":0}
{"text":"function _newGraphSONMapper() {\n        return Tinkerpop.GraphSONMapper.buildP()\n            .then(function (builder) {\n            return builder.embedTypesP(true);\n        })\n            .then(function (builder) {\n            return builder.createP();\n        });\n    }","label":0}
{"text":"public static MethodAnnotation fromVisitedMethod(PreorderVisitor visitor) {\n        String className = visitor.getDottedClassName();\n        MethodAnnotation result = new MethodAnnotation(className, visitor.getMethodName(), visitor.getMethodSig(), visitor\n                .getMethod().isStatic());\n\n        \/\/ Try to find the source lines for the method\n        SourceLineAnnotation srcLines = SourceLineAnnotation.fromVisitedMethod(visitor);\n        result.setSourceLines(srcLines);\n\n        return result;\n    }","label":0}
{"text":"public function render(Render $renderer)\n\t{\n\t\t$legend = '';\n\n\t\t\/\/Make sure the legend is added if needed\n\t\tif ( !is_null($this->getLegend()) )\n\t\t{\n\t\t\t$legend = Html::tag('legend', [], $this->getLegend());\n\t\t}\n\n\t\t\/\/Makes sure the legend is added if one exists\n\t\t$elements = $legend;\n\n\t\t\/\/Render all the elements\n\t\tforeach ( $this->getContents() as $element )\n\t\t{\n\t\t\t$elements .= \"\\n\" . $renderer->render($element);\n\t\t}\n\n\t\treturn Html::tag('fieldset', $this->getAttributes(), $elements);\n\t}","label":0}
{"text":"public static String urlToString(URL url) {\n        return Checker.isNull(url) ? \"\" : url.toString().replaceAll(\"file:\" + (Checker.isWindows() ? \"\/?\" : \"\"), \"\");\n    }","label":0}
{"text":"public function render($controllerName)\n    {\n        $controller = $this->getControllerName($controllerName);\n        if (null === $controller) {\n            throw new ControllerNotFoundException(sprintf('Could not find controller \"%s\".', $controllerName));\n        }\n\n        $route = $this->getRoute($controller);\n        if (null === $route) {\n            throw new RouteNotFoundException(sprintf('Could not find route for controller \"%s\".', $controllerName));\n        }\n\n        $this->routeRenderer->render($route[1], $route[0]);\n    }","label":0}
{"text":"func (cr *s3ChunkedReader) readS3ChunkHeader() {\n\t\/\/ Read the first chunk line until CRLF.\n\tvar hexChunkSize, hexChunkSignature []byte\n\thexChunkSize, hexChunkSignature, cr.err = readChunkLine(cr.reader)\n\tif cr.err != nil {\n\t\treturn\n\t}\n\t\/\/ <hex>;token=value - converts the hex into its uint64 form.\n\tcr.n, cr.err = parseHexUint(hexChunkSize)\n\tif cr.err != nil {\n\t\treturn\n\t}\n\tif cr.n == 0 {\n\t\tcr.err = io.EOF\n\t}\n\t\/\/ Save the incoming chunk signature.\n\tcr.chunkSignature = string(hexChunkSignature)\n}","label":0}
{"text":"func NewLDAPClientConfig(URL, bindDN, bindPassword, CA string, insecure bool) (ldapclient.Config, error) {\n\turl, err := ParseURL(URL)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"Error parsing URL: %v\", err)\n\t}\n\n\ttlsConfig := &tls.Config{}\n\tif len(CA) > 0 {\n\t\troots, err := cert.NewPool(CA)\n\t\tif err != nil {\n\t\t\treturn nil, fmt.Errorf(\"error loading cert pool from ca file %s: %v\", CA, err)\n\t\t}\n\t\ttlsConfig.RootCAs = roots\n\t}\n\n\treturn &ldapClientConfig{\n\t\tscheme:       url.Scheme,\n\t\thost:         url.Host,\n\t\tbindDN:       bindDN,\n\t\tbindPassword: bindPassword,\n\t\tinsecure:     insecure,\n\t\ttlsConfig:    tlsConfig,\n\t}, nil\n}","label":0}
{"text":"func listServiceLB(ctx *cli.Context) {\n\n\ttenantName := ctx.String(\"tenant\")\n\tif len(tenantName) == 0 {\n\t\ttenantName = \"default\"\n\t}\n\t_, err := getClient(ctx).TenantGet(tenantName)\n\terrCheck(ctx, err)\n\n\tsvcList, err := getClient(ctx).ServiceLBList()\n\terrCheck(ctx, err)\n\n\tfiltered := []*contivClient.ServiceLB{}\n\n\tif ctx.Bool(\"all\") {\n\t\tfiltered = *svcList\n\t} else {\n\t\tfor _, svc := range *svcList {\n\t\t\tif svc.TenantName == tenantName {\n\t\t\t\tfiltered = append(filtered, svc)\n\t\t\t}\n\t\t}\n\t}\n\n\tif ctx.Bool(\"json\") {\n\t\tdumpJSONList(ctx, filtered)\n\t} else if ctx.Bool(\"quiet\") {\n\t\tservices := \"\"\n\t\tfor _, service := range filtered {\n\t\t\tservices += service.ServiceName + \"\\n\"\n\t\t}\n\t\tos.Stdout.WriteString(services)\n\t} else {\n\n\t\twriter := tabwriter.NewWriter(os.Stdout, 0, 2, 2, ' ', 0)\n\t\tdefer writer.Flush()\n\t\twriter.Write([]byte(\"ServiceName\\tTenant\\tNetwork\\tSelectors\\n\"))\n\t\twriter.Write([]byte(\"---------\\t--------\\t-------\\t-------\\n\"))\n\t\tfor _, group := range filtered {\n\t\t\twriter.Write(\n\t\t\t\t[]byte(fmt.Sprintf(\"%v\\t%v\\t%v\\t%v\\t\\n\",\n\t\t\t\t\tgroup.ServiceName,\n\t\t\t\t\tgroup.TenantName,\n\t\t\t\t\tgroup.NetworkName,\n\t\t\t\t\tgroup.Selectors,\n\t\t\t\t)))\n\t\t}\n\t}\n}","label":0}
{"text":"public void toFrequencyFile(String filePath) throws IOException {\n        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(\n                new FileOutputStream(filePath), \"UTF-8\"));\n        for (TrieNodeCnt child : root.children.values()) {\n            child.writeFrequencies(writer, new char[0]);\/\/ recursive\n        }\n        writer.close();\n    }","label":0}
{"text":"public void parseStreamPrintHtml(PrintWriter out, InputStream streamIn)\n    {\n        XMLParser parser = ((BaseParserScreen)this.getScreenField()).getXMLParser();\n        if (parser != null)\n        {\n            parser.printHtmlData(out, streamIn);\n            parser.free();\n            parser = null;\n        }\n        else\n        {\n            Utility.transferURLStream(null, null, new InputStreamReader(streamIn), out);\n        }\n    }","label":0}
{"text":"public void setUserPolicyList(java.util.Collection<PolicyDetail> userPolicyList) {\n        if (userPolicyList == null) {\n            this.userPolicyList = null;\n            return;\n        }\n\n        this.userPolicyList = new com.amazonaws.internal.SdkInternalList<PolicyDetail>(userPolicyList);\n    }","label":0}
{"text":"public function get_google_fonts_by_args( $args = [] ) {\n\t\t$cache_name = 'kirki_googlefonts_' . md5( wp_json_encode( $args ) );\n\t\t$cache      = get_site_transient( $cache_name );\n\t\tif ( $cache ) {\n\t\t\treturn $cache;\n\t\t}\n\n\t\t$args['sort'] = isset( $args['sort'] ) ? $args['sort'] : 'alpha';\n\n\t\t$fonts         = $this->get_array();\n\t\t$ordered_fonts = $fonts['order'][ $args['sort'] ];\n\t\tif ( isset( $args['count'] ) ) {\n\t\t\tset_site_transient( $cache_name, $ordered_fonts, HOUR_IN_SECONDS );\n\t\t\t$ordered_fonts = array_slice( $ordered_fonts, 0, $args['count'] );\n\t\t\treturn $ordered_fonts;\n\t\t}\n\t\tset_site_transient( $cache_name, $ordered_fonts, HOUR_IN_SECONDS );\n\t\treturn $ordered_fonts;\n\t}","label":0}
{"text":"def buffer_from_socket_nonblock\n      @buffer += @socket.read_nonblock(MSG_BUF_SIZE)\n    rescue EOFError\n      raise # the caller expects it\n    rescue Errno::EAGAIN\n      # fine, would block\n    rescue Exception => e\n      puts \"Oops:\", e\n      raise if @is_tcp # why?\n      puts \"WARNING: read_nonblock failed, falling back to .recv\"\n      @buffer += @socket.recv(MSG_BUF_SIZE)\n    end","label":0}
{"text":"func getArgumentValues(\n\targDefs []*Argument, argASTs []*ast.Argument,\n\tvariableValues map[string]interface{}) map[string]interface{} {\n\n\targASTMap := map[string]*ast.Argument{}\n\tfor _, argAST := range argASTs {\n\t\tif argAST.Name != nil {\n\t\t\targASTMap[argAST.Name.Value] = argAST\n\t\t}\n\t}\n\tresults := map[string]interface{}{}\n\tfor _, argDef := range argDefs {\n\t\tvar (\n\t\t\ttmp   interface{}\n\t\t\tvalue ast.Value\n\t\t)\n\t\tif tmpValue, ok := argASTMap[argDef.PrivateName]; ok {\n\t\t\tvalue = tmpValue.Value\n\t\t}\n\t\tif tmp = valueFromAST(value, argDef.Type, variableValues); isNullish(tmp) {\n\t\t\ttmp = argDef.DefaultValue\n\t\t}\n\t\tif !isNullish(tmp) {\n\t\t\tresults[argDef.PrivateName] = tmp\n\t\t}\n\t}\n\treturn results\n}","label":0}
{"text":"func (s *TransactWriteItem) SetPut(v *Put) *TransactWriteItem {\n\ts.Put = v\n\treturn s\n}","label":0}
{"text":"func libgcc(ctx *Context) (string, error) {\n\targs := []string{\n\t\t\"-print-libgcc-file-name\",\n\t}\n\tvar buf bytes.Buffer\n\tcmd := gccCmd(&Package{Context: ctx}, \"\") \/\/ TODO(dfc) hack\n\terr := runOut(&buf, \".\", nil, cmd[0], args...)\n\treturn strings.TrimSpace(buf.String()), err\n}","label":0}
{"text":"func (prof *Profiler) Serialize(inf *mem.Info) []byte {\n\t\/\/ ensure the Builder is in a usable state.\n\tprof.Builder.Reset()\n\tstructs.InfoStart(prof.Builder)\n\tstructs.InfoAddTimestamp(prof.Builder, inf.Timestamp)\n\tstructs.InfoAddActive(prof.Builder, inf.Active)\n\tstructs.InfoAddActiveAnon(prof.Builder, inf.ActiveAnon)\n\tstructs.InfoAddActiveFile(prof.Builder, inf.ActiveFile)\n\tstructs.InfoAddAnonHugePages(prof.Builder, inf.AnonHugePages)\n\tstructs.InfoAddAnonPages(prof.Builder, inf.AnonPages)\n\tstructs.InfoAddBounce(prof.Builder, inf.Bounce)\n\tstructs.InfoAddBuffers(prof.Builder, inf.Buffers)\n\tstructs.InfoAddCached(prof.Builder, inf.Cached)\n\tstructs.InfoAddCommitLimit(prof.Builder, inf.CommitLimit)\n\tstructs.InfoAddCommittedAS(prof.Builder, inf.CommittedAS)\n\tstructs.InfoAddDirectMap4K(prof.Builder, inf.DirectMap4K)\n\tstructs.InfoAddDirectMap2M(prof.Builder, inf.DirectMap2M)\n\tstructs.InfoAddDirty(prof.Builder, inf.Dirty)\n\tstructs.InfoAddHardwareCorrupted(prof.Builder, inf.HardwareCorrupted)\n\tstructs.InfoAddHugePagesFree(prof.Builder, inf.HugePagesFree)\n\tstructs.InfoAddHugePagesRsvd(prof.Builder, inf.HugePagesRsvd)\n\tstructs.InfoAddHugePagesSize(prof.Builder, inf.HugePagesSize)\n\tstructs.InfoAddHugePagesSurp(prof.Builder, inf.HugePagesSurp)\n\tstructs.InfoAddHugePagesTotal(prof.Builder, inf.HugePagesTotal)\n\tstructs.InfoAddInactive(prof.Builder, inf.Inactive)\n\tstructs.InfoAddInactiveAnon(prof.Builder, inf.InactiveAnon)\n\tstructs.InfoAddInactiveFile(prof.Builder, inf.InactiveFile)\n\tstructs.InfoAddKernelStack(prof.Builder, inf.KernelStack)\n\tstructs.InfoAddMapped(prof.Builder, inf.Mapped)\n\tstructs.InfoAddMemAvailable(prof.Builder, inf.MemAvailable)\n\tstructs.InfoAddMemFree(prof.Builder, inf.MemFree)\n\tstructs.InfoAddMemTotal(prof.Builder, inf.MemTotal)\n\tstructs.InfoAddMlocked(prof.Builder, inf.Mlocked)\n\tstructs.InfoAddNFSUnstable(prof.Builder, inf.NFSUnstable)\n\tstructs.InfoAddPageTables(prof.Builder, inf.PageTables)\n\tstructs.InfoAddShmem(prof.Builder, inf.Shmem)\n\tstructs.InfoAddSlab(prof.Builder, inf.Slab)\n\tstructs.InfoAddSReclaimable(prof.Builder, inf.SReclaimable)\n\tstructs.InfoAddSUnreclaim(prof.Builder, inf.SUnreclaim)\n\tstructs.InfoAddSwapCached(prof.Builder, inf.SwapCached)\n\tstructs.InfoAddSwapFree(prof.Builder, inf.SwapFree)\n\tstructs.InfoAddSwapTotal(prof.Builder, inf.SwapTotal)\n\tstructs.InfoAddUnevictable(prof.Builder, inf.Unevictable)\n\tstructs.InfoAddVmallocChunk(prof.Builder, inf.VmallocChunk)\n\tstructs.InfoAddVmallocTotal(prof.Builder, inf.VmallocTotal)\n\tstructs.InfoAddVmallocUsed(prof.Builder, inf.VmallocUsed)\n\tstructs.InfoAddWriteback(prof.Builder, inf.Writeback)\n\tstructs.InfoAddWritebackTmp(prof.Builder, inf.WritebackTmp)\n\tprof.Builder.Finish(structs.InfoEnd(prof.Builder))\n\tp := prof.Builder.Bytes[prof.Builder.Head():]\n\t\/\/ copy them (otherwise gets lost in reset)\n\ttmp := make([]byte, len(p))\n\tcopy(tmp, p)\n\treturn tmp\n}","label":0}
{"text":"@RequestMapping(value = \"application\", method = RequestMethod.GET)\n    public Resources<ApplicationInfo> applicationInfo() {\n        return Resources.of(\n                applicationInfoService.getApplicationInfoList(),\n                uri(on(InfoController.class).applicationInfo())\n        );\n    }","label":0}
{"text":"public static HttpFailure sendErrorResponse(int code, String body) {\n    return new HttpFailure(new MockResponse().setResponseCode(code).setBody(body));\n  }","label":0}
{"text":"public void trace(String format, Object... args) {\n        if (!logger.isTraceEnabled())\n            return;\n\n        if (instanceofLAL) {\n            String formattedMessage = MessageFormatter.arrayFormat(format, args).getMessage();\n            ((LocationAwareLogger) logger).log(null, fqcn, LocationAwareLogger.TRACE_INT, formattedMessage, args, null);\n        } else {\n            logger.trace(format, args);\n        }\n    }","label":0}
{"text":"function quickReply(payload, callback)\n{\n  if (payload.quick_reply && typeof payload.quick_reply.payload == 'string')\n  {\n    \/\/ TODO: Make better parse and as a library\n    payload.quick_reply.payload = JSON.parse(payload.quick_reply.payload);\n  }\n\n  callback(null, payload);\n}","label":0}
{"text":"func (ns NameSpace) resolve(path string) []mountedFS {\n\tpath = ns.clean(path)\n\tfor {\n\t\tif m := ns[path]; m != nil {\n\t\t\tif debugNS {\n\t\t\t\tfmt.Printf(\"resolve %s: %v\\n\", path, m)\n\t\t\t}\n\t\t\treturn m\n\t\t}\n\t\tif path == \"\/\" {\n\t\t\tbreak\n\t\t}\n\t\tpath = pathpkg.Dir(path)\n\t}\n\treturn nil\n}","label":0}
{"text":"def start(self):\n        \"\"\"\"\"\"\n        if not self.initialized:\n            raise Exception(\"Consumer not initialized (no Producer).\")\n        producer = self.producer\n        context = zmq._Context()\n        self.pull = context.socket(zmq.PULL)\n        self.push = context.socket(zmq.PUSH)\n        self.pull.connect('tcp:\/\/%s:%s' % (producer.host, producer.push_port))\n        self.push.connect('tcp:\/\/%s:%s' % (producer.host, producer.pull_port))\n        # TODO: notify the producer that this consumer's ready for work?\n        self.listen()","label":0}
{"text":"protected static function getBufferFromAllGateway($gateway_data)\n    {\n        $addresses = static::getAllGatewayAddress();\n        $gateway_buffer_array = array();\n        $gateway_buffer = GatewayProtocol::encode($gateway_data);\n        $gateway_buffer = static::$secretKey ? static::generateAuthBuffer() . $gateway_buffer : $gateway_buffer;\n        foreach ($addresses as $address) {\n            $gateway_buffer_array[$address] = $gateway_buffer;\n        }\n\n        return static::getBufferFromGateway($gateway_buffer_array);\n    }","label":0}
{"text":"protected function mergeCollectionWithView($view, $collection, $postTypeModel)\n    {\n    \t$post = $collection['post'];\n\t\t$postmeta = $collection['postmeta'];\n\n    \t\/\/ Foreaching all templates in the custom field configuration file\n    \tforeach($view as $templateKey => $template){\n\n    \t\t\/\/ If the array custom fields is not empty\n        \tif(!empty($template['customFields'])){\n\n        \t\t\/\/ We foreach all custom fields in this template section\n\t            foreach($template['customFields'] as $customFieldKey => $customField){\n\n\t            \t\/\/ Setting post data to the custom fields\n\t            \tswitch($customFieldKey){\n\n\t            \t\t\/\/ If we find the customFieldKey created_at, we know it is in the config file\n\t            \t\tcase 'created_at':\n\n\t\t\t\t\t\t\t\/\/ Because of that we will add the post created_at value to the custom field\n\t\t\t\t\t\t\tif(!empty($post['created_at'])){\n\t            \t\t\t\t$view[$templateKey]['customFields'][$customFieldKey]['id'] = $customFieldKey;\n\t\t\t\t\t\t\t\t$view[$templateKey]['customFields'][$customFieldKey]['value'] = $post['created_at'];\n\t\t\t\t\t\t\t}\n\n\t            \t\tbreak;\n\n\t            \t\t\/\/ If we find the customFieldKey updated_at, we know it is in the config file\n\t            \t\tcase 'updated_at':\n\n\t\t\t\t\t\t\t\/\/ Because of that we will add the post updated_at value to the custom field\n\t\t\t\t\t\t\tif(!empty($post['updated_at'])){\n\t            \t\t\t\t$view[$templateKey]['customFields'][$customFieldKey]['id'] = $customFieldKey;\n\t\t\t\t\t\t\t\t$view[$templateKey]['customFields'][$customFieldKey]['value'] = $post['updated_at'];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\/\/ If we find the customFieldKey updated_at, we know it is in the config file\n\t            \t\tcase 'status':\n\n\t\t\t\t\t\t\t\/\/ Because of that we will add the post status value to the custom field\n\t\t\t\t\t\t\tif(!empty($post['status'])){\n\t            \t\t\t\t$view[$templateKey]['customFields'][$customFieldKey]['id'] = $customFieldKey;\n\t\t\t\t\t\t\t\t$view[$templateKey]['customFields'][$customFieldKey]['value'] = $post['status'];\n\t\t\t\t\t\t\t}\n\n\t            \t\tbreak;\n\t            \t}\n\n\t            \t\/\/ Lets set the key to the array\n\t                $view[$templateKey]['customFields'][$customFieldKey]['id'] = $customFieldKey;\n\n\t\t\t\t\tif(array_key_exists($customFieldKey, $postmeta)){\n\t\t\t\t\t\t$view[$templateKey]['customFields'][$customFieldKey]['value'] = $postmeta[$customFieldKey]['meta_value'];\n\t\t\t\t\t}\n\n\t                \/\/ When output is disabled, we need to remove the fields from the arrays\n\t                if(array_key_exists('output', $customField) && !$customField['output']){\n\t                \tunset($view[$templateKey]['customFields'][$customFieldKey]);\n\t\t\t\t\t}\n\n\t\t\t\t\t\/\/ If the array custom fields is not empty\n\t\t\t\t\tif(!empty($customField['customFields'])){\n\n\t\t\t\t\t\t\/\/ We foreach all custom fields in this template section\n\t\t\t\t\t\tforeach($customField['customFields'] as $innerCustomFieldKey => $innerCustomField){\n\n\t\t\t\t\t\t\t\/\/ Lets set the key to the array\n\t\t\t\t\t\t\t$view[$templateKey]['customFields'][$customFieldKey]['customFields'][$innerCustomFieldKey]['id'] = $innerCustomFieldKey;\n\n\t\t\t\t\t\t\tif(array_key_exists($innerCustomFieldKey, $postmeta)){\n\t\t\t\t\t\t\t\t$view[$templateKey]['customFields'][$customFieldKey]['customFields'][$innerCustomFieldKey]['value'] = $postmeta[$innerCustomFieldKey]['meta_value'];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\/\/ When output is disabled, we need to remove the fields from the arrays\n\t\t\t\t\t\t\tif(array_key_exists('output', $innerCustomField) && !$innerCustomField['output']){\n\t\t\t\t\t\t\t\tunset($view[$templateKey]['customFields'][$customFieldKey]['customFields'][$innerCustomFieldKey]);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\/\/ If the array custom fields is not empty\n\t\t\t\t\t\tif(!empty($innerCustomField['customFields'])){\n\n\t\t\t\t\t\t\t\/\/ We foreach all custom fields in this template section\n\t\t\t\t\t\t\tforeach($innerCustomField['customFields'] as $innerInnerCustomFieldKey => $innerInnerCustomField){\n\n\t\t\t\t\t\t\t\t\/\/ Lets set the key to the array\n\t\t\t\t\t\t\t\t$view[$templateKey]['customFields'][$customFieldKey]['customFields'][$innerCustomFieldKey]['customFields'][$innerInnerCustomFieldKey]['id'] = $innerInnerCustomFieldKey;\n\n\t\t\t\t\t\t\t\tif(array_key_exists($innerInnerCustomFieldKey, $postmeta)){\n\t\t\t\t\t\t\t\t\t$view[$templateKey]['customFields'][$customFieldKey]['customFields'][$innerCustomFieldKey]['customFields'][$innerInnerCustomFieldKey]['value'] = $postmeta[$innerInnerCustomFieldKey]['meta_value'];\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\/\/ When output is disabled, we need to remove the fields from the arrays\n\t\t\t\t\t\t\t\tif(array_key_exists('output', $innerInnerCustomField) && !$innerInnerCustomField['output']){\n\t\t\t\t\t\t\t\t\tunset($view[$templateKey]['customFields'][$customFieldKey]['customFields'][$innerCustomFieldKey]['customFields'][$innerInnerCustomFieldKey]);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t            }\n\t        }\n\t\t}\n\n        return $view;\n    }","label":0}
{"text":"public function find($finder, array $options = [])\n    {\n        \/** @var \\Cake\\ORM\\Table $table *\/\n        $table = $this->getRepository();\n\n        return $table->callFinder($finder, $this, $options);\n    }","label":0}
{"text":"function RecursivePaginatedWebCall(client, method, property, options = {}) {\n    \/**\n     * store all entries\n     *\/\n    var data = [];\n\n    \/**\n     * count of recursive calls required\n     *\/\n    var rcount = 0;\n\n    return new Promise((resolve, reject) => {\n      function recurse() {\n        rcount++;\n        client\n          .apiCall(method, options)\n          .then(res => {\n            data = data.concat(res[property]);\n\n            \/**\n             * if more pages, keep going otherwise resolve the promise\n             *\/\n            if (\n              res.response_metadata &&\n              res.response_metadata.next_cursor &&\n              res.response_metadata.next_cursor !== \"\"\n            ) {\n              options.cursor = res.response_metadata.next_cursor;\n\n              \/\/ keep recursing\n              recurse();\n            } else {\n              resolve(data);\n            }\n          })\n          .catch(e => {\n            reject(e);\n          });\n      }\n\n      \/\/ start recursion\n      recurse();\n    });\n  }","label":0}
{"text":"func NewPublicResolverTransactor(address common.Address, transactor bind.ContractTransactor) (*PublicResolverTransactor, error) {\n\tcontract, err := bindPublicResolver(address, nil, transactor, nil)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn &PublicResolverTransactor{contract: contract}, nil\n}","label":0}
{"text":"def add_transfer_syntax(uid)\n      lib_uid = LIBRARY.uid(uid)\n      raise \"Invalid\/unknown UID: #{uid}\" unless lib_uid\n      @accepted_transfer_syntaxes[uid] = lib_uid.name\n    end","label":0}
{"text":"function isEmpty(value, message, id) {\r\n    if (message === void 0) { message = ''; }\r\n    if (id === void 0) { id = ''; }\r\n    if (this.enabled &&\r\n        ((typeof value === 'string' && value.length === 0) ||\r\n            (typeof value === 'number' && value === 0))) {\r\n        throw LogicException.throw(assertionTypes.IS_EMPTY, value, message, id);\r\n    }\r\n}","label":0}
{"text":"public void setEnterpriseText(int index, String value)\n   {\n      set(selectField(ResourceFieldLists.ENTERPRISE_TEXT, index), value);\n   }","label":0}
{"text":"def l2_norm(x, filters=None, epsilon=1e-6, name=None, reuse=None):\n  \"\"\"\"\"\"\n  if filters is None:\n    filters = shape_list(x)[-1]\n  with tf.variable_scope(name, default_name=\"l2_norm\", values=[x], reuse=reuse):\n    scale = tf.get_variable(\n        \"l2_norm_scale\", [filters], initializer=tf.ones_initializer())\n    bias = tf.get_variable(\n        \"l2_norm_bias\", [filters], initializer=tf.zeros_initializer())\n    epsilon, scale, bias = [cast_like(t, x) for t in [epsilon, scale, bias]]\n    mean = tf.reduce_mean(x, axis=[-1], keepdims=True)\n    l2norm = tf.reduce_sum(\n        tf.squared_difference(x, mean), axis=[-1], keepdims=True)\n    norm_x = (x - mean) * tf.rsqrt(l2norm + epsilon)\n    return norm_x * scale + bias","label":0}
{"text":"func (s *UpdateHealthCheckInput) SetSearchString(v string) *UpdateHealthCheckInput {\n\ts.SearchString = &v\n\treturn s\n}","label":0}
{"text":"public void close()\n        throws IOException\n    {\n        try{\n            _completing=true;\n            if (_connection instanceof Socket && !(_connection instanceof SSLSocket))\n                ((Socket)_connection).shutdownOutput();\n            _outputStream.close();\n            _inputStream.close();\n        }\n        finally\n        {\n            if (_handlingThread!=null && Thread.currentThread()!=_handlingThread)\n                _handlingThread.interrupt();\n        }\n    }","label":0}
{"text":"public static List<CPOption> findByUuid_C(String uuid, long companyId) {\n\t\treturn getPersistence().findByUuid_C(uuid, companyId);\n\t}","label":0}
{"text":"def ask_input(self, prompt):\n        \"\"\"\"\"\"\n        self._vim.command('call inputsave()')\n        self._vim.command('let user_input = input(\"{} \")'.format(prompt))\n        self._vim.command('call inputrestore()')\n        response = self._vim.eval('user_input')\n        self._vim.command('unlet user_input')\n        return response","label":0}
{"text":"def fetch(self):\n        \n        params = values.of({})\n\n        payload = self._version.fetch(\n            'GET',\n            self._uri,\n            params=params,\n        )\n\n        return AvailableAddOnExtensionInstance(\n            self._version,\n            payload,\n            available_add_on_sid=self._solution['available_add_on_sid'],\n            sid=self._solution['sid'],\n        )","label":0}
{"text":"public static XContentBuilder marshall(ApiVersionBean bean) throws StorageException {\n        try (XContentBuilder builder = XContentFactory.jsonBuilder()) {\n            ApiBean api = bean.getApi();\n            OrganizationBean org = api.getOrganization();\n            preMarshall(bean);\n            builder\n                .startObject()\n                    .field(\"organizationId\", org.getId())\n                    .field(\"organizationName\", org.getName())\n                    .field(\"apiId\", api.getId())\n                    .field(\"apiName\", api.getName())\n                    .field(\"apiDescription\", api.getDescription())\n                    .field(\"version\", bean.getVersion())\n                    .field(\"status\", bean.getStatus())\n                    .field(\"createdBy\", bean.getCreatedBy())\n                    .field(\"createdOn\", bean.getCreatedOn().getTime())\n                    .field(\"modifiedBy\", bean.getModifiedBy())\n                    .field(\"modifiedOn\", bean.getModifiedOn().getTime())\n                    .field(\"publishedOn\", bean.getPublishedOn() != null ? bean.getPublishedOn().getTime() : null)\n                    .field(\"retiredOn\", bean.getRetiredOn() != null ? bean.getRetiredOn().getTime() : null)\n                    .field(\"publicAPI\", bean.isPublicAPI())\n                    .field(\"endpoint\", bean.getEndpoint())\n                    .field(\"endpointType\", bean.getEndpointType())\n                    .field(\"endpointContentType\", bean.getEndpointContentType())\n                    .field(\"parsePayload\", bean.isParsePayload())\n                    .field(\"definitionType\", bean.getDefinitionType());\n            Set<ApiGatewayBean> gateways = bean.getGateways();\n            if (gateways != null) {\n                builder.startArray(\"gateways\");\n                for (ApiGatewayBean gateway : gateways) {\n                    builder.startObject()\n                        .field(\"gatewayId\", gateway.getGatewayId())\n                    .endObject();\n                }\n                builder.endArray();\n            }\n            Set<ApiPlanBean> plans = bean.getPlans();\n            if (plans != null) {\n                builder.startArray(\"plans\");\n                for (ApiPlanBean plan : plans) {\n                    builder.startObject()\n                        .field(\"planId\", plan.getPlanId())\n                        .field(\"version\", plan.getVersion())\n                    .endObject();\n                }\n                builder.endArray();\n            }\n            Map<String, String> endpointProperties = bean.getEndpointProperties();\n            if (endpointProperties != null) {\n                builder.startObject(\"endpointProperties\");\n                for (Entry<String, String> property : endpointProperties.entrySet()) {\n                    builder.field(property.getKey(), property.getValue());\n                }\n                builder.endObject();\n            }\n            builder.endObject();\n            postMarshall(bean);\n            return builder;\n        } catch (IOException e) {\n            throw new StorageException(e);\n        }\n    }","label":0}
{"text":"def insertions_from_masked(seq):\n    \n    insertions = []\n    prev = True\n    for i, base in enumerate(seq):\n        if base.isupper() and prev is True:\n            insertions.append([])\n            prev = False\n        elif base.islower():\n            insertions[-1].append(i)\n            prev = True\n    return [[min(i), max(i)] for i in insertions if i != []]","label":0}
{"text":"def wp_draw_callback(self, points):\n        ''''''\n        if len(points) < 3:\n            return\n        from MAVProxy.modules.lib import mp_util\n        home = self.wploader.wp(0)\n        self.wploader.clear()\n        self.wploader.target_system = self.target_system\n        self.wploader.target_component = self.target_component\n        self.wploader.add(home)\n        if self.get_default_frame() == mavutil.mavlink.MAV_FRAME_GLOBAL_TERRAIN_ALT:\n            use_terrain = True\n        else:\n            use_terrain = False\n        for p in points:\n            self.wploader.add_latlonalt(p[0], p[1], self.settings.wpalt, terrain_alt=use_terrain)\n        self.send_all_waypoints()","label":0}
{"text":"def init(self, conn):\n        \n        base = self.read_scripts()[0]['fname']\n        logging.info('Creating the initial schema from %s',  base)\n        apply_sql_script(conn, os.path.join(self.upgrade_dir, base))\n        self.install_versioning(conn)","label":0}
{"text":"public function getStaticMethods(): array\n    {\n        if (null !== $this->staticMethods) {\n            return $this->staticMethods;\n        }\n        $this->staticMethods = $this->reflectionClass->getMethods(\n            \\ReflectionMethod::IS_STATIC\n        );\n\n        return $this->staticMethods;\n    }","label":0}
{"text":"func (s *ExecuteChangeSetInput) SetStackName(v string) *ExecuteChangeSetInput {\n\ts.StackName = &v\n\treturn s\n}","label":0}
{"text":"async function generateMachineKey () {\n  let parts = await Promise.all([\n    randomHex(8),\n    randomHex(4),\n    randomHex(4),\n    randomHex(4),\n    randomHex(12)\n  ])\n  return `${parts[0]}-${parts[1]}-${parts[2]}-${parts[3]}-${parts[4]}`\n}","label":0}
{"text":"func (m *APIEventTSHelper) ServeHTTP(r http.ResponseWriter, req *http.Request) {\n\tm.TSGauge.SetToCurrentTime()\n\tduration := spanstat.Start()\n\trw := &responderWrapper{ResponseWriter: r}\n\tm.Next.ServeHTTP(rw, req)\n\tif req != nil && req.URL != nil && req.URL.Path != \"\" {\n\t\tpath := getShortPath(req.URL.Path)\n\t\ttook := float64(duration.End(true).Total().Seconds())\n\t\tm.Histogram.WithLabelValues(path, req.Method, strconv.Itoa(rw.code)).Observe(took)\n\t}\n}","label":0}
{"text":"public function getJson($asArray = false)\n    {\n        if ($this->isJson())\n            return json_decode($this->getBody(), $asArray);\n        return null;\n    }","label":0}
{"text":"public function parameters($reset = false)\n    {\n        if ($reset || is_null($this->_searchParameters)) {\n            $this->_searchParameters = new ParameterRegistry($this->_controller, []);\n            $parameters = (array)$this->config('parameters');\n            foreach ($parameters as $parameter) {\n                if (!empty($parameter['name'])) {\n                    $this->addParam($parameter['name'], $parameter);\n                }\n            }\n        }\n\n        return $this->_searchParameters;\n    }","label":0}
{"text":"func resourceObjectstorageTempurlV1Read(d *schema.ResourceData, meta interface{}) error {\n\tturl := d.Get(\"url\").(string)\n\tu, err := url.Parse(turl)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"Failed to read the temporary url %s: %s\", turl, err)\n\t}\n\n\tqp, err := url.ParseQuery(u.RawQuery)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"Failed to parse the temporary url %s query string: %s\", turl, err)\n\t}\n\n\ttempURLExpires := qp.Get(\"temp_url_expires\")\n\texpiry, err := strconv.ParseInt(tempURLExpires, 10, 64)\n\tif err != nil {\n\t\treturn fmt.Errorf(\n\t\t\t\"Failed to parse the temporary url %s expiration time %s: %s\",\n\t\t\tturl, tempURLExpires, err)\n\t}\n\n\t\/\/ Regenerate the URL if it has expired and if the user requested it to be.\n\tregen := d.Get(\"regenerate\").(bool)\n\tnow := time.Now().Unix()\n\tif expiry < now && regen {\n\t\tlog.Printf(\"[DEBUG] temporary url %s expired, generating a new one\", turl)\n\t\td.SetId(\"\")\n\t}\n\n\treturn nil\n}","label":0}
{"text":"func (s *BaiduMessage) SetTimeToLive(v int64) *BaiduMessage {\n\ts.TimeToLive = &v\n\treturn s\n}","label":0}
{"text":"func Trim(formatter Formatter) Formatter {\n\treturn func(buffer Buffer, event *cue.Event) {\n\t\ttmp := GetBuffer()\n\t\tdefer ReleaseBuffer(tmp)\n\n\t\tformatter(tmp, event)\n\t\tbuffer.AppendString(strings.TrimSpace(string(tmp.Bytes())))\n\t}\n}","label":0}
{"text":"def predict_fixation_duration(\n        durations, angles, length_diffs, dataset=None, params=None):\n    \n    if dataset is None:\n        dataset = np.ones(durations.shape)\n    corrected_durations = np.nan * np.ones(durations.shape)\n    for i, ds in enumerate(np.unique(dataset)):\n        e = lambda v, x, y, z: (leastsq_dual_model(x, z, *v) - y)\n        v0 = [120, 220.0, -.1, 0.5, .1, .1]\n        id_ds = dataset == ds\n        idnan = (\n            ~np.isnan(angles)) & (\n            ~np.isnan(durations)) & (\n            ~np.isnan(length_diffs))\n        v, s = leastsq(\n            e, v0, args=(\n                angles[\n                    idnan & id_ds], durations[\n                    idnan & id_ds], length_diffs[\n                    idnan & id_ds]), maxfev=10000)\n        corrected_durations[id_ds] = (durations[id_ds] -\n                                      (leastsq_dual_model(angles[id_ds], length_diffs[id_ds], *v)))\n        if params is not None:\n            params['v' + str(i)] = v\n            params['s' + str(i)] = s\n    return corrected_durations","label":0}
{"text":"func (u *User) AllSyncedSecretKeys(m MetaContext) (keys []*SKB, err error) {\n\tdefer m.Trace(\"User#AllSyncedSecretKeys\", func() error { return err })()\n\tm.Dump()\n\n\tss, err := m.SyncSecretsForUID(u.GetUID())\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tckf := u.GetComputedKeyFamily()\n\tif ckf == nil {\n\t\tm.Debug(\"| short-circuit; no Computed key family\")\n\t\treturn nil, nil\n\t}\n\n\tkeys = ss.AllActiveKeys(ckf)\n\treturn keys, nil\n}","label":0}
{"text":"func (s *InstanceSummary) SetLifecycleEvents(v []*LifecycleEvent) *InstanceSummary {\n\ts.LifecycleEvents = v\n\treturn s\n}","label":0}
{"text":"func unaryOpOctcps(rate int8, in Input, numOutputs int) Input {\n\tCheckRate(rate)\n\treturn NewInput(UnaryOpUgenName, rate, UnaryOpOctcps, numOutputs, in)\n}","label":0}
{"text":"public function pluck($column, $key = null)\n    {\n        $result = $this->getBuilder()->pluck($column, $key);\n\n        \/\/ Reset query builder\n        $this->resetBuilder();\n\n        return $result;\n    }","label":0}
{"text":"public function callback()\n    {\n        $code = $_GET['code'] ?? null;\n        $data = [\n            'appid' => $this->app_id,\n            'secret' => $this->app_secret,\n            'code' => $code,\n            'grant_type' => 'authorization_code',\n        ];\n        $url = self::ACCESS_TOKEN_URL.http_build_query($data);\n        $data = json_decode($this->curl->get($url));\n\n        if (property_exists($data, 'errcode')) {\n            return (array) $data;\n        }\n\n        $access_token = $data->access_token;\n        $expires_in = $data->expires_in;\n        $refresh_token = $data->refresh_token;\n        $open_id = $data->openid;\n        $scope = $data->scope;\n\n        if ('snsapi_base' === $scope) {\n            return (array) $data;\n        }\n        $data = $this->getUserInfo($access_token, $open_id);\n\n        return Response::json($data);\n    }","label":0}
{"text":"int sendMessageToTopicForSessions(Collection<Session> sessions, MessageToClient mtc, Object payload) {\r\n\t\tint sended = 0;\r\n\t\tJsTopicMessageController msgControl = messageControllerManager.getJsTopicMessageController(mtc.getId());\r\n\t\tCollection<Session> sessionsClosed = new ArrayList<>();\r\n\t\tfor (Session session : sessions) {\r\n\t\t\ttry {\r\n\t\t\t\tsended += checkAndSendMtcToSession(session, msgControl, mtc, payload);\r\n\t\t\t} catch (SessionException se) {\r\n\t\t\t\tsessionsClosed.add(se.getSession());\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (logger.isDebugEnabled()) {\r\n\t\t\tlogger.debug(\"Send message to '{}' topic {} client(s) : {}\", new Object[]{mtc.getId(), sessions.size() - sessionsClosed.size(), mtc});\r\n\t\t}\r\n\t\ttopicManager.removeSessionsToTopic(sessionsClosed);\r\n\t\treturn sended;\r\n\t}","label":0}
{"text":"public function install(): OperationResult\n    {\n        $result = new OperationResult();\n\n        $sourcePath = \"{$this->packageInstallDir}\/.installer\/%s\/files\";\n        foreach ($this->projectType->getProjectDirs() as $projectDir) {\n            if (is_dir(sprintf($sourcePath, $projectDir))) {\n                \/** @var \\RecursiveDirectoryIterator $iterator *\/\n                $iterator = new \\RecursiveIteratorIterator(\n                    new \\RecursiveDirectoryIterator(\n                        sprintf($sourcePath, $projectDir),\n                        \\RecursiveDirectoryIterator::SKIP_DOTS\n                    ),\n                    \\RecursiveIteratorIterator::SELF_FIRST\n                );\n\n                \/** @var \\SplFileInfo $file *\/\n                foreach ($iterator as $file) {\n                    $target = \"{$this->projectRootDir}\/{$iterator->getSubPathname()}\";\n                    if ($file->isDir()) {\n                        if (!is_dir($target)) {\n                            if (!mkdir($target)) {\n                                $result->addErrorMessage(\"<error>Could not create target directory '${target}'<\/error>\");\n                            }\n                        }\n                    } elseif (!file_exists($target)) {\n                        assert(is_string($file->getRealPath()));\n                        if (!copy($file->getRealPath(), $target)) {\n                            $result->addErrorMessage(\"<error>Could not copy file to '${target}'<\/error>\");\n                        }\n                    }\n                }\n            }\n        }\n\n        if (!$result->isFailure()) {\n            $result->addStatusMessage(\"Successfully copied files from package {$this->packageName}\");\n        }\n\n        return $result;\n    }","label":0}
{"text":"private void verifyType(TypeElement type, PackageElement pkg) throws CannotGenerateCodeException {\n    if (pkg.isUnnamed()) {\n      messager.printMessage(ERROR, \"FreeBuilder does not support types in unnamed packages\", type);\n      throw new CannotGenerateCodeException();\n    }\n    switch (type.getNestingKind()) {\n      case TOP_LEVEL:\n        break;\n\n      case MEMBER:\n        if (!type.getModifiers().contains(Modifier.STATIC)) {\n          messager.printMessage(\n              ERROR,\n              \"Inner classes cannot be FreeBuilder types (did you forget the static keyword?)\",\n              type);\n          throw new CannotGenerateCodeException();\n        }\n\n        if (type.getModifiers().contains(Modifier.PRIVATE)) {\n          messager.printMessage(ERROR, \"FreeBuilder types cannot be private\", type);\n          throw new CannotGenerateCodeException();\n        }\n\n        for (Element e = type.getEnclosingElement(); e != null; e = e.getEnclosingElement()) {\n          if (e.getModifiers().contains(Modifier.PRIVATE)) {\n            messager.printMessage(\n                ERROR,\n                \"FreeBuilder types cannot be private, but enclosing type \"\n                    + e.getSimpleName() + \" is inaccessible\",\n                type);\n            throw new CannotGenerateCodeException();\n          }\n        }\n        break;\n\n      default:\n        messager.printMessage(\n            ERROR, \"Only top-level or static nested types can be FreeBuilder types\", type);\n        throw new CannotGenerateCodeException();\n    }\n    switch (type.getKind()) {\n      case ANNOTATION_TYPE:\n        messager.printMessage(ERROR, \"FreeBuilder does not support annotation types\", type);\n        throw new CannotGenerateCodeException();\n\n      case CLASS:\n        verifyTypeIsConstructible(type);\n        break;\n\n      case ENUM:\n        messager.printMessage(ERROR, \"FreeBuilder does not support enum types\", type);\n        throw new CannotGenerateCodeException();\n\n      case INTERFACE:\n        \/\/ Nothing extra needs to be checked on an interface\n        break;\n\n      default:\n        throw new AssertionError(\"Unexpected element kind \" + type.getKind());\n    }\n  }","label":0}
{"text":"public boolean load() {\n\n        boolean exists;\n\n        if (!DatabaseURL.isFileBasedDatabaseType(database.getType())) {\n            return true;\n        }\n\n        try {\n            exists = super.load();\n        } catch (Exception e) {\n            throw Error.error(ErrorCode.FILE_IO_ERROR,\n                              ErrorCode.M_LOAD_SAVE_PROPERTIES, new Object[] {\n                fileName, e\n            });\n        }\n\n        if (!exists) {\n            return false;\n        }\n\n        filterLoadedProperties();\n\n        String version = getProperty(hsqldb_compatible_version);\n\n        \/\/ do not open if the database belongs to a later (future) version\n        int check = version.substring(0, 5).compareTo(THIS_VERSION);\n\n        if (check > 0) {\n            throw Error.error(ErrorCode.WRONG_DATABASE_FILE_VERSION);\n        }\n\n        version = getProperty(db_version);\n\n        if (version.charAt(2) == '6') {\n            setProperty(hsqldb_cache_version, \"1.6.0\");\n        }\n\n        JavaSystem.gcFrequency = getIntegerProperty(runtime_gc_interval, 0);\n\n        return true;\n    }","label":0}
{"text":"@Override\n    public Restoration restoreCompleted(String restorationId)\n        throws SnapshotNotFoundException, SnapshotInProcessException,\n        NoRestorationInProcessException, SnapshotException {\n\n        Restoration restoration = getRestoration(restorationId);\n\n        return restoreCompleted(restoration);\n\n    }","label":0}
{"text":"func (bb *Builder) SetShareExpiration(t time.Time) *Builder {\n\tif bb.Type() != \"claim\" || bb.ClaimType() != ShareClaim {\n\t\tpanic(\"called SetShareExpiration on non-share\")\n\t}\n\tif t.IsZero() {\n\t\tdelete(bb.m, \"expires\")\n\t} else {\n\t\tbb.m[\"expires\"] = RFC3339FromTime(t)\n\t}\n\treturn bb\n}","label":0}
{"text":"public function createObjectStateFromInputStruct(InputStruct $input)\n    {\n        $objectState = new ObjectState();\n\n        $objectState->identifier = $input->identifier;\n        $objectState->defaultLanguage = $input->defaultLanguage;\n        $objectState->name = $input->name;\n        $objectState->description = $input->description;\n\n        $objectState->languageCodes = array();\n        foreach ($input->name as $languageCode => $name) {\n            $objectState->languageCodes[] = $languageCode;\n        }\n\n        return $objectState;\n    }","label":0}
{"text":"public EEnum getIfcConstraintEnum() {\r\n\t\tif (ifcConstraintEnumEEnum == null) {\r\n\t\t\tifcConstraintEnumEEnum = (EEnum) EPackage.Registry.INSTANCE.getEPackage(Ifc2x3tc1Package.eNS_URI)\r\n\t\t\t\t\t.getEClassifiers().get(799);\r\n\t\t}\r\n\t\treturn ifcConstraintEnumEEnum;\r\n\t}","label":0}
{"text":"public function toOptionArray()\n    {\n        if (null === $this->options) {\n            $collection = $this->collectionFactory->create();\n            $collection->addFieldToFilter('is_active', 1);\n            $collection->setOrder('identifier', \\Magento\\Framework\\Data\\Collection::SORT_ORDER_ASC);\n\n            $options = [\n                [\n                    'value' => '',\n                    'label' => __('-- No Page --')\n                ]\n            ];\n\n            foreach ($collection as $item) {\n                \/** @var \\Magento\\Cms\\Model\\Page $item *\/\n                $options[] = [\n                    'value' => $item->getIdentifier(),\n                    'label' => $item->getTitle()\n                ];\n            }\n\n            $this->options = $options;\n        }\n\n        return $this->options;\n    }","label":0}
{"text":"def decode(self, data, erase_pos=None, only_erasures=False):\n        ''''''\n        # erase_pos is a list of positions where you know (or greatly suspect at least) there is an erasure (ie, wrong character but you know it's at this position). Just input the list of all positions you know there are errors, and this method will automatically split the erasures positions to attach to the corresponding data chunk.\n        if isinstance(data, str):\n            data = bytearray(data, \"latin-1\")\n        dec = bytearray()\n        for i in xrange(0, len(data), self.nsize):\n            # Split the long message in a chunk\n            chunk = data[i:i+self.nsize]\n            # Extract the erasures for this chunk\n            e_pos = []\n            if erase_pos:\n                # First extract the erasures for this chunk (all erasures below the maximum chunk length)\n                e_pos = [x for x in erase_pos if x <= self.nsize]\n                # Then remove the extract erasures from the big list and also decrement all subsequent positions values by nsize (the current chunk's size) so as to prepare the correct alignment for the next iteration\n                erase_pos = [x - (self.nsize+1) for x in erase_pos if x > self.nsize]\n            # Decode\/repair this chunk!\n            dec.extend(rs_correct_msg(chunk, self.nsym, fcr=self.fcr, generator=self.generator, erase_pos=e_pos, only_erasures=only_erasures)[0])\n        return dec","label":0}
{"text":"private static int getScaleFactor(ImageMetadata metadata, int maxPixels) {\n        int scale = 1;\n        int scaledW = metadata.getW();\n        int scaledH = metadata.getH();\n        while (scaledW * scaledH > maxPixels) {\n            scale *= 2;\n            scaledH \/= 2;\n            scaledW \/= 2;\n        }\n        return scale;\n    }","label":0}
{"text":"public function actionJsonProxyPost()\n\t{\n\t\t$url = Cii::get($_POST, 'url', false);\n\n\t\tif ($url === false)\n\t\t\tthrow new CHttpException(400, Yii::t('Api.index', 'Missing $_POST[url] parameter'));\n\n\t\t$hash = md5($url);\n\t\t$response = Yii::app()->cache->get('CiiMS::API::Proxy::'.$hash);\n\n\t\tif ($response == false)\n\t\t{\n\t\t\t$curl = new \\Curl\\Curl;\t\t\t\n\t\t\t$response = serialize($curl->get($url));\n\n\t\t\tif ($curl->error)\n\t\t\t\tthrow new CHttpException(500, Yii::t('Api.index', 'Failed to retrieve remote resource.'));\n\n\t\t\t$curl->close();\n\n\t\t\tYii::app()->cache->set('API::Proxy::'.$hash, $response, 600);\n\t\t}\n\t\t\n\t\treturn unserialize($response);\n\t}","label":0}
{"text":"@Override\n  public void visit(final NodeTraversal t, final Node n, final Node p) {\n    final JSDocInfo info = n.getJSDocInfo();\n    if (info == null) {\n      return;\n    }\n    final JSTypeRegistry registry = compiler.getTypeRegistry();\n\n    final List<Node> thrownTypes =\n        transform(\n            info.getThrownTypes(),\n            new Function<JSTypeExpression, Node>() {\n              @Override\n              public Node apply(JSTypeExpression expr) {\n                return expr.getRoot();\n              }\n            });\n\n    final Scope scope = t.getScope();\n    for (Node typeRoot : info.getTypeNodes()) {\n      NodeUtil.visitPreOrder(\n          typeRoot,\n          new NodeUtil.Visitor() {\n            @Override\n            public void visit(Node node) {\n              if (!node.isString()) {\n                return;\n              }\n              if (thrownTypes.contains(node)) {\n                return;\n              }\n              Node parent = node.getParent();\n              if (parent != null) {\n                switch (parent.getToken()) {\n                  case BANG:\n                  case QMARK:\n                  case THIS: \/\/ The names inside function(this:Foo) and\n                  case NEW: \/\/ function(new:Bar) are already non-null.\n                  case TYPEOF: \/\/ Names after 'typeof' don't have nullability.\n                    return;\n                  case PIPE:\n                    { \/\/ Inside a union\n                      Node gp = parent.getParent();\n                      if (gp != null && gp.getToken() == Token.QMARK) {\n                        return; \/\/ Inside an explicitly nullable union\n                      }\n                      for (Node child : parent.children()) {\n                        if ((child.isString() && child.getString().equals(\"null\"))\n                            || child.getToken() == Token.QMARK) {\n                          return; \/\/ Inside a union that contains null or nullable type\n                        }\n                      }\n                      break;\n                    }\n                  default:\n                    break;\n                }\n              }\n              String typeName = node.getString();\n              if (typeName.equals(\"null\") || registry.getType(scope, typeName) == null) {\n                return;\n              }\n              JSType type = registry.createTypeFromCommentNode(node);\n              if (type.isNullable()) {\n                compiler.report(JSError.make(node, IMPLICITLY_NULLABLE_JSDOC, typeName));\n              }\n            }\n          },\n          Predicates.alwaysTrue());\n    }\n  }","label":0}
{"text":"public function websocket()\n    {\n        $this->writeln('Starting swoole websocket server...');\n\n        $ws = new WebsocketServer(\n            $this->swooleConfig['ws']['host'] ?? self::DEFAULT_SWOOLE_HOST,\n            $this->swooleConfig['ws']['port'] ?? self::DEFAULT_SWOOLE_PORT\n        );\n\n        $ws->on(\n            'open', function ($ws, $request) {\n                $this->writeln('client-Connect.');\n            }\n        );\n\n        $ws->on(\n            'message', function ($ws, $frame) {\n                $jsonData = JsonHelper::decode($frame->data);\n                if (isset($jsonData['handler'])) {\n                    $jsonData['swoole_frame'] = $frame;\n                    $handlerClass = $jsonData['handler'];\n                    try {\n                        $ws->push(\n                            $frame->fd,\n                            Lb::app()->dispatchJob($handlerClass, $jsonData)\n                        );\n                    } catch (\\Throwable $e) {\n                        $ws->push(\n                            $frame->fd,\n                            'Exception:' . $e->getTraceAsString()\n                        );\n                    }\n                } else {\n                    $ws->push(\n                        $frame->fd,\n                        'Handler not exists'\n                    );\n                }\n            }\n        );\n\n        $ws->on(\n            'close', function ($ws, $fd) {\n                $this->writeln('client-closed');\n            }\n        );\n\n        $ws->start();\n    }","label":0}
{"text":"func (s *MemcacheStore) MaxLength(l int) {\n\tfor _, c := range s.Codecs {\n\t\tif codec, ok := c.(*securecookie.SecureCookie); ok {\n\t\t\tcodec.MaxLength(l)\n\t\t}\n\t}\n}","label":0}
{"text":"func ToContext(ctx context.Context, logger *zap.Logger) context.Context {\n\treturn ctxzap.ToContext(ctx, logger)\n}","label":0}
{"text":"def run(self):\n        \n        if not self._app:\n            raise RuntimeError(\"The application must be created before running\")\n\n        # Flask can operate as a single threaded server (which is default) and a multi-threaded server which is\n        # more for development. When the Lambda container is going to be debugged, then it does not make sense\n        # to turn on multi-threading because customers can realistically attach only one container at a time to\n        # the debugger. Keeping this single threaded also enables the Lambda Runner to handle Ctrl+C in order to\n        # kill the container gracefully (Ctrl+C can be handled only by the main thread)\n        multi_threaded = not self.is_debugging\n\n        LOG.debug(\"Localhost server is starting up. Multi-threading = %s\", multi_threaded)\n\n        # This environ signifies we are running a main function for Flask. This is true, since we are using it within\n        # our cli and not on a production server.\n        os.environ['WERKZEUG_RUN_MAIN'] = 'true'\n\n        self._app.run(threaded=multi_threaded, host=self.host, port=self.port)","label":0}
{"text":"def getse(op, arg=None):\n    \n    try:\n        return _se[op]\n    except KeyError:\n        # Continue to opcodes with an effect that depends on arg\n        pass\n\n    if arg is None:\n        raise ValueError(\"Opcode stack behaviour depends on arg\")\n\n    def get_func_tup(arg, nextra):\n        if arg > 0xFFFF:\n            raise ValueError(\"Can only split a two-byte argument\")\n        return (nextra + 1 + (arg & 0xFF) + 2*((arg >> 8) & 0xFF),\n                1)\n\n    if op == CALL_FUNCTION:\n        return get_func_tup(arg, 0)\n    elif op == CALL_FUNCTION_VAR:\n        return get_func_tup(arg, 1)\n    elif op == CALL_FUNCTION_KW:\n        return get_func_tup(arg, 1)\n    elif op == CALL_FUNCTION_VAR_KW:\n        return get_func_tup(arg, 2)\n\n    elif op == BUILD_TUPLE:\n        return arg, 1\n    elif op == BUILD_LIST:\n        return arg, 1\n    elif python_version == '2.7' and op == BUILD_SET:\n        return arg, 1\n    elif op == UNPACK_SEQUENCE:\n        return 1, arg\n    elif op == BUILD_SLICE:\n        return arg, 1\n    elif op == DUP_TOPX:\n        return arg, arg*2\n    elif op == RAISE_VARARGS:\n        return 1+arg, 1\n    elif op == MAKE_FUNCTION:\n        return 1+arg, 1\n    elif op == MAKE_CLOSURE:\n        if python_version == '2.4':\n            raise ValueError(\"The stack effect of MAKE_CLOSURE depends on TOS\")\n        else:\n            return 2+arg, 1\n    else:\n        raise ValueError(\"The opcode %r isn't recognized or has a special \"\n                         \"flow control\" % op)","label":0}
{"text":"static public function getFolders( $dir, $recursive = false )\n    {\n        $subDirs = [];\n        if ( ( $dh = opendir( $dir ) ) ) {\n            while ( ( $file = readdir( $dh ) ) !== false ) {\n                if ( $file !== '.' && $file !== '..' && is_dir( $dir . '\/' . $file ) ) {\n                    $subDirs[] = $file;\n                    if ( $recursive ) {\n                        $subDirs = array_merge( $subDirs, self::getFolders( $dir . DS . $file, true ) );\n                    }\n                }\n            }\n            closedir( $dh );\n        }\n        return $subDirs;\n    }","label":0}
{"text":"def sinwave(n=4,inc=.25):\n\t\t\n\tx=np.arange(-n,n,inc)\n\ty=np.arange(-n,n,inc)\n\tX,Y=np.meshgrid(x,y)\n\tR = np.sqrt(X**2 + Y**2)\n\tZ = np.sin(R)\/(.5*R)\n\treturn pd.DataFrame(Z,index=x,columns=y)","label":0}
{"text":"public function push(PushInterface $push)\n    {\n        $client = $this->getOpenedClient();\n\n        $ecdsaCryptoKey = $this->getECDSACryptoKey();\n        $orign = null;\n        $token = null;\n\n        $message = $this->createMessageBody($push->getMessage());\n\n        foreach ($push->getDevices() as $device) {\n            $endPoint = $device->getToken();\n\n            $newOrigin = $this->getOrigin($endPoint);\n            if (is_null($token) || $orign != $newOrigin) {\n                $origin = $newOrigin;\n                $token = $this->createSignatureToken($origin);\n            }\n\n            $headers = $client->getRequest()->getHeaders();\n            $headers\n                ->addHeaderLine('Crypto-Key', 'p256ecdsa=\"'.$ecdsaCryptoKey.'\"')\n                ->addHeaderLine('Authorization', 'Bearer '.$token)\n            ;\n\n            if (!empty($message)\n                && !empty($device->getParameter('publicKey'))\n                && !empty($device->getParameter('authToken'))\n            ) {\n                $encryptor = $this->getMessageEncryptor();\n                $body = $encryptor->encrypt(\n                    $message,\n                    $device->getParameter('publicKey'),\n                    $device->getParameter('authToken')\n                );\n\n                $headers\n                    ->addHeaderLine('Content-Encoding', 'aesgcm')\n                    ->addHeaderLine('Encryption', 'keyid=\"p256dh\";salt=\"'.$encryptor->getSalt().'\"')\n                ;\n                $cryptoKeyHead = $headers->get('Crypto-Key');\n                $cryptoKeyValue = 'keyid=\"p256dh\";dh=\"'.$encryptor->getServerPublicKey().'\"'.';'.$cryptoKeyHead->getFieldValue();\n                $headers->addHeaderLine('Crypto-Key', $cryptoKeyValue);\n\n                $encType = 'application\/octet-stream';\n            } else {\n                $body = '';\n                $encType = null;\n            }\n\n            $messageObj = $push->getMessage();\n            if ($messageObj instanceof BaseOptionedModel) {\n                $headers->addHeaderLine('TTL', $messageObj->getOption('ttl', $this->getParameter('ttl')));\n\n                if ($messageObj->hasOption('urgency')) {\n                    $headers->addHeaderLine('Urgency', $messageObj->getOption('urgency'));\n                }\n                if ($messageObj->hasOption('topic')) {\n                    $headers->addHeaderLine('Topic', $messageObj->getOption('topic'));\n                }\n            }\n\n            $this->response = $client->setUri($endPoint)\n                                     ->setHeaders($headers)\n                                     ->setMethod('POST')\n                                     ->setRawBody($body)\n                                     ->setEncType($encType)\n                                     ->send();\n\n            switch ($this->response->getStatusCode()) {\n                case 500:\n                    throw new PushException('500 Internal Server Error');\n                    break;\n                case 503:\n                    $exceptionMessage = '503 Server Unavailable';\n                    if ($retry = $this->response->getHeaders()->get('Retry-After')) {\n                        $exceptionMessage .= '; Retry After: '.$retry;\n                    }\n\n                    throw new PushException($exceptionMessage);\n                    break;\n                case 401:\n                    throw new PushException('401 Forbidden; Authentication Error');\n                    break;\n                case 400:\n                    throw new PushException('400 Bad Request; invalid message');\n                    break;\n                case 410:\n                    \/\/ FCM returns 410 on sending to the unsubscribed endpoint.\n                    $this->notRegisteredDevices->add($device);\n\n                    break;\n            }\n\n            if ($this->response->isSuccess()) {\n                $this->pushedDevices->add($device);\n            }\n        }\n\n        return $this->pushedDevices;\n    }","label":0}
{"text":"def primitive(f_raw):\n    \n    @wraps(f_raw)\n    def f_wrapped(*args, **kwargs):\n        boxed_args, trace, node_constructor = find_top_boxed_args(args)\n        if boxed_args:\n            argvals = subvals(args, [(argnum, box._value) for argnum, box in boxed_args])\n            if f_wrapped in notrace_primitives[node_constructor]:\n                return f_wrapped(*argvals, **kwargs)\n            parents = tuple(box._node for _     , box in boxed_args)\n            argnums = tuple(argnum    for argnum, _   in boxed_args)\n            ans = f_wrapped(*argvals, **kwargs)\n            node = node_constructor(ans, f_wrapped, argvals, kwargs, argnums, parents)\n            return new_box(ans, trace, node)\n        else:\n            return f_raw(*args, **kwargs)\n    f_wrapped.fun = f_raw\n    f_wrapped._is_autograd_primitive = True\n    return f_wrapped","label":0}
{"text":"public function setPosition($position) {\r\n        $position = intval($position);\r\n        if ($position !== self::POSITION_TOP && $position !== self::POSITION_RIGHT && $position !== self::POSITION_BOTTOM && $position !== self::POSITION_LEFT) {\r\n            throw new CINArgumentException('The text position must be one of a valid constant.', 'position');\r\n        }\r\n\r\n        $this->position = $position;\r\n    }","label":0}
{"text":"function serializeValueType(t, valueType, acc) {\n  if (t.isBooleanLiteral(valueType)) {\n    acc.properties.unshift(\n      t.objectProperty(t.identifier('type'), t.identifier('Boolean'))\n    );\n  } else if (t.isNumericLiteral(valueType)) {\n    acc.properties.unshift(\n      t.objectProperty(t.identifier('type'), t.identifier('Number'))\n    );\n  } else if (t.isStringLiteral(valueType) || t.isTemplateLiteral(valueType)) {\n    acc.properties.unshift(\n      t.objectProperty(t.identifier('type'), t.identifier('String'))\n    );\n  } else if (t.isRegExpLiteral(valueType)) {\n    acc.properties.unshift(\n      t.objectProperty(t.identifier('type'), t.identifier('RegExp'))\n    );\n  } else {\n    throw new Error('unknown value type');\n  }\n\n  return acc;\n}","label":0}
{"text":"func (s *ReservedNode) SetState(v string) *ReservedNode {\n\ts.State = &v\n\treturn s\n}","label":0}
{"text":"function writeSeeds(dynamodbWriteFunction, tableName, seeds) {\n  if (!dynamodbWriteFunction) {\n    throw new Error(\"dynamodbWriteFunction argument must be provided\");\n  }\n  if (!tableName) {\n    throw new Error(\"table name argument must be provided\");\n  }\n  if (!seeds) {\n    throw new Error(\"seeds argument must be provided\");\n  }\n\n  if (seeds.length > 0) {\n    const seedChunks = _.chunk(seeds, MAX_MIGRATION_CHUNK);\n    return BbPromise.map(\n      seedChunks,\n      (chunk) => writeSeedBatch(dynamodbWriteFunction, tableName, chunk),\n      { concurrency: MIGRATION_SEED_CONCURRENCY }\n    )\n      .then(() => console.log(\"Seed running complete for table: \" + tableName));\n  }\n}","label":0}
{"text":"public static TcpClient<ByteBuf, ByteBuf> newClient(String host, int port) {\n        return newClient(new InetSocketAddress(host, port));\n    }","label":0}
{"text":"func CopyFile(srcFile, destFile string, overwrite bool) error {\n\tvar bFailIfExists uint32 = 1\n\tif overwrite {\n\t\tbFailIfExists = 0\n\t}\n\n\tlpExistingFileName, err := syscall.UTF16PtrFromString(srcFile)\n\tif err != nil {\n\t\treturn err\n\t}\n\tlpNewFileName, err := syscall.UTF16PtrFromString(destFile)\n\tif err != nil {\n\t\treturn err\n\t}\n\tr1, _, err := syscall.Syscall(\n\t\tprocCopyFileW.Addr(),\n\t\t3,\n\t\tuintptr(unsafe.Pointer(lpExistingFileName)),\n\t\tuintptr(unsafe.Pointer(lpNewFileName)),\n\t\tuintptr(bFailIfExists))\n\tif r1 == 0 {\n\t\treturn fmt.Errorf(\"failed CopyFileW Win32 call from '%s' to '%s': %s\", srcFile, destFile, err)\n\t}\n\treturn nil\n}","label":0}
{"text":"public void marshall(Condition condition, ProtocolMarshaller protocolMarshaller) {\n\n        if (condition == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(condition.getLogicalOperator(), LOGICALOPERATOR_BINDING);\n            protocolMarshaller.marshall(condition.getJobName(), JOBNAME_BINDING);\n            protocolMarshaller.marshall(condition.getState(), STATE_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }","label":0}
{"text":"public static String getFullClassName(String packageName, String className) {\n    \treturn ClassServiceUtility.getFullClassName(null, packageName, className);\n    }","label":0}
{"text":"@TargetApi(Build.VERSION_CODES.FROYO)\n    public static boolean hasMicrophoneFeature(PackageManager manager) {\n        return manager.hasSystemFeature(PackageManager.FEATURE_MICROPHONE);\n    }","label":0}
{"text":"def task_status(request, task_id):\n    \"\"\"\"\"\"\n    result = AsyncResult(task_id)\n    state, retval = result.state, result.result\n    response_data = {'id': task_id, 'status': state, 'result': retval}\n    if state in states.EXCEPTION_STATES:\n        traceback = result.traceback\n        response_data.update({'result': safe_repr(retval),\n                              'exc': get_full_cls_name(retval.__class__),\n                              'traceback': traceback})\n    return JsonResponse({'task': response_data})","label":0}
{"text":"function _grad(hash, x, y, z) {\n    var h, u, v;\n    h = hash & 15;\n    u = h < 8 ? x : y;\n    v = h < 4 ? y : h === 12 || h === 14 ? x : z;\n    return ((h & 1) === 0 ? u : -u) + ((h & 2) === 0 ? v : -v);\n}","label":0}
{"text":"protected void addOption(AbstractRenderAppender buffer, String type, String optionValue,\n                             String optionDisplay, int idx, String altText, char accessKey, boolean disabled)\n            throws JspException\n    {\n        ServletRequest req = pageContext.getRequest();\n        if (_cr == null)\n            _cr = TagRenderingBase.Factory.getConstantRendering(req);\n\n        assert(buffer != null);\n        assert(optionValue != null);\n        assert(optionDisplay != null);\n        assert(type != null);\n\n        if (_orientation != null && isVertical()) {\n            _cr.TR_TD(buffer);\n        }\n\n        _inputState.clear();\n        _inputState.type = type;\n        _inputState.name = getQualifiedDataSourceName();\n        _inputState.value = optionValue;\n        _inputState.style = _style;\n        _inputState.styleClass = _class;\n\n        if (isMatched(optionValue, null)) {\n            _inputState.checked = true;\n        }\n        _inputState.disabled = isDisabled();\n        _inputState.registerAttribute(AbstractHtmlState.ATTR_GENERAL, ALT, altText);\n        if (accessKey != 0x00)\n            _inputState.registerAttribute(AbstractHtmlState.ATTR_GENERAL, ACCESSKEY, Character.toString(accessKey));\n\n        \/\/ if there are attributes defined push them to the options.\n        if (_attrs != null && _attrs.size() > 0) {\n            Iterator iterator = _attrs.keySet().iterator();\n            for (; iterator.hasNext();) {\n                String key = (String) iterator.next();\n                if (key == null)\n                    continue;\n\n                String value = (String) _attrs.get(key);\n                _inputState.registerAttribute(AbstractHtmlState.ATTR_GENERAL, key, value);\n            }\n        }\n\n        TagRenderingBase br = TagRenderingBase.Factory.getRendering(TagRenderingBase.INPUT_BOOLEAN_TAG, req);\n        br.doStartTag(buffer, _inputState);\n        br.doEndTag(buffer);\n\n        String ls = _labelStyle;\n        String lsc = _labelStyleClass;\n\n        _spanState.style = ls;\n        _spanState.styleClass = lsc;\n\n        br = TagRenderingBase.Factory.getRendering(TagRenderingBase.SPAN_TAG, req);\n        br.doStartTag(buffer, _spanState);\n        buffer.append(optionDisplay);\n        br.doEndTag(buffer);\n\n        \/\/ backward compatibility this is now overridden by the _orientation\n        if (_orientation == null) {\n            _cr.BR(buffer);\n        }\n        else {\n            if (isVertical()) {\n                _cr.TR_TD(buffer);\n            }\n            else {\n                _cr.NBSP(buffer);\n            }\n        }\n    }","label":0}
{"text":"public function get($uri, array $params = array())\n    {\n\n        $uri .= '?' . http_build_query($params);\n\n        $ch = $this->initCurlHandler($uri);\n        return $this->makeRequest($ch);\n\n    }","label":0}
{"text":"def get_objective(self, sampler):\n        \"\"\"\"\"\"\n        def objective(params):\n            circuit = self.get_circuit(params)\n            circuit.make_cache()\n            return self.get_energy(circuit, sampler)\n        return objective","label":0}
{"text":"protected boolean processQueryParameters(Trace trace, Node node) {\n        boolean ret = false;\n\n        \/\/ Translate query string into a map\n        Set<Property> queryString = node.getProperties(Constants.PROP_HTTP_QUERY);\n        if (!queryString.isEmpty()) {\n            StringTokenizer st = new StringTokenizer(queryString.iterator().next().getValue(), \"&\");\n            while (st.hasMoreTokens()) {\n                String token = st.nextToken();\n                String[] namevalue = token.split(\"=\");\n                if (namevalue.length == 2) {\n                    if (queryParameters.contains(namevalue[0])) {\n                        try {\n                            node.getProperties().add(new Property(namevalue[0],\n                                    URLDecoder.decode(namevalue[1], \"UTF-8\")));\n                            ret = true;\n                        } catch (UnsupportedEncodingException e) {\n                            if (log.isLoggable(Level.FINEST)) {\n                                log.finest(\"Failed to decode value '\" + namevalue[1] + \"': \" + e);\n                            }\n                        }\n                    } else if (log.isLoggable(Level.FINEST)) {\n                        log.finest(\"Ignoring query parameter '\" + namevalue[0] + \"'\");\n                    }\n                } else if (log.isLoggable(Level.FINEST)) {\n                    log.finest(\"Query string part does not include name\/value pair: \" + token);\n                }\n            }\n        }\n\n        return ret;\n    }","label":0}
{"text":"public function view($view, $data = [], $mergeData = [])\n    {\n        return $this->response(View::make($view, $data, $mergeData));\n    }","label":0}
{"text":"def add_visual(self, visual):\n        \n        # Retrieve the visual's GLSL inserter.\n        inserter = visual.inserter\n        # Add the visual's transforms.\n        inserter.add_transform_chain(visual.transforms)\n        # Then, add the canvas' transforms.\n        canvas_transforms = visual.canvas_transforms_filter(self.transforms)\n        inserter.add_transform_chain(canvas_transforms)\n        # Also, add the canvas' inserter.\n        inserter += self.inserter\n        # Now, we insert the transforms GLSL into the shaders.\n        vs, fs = visual.vertex_shader, visual.fragment_shader\n        vs, fs = inserter.insert_into_shaders(vs, fs)\n        # Finally, we create the visual's program.\n        visual.program = gloo.Program(vs, fs)\n        logger.log(5, \"Vertex shader: %s\", vs)\n        logger.log(5, \"Fragment shader: %s\", fs)\n        # Initialize the size.\n        visual.on_resize(self.size)\n        # Register the visual in the list of visuals in the canvas.\n        self.visuals.append(visual)\n        self.events.visual_added(visual=visual)","label":0}
{"text":"func (v *ListStore) Set(iter *TreeIter, a ...interface{}) {\n\tfor i := 0; i < len(a); i += 2 {\n\t\tv.SetValue(iter, a[i].(int), a[i+1])\n\t}\n}","label":0}
{"text":"@Override\n    public void setNString(int parameterIndex, String value) throws SQLException\n    {\n        checkParameterBounds(parameterIndex);\n        throw SQLError.noSupport();\n    }","label":0}
{"text":"public function _validation_numeric_between($val, $min_val, $max_val)\n\t{\n\t\treturn $this->_empty($val) or (floatval($val) >= floatval($min_val) and floatval($val) <= floatval($max_val));\n\t}","label":0}
{"text":"func (h Hash) String(key string) (string, error) {\n\tif value, ok := h[key]; ok {\n\t\treturn value.String(), nil\n\t}\n\treturn \"\", errors.New(ErrInvalidKey, errorMessages, key)\n}","label":0}
{"text":"func (f *PrefetchFile) WriteFile(ctx context.Context, fi *dokan.FileInfo, bs []byte, offset int64) (n int, err error) {\n\tf.fs.logEnter(ctx, \"PrefetchFile WriteFile\")\n\tdefer func() { f.fs.reportErr(ctx, libkbfs.WriteMode, err) }()\n\tf.fs.log.CDebugf(ctx, \"PrefetchFile (enable: %t) Write\", f.enable)\n\tif len(bs) == 0 {\n\t\treturn 0, nil\n\t}\n\n\tf.fs.config.BlockOps().TogglePrefetcher(f.enable)\n\n\treturn len(bs), err\n}","label":0}
{"text":"func (hs *HealthzServer) Run() {\n\tserveMux := http.NewServeMux()\n\tserveMux.Handle(\"\/healthz\", healthzHandler{hs: hs})\n\tserver := hs.httpFactory.New(hs.addr, serveMux)\n\n\tgo wait.Until(func() {\n\t\tklog.V(3).Infof(\"Starting goroutine for healthz on %s\", hs.addr)\n\n\t\tlistener, err := hs.listener.Listen(hs.addr)\n\t\tif err != nil {\n\t\t\tmsg := fmt.Sprintf(\"Failed to start node healthz on %s: %v\", hs.addr, err)\n\t\t\tif hs.recorder != nil {\n\t\t\t\ths.recorder.Eventf(hs.nodeRef, api.EventTypeWarning, \"FailedToStartNodeHealthcheck\", msg)\n\t\t\t}\n\t\t\tklog.Error(msg)\n\t\t\treturn\n\t\t}\n\n\t\tif err := server.Serve(listener); err != nil {\n\t\t\tklog.Errorf(\"Healthz closed with error: %v\", err)\n\t\t\treturn\n\t\t}\n\t\tklog.Error(\"Unexpected healthz closed.\")\n\t}, nodeHealthzRetryInterval, wait.NeverStop)\n}","label":0}
{"text":"function negate(v, dst) {\n  dst = dst || new VecType(3);\n\n  dst[0] = -v[0];\n  dst[1] = -v[1];\n  dst[2] = -v[2];\n\n  return dst;\n}","label":0}
{"text":"def write_message f, full=true, date=Time.now\n    raise ArgumentError, \"no pre-defined date: header allowed\" if @header[\"Date\"]\n    f.puts format_headers(@header).first\n    f.puts <<EOS\nDate: #{date.rfc2822}\nMessage-Id: #{@message_id}\nEOS\n    if full\n      f.puts <<EOS\nMime-Version: 1.0\nContent-Type: text\/plain; charset=us-ascii\nContent-Disposition: inline\nUser-Agent: Redwood\/#{Redwood::VERSION}\nEOS\n    end\n\n    f.puts\n    f.puts sanitize_body(@body.join(\"\\n\"))\n    f.puts sig_lines if full unless $config[:edit_signature]\n  end","label":0}
{"text":"func New(config *Config) (*Kubernetes, error) {\n\tvar err error\n\n\tif config == nil {\n\t\tconfig = &Config{}\n\t}\n\n\tif config.ClusterConfig == nil {\n\t\tconfig.ClusterConfig, err = rest.InClusterConfig()\n\t}\n\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tclientset, err := kubernetes.NewForConfig(config.ClusterConfig)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn &Kubernetes{Clientset: clientset, Config: config}, nil\n}","label":0}
{"text":"public function toBest($precision = null)\n    {\n        $fromUnit = UnitResolver::resolve($this->from);\n        $base = $this->getBase() == 2 ? 1024 : 1000;\n        $converted = $this->start;\n        while ($converted >= 1) {\n            $fromUnit++;\n            $result = $this->div($this->start, pow($base, $fromUnit), $precision);\n            if ($result <= 1) return $converted;\n            $converted = $result;\n        }\n        return $converted;\n    }","label":0}
{"text":"def description(self, platform, key):\n        \"\"\"\"\"\"\n        patterns = self._dict_dscr.get(platform, None)\n        description = patterns.get(key, None)\n        return description","label":0}
{"text":"def to_markdown(self, format='{id} {classes} {kvs}', surround=True):\n        \n        id = '#' + self.id if self.id else ''\n        classes = ' '.join('.' + cls for cls in self.classes)\n        kvs = ' '.join('{}={}'.format(k, v) for k, v in self.kvs.items())\n\n        attrs = format.format(id=id, classes=classes, kvs=kvs).strip()\n\n        if surround:\n            return '{' + attrs + '}'\n        elif not surround:\n            return attrs","label":0}
{"text":"public OutlierResult run(Database database, Relation<O> relation) {\n    DistanceQuery<O> distFunc = database.getDistanceQuery(relation, getDistanceFunction());\n    KNNQuery<O> knnQuery = database.getKNNQuery(distFunc, k);\n\n    \/\/ track the maximum value for normalization\n    DoubleMinMax ldofminmax = new DoubleMinMax();\n    \/\/ compute the ldof values\n    WritableDoubleDataStore ldofs = DataStoreUtil.makeDoubleStorage(relation.getDBIDs(), DataStoreFactory.HINT_HOT | DataStoreFactory.HINT_TEMP);\n\n    \/\/ compute LOF_SCORE of each db object\n    if(LOG.isVerbose()) {\n      LOG.verbose(\"Computing LDOFs\");\n    }\n    FiniteProgress progressLDOFs = LOG.isVerbose() ? new FiniteProgress(\"LDOF for objects\", relation.size(), LOG) : null;\n\n    Mean dxp = new Mean(), Dxp = new Mean();\n    for(DBIDIter iditer = relation.iterDBIDs(); iditer.valid(); iditer.advance()) {\n      KNNList neighbors = knnQuery.getKNNForDBID(iditer, k);\n      dxp.reset();\n      Dxp.reset();\n      DoubleDBIDListIter neighbor1 = neighbors.iter(),\n          neighbor2 = neighbors.iter();\n      for(; neighbor1.valid(); neighbor1.advance()) {\n        \/\/ skip the point itself\n        if(DBIDUtil.equal(neighbor1, iditer)) {\n          continue;\n        }\n        dxp.put(neighbor1.doubleValue());\n        for(neighbor2.seek(neighbor1.getOffset() + 1); neighbor2.valid(); neighbor2.advance()) {\n          \/\/ skip the point itself\n          if(DBIDUtil.equal(neighbor2, iditer)) {\n            continue;\n          }\n          Dxp.put(distFunc.distance(neighbor1, neighbor2));\n        }\n      }\n      double ldof = dxp.getMean() \/ Dxp.getMean();\n      if(Double.isNaN(ldof) || Double.isInfinite(ldof)) {\n        ldof = 1.0;\n      }\n      ldofs.putDouble(iditer, ldof);\n      \/\/ update maximum\n      ldofminmax.put(ldof);\n\n      LOG.incrementProcessed(progressLDOFs);\n    }\n    LOG.ensureCompleted(progressLDOFs);\n\n    \/\/ Build result representation.\n    DoubleRelation scoreResult = new MaterializedDoubleRelation(\"LDOF Outlier Score\", \"ldof-outlier\", ldofs, relation.getDBIDs());\n    OutlierScoreMeta scoreMeta = new QuotientOutlierScoreMeta(ldofminmax.getMin(), ldofminmax.getMax(), 0.0, Double.POSITIVE_INFINITY, LDOF_BASELINE);\n    return new OutlierResult(scoreMeta, scoreResult);\n  }","label":0}
{"text":"def negate_gate(wordlen, input='x', output='~x'):\n    \"\"\"\"\"\"\n    neg = bitwise_negate(wordlen, input, \"tmp\")\n    inc = inc_gate(wordlen, \"tmp\", output)\n    return neg >> inc","label":0}
{"text":"func (v *evalVisitor) VisitString(node *ast.StringLiteral) interface{} {\n\tv.at(node)\n\n\treturn node.Value\n}","label":0}
{"text":"def before_request(self) -> Optional[Response]:\n        \"\"\"\"\"\"\n        auth = request.authorization\n        if not auth or not self._check_auth(auth.username, auth.password):\n            return Response(\n                'Could not verify your access level for that URL.\\n'\n                'You have to login with proper credentials', 401,\n                {'WWW-Authenticate': 'Basic realm=\"Login Required\"'}\n            )\n        session['logged_in'] = auth.username\n        # pylint wants this return statement\n        return None","label":0}
{"text":"protected void handleParsedMessage() {\n\n        InterChannelCallback cb = null;\n        \/\/ use the read callback for early reads or temp messages requested\n        \/\/ LI4335 - handle early reads too\n        if (this.bEarlyReads || this.bTempResponsesUsed) {\n            cb = getAppReadCallback();\n        } else {\n            cb = getAppWriteCallback();\n        }\n        VirtualConnection vc = null;\n        do {\n            this.numResponsesReceived++;\n            if (!getResponseImpl().isTemporaryStatusCode()) {\n                \/\/ a final response message was received\n                if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {\n                    Tr.debug(tc, \"Notifying app channel of final response.\");\n                }\n                cb.complete(getVC());\n                return;\n            }\n\n            \/\/ received a temporary response\n            int code = getResponseImpl().getStatusCodeAsInt();\n            if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {\n                Tr.debug(tc, \"Received response (#\" + numberResponsesReceived() + \"): \" + code);\n            }\n            if (numberResponsesReceived() > getHttpConfig().getLimitOnNumberOfResponses()) {\n                \/\/ too many temp responses\n                if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {\n                    Tr.debug(tc, \"Too many async temp responses received.\");\n                }\n                cb.error(getVC(), new IOException(\"Max temp responses received: \" + numberResponsesReceived()));\n                return;\n            }\n            if (this.bTempResponsesUsed) {\n                \/\/ call the app channel with this new response\n                cb.complete(getVC());\n                return;\n            }\n            if (getRequestImpl().isExpect100Continue()) {\n                if (100 != code) {\n                    \/\/ if the Expectation failed, then this connection is finished, so\n                    \/\/ no need to reset any values.\n                    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {\n                        Tr.debug(tc, \"Expect 100-continue failed with \" + code);\n                    }\n                    setPersistent(false);\n                    cb.error(getVC(), new ExpectationFailedException(code + \" \" + getResponseImpl().getReasonPhrase()));\n                    return;\n                } else if (1 == numberResponsesReceived() && isHeadersSentState()) {\n                    \/\/ first 100-continue only, return to app channel immed but\n                    \/\/ only if sendHeaders was used (meaning they want 100-continue)\n                    if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {\n                        Tr.debug(tc, \"Notifying channel of first 100-continue\");\n                    }\n                    cb.complete(getVC());\n                    return;\n                }\n            }\n            \/\/ otherwise, this was a valid temporary response but the app channel\n            \/\/ doesn't want to see it\n            if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {\n                Tr.debug(tc, \"Ignoring temporary response...\");\n            }\n            resetRead();\n            if (setupReadBuffers(getHttpConfig().getIncomingHdrBufferSize(), false)) {\n                \/\/ data is already available\n                vc = getVC();\n            } else {\n                \/\/ read for the next bit of data\n                vc = getTSC().getReadInterface().read(1, HttpOSCReadCallback.getRef(), false, getReadTimeout());\n            }\n            if (null != vc) {\n                if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {\n                    Tr.debug(tc, \"Attempting a parse of response data.\");\n                }\n                vc = parseResponseMessageAsync();\n            }\n        } while (null != vc);\n    }","label":0}
{"text":"function createWrapperClass(component) {\n  return class WrapperClass {\n    static inject = [Element];\n\n    \/**\n     * @param {Element} element\n     *\/\n    constructor(element) {\n      this.element = element;\n    }\n\n    \/**\n     * Re-render the Preact component when values changed\n     *\/\n    attached() {\n      if (!this.component) {\n        this.render();\n      } else if (typeof this.component.componentDidMount === 'function') {\n        this.component.componentDidMount();\n      }\n    }\n\n    \/**\n     * Triggers un-mound function to release events\n     *\/\n    detached() {\n      if (this.component && typeof this.component.componentWillUnmount === 'function') {\n        this.component.componentWillUnmount();\n      }\n    }\n\n    \/**\n     * Un-render the component\n     *\/\n    unbind() {\n      this.component = null;\n      this.element.component = null;\n      render('', this.element, this.component);\n    }\n\n    \/**\n     * Determine props passed to create react elements\n     * @returns {Object}\n     *\/\n    getProps() {\n      const props = this.props || {};\n      \/\/ Copy bound properties because Object.assign doesn't work deep\n      for (const prop in this) {\n        if (this[prop] !== undefined && typeof this[prop] !== 'function') {\n          props[prop] = this[prop] === '' ? true : this[prop];\n        }\n      }\n      delete props.element;\n\n      return Object.assign({}, component.defaultProps, props);\n    }\n\n    \/**\n     * Will be called when bindable updated\n     *\/\n    updateProps() {\n      if (this.component && typeof this.component.componentWillReceiveProps === 'function') {\n        const props = this.getProps();\n        this.component.componentWillReceiveProps(props);\n        this.component.props = props;\n      }\n    }\n\n    \/**\n     * Render Preact component\n     *\/\n    render() {\n      \/\/ Create container in active dom to apply styles already\n      const container = document.createElement('div');\n      this.element.appendChild(container);\n\n      \/\/ Render react component with a slot as children into a container to possibly replace the slot with real children\n      const reactElement = createElement(component, this.getProps(), createElement('slot'));\n      this.component = render(reactElement, container);\n      this.element.component = this.component;\n\n      const slot = container.querySelector('slot');\n      \/\/ If no slot is rendered the component doesn't accept children\n      if (slot) {\n        const content = this.element.querySelector('au-content');\n        if (!content) {\n          return;\n        }\n        \/\/ Move original children to slot position\n        for (let i = 0; i < content.children.length; i++) {\n          slot.parentNode.insertBefore(content.children[i], slot);\n        }\n        slot.parentNode.removeChild(slot);\n        this.insertContainerContent(container, content);\n      } else {\n        this.insertContainerContent(container);\n      }\n    }\n\n    \/**\n     * Moves content of the container into the correct place within this element\n     * @param {HTMLElement} container\n     * @param {HTMLElement} replacement\n     *\/\n    insertContainerContent(container, replacement) {\n      \/\/ Append child to fragment to get rid of container element which can break element flow\n      const fragment = document.createDocumentFragment();\n      for (let i = 0; i < container.children.length; i++) {\n        fragment.appendChild(container.children[i]);\n      }\n      \/\/ Either replace au-content or just append if no children are passed\n      if (replacement) {\n        this.element.replaceChild(fragment, replacement);\n      } else {\n        this.element.appendChild(fragment);\n      }\n      \/\/ Container is now obsolete as the children are laying directly under the parent\n      this.element.removeChild(container);\n    }\n  };\n}","label":0}
{"text":"def to_circuit(self) -> Circuit:\n        \n        circuit = Circuit(device=self.device)\n        time = None  # type: Optional[Timestamp]\n        for so in self.scheduled_operations:\n            if so.time != time:\n                circuit.append(so.operation,\n                               strategy=InsertStrategy.NEW_THEN_INLINE)\n                time = so.time\n            else:\n                circuit.append(so.operation,\n                               strategy=InsertStrategy.INLINE)\n        return circuit","label":0}
{"text":"def add_ap(self, id_, label=None, addPrefix=True):\n        \n        self.add_trip(id_, rdf.type, owl.AnnotationProperty)\n        if label:\n            self.add_trip(id_, rdfs.label, label)\n            if addPrefix:\n                prefix = ''.join([s.capitalize() for s in label.split()])\n                namespace = self.expand(id_)\n                self.add_namespace(prefix, namespace)","label":0}
{"text":"public function addPriceAggregate(PriceAggregate $priceAggregate, $operation = self::ADD)\n    {\n        return $this->addPrices($priceAggregate->getPerTaxRate(), $operation);\n    }","label":0}
{"text":"func (c *ciliumNetworkPolicies) Create(ciliumNetworkPolicy *v2.CiliumNetworkPolicy) (result *v2.CiliumNetworkPolicy, err error) {\n\tresult = &v2.CiliumNetworkPolicy{}\n\terr = c.client.Post().\n\t\tNamespace(c.ns).\n\t\tResource(\"ciliumnetworkpolicies\").\n\t\tBody(ciliumNetworkPolicy).\n\t\tDo().\n\t\tInto(result)\n\treturn\n}","label":0}
{"text":"public final EObject ruleXStringLiteral() throws RecognitionException {\n        EObject current = null;\n\n        Token lv_value_1_0=null;\n\n\n        \tenterRule();\n\n        try {\n            \/\/ InternalXbaseWithAnnotations.g:5292:2: ( ( () ( (lv_value_1_0= RULE_STRING ) ) ) )\n            \/\/ InternalXbaseWithAnnotations.g:5293:2: ( () ( (lv_value_1_0= RULE_STRING ) ) )\n            {\n            \/\/ InternalXbaseWithAnnotations.g:5293:2: ( () ( (lv_value_1_0= RULE_STRING ) ) )\n            \/\/ InternalXbaseWithAnnotations.g:5294:3: () ( (lv_value_1_0= RULE_STRING ) )\n            {\n            \/\/ InternalXbaseWithAnnotations.g:5294:3: ()\n            \/\/ InternalXbaseWithAnnotations.g:5295:4: \n            {\n            if ( state.backtracking==0 ) {\n\n              \t\t\t\tcurrent = forceCreateModelElement(\n              \t\t\t\t\tgrammarAccess.getXStringLiteralAccess().getXStringLiteralAction_0(),\n              \t\t\t\t\tcurrent);\n              \t\t\t\n            }\n\n            }\n\n            \/\/ InternalXbaseWithAnnotations.g:5301:3: ( (lv_value_1_0= RULE_STRING ) )\n            \/\/ InternalXbaseWithAnnotations.g:5302:4: (lv_value_1_0= RULE_STRING )\n            {\n            \/\/ InternalXbaseWithAnnotations.g:5302:4: (lv_value_1_0= RULE_STRING )\n            \/\/ InternalXbaseWithAnnotations.g:5303:5: lv_value_1_0= RULE_STRING\n            {\n            lv_value_1_0=(Token)match(input,RULE_STRING,FOLLOW_2); if (state.failed) return current;\n            if ( state.backtracking==0 ) {\n\n              \t\t\t\t\tnewLeafNode(lv_value_1_0, grammarAccess.getXStringLiteralAccess().getValueSTRINGTerminalRuleCall_1_0());\n              \t\t\t\t\n            }\n            if ( state.backtracking==0 ) {\n\n              \t\t\t\t\tif (current==null) {\n              \t\t\t\t\t\tcurrent = createModelElement(grammarAccess.getXStringLiteralRule());\n              \t\t\t\t\t}\n              \t\t\t\t\tsetWithLastConsumed(\n              \t\t\t\t\t\tcurrent,\n              \t\t\t\t\t\t\"value\",\n              \t\t\t\t\t\tlv_value_1_0,\n              \t\t\t\t\t\t\"org.eclipse.xtext.xbase.Xtype.STRING\");\n              \t\t\t\t\n            }\n\n            }\n\n\n            }\n\n\n            }\n\n\n            }\n\n            if ( state.backtracking==0 ) {\n\n              \tleaveRule();\n\n            }\n        }\n\n            catch (RecognitionException re) {\n                recover(input,re);\n                appendSkippedTokens();\n            }\n        finally {\n        }\n        return current;\n    }","label":0}
{"text":"public TVInfo getTVInfo(int tvID, String language, String... appendToResponse) throws MovieDbException {\n        return tmdbTv.getTVInfo(tvID, language, appendToResponse);\n    }","label":0}
{"text":"def eslint_supportdir(self, task_workdir):\n    \n    bootstrapped_support_path = os.path.join(task_workdir, 'eslint')\n\n    # TODO(nsaechao): Should only have to check if the \"eslint\" dir exists in the task_workdir\n    # assuming fingerprinting works as intended.\n\n    # If the eslint_setupdir is not provided or missing required files, then\n    # clean up the directory so that Pants can install a pre-defined eslint version later on.\n    # Otherwise, if there is no configurations changes, rely on the cache.\n    # If there is a config change detected, use the new configuration.\n    if self.eslint_setupdir:\n      configured = all(os.path.exists(os.path.join(self.eslint_setupdir, f))\n                       for f in self._eslint_required_files)\n    else:\n      configured = False\n    if not configured:\n      safe_mkdir(bootstrapped_support_path, clean=True)\n    else:\n      try:\n        installed = all(filecmp.cmp(\n          os.path.join(self.eslint_setupdir, f), os.path.join(bootstrapped_support_path, f))\n        for f in self._eslint_required_files)\n      except OSError:\n        installed = False\n\n      if not installed:\n        self._configure_eslinter(bootstrapped_support_path)\n    return bootstrapped_support_path, configured","label":0}
{"text":"public function createIndex($index, $configuration = null)\n    {\n        $body = $configuration !== null ? Json::encode($configuration) : null;\n\n        return $this->db->put([$index], [], $body);\n    }","label":0}
{"text":"public static void main(String[] args)\n      throws IOException, NoSuchAlgorithmException, InvalidKeyException, XmlPullParserException {\n    try {\n      \/* play.min.io for test and development. *\/\n      MinioClient minioClient = new MinioClient(\"https:\/\/play.min.io:9000\",\n          \"Q3AM3UQ867SPQQA43P2F\", \"zuf+tfteSlswRu7BJ86wekitnifILbZam1KYY3TG\");\n\n      \/* Amazon S3: *\/\n      \/\/ MinioClient minioClient = new MinioClient(\"https:\/\/s3.amazonaws.com\", \"YOUR-ACCESSKEYID\",\n      \/\/ \"YOUR-SECRETACCESSKEY\");\n\n      \/\/ Check whether the object exists using statObject(). If the object is not found,\n      \/\/ statObject() throws an exception. It means that the object exists when statObject()\n      \/\/ execution is successful.\n\n      \/\/ Get object stat information.\n      ObjectStat objectStat = minioClient.statObject(\"testbucket\", \"resumes\/4.original.pdf\");\n\n      \/\/ Get input stream to have content of 'my-objectname' from 'my-bucketname'\n      InputStream is = new ProgressStream(\"Downloading .. \", ProgressBarStyle.ASCII,\n          objectStat.length(), minioClient.getObject(\"my-bucketname\", \"my-objectname\"));\n\n      Path path = Paths.get(\"my-filename\");\n      OutputStream os = Files.newOutputStream(path, StandardOpenOption.CREATE);\n\n      long bytesWritten = ByteStreams.copy(is, os);\n      is.close();\n      os.close();\n\n      if (bytesWritten != objectStat.length()) {\n        throw new IOException(path + \": unexpected data written.  expected = \" + objectStat.length()\n            + \", written = \" + bytesWritten);\n      }\n\n    } catch (MinioException e) {\n      System.out.println(\"Error occurred: \" + e);\n    }\n  }","label":0}
{"text":"public function update(array $data, $isAtomic = true)\n    {\n        $validationStatus = array();\n        \/\/ Check all values before modifying the object.\n        foreach ($data as $name => $value) {\n            $fieldValidationStatus = $this->validate($name, $value);\n            if ($fieldValidationStatus) {\n                $validationStatus[$name] = $fieldValidationStatus;\n            } elseif (!$isAtomic) {\n                \/\/ If the field is valid and the operation does not need\n                \/\/ to be atomic, keep the value.\n                $this->$name = $value;\n            }\n        }\n\n        if (empty($validationStatus)) {\n            \/\/ If the operation is not atomic, the valid values have\n            \/\/ already been set. Otherwise, all the values can now\n            \/\/ be safely assigned.\n            if ($isAtomic) {\n                \/\/ The fields' values are valid, the object can be updated.\n                foreach ($data as $name => $value) {\n                    \/\/ Check each value before modifying the object.\n                    $this->$name = $value;\n                }\n            }\n        } else {\n            \/\/ If there is something in the validation status, the validation\n            \/\/ failed. Load the validation status into an exception.\n            $exception = new Validators\\Exception;\n            $exception->setValidationStatus($validationStatus);\n            throw $exception;\n        }\n\n        \/\/ If the entity has an now an ID, register it with its Factory.\n        $id = @$data['id'];\n        if ($id && !$this->getFactory()->getEntity($id)) {\n            $this->getFactory()->registerEntity($this);\n        }\n    }","label":0}
{"text":"protected function handleHttpException(Exception $e)\n    {\n        $statusCode = $e->getStatusCode();\n\n        \/\/ if there is no exception message just get the standard HTTP text.\n        if (empty($e->getMessage())) {\n            $message = Response::$statusTexts[$statusCode];\n        } else {\n            $message = $e->getMessage();\n        }\n\n        return $this->generateResponse('', null, $statusCode, Status::FAIL, $message);\n    }","label":0}
{"text":"@XmlElementDecl(namespace = \"http:\/\/www.opengis.net\/gml\", name = \"topoCurveProperty\")\n    public JAXBElement<TopoCurvePropertyType> createTopoCurveProperty(TopoCurvePropertyType value) {\n        return new JAXBElement<TopoCurvePropertyType>(_TopoCurveProperty_QNAME, TopoCurvePropertyType.class, null, value);\n    }","label":0}
{"text":"public static RamDisk readGzipped(File f)\n            throws FileNotFoundException, IOException {\n        \n        final FileInputStream is = new FileInputStream(f);\n        \n        try {\n            return readGzipped(is);\n        } finally {\n            is.close();\n        }\n    }","label":0}
{"text":"private void printDatabase(Account acc, int level, PrintStream stream) {\n        String buf = \"\";\n\n        for (int i = 0; i < level; i++)\n            buf += \" \";\n\n        buf += \"+\";\n        buf += acc.getName() + \"[\" + acc.getUrl() + \"] (\" + acc.getPatterns().size() + \" patterns)\";\n\n        stream.println(buf);\n\n        for (Account account : acc.getChildren())\n            printDatabase(account, level + 2, stream);\n    }\n\n    public List<Account> findPathToAccountById(String id) {\n        LinkedList<Account> result = getRootInLinkedList();\n        findAccountById(result, id);\n        \/\/ reverse the list, so that its,<root> -> parent -> ... -> Found Account\n        List<Account> retValue = new ArrayList<Account>(result.size());\n        Iterator<Account> iter = result.descendingIterator();\n        while (iter.hasNext()) retValue.add(iter.next());\n        return retValue;\n    }\n\n    public List<Account> getAllAccounts() {\n        Set<Account> acc = new HashSet<Account>();\n        getAllAccounts(getRootAccount(), acc);\n        List<Account> sorted = new ArrayList<Account>(acc);\n        Collections.sort(sorted, new Comparator<Account>() {\n            @Override\n            public int compare(Account o1, Account o2) {\n                return o1.getName().compareToIgnoreCase(o2.getName());\n            }\n        });\n        return sorted;\n    }\n\n    private void getAllAccounts(Account base, Collection<Account> into) {\n        for (Account c : base.getChildren()) {\n            if ( c.hasChildren() ) {\n                getAllAccounts(c, into);\n            } else {\n                into.add(c);\n            }\n        }\n    }\n\n\n    \/**\n     * Locates an account, given an id.\n     *\n     * @param id The account id (unique hash).\n     * @return The account if found, else null.\n     *\/\n    public Account findAccountById(String id) {\n        return findAccountById(getRootInLinkedList(), id);\n    }\n\n    \/**\n     * Internal function to recurse through accounts looking for an id.\n     *\n     * @param stack  The path to the current parent\n     * @param id     The id to look for.\n     * @return The Account if found, else null.\n     *\/\n    private Account findAccountById(LinkedList<Account> stack, String id) {\n        final Account parent = stack.peek();\n        if (parent == null) {\n            if ( ! stack.isEmpty() ) stack.pop();\n            return null;\n        }\n        for (Account child : parent.getChildren()) {\n            if (child.getId().equals(id)) {\n                stack.push(child);\n                return child;\n            }\n            if (child.getChildren().size() > 0) {\n                stack.push(child);\n                Account foundAccount = findAccountById(stack, id);\n                if (foundAccount != null)\n                    return foundAccount;\n            }\n        }\n        stack.pop();\n        return null;\n    }\n\n    private LinkedList<Account> getRootInLinkedList() {\n        LinkedList<Account> stack = new LinkedList<Account>();\n        stack.add(rootAccount);\n        return stack;\n    }\n\n    \/**\n     * Searches the database for any account with a matching URL.\n     *\n     * @param url The regex to search with.\n     * @return The account if found, else null.\n     *\/\n    public Account findAccountByUrl(String url) {\n        return findAccountByUrl(rootAccount, url);\n    }\n\n    \/**\n     * Internal function to aid in searching.  This will find the first account in the tree starting at parent\n     * that matches the url given.\n     *\n     * @param parent - The parent to start searching with.\n     * @param url    - Url to search for\n     * @return the matching account (maybe the parent), or Null if no matching account was found.\n     *\/\n    private Account findAccountByUrl(Account parent, String url) {\n        \/\/ First search the parent\n        if (AccountPatternMatcher.matchUrl(parent, url) && !parent.isRoot())\n            return parent;\n        for (Account child : parent.getChildren()) {\n            Account foundAccount = findAccountByUrl(child, url);\n            if (foundAccount != null)\n                return foundAccount;\n        }\n        return null;\n    }","label":0}
{"text":"@Override\n\t@Transactional(enabled = false)\n\tpublic CommerceWarehouse createCommerceWarehouse(long commerceWarehouseId) {\n\t\treturn commerceWarehousePersistence.create(commerceWarehouseId);\n\t}","label":0}
{"text":"public function save()\n    {\n        \/\/ Validate\n        if (!$this->validates()) {\n            return false;\n        }\n\n        \/\/ Run filter\n        $this->runFilters('before', $this->_isNew ? 'create' : 'save');\n\n        \/\/ Get data\n        $data = static::data();\n\n        \/\/ Create\n        if ($this->_isNew) {\n            $result = static::connection()\n                ->insert($data)\n                ->into(static::table())\n                ->exec();\n\n            $this->id = static::connection()->lastInsertId();\n        }\n        \/\/ Update\n        else {\n            $result = static::connection()\n                ->update(static::table())\n                ->set($data)\n                ->where(static::$_primaryKey . ' = ?', $data[static::$_primaryKey])\n                ->exec();\n        }\n\n        \/\/ Run filters\n        $this->runFilters('after', $this->_isNew ? 'create' : 'save');\n\n        return $result;\n    }","label":0}
{"text":"func (c *Client) AddVirtualIP(requestVirtualIP pool.VirtualIP) error {\n\treturn c.call(\"AddVirtualIP\", requestVirtualIP, nil)\n}","label":0}
{"text":"func (s *CreateDBInstanceInput) SetStorageEncrypted(v bool) *CreateDBInstanceInput {\n\ts.StorageEncrypted = &v\n\treturn s\n}","label":0}
{"text":"def add_var_mb(table: PrettyTable,\n               vardict: Dict[str, str],\n               varname: str) -> None:\n    \n    valstr = vardict.get(varname, None)\n    table.add_row([varname, val_mb(valstr), UNITS_MB])","label":0}
{"text":"def read_long(self, signed=True):\n        \"\"\"\"\"\"\n        return int.from_bytes(self.read(8), byteorder='little', signed=signed)","label":0}
{"text":"public void apply(FaceletContext ctx, UIComponent parent) throws IOException, FacesException, FaceletException,\n            ELException\n    {\n        VariableMapper orig = ctx.getVariableMapper();\n        AbstractFaceletContext actx = (AbstractFaceletContext) ctx;\n        actx.pushClient(this);\n\n        if (_params != null)\n        {\n            VariableMapper vm = new VariableMapperWrapper(orig);\n            ctx.setVariableMapper(vm);\n            for (int i = 0; i < _params.length; i++)\n            {\n                _params[i].apply(ctx, parent);\n            }\n        }\n\n        FaceletCompositionContext fcc = FaceletCompositionContext.getCurrentInstance(ctx);\n        String path;\n        boolean markInitialState = false;\n        if (!_template.isLiteral())\n        {\n            String uniqueId = actx.generateUniqueFaceletTagId(fcc.startComponentUniqueIdSection(), tagId);\n            \/\/path = getTemplateValue(actx, fcc, parent, uniqueId);\n            String restoredPath = (String) ComponentSupport.restoreInitialTagState(ctx, fcc, parent, uniqueId);\n            if (restoredPath != null)\n            {\n                \/\/ If is not restore view phase, the path value should be\n                \/\/ evaluated and if is not equals, trigger markInitialState stuff.\n                if (!PhaseId.RESTORE_VIEW.equals(ctx.getFacesContext().getCurrentPhaseId()))\n                {\n                    path = this._template.getValue(ctx);\n                    if (path == null || path.length() == 0)\n                    {\n                        return;\n                    }\n                    if (!path.equals(restoredPath))\n                    {\n                        markInitialState = true;\n                    }\n                }\n                else\n                {\n                    path = restoredPath;\n                }\n            }\n            else\n            {\n                \/\/No state restored, calculate path\n                path = this._template.getValue(ctx);\n            }\n            ComponentSupport.saveInitialTagState(ctx, fcc, parent, uniqueId, path);\n        }\n        else\n        {\n            path = _template.getValue(ctx);\n        }\n        try\n        {\n            try\n            {\n                boolean oldMarkInitialState = false;\n                Boolean isBuildingInitialState = null;\n                if (markInitialState)\n                {\n                    \/\/set markInitialState flag\n                    oldMarkInitialState = fcc.isMarkInitialState();\n                    fcc.setMarkInitialState(true);\n                    isBuildingInitialState = (Boolean) ctx.getFacesContext().getAttributes().put(\n                            StateManager.IS_BUILDING_INITIAL_STATE, Boolean.TRUE);\n                }\n                try\n                {\n                    ctx.includeFacelet(parent, path);\n                }\n                finally\n                {\n                    if (markInitialState)\n                    {\n                        \/\/unset markInitialState flag\n                        if (isBuildingInitialState == null)\n                        {\n                            ctx.getFacesContext().getAttributes().remove(\n                                    StateManager.IS_BUILDING_INITIAL_STATE);\n                        }\n                        else\n                        {\n                            ctx.getFacesContext().getAttributes().put(\n                                    StateManager.IS_BUILDING_INITIAL_STATE, isBuildingInitialState);\n                        }\n                        fcc.setMarkInitialState(oldMarkInitialState);\n                    }\n                }\n            }\n            finally\n            {\n                ctx.setVariableMapper(orig);\n                actx.popClient(this);\n            }\n        }\n        finally\n        {\n            if (!_template.isLiteral())\n            {\n                fcc.endComponentUniqueIdSection();\n            }\n        }\n        if (!_template.isLiteral() && fcc.isUsingPSSOnThisView() && fcc.isRefreshTransientBuildOnPSS() &&\n            !fcc.isRefreshingTransientBuild())\n        {\n            \/\/Mark the parent component to be saved and restored fully.\n            ComponentSupport.markComponentToRestoreFully(ctx.getFacesContext(), parent);\n        }\n        if (!_template.isLiteral() && fcc.isDynamicComponentSection())\n        {\n            ComponentSupport.markComponentToRefreshDynamically(ctx.getFacesContext(), parent);\n        }\n    }","label":0}
{"text":"public function addSibling(EntityInterface $sibling, $position = null, $returnSibling = false)\n    {\n        if ($this->exists) {\n            if (is_null($position)) {\n                $position = $this->getNextAfterLastPosition();\n            }\n\n            $sibling->moveTo($position, $this->parent_id);\n        }\n\n        return ($returnSibling === true ? $sibling : $this);\n    }","label":0}
{"text":"void refresh(final DFSContent content) {\n    if (this.sviewer != null) {\n      Display.getDefault().asyncExec(new Runnable() {\n        public void run() {\n          DFSContentProvider.this.sviewer.refresh(content);\n        }\n      });\n\n    } else {\n      refresh();\n    }\n  }","label":0}
{"text":"def _dir_additions(self):\n        \n        additions = {c for c in self._info_axis.unique(level=0)[:100]\n                     if isinstance(c, str) and c.isidentifier()}\n        return super()._dir_additions().union(additions)","label":0}
{"text":"function convert() {\n\n\t\t\/\/ Set logfile\n\t\t$this->logfile = $this->createTmpFile();\n\n\t\t\/\/ Set filename\n\t\t$this->outputPath = $this->timestampedFileName( '.odt' );\n\n\t\t\/\/ Set temp folder\n\t\t$this->tmpDir = $this->createTmpDir();\n\n\t\t$source = $this->tmpDir . '\/source.xhtml';\n\t\tif ( defined( 'WP_TESTS_MULTISITE' ) ) {\n\t\t\t\\Pressbooks\\Utility\\put_contents( $source, \\Pressbooks\\Utility\\get_contents( $this->url ) );\n\t\t} else {\n\t\t\t\\Pressbooks\\Utility\\put_contents( $source, $this->queryXhtml() );\n\t\t}\n\n\t\t$xslt = PB_PLUGIN_DIR . 'inc\/modules\/export\/odt\/xhtml2odt.xsl';\n\t\t$content = $this->tmpDir . '\/content.xml';\n\t\t$mimetype = $this->tmpDir . '\/mimetype';\n\t\t$metafolder = $this->tmpDir . '\/META-INF';\n\t\t$meta = $this->tmpDir . '\/meta.xml';\n\t\t$settings = $this->tmpDir . '\/settings.xml';\n\t\t$styles = $this->tmpDir . '\/styles.xml';\n\t\t$mediafolder = $this->tmpDir . '\/media\/';\n\n\t\t$urlcontent = \\Pressbooks\\Utility\\get_contents( $source );\n\t\t$urlcontent = preg_replace( '\/xmlns\\=\"http\\:\\\/\\\/www\\.w3\\.org\\\/1999\\\/xhtml\"\/i', '', $urlcontent );\n\n\t\tif ( empty( $urlcontent ) ) {\n\t\t\t$this->logError( 'source.xhtml is empty' );\n\t\t\treturn false;\n\t\t}\n\n\t\tlibxml_use_internal_errors( true );\n\t\t$old_value = libxml_disable_entity_loader( true );\n\t\t$doc = new \\DOMDocument();\n\t\t$doc->recover = true; \/\/ Try to parse non-well formed documents\n\t\t$doc->loadXML( $urlcontent, LIBXML_NOBLANKS | LIBXML_NOENT | LIBXML_NONET | LIBXML_XINCLUDE | LIBXML_NOERROR | LIBXML_NOWARNING );\n\t\tlibxml_disable_entity_loader( $old_value );\n\t\t$xpath = new \\DOMXPath( $doc );\n\n\t\t$tables = $xpath->query( '\/\/table' );\n\n\t\tforeach ( $tables as $table ) {\n\t\t\t\/** @var \\DOMElement $table *\/\n\t\t\t$columncount = 0;\n\t\t\t$columns = $xpath->query( '\/\/tr[1]\/*', $table );\n\t\t\tforeach ( $columns as $column ) {\n\t\t\t\t\/** @var \\DOMElement $column *\/\n\t\t\t\tif ( $column->hasAttribute( 'colspan' ) ) {\n\t\t\t\t\t$columncount = $columncount + (int) $column->getAttribute( 'colspan' );\n\t\t\t\t} else {\n\t\t\t\t\t$columncount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\t$table->setAttribute( 'colcount', $columncount );\n\t\t}\n\n\t\tif ( ! file_exists( $metafolder ) ) {\n\t\t\tmkdir( $metafolder );\n\t\t}\n\n\t\t$images = $xpath->query( '\/\/img' );\n\t\t$coverimages = $xpath->query( '\/\/meta[@name=\"pb-cover-image\"]' );\n\t\tif ( ( $images->length > 0 ) || ( $coverimages->length > 0 ) ) {\n\t\t\tif ( ! file_exists( $mediafolder ) ) {\n\t\t\t\tmkdir( $mediafolder );\n\t\t\t}\n\t\t}\n\t\tforeach ( $images as $image ) {\n\t\t\t\/** @var \\DOMElement $image *\/\n\t\t\t$src = $image->getAttribute( 'src' );\n\t\t\t$image_filename = $this->fetchAndSaveUniqueImage( $src, $mediafolder );\n\t\t\tif ( $image_filename ) {\n\t\t\t\t\/\/ Replace with new image\n\t\t\t\t$image->setAttribute( 'src', $image_filename );\n\t\t\t}\n\t\t}\n\n\t\tforeach ( $coverimages as $coverimage ) {\n\t\t\t\/** @var \\DOMElement $coverimage *\/\n\t\t\t$src = $coverimage->getAttribute( 'content' );\n\t\t\t$cover_filename = $this->fetchAndSaveUniqueImage( $src, $mediafolder );\n\t\t\tif ( $cover_filename ) {\n\t\t\t\t\/\/ Replace with new image\n\t\t\t\t$coverimage->setAttribute( 'src', $cover_filename );\n\t\t\t}\n\t\t}\n\n\t\t\\Pressbooks\\Utility\\put_contents( $source, $doc->saveXML() );\n\n\t\t$errors = libxml_get_errors(); \/\/ TODO: Handle errors gracefully\n\t\tlibxml_clear_errors();\n\n\t\t$output = [];\n\t\t$command = PB_SAXON_COMMAND . ' -xsl:' . escapeshellcmd( $xslt ) . ' -s:' . escapeshellcmd( $source ) . ' -o:' . escapeshellcmd( $content ) . ' 2>&1';\n\t\texec( $command, $output );\n\n\t\t$files = [\n\t\t\t'content' => $content,\n\t\t\t'mimetype' => $mimetype,\n\t\t\t'meta' => $meta,\n\t\t\t'settings' => $settings,\n\t\t\t'styles' => $styles,\n\t\t\t'metafolder' => $metafolder,\n\t\t];\n\t\t$msg = '';\n\t\tforeach ( $files as $key => $file ) {\n\t\t\tif ( ! file_exists( $file ) ) {\n\t\t\t\t$msg .= ' [ ' . $key . ' ]';\n\t\t\t}\n\t\t}\n\n\t\tif ( ! empty( $msg ) ) {\n\t\t\t$this->logError( \"Transformation failed, encountered a problem with $msg \\n\\n\" . implode( \"\\n\", $output ) );\n\t\t\treturn false;\n\t\t}\n\n\t\t$zip = new \\PclZip( $this->outputPath );\n\n\t\tif ( $images->length > 0 ) {\n\t\t\t$list = $zip->add( $mimetype . ',' . $content . ',' . $meta . ',' . $settings . ',' . $styles . ',' . $mediafolder . ',' . $metafolder, PCLZIP_OPT_NO_COMPRESSION, PCLZIP_OPT_REMOVE_PATH, $this->tmpDir . '\/' );\n\t\t} else {\n\t\t\t$list = $zip->add( $mimetype . ',' . $content . ',' . $meta . ',' . $settings . ',' . $styles . ',' . $metafolder, PCLZIP_OPT_NO_COMPRESSION, PCLZIP_OPT_REMOVE_PATH, $this->tmpDir . '\/' );\n\t\t}\n\n\t\tif ( 0 === absint( $list ) ) {\n\t\t\t$this->logError( $zip->errorInfo( true ) );\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}","label":0}
{"text":"function(touch0, touch1) {\n\t\treturn Math.abs(touch0.x - touch1.x) < DOUBLE_TAP_RADIUS && Math.abs(touch0.y - touch1.y) < DOUBLE_TAP_RADIUS;\n\t}","label":0}
{"text":"def get_bounding_box(self):\n        \n        if len(self.elements) == 0:\n            return None\n        if not (self._bb_valid and\n                all(ref._bb_valid for ref in self.get_dependencies(True))):\n            bb = numpy.array(((1e300, 1e300), (-1e300, -1e300)))\n            all_polygons = []\n            for element in self.elements:\n                if isinstance(element, PolygonSet):\n                    all_polygons.extend(element.polygons)\n                elif isinstance(element, CellReference) or isinstance(\n                        element, CellArray):\n                    element_bb = element.get_bounding_box()\n                    if element_bb is not None:\n                        bb[0, 0] = min(bb[0, 0], element_bb[0, 0])\n                        bb[0, 1] = min(bb[0, 1], element_bb[0, 1])\n                        bb[1, 0] = max(bb[1, 0], element_bb[1, 0])\n                        bb[1, 1] = max(bb[1, 1], element_bb[1, 1])\n            if len(all_polygons) > 0:\n                all_points = numpy.concatenate(all_polygons).transpose()\n                bb[0, 0] = min(bb[0, 0], all_points[0].min())\n                bb[0, 1] = min(bb[0, 1], all_points[1].min())\n                bb[1, 0] = max(bb[1, 0], all_points[0].max())\n                bb[1, 1] = max(bb[1, 1], all_points[1].max())\n            self._bb_valid = True\n            _bounding_boxes[self] = bb\n        return _bounding_boxes[self]","label":0}
{"text":"public function recordPayment(string $id, array $data, array $headers = [])\n    {\n        $url = $this->url('invoices\/%s\/record_payment', $id);\n\n        return $this->post($url, $data, $headers);\n    }","label":0}
{"text":"func WithOrg(org string) func(ID, DocumentIndex) error {\n\treturn func(id ID, idx DocumentIndex) error {\n\t\toid, err := idx.FindOrganizationByName(org)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\treturn idx.AddDocumentOwner(id, \"org\", oid)\n\t}\n}","label":0}
{"text":"public function add($type, $data = [])\n    {\n        if ($this->type() === 'passed' && $type === 'failed') {\n            $this->type('failed');\n        }\n        $data['type'] = $type;\n        if (!isset($data['backtrace'])) {\n            $data['backtrace'] = [];\n        } else {\n            $data['backtrace'] = Debugger::focus($this->block()->suite()->backtraceFocus(), $data['backtrace'], 1);\n        }\n        $child = new static($data + ['block' => $this->_block]);\n        $this->_children[] = $child;\n        return $child;\n    }","label":0}
{"text":"public function iRunBehatInteractively($answerString, $argumentsString)\n    {\n        $env = $this->process->getEnv();\n        $env['SHELL_INTERACTIVE'] = true;\n\n        $this->process->setEnv($env);\n        $this->process->setInput($answerString);\n\n        $this->options = '--format-settings=\\'{\"timer\": false}\\'';\n        $this->iRunBehat($argumentsString);\n    }","label":0}
{"text":"public static function unregisterHelper($name)\n    {\n        \/\/Argument 1 must be a string\n        Argument::i()->test(1, 'string');\n\n        if (isset(self::$helpers[$name])) {\n            unset(self::$helpers[$name]);\n        }\n    }","label":0}
{"text":"func (rc *ReadinessCheck) SetProtocol(proto string) *ReadinessCheck {\n\trc.Protocol = proto\n\treturn rc\n}","label":0}
{"text":"protected function visitSirelNodeSelectStatement(Node\\SelectStatement $select)\n    {\n        return join(\" \", array_filter(array(\n            \"SELECT\",\n\n            ($select->distinct ? \"DISTINCT\" : null),\n\n            ($select->projections\n                ? join(\", \", $this->visitEach($select->projections))\n                : '*'),\n\n            \/\/ FROM\n            $this->visit($select->source),\n\n            \/\/ WHERE\n            ($select->restrictions \n                ? \"WHERE \" . join(\" AND \", $this->visitEach($select->restrictions))\n                : null\n            ),\n\n            \/\/ ORDER BY\n            ($select->orders\n                ? \"ORDER BY \" . join(\", \", $this->visitEach($select->orders))\n                : null),\n\n            \/\/ GROUP BY\n            ($select->groups\n                ? \"GROUP BY \" . join(', ', $this->visitEach($select->groups))\n                : null),\n\n            \/\/ LIMIT\n            ($select->limit ? $this->visit($select->limit) : null),\n\n            \/\/ OFFSET \n            ($select->offset ? $this->visit($select->offset) : null)\n        ))) . ';';\n    }","label":0}
{"text":"private List<ObjectName> registerMBeans(MBeanServer pServer, String pDomain) {\n        List<ObjectName> ret = new ArrayList<ObjectName>();\n        try {\n            \/\/ Register my test mbeans\n            for (String name : strangeNamesShort) {\n                String strangeName = pDomain + \":type=naming\/,name=\" + name;\n                strangeNames.add(strangeName);\n                ret.add(registerMBean(pServer, new ObjectNameChecking(strangeName), strangeName));\n            }\n            for (String name : escapedNamesShort) {\n                String escapedName = pDomain + \":type=escape,name=\" + ObjectName.quote(name);\n                escapedNames.add(escapedName);\n                ret.add(registerMBean(pServer, new ObjectNameChecking(escapedName), escapedName));\n            }\n\n            \/\/ Other MBeans with different names\n            for (String name : fullNames) {\n                ret.add(registerMBean(pServer, new ObjectNameChecking(name), name));\n            }\n\n            \/\/ Other MBeans\n            boolean isWebsphere = checkForClass(\"com.ibm.websphere.management.AdminServiceFactory\");\n            ret.add(registerMBean(pServer,new OperationChecking(JOLOKIA_IT_DOMAIN),isWebsphere ? null : pDomain + \":type=operation\"));\n            ret.add(registerMBean(pServer, new AttributeChecking(JOLOKIA_IT_DOMAIN), isWebsphere ? null : pDomain + \":type=attribute\"));\n            \/\/ MXBean\n            if (hasMxBeanSupport()) {\n                ret.add(registerMBean(pServer, new MxBeanSample(), isWebsphere ? null : pDomain + \":type=mxbean\"));\n            }\n            \/\/ Tabular Data MBean\n            ret.add(registerMBean(pServer, new TabularMBean(), pDomain + \":type=tabularData\"));\n        } catch (RuntimeException e) {\n            throw new RuntimeException(\"Error\",e);\n        } catch (Exception exp) {\n            throw new RuntimeException(\"Error\",exp);\n        }\n        return ret;\n    }","label":0}
{"text":"def sync_mounts(self, active_mounts, resources, vault_client):\n        \"\"\"\"\"\"\n        # Create a resource set that is only explicit mounts\n        # and sort so removals are first\n        mounts = [x for x in resources\n                  if isinstance(x, (Mount, AWS))]\n\n        s_resources = sorted(mounts, key=absent_sort)\n        # Iterate over explicit mounts only\n        for resource in s_resources:\n            active_mounts = self.actually_mount(vault_client,\n                                                resource,\n                                                active_mounts)\n\n        # OK Now iterate over everything but make sure it is clear\n        # that ad-hoc mountpoints are deprecated as per\n        # https:\/\/github.com\/Autodesk\/aomi\/issues\/110\n        for resource in [x for x in resources\n                         if isinstance(x, Secret)]:\n            n_mounts = self.actually_mount(vault_client,\n                                           resource,\n                                           active_mounts)\n            if len(n_mounts) != len(active_mounts):\n                LOG.warning(\"Ad-Hoc mount with %s. Please specify\"\n                            \" explicit mountpoints.\", resource)\n\n            active_mounts = n_mounts\n\n        return active_mounts, [x for x in resources\n                               if not isinstance(x, (Mount))]","label":0}
{"text":"def channel(self, name):\n        \n        enc_name = _converters[type(name)](name)\n        if (enc_name, False) not in self._refs:\n            ch = _Sender(self, enc_name,\n                         is_pattern=False)\n            self._refs[(enc_name, False)] = ch\n            return ch\n        return self._refs[(enc_name, False)]","label":0}
{"text":"func NewConnection(c net.Conn, p *ConnectionPool) *Connection {\n\treturn &Connection{\n\t\tConn:          c,\n\t\towner:         p,\n\t\treturnOnClose: true,\n\t}\n}","label":0}
{"text":"public Long getNextStreamPosition() {\r\n        String longValue = getPropertyAsString(FIELD_NEXT_STREAM_POSITION);\r\n        return Long.parseLong(longValue.replace(\"\\\"\", \"\"));\r\n    }","label":0}
{"text":"public function indexOf($searchElement, $fromIndex = 0)\n    {\n        $result = array_search($searchElement, $this->getArrayCopy(), true);\n\n        return $result === false ? -1 : $result + $fromIndex;\n\n        \/\/ if ($fromIndex < 0) {\n        \/\/     $fromIndex = $this->length() + $fromIndex;\n        \/\/ }\n        \/\/ $result = array_search($searchElement, $this->slice($fromIndex)->getArrayCopy(), true);\n\n        \/\/ return $result === false ? -1 : $result + $fromIndex;\n    }","label":0}
{"text":"func (c *CreateEvent) GetRef() string {\n\tif c == nil || c.Ref == nil {\n\t\treturn \"\"\n\t}\n\treturn *c.Ref\n}","label":0}
{"text":"public function _validation_max_length($val, $length)\n\t{\n\t\treturn $this->_empty($val) || \\Str::length($val) <= $length;\n\t}","label":0}
{"text":"@SuppressWarnings(\"fallthrough\")\n    protected void quotedString() {\n        int pos = bp;\n        nextChar();\n\n        loop:\n        while (bp < buflen) {\n            switch (ch) {\n                case '\\n': case '\\r': case '\\f':\n                    newline = true;\n                    break;\n\n                case ' ': case '\\t':\n                    break;\n\n                case '\"':\n                    nextChar();\n                    \/\/ trim trailing white-space?\n                    return;\n\n                case '@':\n                    if (newline)\n                        break loop;\n\n            }\n            nextChar();\n        }\n    }","label":0}
{"text":"function f_temp_sil_urun(_tahta_id) {\r\n    if (_tahta_id) {\r\n        return db.redis.dbQ.del(db.redis.kp.temp.ssetTahtaUrun(_tahta_id));\r\n    } else {\r\n        return null;\r\n    }\r\n}","label":0}
{"text":"async def get_version(self, tp, params):\n        \n        tw = TypeWrapper(tp, params)\n        if not tw.is_versioned():\n            # self.registry.set_tr()\n            return TypeWrapper.ELEMENTARY_RES\n\n        # If not in the DB, load from archive at current position\n        if not self.version_db.is_versioned(tw):\n            tr = await load_uvarint(self.iobj)\n            ver = await load_uvarint(self.iobj)\n            self.version_db.set_version(tw, tr, ver)\n\n        else:\n            tr, ver = self.version_db.get_version(tw)\n\n        obj_id = None if tr == 0 else await load_uvarint(self.iobj)\n        self.registry.set_tr(obj_id)\n        return ver","label":0}
{"text":"function isDflowFun (f) {\n  var isFunction = typeof f === 'function'\n  var hasFuncsObject = typeof f.funcs === 'object'\n  var hasGraphObject = typeof f.graph === 'object'\n  var hasValidGraph = true\n\n  if (!isFunction || !hasFuncsObject || !hasGraphObject) return false\n\n  if (isFunction && hasGraphObject && hasFuncsObject) {\n    try {\n      validate(f.graph, f.funcs)\n    } catch (ignore) {\n      hasValidGraph = false\n    }\n  }\n\n  return hasValidGraph\n}","label":0}
{"text":"private void releaseEglResources() {\n        mReadyForFrames = false;\n        if (mInputWindowSurface != null) {\n            mInputWindowSurface.release();\n            mInputWindowSurface = null;\n        }\n        if (mFullScreen != null) {\n            mFullScreen.release();\n            mFullScreen = null;\n        }\n        if (mEglCore != null) {\n            mEglCore.release();\n            mEglCore = null;\n        }\n\n        mSurfaceTexture = null;\n    }","label":0}
{"text":"public AssistantLocal backupAssistantLocal() {\n        AssistantLocal oldAssistantLocal = assistantLocal;\n        AssistantLocal newAssistantLocal = assistantLocal.replicate();\n        setAssistantLocal(newAssistantLocal);\n        return oldAssistantLocal;\n    }","label":0}
{"text":"func PortPart(s string) (int, error) {\n\t\/\/ Must be IP:port\n\t_, port, err := net.SplitHostPort(s)\n\tif err != nil {\n\t\tklog.Errorf(\"Error parsing '%s': %v\", s, err)\n\t\treturn -1, err\n\t}\n\tportNumber, err := strconv.Atoi(port)\n\tif err != nil {\n\t\tklog.Errorf(\"Error parsing '%s': %v\", port, err)\n\t\treturn -1, err\n\t}\n\treturn portNumber, nil\n}","label":0}
{"text":"func (l *Logger) SetOutput(w io.Writer) *Logger {\n\tl.Printer.SetOutput(w)\n\treturn l\n}","label":0}
{"text":"def vel_term_floc(ConcAl, ConcClay, coag, material, DIM_FRACTAL,\n                  DiamTarget, Temp):\n    \"\"\"\"\"\"\n    WaterDensity = pc.density_water(Temp).magnitude\n    return (((pc.gravity.magnitude * material.Diameter**2)\n             \/ (18 * PHI_FLOC * pc.viscosity_kinematic(Temp).magnitude)\n             )\n            * ((dens_floc_init(ConcAl, ConcClay, coag, material).magnitude\n                - WaterDensity\n                )\n               \/ WaterDensity\n               )\n            * (DiamTarget \/ material.Diameter) ** (DIM_FRACTAL - 1)\n            )","label":0}
{"text":"public function getIpInfo($ip)\n    {\n        $response = $this->http([\n            'url' => 'http:\/\/api.map.baidu.com\/location\/ip',\n            'referer' => true,\n            'dataType' => 'json',\n            'timeout' => 30000,\n            'throwException' => false,\n            'data' => [\n                'ak' => $this->accessKey,\n                'ip' => $ip,\n            ],\n        ]);\n\n        if ($response['status'] !== 0) {\n            $this->logger->warning('\u83b7\u53d6IP\u4fe1\u606f\u5931\u8d25', [\n                'ip' => $ip,\n                'res' => $response->getResponse(),\n            ]);\n        }\n\n        \/\/ \u91cd\u65b0\u6784\u9020\u6570\u636e\u7ed3\u6784,\u548c\u5176\u4ed6\u63a5\u53e3\u4fdd\u6301\u4e00\u81f4\n        $detail = $response['content']['address_detail'];\n        $parts = explode('|', $response['address']);\n\n        return [\n            'code' => $response['status'] === 0 ? 1 : -$response['status'],\n            'province' => $detail['province'],\n            'city' => $detail['city'],\n            'district' => $detail['district'],\n            'street' => $detail['street'],\n            'address' => $detail['street'] . $detail['street_number'],\n            'point' => $response['content']['point'],\n            'isp' => $parts[4],\n        ];\n    }","label":0}
{"text":"def normpath(path):\n    \n    return os.path.abspath(os.path.normpath(os.path.expanduser(path)))","label":0}
{"text":"public boolean waitForActivity(ComponentName name, int retryTime) {\n        final int retryPeriod = 250;\n        int retryNum = retryTime \/ retryPeriod;\n        for (int i = 0; i < retryNum; i++) {\n            if (this.getCurrentActivity().getComponentName().equals(name)) {\n                break;\n            }\n            if (i == retryNum - 1) {\n                return false;\n            }\n            this.sleep(retryPeriod);\n        }\n        return true;\n    }","label":0}
{"text":"public void parseScope(Element scopeElement, ScopeImpl parentScope) {\n\n    \/\/ Not yet supported on process level (PVM additions needed):\n    \/\/ parseProperties(processElement);\n\n    \/\/ filter activities that must be parsed separately\n    List<Element> activityElements = new ArrayList<Element>(scopeElement.elements());\n    Map<String, Element> intermediateCatchEvents = filterIntermediateCatchEvents(activityElements);\n    activityElements.removeAll(intermediateCatchEvents.values());\n    Map<String, Element> compensationHandlers = filterCompensationHandlers(activityElements);\n    activityElements.removeAll(compensationHandlers.values());\n\n    parseStartEvents(scopeElement, parentScope);\n    parseActivities(activityElements, scopeElement, parentScope);\n    parseIntermediateCatchEvents(scopeElement, parentScope, intermediateCatchEvents);\n    parseEndEvents(scopeElement, parentScope);\n    parseBoundaryEvents(scopeElement, parentScope);\n    parseSequenceFlow(scopeElement, parentScope, compensationHandlers);\n    parseExecutionListenersOnScope(scopeElement, parentScope);\n    parseAssociations(scopeElement, parentScope, compensationHandlers);\n    parseCompensationHandlers(parentScope, compensationHandlers);\n\n    for (ScopeImpl.BacklogErrorCallback callback : parentScope.getBacklogErrorCallbacks()) {\n      callback.callback();\n    }\n\n    if (parentScope instanceof ProcessDefinition) {\n      parseProcessDefinitionCustomExtensions(scopeElement, (ProcessDefinition) parentScope);\n    }\n  }","label":0}
{"text":"function isRelayEnvironment(environment: mixed): boolean {\n  return (\n    typeof environment === 'object' &&\n    environment !== null &&\n    \/\/ TODO: add applyMutation\/sendMutation once ready in both cores\n    typeof environment.check === 'function' &&\n    typeof environment.lookup === 'function' &&\n    typeof environment.retain === 'function' &&\n    typeof environment.sendQuery === 'function' &&\n    typeof environment.execute === 'function' &&\n    typeof environment.subscribe === 'function'\n  );\n}","label":0}
{"text":"public void sync() {\n\n        if (isClosed) {\n            return;\n        }\n\n        synchronized (fileStreamOut) {\n            if (needsSync) {\n                if (busyWriting) {\n                    forceSync = true;\n\n                    return;\n                }\n\n                try {\n                    fileStreamOut.flush();\n                    outDescriptor.sync();\n\n                    syncCount++;\n                } catch (IOException e) {\n                    Error.printSystemOut(\"flush() or sync() error: \"\n                                         + e.toString());\n                }\n\n                needsSync = false;\n                forceSync = false;\n            }\n        }\n    }","label":0}
{"text":"public FieldList makeRecord()\n    {\n        \/\/ Make record from desc name\n\/\/x     FieldList fieldList = new org.jbundle.thin.tour.product.Continent(null);\n\/\/x     m_baseApplet.linkNewRemoteTable(null, fieldList);\n\/\/x     return fieldList;\n        FieldList record = null;\n        try   {\n            Map<String,Object> properties = new Hashtable<String,Object>();\n            properties.put(\"description\", m_strDescription);\n            if (m_objID != null)\n                properties.put(\"id\", m_objID);\n            String strSubRecordName = this.getSubRecordClassName();\n            if (strSubRecordName != null)\n                properties.put(\"record\", strSubRecordName);\n            m_remoteSession.doRemoteAction(\"requery\", properties);\n            RemoteTable remoteTable = m_remoteSession.getRemoteTable(strSubRecordName);\n            record = remoteTable.makeFieldList(null); \/\/ NO!\n            new org.jbundle.thin.base.db.client.RemoteFieldTable(record, remoteTable, m_baseApplet);\n        } catch (Exception ex)  {\n            ex.printStackTrace();\n        }\n        return record;\n    }","label":0}
{"text":"public static Object get(PageContext pc, Object coll, int[] types, Key[] keys, Object[][] args, Object defaultValue) throws PageException {\n\tif (coll == null) return defaultValue;\n\tint to = keys.length - 1;\n\tVariableUtilImpl vu = (VariableUtilImpl) pc.getVariableUtil();\n\tfor (int i = 0; i <= to; i++) {\n\t    switch (types[i]) {\n\t    case TYPE_DATA:\n\t\tcoll = vu.getCollection(pc, coll, keys[i], Null.NULL);\n\t\tbreak;\n\t    case TYPE_UDF_ARGS:\n\t\tcoll = vu.callFunctionWithoutNamedValues(pc, coll, keys[i], args[i], false, Null.NULL);\n\t\tbreak;\n\t    case TYPE_UDF_NAMED_ARGS:\n\t\tcoll = vu.callFunctionWithNamedValues(pc, coll, keys[i], args[i], false, Null.NULL);\n\t\tbreak;\n\t    case TYPE_BIF:\n\t\tcoll = null;\/\/ TODO\n\t\tbreak;\n\t    }\n\n\t    if (coll == Null.NULL || (coll == null && i < to)) return defaultValue;\n\t}\n\treturn coll;\n    }","label":0}
{"text":"private function getOperator($operator)\n    {\n        $operators = $this->getOperators();\n\n        $key = array_search(strtolower($operator), $operators);\n\n        if ($key !== false && array_key_exists($key, $operators)) {\n            return $operators[$key];\n        }\n\n        $operators = implode(', ', $operators);\n\n        $message = \"Operator: $operator cannot be used in an LDAP query. Available operators are $operators\";\n\n        throw new InvalidQueryOperator($message);\n    }","label":0}
{"text":"protected function execute(InputInterface $input, OutputInterface $output)\n  {\n    $searchDir = ModulusCLI::$appdir . 'storage' . DIRECTORY_SEPARATOR . 'logs' . DIRECTORY_SEPARATOR;\n\n    $logs = glob($searchDir . '*.log');\n\n    if (count($logs) < 1) {\n      return $output->writeln('Nothing to remove');\n    }\n\n    foreach($logs as $log) {\n      try {\n        Filesystem::delete($log);\n      } catch (\\Exception $e) {\n        return $output->writeln($e->getMessage());\n      }\n    }\n\n    return $output->writeln('<info>Cleared logs<\/info>');\n  }","label":0}
{"text":"public function delete_bucket($bucket, $opt = array()) {\n\t\t$this->assertParameterArray ( $opt );\n\t\t$opt [self::BUCKET] = $bucket;\n\t\t$opt [self::METHOD] = 'DELETE';\n\t\t$opt [self::OBJECT] = '\/';\n\t\t$response = $this->authenticate ( $opt );\n\t\t$this->log ( $response->isOK () ? \"Delete bucket success!\" : \"Delete bucket failed! Response: [\" . $response->body . \"]\", $opt );\n\t\treturn $response;\n\t}","label":0}
{"text":"public function quoteName(string $identifier): string\n    {\n        $identifier = trim($identifier);\n        $separators = [' AS ', ' ', '.'];\n        foreach ($separators as $sep) {\n            $pos = strripos($identifier, $sep);\n            if ($pos) {\n                return $this->quoteNameWithSeparator($identifier, $sep, $pos);\n            }\n        }\n\n        return $this->quoteIdentifier($identifier);\n    }","label":0}
{"text":"public function serialize(Contribution $contribution)\n    {\n        $contributor = $contribution->getContributor();\n\n        return [\n            'id' => $contribution->getUuid(),\n            'title' => $contribution->getTitle(),\n            'text' => $contribution->getText(),\n            'meta' => [\n                'createdAt' => $contribution->getCreationDate()->format('Y-m-d H:i'),\n                'creator' => null === $contributor ?\n                    null :\n                    $this->userSerializer->serialize($contributor, [Options::SERIALIZE_MINIMAL]),\n            ],\n        ];\n    }","label":0}
{"text":"protected function getETag(CacheItemInterface $cacheItem)\n    {\n        $data = $cacheItem->get();\n\n        foreach ($data['etag'] as $etag) {\n            if (!empty($etag)) {\n                return $etag;\n            }\n        }\n    }","label":0}
{"text":"def main():\n    \n\n    if len(sys.argv) < 6:\n        print(\"Usage: %s server_url username password namespace' \\\n              ' classname\" %  sys.argv[0])\n        print('Using internal defaults')\n        server_url = SERVER_URL\n        namespace = TEST_NAMESPACE\n        username = USERNAME\n        password = PASSWORD\n        classname = TEST_CLASS\n    else:\n        print('Get from input')\n        server_url = sys.argv[1]\n        namespace = sys.argv[2]\n        username = sys.argv[3]\n        password = sys.argv[4]\n        classname = sys.argv[5]\n\n    # create the credentials tuple for WBEMConnection\n    creds = (username, password)\n\n    # call the method to execute the request and display results\n    execute_request(server_url, creds, namespace, classname)\n\n    return 0","label":0}
{"text":"func NewDefault(prof *profile.Profile, options Options) *Report {\n\tindex := len(prof.SampleType) - 1\n\to := &options\n\tif o.SampleUnit == \"\" {\n\t\to.SampleUnit = strings.ToLower(prof.SampleType[index].Unit)\n\t}\n\tvalue := func(s *profile.Sample) int64 {\n\t\treturn s.Value[index]\n\t}\n\tformat := func(v int64) string {\n\t\tif r := o.Ratio; r > 0 && r != 1 {\n\t\t\tfv := float64(v) * r\n\t\t\tv = int64(fv)\n\t\t}\n\t\treturn scaledValueLabel(v, o.SampleUnit, o.OutputUnit)\n\t}\n\treturn &Report{prof, computeTotal(prof, value), o, value, format}\n}","label":0}
{"text":"public static function IriToUri( $item )\r\n\t{\r\n\t\tif ( $item instanceof Undefined )\r\n\t\t    return \"\";\r\n\r\n\t\t$string = $item . \"\";\r\n\r\n\t\t\/\/ This code is taken from https:\/\/github.com\/rmccue\/Requests\/blob\/master\/library\/Requests\/IRI.php\r\n\t\tif ( ! is_string( $string ) ) {\r\n\t\t\treturn \"\";\r\n\t\t}\r\n\t\tstatic $non_ascii;\r\n\t\tif ( ! $non_ascii )\r\n\t\t{\r\n\t\t\t$non_ascii = implode( '', range( \"\\x80\", \"\\xFF\" ) );\r\n\t\t\t$non_ascii .= \"<> \\\"{}|\\^`\\n\";\r\n\t\t}\r\n\t\t$position = 0;\r\n\t\t$strlen = strlen( $string );\r\n\t\twhile ( ( $position += strcspn( $string, $non_ascii, $position ) ) < $strlen )\r\n\t\t{\r\n\t\t\t$string = substr_replace( $string, sprintf( '%%%02X', ord( $string[ $position ] ) ), $position, 1 );\r\n\t\t\t$position += 3;\r\n\t\t\t$strlen += 2;\r\n\t\t}\r\n\r\n\t\treturn $string;\r\n\t}","label":0}
{"text":"public function processEscaped($value, $type = CorePDO::PARAM_STR)\n    {\n        if (!in_array($type, [CorePDO::PARAM_STR, CorePDO::PARAM_LOB])) {\n            return $this->process($value, $type);\n        }\n\n        return $this->stringEscaped($value);\n    }","label":0}
{"text":"protected function getAdminHook( $page_hook ) {\n\t\tglobal $pagenow, $plugin_page;\n\n\t\t$hook_suffix = '';\n\t\tif ( ! empty( $page_hook ) ) {\n\t\t\t$hook_suffix = $page_hook;\n\t\t} else if ( isset( $plugin_page ) ) {\n\t\t\t$hook_suffix = $plugin_page;\n\t\t} else if ( isset( $pagenow ) ) {\n\t\t\t$hook_suffix = $pagenow;\n\t\t}\n\n\t\treturn $hook_suffix;\n\t}","label":0}
{"text":"def _pollMouse(self):\n        \n        if self._mouseJustPressed:\n            delay = 300\n            self._mouseJustPressed = False\n        else:\n            delay = 100\n\n        if self._leftMousePressed:\n            self.add(1)\n            self.after_id = self.after(delay, self._pollMouse)\n\n        if self._shiftLeftMousePressed:\n            self.add(10)\n            self.after_id = self.after(delay, self._pollMouse)\n\n        if self._rightMousePressed:\n            self.sub(1)\n            self.after_id = self.after(delay, self._pollMouse)\n\n        if self._shiftRightMousePressed:\n            self.sub(10)\n            self.after_id = self.after(delay, self._pollMouse)","label":0}
{"text":"function () {\n            var self = this, c = self.io.config, uri = c.uri, hostname = uri.hostname, iframe, iframeUri, iframeDesc = iframeMap[hostname];\n            var proxy = PROXY_PAGE;\n            if (c.xdr && c.xdr.subDomain && c.xdr.subDomain.proxy) {\n                proxy = c.xdr.subDomain.proxy;\n            }\n            if (iframeDesc && iframeDesc.ready) {\n                self.nativeXhr = XhrTransportBase.nativeXhr(0, iframeDesc.iframe.contentWindow);\n                if (self.nativeXhr) {\n                    self.sendInternal();\n                } else {\n                    LoggerManager.error('document.domain not set correctly!');\n                }\n                return;\n            }\n            if (!iframeDesc) {\n                iframeDesc = iframeMap[hostname] = {};\n                iframe = iframeDesc.iframe = doc.createElement('iframe');\n                Dom.css(iframe, {\n                    position: 'absolute',\n                    left: '-9999px',\n                    top: '-9999px'\n                });\n                Dom.prepend(iframe, doc.body || doc.documentElement);\n                iframeUri = {};\n                iframeUri.protocol = uri.protocol;\n                iframeUri.host = uri.host;\n                iframeUri.pathname = proxy;\n                iframe.src = url.stringify(iframeUri);\n            } else {\n                iframe = iframeDesc.iframe;\n            }\n            Event.on(iframe, 'load', _onLoad, self);\n        }","label":0}
{"text":"def key_event(self, key, action):\n        \n        if action == self.wnd.keys.ACTION_PRESS:\n            if key == self.wnd.keys.SPACE:\n                print(\"Space was pressed\")\n\n        if action == self.wnd.keys.ACTION_RELEASE:\n            if key == self.wnd.keys.SPACE:\n                print(\"Space was released\")","label":0}
{"text":"public static int toInteger(Object value, int defaultValue) {\r\n\t\tif (value == null || value.toString().trim().equals(\"\")) {\r\n\t\t\treturn defaultValue;\r\n\t\t}\r\n\t\tif (value instanceof Integer) {\r\n\t\t\treturn (Integer) value;\r\n\t\t}\r\n\t\treturn (int) JKConversionUtil.toDouble(value);\r\n\t}","label":0}
{"text":"public static function prices()\n    {\n        \/\/ Helper Class Exists\n        if (isset(self::$PricesHelper)) {\n            return self::$PricesHelper;\n        }\n        \/\/ Initialize Class\n        self::$PricesHelper = new PricesHelper();\n        \/\/ Return Helper Class\n        return self::$PricesHelper;\n    }","label":0}
{"text":"func checkAdminConfigSetSyntax(ctx *cli.Context) {\n\tif len(ctx.Args()) == 0 || len(ctx.Args()) > 2 {\n\t\tcli.ShowCommandHelpAndExit(ctx, \"set\", 1) \/\/ last argument is exit code\n\t}\n}","label":0}
{"text":"public static void displayChains(TraceComponent logger, ChannelFramework cfw,\n                                     String groupName, String message,\n                                     String prefix) {\n        if (logger.isDebugEnabled()) {\n            chTrace.traceChains(logger, cfw, groupName, message, prefix);\n        }\n    }","label":0}
{"text":"public function getLinks()\n    {\n        $links = '';\n        foreach ($this->links as $link) {\n            $links .= $link . \"\\n\";\n        }\n        $links = rtrim($links, \"\\n\");\n        return $links;\n    }","label":0}
{"text":"@SuppressWarnings(\"WeakerAccess\")\n  public String getInstanceId() {\n    AppProfileName fullName =\n        Verify.verifyNotNull(AppProfileName.parse(proto.getName()), \"Name can never be null\");\n\n    \/\/noinspection ConstantConditions\n    return fullName.getInstance();\n  }","label":0}
{"text":"func (s *VisvalingamSimplifier) MultiLineString(mls orb.MultiLineString) orb.MultiLineString {\n\treturn multiLineString(s, mls)\n}","label":0}
{"text":"public void setMapLanguage(@NonNull MapLocale mapLocale) {\n    this.mapLocale = mapLocale;\n    if (!style.isFullyLoaded()) {\n      \/\/ We are in progress of loading a new style\n      return;\n    }\n\n    List<Layer> layers = style.getLayers();\n    for (Source source : style.getSources()) {\n      if (sourceIsFromMapbox(source)) {\n        boolean isStreetsV8 = sourceIsStreetsV8(source);\n        for (Layer layer : layers) {\n          if (layer instanceof SymbolLayer) {\n            PropertyValue<?> textFieldProperty = ((SymbolLayer) layer).getTextField();\n            if (textFieldProperty.isExpression()) {\n              if (isStreetsV8) {\n                convertExpressionV8(mapLocale, layer, textFieldProperty);\n              } else {\n                boolean isStreetsV7 = sourceIsStreetsV7(source);\n                convertExpression(mapLocale, layer, textFieldProperty, isStreetsV7);\n              }\n            }\n          }\n        }\n      } else {\n        String url = null;\n        if (source instanceof VectorSource) {\n          url = ((VectorSource) source).getUrl();\n        }\n        if (url == null) {\n          url = \"not found\";\n        }\n        Timber.w(\"The %s (%s) source is not based on Mapbox Vector Tiles. Supported sources:\\n %s\",\n          source.getId(), url, SUPPORTED_SOURCES);\n      }\n    }\n  }","label":0}
{"text":"public function setOriginal($data)\n    {\n        if (empty($data)) {\n            return $this;\n        }\n\n        if (is_string($data)) {\n            $data = json_decode($data, true);\n        }\n\n        $this->original = $data;\n\n        return $this;\n    }","label":0}
{"text":"func decode(id *ID, src []byte) {\n\t_ = src[19]\n\t_ = id[11]\n\n\tid[11] = dec[src[17]]<<6 | dec[src[18]]<<1 | dec[src[19]]>>4\n\tid[10] = dec[src[16]]<<3 | dec[src[17]]>>2\n\tid[9] = dec[src[14]]<<5 | dec[src[15]]\n\tid[8] = dec[src[12]]<<7 | dec[src[13]]<<2 | dec[src[14]]>>3\n\tid[7] = dec[src[11]]<<4 | dec[src[12]]>>1\n\tid[6] = dec[src[9]]<<6 | dec[src[10]]<<1 | dec[src[11]]>>4\n\tid[5] = dec[src[8]]<<3 | dec[src[9]]>>2\n\tid[4] = dec[src[6]]<<5 | dec[src[7]]\n\tid[3] = dec[src[4]]<<7 | dec[src[5]]<<2 | dec[src[6]]>>3\n\tid[2] = dec[src[3]]<<4 | dec[src[4]]>>1\n\tid[1] = dec[src[1]]<<6 | dec[src[2]]<<1 | dec[src[3]]>>4\n\tid[0] = dec[src[0]]<<3 | dec[src[1]]>>2\n}","label":0}
{"text":"public void readByteBlockAlignedNoCRC(byte[] val, int nvals) throws IOException {\n        int destlength = nvals;\n        while (nvals > 0) {\n            int chunk = Math.min(nvals, putByte - getByte);\n            if (chunk == 0) {\n                readFromStream();\n            } else {\n                if (val != null) System.arraycopy(buffer, getByte, val, destlength - nvals, chunk);\n                nvals -= chunk;\n                getByte += chunk;\n                \/\/totalConsumedBits = (getByte << BITS_PER_BLURB_LOG2);\n                availBits -= (chunk << BITS_PER_BLURB_LOG2);\n                totalBitsRead += (chunk << BITS_PER_BLURB_LOG2);\n            }\n        }\n    }","label":0}
{"text":"public Observable<Page<SignalRResourceInner>> listAsync() {\n        return listWithServiceResponseAsync()\n            .map(new Func1<ServiceResponse<Page<SignalRResourceInner>>, Page<SignalRResourceInner>>() {\n                @Override\n                public Page<SignalRResourceInner> call(ServiceResponse<Page<SignalRResourceInner>> response) {\n                    return response.body();\n                }\n            });\n    }","label":0}
{"text":"func CleanupClients() {\n\t\/\/ Set the killed to true so that we don't get unexpected panics\n\tKilled = true\n\n\t\/\/ Kill all the managed clients in parallel and use a WaitGroup\n\t\/\/ to wait for them all to finish up.\n\tvar wg sync.WaitGroup\n\tfor _, client := range managedClients {\n\t\twg.Add(1)\n\n\t\tgo func(client *Client) {\n\t\t\tclient.Kill()\n\t\t\twg.Done()\n\t\t}(client)\n\t}\n\n\tlog.Println(\"waiting for all plugin processes to complete...\")\n\twg.Wait()\n}","label":0}
{"text":"func (m *Model) Application(appName string) (*Application, error) {\n\tdefer m.doLocked()()\n\n\tapp, found := m.applications[appName]\n\tif !found {\n\t\treturn nil, errors.NotFoundf(\"application %q\", appName)\n\t}\n\treturn app, nil\n}","label":0}
{"text":"public function getConnection() {\n\t\ttry {\n\t\t\t$pdo = null;\n\n\t\t\tswitch($this->driver){\n\t\t\t\tcase \"pdo_mysql\": \/\/ MySQL Database\n\t\t\t\t\t$pdo = new PDO(\"mysql:host=\".$this->host.\";dbname=\".$this->database.\";charset=utf8\", $this->user, $this->password);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"pdo_sqlserver\": \/\/ SQL Server Database\n\t\t\t\t\t$pdo = new PDO(\"sqlsrv:Server=\".$this->host.\";Database=\".$this->database, $this->user, $this->password);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"pdo_sqlite\": \/\/ SQLite Database\n\t\t\t\t    $pdo = new PDO(\"sqlite:{$this->database}\");\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"pdo_pgsql\": \/\/ PostgreSQL Database\n\t\t\t\t    $pdo = new PDO(\"pgsql:dbname={$this->database};host={$this->host}\", $this->user, $this->password);\n\t\t\t\t    break;\n\t\t\t\tcase \"pdo_oci\": \/\/ Oracle Database\n\t\t\t\t\t$tns = \"oci:dbname=(DESCRIPTION = (ADDRESS_LIST = (ADDRESS = (PROTOCOL = TCP) (Host = {$this->host}) (Port = {$this->port}))) (CONNECT_DATA = (SERVICE_NAME = {$this->database})))\";\n\t\t\t\t\t$pdo = new PDO($tns, $this->user, $this->password);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new  Exception(\"Database driver not defined\");\n\t\t\t\t}\n\n\t\t\t\tif (count($this->attributes) > 0) {\n\t\t\t\t\tforeach ($this->attributes as $key => $value) {\n\t\t\t\t\t\t$pdo->setAttribute($key, $value);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t$this->pdo = $pdo;\n\n\t\t\t\treturn $pdo;\n\n\t\t} catch (PDOException $e) {\n\t\t\tthrow new PDOException('Unable to connect to database, errorMessage = '.$e->getMessage());\n\t\t} catch (Exception $e) {\n\t\t\tthrow new Exception('Internal error, errorMessage = '.$e->getMessage());\n\t\t}\n\t}","label":0}
{"text":"func Scan(ctx context.Context, allowDup bool, h AdvHandler, f AdvFilter) error {\n\tif defaultDevice == nil {\n\t\treturn ErrDefaultDevice\n\t}\n\tdefer untrap(trap(ctx))\n\n\tif f == nil {\n\t\treturn defaultDevice.Scan(ctx, allowDup, h)\n\t}\n\n\th2 := func(a Advertisement) {\n\t\tif f(a) {\n\t\t\th(a)\n\t\t}\n\t}\n\treturn defaultDevice.Scan(ctx, allowDup, h2)\n}","label":0}
{"text":"def agent_version(self, value):\n        \n        if value == self._defaults['ai.internal.agentVersion'] and 'ai.internal.agentVersion' in self._values:\n            del self._values['ai.internal.agentVersion']\n        else:\n            self._values['ai.internal.agentVersion'] = value","label":0}
{"text":"func NewVersionErrorResponse(\n\terr error,\n\tversions map[int]string) VersionResponse {\n\treturn &genericResponse{\n\t\terr:      err,\n\t\tversions: versions,\n\t}\n}","label":0}
{"text":"func GenerateLine(nodes int, spacing time.Duration) [][]time.Duration {\n\ttruth := make([][]time.Duration, nodes)\n\tfor i := range truth {\n\t\ttruth[i] = make([]time.Duration, nodes)\n\t}\n\n\tfor i := 0; i < nodes; i++ {\n\t\tfor j := i + 1; j < nodes; j++ {\n\t\t\trtt := time.Duration(j-i) * spacing\n\t\t\ttruth[i][j], truth[j][i] = rtt, rtt\n\t\t}\n\t}\n\treturn truth\n}","label":0}
{"text":"def save_file(fullpath, entry):\n    \n    with tempfile.NamedTemporaryFile('w', delete=False) as file:\n        tmpfile = file.name\n        # we can't just use file.write(str(entry)) because otherwise the\n        # headers \"helpfully\" do MIME encoding normalization.\n        # str(val) is necessary to get around email.header's encoding\n        # shenanigans\n        for key, val in entry.items():\n            print('{}: {}'.format(key, str(val)), file=file)\n        print('', file=file)\n        file.write(entry.get_payload())\n    shutil.move(tmpfile, fullpath)","label":0}
{"text":"def copy(self):\n        \n\n        if self._global_condition is not None:\n            raise SimStateError(\"global condition was not cleared before state.copy().\")\n\n        c_plugins = self._copy_plugins()\n        state = SimState(project=self.project, arch=self.arch, plugins=c_plugins, options=self.options.copy(),\n                         mode=self.mode, os_name=self.os_name)\n\n        if self._is_java_jni_project:\n            state.ip_is_soot_addr = self.ip_is_soot_addr\n\n        state.uninitialized_access_handler = self.uninitialized_access_handler\n        state._special_memory_filler = self._special_memory_filler\n        state.ip_constraints = self.ip_constraints\n\n        return state","label":0}
{"text":"public boolean restoreAccessibilityFocus(CalendarDay day) {\n        if ((day.year != mYear) || (day.month != mMonth) || (day.day > mNumCells)) {\n            return false;\n        }\n\n        mNodeProvider.setFocusedItem(day);\n        return true;\n    }","label":0}
{"text":"def _download(url):\n    \n    fh = StringIO()\n\n    for line in get(url):\n        fh.write(line)\n\n    fh.seek(0)\n    return fh","label":0}
{"text":"func (b *Buffer) FirstChunk() Chunk {\n\tif b.first == nil {\n\t\treturn nil\n\t}\n\treturn b.first.Chunk\n}","label":0}
{"text":"public static function uriToPath(string $uri)\n    {\n        $fragments = parse_url($uri);\n        if ($fragments === false || !isset($fragments['scheme']) || $fragments['scheme'] !== 'file') {\n            throw new \\InvalidArgumentException(\"Not a valid file URI: $uri\");\n        }\n        $filepath = urldecode((string) $fragments['path']);\n        if (strpos($filepath, ':') !== false) {\n            if ($filepath[0] === '\/') {\n                $filepath = substr($filepath, 1);\n            }\n            $filepath = str_replace('\/', '\\\\', $filepath);\n        }\n        return $filepath;\n    }","label":0}
{"text":"protected function createLanguageList($selected, $basePath = JPATH_ROOT)\n\t{\n\t\t$list = array();\n\n\t\t\/\/ Cache activation\n\t\t$langs = Language::getKnownLanguages($basePath);\n\n\t\tforeach ($langs as $lang => $metadata)\n\t\t{\n\t\t\t$option = array();\n\n\t\t\t$option['text'] = $metadata['name'];\n\t\t\t$option['value'] = $lang;\n\n\t\t\tif ($lang == $selected)\n\t\t\t{\n\t\t\t\t$option['selected'] = 'selected=\"selected\"';\n\t\t\t}\n\n\t\t\t$list[] = $option;\n\t\t}\n\n\t\treturn $list;\n\t}","label":0}
{"text":"func (c *consumerGroupClaim) waitClosed() (errs ConsumerErrors) {\n\tgo func() {\n\t\tfor range c.Messages() {\n\t\t}\n\t}()\n\n\tfor err := range c.Errors() {\n\t\terrs = append(errs, err)\n\t}\n\treturn\n}","label":0}
{"text":"public static function create($filePath)\n    {\n        if (!file_exists($filePath)) {\n            throw new Exception([\"{$filePath} has not been found\"]);\n        }\n\n        $file = fopen($filePath, 'r');\n\n        $photo = json_decode(\n            self::post(\n                \"photos\",\n                [\n                    'multipart' => [['name' => 'photo', 'contents' => $file]],\n                    'headers' => ['Content-Length' => filesize($filePath)]\n                ]\n            )->getBody(),\n            true\n        );\n\n        return new self($photo);\n    }","label":0}
{"text":"protected function findDeclaredFusionNamespaces()\n    {\n        $namespaces = [];\n\n        $targetDirectory = $this->targetPackageData['path'] . '\/Resources\/Private';\n        if(!is_dir($targetDirectory)) {\n            return $namespaces;\n        }\n\n        foreach (Files::getRecursiveDirectoryGenerator($targetDirectory, null, true) as $pathAndFilename) {\n            $pathInfo = pathinfo($pathAndFilename);\n            if (!isset($pathInfo['filename'])) {\n                continue;\n            }\n            if (strpos($pathAndFilename, 'Migrations\/Code') !== false) {\n                continue;\n            }\n\n            if (array_key_exists('extension', $pathInfo) && ($pathInfo['extension'] == 'ts2' || $pathInfo['extension'] == 'fusion')) {\n                $namespaceDeclarationMatches = [];\n                $count = preg_match_all(\n                    '\/^namespace:[\\\\s]*(?P<alias>[\\\\w\\\\.]+)[\\\\s]*\\\\=[\\\\s]*(?P<packageKey>[\\\\w\\\\.]+)[\\\\s]*$\/um',\n                    file_get_contents($pathAndFilename),\n                    $namespaceDeclarationMatches,\n                    PREG_SET_ORDER\n                );\n                if ($count > 0) {\n                    foreach ($namespaceDeclarationMatches as $match) {\n                        if (!array_key_exists($match['alias'], $namespaces)) {\n                            $namespaces[$match['alias']] = $match['packageKey'];\n                        } else {\n                            if ($namespaces[$match['alias']] !== $match['packageKey']) {\n                                $this->showWarning(\n                                    sprintf(\n                                        'Namespace-alias \"%s\" was declared multiple times for different aliases %s is used',\n                                        $match['alias'],\n                                        $namespaces[$match['alias']]\n                                    )\n                                );\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return $namespaces;\n    }","label":0}
{"text":"protected function validateOptions(array $options)\n    {\n        foreach ($options as $option => $value) {\n            if (!array_key_exists($option, $this->defaultOptions)) {\n                throw new \\InvalidArgumentException(sprintf('Unrecognized option \"%s\".', $option));\n            }\n        }\n        if (isset($options['html']) && !is_bool($options['html'])) {\n            throw new \\InvalidArgumentException('The option \"html\" must be a boolean.');\n        }\n        if (isset($options['html_attributes']) && !is_array($options['html_attributes'])) {\n            throw new \\InvalidArgumentException('The option \"html_attributes\" must be an array.');\n        }\n    }","label":0}
{"text":"def p_term(tok):\n        \"\"\"\"\"\"\n        if len(tok) == 4:\n            tok[0] = MathBinOpRule(tok[2], tok[1], tok[3])\n        else:\n            tok[0] = tok[1]","label":0}
{"text":"func (s *ListNotebookInstancesInput) SetDefaultCodeRepositoryContains(v string) *ListNotebookInstancesInput {\n\ts.DefaultCodeRepositoryContains = &v\n\treturn s\n}","label":0}
{"text":"function _connect($argHostname, $argUsername, $argPassword, $argDatabasename)\n\t{\n\t\tif (!function_exists('sqlite_open')) {\n\t\t\treturn null;\n\t\t}\n\t\tif (empty($argHostname) && $argDatabasename) {\n\t\t\t$argHostname = $argDatabasename;\n\t\t}\n\n\t\t$this->_connectionID = sqlite_open($argHostname);\n\t\tif ($this->_connectionID === false) {\n\t\t\treturn false;\n\t\t}\n\t\t$this->_createFunctions();\n\t\treturn true;\n\t}","label":0}
{"text":"def add(name, value)\n      build(name, value).tap do |hook|\n        hook.save\n      end\n    end","label":0}
{"text":"private function merge(DataValidationDefinition $definition, DataValidationDefinition $profileDefinition): void\n    {\n        foreach ($profileDefinition->getProperties() as $key => $constraints) {\n            $parameters = [];\n            $parameters[] = $key;\n            $parameters = array_merge($parameters, $constraints);\n\n            call_user_func_array([$definition, 'add'], $parameters);\n        }\n    }","label":0}
{"text":"def serialize(self, request):\n        \n\n        def serialize(anything):\n\n            def serialize_dictionary(dictionary):\n                \"\"\"Dictionaries are serialized recursively.\"\"\"\n                data = OrderedDict()\n\n                # Serialize each of the dictionary's keys\n                for key, value in dictionary.items():\n                    data.update({ key: serialize(value) })\n\n                return data\n\n            def serialize_list(list):\n                \"\"\"Lists are serialized recursively.\"\"\"\n                data = []\n\n                # Serialize each of the list's items\n                for item in list:\n                    data.append(serialize(item))\n\n                return data\n\n            def serialize_queryset(queryset):\n                \"\"\"Querysets are serialized as lists of models.\"\"\"\n                data = []\n\n                # Serialize queryset as a list of models\n                for model in queryset:\n                    data.append(serialize_model(model))\n\n                return data\n\n            def serialize_datequeryset(datequeryset):\n                \"\"\"DateQuerysets are serialized as lists of dates.\"\"\"\n                data = []\n\n                # Serialize datequeryset as a list of datetime objects\n                for date in datequeryset:\n                    data.append(serialize_date(date))\n\n                return data\n\n            def serialize_valueslistqueryset(valueslistqueryset):\n                \"\"\"DateQuerysets are serialized as lists of values.\"\"\"\n                data = []\n\n                # Serialize valueslistqueryset as a list of values\n                for value in valueslistqueryset:\n                    if isinstance(value, tuple):\n                        data.append(serialize_list(value))\n                    else:\n                        data.append(serialize(value))\n\n                return data\n\n            def serialize_manager(manager):\n                \"\"\"Managers are serialized as list of models.\"\"\"\n                data = []\n\n                for model in manager.all():\n                    data.append(serialize_model(model))\n\n                return data\n\n            def serialize_model(model):\n                \"\"\"\n                Models are serialized by calling their 'serialize' method.\n\n                Models that don't define a 'serialize' method are\n                serialized as a dictionary of fields.\n\n                Example:\n\n                    {\n                        'id': 1,\n                        'title': 'Mmmm pie',\n                        'content: 'Pie is good!'\n                    }\n\n                \"\"\"\n\n                if hasattr(model, 'serialize'):\n                    return serialize(model.serialize())\n                else:\n                    data = OrderedDict()\n                    for field in model._meta.fields + model._meta.many_to_many:\n                        data.update({\n                            field.name: serialize(getattr(model, field.name ))\n                        })\n\n                    return data\n\n            def serialize_form(form):\n                \"\"\"\n                Forms are serialized as a dictionary of fields and errors (if any).\n\n                Example:\n\n                    {\n                        'fields': ['title', 'content'],\n                        'errors': {\n                            'content': 'Must describe pie.'\n                        }\n                    }\n\n                \"\"\"\n                data = OrderedDict()\n\n                # Serialize form fields as a list of strings\n                data['fields'] = []\n                for field in form.fields:\n                    data['fields'].append(field)\n\n                # Serialize form errors as a dictionary with keys 'field' and 'error'\n                if form.errors:\n                    data['errors'] = []\n                    for field in form:\n                        data['errors'].append(\n                            {\n                                'field': field.name,\n                                'error': field.errors.as_text()\n                            }\n                        )\n\n                return data\n\n            def serialize_date(datetime):\n                \"\"\"Dates are serialized as ISO 8601-compatible strings.\"\"\"\n                return datetime.isoformat()\n\n            def serialize_field_file(field_file):\n                \"\"\"Filefields are serialized as strings describing their URL.\"\"\"\n                try:\n                    return field_file.url\n                except ValueError:\n                    return None\n\n            def serialize_image_field_file(image_field_file):\n                \"\"\"Imagefields are serialized as strings describing their URL.\"\"\"\n                try:\n                    return image_field_file.url\n                except ValueError:\n                    return None\n\n            def serialize_decimal_field(decimal_field):\n                \"\"\"Decimal fields are serialized as strings.\"\"\"\n                try:\n                    return str(decimal_field)\n                except ValueError:\n                    return None\n\n            if isinstance(anything, dict):\n                return serialize_dictionary(anything)\n\n            if isinstance(anything, (list, set)):\n                return serialize_list(anything)\n\n            if isinstance(anything, django.db.models.query.DateQuerySet):\n                return serialize_datequeryset(anything)\n\n            if isinstance(anything, django.db.models.query.DateTimeQuerySet):\n                return serialize_datequeryset(anything)\n\n            if isinstance(anything, django.db.models.query.ValuesListQuerySet):\n                return serialize_valueslistqueryset(anything)\n\n            if isinstance(anything, django.db.models.query.QuerySet):\n                return serialize_queryset(anything)\n\n            if isinstance(anything, django.db.models.Model):\n                return serialize_model(anything)\n\n            if isinstance(anything, (django.forms.Form, django.forms.ModelForm)):\n                return serialize_form(anything)\n\n            if isinstance(anything, (str, unicode)):\n                return anything\n\n            if isinstance(anything, (int, float, long)):\n                return anything\n\n            if isinstance(anything, (datetime.date, datetime.datetime)):\n                return serialize_date(anything)\n\n            if isinstance(anything, django.db.models.manager.Manager):\n                return serialize_manager(anything)\n\n            if isinstance(anything, Decimal):\n                return serialize_decimal_field(anything)\n\n            if isinstance(anything, django.core.files.base.File):\n                return serialize_field_file(anything)\n\n            if anything is None:\n                return None\n\n            if hasattr(anything, 'serialize'):\n                return serialize(anything.serialize())\n\n            raise TypeError(\"Respite doesn't know how to serialize %s\" % anything.__class__.__name__)\n\n        return serialize(self.source)","label":0}
{"text":"func (p *Path) Distance() float64 {\n\tsum := 0.0\n\n\tloopTo := len(p.PointSet) - 1\n\tfor i := 0; i < loopTo; i++ {\n\t\tsum += p.PointSet[i].DistanceFrom(&p.PointSet[i+1])\n\t}\n\n\treturn sum\n}","label":0}
{"text":"public function transformTextCard(AbstractMessage $message)\n    {\n        return [\n            'msgtype'  => 'textcard',\n            'textcard' => [\n                'title'       => $message->get('title'),\n                'description' => $message->get('description'),\n                'url'         => $message->get('url'),\n                'btntxt'      => $message->get('btntxt'),\n            ],\n        ];\n    }","label":0}
{"text":"def analyze(self, scratch, **kwargs):\n        \"\"\"\"\"\"\n        changes = dict((x.name, self.sprite_changes(x)) for x in\n                       scratch.sprites)\n        changes['stage'] = {\n            'background': self.attribute_state(scratch.stage.scripts,\n                                               'costume')}\n        # self.output_results(changes)\n        return {'initialized': changes}","label":0}
{"text":"def get_notifications(self, start=None, stop=None, *args, **kwargs):\n        \n        filter_kwargs = {}\n        # Todo: Also support sequencing by 'position' if items are sequenced by timestamp?\n        if start is not None:\n            filter_kwargs['%s__gte' % self.notification_id_name] = start + 1\n        if stop is not None:\n            filter_kwargs['%s__lt' % self.notification_id_name] = stop + 1\n        objects = self.record_class.objects.filter(**filter_kwargs)\n\n        if hasattr(self.record_class, 'application_name'):\n            objects = objects.filter(application_name=self.application_name)\n        if hasattr(self.record_class, 'pipeline_id'):\n            objects = objects.filter(pipeline_id=self.pipeline_id)\n\n        objects = objects.order_by('%s' % self.notification_id_name)\n        return objects.all()","label":0}
{"text":"function (path) {\n\t\tvar attr = {\n\t\t\t\/\/ subpixel precision down to 0.1 (width and height = 1px)\n\t\t\tcoordsize: '10 10'\n\t\t};\n\t\tif (isArray(path)) {\n\t\t\tattr.d = path;\n\t\t} else if (isObject(path)) { \/\/ attributes\n\t\t\textend(attr, path);\n\t\t}\n\t\t\/\/ create the shape\n\t\treturn this.createElement('shape').attr(attr);\n\t}","label":0}
{"text":"function (spaceIdentifier, data) {\n    var path;\n    if (data) {\n      path = this.constructPath(constants.SPACES, spaceIdentifier);\n      return this.Core.PATCH(path, data);\n    } else {\n      return this.rejectRequest('Bad Request: Space data is required');\n    }\n  }","label":0}
{"text":"public final void entryRuleXAndExpression() throws RecognitionException {\n        try {\n            \/\/ InternalXbaseWithAnnotations.g:334:1: ( ruleXAndExpression EOF )\n            \/\/ InternalXbaseWithAnnotations.g:335:1: ruleXAndExpression EOF\n            {\n            if ( state.backtracking==0 ) {\n               before(grammarAccess.getXAndExpressionRule()); \n            }\n            pushFollow(FOLLOW_1);\n            ruleXAndExpression();\n\n            state._fsp--;\n            if (state.failed) return ;\n            if ( state.backtracking==0 ) {\n               after(grammarAccess.getXAndExpressionRule()); \n            }\n            match(input,EOF,FOLLOW_2); if (state.failed) return ;\n\n            }\n\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n        }\n        finally {\n        }\n        return ;\n    }","label":0}
{"text":"public static function formatPermissions(array $userPermissions): array\n    {\n        $userPermissions = self::format($userPermissions);\n\n        foreach ($userPermissions as $key => $permission) {\n            $userPermissions[$key] = self::$permissions[$key];\n        }\n\n        return $userPermissions;\n    }","label":0}
{"text":"public function compileRenameColumn(Blueprint $blueprint, Fluent $command, Connection $connection)\n    {\n        $table = $this->wrapTable($blueprint);\n\n        $rs    = [];\n        $rs[0] = 'alter table ' . $table . ' rename column ' . $command->from . ' to ' . $command->to;\n\n        return (array) $rs;\n    }","label":0}
{"text":"public function snakeCase($value, $delimiter = '_')\n\t{\n\t\t$replace = '$1'.$delimiter.'$2';\n\n\t\treturn ctype_lower($value) ? $value : strtolower(preg_replace('\/(.)([A-Z])\/', $replace, $value));\n\t}","label":0}
{"text":"protected function acquireSecurityTokenFromFederatedSTS($username, $password) {\n\n        $response = Requests::get(str_replace('{username}', $username, self::$RealmUrlTemplate),null);\n        $federatedStsUrl = $this->getFederatedAuthenticationInformation($response);\n\n        if ($federatedStsUrl) {\n          $message_id = md5(uniqid($username . '-' . time() . '-' . rand() , true));\n          $data = $this->prepareSecurityFederatedTokenRequest($username, $password, $message_id, $federatedStsUrl->textContent);\n\n          $headers = array();\n          $headers['Content-Type'] = 'application\/soap+xml';\n          $response = Requests::post($federatedStsUrl->textContent, $headers, $data);\n\n          $samlAssertion = $this->getSamlAssertion($response);\n\n          if ($samlAssertion) {\n            $samlAssertion_node = $samlAssertion->item(0);\n            $data = $this->prepareRST2Request($samlAssertion_node);\n            $response = Requests::post(self::$RST2Url, $headers, $data);\n            $this->usingFederatedSTS = TRUE;\n\n            return $response;\n          }\n        }\n\n        return NULL;\n    }","label":0}
{"text":"func (lr loggerRewrite) Write(p []byte) (n int, err error) {\n\tif !lr.hideDeprecated {\n\t\tp = append(log_deprecated, p...)\n\t}\n\tn = len(p)\n\tif len(p) > 0 && p[n-1] == '\\n' {\n\t\tp = p[:n-1]\n\t\tn--\n\t}\n\n\tswitch lr.Level {\n\tcase log15.LvlInfo:\n\t\tlr.Logger.Info(string(p))\n\tcase log15.LvlDebug:\n\t\tlr.Logger.Debug(string(p))\n\tcase log15.LvlWarn:\n\t\tlr.Logger.Warn(string(p))\n\tcase log15.LvlError:\n\t\tlr.Logger.Error(string(p))\n\tcase log15.LvlCrit:\n\t\tlr.Logger.Crit(string(p))\n\t}\n\n\treturn\n}","label":0}
{"text":"public static Object convertBlob(Connection conn, InputStream input) throws SQLException {\n        return convertBlob(conn, toByteArray(input));\n    }","label":0}
{"text":"func (s *InstanceState) SetName(v string) *InstanceState {\n\ts.Name = &v\n\treturn s\n}","label":0}
{"text":"public function saveToCache($type, $slotname, $version, ChunkModel $chunk = null)\n    {\n        $key = $this->getCacheKey($type, $slotname, $version);\n\n        $this->cache->forever($key, $chunk);\n    }","label":0}
{"text":"def _provision_vm(name=None, session=None):\n    '''\n    \n    '''\n    if session is None:\n        session = _get_session()\n    log.info('Provisioning VM %s', name)\n    vm = _get_vm(name, session)\n    task = session.xenapi.Async.VM.provision(vm)\n    _run_async_task(task, session)","label":0}
{"text":"public function browserVersion()\n    {\n        $UserAgent = self::agent();\n        $B_Agent = self::Browser()['agent'];\n        if ($B_Agent !== null) {\n            $known = ['Version', $B_Agent, 'other'];\n            $pattern = '#(?<browser>'.implode('|', $known).\n            ')[\/ ]+(?<version>[0-9.|a-zA-Z.]*)#';\n            if (!preg_match_all($pattern, $UserAgent, $matches)) {\n            }\n            $i = count($matches['browser']);\n            if ($i != 1) {\n                if (strripos($UserAgent, 'Version') < strripos($UserAgent, $B_Agent)) {\n                    $Version = $matches['version'][0];\n                } else {\n                    $Version = $matches['version'][0];\n                }\n            } else {\n                $Version = $matches['version'][0];\n            }\n        }\n\n        return $Version;\n    }","label":0}
{"text":"protected function _getUsedComponents($controllerName) {\n\t\t$plugin = $controllerName !== 'AppController' ? $this->getConfig(static::CONFIG_PLUGIN) : null;\n\t\t$className = App::className(($plugin ? $plugin . '.' : '') . $controllerName, 'Controller');\n\t\tif (!$className) {\n\t\t\treturn [];\n\t\t}\n\n\t\t\/** @var \\App\\Controller\\AppController $controller *\/\n\t\t$controller = new $className();\n\n\t\t$components = [];\n\t\tforeach ($controller->components()->loaded() as $component) {\n\t\t\t$components[$component] = get_class($controller->components()->get($component));\n\t\t}\n\n\t\tif ($controllerName === 'AppController') {\n\t\t\treturn $components;\n\t\t}\n\n\t\t$appControllerComponents = $this->_getUsedComponents('AppController');\n\t\t$components = array_diff_key($components, $appControllerComponents);\n\n\t\treturn $components;\n\t}","label":0}
{"text":"def run(self, raw_args=None):\n\t\t\n\t\targs = self.parser.parse_args(raw_args)\n\n\t\tcore = Core()\n\n\t\ttry:\n\t\t\treport = core.lint(**vars(args))\n\t\texcept Exception as err:\n\t\t\tself.parser.error(str(err))\n\n\t\tprint(report)\n\t\tself.parser.exit()","label":0}
{"text":"def pruneDutycycles(self, threshold=0.0):\n    \n    if threshold < 0.0:\n      return\n\n    # Collect all layers with 'dutyCycle'\n    for m in self.modules():\n      if m == self:\n        continue\n      if hasattr(m, 'pruneDutycycles'):\n        m.pruneDutycycles(threshold)","label":0}
{"text":"func PgTruetypmod(db XODB, v0 pgtypes.PgAttribute, v1 pgtypes.PgType) (int, error) {\n\tvar err error\n\n\t\/\/ sql query\n\tconst sqlstr = `SELECT information_schema._pg_truetypmod($1, $2)`\n\n\t\/\/ run query\n\tvar ret int\n\tXOLog(sqlstr, v0, v1)\n\terr = db.QueryRow(sqlstr, v0, v1).Scan(&ret)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn ret, nil\n}","label":0}
{"text":"private function startup()\n\t{\n\t\t$this->registerSigHandlers();\n\t\t$this->pruneDeadWorkers();\n\t\tResque_Event::trigger('beforeFirstFork', $this);\n\t\t$this->registerWorker();\n\t}","label":0}
{"text":"@Override\n    public synchronized boolean isChainRunning(String chainName) {\n        boolean rc = false;\n        if (null != chainName) {\n            Chain c = this.chainRunningMap.get(chainName);\n            if (null != c) {\n                rc = c.getState().equals(RuntimeState.STARTED) || c.getState().equals(RuntimeState.QUIESCED);\n            }\n        }\n        if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {\n            Tr.debug(tc, \"isChainRunning: \" + chainName + \" \" + rc);\n        }\n        return rc;\n    }","label":0}
{"text":"private static Date toDateWithFormatString(String date, String format) {\r\n    if (date == null) {\r\n      return null;\r\n    }\r\n\r\n    try {\r\n      return strategy.formatFor(format).parse(date);\r\n    } catch (ParseException e) {\r\n      UTILS_LOGGER.trace(\"Unable to parse date '{}' using format string '{}': {}\", date, format, e);\r\n\r\n      return null;\r\n    }\r\n  }","label":0}
{"text":"public function registerManaged($entity, array $id, array $data)\n    {\n        $isProxy = $entity instanceof GhostObjectInterface && ! $entity->isProxyInitialized();\n        $oid     = spl_object_id($entity);\n\n        $this->entityIdentifiers[$oid]  = $id;\n        $this->entityStates[$oid]       = self::STATE_MANAGED;\n        $this->originalEntityData[$oid] = $data;\n\n        $this->addToIdentityMap($entity);\n\n        if ($entity instanceof NotifyPropertyChanged && ! $isProxy) {\n            $entity->addPropertyChangedListener($this);\n        }\n    }","label":0}
{"text":"protected function set_field() {\n\n\t\t$properties = get_class_vars( __CLASS__ );\n\n\t\t\/\/ Some things must run before the others.\n\t\t$this->set_option_type();\n\t\t$this->set_settings();\n\n\t\t\/\/ Sanitize the properties, skipping the ones that have already run above.\n\t\tforeach ( $properties as $property => $value ) {\n\t\t\tif ( in_array( $property, [ 'option_name', 'option_type', 'settings' ], true ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif ( method_exists( $this, 'set_' . $property ) ) {\n\t\t\t\t$method_name = 'set_' . $property;\n\t\t\t\t$this->$method_name();\n\t\t\t}\n\t\t}\n\n\t\t\/\/ Get all arguments with their values.\n\t\t$args = get_object_vars( $this );\n\t\tforeach ( array_keys( $args ) as $key ) {\n\t\t\t$args[ $key ] = $this->$key;\n\t\t}\n\n\t\t\/\/ Add the field to the static $fields variable properly indexed.\n\t\tKirki::$fields[ $this->settings ] = $args;\n\n\t}","label":0}
{"text":"public function update(Request $request)\n    {\n        \/\/ AUTHORIZE ... COMES HERE\n        $pageblock = $this->pageblock->getById($request->get('pageblock_id'));\n        $pageblock = $this->pageBlockRepository->updateBody($pageblock, $request->get('html'));\n        return $pageblock;\n    }","label":0}
{"text":"def add_plugin(self, plugin, call):\n        \n        meth = getattr(plugin, call, None)\n        if meth is not None:\n            self.plugins.append((plugin, meth))","label":0}
{"text":"def is_url_ok(self):\n        \n\n        response = requests.head(settings.KEYSTONE_AUTH_URL)\n        if response.status_code == 200:\n            return True\n        return False","label":0}
{"text":"function (property) {\n                var SVGAttributes = \"width|height|x|y|cx|cy|r|rx|ry|x1|x2|y1|y2\";\n\n                \/* Certain browsers require an SVG transform to be applied as an attribute. (Otherwise, application via CSS is preferable due to 3D support.) *\/\n                if (IE || (Velocity.State.isAndroid && !Velocity.State.isChrome)) {\n                    SVGAttributes += \"|transform\";\n                }\n\n                return new RegExp(\"^(\" + SVGAttributes + \")$\", \"i\").test(property);\n            }","label":0}
{"text":"public ConfigurableEmitter duplicate() {\r\n\t\tConfigurableEmitter theCopy = null;\r\n\t\ttry {\r\n\t\t\tByteArrayOutputStream bout = new ByteArrayOutputStream();\r\n\t\t\tParticleIO.saveEmitter(bout, this);\r\n\t\t\tByteArrayInputStream bin = new ByteArrayInputStream(bout.toByteArray());\r\n\t\t\ttheCopy = ParticleIO.loadEmitter(bin);\r\n\t\t} catch (IOException e) {\r\n\t\t\tLog.error(\"Slick: ConfigurableEmitter.duplicate(): caught exception \" + e.toString());\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\treturn theCopy;\r\n\t}","label":0}
{"text":"@Nonnull\n\tpublic static LLogicalBinaryOperator logicalBinaryOperatorFrom(Consumer<LLogicalBinaryOperatorBuilder> buildingFunction) {\n\t\tLLogicalBinaryOperatorBuilder builder = new LLogicalBinaryOperatorBuilder();\n\t\tbuildingFunction.accept(builder);\n\t\treturn builder.build();\n\t}","label":0}
{"text":"def help_center_category_translation_update(self, category_id, locale, data, **kwargs):\n        \"\"\n        api_path = \"\/api\/v2\/help_center\/categories\/{category_id}\/translations\/{locale}.json\"\n        api_path = api_path.format(category_id=category_id, locale=locale)\n        return self.call(api_path, method=\"PUT\", data=data, **kwargs)","label":0}
{"text":"public static function normalizePhone($digits)\n    {\n        $chunks = str_split($digits, 3);\n\n        $result['npa']   = $chunks[0];\n        $result['nxx']   = $chunks[1];\n        $result['num']   = $chunks[2].$chunks[3];\n        $result['seven'] = $chunks[1].'-'.$chunks[2].$chunks[3];\n        $result['plainseven'] = $chunks[1].$chunks[2].$chunks[3];\n        $result['full']  = $chunks[0].'-'.$result['seven'];\n\n        return $result;\n    }","label":0}
{"text":"public function exists($file)\n    {\n        $lines = ftp_rawlist($this->connection(), '-1t ' . dirname($file));\n        if (false === $lines) {\n            return false;\n        }\n\n        $pattern = '{(?<!->) ' . preg_quote(basename($file)) . '( -> |$)}m';\n        foreach ($lines as $line) {\n            if (preg_match($pattern, $line)) {\n                return true;\n            }\n        }\n\n        return false;\n    }","label":0}
{"text":"func claimsFromIDToken(oidcClient *oidc.Client, idToken string) (jose.Claims, error) {\n\tjwt, err := jose.ParseJWT(idToken)\n\tif err != nil {\n\t\treturn nil, trace.Wrap(err)\n\t}\n\n\terr = oidcClient.VerifyJWT(jwt)\n\tif err != nil {\n\t\treturn nil, trace.Wrap(err)\n\t}\n\n\tlog.Debugf(\"Extracting OIDC claims from ID token.\")\n\n\tclaims, err := jwt.Claims()\n\tif err != nil {\n\t\treturn nil, trace.Wrap(err)\n\t}\n\n\treturn claims, nil\n}","label":0}
{"text":"function createCompilerError(\n  message: string,\n  locations?: ?$ReadOnlyArray<Location>,\n  nodes?: ?$ReadOnlyArray<ASTNode>,\n): CompilerError {\n  let messageWithLocations = message;\n  if (locations != null) {\n    const printedLocations = printLocations(locations);\n    messageWithLocations =\n      printedLocations.length === 0\n        ? message\n        : [message, ...printedLocations].join('\\n\\n') + '\\n';\n  }\n  const error = new GraphQLError(\n    `Internal Error: ${messageWithLocations}`,\n    nodes ?? [],\n  );\n  return new Error(error.message);\n}","label":0}
{"text":"@Override\n\tpublic long dynamicQueryCount(DynamicQuery dynamicQuery,\n\t\tProjection projection) {\n\t\treturn cpDefinitionSpecificationOptionValuePersistence.countWithDynamicQuery(dynamicQuery,\n\t\t\tprojection);\n\t}","label":0}
{"text":"public static List<FieldInfo> fetchFieldInfos(Class cls, boolean ignoreNoAnnotation) {\r\n        \/\/ if set ProtobufClass annotation\r\n        Annotation annotation = cls.getAnnotation(ProtobufClass.class);\r\n\r\n        Annotation zipZap = cls.getAnnotation(EnableZigZap.class);\r\n        boolean isZipZap = false;\r\n        if (zipZap != null) {\r\n            isZipZap = true;\r\n        }\r\n\r\n        boolean typeDefined = false;\r\n        List<Field> fields = null;\r\n        if (annotation == null) {\r\n            fields = FieldUtils.findMatchedFields(cls, Protobuf.class);\r\n            if (fields.isEmpty() && ignoreNoAnnotation) {\r\n                throw new IllegalArgumentException(\"Invalid class [\" + cls.getName() + \"] no field use annotation @\"\r\n                        + Protobuf.class.getName() + \" at class \" + cls.getName());\r\n            }\r\n        } else {\r\n            typeDefined = true;\r\n\r\n            fields = FieldUtils.findMatchedFields(cls, null);\r\n        }\r\n\r\n        List<FieldInfo> fieldInfos = ProtobufProxyUtils.processDefaultValue(fields, typeDefined, isZipZap);\r\n        return fieldInfos;\r\n    }","label":0}
{"text":"public final T execute(ComThread t) {\n        if(Thread.currentThread()==t)\n            \/\/ if invoked from within ComThread, execute it at once\n            return call();\n        else\n            \/\/ otherwise schedule the execution and block\n            return t.execute(this);\n    }","label":0}
{"text":"function(items, config) {\n\n  config = config || {};\n  config.searchableFields = config.searchableFields || [];\n  this.items = items;\n  \/\/ creating index\n  this.idx = lunr(function () {\n    \/\/ currently schema hardcoded\n    this.field('name', { boost: 10 });\n\n    var self = this;\n    _.forEach(config.searchableFields, function(field) {\n      self.field(field);\n    });\n    this.ref('id');\n  })\n  \/\/var items2 = _.clone(items)\n  var i = 1;\n  _.map(items, (doc) => {\n\n    if (!doc.id) {\n      doc.id = i;\n      ++i;\n    }\n    this.idx.add(doc)\n  })\n\n  this.store = _.mapKeys(items, (doc) => {\n    return doc.id;\n  })\n}","label":0}
{"text":"public function readOne($entityName)\n    {\n        return new ReadOneQuery(\n            $this->connection,\n            $this->models->get($entityName),\n            $this->factory,\n            $this->accessor,\n            $this->dispatcher\n        );\n    }","label":0}
{"text":"@Override\n  public Query parse() throws SyntaxError {\n    if (field == null) {\n      throw new SyntaxError(\"no \" + MTAS_CQL_QPARSER_FIELD);\n    } else if (cql == null) {\n      throw new SyntaxError(\"no \" + MTAS_CQL_QPARSER_QUERY);\n    } else {\n      MtasSpanQuery q = null;\n      MtasSpanQuery iq = null;\n      if (ignoreQuery != null) {\n        Reader ignoreReader = new BufferedReader(new StringReader(ignoreQuery));\n        MtasCQLParser ignoreParser = new MtasCQLParser(ignoreReader);\n        try {\n          iq = ignoreParser.parse(field, null, null, null, null);\n        } catch (mtas.parser.cql.TokenMgrError\n            | mtas.parser.cql.ParseException e) {\n          throw new SyntaxError(e);\n        }\n      }\n      Reader queryReader = new BufferedReader(new StringReader(cql));\n      MtasCQLParser queryParser = new MtasCQLParser(queryReader);\n      try {\n        q = queryParser.parse(field, defaultPrefix, variables, iq,\n            maximumIgnoreLength);\n      } catch (mtas.parser.cql.TokenMgrError\n          | mtas.parser.cql.ParseException e) {\n        throw new SyntaxError(e);\n      }\n      return q;\n    }\n  }","label":0}
{"text":"func fixMemorySwappiness(resources *containertypes.Resources) {\n\tif resources.MemorySwappiness != nil && *resources.MemorySwappiness == -1 {\n\t\tresources.MemorySwappiness = nil\n\t}\n}","label":0}
{"text":"def endpoint_type(self, endpoint_type):\n        \n        if endpoint_type is not None and len(endpoint_type) > 64:\n            raise ValueError(\"Invalid value for `endpoint_type`, length must be less than or equal to `64`\")\n\n        self._endpoint_type = endpoint_type","label":0}
{"text":"function onTouchEnd(oEvent) {\n\t\t\t\tvar windowsPhoneTouchCondition = Device.browser.mobile &&\n\t\t\t\t\t(Device.browser.name === Device.browser.BROWSER.INTERNET_EXPLORER ||\/\/ TODO remove after 1.62 version\n\t\t\t\t\tDevice.browser.name === Device.browser.BROWSER.EDGE) &&\n\t\t\t\t\twindowsPhoneTouches == maxFingersAllowed;\n\n\t\t\t\tdocument.removeEventListener('touchend', onTouchEnd);\n\n\t\t\t\t\/\/ Check if two fingers are holded for 3 seconds or more and after that it`s tapped with a third finger\n\t\t\t\tif (timeDiff > minHoldTime\n\t\t\t\t\t&& (oEvent.touches.length === holdFingersNumber || windowsPhoneTouchCondition) \/\/ on Windows Phone oEvent.touches.lenght is 0 instead of 2\n\t\t\t\t\t&& oEvent.changedTouches.length === releasedFingersNumber\n\t\t\t\t\t&& oEvent.changedTouches[0].identifier === lastTouchUID) {\n\n\t\t\t\t\ttimeDiff = 0;\n\t\t\t\t\tstartTime = 0;\n\t\t\t\t\tshow();\n\t\t\t\t}\n\t\t\t}","label":0}
{"text":"func (ev *changePrev) GetValue(val proto.Message) (err error) {\n\tif ev.ProtoWatchResp.GetChangeType() != datasync.Delete {\n\t\treturn ev.ProtoWatchResp.GetValue(val)\n\t}\n\treturn nil\n}","label":0}
{"text":"protected boolean isCreateStandardEventHandlers() {\n\t\tint idx = 0;\n\t\tif (this.isConstructorCreationEnabled) {\n\t\t\t++idx;\n\t\t}\n\t\tif (this.isInheritedCreationEnabled) {\n\t\t\t++idx;\n\t\t}\n\t\treturn this.isDefaultEventGenerated && this.methodStubsButtons.isSelected(idx);\n\t}","label":0}
{"text":"public static function getStatusMessage($code) {\n    if (array_key_exists($code, self::$status_messages)) {\n      return self::$status_messages[$code];\n    }\n    return sprintf(\"Unknown Code %d\", $code);\n  }","label":0}
{"text":"public function sort_columns($query)\n    {\n        \/\/ Bail if we are not on the correct admin page.\n        if (! \\is_admin() || !\\in_array($this->name, $query->query_vars['taxonomy'])) {\n            return;\n        }\n\n        $order_by = $query->get('orderby');\n\n        \/\/ Check if the current sorted column has a sort callback defined.\n        if (isset($this->sortable_columns[ $order_by ])) {\n            $callback = \"sort_{$order_by}_column\";\n            $this->{$callback}($query);\n        }\n    }","label":0}
{"text":"public static boolean shouldEncodeWith(Encoder encoderToApply, EncodingState currentEncodingState) {\n        if(isNoneEncoder(encoderToApply)) return false;\n        if (currentEncodingState != null && currentEncodingState.getEncoders() != null) {\n            for (Encoder encoder : currentEncodingState.getEncoders()) {\n                if (isPreviousEncoderSafeOrEqual(encoderToApply, encoder)) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }","label":0}
{"text":"function transfer(opt) {\n\n  var options = opt || Object.create(null);\n  var my = {\n    denominator: 1024,\n    byte: 1,\n    out: ' KB\/s',\n    time: 1000000000,\n    response: true\n  };\n\n  if (options.data === 'Byte') {\n    \/\/ if (Boolean(options.Bps)) {\n    my.denominator = 1;\n    my.byte = 1;\n    my.out = ' Byte';\n  } else if (options.data === 'KB') {\n    \/\/ } else if (Boolean(options.KBps)) {\n    my.denominator = 1024;\n    my.byte = 1;\n    my.out = ' KB';\n  } else if (options.data === 'MB') {\n    \/\/ } else if (Boolean(options.MBps)) {\n    my.denominator = 1048576;\n    my.byte = 1;\n    my.out = ' MB';\n  } else if (options.data === 'bit') {\n    \/\/ } else if (Boolean(options.bps)) {\n    my.denominator = 1;\n    my.byte = 8;\n    my.out = ' bit';\n  } else if (options.data === 'Kb') {\n    \/\/ } else if (Boolean(options.kbps)) {\n    my.denominator = 1000;\n    my.byte = 8;\n    my.out = ' Kbit';\n  } else if (options.data === 'Mb') {\n    \/\/ } else if (Boolean(options.Mbps)) {\n    my.denominator = 1000000;\n    my.byte = 8;\n    my.out = ' Mbit';\n  }\n\n  if (options.time === 'nanosecond') {\n    \/\/ if (Boolean(options.nanosecond)) {\n    my.time = 1;\n    my.out += '\/ns';\n  } else if (options.time === 'millisecond') {\n    \/\/ } else if (Boolean(options.millisecond)) {\n    my.time = 1000000;\n    my.out += '\/ms';\n  } else if (options.time === 'second') {\n    \/\/ } else if (Boolean(options.second)) {\n    my.time = 1000000000;\n    my.out += '\/s';\n  }\n\n  if (options.output === false) {\n    my.out = '';\n  }\n\n  if (options.response === false) {\n    my.response = false;\n  }\n\n  return wrapper(my);\n}","label":0}
{"text":"public function renderView()\n    {\n        if ($this->form) {\n            $this->template->trySet('name', $this->short_name);\n        }\n\n        parent::renderView();\n    }","label":0}
{"text":"func (plugin *azureDataDiskPlugin) NewAttacher() (volume.Attacher, error) {\n\tazure, err := getCloud(plugin.host)\n\tif err != nil {\n\t\tklog.Errorf(\"failed to get azure cloud in NewAttacher, plugin.host : %s, err:%v\", plugin.host.GetHostName(), err)\n\t\treturn nil, err\n\t}\n\n\treturn &azureDiskAttacher{\n\t\tplugin: plugin,\n\t\tcloud:  azure,\n\t}, nil\n}","label":0}
{"text":"def _get_friends_count(session, user_id):\n        \n        response = session.fetch('friends.get', user_id=user_id, count=1)\n        return response[\"count\"]","label":0}
{"text":"public function onSinglePageLoaded(array &$pageData)\n    {\n        if (!isset($pageData['content'])) {\n            $pageData['content'] = $this->prepareFileContent($pageData['raw_content'], $pageData['meta']);\n            $pageData['content'] = $this->parseFileContent($pageData['content']);\n        }\n    }","label":0}
{"text":"public static function getItemDescriptionByKey($itemKey)\n    {\n        $itemKey = strtoupper($itemKey);\n        if (isset(self::$availableItemKeysList[$itemKey])) {\n            return self::$availableItemKeysList[$itemKey];\n        } else {\n            return false;\n        }\n    }","label":0}
{"text":"function (\n        builderOpt, areaSelectStyle, axisModel, coordSysModel, areaWidth, api\n    ) {\n        \/\/ After filtering, axis may change, select area needs to be update.\n        var extent = axisModel.axis.getExtent();\n        var extentLen = extent[1] - extent[0];\n        var extra = Math.min(30, Math.abs(extentLen) * 0.1); \/\/ Arbitrary value.\n\n        \/\/ width\/height might be negative, which will be\n        \/\/ normalized in BoundingRect.\n        var rect = graphic.BoundingRect.create({\n            x: extent[0],\n            y: -areaWidth \/ 2,\n            width: extentLen,\n            height: areaWidth\n        });\n        rect.x -= extra;\n        rect.width += 2 * extra;\n\n        this._brushController\n            .mount({\n                enableGlobalPan: true,\n                rotation: builderOpt.rotation,\n                position: builderOpt.position\n            })\n            .setPanels([{\n                panelId: 'pl',\n                clipPath: brushHelper.makeRectPanelClipPath(rect),\n                isTargetByCursor: brushHelper.makeRectIsTargetByCursor(rect, api, coordSysModel),\n                getLinearBrushOtherExtent: brushHelper.makeLinearBrushOtherExtent(rect, 0)\n            }])\n            .enableBrush({\n                brushType: 'lineX',\n                brushStyle: areaSelectStyle,\n                removeOnClick: true\n            })\n            .updateCovers(getCoverInfoList(axisModel));\n    }","label":0}
{"text":"public function getCardType() : ?string \n    {\n        if ( ! $this->hasCardType()) {\n            $this->setCardType($this->getDefaultCardType());\n        }\n        return $this->cardType;\n    }","label":0}
{"text":"function makeDoubleQuoted( literal ) {\n\tif ( ! literal || literal.length < 2 ) {\n\t\treturn undefined;\n\t}\n\n\t\/\/ double-quoted string\n\tif ( literal.charAt( 0 ) === '\"' ) {\n\t\treturn literal.replace( \/(\\\\)\/g, '\\\\$1' );\n\t}\n\n\t\/\/ single-quoted string\n\tif ( literal.charAt( 0 ) === '\\'' ) {\n\t\treturn '\"' + literal.substring( 1, literal.length - 1 ).replace( \/\\\\'\/g, '\\'' ).replace( \/(\\\\|\")\/g, '\\\\$1' ) + '\"';\n\t}\n\n\t\/\/ ES6 string\n\tif ( literal.charAt( 0 ) === '`' ) {\n\t\treturn '\"' + literal.substring( 1, literal.length - 1 ).replace( \/`\/g, '\\`' ).replace( \/(\\\\|\")\/g, '\\\\$1' ) + '\"';\n\t}\n\n\treturn \"\";\n}","label":0}
{"text":"func (site *installationSite) modifyConfig(cb func(cfg *installationSiteConfig) error) error {\n\tpath := filepath.Join(site.siteRoot, fs.SiteServiceDir, \"config.json\")\n\tc := installationSiteConfig{}\n\tif err := c.read(path); err != nil && !os.IsNotExist(err) {\n\t\treturn err\n\t}\n\tif err := cb(&c); err != nil {\n\t\treturn err\n\t}\n\t\/\/ Fix broken config that doesn't have ServiceURL set. It is required now.\n\tif c.ServiceURL == \"\" {\n\t\tc.ServiceURL = site.defaultServiceURL\n\t}\n\treturn c.write(path)\n}","label":0}
{"text":"def mark(x,y,label=None):\n\t\"\"\"\"\"\"\n\tif label is not None: \n\t    os.system(\"xpaset -p ds9 regions color red \")\n\t    cmd=\"echo 'image; text %d %d # text={%s}' | xpaset ds9 regions \" % ( x,y,label) \n\telse:\n\t    os.system(\"xpaset -p ds9 regions color blue\")\n\t    cmd=\"echo 'image; circle %d %d 10 ' | xpaset ds9 regions \" % (x,y)\n\tos.system(cmd)\n\treturn","label":0}
{"text":"public function validate(Message $message)\n    {\n        \/** @var Validator $validator *\/\n        foreach ($this->validators as $validator) {\n            $validator->validate($message);\n        }\n    }","label":0}
{"text":"public function processPayment()\n    {\n        $gestpayMethod = new GestpayMethod();\n\n        \/*\n         * At this point, order must be created given a cart, and placed in PaymentBridge.\n         *\n         * So, $this->paymentBridge->getOrder() must return an object\n         *\/\n        $this\n            ->paymentEventDispatcher\n            ->notifyPaymentOrderLoad(\n                $this->paymentBridge,\n                $gestpayMethod\n            );\n\n        \/*\n         * Order Not found Exception must be thrown just here.\n         *\/\n        if (!$this->paymentBridge->getOrder()) {\n            throw new PaymentOrderNotFoundException();\n        }\n\n        \/*\n         * Order exists right here.\n         *\/\n        $this\n            ->paymentEventDispatcher\n            ->notifyPaymentOrderCreated(\n                $this->paymentBridge,\n                $gestpayMethod\n            );\n\n        return $this->gestpayEncrypter->encryptedUrl();\n    }","label":0}
{"text":"func (o *GetTaskDetailsParams) WithHTTPClient(client *http.Client) *GetTaskDetailsParams {\n\to.SetHTTPClient(client)\n\treturn o\n}","label":0}
{"text":"def set_power!(state)\n      level = case state\n      when :on\n        1\n      when :off\n        0\n      else\n        raise ArgumentError.new(\"Must pass in either :on or :off\")\n      end\n      send_message!(Protocol::Device::SetPower.new(level: level), wait_for: Protocol::Device::StatePower) do |payload|\n        if level == 0\n          payload.level == 0\n        else\n          payload.level > 0\n        end\n      end\n      self\n    end","label":0}
{"text":"function (uvs) {\n            var clamp = true;\n\n            for (var i = 0, len = uvs.length; i < len; i++) {\n                if (uvs[i] < 0 || uvs[i] > 1) {\n                    clamp = false;\n                    break;\n                }\n            }\n\n            return clamp;\n        }","label":0}
{"text":"public function ban($statuses = array())\n    {\n        $identity = $this->getIdentity();\n\n        if (in_array($identity->getStatus(), $statuses)) {\n            return $this->block();\n        }\n\n    }","label":0}
{"text":"public function getCurrentPage($total = null)\n\t{\n\t\tif (is_null($total))\n\t\t{\n\t\t\treturn $this->currentPage;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn min($this->currentPage, (int) ceil($total \/ $this->perPage));\n\t\t}\n\t}","label":0}
{"text":"def pop(cls, anchors):\n        \n        for anchor in flattened(anchors, split=SANITIZED | UNIQUE):\n            if anchor in cls.paths:\n                cls.paths.remove(anchor)","label":0}
{"text":"def search_index_simple(self,index,key,search_term):\n        '''\n        \n        '''\n        request = self.session\n        url = 'http:\/\/%s:%s\/%s\/_search?q=%s:%s' % (self.host,self.port,index,key,search_term)\n        response = request.get(url)\n        return response","label":0}
{"text":"public function sendDelayedMessage(string $message, int $delay = 0)\n    {\n        $delay = max(0, $delay);\n        $delay = min(900, $delay);\n        $this->sqsClient->sendMessage([\n            'DelaySeconds' => $delay,\n            'MessageBody'  => $message,\n            'QueueUrl'     => $this->queueUrl,\n        ]);\n    }","label":0}
{"text":"func (c CurlyRouter) selectRoutes(ws *WebService, requestTokens []string) sortableCurlyRoutes {\n\tcandidates := make(sortableCurlyRoutes, 0, 8)\n\tfor _, each := range ws.routes {\n\t\tmatches, paramCount, staticCount := c.matchesRouteByPathTokens(each.pathParts, requestTokens)\n\t\tif matches {\n\t\t\tcandidates.add(curlyRoute{each, paramCount, staticCount}) \/\/ TODO make sure Routes() return pointers?\n\t\t}\n\t}\n\tsort.Sort(candidates)\n\treturn candidates\n}","label":0}
{"text":"public static boolean checkForInvalidInfoElements(final Document doc) {\n        final List<Node> invalidElements = XMLUtilities.getDirectChildNodes(doc.getDocumentElement(), \"title\", \"subtitle\", \"titleabbrev\");\n        return invalidElements != null && !invalidElements.isEmpty();\n    }","label":0}
{"text":"public AnnotationParameterValueList getParameterValues() {\n        if (annotationParamValuesWithDefaults == null) {\n            final ClassInfo classInfo = getClassInfo();\n            if (classInfo == null) {\n                \/\/ ClassInfo has not yet been set, just return values without defaults\n                \/\/ (happens when trying to log AnnotationInfo during scanning, before ScanResult is available)\n                return annotationParamValues == null ? AnnotationParameterValueList.EMPTY_LIST\n                        : annotationParamValues;\n            }\n\n            \/\/ Lazily convert any Object[] arrays of boxed types to primitive arrays\n            if (annotationParamValues != null && !annotationParamValuesHasBeenConvertedToPrimitive) {\n                annotationParamValues.convertWrapperArraysToPrimitiveArrays(classInfo);\n                annotationParamValuesHasBeenConvertedToPrimitive = true;\n            }\n            if (classInfo.annotationDefaultParamValues != null\n                    && !classInfo.annotationDefaultParamValuesHasBeenConvertedToPrimitive) {\n                classInfo.annotationDefaultParamValues.convertWrapperArraysToPrimitiveArrays(classInfo);\n                classInfo.annotationDefaultParamValuesHasBeenConvertedToPrimitive = true;\n            }\n\n            \/\/ Check if one or both of the defaults and the values in this annotation instance are null (empty)\n            final AnnotationParameterValueList defaultParamValues = classInfo.annotationDefaultParamValues;\n            if (defaultParamValues == null && annotationParamValues == null) {\n                return AnnotationParameterValueList.EMPTY_LIST;\n            } else if (defaultParamValues == null) {\n                return annotationParamValues;\n            } else if (annotationParamValues == null) {\n                return defaultParamValues;\n            }\n\n            \/\/ Overwrite defaults with non-defaults\n            final Map<String, Object> allParamValues = new HashMap<>();\n            for (final AnnotationParameterValue defaultParamValue : defaultParamValues) {\n                allParamValues.put(defaultParamValue.getName(), defaultParamValue.getValue());\n            }\n            for (final AnnotationParameterValue annotationParamValue : this.annotationParamValues) {\n                allParamValues.put(annotationParamValue.getName(), annotationParamValue.getValue());\n            }\n\n            \/\/ Put annotation values in the same order as the annotation methods (there is one method for each\n            \/\/ annotation constant)\n            if (classInfo.methodInfo == null) {\n                \/\/ Should not happen (when classfile is read, methods are always read, whether or not\n                \/\/ scanSpec.enableMethodInfo is true)\n                throw new IllegalArgumentException(\"Could not find methods for annotation \" + classInfo.getName());\n            }\n            annotationParamValuesWithDefaults = new AnnotationParameterValueList();\n            for (final MethodInfo mi : classInfo.methodInfo) {\n                final String paramName = mi.getName();\n                switch (paramName) {\n                \/\/ None of these method names should be present in the @interface class itself, it should only\n                \/\/ contain methods for the annotation constants (but skip them anyway to be safe). These methods\n                \/\/ should only exist in concrete instances of the annotation.\n                case \"<init>\":\n                case \"<clinit>\":\n                case \"hashCode\":\n                case \"equals\":\n                case \"toString\":\n                case \"annotationType\":\n                    \/\/ Skip\n                    break;\n                default:\n                    \/\/ Annotation constant\n                    final Object paramValue = allParamValues.get(paramName);\n                    \/\/ Annotation values cannot be null (or absent, from either defaults or annotation instance)\n                    if (paramValue != null) {\n                        annotationParamValuesWithDefaults.add(new AnnotationParameterValue(paramName, paramValue));\n                    }\n                    break;\n                }\n            }\n        }\n        return annotationParamValuesWithDefaults;\n    }","label":0}
{"text":"func (s *ListTagsForProjectOutput) SetTags(v map[string]*string) *ListTagsForProjectOutput {\n\ts.Tags = v\n\treturn s\n}","label":0}
{"text":"public function get_data($key=null) {\n\t\tif (! $this->is_phone()) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (\\is_string($key)) {\n\t\t\t$key = \\strtolower($key);\n\t\t\treturn $this->phone[$key] ?? false;\n\t\t}\n\n\t\treturn $this->phone;\n\t}","label":0}
{"text":"private static int compare(Treenode item1, Treenode item2) {\n        String label1 = item1.getLabel();\n        String label2 = item2.getLabel();\n        return label1 == label2 ? 0 : label1 == null ? -1 : label2 == null ? -1 : label1.compareToIgnoreCase(label2);\n    }","label":0}
{"text":"@Override\n    public void deleteDurableSubscription(String subscriptionName,\n                                          String durableSubscriptionHome,\n                                          String alternateUser)\n\n                    throws SIConnectionUnavailableException, SIConnectionDroppedException,\n                    SIResourceException, SIConnectionLostException,\n                    SIErrorException,\n                    SINotAuthorizedException,\n                    SIIncorrectCallException,\n                    SIDurableSubscriptionNotFoundException,\n                    SIDestinationLockedException\n    {\n\n        \/\/liberty code change : chetan\n        \/\/Since there is no ME-ME communication the durableSubscriptionHome is always the local ME \n        durableSubscriptionHome = _messageProcessor.getMessagingEngineName();\n\n        if (TraceComponent.isAnyTracingEnabled() && CoreSPIConnection.tc.isEntryEnabled())\n            SibTr.entry(CoreSPIConnection.tc, \"deleteDurableSubscription\",\n                        new Object[] { this, subscriptionName, durableSubscriptionHome, alternateUser });\n\n        \/\/ Synchronize on the connection object, we don't want the connection closing\n        \/\/ while we try to delete the subscription.\n        synchronized (this)\n        {\n            SIBUuid8 durableHomeID =\n                            checkDurableSubscriptionInformation(subscriptionName,\n                                                                durableSubscriptionHome,\n                                                                null,\n                                                                false,\n                                                                false,\n                                                                true,\n                                                                false);\n\n            HashMap durableSubs = _destinationManager.getDurableSubscriptionsTable();\n\n            \/\/ Is durableHome local?\n            if (durableHomeID.equals(_messageProcessor.getMessagingEngineUuid()))\n            {\n                \/\/ Yes, then there should be an existing consumer dispatcher which we'll\n                \/\/ invoke directly\n                synchronized (durableSubs)\n                {\n                    \/\/Look up the consumer dispatcher for this subId in the system durable subs list\n                    ConsumerDispatcher cd =\n                                    (ConsumerDispatcher) durableSubs.get(subscriptionName);\n\n                    \/\/ Check that the durable subscription existed\n                    if (cd == null)\n                    {\n                        if (TraceComponent.isAnyTracingEnabled() && CoreSPIConnection.tc.isEntryEnabled())\n                            SibTr.exit(CoreSPIConnection.tc, \"deleteDurableSubscription\");\n\n                        throw new SIDurableSubscriptionNotFoundException(\n                                        nls.getFormattedMessage(\n                                                                \"SUBSCRIPTION_DOESNT_EXIST_ERROR_CWSIP0072\",\n                                                                new Object[] { subscriptionName,\n                                                                              _messageProcessor.getMessagingEngineName() },\n                                                                null));\n                    }\n\n                    \/\/Obtain the destination from the consumer dispatcher\n                    DestinationHandler destination = cd.getDestination();\n\n                    \/\/ Check that the destination is a TopicSpace\n                    if (!destination.isPubSub())\n                    {\n                        if (TraceComponent.isAnyTracingEnabled() && CoreSPIConnection.tc.isEntryEnabled())\n                            SibTr.exit(CoreSPIConnection.tc, \"deleteDurableSubscription\", \"SIDestinationWrongTypeException\");\n\n                        SibTr.error(tc, \"INTERNAL_MESSAGING_ERROR_CWSIP0001\",\n                                    new Object[] {\n                                                  \"com.ibm.ws.sib.processor.impl.ConnectionImpl\",\n                                                  \"1:2759:1.347.1.25\" });\n\n                        throw new SIErrorException(\n                                        nls.getFormattedMessage(\n                                                                \"INTERNAL_MESSAGING_ERROR_CWSIP0001\",\n                                                                new Object[] { \"ConnectionImpl\",\n                                                                              \"1:2765:1.347.1.25\" },\n                                                                null));\n                    }\n\n                    \/\/ decalre variables used in security checks\n                    AuthUtils sibAuthUtils = _messageProcessor.getAuthorisationUtils();\n                    String topicName = null;\n                    String topicSpaceName = null;\n                    String theUser = null;\n\n                    \/\/ If security is disabled then we'll bypass the check\n                    if (_isBusSecure)\n                    {\n                        \/\/ get the consumer dispatcher state from the consumer dispatcher\n                        ConsumerDispatcherState subState = cd.getConsumerDispatcherState();\n\n                        topicName = subState.getTopic();\n                        topicSpaceName = subState.getTopicSpaceName();\n\n                        \/\/ Check that the user who is attempting to delete this durable subscription\n                        \/\/ matches that set in the CD state when the subscription was created           \n                        boolean isPriv = false;\n                        if (alternateUser == null)\n                        {\n                            theUser = getResolvedUserid();\n                            isPriv = isSIBServerSubject();\n                        }\n                        else\n                        {\n                            theUser = alternateUser;\n                        }\n\n                        boolean userMatch = subState.equalUser(theUser, isPriv);\n\n                        \/\/ Throw not auth exception if the user who is trying to delete the durable\n                        \/\/ subscription isn't the same user that created the subscription\n                        if (!userMatch)\n                        {\n                            \/\/ ensure that a security audit event takes place for this authorization failure\n                            sibAuthUtils.deleteDurSubAuthorizationFailed(theUser, topicName, topicSpaceName, 0L);\n\n                            \/\/ trace the exception\n                            if (TraceComponent.isAnyTracingEnabled() && CoreSPIConnection.tc.isEntryEnabled())\n                                SibTr.exit(CoreSPIConnection.tc, \"deleteDurableSubscription\", \"SINotAuthorizedException\");\n\n                            \/\/ throw the exception\n                            throw new SINotAuthorizedException(\n                                            nls.getFormattedMessage(\n                                                                    \"USER_NOT_AUTH_DELETE_ERROR_CWSIP0311\",\n                                                                    new Object[] { theUser, subscriptionName, destination.getName() },\n                                                                    null));\n                        }\n                    }\n\n                    \/\/Call the deleteDurableSubscription method on the destination\n                    destination.deleteDurableSubscription(subscriptionName, durableSubscriptionHome);\n\n                    if (_isBusSecure)\n                    {\n                        \/\/ ensure that a security audit event takes place for this successful dur sub delete\n                        sibAuthUtils.deleteDurSubAuthorizationPassed(theUser, topicName, topicSpaceName, 0L);\n                    }\n                }\n            }\n            else\n            {\n                \/\/ No, issue a remote request\n                DurableInputHandler.deleteRemoteDurableSub(_messageProcessor,\n                                                           subscriptionName,\n                                                           getResolvedUserid(),\n                                                           durableHomeID);\n            }\n        }\n\n        if (TraceComponent.isAnyTracingEnabled() && CoreSPIConnection.tc.isEntryEnabled())\n            SibTr.exit(CoreSPIConnection.tc, \"deleteDurableSubscription\");\n\n    }","label":0}
{"text":"public function onIndex()\n    {\n        $this->breadcrumbs->register(self::$name, function(Generator $breadcrumbs) {\n            $breadcrumbs->push('General Configuration');\n        });\n\n        $this->shareOnView(self::$name);\n    }","label":0}
{"text":"function includedFiles(name){\n    let includes=this.getIncludes(this.getFile(name));\n    let ret=includes.map(include => {\n        let ret = {\n            absolute:path.join(name,\"..\/\",include.relPath),\n            relative:include.relPath,\n            match:include.match\n        }\n        return ret;\n    })\n    return ret;\n}","label":0}
{"text":"public function cmdGetOrder()\n    {\n        $result = $this->getListOrder();\n        $this->outputFormat($result);\n        $this->outputFormatTableOrder($result);\n        $this->output();\n    }","label":0}
{"text":"public static long readUnsignedIntegerLittleEndian(InputStream io) throws IOException {\r\n\t\tlong value = io.read();\r\n\t\tif (value < 0) throw new EOFException();\r\n\t\tint i = io.read();\r\n\t\tif (i < 0) throw new EOFException();\r\n\t\tvalue |= i << 8;\r\n\t\ti = io.read();\r\n\t\tif (i < 0) throw new EOFException();\r\n\t\tvalue |= i << 16;\r\n\t\ti = io.read();\r\n\t\tif (i < 0) throw new EOFException();\r\n\t\tvalue |= ((long)i) << 24;\r\n\t\treturn value;\r\n\t}","label":0}
{"text":"def wrefs(self, index = None, recurse=True):\n        \n        targets =[]\n        self._helper_wrefs(targets, recurse)\n        if index is None:\n            return targets\n        else:\n            return targets[index]","label":0}
{"text":"function (control, element, key, path, twoWays, jq, vf, events) {\n\/*Line 8 - 'AtomBinding.js' *\/            this.element = element;\n\/*Line 9 - 'AtomBinding.js' *\/            this.control = control;\n\/*Line 10 - 'AtomBinding.js' *\/            this.vf = vf;\n\/*Line 11 - 'AtomBinding.js' *\/            this.key = key;\n\/*Line 12 - 'AtomBinding.js' *\/            this.events = events;\n\n\/*Line 14 - 'AtomBinding.js' *\/            if ($.isArray(path)) {\n\/*Line 15 - 'AtomBinding.js' *\/                this.pathList = [];\n\/*Line 16 - 'AtomBinding.js' *\/                this.path = [];\n\/*Line 17 - 'AtomBinding.js' *\/                var ae = new AtomEnumerator(path);\n\/*Line 18 - 'AtomBinding.js' *\/                while (ae.next()) {\n\/*Line 19 - 'AtomBinding.js' *\/                    var item = ae.current();\n\/*Line 20 - 'AtomBinding.js' *\/                    if (!$.isArray(item)) {\n\/*Line 21 - 'AtomBinding.js' *\/                        this.path.push({ path: item, value: null });\n\/*Line 22 - 'AtomBinding.js' *\/                        continue;\n\/*Line 23 - 'AtomBinding.js' *\/                    }\n\/*Line 24 - 'AtomBinding.js' *\/                    var pe = new AtomEnumerator(item);\n\/*Line 25 - 'AtomBinding.js' *\/                    var p = [];\n\/*Line 26 - 'AtomBinding.js' *\/                    while (pe.next()) {\n\/*Line 27 - 'AtomBinding.js' *\/                        p.push({ path: pe.current(), value: null });\n\/*Line 28 - 'AtomBinding.js' *\/                    }\n\/*Line 29 - 'AtomBinding.js' *\/                    this.pathList.push(p);\n\/*Line 30 - 'AtomBinding.js' *\/                }\n\/*Line 31 - 'AtomBinding.js' *\/                if (this.path.length) {\n\/*Line 32 - 'AtomBinding.js' *\/                    this.pathList = null;\n\/*Line 33 - 'AtomBinding.js' *\/                } else {\n\/*Line 34 - 'AtomBinding.js' *\/                    this.path = null;\n\/*Line 35 - 'AtomBinding.js' *\/                }\n\n\/*Line 37 - 'AtomBinding.js' *\/            } else {\n\/*Line 38 - 'AtomBinding.js' *\/                var ae = new AtomEnumerator(path.split(\".\"));\n\/*Line 39 - 'AtomBinding.js' *\/                this.path = [];\n\/*Line 40 - 'AtomBinding.js' *\/                while (ae.next()) {\n\/*Line 41 - 'AtomBinding.js' *\/                    this.path.push({ path: ae.current(), value: null });\n\/*Line 42 - 'AtomBinding.js' *\/                }\n\/*Line 43 - 'AtomBinding.js' *\/            }\n\/*Line 44 - 'AtomBinding.js' *\/            this.twoWays = twoWays;\n\/*Line 45 - 'AtomBinding.js' *\/            this.jq = jq;\n\/*Line 46 - 'AtomBinding.js' *\/            this._isUpdating = false;\n\/*Line 47 - 'AtomBinding.js' *\/        }","label":0}
{"text":"public function parent(): Place\n    {\n        return new self($this->parts->slice(1)->implode(Gedcom::PLACE_SEPARATOR), $this->tree);\n    }","label":0}
{"text":"function(data) {\n        if(typeof data == \"string\") { \n            data = OpenLayers.Format.XML.prototype.read.apply(this, [data]);\n        }\n        if(data && data.nodeType == 9) {\n            data = data.documentElement;\n        }\n        var features = [];\n        this.readNode(data, {features: features}, true);\n        if(features.length == 0) {\n            \/\/ look for gml:featureMember elements\n            var elements = this.getElementsByTagNameNS(\n                data, this.namespaces.gml, \"featureMember\"\n            );\n            if(elements.length) {\n                for(var i=0, len=elements.length; i<len; ++i) {\n                    this.readNode(elements[i], {features: features}, true);\n                }\n            } else {\n                \/\/ look for gml:featureMembers elements (this is v3, but does no harm here)\n                var elements = this.getElementsByTagNameNS(\n                    data, this.namespaces.gml, \"featureMembers\"\n                );\n                if(elements.length) {\n                    \/\/ there can be only one\n                    this.readNode(elements[0], {features: features}, true);\n                }\n            }\n        }\n        return features;\n    }","label":0}
{"text":"func (p *queryPlan) filterOnExistence(ctx context.Context, cls *semantic.GraphClause, lo *storage.LookupOptions) error {\n\tdata := p.tbl.Rows()\n\tp.tbl.Truncate()\n\tvar (\n\t\tgErr error\n\t\tmu   sync.RWMutex\n\t\twg   sync.WaitGroup\n\t)\n\tfor _, tmp := range data {\n\t\tmu.RLock()\n\t\tif gErr != nil {\n\t\t\t\/\/ Try to stop early if an error occurred and we are still ussuing requests.\n\t\t\tmu.RUnlock()\n\t\t\tbreak\n\t\t}\n\t\tmu.RUnlock()\n\t\twg.Add(1)\n\t\tgo func(r table.Row, cls semantic.GraphClause) {\n\t\t\tdefer wg.Done()\n\t\t\tsbj, prd, obj := cls.S, cls.P, cls.O\n\t\t\t\/\/ Attempt to rebind the subject.\n\t\t\tif sbj == nil && p.tbl.HasBinding(cls.SBinding) {\n\t\t\t\tv, ok := r[cls.SBinding]\n\t\t\t\tif !ok {\n\t\t\t\t\tmu.Lock()\n\t\t\t\t\tgErr = fmt.Errorf(\"row %+v misses binding %q\", r, cls.SBinding)\n\t\t\t\t\tmu.Unlock()\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tif v.N == nil {\n\t\t\t\t\tmu.Lock()\n\t\t\t\t\tgErr = fmt.Errorf(\"binding %q requires a node, got %+v instead\", cls.SBinding, v)\n\t\t\t\t\tmu.Unlock()\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tsbj = v.N\n\t\t\t}\n\t\t\tif sbj == nil && p.tbl.HasBinding(cls.SAlias) {\n\t\t\t\tv, ok := r[cls.SAlias]\n\t\t\t\tif !ok {\n\t\t\t\t\tmu.Lock()\n\t\t\t\t\tgErr = fmt.Errorf(\"row %+v misses binding %q\", r, cls.SAlias)\n\t\t\t\t\tmu.Unlock()\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tif v.N == nil {\n\t\t\t\t\tmu.Lock()\n\t\t\t\t\tgErr = fmt.Errorf(\"binding %q requires a node, got %+v instead\", cls.SAlias, v)\n\t\t\t\t\tmu.Unlock()\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tsbj = v.N\n\t\t\t}\n\t\t\t\/\/ Attempt to rebind the predicate.\n\t\t\tif prd == nil && p.tbl.HasBinding(cls.PBinding) {\n\t\t\t\tv, ok := r[cls.PBinding]\n\t\t\t\tif !ok {\n\t\t\t\t\tmu.Lock()\n\t\t\t\t\tgErr = fmt.Errorf(\"row %+v misses binding %q\", r, cls.PBinding)\n\t\t\t\t\tmu.Unlock()\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tif v.P == nil {\n\t\t\t\t\tmu.Lock()\n\t\t\t\t\tgErr = fmt.Errorf(\"binding %q requires a predicate, got %+v instead\", cls.PBinding, v)\n\t\t\t\t\tmu.Unlock()\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tprd = v.P\n\t\t\t}\n\t\t\tif prd == nil && p.tbl.HasBinding(cls.PAlias) {\n\t\t\t\tv, ok := r[cls.PAlias]\n\t\t\t\tif !ok {\n\t\t\t\t\tmu.Lock()\n\t\t\t\t\tgErr = fmt.Errorf(\"row %+v misses binding %q\", r, cls.SAlias)\n\t\t\t\t\tmu.Unlock()\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tif v.N == nil {\n\t\t\t\t\tmu.Lock()\n\t\t\t\t\tgErr = fmt.Errorf(\"binding %q requires a predicate, got %+v instead\", cls.SAlias, v)\n\t\t\t\t\tmu.Unlock()\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tprd = v.P\n\t\t\t}\n\t\t\t\/\/ Attempt to rebind the object.\n\t\t\tif obj == nil && p.tbl.HasBinding(cls.OBinding) {\n\t\t\t\tv, ok := r[cls.OBinding]\n\t\t\t\tif !ok {\n\t\t\t\t\tmu.Lock()\n\t\t\t\t\tgErr = fmt.Errorf(\"row %+v misses binding %q\", r, cls.OBinding)\n\t\t\t\t\tmu.Unlock()\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tco, err := cellToObject(v)\n\t\t\t\tif err != nil {\n\t\t\t\t\tmu.Lock()\n\t\t\t\t\tgErr = err\n\t\t\t\t\tmu.Unlock()\n\t\t\t\t}\n\t\t\t\tobj = co\n\t\t\t}\n\t\t\tif obj == nil && p.tbl.HasBinding(cls.OAlias) {\n\t\t\t\tv, ok := r[cls.OAlias]\n\t\t\t\tif !ok {\n\t\t\t\t\tmu.Unlock()\n\t\t\t\t\tgErr = fmt.Errorf(\"row %+v misses binding %q\", r, cls.OAlias)\n\t\t\t\t\tmu.Unlock()\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tif v.N == nil {\n\t\t\t\t\tmu.Lock()\n\t\t\t\t\tgErr = fmt.Errorf(\"binding %q requires a object, got %+v instead\", cls.OAlias, v)\n\t\t\t\t\tmu.Unlock()\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tco, err := cellToObject(v)\n\t\t\t\tif err != nil {\n\t\t\t\t\tmu.Lock()\n\t\t\t\t\tgErr = err\n\t\t\t\t\tmu.Unlock()\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tobj = co\n\t\t\t}\n\t\t\t\/\/ Attempt to filter.\n\t\t\tif sbj == nil || prd == nil || obj == nil {\n\t\t\t\tmu.Lock()\n\t\t\t\tgErr = fmt.Errorf(\"failed to fully specify clause %v for row %+v\", cls, r)\n\t\t\t\tmu.Unlock()\n\t\t\t\treturn\n\t\t\t}\n\t\t\texist := false\n\t\t\tfor _, g := range p.stm.InputGraphs() {\n\t\t\t\tt, err := triple.New(sbj, prd, obj)\n\t\t\t\tif err != nil {\n\t\t\t\t\tmu.Lock()\n\t\t\t\t\tgErr = err\n\t\t\t\t\tmu.Unlock()\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tb, err := g.Exist(ctx, t)\n\t\t\t\tif err != nil {\n\t\t\t\t\tmu.Lock()\n\t\t\t\t\tgErr = err\n\t\t\t\t\tmu.Unlock()\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\texist = exist || b\n\t\t\t\tif exist {\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t\tif exist {\n\t\t\t\tp.tbl.AddRow(r)\n\t\t\t}\n\t\t}(tmp, *cls)\n\t}\n\twg.Wait()\n\treturn gErr\n}","label":0}
{"text":"def check_return_types(self, method):\n        ''''''\n        mn = method.__name__\n        retanno = method.__annotations__.get('return', None)\n        # Take a look at the syntax\n        if not retanno:\n            return ['Missing return types for method \"{}\"'.format(mn)]\n        if not isinstance(retanno, (list, tuple)):\n            msg = 'Return annotation for method \"{}\" not tuple nor list'\n            return [msg.format(mn)]\n        if (any(map(lambda t: not isinstance(t, (list, tuple)), retanno)) or\n                any(map(lambda t: not (2 <= len(t) <= 3), retanno))):\n            msg = ('Return values series for \"{}\" should be composed of '\n                   '2 or 3-items tuples (code, msg, type).')\n            return [msg.format(mn)]\n        errors = []\n        # Take a look at the codes\n        declared = set([t[0] for t in retanno])\n        actual = set(int(s)\n                     for s in HTTP_STATUSES_REGEX.findall(method.source))\n        if declared != actual:\n            if declared.issubset(actual):\n                msg = 'Method {} returns undeclared codes: {}.'\n                errors.append(msg.format(mn, actual - declared))\n            elif actual.issubset(declared):\n                msg = 'Method {} declares codes {} that are never used.'\n                errors.append(msg.format(mn, declared - actual))\n            else:\n                msg = 'Declared {} and Used {} codes mismatch.'\n                errors.append(msg.format(declared, actual))\n        # Take a look at the types\n        ret_with_types = filter(lambda t: len(t) == 3, retanno)\n        msg = 'Method {} return type for code {} must be class (not instance).'\n        msg_mod = 'Method {} return type for code {} must subclass from Model.'\n        for code, _, type_ in ret_with_types:\n            try:\n                if Model not in type_.__bases__:\n                    errors.append(msg_mod.format(mn, code))\n            except AttributeError:\n                errors.append(msg.format(mn, code))\n        return errors","label":0}
{"text":"private void skipToEnd()\n        throws IOException\n    {\n        InputStream is = getInputStream();\n\n        if (is == null)\n            return;\n\n        if (chunkLength > 0)\n            is.skip(chunkLength);\n\n        for (int tag = is.read(); tag >= 0; tag = is.read()) {\n            switch (tag) {\n                case 'Y':\n                    server.freeReadLock();\n                    this.is = is = server.readChannel(channel);\n                    if (is == null) {\n                        this.server = null;\n                        return;\n                    }\n                    break;\n\n                case 'Q':\n                    server.freeReadLock();\n                    this.is = null;\n                    this.server = null;\n                    return;\n\n                case -1:\n                    server.freeReadLock();\n                    this.is = null;\n                    this.server = null;\n                    return;\n\n                default:\n                    int length = (is.read() << 8) + is.read();\n                    is.skip(length);\n                    break;\n            }\n        }\n    }","label":0}
{"text":"protected final void invokeOnLayout(View view, boolean changed, int l, int t, int r, int b) {\n        final ViewProxy proxy = (ViewProxy) view;\n        proxy.invokeOnLayout(changed, l, t, r, b);\n    }","label":0}
{"text":"public void writeLock(EntityKey key, int timeout) {\n\t\tReadWriteLock lock = getLock( key );\n\t\tLock writeLock = lock.writeLock();\n\t\tacquireLock( key, timeout, writeLock );\n\t}","label":0}
{"text":"protected function callSelector($key)\n    {\n        foreach ($this->selectors as $selector => $callback) {\n            $regex = '\/' . $selector . '\/i';\n            if (preg_match($regex, $key, $matches)) {\n                return call_user_func_array($callback, array($this, $key, $matches));\n            }\n        }\n\n        throw new Exception\\Index('Unknown index: ' . $key);\n    }","label":0}
{"text":"def write_yaml_model(model, dest='.', convert_exchange=True,\n                     split_subsystem=True):\n    \n    yaml.SafeDumper.add_representer(OrderedDict, _dict_representer)\n    yaml.SafeDumper.add_representer(set, _set_representer)\n    yaml.SafeDumper.add_representer(frozenset, _set_representer)\n    yaml.SafeDumper.add_representer(\n        boolean.Expression, _boolean_expression_representer)\n    yaml.SafeDumper.add_representer(Decimal, _decimal_representer)\n\n    yaml.SafeDumper.ignore_aliases = lambda *args: True\n\n    yaml.add_constructor(yaml.resolver.BaseResolver.DEFAULT_MAPPING_TAG,\n                         _dict_constructor)\n\n    yaml_args = {'default_flow_style': False,\n                 'encoding': 'utf-8',\n                 'allow_unicode': True,\n                 'width': 79}\n\n    # The ModelWriter from PSAMM is not yet able to write the full model but\n    # only reactions and compounds.\n    writer = ModelWriter()\n\n    with open(os.path.join(dest, 'compounds.yaml'), 'w+') as f:\n        writer.write_compounds(f, sorted(model.compounds, key=lambda c: c.id))\n\n    if model.default_flux_limit is None:\n        model.default_flux_limit = detect_best_flux_limit(model)\n\n    if model.extracellular_compartment is None:\n        model.extracellular_compartment = (\n            sbml.detect_extracellular_compartment(model))\n\n    if model.default_compartment is None:\n        model.default_compartment = get_default_compartment(model)\n\n    if model.default_flux_limit is not None:\n        logger.info('Using default flux limit of {}'.format(\n            model.default_flux_limit))\n\n    if convert_exchange:\n        logger.info('Converting exchange reactions to exchange file')\n        sbml.convert_exchange_to_compounds(model)\n\n    if len(model.compartments) == 0:\n        infer_compartment_entries(model)\n        logger.info('Inferred {} compartments: {}'.format(\n            len(model.compartments),\n            ', '.join(c.id for c in model.compartments)))\n\n    if len(model.compartments) != 0 and len(model.compartment_boundaries) == 0:\n        infer_compartment_adjacency(model)\n\n    reaction_files = reactions_to_files(model, dest, writer, split_subsystem)\n\n    if len(model.exchange) > 0:\n        with open(os.path.join(dest, 'exchange.yaml'), 'w+') as f:\n            yaml.safe_dump(model_exchange(model), f, **yaml_args)\n\n    reaction_limits = list(model_reaction_limits(model))\n    if len(reaction_limits) > 0:\n        with open(os.path.join(dest, 'limits.yaml'), 'w+') as f:\n            yaml.safe_dump(reaction_limits, f, **yaml_args)\n\n    model_d = OrderedDict()\n    if model.name is not None:\n        model_d['name'] = model.name\n\n    if model.biomass_reaction is not None:\n        model_d['biomass'] = model.biomass_reaction\n    if model.default_flux_limit is not None:\n        model_d['default_flux_limit'] = model.default_flux_limit\n    if model.extracellular_compartment != 'e':\n        model_d['extracellular'] = model.extracellular_compartment\n    if model.default_compartment != 'c':\n        model_d['default_compartment'] = model.default_compartment\n\n    if len(model.compartments) > 0:\n        adjacency = {}\n        for c1, c2 in model.compartment_boundaries:\n            adjacency.setdefault(c1, set()).add(c2)\n            adjacency.setdefault(c2, set()).add(c1)\n\n        compartment_list = []\n        for compartment in sorted(model.compartments, key=lambda c: c.id):\n            adjacent = adjacency.get(compartment.id)\n            if adjacent is not None and len(adjacent) == 1:\n                adjacent = next(iter(adjacent))\n            compartment_list.append(writer.convert_compartment_entry(\n                compartment, adjacent))\n\n        model_d['compartments'] = compartment_list\n\n    model_d['compounds'] = [{'include': 'compounds.yaml'}]\n    model_d['reactions'] = []\n    for reaction_file in reaction_files:\n        model_d['reactions'].append({'include': reaction_file})\n\n    if len(model.exchange) > 0:\n        model_d['exchange'] = [{'include': 'exchange.yaml'}]\n\n    if len(reaction_limits) > 0:\n        model_d['limits'] = [{'include': 'limits.yaml'}]\n\n    with open(os.path.join(dest, 'model.yaml'), 'w+') as f:\n        yaml.safe_dump(model_d, f, **yaml_args)","label":0}
{"text":"public String getFirstSentence(String paragraph) {\n\n        if (paragraph == null || paragraph.length() == 0) {\n            return \"\";\n        }\n\n        BreakIterator sentenceBreaks = BreakIterator.getSentenceInstance();\n        sentenceBreaks.setText(paragraph);\n        int start = sentenceBreaks.first();\n        int end = sentenceBreaks.next();\n\n        String sentence = paragraph;\n        \n        if (start >= 0 && end <= paragraph.length()) {\n            sentence = paragraph.substring(start, end);\n        }\n\n        return sentence.trim();\n    }","label":0}
{"text":"func (s *AcceptCertificateTransferInput) SetCertificateId(v string) *AcceptCertificateTransferInput {\n\ts.CertificateId = &v\n\treturn s\n}","label":0}
{"text":"protected function _afterSave(\\Magento\\Framework\\Model\\AbstractModel $object)\n    {\n        parent::_afterSave($object);\n\n        $this->saveStoreRelation($object);\n        $this->saveTermsRelation($object);\n\n        return $this;\n    }","label":0}
{"text":"def backup(self, paths=None):\n        \"\"\"\"\"\"\n        if not paths:\n            paths = self._get_paths()\n\n        try:\n            self._backup_compresslevel(paths)\n        except TypeError:\n            try:\n                self._backup_pb_gui(paths)\n            except ImportError:\n                self._backup_pb_tqdm(paths)\n\n        # Delete source if specified\n        if self.delete_source:\n            shutil.rmtree(self.source)\n        return self.zip_filename","label":0}
{"text":"def _writeSuperLinks(self, superLinks, fileObject):\n        \n        for slink in superLinks:\n            fileObject.write('SLINK   %s      %s\\n' % (\n                slink.slinkNumber,\n                slink.numPipes))\n\n            for node in slink.superNodes:\n                fileObject.write('NODE  %s  %.2f  %.2f  %.6f  %s  %s  %s  %.6f  %.6f\\n' % (\n                    node.nodeNumber,\n                    node.groundSurfaceElev,\n                    node.invertElev,\n                    node.manholeSA,\n                    node.nodeInletCode,\n                    node.cellI,\n                    node.cellJ,\n                    node.weirSideLength,\n                    node.orificeDiameter))\n            for pipe in slink.pipes:\n                fileObject.write('PIPE  %s  %s  %.6f  %.6f  %.6f  %.6f  %.2f  %.6f  %.6f\\n' % (\n                    pipe.pipeNumber,\n                    pipe.xSecType,\n                    pipe.diameterOrHeight,\n                    pipe.width,\n                    pipe.slope,\n                    pipe.roughness,\n                    pipe.length,\n                    pipe.conductance,\n                    pipe.drainSpacing))","label":0}
{"text":"private function parseOption(array $item) : Option\n    {\n        $name = $item['option'];\n\n        $characteristic = $item['characteristic'] ?? null;\n\n        if (isset($characteristic))\n        {\n            $characteristic = self::optionCharacteristic($characteristic);\n        }\n\n        $type = $item['type'] ?? null;\n\n        $default = $item['default'] ?? null;\n\n        $description = $item['description'] ?? null;\n\n        $fixedName = $item['name'] ?? null;\n\n        $option = new Option($name, $characteristic, $type, $default);\n\n        if (isset($description))\n        {\n            $option->setDescription($description);\n        }\n\n        if (isset($fixedName))\n        {\n            if ($fixedName[0] === '-')\n            {\n                throw new OptionLoaderException(\n                    \"An option's fixed name may not start with a `-`.\",\n                    $item\n                );\n            }\n\n            $option->setFixedName($fixedName);\n        }\n\n        if (isset($item['aliases']))\n        {\n            foreach ($item['aliases'] as $alias)\n            {\n                $aliasCharacteristic = $alias['characteristic'] ?? null;\n\n                if (isset($aliasCharacteristic))\n                {\n                    $aliasCharacteristic = self::optionCharacteristic(\n                        $aliasCharacteristic\n                    );\n                }\n\n                $aliasName = $alias['option'] ?? null;\n\n                if ( ! isset($aliasName))\n                {\n                    throw new OptionLoaderException(\n                        \"An alias must contain its own option name.\",\n                        $alias\n                    );\n                }\n\n                new AliasOption($aliasName, $aliasCharacteristic, $option);\n            }\n        }\n\n        if (isset($fixedName))\n        {\n            $this->optionCatalogue[$fixedName] = $option;\n        }\n\n        $this->optionCatalogue[$option->getPrintableName()] = $option;\n\n        return $option;\n    }","label":0}
{"text":"func (o *IntOptions) Validate(n models.ConfigurationMap) error {\n\to.optsMU.RLock()\n\tdefer o.optsMU.RUnlock()\n\tfor k, v := range n {\n\t\t_, newVal, err := ParseKeyValue(o.Library, k, v)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\t\/\/ Ignore validation if value is identical\n\t\tif oldVal, ok := o.Opts[k]; ok && oldVal == newVal {\n\t\t\tcontinue\n\t\t}\n\n\t\tif err := o.Library.Validate(k, v); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\treturn nil\n}","label":0}
{"text":"def engine_data(engine):\n    \n    views = (\"default\", \"main\", \"started\", \"stopped\", \"complete\",\n             \"incomplete\", \"seeding\", \"leeching\", \"active\", \"messages\")\n    methods = [\n        \"throttle.global_up.rate\", \"throttle.global_up.max_rate\",\n        \"throttle.global_down.rate\", \"throttle.global_down.max_rate\",\n    ]\n\n    # Get data via multicall\n    proxy = engine.open()\n    calls = [dict(methodName=method, params=[]) for method in methods] \\\n          + [dict(methodName=\"view.size\", params=['', view]) for view in views]\n    result = proxy.system.multicall(calls, flatten=True)\n\n    # Build result object\n    data = dict(\n        now         = time.time(),\n        engine_id   = engine.engine_id,\n        versions    = engine.versions,\n        uptime      = engine.uptime,\n        upload      = [result[0], result[1]],\n        download    = [result[2], result[3]],\n        views       = dict([(name, result[4+i])\n            for i, name in enumerate(views)\n        ]),\n    )\n\n    return data","label":0}
{"text":"function () {\n            var axis = this,\n              chart = axis.chart,\n              key = axis._maxTicksKey,\n              tickPositions = axis.tickPositions,\n              maxTicks = chart.maxTicks;\n\n            if (maxTicks && maxTicks[key] && !axis.isDatetimeAxis && !axis.categories && !axis.isLinked &&\n              axis.options.alignTicks !== false && this.min !== UNDEFINED) {\n                var oldTickAmount = axis.tickAmount,\n                  calculatedTickAmount = tickPositions.length,\n                  tickAmount;\n\n                \/\/ set the axis-level tickAmount to use below\n                axis.tickAmount = tickAmount = maxTicks[key];\n\n                if (calculatedTickAmount < tickAmount) {\n                    while (tickPositions.length < tickAmount) {\n                        tickPositions.push(correctFloat(\n                          tickPositions[tickPositions.length - 1] + axis.tickInterval\n                        ));\n                    }\n                    axis.transA *= (calculatedTickAmount - 1) \/ (tickAmount - 1);\n                    axis.max = tickPositions[tickPositions.length - 1];\n\n                }\n                if (defined(oldTickAmount) && tickAmount !== oldTickAmount) {\n                    axis.isDirty = true;\n                }\n            }\n        }","label":0}
{"text":"public function editAction()\n    {\n        $model   = $this->getModel();\n        $data    = $model->loadFirst();\n\n        \/\/If we try to edit master, add an error message and reroute\n        if (isset($data['grl_name']) && $data['grl_name']=='master') {\n            $this->addMessage($this->_('Editing `master` is not allowed'));\n            $this->_reroute(array('action'=>'index'), true);\n        }\n\n        parent::editAction();\n    }","label":0}
{"text":"public SFTP auth(String username, String password) {\n        return username(username).password(password);\n    }","label":0}
{"text":"public boolean delete(String tableName, Record record) {\r\n\t\tString defaultPrimaryKey = config.dialect.getDefaultPrimaryKey();\r\n\t\tObject t = record.get(defaultPrimaryKey);\t\/\/ \u5f15\u5165\u4e2d\u95f4\u53d8\u91cf\u907f\u514d JDK 8 \u4f20\u53c2\u6709\u8bef\r\n\t\treturn deleteByIds(tableName, defaultPrimaryKey, t);\r\n\t}","label":0}
{"text":"public function GetActiveStartValue()\n    {\n        $sStartValue = false;\n        if (is_array($this->aActiveFilterData) && array_key_exists(self::URL_PARAMETER_FILTER_START_VALUE, $this->aActiveFilterData)) {\n            $sStartValue = $this->aActiveFilterData[self::URL_PARAMETER_FILTER_START_VALUE];\n        }\n\n        return $sStartValue;\n    }","label":0}
{"text":"public function setTemplate($tpl, $clearParams=true)\n    {\n        if ($clearParams) {\n            $this->clearParams();\n        }\n        $this->templateFile = $this->templatesPath.$tpl.'.tpl.php';\n    }","label":0}
{"text":"protected void writeMapEntry(String key, Object value, CharBuf buffer) {\n        buffer.addJsonFieldName(key, disableUnicodeEscaping);\n        writeObject(key, value, buffer);\n    }","label":0}
{"text":"public function data_preprocessing(&$defaultvalues) {\n        global $DB;\n\n        $ctx = null;\n        if ($this->current && $this->current->coursemodule) {\n            $cm = get_coursemodule_from_instance('assign', $this->current->id, 0, false, MUST_EXIST);\n            $ctx = context_module::instance($cm->id);\n        }\n        $assignment = new assign($ctx, null, null);\n        if ($this->current && $this->current->course) {\n            if (!$ctx) {\n                $ctx = context_course::instance($this->current->course);\n            }\n            $course = $DB->get_record('course', array('id'=>$this->current->course), '*', MUST_EXIST);\n            $assignment->set_course($course);\n        }\n\n        $draftitemid = file_get_submitted_draft_itemid('introattachments');\n        file_prepare_draft_area($draftitemid, $ctx->id, 'mod_assign', ASSIGN_INTROATTACHMENT_FILEAREA,\n                                0, array('subdirs' => 0));\n        $defaultvalues['introattachments'] = $draftitemid;\n\n        $assignment->plugin_data_preprocessing($defaultvalues);\n    }","label":0}
{"text":"def regex_search(txt, rgx, ignorecase=False, multiline=False):\n    '''\n    \n    '''\n    flag = 0\n    if ignorecase:\n        flag |= re.I\n    if multiline:\n        flag |= re.M\n    obj = re.search(rgx, txt, flag)\n    if not obj:\n        return\n    return obj.groups()","label":0}
{"text":"def generate_direct_deps(self, target: Target):\n        \"\"\"\"\"\"\n        yield from (self.targets[dep_name] for dep_name in sorted(target.deps))","label":0}
{"text":"func (s Start) String() string {\n\treturn fmt.Sprintf(\"{StartTime:%v CommitmentWindowMsec:%v RevealWindowMsec:%v SlackMsec:%v CommitmentCompleteWindowMsec:%v}\",\n\t\ts.StartTime, s.CommitmentWindowMsec, s.RevealWindowMsec, s.SlackMsec, s.CommitmentWindowMsec)\n}","label":0}
{"text":"public <T> JsonReaderI<T> getMapper(Class<T> type) {\n\t\t\/\/ look for cached Mapper\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tJsonReaderI<T> map = (JsonReaderI<T>) cache.get(type);\n\t\tif (map != null)\n\t\t\treturn map;\n\t\t\/*\n\t\t * Special handle\n\t\t *\/\n\t\tif (type instanceof Class) {\n\t\t\tif (Map.class.isAssignableFrom(type))\n\t\t\t\tmap = new DefaultMapperCollection<T>(this, type);\n\t\t\telse if (List.class.isAssignableFrom(type))\n\t\t\t\tmap = new DefaultMapperCollection<T>(this, type);\n\t\t\tif (map != null) {\n\t\t\t\tcache.put(type, map);\n\t\t\t\treturn map;\n\t\t\t}\n\t\t}\n\n\t\tif (type.isArray())\n\t\t\tmap = new ArraysMapper.GenericMapper<T>(this, type);\n\t\telse if (List.class.isAssignableFrom(type))\n\t\t\tmap = new CollectionMapper.ListClass<T>(this, type);\n\t\telse if (Map.class.isAssignableFrom(type))\n\t\t\tmap = new CollectionMapper.MapClass<T>(this, type);\n\t\telse\n\t\t\t\/\/ use bean class\n\t\t\tmap = new BeansMapper.Bean<T>(this, type);\n\t\tcache.putIfAbsent(type, map);\n\t\treturn map;\n\t}","label":0}
{"text":"public function listen()\n    {\n        try {\n            $isVerificationRequest = $this->verifyServices();\n\n            if (! $isVerificationRequest) {\n                $this->fireDriverEvents();\n\n                if ($this->firedDriverEvents === false) {\n                    $this->loadActiveConversation();\n\n                    if ($this->loadedConversation === false) {\n                        $this->callMatchingMessages();\n                    }\n\n                    \/*\n                     * If the driver has a  \"messagesHandled\" method, call it.\n                     * This method can be used to trigger driver methods\n                     * once the messages are handles.\n                     *\/\n                    if (method_exists($this->getDriver(), 'messagesHandled')) {\n                        $this->getDriver()->messagesHandled();\n                    }\n                }\n\n                $this->firedDriverEvents = false;\n                $this->message = new IncomingMessage('', '', '');\n            }\n        } catch (\\Throwable $e) {\n            $this->exceptionHandler->handleException($e, $this);\n        }\n    }","label":0}
{"text":"func (s *GetDocumentOutput) SetDocumentFormat(v string) *GetDocumentOutput {\n\ts.DocumentFormat = &v\n\treturn s\n}","label":0}
{"text":"def index_data(request, id, repo=None):\n    '''\n    '''\n\n    # Ensure permission to this resource is allowed. Currently based on IP only.\n    if _permission_denied_check(request):\n        return HttpResponseForbidden('Access to this web service was denied.', content_type='text\/html')\n\n    if repo is None:\n        repo_opts = {}\n        # if credentials are specified via Basic Auth, use them for Fedora access\n        auth_info = request.META.get('HTTP_AUTHORIZATION', None)\n        basic = 'Basic '\n        if auth_info and auth_info.startswith(basic):\n            basic_info = auth_info[len(basic):]\n            basic_info_decoded = base64.b64decode(force_bytes(basic_info))\n            # NOTE: codecs.decode works everywhere but python 3.3. which\n            # complains about an unknown encoding\n            # basic_info_decoded = codecs.decode(force_bytes(basic_info), 'base64')\n            u, p = force_text(basic_info_decoded).split(':')\n            repo_opts.update({'username': u, 'password': p})\n\n        repo = TypeInferringRepository(**repo_opts)\n    try:\n        obj = repo.get_object(id)\n        return HttpResponse(json.dumps(obj.index_data()),\n                            content_type='application\/json')\n    except RequestFailed:\n        # for now, treat any failure getting the object from Fedora as a 404\n        # (could also potentially be a permission error)\n        raise Http404","label":0}
{"text":"func (d *AllocDir) BlockUntilExists(ctx context.Context, path string) (chan error, error) {\n\tif escapes, err := structs.PathEscapesAllocDir(\"\", path); err != nil {\n\t\treturn nil, fmt.Errorf(\"Failed to check if path escapes alloc directory: %v\", err)\n\t} else if escapes {\n\t\treturn nil, fmt.Errorf(\"Path escapes the alloc directory\")\n\t}\n\n\t\/\/ Get the path relative to the alloc directory\n\tp := filepath.Join(d.AllocDir, path)\n\twatcher := getFileWatcher(p)\n\treturnCh := make(chan error, 1)\n\tt := &tomb.Tomb{}\n\tgo func() {\n\t\t<-ctx.Done()\n\t\tt.Kill(nil)\n\t}()\n\tgo func() {\n\t\treturnCh <- watcher.BlockUntilExists(t)\n\t\tclose(returnCh)\n\t}()\n\treturn returnCh, nil\n}","label":0}
{"text":"func getRootDirInfo(rootDir string) (int64, int64, error) {\n\tcmd := exec.Command(\"df\", \"-k\", \"--output=size,used\", rootDir)\n\toutput, err := cmd.Output()\n\tif err != nil {\n\t\treturn 0, 0, err\n\t}\n\treturn parseInfo(string(output))\n}","label":0}
{"text":"def getfullnameof(mod, xtrapath=None):\n    \n    # Search sys.path first!\n    epath = sys.path + winutils.get_system_path()\n    if xtrapath is not None:\n        if type(xtrapath) == type(''):\n            epath.insert(0, xtrapath)\n        else:\n            epath = xtrapath + epath\n    for p in epath:\n        npth = os.path.join(p, mod)\n        if os.path.exists(npth):\n            return npth\n        # second try: lower case filename\n        for p in epath:\n            npth = os.path.join(p, mod.lower())\n            if os.path.exists(npth):\n                return npth\n    return ''","label":0}
{"text":"def _setue(self, i):\n        \n        if i < 0:\n            raise CreationError(\"Cannot use negative initialiser for unsigned \"\n                                \"exponential-Golomb.\")\n        if not i:\n            self._setbin_unsafe('1')\n            return\n        tmp = i + 1\n        leadingzeros = -1\n        while tmp > 0:\n            tmp >>= 1\n            leadingzeros += 1\n        remainingpart = i + 1 - (1 << leadingzeros)\n        binstring = '0' * leadingzeros + '1' + Bits(uint=remainingpart,\n                                                             length=leadingzeros).bin\n        self._setbin_unsafe(binstring)","label":0}
{"text":"function __createWaveform(options = {}) {\n        waveformDiv = document.createElement('div');\n        document.getElementsByTagName('body')[0].appendChild(waveformDiv);\n\n        wavesurfer = WaveSurfer.create(\n            Object.assign(\n                {\n                    container: waveformDiv\n                },\n                options\n            )\n        );\n        wavesurfer.load(TestHelpers.EXAMPLE_FILE_PATH);\n    }","label":0}
{"text":"def _load_physical_network_mappings(self, phys_net_vswitch_mappings):\n        \"\"\"\"\"\"\n        for mapping in phys_net_vswitch_mappings:\n            parts = mapping.split(':')\n            if len(parts) != 2:\n                LOG.debug('Invalid physical network mapping: %s', mapping)\n            else:\n                pattern = re.escape(parts[0].strip()).replace('\\\\*', '.*')\n                pattern = pattern + '$'\n                vswitch = parts[1].strip()\n                self._physical_network_mappings[pattern] = vswitch","label":0}
{"text":"def _tseitin(ex, auxvarname, auxvars=None):\n    \n    if isinstance(ex, Literal):\n        return ex, list()\n    else:\n        if auxvars is None:\n            auxvars = list()\n\n        lits = list()\n        constraints = list()\n        for x in ex.xs:\n            lit, subcons = _tseitin(x, auxvarname, auxvars)\n            lits.append(lit)\n            constraints.extend(subcons)\n\n        auxvarindex = len(auxvars)\n        auxvar = exprvar(auxvarname, auxvarindex)\n        auxvars.append(auxvar)\n\n        f = ASTOPS[ex.ASTOP](*lits)\n        constraints.append((auxvar, f))\n        return auxvar, constraints","label":0}
{"text":"func NewStateStore(config *StateStoreConfig) (*StateStore, error) {\n\t\/\/ Create the MemDB\n\tdb, err := memdb.NewMemDB(stateStoreSchema())\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"state store setup failed: %v\", err)\n\t}\n\n\t\/\/ Create the state store\n\ts := &StateStore{\n\t\tlogger:    config.Logger.Named(\"state_store\"),\n\t\tdb:        db,\n\t\tconfig:    config,\n\t\tabandonCh: make(chan struct{}),\n\t}\n\treturn s, nil\n}","label":0}
{"text":"public function setHeadId($headId)\n    {\n\n        if ($headId > 9.0) {\n            throw new \\InvalidArgumentException('invalid value for $headId when calling GetCharactersCharacterIdPlanetsPlanetIdOkExtractorDetailsHeads., must be smaller than or equal to 9.0.');\n        }\n        if ($headId < 0.0) {\n            throw new \\InvalidArgumentException('invalid value for $headId when calling GetCharactersCharacterIdPlanetsPlanetIdOkExtractorDetailsHeads., must be bigger than or equal to 0.0.');\n        }\n        $this->container['headId'] = $headId;\n\n        return $this;\n    }","label":0}
{"text":"def matching(self, packages):\n        \n        print(\"\\nNot found package with the name [ {0}{1}{2} ]. \"\n              \"Matching packages:\\nNOTE: Not dependenc\"\n              \"ies are resolved\\n\".format(self.meta.color[\"CYAN\"],\n                                          \"\".join(packages),\n                                          self.meta.color[\"ENDC\"]))","label":0}
{"text":"public function setLineEnd($value)\n    {\n        $this->_validateInt('LineEnd', $value);\n\n        if ($this->data['line_end'] === $value) {\n            return;\n        }\n\n        $this->data['line_end'] = $value;\n\n        $this->_setModified('line_end');\n    }","label":0}
{"text":"def get_parent_until(path):\n    \n    dirname = osp.dirname(path)\n    try:\n        mod = osp.basename(path)\n        mod = osp.splitext(mod)[0]\n        imp.find_module(mod, [dirname])\n    except ImportError:\n        return\n    items = [mod]\n    while 1:\n        items.append(osp.basename(dirname))\n        try:\n            dirname = osp.dirname(dirname)\n            imp.find_module('__init__', [dirname + os.sep])\n        except ImportError:\n            break\n    return '.'.join(reversed(items))","label":0}
{"text":"public function put(string $pattern, $stages): void\n    {\n        $pipeline = new HttpPipeline(RequestMethodInterface::METHOD_PUT, $this->prefix.$pattern, $this->routerStages);\n        $pipeline->pipe($stages);\n        $this->pipelineCollection->add($pipeline);\n    }","label":0}
{"text":"def find_next_intersection(edges, i, e)\n\t    for j in i..(edges.count-1)\n\t\te2 = edges[j][:edge]\n\t\tnext if !e2 || e.connected?(e2)\n\t\tintersection = e.intersection(e2)\n\t\treturn [intersection, j] if intersection\n\t    end\n\t    nil\n\tend","label":0}
{"text":"func (d *PCA9685) SetPwm(channel, onTime, offTime int) error {\n\tif err := d.setup(); err != nil {\n\t\treturn err\n\t}\n\n\tonTimeLowReg := byte(pwm0OnLowReg + (4 * channel))\n\n\tonTimeLow := byte(onTime & 0xFF)\n\tonTimeHigh := byte(onTime >> 8)\n\toffTimeLow := byte(offTime & 0xFF)\n\toffTimeHigh := byte(offTime >> 8)\n\n\tif err := d.Bus.WriteByteToReg(d.Addr, onTimeLowReg, onTimeLow); err != nil {\n\t\treturn err\n\t}\n\n\tglog.V(2).Infof(\"pca9685: writing on-time low [%#02x] to CHAN%v_ON_L reg [reg: %#02x]\", onTimeLow, channel, onTimeLowReg)\n\n\tonTimeHighReg := onTimeLowReg + 1\n\tif err := d.Bus.WriteByteToReg(d.Addr, onTimeHighReg, onTimeHigh); err != nil {\n\t\treturn err\n\t}\n\tglog.V(2).Infof(\"pca9685: writing on-time high [%#02x] to CHAN%v_ON_H reg [reg: %#02x]\", onTimeHigh, channel, onTimeHighReg)\n\n\toffTimeLowReg := onTimeHighReg + 1\n\tif err := d.Bus.WriteByteToReg(d.Addr, offTimeLowReg, offTimeLow); err != nil {\n\t\treturn err\n\t}\n\tglog.V(2).Infof(\"pca9685: writing off-time low [%#02x] to CHAN%v_OFF_L reg [reg: %#02x]\", offTimeLow, channel, offTimeLowReg)\n\n\toffTimeHighReg := offTimeLowReg + 1\n\tif err := d.Bus.WriteByteToReg(d.Addr, offTimeHighReg, offTimeHigh); err != nil {\n\t\treturn err\n\t}\n\tglog.V(2).Infof(\"pca9685: writing off-time high [%#02x] to CHAN%v_OFF_H reg [reg: %#02x]\", offTimeHigh, channel, offTimeHighReg)\n\n\treturn nil\n}","label":0}
{"text":"public IfcElementAssemblyTypeEnum createIfcElementAssemblyTypeEnumFromString(EDataType eDataType,\r\n\t\t\tString initialValue) {\r\n\t\tIfcElementAssemblyTypeEnum result = IfcElementAssemblyTypeEnum.get(initialValue);\r\n\t\tif (result == null)\r\n\t\t\tthrow new IllegalArgumentException(\r\n\t\t\t\t\t\"The value '\" + initialValue + \"' is not a valid enumerator of '\" + eDataType.getName() + \"'\");\r\n\t\treturn result;\r\n\t}","label":0}
{"text":"func (m *ParamSet) Pack() []byte {\n\tdata := new(bytes.Buffer)\n\tbinary.Write(data, binary.LittleEndian, m.PARAM_VALUE)\n\tbinary.Write(data, binary.LittleEndian, m.TARGET_SYSTEM)\n\tbinary.Write(data, binary.LittleEndian, m.TARGET_COMPONENT)\n\tbinary.Write(data, binary.LittleEndian, m.PARAM_ID)\n\tbinary.Write(data, binary.LittleEndian, m.PARAM_TYPE)\n\treturn data.Bytes()\n}","label":0}
{"text":"def add_default_argument(self, name, value_type, item_help, default=None):\n    \n    if value_type not in self.__restricted_default_types:\n      raise ArgumentException(\"Positional(default) argument couldn't have {} type\".format(value_type.__name__))\n\n    if self.__is_default_arg_flag_used and default is None:\n      raise ArgumentException(\"After defining first default Positional argument, rest should have default value too\".format(value_type.__name__))\n    elif default is not None:\n      self.__is_default_arg_flag_used = True\n\n      if not isinstance(default, value_type):\n        raise ArgumentException(\"Invalid default type for argument\".format(name))\n\n    self._default_args.append(ModuleArgumentItem(name, value_type, item_help, default=default))\n    return self","label":0}
{"text":"protected function getMessage($request, $exception)\n    {\n        $message = $this->getMessageForException($exception);\n\n        $message .= \"\\nRequest URL: \" . $request->getRequestTarget();\n        $referer = $request->getHeaderLine('Referer');\n        if ($referer) {\n            $message .= \"\\nReferer URL: \" . $referer;\n        }\n        $message .= \"\\n\\n\";\n\n        return $message;\n    }","label":0}
{"text":"protected function createControllerByClass($class, $args = [])\n    {\n        $controller = $this->getPrototype(\n                $class,\n                ['umi\\hmvc\\controller\\IController'],\n                function (IPrototype $prototype)\n                {\n                    $prototype->registerConstructorDependency(\n                    'umi\\hmvc\\model\\IModel',\n                    function ($concreteClassName) {\n                        if ($this->modelFactory) {\n                            return $this->modelFactory->createByClass($concreteClassName);\n                        }\n\n                        return null;\n                    }\n                );\n                }\n            )\n            ->createInstance($args);\n\n        if ($controller instanceof IModelAware) {\n            $controller->setModelFactory($this->modelFactory);\n        }\n\n        return $controller;\n    }","label":0}
{"text":"func GetRBDStatus(\n\tctx types.Context,\n\tpool, image *string) (map[string]interface{}, error) {\n\n\tcmd := exec.Command(\n\t\trbdCmd, \"status\", poolOpt, *pool, *image, formatOpt, jsonArg,\n\t)\n\tout, _, err := RunCommand(ctx, cmd)\n\tif err != nil {\n\t\treturn nil, goof.WithError(\"unable to get rbd status\", err)\n\t}\n\n\twatcherMap := map[string]interface{}{}\n\n\terr = json.Unmarshal(out, &watcherMap)\n\tif err != nil {\n\t\treturn nil, goof.WithError(\n\t\t\t\"Unable to parse rbd status\", err)\n\t}\n\n\treturn watcherMap, nil\n}","label":0}
{"text":"public static AlipayFundCouponOrderAppPayResponse fundCouponOrderAppPayToResponse(\n\t\t\tAlipayFundCouponOrderAppPayModel model) throws AlipayApiException {\n\t\tAlipayFundCouponOrderAppPayRequest request = new AlipayFundCouponOrderAppPayRequest();\n\t\trequest.setBizModel(model);\n\t\treturn AliPayApiConfigKit.getAliPayApiConfig().getAlipayClient().execute(request);\n\t}","label":0}
{"text":"public TransformTask setNumWriters(int numWriters) {\n    Preconditions.checkArgument(numWriters >= 0,\n        \"Invalid number of reducers: \" + numWriters);\n    if (numWriters == 0) {\n      noCompaction();\n    } else {\n      this.numWriters = numWriters;\n    }\n    return this;\n  }","label":0}
{"text":"def _filterDictToStr(self, filterDict):\n        \n        values = []\n        for key, vals in filterDict.items():\n            if key not in ('contentRating', 'label'):\n                raise BadRequest('Unknown filter key: %s', key)\n            values.append('%s=%s' % (key, '%2C'.join(vals)))\n        return '|'.join(values)","label":0}
{"text":"private String getIntfPropertyName(AptMethod method) {\n        String opName = method.getName();\n\n        int prefixIdx = 3;\n        if (opName.startsWith(\"is\"))\n            prefixIdx = 2;\n\n        if (opName.length() == prefixIdx + 1)\n            return \"\" + Character.toLowerCase(opName.charAt(prefixIdx));\n\n        return Character.toLowerCase(opName.charAt(prefixIdx)) + opName.substring(prefixIdx+1);\n    }","label":0}
{"text":"protected function checkUserAgent()\n\t{\n\t    if ( \\Environment::get('httpUserAgent') )  \n\t    {\n\t        $UserAgent = trim(\\Environment::get('httpUserAgent'));\n\t    } \n\t    else \n\t    {\n\t        return false; \/\/ Ohne Absender keine Suche\n\t    }\n\t    $arrUserAgents = explode(\",\", $this->banner_useragent);\n\t    if (strlen(trim($arrUserAgents[0])) == 0) \n\t    {\n\t        return false; \/\/ keine Angaben im Modul\n\t    }\n\t    array_walk($arrUserAgents, array('self','trimBannerArrayValue'));  \/\/ trim der array values\n\t    \/\/ grobe Suche\n\t    $CheckUserAgent = str_replace($arrUserAgents, '#', $UserAgent);\n\t    if ($UserAgent != $CheckUserAgent) \n\t    {   \/\/ es wurde ersetzt also was gefunden\n\t        \/\/DEBUG log_message('CheckUserAgent Filterung; Treffer!','Banner.log');\n\t        return true;\n\t    }\n\t    return false;\n\t}","label":0}
{"text":"def debug(self, on: bool = True) -> None:\n        \n        if on:\n            self.send_line(\"debug on\")\n        else:\n            self.send_line(\"debug off\")","label":0}
{"text":"def show_crit_window_err_messege(self, crit):\n        \n        dlg = wx.MessageDialog(\n            self, caption=\"Error:\", message=\"not a vaild value for statistic %s\\n ignoring value\" % crit, style=wx.OK)\n        result = self.show_dlg(dlg)\n        if result == wx.ID_OK:\n            dlg.Destroy()","label":0}
{"text":"public void addDependency(org.sonatype.aether.graph.Dependency aetherDep) {\n        Artifact artifact = aetherDep.getArtifact();\n\n        Dependency dependency = new Dependency();\n        dependency.setGroupId( artifact.getGroupId() );\n        dependency.setArtifactId( artifact.getArtifactId() );\n        dependency.setType( artifact.getExtension() );\n        dependency.setVersion( artifact.getVersion() );\n        dependency.setScope( aetherDep.getScope() );\n        addDependency( dependency );\n    }","label":0}
{"text":"def plotAccuracyDuringSensorimotorInference(resultsFig5B, title=\"\", yaxis=\"\"):\n  \n  # Read out results and get the ranges we want.\n  with open(resultsFig5B, \"rb\") as f:\n    results = cPickle.load(f)\n\n  objectRange = []\n  featureRange = []\n  for r in results:\n    if r[\"numObjects\"] not in objectRange: objectRange.append(r[\"numObjects\"])\n    if r[\"numFeatures\"] not in featureRange: featureRange.append(r[\"numFeatures\"])\n  objectRange.sort()\n  featureRange.sort()\n  print \"objectRange=\",objectRange\n  print \"featureRange=\",featureRange\n\n  ########################################################################\n  #\n  # Accumulate the TM accuracies for each condition in a list and compute mean\n  # and stdeviations\n  # For L2 we average across all feature ranges\n  accuracies = defaultdict(list)\n  l2Accuracies = defaultdict(list)\n  for r in results:\n    accuracies[(r[\"numObjects\"], r[\"numFeatures\"])].append(r[\"objectCorrectSparsityTM\"])\n    l2Accuracies[r[\"numObjects\"]].append(r[\"objectAccuracyL2\"])\n\n  # meanAccuracy[o,f] = accuracy of TM with o objects and f unique features.\n  meanAccuracy = numpy.zeros((max(objectRange)+1, max(featureRange) + 1))\n  stdev = numpy.zeros((max(objectRange)+1, max(featureRange) + 1))\n  meanL2Accuracy = numpy.zeros(max(objectRange)+1)\n  stdevL2 = numpy.zeros(max(objectRange)+1)\n  for o in objectRange:\n    for f in featureRange:\n      a = numpy.array(accuracies[(o, f)])\n      meanAccuracy[o, f] = 100.0*a.mean()\n      stdev[o, f] = 100.0*a.std()\n\n    # Accuracies for L2\n    a = numpy.array(l2Accuracies[o])\n    meanL2Accuracy[o] = 100.0*a.mean()\n    stdevL2[o] = 100.0*a.std()\n\n\n  # Create the plot.\n  plt.figure()\n  plotPath = os.path.join(os.path.dirname(os.path.realpath(__file__)),\n                          \"plots\", \"accuracy_during_sensorimotor_inference.pdf\")\n\n  # Plot each curve\n  legendList = []\n  colorList = ['r', 'b', 'g', 'm', 'c', 'k', 'y']\n\n  for i in range(len(featureRange)):\n    f = featureRange[i]\n    legendList.append('Sequence layer, feature pool size: {}'.format(f))\n    plt.errorbar(objectRange, meanAccuracy[objectRange, f],\n                 yerr=stdev[objectRange, f],\n                 color=colorList[i])\n\n  plt.errorbar(objectRange, meanL2Accuracy[objectRange],\n               yerr=stdevL2[objectRange],\n               color=colorList[len(featureRange)])\n  legendList.append('Sensorimotor layer')\n\n  # format\n  plt.legend(legendList, bbox_to_anchor=(0., 0.6, 1., .102), loc=\"right\", prop={'size':10})\n  plt.xlabel(\"Number of objects\")\n  plt.ylim(-10.0, 110.0)\n  plt.ylabel(yaxis)\n  plt.title(title)\n\n    # save\n  plt.savefig(plotPath)\n  plt.close()","label":0}
{"text":"protected function execute(InputInterface $input, OutputInterface $output)\n    {\n        $io = new SymfonyStyle($input, $output);\n        $aliasId = $input->getArgument('aliasId');\n        $limit = 20;\n\n        $objectManager = $this->getContainer()->get('object_manager');\n        $siteClass = $this->getContainer()->getParameter('open_orchestra_model.document.site.class');\n        $nodeClass = $this->getContainer()->getParameter('open_orchestra_model.document.node.class');\n\n        $site = $objectManager->getRepository($siteClass)\n            ->findOneBy(array(\n                'aliases.'.$aliasId => array('$exists' => true)\n                )\n            );\n\n        if($site instanceof $siteClass) {\n            $aliases = $site->getAliases();\n            if ($aliases->containsKey($aliasId)) {\n                $siteId = $site->getSiteId();\n                $language = $aliases[$aliasId]->getLanguage();\n                $lastAlias = true;\n                foreach ($aliases as $key => $alias) {\n                    if ($alias->getLanguage() == $language && $key != $aliasId) {\n                        $lastAlias = false;\n                    }\n                }\n            }\n\n            if ($lastAlias) {\n                $io->comment('Remove use references of nodes');\n\n                $deleteSiteTools = $this->getContainer()->get('open_orchestra_backoffice.command.orchestra_delete_site_tools');\n\n                $nodes = $objectManager->createQueryBuilder($nodeClass)\n                    ->field('siteId')->equals($siteId)\n                    ->field('language')->equals($language)\n                    ->getQuery()->execute();\n\n                $usedInNodes = $deleteSiteTools->findUsageReferenceInOtherSite($siteId, $nodes);\n                if (!empty($usedInNodes)) {\n                    $io->section('Usage of nodes in other sites');\n                    $deleteSiteTools->displayUsedReferences($io, $usedInNodes);\n                    throw new \\RuntimeException('You should remove usage of nodes before remove alias ' . $aliasId);\n                }\n\n                $count = count($nodes);\n\n                for ($skip = 0; $skip < $count; $skip += $limit) {\n                    $nodes = $objectManager->createQueryBuilder($nodeClass)\n                        ->field('siteId')->equals($siteId)\n                        ->field('language')->equals($language)\n                        ->sort('id', 'asc')\n                        ->skip($skip)\n                        ->limit($limit)\n                        ->getQuery()->execute();\n                    foreach ($nodes as $node) {\n                        $this->getContainer()->get('open_orchestra_backoffice.reference.manager')->removeReferencesToEntity($node);\n                    }\n                    $objectManager->clear();\n                }\n\n                $io->comment('Remove nodes');\n                $objectManager->createQueryBuilder($nodeClass)\n                    ->field('siteId')->equals($siteId)\n                    ->field('language')->equals($language)\n                    ->remove()->getQuery()->execute();\n            }\n\n            $site->removeAlias($aliases->get($aliasId));\n            $objectManager->persist($site);\n            $objectManager->flush();\n\n        }\n    }","label":0}
{"text":"def increment_for(obj)\n      # decide the time of event asap\n      ts = Time.now.ceil.to_i\n\n      if obj.class.ancestors.include?Cequel::Record\n        args = obj.key_attributes.collect { |k,v|  v.to_s }\n        cache_key = generate_key(ts, obj.class.name, *args)\n\n        val = Cequel::Record.redis.get(cache_key)\n        if val.nil?\n          val = 1\n        else\n          val = val.to_i + 1\n        end\n\n        ttl = (time_window + 1) * 60\n\n        # Update a sharded counter\n        Cequel::Record.redis.setex(cache_key, ttl, val)\n\n        # Optionally, update the index\n        index_key = generate_index_key(ts, obj.class.name, *args)\n        index_present = Cequel::Record.redis.get(index_key).try(:to_i)\n        if index_present != 1\n          Cequel::Record.redis.setex(index_key, ttl, 1)\n        end\n      end\n\n    end","label":0}
{"text":"public function logout()\n    {\n        $myConfig = \\OxidEsales\\Eshop\\Core\\Registry::getConfig();\n        $oUser = oxNew(\\OxidEsales\\Eshop\\Application\\Model\\User::class);\n\n        if ($oUser->logout()) {\n            $this->setLoginStatus(USER_LOGOUT);\n\n            \/\/ finalizing ..\n            $this->_afterLogout();\n\n            $this->resetPermissions();\n\n            if ($this->getParent()->isEnabledPrivateSales()) {\n                return 'account';\n            }\n\n            \/\/ redirecting if user logs out in SSL mode\n            if (\\OxidEsales\\Eshop\\Core\\Registry::getConfig()->getRequestParameter('redirect') && $myConfig->getConfigParam('sSSLShopURL')) {\n                \\OxidEsales\\Eshop\\Core\\Registry::getUtils()->redirect($this->_getLogoutLink());\n            }\n        }\n    }","label":0}
{"text":"public void activate()\n    {\n        String pidFile = System.getProperty(\"cassandra-pidfile\");\n\n        try\n        {\n            try\n            {\n                MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();\n                mbs.registerMBean(new StandardMBean(new NativeAccess(), NativeAccessMBean.class), new ObjectName(MBEAN_NAME));\n            }\n            catch (Exception e)\n            {\n                logger.error(\"error registering MBean {}\", MBEAN_NAME, e);\n                \/\/Allow the server to start even if the bean can't be registered\n            }\n            \n            setup();\n\n            if (pidFile != null)\n            {\n                new File(pidFile).deleteOnExit();\n            }\n\n            if (System.getProperty(\"cassandra-foreground\") == null)\n            {\n                System.out.close();\n                System.err.close();\n            }\n\n            start();\n        }\n        catch (Throwable e)\n        {\n            logger.error(\"Exception encountered during startup\", e);\n\n            \/\/ try to warn user on stdout too, if we haven't already detached\n            e.printStackTrace();\n            System.out.println(\"Exception encountered during startup: \" + e.getMessage());\n\n            System.exit(3);\n        }\n    }","label":0}
{"text":"func (l *Logger) SetLevel(lvl Level) {\n\tfor _, r := range l.Receivers {\n\t\tr.Level = lvl\n\t}\n}","label":0}
{"text":"def all_build_trains(app_id: nil, platform: 'ios')\n      platform = 'ios' if platform.nil?\n      r = request(:get, \"ra\/apps\/#{app_id}\/buildHistory?platform=#{platform}\")\n      handle_itc_response(r.body)\n    end","label":0}
{"text":"private static Iterable<List<Map.Entry<Symbol, File>>> splitToNChunks(\n      final ImmutableMap<Symbol, File> inputMap, int numChunks) {\n    checkArgument(numChunks > 0);\n    final List<Map.Entry<Symbol, File>> emptyChunk = ImmutableList.of();\n\n    if (inputMap.isEmpty()) {\n      return Collections.nCopies(numChunks, emptyChunk);\n    }\n\n    final int chunkSize = IntMath.divide(inputMap.size(), numChunks, RoundingMode.UP);\n    final ImmutableList<List<Map.Entry<Symbol, File>>> chunks =\n        ImmutableList.copyOf(splitToChunksOfFixedSize(inputMap, chunkSize));\n    if (chunks.size() == numChunks) {\n      return chunks;\n    } else {\n      \/\/ there weren't enough elements to make the desired number of chunks, so we need to\n      \/\/ pad with empty chunks\n      final int shortage = numChunks - chunks.size();\n      final List<List<Map.Entry<Symbol, File>>> padding = Collections.nCopies(shortage, emptyChunk);\n      return Iterables.concat(chunks, padding);\n    }\n  }","label":0}
{"text":"def tracers(tracersfile):\n    \n    if not tracersfile.is_file():\n        return None\n    tra = {}\n    with tracersfile.open('rb') as fid:\n        readbin = partial(_readbin, fid)\n        magic = readbin()\n        if magic > 8000:  # 64 bits\n            magic -= 8000\n            readbin()\n            readbin = partial(readbin, file64=True)\n        if magic < 100:\n            raise ParsingError(tracersfile,\n                               'magic > 100 expected to get tracervar info')\n        nblk = magic % 100\n        readbin('f', 2)  # aspect ratio\n        readbin()  # istep\n        readbin('f')  # time\n        ninfo = readbin()\n        ntra = readbin(nwords=nblk, unpack=False)\n        readbin('f')  # tracer ideal mass\n        curv = readbin()\n        if curv:\n            readbin('f')  # r_cmb\n        infos = []  # list of info names\n        for _ in range(ninfo):\n            infos.append(b''.join(readbin('b', 16)).strip().decode())\n            tra[infos[-1]] = []\n        if magic > 200:\n            ntrace_elt = readbin()\n            if ntrace_elt > 0:\n                readbin('f', ntrace_elt)  # outgassed\n        for ntrab in ntra:  # blocks\n            data = readbin('f', ntrab * ninfo)\n            for idx, info in enumerate(infos):\n                tra[info].append(data[idx::ninfo])\n    return tra","label":0}
{"text":"def prev_img_ws(self, ws, loop=True):\n        \n        channel = self.get_active_channel_ws(ws)\n        if channel is None:\n            return\n        channel.prev_image()\n        return True","label":0}
{"text":"function normalizeCondition(condition) {\n    if (!condition) throw new Error(\"Expected condition but got falsy value\");\n    if (typeof condition === \"string\") {\n        return str => str.indexOf(condition) === 0;\n    }\n    if (typeof condition === \"function\") {\n        return condition;\n    }\n    if (condition instanceof RegExp) {\n        return condition.test.bind(condition);\n    }\n    if (Array.isArray(condition)) {\n        const items = condition.map(c => normalizeCondition(c));\n        return orMatcher(items);\n    }\n    if (typeof condition !== \"object\")\n        throw Error(\n            \"Unexcepted \" +\n                typeof condition +\n                \" when condition was expected (\" +\n                condition +\n                \")\"\n        );\n\n    const matchers = [];\n    Object.keys(condition).forEach(key => {\n        const value = condition[key];\n        switch (key) {\n            case \"or\":\n            case \"include\":\n            case \"test\":\n                if (value) matchers.push(RuleSet.normalizeCondition(value));\n                break;\n            case \"and\":\n                if (value) {\n                    const items = value.map(c => RuleSet.normalizeCondition(c));\n                    matchers.push(andMatcher(items));\n                }\n                break;\n            case \"not\":\n            case \"exclude\":\n                if (value) {\n                    const matcher = RuleSet.normalizeCondition(value);\n                    matchers.push(notMatcher(matcher));\n                }\n                break;\n            default:\n                throw new Error(\"Unexcepted property \" + key + \" in condition\");\n        }\n    });\n    if (matchers.length === 0)\n        throw new Error(\"Excepted condition but got \" + condition);\n    if (matchers.length === 1) return matchers[0];\n    return andMatcher(matchers);\n}","label":0}
{"text":"@POST\n    @Consumes(\"multipart\/form-data\")\n    @RequiresPermissions(I18nPermissions.KEY_WRITE)\n    public Response importTranslations(FormDataMultiPart multiPart) {\n        WebAssertions.assertNotNull(multiPart, \"Missing input file\");\n\n        int importedKeys = 0;\n        for (BodyPart bodyPart : multiPart.getBodyParts()) {\n            importedKeys += importFile(bodyPart);\n        }\n\n        String importedKeysMessage = String.format(LOADED_KEYS_MESSAGE, importedKeys);\n        LOGGER.debug(importedKeysMessage);\n        return Response.ok(importedKeysMessage, MediaType.TEXT_PLAIN_TYPE).build();\n    }","label":0}
{"text":"public function getRulesAsString($iGroupId)\n    {\n        $aRules = $this->getRulesAsArray($iGroupId);\n\n        if (empty($aRules)) {\n            return '';\n        }\n\n        $sStr = 'Passwords must ' . strtolower(implode(', ', $aRules)) . '.';\n        return str_lreplace(', ', ' and ', $sStr);\n    }","label":0}
{"text":"def get_filename(self, index):\r\n        \"\"\"\"\"\"\r\n        if index:\r\n            path = self.fsmodel.filePath(self.proxymodel.mapToSource(index))\r\n            return osp.normpath(to_text_string(path))","label":0}
{"text":"def addToTimeVary(self,*params):\n        '''\n        \n        '''\n        for param in params:\n            if param not in self.time_vary:\n                self.time_vary.append(param)","label":0}
{"text":"def OpenAsContainer(self):\n    \"\"\"\"\"\"\n    if self.IsDirectory():\n      return self\n\n    # TODO(user): Add support for more containers here (e.g. registries, zip\n    # files etc).\n    else:  # For now just guess TSK.\n      tsk_handler = self._handlers[rdf_paths.PathSpec.PathType.TSK]\n      tsk_pathspec = rdf_paths.PathSpec(\n          path=\"\/\", pathtype=rdf_paths.PathSpec.PathType.TSK)\n      return tsk_handler(\n          base_fd=self,\n          handlers=self._handlers,\n          pathspec=tsk_pathspec,\n          progress_callback=self.progress_callback)","label":0}
{"text":"def sample_forward_transitions(self, batch_size, batch_info, forward_steps: int,\n                                   discount_factor: float) -> Transitions:\n        \n        indexes = self.backend.sample_batch_transitions(batch_size, forward_steps=forward_steps)\n        transition_tensors = self.backend.get_transitions_forward_steps(\n            indexes, forward_steps=forward_steps, discount_factor=discount_factor\n        )\n\n        return Trajectories(\n            num_steps=batch_size,\n            num_envs=self.backend.num_envs,\n            environment_information=None,\n            transition_tensors={k: torch.from_numpy(v) for k, v in transition_tensors.items()},\n            rollout_tensors={},\n            extra_data={\n                'forward_steps': forward_steps\n            }\n        ).to_transitions()","label":0}
{"text":"func (s *ElasticsearchDomainStatus) SetElasticsearchVersion(v string) *ElasticsearchDomainStatus {\n\ts.ElasticsearchVersion = &v\n\treturn s\n}","label":0}
{"text":"protected function stat($path) {\n\t\treturn isset($this->cache[$path])\n\t\t\t? $this->cache[$path]\n\t\t\t: $this->updateCache($path, $this->_stat($path));\n\t}","label":0}
{"text":"function getSizes(requestSizes) {\n  let width = 0;\n  let height = 0;\n  if (utils.isArray(requestSizes) && requestSizes.length === 2 &&\n    !utils.isArray(requestSizes[0])) {\n    width = parseInt(requestSizes[0], 10);\n    height = parseInt(requestSizes[1], 10);\n  } else if (typeof requestSizes === 'object') {\n    for (let i = 0; i < requestSizes.length; i++) {\n      let size = requestSizes[i];\n      width = parseInt(size[0], 10);\n      height = parseInt(size[1], 10);\n      break;\n    }\n  }\n  return [width, height];\n}","label":0}
{"text":"public static long bytesToLong(byte[] bytes, int offset) {\n        long result = 0x0;\n        for (int i = offset; i < offset + 8; ++i) {\n            result = result << 8;\n            result |= (bytes[i] & 0x00000000000000FFl);\n        }\n        return result;\n    }","label":0}
{"text":"function istanbulLoader(m, filename, old) {\n  istanbulMonkey[filename] = true;\n  old(m, filename);\n}","label":0}
{"text":"public function resetContent(PageInterface $page, LayoutBlock $layoutBlock, \\JMS\\Serializer\\SerializerInterface $serializer)\n    {\n\t    if ($contentObject = $layoutBlock->getSnapshotContent()) {\n\t\t    $contentObject = $serializer->deserialize($contentObject, $layoutBlock->getClassType(), 'json');\n\n\n\n\t\t    try {\n\t\t\t    $contentObject = $this->_em->merge($contentObject);\n\t\t\t    $reflection = new \\ReflectionClass($contentObject);\n\t\t\t    foreach ($reflection->getProperties() as $property) {\n\t\t\t\t    $method = sprintf('get%s', ucfirst($property->getName()));\n\t\t\t\t    if ($reflection->hasMethod($method) && $var = $contentObject->{$method}()) {\n\t\t\t\t\t    if ($var instanceof ArrayCollection) {\n\t\t\t\t\t\t    foreach ($var as $key =>  $v) {\n\t\t\t\t\t\t\t    $v = $this->_em->merge($v);\n\n\t\t\t\t\t\t\t    $var->set($key, $v);\n\t\t\t\t\t\t    }\n\t\t\t\t\t\t    $method = sprintf('set%s', ucfirst($property->getName()));\n\t\t\t\t\t\t    $contentObject->{$method}($var);\n\t\t\t\t\t    }\n\n\t\t\t\t\t    if(is_object($var) && $this->_em->getMetadataFactory()->hasMetadataFor(get_class($var))){\n\t\t\t\t\t\t    $var = $this->_em->merge($var);\n\n\t\t\t\t\t\t    $method = sprintf('set%s', ucfirst($property->getName()));\n\t\t\t\t\t\t    $contentObject->{$method}($var);\n\t\t\t\t\t    }\n\t\t\t\t    }\n\t\t\t    }\n\n\t\t\t    $this->_em->persist($contentObject);\n\t\t\t    $this->_em->flush($contentObject);\n\n\t\t    } catch (EntityNotFoundException $e) {\n\t\t\t    $classType = $layoutBlock->getClassType();\n\t\t\t    $newContentObject = clone $contentObject;\n\t\t\t    $reflection = new \\ReflectionClass($contentObject);\n\t\t\t    foreach ($reflection->getProperties() as $property) {\n\t\t\t\t    $method = sprintf('get%s', ucfirst($property->getName()));\n\t\t\t\t    if ($reflection->hasMethod($method) && $var = $contentObject->{$method}()) {\n\t\t\t\t\t    if ($var instanceof ArrayCollection) {\n\t\t\t\t\t\t    foreach ($var as $key =>  $v) {\n\t\t\t\t\t\t\t    $v = $this->_em->merge($v);\n\n\t\t\t\t\t\t\t    $var->set($key, $v);\n\t\t\t\t\t\t    }\n\t\t\t\t\t\t    $method = sprintf('set%s', ucfirst($property->getName()));\n\t\t\t\t\t\t    $newContentObject->{$method}($var);\n\t\t\t\t\t    }\n\n\t\t\t\t\t    if(is_object($var) && $this->_em->getMetadataFactory()->hasMetadataFor(get_class($var))){\n\t\t\t\t\t\t    $var = $this->_em->merge($var);\n\n\t\t\t\t\t\t    $method = sprintf('set%s', ucfirst($property->getName()));\n\t\t\t\t\t\t    $newContentObject->{$method}($var);\n\t\t\t\t\t    }\n\n\t\t\t\t    }\n\t\t\t    }\n\t\t\t    $this->_em->persist($newContentObject);\n\t\t\t    $this->_em->flush($newContentObject);\n\n\n\t\t\t    $layoutBlock->setObjectId($newContentObject->getId());\n\t\t    }\n\n\t    }\n\n\t    $layoutBlock->setPage($page);\n\n\t    $this->_em->persist($layoutBlock);\n\n\t    $this->_em->flush($layoutBlock);\n\n\t    return $layoutBlock;\n    }","label":0}
{"text":"public static void loadFromXmlPluginPackageDefinitions(final IPluginRepository repo, final ClassLoader cl, final InputStream in)\n            throws PluginConfigurationException {\n        for (PluginDefinition pd : loadFromXmlPluginPackageDefinitions(cl, in)) {\n            repo.addPluginDefinition(pd);\n        }\n    }","label":0}
{"text":"public function create()\n    {\n        \/**\n         * @var BannerZoneInterface $bannerZone\n         *\/\n        $classNamespace = $this->getEntityNamespace();\n        $bannerZone = new $classNamespace();\n        $bannerZone->setBanners(new ArrayCollection());\n\n        return $bannerZone;\n    }","label":0}
{"text":"public static void executeSQL(final SQLiteDatabase database, List<String> commands) {\n\t\tfor (String command : commands) {\n\t\t\texecuteSQL(database, command);\n\t\t}\n\t\t\/\/ commands.forEach(command -> {\n\t\t\/\/ executeSQL(database, command);\n\t\t\/\/ });\n\t}","label":0}
{"text":"protected Class<?> loadClass(String clazz) throws ClassNotFoundException {\n\t\tif (this.classLoader == null){\n\t\t\treturn Class.forName(clazz);\n\t\t}\n\n\t\treturn Class.forName(clazz, true, this.classLoader);\n\n\t}","label":0}
{"text":"def qos_map_dscp_mutation_mark_dscp_in_values(self, **kwargs):\n        \n        config = ET.Element(\"config\")\n        qos = ET.SubElement(config, \"qos\", xmlns=\"urn:brocade.com:mgmt:brocade-qos\")\n        map = ET.SubElement(qos, \"map\")\n        dscp_mutation = ET.SubElement(map, \"dscp-mutation\")\n        dscp_mutation_map_name_key = ET.SubElement(dscp_mutation, \"dscp-mutation-map-name\")\n        dscp_mutation_map_name_key.text = kwargs.pop('dscp_mutation_map_name')\n        mark = ET.SubElement(dscp_mutation, \"mark\")\n        dscp_in_values = ET.SubElement(mark, \"dscp-in-values\")\n        dscp_in_values.text = kwargs.pop('dscp_in_values')\n\n        callback = kwargs.pop('callback', self._callback)\n        return callback(config)","label":0}
{"text":"public function getItem($uuid)\n    {\n        $found = null;\n        foreach ($this->items as $item) {\n            if ($item->getUuid() === $uuid) {\n                $found = $item;\n                break;\n            }\n        }\n\n        return $found;\n    }","label":0}
{"text":"public function setProperties(array $properties)\n    {\n        foreach ($properties as $key => $value) {\n            if (array_key_exists($key, $this->properties)) {\n                $method = 'set' . ucfirst($key);\n                $this->$method($value);\n            } else {\n                throw new Exception\\InvalidArgumentException(__METHOD__ . \" property '$key' is not supported in column.\");\n            }\n        }\n\n        return $this;\n    }","label":0}
{"text":"private static void setServiceEnabled(final XMPPConnection connection,\n            final boolean isEnabled) {\n        ServiceDiscoveryManager manager = ServiceDiscoveryManager\n                .getInstanceFor(connection);\n\n        List<String> namespaces = new ArrayList<>();\n        namespaces.addAll(Arrays.asList(NAMESPACE));\n        namespaces.add(DataPacketExtension.NAMESPACE);\n        if (!IBB_ONLY) {\n            namespaces.add(Bytestream.NAMESPACE);\n        }\n\n        for (String namespace : namespaces) {\n            if (isEnabled) {\n                manager.addFeature(namespace);\n            } else {\n                manager.removeFeature(namespace);\n            }\n        }\n    }","label":0}
{"text":"def mount(self, route: str, controller: callable) -> url:\n        \n        if issubclass(controller, TemplateView):\n            return url(\n                r\"%s\" % route,\n                Router(self, route, controller).handle\n            )\n        else:\n            raise TypeError(\"The controller %s must be a subclass of %s\" % (\n                    controller, TemplateView\n                )\n            )","label":0}
{"text":"public void generateReport (String arg1, InvocationService.ResultListener arg2)\n    {\n        InvocationMarshaller.ResultMarshaller listener2 = new InvocationMarshaller.ResultMarshaller();\n        listener2.listener = arg2;\n        sendRequest(GENERATE_REPORT, new Object[] {\n            arg1, listener2\n        });\n    }","label":0}
{"text":"public function getAction($webspace, $id)\n    {\n        $entity = $this->get('sulu_website.analytics.manager')->find($id);\n\n        return $this->handleView($this->view($entity, 200));\n    }","label":0}
{"text":"def _build_message_body(self, body_size):\n        \n        body = bytes()\n        while len(body) < body_size:\n            if not self._inbound:\n                self.check_for_errors()\n                sleep(IDLE_WAIT)\n                continue\n            body_piece = self._inbound.pop(0)\n            if not body_piece.value:\n                break\n            body += body_piece.value\n        return body","label":0}
{"text":"func NewDBConn(\n\tcp *Pool,\n\tappParams *mysql.ConnParams) (*DBConn, error) {\n\tc, err := dbconnpool.NewDBConnection(appParams, tabletenv.MySQLStats)\n\tif err != nil {\n\t\tcp.checker.CheckMySQL()\n\t\treturn nil, err\n\t}\n\treturn &DBConn{\n\t\tconn:    c,\n\t\tinfo:    appParams,\n\t\tpool:    cp,\n\t\tdbaPool: cp.dbaPool,\n\t}, nil\n}","label":0}
{"text":"protected function gridIncr(int $lg, int $md, int $sm, int $xs)\n    {\n        $this->gridCount['lg'] += $lg;\n        $this->gridCount['md'] += $md;\n        $this->gridCount['sm'] += $sm;\n        $this->gridCount['xs'] += $xs;\n        return $this;\n    }","label":0}
{"text":"public function saveUrls( $uri )\n\t{\n\t\t$list\t= array();\n\t\tforeach( $this->links as $link )\n\t\t\t$list[]\t= $link['url'];\n\t\t$writer\t= new FS_File_Writer( $uri );\n\t\t$writer->writeArray( $list );\n\t}","label":0}
{"text":"public function columnName($i)\n    {\n        $column = $this->request->input(\"columns.$i\");\n\n        return isset($column['name']) && $column['name'] != '' ? $column['name'] : $column['data'];\n    }","label":0}
{"text":"private void readFooter(RandomAccessInputStream raf, int location) throws IOException\n\t{\n\t\traf.seek(location);\n\t\tbyte[] foot = new byte[FOOT_SIZE];\n\n\t\tif (raf.read(foot) != FOOT_SIZE)\n\t\t{\n\t\t\tthrow new IOException(\"Error encountered reading id3v2 footer\");\n\t\t}\n\n\t\tmajorVersion = (int) foot[3];\n\n\t\tif (majorVersion <= NEW_MAJOR_VERSION)\n\t\t{\n\t\t\tminorVersion = (int) foot[4];\n\t\t\tunsynchronisation = (foot[5]&0x80)!=0;\n\t\t\textended = (foot[5]&0x40)!=0;\n\t\t\texperimental = (foot[5]&0x20)!=0;\n\t\t\tfooter = (foot[5]&0x10)!=0;\n\t\t\ttagSize = Helpers.convertDWordToInt(foot, 6);\n\t\t}\n\t}","label":0}
{"text":"public function convertTo($zone, $format = null)\n    {\n        Argument::i()\n            \/\/argument 1 must be a string\n            ->test(1, 'string')\n            \/\/argument 1 must be a timezone identifier\n            ->test(1, 'location', 'utc', 'abbr')\n            \/\/argument 2 must be a string or null\n            ->test(2, 'string', 'null');\n\n        $time = $this->time + $this->calculateOffset($zone);\n\n        if (!is_null($format)) {\n            return date($format, $time);\n        }\n\n        return $time;\n    }","label":0}
{"text":"def _sdc_mdata(mdata_list=None, mdata_get=None):\n    '''\n    \n    '''\n    grains = {}\n    sdc_text_keys = [\n        'uuid',\n        'server_uuid',\n        'datacenter_name',\n        'hostname',\n        'dns_domain',\n    ]\n    sdc_json_keys = [\n        'resolvers',\n        'nics',\n        'routes',\n    ]\n\n    if not mdata_list:\n        mdata_list = salt.utils.path.which('mdata-list')\n\n    if not mdata_get:\n        mdata_get = salt.utils.path.which('mdata-get')\n\n    if not mdata_list or not mdata_get:\n        return grains\n\n    for mdata_grain in sdc_text_keys+sdc_json_keys:\n        mdata_value = __salt__['cmd.run']('{0} sdc:{1}'.format(mdata_get, mdata_grain), ignore_retcode=True)\n\n        if not mdata_value.startswith('No metadata for '):\n            if 'mdata' not in grains:\n                grains['mdata'] = {}\n            if 'sdc' not in grains['mdata']:\n                grains['mdata']['sdc'] = {}\n\n            log.debug('found mdata entry sdc:%s with value %s', mdata_grain, mdata_value)\n            mdata_grain = mdata_grain.replace('-', '_')\n            mdata_grain = mdata_grain.replace(':', '_')\n            if mdata_grain in sdc_json_keys:\n                grains['mdata']['sdc'][mdata_grain] = salt.utils.json.loads(mdata_value)\n            else:\n                grains['mdata']['sdc'][mdata_grain] = mdata_value\n\n    return grains","label":0}
{"text":"public function parse(){\r\n\t\t$this->setStatements(array());\r\n\t\t\r\n\t\t\/\/common file checks\r\n\t\t$file = $this->getFile();\r\n\t\tif (!file_exists($file)){\r\n\t\t\tthrow new tao_install_utils_SQLParsingException(\"SQL file '${file}' does not exist.\");\r\n\t\t}\r\n\t\telse if (!is_readable($file)){\r\n\t\t\tthrow new tao_install_utils_SQLParsingException(\"SQL file '${file}' is not readable.\");\r\n\t\t}\r\n\t\telse if(!preg_match(\"\/\\.sql$\/\", basename($file))){\r\n\t\t\tthrow new tao_install_utils_SQLParsingException(\"File '${file}' is not a valid SQL file. Extension '.sql' not found.\");\r\n\t\t}\r\n\t\t\r\n\t\tif ($handler = fopen($file, \"r\")){\r\n\t\t\t\r\n\t\t\t\/\/parse file and get only usefull lines\r\n\t\t\t$ch = \"\";\r\n\t\t\twhile (!feof ($handler)){\r\n\t\t\t\t$line = utf8_decode(fgets($handler));\r\n\t\t\r\n\t\t\t\tif (isset($line[0]) && ($line[0] != '#') && ($line[0] != '-')){\r\n\t\t\t\t\t$ch = $ch.$line;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\/\/explode and execute\r\n\t\t\t$requests = explode(\";\", $ch);\r\n\t\t\t\r\n\t\t\ttry{\r\n\t\t\t\tforeach($requests as $index => $request){\r\n\t\t\t\t\t$requestTrim = trim($request);\r\n\t\t\t\t\tif(!empty($requestTrim)){\r\n\t\t\t\t\t\t$this->addStatement($request);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tcatch(Exception $e){\r\n\t\t\t\tthrow new tao_install_utils_SQLParsingException(\"Error executing query #$index : $request . \".$e->getMessage());\r\n\t\t\t}\r\n\t\t\tfclose($handler);\r\n\t\t}\r\n\t}","label":0}
{"text":"func (s *ListDeploymentJobsOutput) SetDeploymentJobs(v []*DeploymentJob) *ListDeploymentJobsOutput {\n\ts.DeploymentJobs = v\n\treturn s\n}","label":0}
{"text":"func NewController(backend Backend, t *api.Task) (*Controller, error) {\n\tspec, err := readSpec(t)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn &Controller{\n\t\tbackend:   backend,\n\t\tspec:      spec,\n\t\tserviceID: t.ServiceID,\n\t\tlogger: logrus.WithFields(logrus.Fields{\n\t\t\t\"controller\": \"plugin\",\n\t\t\t\"task\":       t.ID,\n\t\t\t\"plugin\":     spec.Name,\n\t\t})}, nil\n}","label":0}
{"text":"def build(self):\n        \n        self._calculate_average_field_lengths()\n        self._create_field_vectors()\n        self._create_token_set()\n\n        return Index(\n            inverted_index=self.inverted_index,\n            field_vectors=self.field_vectors,\n            token_set=self.token_set,\n            fields=list(self._fields.keys()),\n            pipeline=self.search_pipeline,\n        )","label":0}
{"text":"public function get_byteorder($magic)\n    {\n        \/\/ The magic is 0x950412de\n        $magic_little = (int) - 1794895138;\n        $magic_little_64 = (int) 2500072158;\n        \/\/ 0xde120495\n        $magic_big = ((int) - 569244523) & 0xFFFFFFFF;\n        if ($magic_little == $magic || $magic_little_64 == $magic) {\n            return 'little';\n        } elseif ($magic_big == $magic) {\n            return 'big';\n        } else {\n            return false;\n        }\n    }","label":0}
{"text":"def _add_label_edges(self):\n        \"\"\"\"\"\"\n        labels = self.ast.select('atom_label')\n        if not labels:\n            return\n\n        # We need each individual label and atoms with multiple ring labels\n        # would yield e.g. the string '12' so split those up.\n        label_digits = defaultdict(list)\n        for label in labels:\n            digits = list(label.tail[0])\n            for digit in digits:\n                label_digits[digit].append(label.parent())\n\n        for label, (atom1, atom2) in label_digits.items():\n            atom1_idx = self._atom_indices[id(atom1)]\n            atom2_idx = self._atom_indices[id(atom2)]\n            self.add_edge(atom1_idx, atom2_idx)","label":0}
{"text":"func (s *TagListEntry) SetValue(v string) *TagListEntry {\n\ts.Value = &v\n\treturn s\n}","label":0}
{"text":"def parse_args(self):\n        \"\"\"\"\"\"\n        args = self.init_args().parse_args()\n\n        # Load the configuration file, if it exists\n        self.config = Config(args.conf_file)\n\n        # Debug mode\n        if args.debug:\n            from logging import DEBUG\n            logger.setLevel(DEBUG)\n        else:\n            from warnings import simplefilter\n            simplefilter(\"ignore\")\n\n        # Plugins disable\/enable\n        if args.disable_plugin is not None:\n            for p in args.disable_plugin.split(','):\n                disable(args, p)\n        else:\n            # Allow users to disable plugins from the glances.conf (issue #1378)\n            for s in self.config.sections():\n                if self.config.has_section(s) \\\n                   and (self.config.get_bool_value(s, 'disable', False)):\n                    disable(args, s)\n                    logger.debug('{} disabled by the configuration file'.format(s))\n\n        # Exporters activation\n        if args.export is not None:\n            for p in args.export.split(','):\n                setattr(args, 'export_' + p, True)\n\n        # Client\/server Port\n        if args.port is None:\n            if args.webserver:\n                args.port = self.web_server_port\n            else:\n                args.port = self.server_port\n        # Port in the -c URI #996\n        if args.client is not None:\n            args.client, args.port = (x if x else y for (x, y) in zip(args.client.partition(':')[::2], (args.client, args.port)))\n\n        # Autodiscover\n        if args.disable_autodiscover:\n            logger.info(\"Auto discover mode is disabled\")\n\n        # By default Windows is started in Web mode\n        if WINDOWS:\n            args.webserver = True\n\n        # In web server mode, default refresh time: 5 sec\n        if args.webserver:\n            args.time = 5\n            args.process_short_name = True\n\n        # Server or client login\/password\n        if args.username_prompt:\n            # Every username needs a password\n            args.password_prompt = True\n            # Prompt username\n            if args.server:\n                args.username = self.__get_username(\n                    description='Define the Glances server username: ')\n            elif args.webserver:\n                args.username = self.__get_username(\n                    description='Define the Glances webserver username: ')\n            elif args.client:\n                args.username = self.__get_username(\n                    description='Enter the Glances server username: ')\n        else:\n            if args.username_used:\n                # A username has been set using the -u option ?\n                args.username = args.username_used\n            else:\n                # Default user name is 'glances'\n                args.username = self.username\n\n        if args.password_prompt or args.username_used:\n            # Interactive or file password\n            if args.server:\n                args.password = self.__get_password(\n                    description='Define the Glances server password ({} username): '.format(\n                        args.username),\n                    confirm=True,\n                    username=args.username)\n            elif args.webserver:\n                args.password = self.__get_password(\n                    description='Define the Glances webserver password ({} username): '.format(\n                        args.username),\n                    confirm=True,\n                    username=args.username)\n            elif args.client:\n                args.password = self.__get_password(\n                    description='Enter the Glances server password ({} username): '.format(\n                        args.username),\n                    clear=True,\n                    username=args.username)\n        else:\n            # Default is no password\n            args.password = self.password\n\n        # By default help is hidden\n        args.help_tag = False\n\n        # Display Rx and Tx, not the sum for the network\n        args.network_sum = False\n        args.network_cumul = False\n\n        # Manage light mode\n        if args.enable_light:\n            logger.info(\"Light mode is on\")\n            args.disable_left_sidebar = True\n            disable(args, 'process')\n            disable(args, 'alert')\n            disable(args, 'amps')\n            disable(args, 'docker')\n\n        # Manage full quicklook option\n        if args.full_quicklook:\n            logger.info(\"Full quicklook mode\")\n            enable(args, 'quicklook')\n            disable(args, 'cpu')\n            disable(args, 'mem')\n            disable(args, 'memswap')\n            enable(args, 'load')\n\n        # Manage disable_top option\n        if args.disable_top:\n            logger.info(\"Disable top menu\")\n            disable(args, 'quicklook')\n            disable(args, 'cpu')\n            disable(args, 'mem')\n            disable(args, 'memswap')\n            disable(args, 'load')\n\n        # Init the generate_graph tag\n        # Should be set to True to generate graphs\n        args.generate_graph = False\n\n        # Control parameter and exit if it is not OK\n        self.args = args\n\n        # Export is only available in standalone or client mode (issue #614)\n        export_tag = self.args.export is not None and any(self.args.export)\n        if WINDOWS and export_tag:\n            # On Windows, export is possible but only in quiet mode\n            # See issue #1038\n            logger.info(\"On Windows OS, export disable the Web interface\")\n            self.args.quiet = True\n            self.args.webserver = False\n        elif not (self.is_standalone() or self.is_client()) and export_tag:\n            logger.critical(\"Export is only available in standalone or client mode\")\n            sys.exit(2)\n\n        # Filter is only available in standalone mode\n        if args.process_filter is not None and not self.is_standalone():\n            logger.critical(\n                \"Process filter is only available in standalone mode\")\n            sys.exit(2)\n\n        # Disable HDDTemp if sensors are disabled\n        if getattr(args, 'disable_sensors', False):\n            disable(args, 'hddtemp')\n            logger.debug(\"Sensors and HDDTemp are disabled\")\n\n        return args","label":0}
{"text":"def increment(key, delta=1, host=DEFAULT_HOST, port=DEFAULT_PORT):\n    '''\n    \n    '''\n    conn = _connect(host, port)\n    _check_stats(conn)\n    cur = get(key)\n\n    if cur is None:\n        raise CommandExecutionError('Key \\'{0}\\' does not exist'.format(key))\n    elif not isinstance(cur, six.integer_types):\n        raise CommandExecutionError(\n            'Value for key \\'{0}\\' must be an integer to be '\n            'incremented'.format(key)\n        )\n\n    try:\n        return conn.incr(key, delta)\n    except ValueError:\n        raise SaltInvocationError('Delta value must be an integer')","label":0}
{"text":"public ArrayList<OvhMigration> project_serviceName_migration_GET(String serviceName) throws IOException {\n\t\tString qPath = \"\/cloud\/project\/{serviceName}\/migration\";\n\t\tStringBuilder sb = path(qPath, serviceName);\n\t\tString resp = exec(qPath, \"GET\", sb.toString(), null);\n\t\treturn convertTo(resp, t10);\n\t}","label":0}
{"text":"def to_type(dest)\n      if dimension == 0 and variables.empty?\n        target = typecode.to_type dest\n        target.new(simplify.get).simplify\n      else\n        key = \"to_#{dest.to_s.downcase}\"\n        Hornetseye::ElementWise( proc { |x| x.to_type dest }, key,\n                                 proc { |t| t.to_type dest } ).new(self).force\n      end\n    end","label":0}
{"text":"public boolean isSubtypeUnchecked(Type t, Type s, Warner warn) {\n        boolean result = isSubtypeUncheckedInternal(t, s, true, warn);\n        if (result) {\n            checkUnsafeVarargsConversion(t, s, warn);\n        }\n        return result;\n    }","label":0}
{"text":"def config(env=DEFAULT_ENV, default=None, **overrides):\n    \"\"\"\"\"\"\n\n    config = {}\n\n    s = os.environ.get(env, default)\n\n    if s:\n        config = parse(s)\n\n    overrides = dict([(k.upper(), v) for k, v in overrides.items()])\n\n    config.update(overrides)\n\n    return config","label":0}
{"text":"def create(self, name):\n        \n        name = to_text(name)\n        return self._post(\n            'tags\/create',\n            data={'tag': {'name': name}},\n            result_processor=lambda x: x['tag']\n        )","label":0}
{"text":"func (s *NetworkBinding) SetBindIP(v string) *NetworkBinding {\n\ts.BindIP = &v\n\treturn s\n}","label":0}
{"text":"def series_index(self, series):\n        \n        for idx, s in enumerate(self):\n            if series is s:\n                return idx\n        raise ValueError('series not in chart data object')","label":0}
{"text":"func (a *Amount) Validate(c *validation.Context) {\n\tif a.GetDefault() < 0 {\n\t\tc.Errorf(\"default amount must be non-negative\")\n\t}\n\t\/\/ The algorithm works with any time 7 days greater than the zero time.\n\tnow := time.Date(2018, 1, 1, 12, 0, 0, 0, time.UTC)\n\tschs := make([]indexedSchedule, len(a.GetChange()))\n\tfor i, s := range a.GetChange() {\n\t\tc.Enter(\"change %d\", i)\n\t\ts.Validate(c)\n\t\tc.Exit()\n\t\tt, err := s.mostRecentStart(now)\n\t\tif err != nil {\n\t\t\t\/\/ s.Validate(c) already emitted this error.\n\t\t\treturn\n\t\t}\n\t\tschs[i] = indexedSchedule{\n\t\t\tSchedule: s,\n\t\t\tindex:    i,\n\t\t\tsortKey:  t,\n\t\t}\n\t}\n\tsort.Slice(schs, func(i, j int) bool { return schs[i].sortKey.Before(schs[j].sortKey) })\n\tprevEnd := time.Time{}\n\tfor i := 0; i < len(schs); i++ {\n\t\tc.Enter(\"change %d\", schs[i].index)\n\t\tstart := schs[i].sortKey\n\t\tif schs[i].sortKey.Before(prevEnd) {\n\t\t\t\/\/ Implies intervals are half-open: [start, end). prevEnd\n\t\t\t\/\/ is initialized to the zero time, therefore this can't\n\t\t\t\/\/ succeed when i is 0, meaning i-1 is never -1.\n\t\t\tc.Errorf(\"start time is before change %d\", schs[i-1].index)\n\t\t}\n\t\tsec, err := schs[i].Schedule.Length.ToSeconds()\n\t\tif err != nil {\n\t\t\tc.Exit()\n\t\t\treturn\n\t\t}\n\t\tprevEnd = start.Add(time.Second * time.Duration(sec))\n\t\tc.Exit()\n\t}\n\tif len(schs) > 0 {\n\t\t\/\/ Schedules are relative to the week.\n\t\t\/\/ Check for a conflict between the last and first.\n\t\tc.Enter(\"change %d\", schs[0].index)\n\t\t\/\/ Treat the first schedule as starting in a week. This checks for a conflict\n\t\t\/\/ between the last configured schedule and the first configured schedule.\n\t\tstart := schs[0].sortKey.Add(time.Hour * time.Duration(24*7))\n\t\tif start.Before(prevEnd) {\n\t\t\tc.Errorf(\"start time is before change %d\", schs[len(schs)-1].index)\n\t\t}\n\t}\n}","label":0}
{"text":"func (s *UpdateGroupQueryInput) SetResourceQuery(v *ResourceQuery) *UpdateGroupQueryInput {\n\ts.ResourceQuery = v\n\treturn s\n}","label":0}
{"text":"def drop_column(self, *columns):\n        \n        columns = list(columns)\n\n        return self._add_command(\"drop_column\", columns=columns)","label":0}
{"text":"public function converter(callable $converter, string ...$types): BuilderInterface\n    {\n        $this->resolver->converter($converter, ...$types);\n\n        return $this;\n    }","label":0}
{"text":"public function register()\n    {\n        if ($this->getIsNewRecord() == false) {\n            throw new \\RuntimeException('Calling \"' . __CLASS__ . '::' . __METHOD__ . '\" on existing user');\n        }\n        $this->password = Yii::$app->settings->get('user.enableGeneratingPassword') ? PasswordHelper::generate(8) : $this->password;\n        if ($this->scenario == self::SCENARIO_EMAIL_REGISTER) {\n            $this->email_confirmed_at = Yii::$app->settings->get('user.enableConfirmation') ? null : time();\n        }\n        $this->trigger(self::BEFORE_REGISTER);\n        if (!$this->save()) {\n            return false;\n        }\n        if (Yii::$app->settings->get('user.enableConfirmation') && !empty($this->email)) {\n            \/** @var UserToken $token *\/\n            $token = new UserToken(['type' => UserToken::TYPE_CONFIRMATION]);\n            $token->link('user', $this);\n            Yii::$app->sendMail($this->email, Yii::t('yuncms', 'Welcome to {0}', Yii::$app->name), 'user\/welcome', ['user' => $this, 'token' => isset($token) ? $token : null, 'module' => Yii::$app->getModule('user'), 'showPassword' => false]);\n        } else {\n            Yii::$app->user->login($this, Yii::$app->settings->get('user.rememberFor'));\n        }\n        $this->trigger(self::AFTER_REGISTER);\n        return true;\n    }","label":0}
{"text":"func (s *OrderableDBInstanceOption) SetSupportsStorageEncryption(v bool) *OrderableDBInstanceOption {\n\ts.SupportsStorageEncryption = &v\n\treturn s\n}","label":0}
{"text":"public Requests requestPing() {\n\n        Set<Map.Entry<RedisURI, StatefulRedisConnection<String, String>>> entries = new LinkedHashSet<>(\n                this.connections.entrySet());\n        Requests requests = new Requests(entries.size(), this.nodes);\n\n        for (Map.Entry<RedisURI, StatefulRedisConnection<String, String>> entry : entries) {\n\n            CommandArgs<String, String> args = new CommandArgs<>(StringCodec.ASCII).add(CommandKeyword.NODES);\n            Command<String, String, String> command = new Command<>(CommandType.PING, new StatusOutput<>(StringCodec.ASCII),\n                    args);\n            TimedAsyncCommand<String, String, String> timedCommand = new TimedAsyncCommand<>(command);\n\n            entry.getValue().dispatch(timedCommand);\n            requests.addRequest(entry.getKey(), timedCommand);\n        }\n\n        return requests;\n    }","label":0}
{"text":"public static function createInstance(array $additionalTags = []): self\n    {\n        $fqsenResolver = new FqsenResolver();\n        $tagFactory = new StandardTagFactory($fqsenResolver);\n        $descriptionFactory = new DescriptionFactory($tagFactory);\n\n        $tagFactory->addService($descriptionFactory);\n        $tagFactory->addService(new TypeResolver($fqsenResolver));\n\n        $docBlockFactory = new self($descriptionFactory, $tagFactory);\n        foreach ($additionalTags as $tagName => $tagHandler) {\n            $docBlockFactory->registerTagHandler($tagName, $tagHandler);\n        }\n\n        return $docBlockFactory;\n    }","label":0}
{"text":"public function toArray(): array\n    {\n        return [\n            'id'                => $this->id,\n            'text'              => $this->text,\n            'lang'              => $this->lang,\n            'created_at'        => $this->createdAt,\n            'geo'               => $this->geo,\n            'coordinates'       => $this->coordinates,\n            'places'            => $this->places,\n            'retweet_count'     => $this->retweetCount,\n            'favorite_count'    => $this->favoriteCount,\n            'entities'          => $this->entities,\n            'extended_entities' => $this->extendedEntities,\n            'user'              => $this->user\n        ];\n    }","label":0}
{"text":"function (args, callback) {\r\n        ternserver.request({\r\n            query: {\r\n              type: \"type\",  \/\/$NON-NLS-1$\r\n              file: args.meta.location,\r\n              end: args.params.offset\r\n            }\r\n          },\r\n          function (error, type) {\r\n            if (error) {\r\n              callback({\r\n                request: 'type',\r\n                error: typeof error === 'string' ? error : error.message,\r\n                message: Messages['failedType']\r\n              }); \/\/$NON-NLS-1$\r\n            } else {\r\n              callback({request: 'type', type: type}); \/\/$NON-NLS-1$\r\n            }\r\n          });\r\n      }","label":0}
{"text":"public static function checkString($pValue = null)\n    {\n        if ($pValue instanceof PHPExcel_RichText) {\n            \/\/ TODO: Sanitize Rich-Text string (max. character count is 32,767)\n            return $pValue;\n        }\n\n        \/\/ string must never be longer than 32,767 characters, truncate if necessary\n        $pValue = PHPExcel_Shared_String::Substring($pValue, 0, 32767);\n\n        \/\/ we require that newline is represented as \"\\n\" in core, not as \"\\r\\n\" or \"\\r\"\n        $pValue = str_replace(array(\"\\r\\n\", \"\\r\"), \"\\n\", $pValue);\n\n        return $pValue;\n    }","label":0}
{"text":"protected void createTransmissionDestination(SIBUuid8 remoteMEUuid) throws SIResourceException, SIMPDestinationAlreadyExistsException\n    {\n        if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled())\n            SibTr.entry(tc, \"createTransmissionDestination\", remoteMEUuid);\n        String destinationName = remoteMEUuid.toString();\n        DestinationDefinition destinationDefinition;\n\n        destinationDefinition = messageProcessor.createDestinationDefinition(DestinationType.QUEUE, destinationName);\n        destinationDefinition.setMaxReliability(Reliability.ASSURED_PERSISTENT);\n        destinationDefinition.setDefaultReliability(Reliability.ASSURED_PERSISTENT);\n        Set<String> destinationLocalizingSet = new HashSet<String>();\n        destinationLocalizingSet.add(messageProcessor.getMessagingEngineUuid().toString());\n\n        \/\/ Create the transmission destination\n        createDestinationLocalization(\n                                      destinationDefinition,\n                                      messageProcessor.createLocalizationDefinition(destinationDefinition.getName()),\n                                      destinationLocalizingSet,\n                                      false);\n        if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled())\n            SibTr.exit(tc, \"createTransmissionDestination\");\n    }","label":0}
{"text":"function &domStructure()\n    {\n        $dom = new DOMDocument( '1.0', 'utf-8' );\n        $dom->formatOutput = true;\n        $root = $dom->createElement( 'package' );\n        $root->setAttribute( 'version', eZPackage::VERSION );\n        $root->setAttribute( 'development', ( eZPackage::DEVELOPMENT ? 'true' : 'false' ) );\n        $dom->appendChild( $root );\n\n        if ( eZPackage::DEVELOPMENT )\n        {\n            $warningText = \"This format was made with a development version and will not work with any release versions.\\n\" .\n                           \"The format of this file is also subject to change until the release version.\\n\" .\n                           \"Upgrades to the development format will not be supported.\";\n\n            $warningNode = $dom->createElement( 'warning' );\n            $warningNode->appendChild( $dom->createTextNode( $warningText ) );\n            $root->appendChild( $warningNode );\n        }\n\n        $name = $this->attribute( 'name' );\n        $summary = $this->attribute( 'summary' );\n        $description = $this->attribute( 'description' );\n        $priority = $this->attribute( 'priority' );\n        $type = $this->attribute( 'type' );\n        $extension = $this->attribute( 'extension' );\n        $installType = $this->attribute( 'install_type' );\n        $vendorName = $this->attribute( 'vendor' );\n        $source = $this->attribute( 'source' );\n\n        $ezpublishVersion = $this->attribute( 'ezpublish-version' );\n        $ezpublishNamedVersion = $this->attribute( 'ezpublish-named-version' );\n\n        $packagingTimestamp = $this->attribute( 'packaging-timestamp' );\n        $packagingHost = $this->attribute( 'packaging-host' );\n        $packagingPackager = $this->attribute( 'packaging-packager' );\n\n        $maintainers = $this->attribute( 'maintainers' );\n        $documents = $this->attribute( 'documents' );\n        $groups = $this->attribute( 'groups' );\n\n        $versionNumber = $this->attribute( 'version-number' );\n        $releaseNumber = $this->attribute( 'release-number' );\n        $releaseTimestamp = $this->attribute( 'release-timestamp' );\n\n        $licence = $this->attribute( 'licence' );\n        $state = $this->attribute( 'state' );\n\n        $simpleFileList = $this->attribute( 'simple-file-list' );\n        $fileList = $this->attribute( 'file-list' );\n        $dependencies = $this->attribute( 'dependencies' );\n        $install = $this->attribute( 'install' );\n        $uninstall = $this->attribute( 'uninstall' );\n        $changelog = $this->attribute( 'changelog' );\n\n        $rootNameTextNode = $dom->createElement( 'name' );\n        $rootNameTextNode->appendChild( $dom->createTextNode( $name ) );\n        $root->appendChild( $rootNameTextNode );\n\n        if ( $summary )\n        {\n            $rootSummaryTextNode = $dom->createElement( 'summary' );\n            $rootSummaryTextNode->appendChild( $dom->createTextNode( $summary ) );\n            $root->appendChild( $rootSummaryTextNode );\n        }\n\n        if ( $description )\n        {\n            $rootDescriptionTextNode = $dom->createElement( 'description' );\n            $rootDescriptionTextNode->appendChild( $dom->createTextNode( $description ) );\n            $root->appendChild( $rootDescriptionTextNode );\n        }\n\n        if ( $vendorName )\n        {\n            $rootVendorTextNode = $dom->createElement( 'vendor' );\n            $rootVendorTextNode->appendChild( $dom->createTextNode( $vendorName ) );\n            $root->appendChild( $rootVendorTextNode );\n        }\n\n        if ( $priority )\n        {\n            $rootPriorityTextNode = $dom->createElement( 'priority' );\n            $rootPriorityTextNode->setAttribute( 'value', $priority );\n            $root->appendChild( $rootPriorityTextNode );\n        }\n\n        if ( $type )\n        {\n            $rootTypeTextNode = $dom->createElement( 'type' );\n            $rootTypeTextNode->setAttribute( 'value', $type );\n            $root->appendChild( $rootTypeTextNode );\n        }\n\n        if ( $extension )\n        {\n            $rootExtensionTextNode = $dom->createElement( 'extension' );\n            $rootExtensionTextNode->setAttribute( 'name', $extension );\n            $root->appendChild( $rootExtensionTextNode );\n        }\n\n        if ( $source )\n        {\n            $rootSourceTextNode = $dom->createElement( 'source' );\n            $rootSourceTextNode->appendChild( $dom->createTextNode( $source ) );\n            $root->appendChild( $rootSourceTextNode );\n        }\n\n        $root->setAttribute( 'install_type', $installType );\n\n        $ezpublishNode = $dom->createElement( 'ezpublish' );\n\n        $ezpublishVersionTextNode = $dom->createElement( 'version' );\n        $ezpublishVersionTextNode->appendChild( $dom->createTextNode( $ezpublishVersion ) );\n        $ezpublishNode->appendChild( $ezpublishVersionTextNode );\n\n        $ezpublishNamedVersionTextNode = $dom->createElement( 'named-version' );\n        $ezpublishNamedVersionTextNode->appendChild( $dom->createTextNode( $ezpublishNamedVersion ) );\n        $ezpublishNode->appendChild( $ezpublishNamedVersionTextNode );\n\n        $root->appendChild( $ezpublishNode );\n\n        if ( count( $maintainers ) > 0 )\n        {\n            $maintainersNode = $dom->createElement( 'maintainers' );\n            foreach ( $maintainers as $maintainer )\n            {\n                unset( $maintainerNode );\n                $maintainerNode = $dom->createElement( 'maintainer' );\n\n                unset( $maintainerName );\n                $maintainerName = $dom->createElement( 'name' );\n                $maintainerName->appendChild( $dom->createTextNode( $maintainer['name'] ) );\n                $maintainerNode->appendChild( $maintainerName );\n\n                unset( $maintainerEmail );\n                $maintainerEmail = $dom->createElement( 'email' );\n                $maintainerEmail->appendChild( $dom->createTextNode( $maintainer['email'] ) );\n                $maintainerNode->appendChild( $maintainerEmail );\n                if ( $maintainer['role'] )\n                {\n                    unset( $maintainerRole );\n                    $maintainerRole = $dom->createElement( 'role' );\n                    $maintainerRole->appendChild( $dom->createTextNode( $maintainer['role'] ) );\n                    $maintainerNode->appendChild( $maintainerRole );\n                }\n\n                $maintainersNode->appendChild( $maintainerNode );\n            }\n            $root->appendChild( $maintainersNode );\n        }\n\n        $packagingNode = $dom->createElement( 'packaging' );\n\n        $packagingTimestampNode = $dom->createElement( 'timestamp' );\n        $packagingTimestampNode->appendChild( $dom->createTextNode( $packagingTimestamp ) );\n        $packagingNode->appendChild( $packagingTimestampNode );\n\n        $packagingHostNode = $dom->createElement( 'host' );\n        $packagingHostNode->appendChild( $dom->createTextNode( $packagingHost ) );\n        $packagingNode->appendChild( $packagingHostNode );\n        if ( $packagingPackager )\n        {\n            $packagingPackagerNode = $dom->createElement( 'packager' );\n            $packagingPackagerNode->appendChild( $dom->createTextNode( $packagingPackager ) );\n            $packagingNode->appendChild( $packagingPackagerNode );\n        }\n\n        $root->appendChild( $packagingNode );\n\n        if ( count( $documents ) > 0 )\n        {\n            $documentsNode = $dom->createElement( 'documents' );\n            foreach ( $documents as $document )\n            {\n                unset( $documentNode );\n                $documentNode = $dom->createElement( 'document' );\n                $documentNode->setAttribute( 'mime-type', $document['mime-type'] );\n                $documentNode->setAttribute( 'name', $document['name'] );\n                if ( $document['os'] )\n                    $documentNode->setAttribute( 'os', $document['os'] );\n\n                if ( $document['audience'] )\n                    $documentNode->setAttribute( 'audience', $document['audience'] );\n\n                $documentsNode->appendChild( $documentNode );\n            }\n            $root->appendChild( $documentsNode );\n        }\n\n        if ( count( $groups ) > 0 )\n        {\n            $groupsNode = $dom->createElement( 'groups' );\n            foreach ( $groups as $group )\n            {\n                unset( $groupNode );\n                $groupNode = $dom->createElement( 'group' );\n                $groupNode->setAttribute( 'name', $group['name'] );\n                $groupsNode->appendChild( $groupNode );\n            }\n            $root->appendChild( $groupsNode );\n        }\n\n        if ( count( $changelog ) > 0 )\n        {\n            $changelogNode = $dom->createElement( 'changelog' );\n            foreach ( $changelog as $changeEntry )\n            {\n                unset( $changeEntryNode );\n                $changeEntryNode = $dom->createElement( 'entry' );\n                $changeEntryNode->setAttribute( 'timestamp', $changeEntry['timestamp'] );\n                $changeEntryNode->setAttribute( 'person', $changeEntry['person'] );\n                $changeEntryNode->setAttribute( 'email', $changeEntry['email'] );\n                $changeEntryNode->setAttribute( 'release', $changeEntry['release'] );\n\n                foreach ( $changeEntry['changes'] as $change )\n                {\n                    unset( $changeEntryChange );\n                    $changeEntryChange = $dom->createElement( 'change' );\n                    $changeEntryChange->appendChild( $dom->createTextNode( $change ) );\n                    $changeEntryNode->appendChild( $changeEntryChange );\n                }\n                $changelogNode->appendChild( $changeEntryNode );\n            }\n            $root->appendChild( $changelogNode );\n        }\n\n        \/\/ Avoid a PHP warning if 'simple-file-list' is not an array\n        if ( is_array( $this->Parameters['simple-file-list'] ) )\n        {\n            $rootSimpleFiles = $dom->createElement( 'simple-files' );\n            foreach( $this->Parameters['simple-file-list'] as $key => $value )\n            {\n                $simpleFileNode = $dom->createElement( 'simple-file' );\n                $simpleFileNode->setAttribute( 'key', $key );\n                $simpleFileNode->setAttribute( 'original-path', $value['original-path'] );\n                $simpleFileNode->setAttribute( 'package-path', $value['package-path'] );\n                $rootSimpleFiles->appendChild( $simpleFileNode );\n                unset( $simpleFileNode );\n            }\n            $root->appendChild( $rootSimpleFiles );\n        }\n        else\n        {\n            $rootSimpleFiles = $dom->createElement( 'simple-files' );\n            $root->appendChild( $rootSimpleFiles );\n        }\n\n        \/\/ Handle files\n        $filesNode = $dom->createElement( 'files' );\n\n        $hasFileItems = false;\n        foreach ( $fileList as $fileCollectionName => $fileCollection )\n        {\n            if ( count( $fileCollection ) > 0 )\n            {\n                $hasFileItems = true;\n\n                unset( $fileCollectionNode );\n                $fileCollectionNode = $dom->createElement( 'collection' );\n                $fileCollectionNode->setAttribute( 'name', $fileCollectionName );\n\n                unset( $fileLists );\n                unset( $fileDesignLists );\n                unset( $fileThumbnailLists );\n                $fileList = array();\n                $fileDesignList = array();\n                $fileINIList = array();\n                $fileThumbnailList = array();\n                $fileListNode = null;\n                foreach ( $fileCollection as $fileItem )\n                {\n                    if ( $fileItem['type'] == 'design' )\n                        $fileListNode =& $fileDesignLists[$fileItem['design']][$fileItem['role']][$fileItem['role-value']][$fileItem['variable-name']];\n                    else if ( $fileItem['type'] == 'ini' )\n                        $fileListNode =& $fileINILists[$fileItem['role']][$fileItem['role-value']][$fileItem['variable-name']];\n                    else if ( $fileItem['type'] == 'thumbnail' )\n                        $fileListNode =& $fileThumbnailLists[$fileItem['role']];\n                    else\n                        $fileListNode =& $fileLists[$fileItem['type']][$fileItem['role']][$fileItem['role-value']][$fileItem['variable-name']];\n\n                    if ( !$fileListNode ||\n                         $fileListNode->getAttribute( 'type' ) != $fileItem['type'] ||\n                         $fileListNode->getAttribute( 'role' ) != $fileItem['role'] ||\n                         $fileListNode->getAttribute( 'role-value' ) != $fileItem['role-value'] ||\n                         $fileListNode->getAttribute( 'variable-name' ) != $fileItem['variable-name'] )\n                    {\n                        unset( $fileListNode );\n                        $fileListNode = $dom->createElement( 'file-list' );\n                        $fileListNode->setAttribute( 'type', $fileItem['type'] );\n\n                        if ( $fileItem['type'] == 'design' )\n                            $fileListNode->setAttribute( 'design', $fileItem['design'] );\n                        if ( $fileItem['role'] )\n                            $fileListNode->setAttribute( 'role', $fileItem['role'] );\n                        if ( $fileItem['role-value'] )\n                            $fileListNode->setAttribute( 'role-value', $fileItem['role-value'] );\n                        if ( $fileItem['variable-name'] )\n                            $fileListNode->setAttribute( 'variable-name', $fileItem['variable-name'] );\n\n                        $fileCollectionNode->appendChild( $fileListNode );\n                    }\n\n                    if ( $fileItem['name'] )\n                    {\n                        unset( $fileListFile );\n                        $fileListFile = $dom->createElement( 'file' );\n                        $fileListFile->setAttribute( 'path', $fileItem['path'] );\n                        $fileListFile->setAttribute( 'name', $fileItem['name'] );\n\n                        if ( $fileItem['md5'] )\n                            $fileListFile->setAttribute( 'md5sum', $fileItem['md5'] );\n\n                        if ( $fileItem['subdirectory'] )\n                            $fileListFile->setAttribute( 'sub-directory', $fileItem['subdirectory'] );\n\n                        $fileListNode->appendChild( $fileListFile );\n                    }\n                }\n                $filesNode->appendChild( $fileCollectionNode );\n            }\n        }\n        if ( $hasFileItems )\n            $root->appendChild( $filesNode );\n\n        $versionNode = $dom->createElement( 'version' );\n        $versionNumberTextNode = $dom->createElement( 'number' );\n        $versionNumberTextNode->appendChild( $dom->createTextNode( $versionNumber ) );\n        $versionNode->appendChild( $versionNumberTextNode );\n        $versionReleaseNumberTextNode = $dom->createElement( 'release' );\n        $versionReleaseNumberTextNode->appendChild( $dom->createTextNode( $releaseNumber ) );\n        $versionNode->appendChild( $versionReleaseNumberTextNode );\n        $root->appendChild( $versionNode );\n\n        if ( $releaseTimestamp )\n        {\n            $rootTimestampTextNode = $dom->createElement( 'timestamp' );\n            $rootTimestampTextNode->appendChild( $dom->createTextNode( $releaseTimestamp ) );\n            $root->appendChild( $rootTimestampTextNode );\n        }\n\n        if ( $licence )\n        {\n            $rootLicenceTextNode = $dom->createElement( 'licence' );\n            $rootLicenceTextNode->appendChild( $dom->createTextNode( $licence ) );\n            $root->appendChild( $rootLicenceTextNode );\n        }\n\n        if ( $state )\n        {\n            $rootStateTextNode = $dom->createElement( 'state' );\n            $rootStateTextNode->appendChild( $dom->createTextNode( $state ) );\n            $root->appendChild( $rootStateTextNode );\n        }\n\n        $dependencyNode = $dom->createElement( 'dependencies' );\n\n        $providesNode = $dom->createElement( 'provides' );\n        $dependencyNode->appendChild( $providesNode );\n        $requiresNode = $dom->createElement( 'requires' );\n        $dependencyNode->appendChild( $requiresNode );\n        $obsoletesNode = $dom->createElement( 'obsoletes' );\n        $dependencyNode->appendChild( $obsoletesNode );\n        $conflictsNode = $dom->createElement( 'conflicts' );\n        $dependencyNode->appendChild( $conflictsNode );\n\n        $this->createDependencyTree( $providesNode, 'provide', $dependencies['provides'] );\n        $this->createDependencyTree( $requiresNode, 'require', $dependencies['requires'] );\n        $this->createDependencyTree( $obsoletesNode, 'obsolete', $dependencies['obsoletes'] );\n        $this->createDependencyTree( $conflictsNode, 'conflict', $dependencies['conflicts'] );\n\n        $root->appendChild( $dependencyNode );\n\n        $installNode = $dom->createElement( 'install' );\n\n        $uninstallNode = $dom->createElement( 'uninstall' );\n\n        $this->createInstallTree( $installNode, $dom, $install, 'install' );\n        $this->createInstallTree( $uninstallNode, $dom, $uninstall, 'uninstall' );\n\n        $root->appendChild( $installNode );\n        $root->appendChild( $uninstallNode );\n\n        if ( count( $this->InstallData ) > 0 )\n        {\n            $installDataNode = $dom->createElement( 'install-data' );\n            foreach ( $this->InstallData as $installDataType => $installData )\n            {\n                if ( count( $installData ) > 0 )\n                {\n                    unset( $dataNode );\n                    $dataNode = $dom->createElement( 'data' );\n                    $dataNode->setAttribute( 'type', $installDataType );\n                    $installDataNode->appendChild( $dataNode );\n                    foreach ( $installData as $installDataName => $installDataValue )\n                    {\n                        if ( is_array( $installDataValue ) )\n                        {\n                            unset( $dataArrayNode );\n                            $dataArrayNode = $dom->createElement( 'array' );\n                            $dataArrayNode->setAttribute( 'name', $installDataName );\n                            $dataNode->appendChild( $dataArrayNode );\n                            foreach ( $installDataValue as $installDataValueName => $installDataValueValue )\n                            {\n                                unset( $dataArrayElement );\n                                $dataArrayElement = $dom->createElement( 'element' );\n                                $dataArrayElement->setAttribute( 'name', $installDataValueName );\n                                $dataArrayElement->setAttribute( 'value', $installDataValueValue );\n                                $dataArrayNode->appendChild( $dataArrayElement );\n                            }\n                        }\n                        else\n                        {\n                            unset( $dataArrayElement );\n                            $dataArrayElement = $dom->createElement( 'element' );\n                            $dataArrayElement->setAttribute( 'name', $installDataName );\n                            $dataArrayElement->setAttribute( 'value', $installDataValue );\n                            $dataNode->appendChild( $dataArrayElement );\n                        }\n                    }\n                }\n            }\n            $root->appendChild( $installDataNode );\n        }\n\n        return $dom;\n    }","label":0}
{"text":"def write_and_convert(self, text):\n        '''\n        \n        '''\n        cursor = 0\n        for match in self.ANSI_RE.finditer(text):\n            start, end = match.span()\n            self.write_plain_text(text, cursor, start)\n            self.convert_ansi(*match.groups())\n            cursor = end\n        self.write_plain_text(text, cursor, len(text))","label":0}
{"text":"@Override\n\tpublic void eSet(int featureID, Object newValue) {\n\t\tswitch (featureID) {\n\t\t\tcase AfplibPackage.GSLJ__LINEJOIN:\n\t\t\t\tsetLINEJOIN((Integer)newValue);\n\t\t\t\treturn;\n\t\t}\n\t\tsuper.eSet(featureID, newValue);\n\t}","label":0}
{"text":"public function getRoles()\n    {\n        $roles = $this->roles;\n\n        foreach ($this->getGroups() as $group) {\n            $roles = array_merge($roles, $group->getRoles());\n        }\n\n        $newRoles = [];\n\n        if ($this->getActiveRole()) {\n            $newRoles = $this->getActiveRole()->getRoles();\n        }\n\n        $finalRoles = array_merge($roles, $newRoles);\n\n        \/\/ we need to make sure to have at least one role\n        $finalRoles[] = static::ROLE_DEFAULT;\n\n        return array_unique($finalRoles);\n    }","label":0}
{"text":"public static function reset($lang = null)\n    {\n        if (is_string($lang)) {\n            unset(static::$_singular[$lang]);\n            unset(static::$_plural[$lang]);\n            return;\n        }\n        static::$_singular = [];\n        static::$_plural = [];\n\n        if ($lang === true) {\n            return;\n        }\n\n        \/**\n         * Initilalize the class with english inflector rules.\n         *\/\n        Inflector::singular('\/([^s])s$\/i', '\\1', 'default');\n        Inflector::plural('\/([^s])$\/i', '\\1s', 'default');\n\n        Inflector::singular('\/(x|z|s|ss|ch|sh)es$\/i', '\\1', 'default');\n        Inflector::plural('\/(x|z|ss|ch|sh)$\/i', '\\1es', 'default');\n\n        Inflector::singular('\/ies$\/i', 'y', 'default');\n        Inflector::plural('\/([^aeiouy]|qu)y$\/i', '\\1ies', 'default');\n\n        Inflector::plural('\/(meta|data)$\/i', '\\1', 'default');\n\n        Inflector::irregular('child', 'children', 'default');\n        Inflector::irregular('equipment', 'equipment', 'default');\n        Inflector::irregular('information', 'information', 'default');\n        Inflector::irregular('man', 'men', 'default');\n        Inflector::irregular('news', 'news', 'default');\n        Inflector::irregular('person', 'people', 'default');\n        Inflector::irregular('woman', 'women', 'default');\n\n        \/**\n         * Warning, using an \"exhastive\" list of rules will slow\n         * down all singularizations\/pluralizations generations.\n         * So it may be preferable to only add the ones you are actually needed.\n         *\n         * Anyhow bellow a list english exceptions which are not covered by the above rules.\n         *\/\n        \/\/ Inflector::irregular('advice', 'advice', 'default');\n        \/\/ Inflector::irregular('aircraft', 'aircraft', 'default');\n        \/\/ Inflector::irregular('alias', 'aliases', 'default');\n        \/\/ Inflector::irregular('alga', 'algae', 'default');\n        \/\/ Inflector::irregular('alumna', 'alumnae', 'default');\n        \/\/ Inflector::irregular('alumnus', 'alumni', 'default');\n        \/\/ Inflector::irregular('analysis', 'analyses', 'default');\n        \/\/ Inflector::irregular('antenna', 'antennae', 'default');\n        \/\/ Inflector::irregular('automaton', 'automata', 'default');\n        \/\/ Inflector::irregular('axis', 'axes', 'default');\n        \/\/ Inflector::irregular('bacillus', 'bacilli', 'default');\n        \/\/ Inflector::irregular('bacterium', 'bacteria', 'default');\n        \/\/ Inflector::irregular('barracks', 'barracks', 'default');\n        \/\/ Inflector::irregular('basis', 'bases', 'default');\n        \/\/ Inflector::irregular('bellows', 'bellows', 'default');\n        \/\/ Inflector::irregular('buffalo', 'buffaloes', 'default');\n        \/\/ Inflector::irregular('bus', 'buses', 'default');\n        \/\/ Inflector::irregular('bison', 'bison', 'default');\n        \/\/ Inflector::irregular('cactus', 'cacti', 'default');\n        \/\/ Inflector::irregular('cafe', 'cafes', 'default');\n        \/\/ Inflector::irregular('calf', 'calves', 'default');\n        \/\/ Inflector::irregular('cargo', 'cargoes', 'default');\n        \/\/ Inflector::irregular('cattle', 'cattle', 'default');\n        \/\/ Inflector::irregular('child', 'children', 'default');\n        \/\/ Inflector::irregular('congratulations', 'congratulations', 'default');\n        \/\/ Inflector::irregular('corn', 'corn', 'default');\n        \/\/ Inflector::irregular('crisis', 'crises', 'default');\n        \/\/ Inflector::irregular('criteria', 'criterion', 'default');\n        \/\/ Inflector::irregular('curriculum', 'curricula', 'default');\n        \/\/ Inflector::irregular('datum', 'data', 'default');\n        \/\/ Inflector::irregular('deer', 'deer', 'default');\n        \/\/ Inflector::irregular('die', 'dice', 'default');\n        \/\/ Inflector::irregular('dregs', 'dregs', 'default');\n        \/\/ Inflector::irregular('duck', 'duck', 'default');\n        \/\/ Inflector::irregular('echo', 'echos', 'default');\n        \/\/ Inflector::irregular('elf', 'elves', 'default');\n        \/\/ Inflector::irregular('ellipsis', 'ellipses', 'default');\n        \/\/ Inflector::irregular('embargo', 'embargoes', 'default');\n        \/\/ Inflector::irregular('equipment', 'equipment', 'default');\n        \/\/ Inflector::irregular('erratum', 'errata', 'default');\n        \/\/ Inflector::irregular('evidence', 'evidence', 'default');\n        \/\/ Inflector::irregular('eyeglasses', 'eyeglasses', 'default');\n        \/\/ Inflector::irregular('fish', 'fish', 'default');\n        \/\/ Inflector::irregular('focus', 'foci', 'default');\n        \/\/ Inflector::irregular('foot', 'feet', 'default');\n        \/\/ Inflector::irregular('fungus', 'fungi', 'default');\n        \/\/ Inflector::irregular('gallows', 'gallows', 'default');\n        \/\/ Inflector::irregular('genus', 'genera', 'default');\n        \/\/ Inflector::irregular('goose', 'geese', 'default');\n        \/\/ Inflector::irregular('gold', 'gold', 'default');\n        \/\/ Inflector::irregular('grotto', 'grottoes', 'default');\n        \/\/ Inflector::irregular('gymnasium', 'gymnasia', 'default');\n        \/\/ Inflector::irregular('half', 'halves', 'default');\n        \/\/ Inflector::irregular('headquarters', 'headquarters', 'default');\n        \/\/ Inflector::irregular('hoof', 'hooves', 'default');\n        \/\/ Inflector::irregular('hypothesis', 'hypotheses', 'default');\n        \/\/ Inflector::irregular('information', 'information', 'default');\n        \/\/ Inflector::irregular('graffito', 'graffiti', 'default');\n        \/\/ Inflector::irregular('half', 'halves', 'default');\n        \/\/ Inflector::irregular('hero', 'heroes', 'default');\n        \/\/ Inflector::irregular('jewelry', 'jewelry', 'default');\n        \/\/ Inflector::irregular('kin', 'kin', 'default');\n        \/\/ Inflector::irregular('knife', 'knives', 'default');\n        \/\/ Inflector::irregular('larva', 'larvae', 'default');\n        \/\/ Inflector::irregular('leaf', 'leaves', 'default');\n        \/\/ Inflector::irregular('legislation', 'legislation', 'default');\n        \/\/ Inflector::irregular('life', 'lives', 'default');\n        \/\/ Inflector::irregular('loaf', 'loaves', 'default');\n        \/\/ Inflector::irregular('locus', 'loci', 'default');\n        \/\/ Inflector::irregular('louse', 'lice', 'default');\n        \/\/ Inflector::irregular('luck', 'luck', 'default');\n        \/\/ Inflector::irregular('luggage', 'luggage', 'default');\n        \/\/ Inflector::irregular('man', 'men', 'default');\n        \/\/ Inflector::irregular('mathematics', 'mathematics', 'default');\n        \/\/ Inflector::irregular('matrix', 'matrices', 'default');\n        \/\/ Inflector::irregular('means', 'means', 'default');\n        \/\/ Inflector::irregular('measles', 'measles', 'default');\n        \/\/ Inflector::irregular('medium', 'media', 'default');\n        \/\/ Inflector::irregular('memorandum', 'memoranda', 'default');\n        \/\/ Inflector::irregular('money', 'monies', 'default');\n        \/\/ Inflector::irregular('moose', 'moose', 'default');\n        \/\/ Inflector::irregular('mosquito', 'mosquitoes', 'default');\n        \/\/ Inflector::irregular('motto', 'mottoes', 'default');\n        \/\/ Inflector::irregular('mouse', 'mice', 'default');\n        \/\/ Inflector::irregular('mumps', 'mumps', 'default');\n        \/\/ Inflector::irregular('music', 'music', 'default');\n        \/\/ Inflector::irregular('mythos', 'mythoi', 'default');\n        \/\/ Inflector::irregular('nebula', 'nebulae', 'default');\n        \/\/ Inflector::irregular('neurosis', 'neuroses', 'default');\n        \/\/ Inflector::irregular('news', 'news', 'default');\n        \/\/ Inflector::irregular('nucleus', 'nuclei', 'default');\n        \/\/ Inflector::irregular('numen', 'numina', 'default');\n        \/\/ Inflector::irregular('oasis', 'oases', 'default');\n        \/\/ Inflector::irregular('oats', 'oats', 'default');\n        \/\/ Inflector::irregular('octopus', 'octopuses', 'default');\n        \/\/ Inflector::irregular('offspring', 'offspring', 'default');\n        \/\/ Inflector::irregular('ovum', 'ova', 'default');\n        \/\/ Inflector::irregular('ox', 'oxen', 'default');\n        \/\/ Inflector::irregular('pajamas', 'pajamas', 'default');\n        \/\/ Inflector::irregular('pants', 'pants', 'default');\n        \/\/ Inflector::irregular('paralysis', 'paralyses', 'default');\n        \/\/ Inflector::irregular('parenthesis', 'parentheses', 'default');\n        \/\/ Inflector::irregular('person', 'people', 'default');\n        \/\/ Inflector::irregular('phenomenon', 'phenomena', 'default');\n        \/\/ Inflector::irregular('pike', 'pike', 'default');\n        \/\/ Inflector::irregular('plankton', 'plankton', 'default');\n        \/\/ Inflector::irregular('pliers', 'pliers', 'default');\n        \/\/ Inflector::irregular('polyhedron', 'polyhedra', 'default');\n        \/\/ Inflector::irregular('potato', 'potatoes', 'default');\n        \/\/ Inflector::irregular('quiz', 'quizzes', 'default');\n        \/\/ Inflector::irregular('radius', 'radii', 'default');\n        \/\/ Inflector::irregular('roof', 'roofs', 'default');\n        \/\/ Inflector::irregular('salmon', 'salmon', 'default');\n        \/\/ Inflector::irregular('scarf', 'scarves', 'default');\n        \/\/ Inflector::irregular('scissors', 'scissors', 'default');\n        \/\/ Inflector::irregular('self', 'selves', 'default');\n        \/\/ Inflector::irregular('series', 'series', 'default');\n        \/\/ Inflector::irregular('shears', 'shears', 'default');\n        \/\/ Inflector::irregular('sheep', 'sheep', 'default');\n        \/\/ Inflector::irregular('shelf', 'shelves', 'default');\n        \/\/ Inflector::irregular('shorts', 'shorts', 'default');\n        \/\/ Inflector::irregular('silver', 'silver', 'default');\n        \/\/ Inflector::irregular('species', 'species', 'default');\n        \/\/ Inflector::irregular('squid', 'squid', 'default');\n        \/\/ Inflector::irregular('stimulus', 'stimuli', 'default');\n        \/\/ Inflector::irregular('stratum', 'strata', 'default');\n        \/\/ Inflector::irregular('swine', 'swine', 'default');\n        \/\/ Inflector::irregular('syllabus', 'syllabi', 'default');\n        \/\/ Inflector::irregular('synopsis', 'synopses', 'default');\n        \/\/ Inflector::irregular('synthesis', 'syntheses', 'default');\n        \/\/ Inflector::irregular('tax', 'taxes', 'default');\n        \/\/ Inflector::irregular('terminus', 'termini', 'default');\n        \/\/ Inflector::irregular('thesis', 'theses', 'default');\n        \/\/ Inflector::irregular('thief', 'thieves', 'default');\n        \/\/ Inflector::irregular('tomato', 'tomatoes', 'default');\n        \/\/ Inflector::irregular('tongs', 'tongs', 'default');\n        \/\/ Inflector::irregular('tooth', 'teeth', 'default');\n        \/\/ Inflector::irregular('torpedo', 'torpedoes', 'default');\n        \/\/ Inflector::irregular('torus', 'tori', 'default');\n        \/\/ Inflector::irregular('trousers', 'trousers', 'default');\n        \/\/ Inflector::irregular('trout', 'trout', 'default');\n        \/\/ Inflector::irregular('tweezers', 'tweezers', 'default');\n        \/\/ Inflector::irregular('vertebra', 'vertebrae', 'default');\n        \/\/ Inflector::irregular('vertex', 'vertices', 'default');\n        \/\/ Inflector::irregular('vespers', 'vespers', 'default');\n        \/\/ Inflector::irregular('veto', 'vetoes', 'default');\n        \/\/ Inflector::irregular('volcano', 'volcanoes', 'default');\n        \/\/ Inflector::irregular('vortex', 'vortices', 'default');\n        \/\/ Inflector::irregular('vita', 'vitae', 'default');\n        \/\/ Inflector::irregular('virus', 'viri', 'default');\n        \/\/ Inflector::irregular('wheat', 'wheat', 'default');\n        \/\/ Inflector::irregular('wife', 'wives', 'default');\n        \/\/ Inflector::irregular('wolf', 'wolves', 'default');\n        \/\/ Inflector::irregular('woman', 'women', 'default');\n        \/\/ Inflector::irregular('zero', 'zeros', 'default');\n    }","label":0}
{"text":"func (s *ImportJobResponse) SetCompletedPieces(v int64) *ImportJobResponse {\n\ts.CompletedPieces = &v\n\treturn s\n}","label":0}
{"text":"public function assertStringNotMatchesFormat($format, $message = '')\n    {\n        Assert::assertStringNotMatchesFormat($format, $this->getData(), $message);\n\n        return $this;\n    }","label":0}
{"text":"func (r *Repository) GetContributorsURL() string {\n\tif r == nil || r.ContributorsURL == nil {\n\t\treturn \"\"\n\t}\n\treturn *r.ContributorsURL\n}","label":0}
{"text":"public String getString(final String key) {\n    if (containsKey(key)) {\n      return get(key);\n    } else {\n      throw new UndefinedPropertyException(\"Missing required property '\" + key\n          + \"'\");\n    }\n  }","label":0}
{"text":"protected function addFilterByFk(&$script, $fk)\n    {\n        $this->declareClasses(\n            '\\Propel\\Runtime\\Collection\\ObjectCollection',\n            '\\Propel\\Runtime\\Exception\\PropelException'\n        );\n        $table = $this->getTable();\n        $queryClass = $this->getQueryClassName();\n        $fkTable = $fk->getForeignTable();\n        $fkStubObjectBuilder = $this->getNewStubObjectBuilder($fkTable);\n        $this->declareClassFromBuilder($fkStubObjectBuilder);\n        $fkPhpName = $this->getClassNameFromBuilder($fkStubObjectBuilder, true);\n        $relationName = $this->getFKPhpNameAffix($fk);\n        $objectName = '$' . $fkTable->getCamelCaseName();\n        $script .= \"\n    \/**\n     * Filter the query by a related $fkPhpName object\n     *\";\n        if ($fk->isComposite()) {\n            $script .= \"\n     * @param $fkPhpName $objectName The related object to use as filter\";\n        } else {\n            $script .= \"\n     * @param $fkPhpName|ObjectCollection $objectName The related object(s) to use as filter\";\n        }\n        $script .= \"\n     * @param string \\$comparison Operator to use for the column comparison, defaults to Criteria::EQUAL\n     *\n     * @throws \\\\Propel\\\\Runtime\\\\Exception\\\\PropelException\n     *\n     * @return $queryClass The current query, for fluid interface\n     *\/\n    public function filterBy$relationName($objectName, \\$comparison = null)\n    {\n        if ($objectName instanceof $fkPhpName) {\n            return \\$this\";\n\n        foreach ($fk->getMapping() as $mapping) {\n            list($localColumn, $rightValueOrColumn) = $mapping;\n            if ($rightValueOrColumn instanceof Column) {\n                $script .= \"\n                ->addUsingAlias(\" . $this->getColumnConstant($localColumn) . \", \" . $objectName . \"->get\" . $rightValueOrColumn->getPhpName() . \"(), \\$comparison)\";\n            } else {\n                $value = var_export($rightValueOrColumn, true);\n                $script .= \"\n                ->addUsingAlias(\" . $this->getColumnConstant($localColumn) . \", $value, \\$comparison)\";\n            }\n        }\n\n        $script .= \";\";\n        if (!$fk->isComposite()) {\n            $localColumnConstant = $this->getColumnConstant($fk->getLocalColumn());\n            $foreignColumnName = $fk->getForeignColumn()->getPhpName();\n            $keyColumn = $fk->getForeignTable()->hasCompositePrimaryKey() ? $foreignColumnName : 'PrimaryKey';\n            $script .= \"\n        } elseif ($objectName instanceof ObjectCollection) {\n            if (null === \\$comparison) {\n                \\$comparison = Criteria::IN;\n            }\n\n            return \\$this\n                ->addUsingAlias($localColumnConstant, {$objectName}->toKeyValue('$keyColumn', '$foreignColumnName'), \\$comparison);\";\n        }\n        $script .= \"\n        } else {\";\n        if ($fk->isComposite()) {\n            $script .= \"\n            throw new PropelException('filterBy$relationName() only accepts arguments of type $fkPhpName');\";\n        } else {\n            $script .= \"\n            throw new PropelException('filterBy$relationName() only accepts arguments of type $fkPhpName or Collection');\";\n        }\n        $script .= \"\n        }\n    }\n\";\n    }","label":0}
{"text":"func (prc *Processor) Process(nim image.Image, params imageserver.Params) (image.Image, error) {\n\tif !params.Has(param) {\n\t\treturn nim, nil\n\t}\n\tparams, err := params.GetParams(param)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tif params.Empty() {\n\t\treturn nim, nil\n\t}\n\tnim, err = prc.process(nim, params)\n\tif err != nil {\n\t\tif err, ok := err.(*imageserver.ParamError); ok {\n\t\t\terr.Param = fmt.Sprintf(\"%s.%s\", param, err.Param)\n\t\t}\n\t\treturn nil, err\n\t}\n\treturn nim, nil\n}","label":0}
{"text":"public void insert_us(final int[] argIn) {\n\t\tattributeValue_5.data_format = AttrDataFormat.FMT_UNKNOWN;\n\t\tfinal short[] values = new short[argIn.length];\n\t\tfor (int i = 0; i < argIn.length; i++) {\n\t    \tvalues[i] = (short) (argIn[i] & 0xFFFF);\n\t\t}\n\t\tattributeValue_5.w_dim.dim_x = argIn.length;\n\t\tattributeValue_5.w_dim.dim_y = 0;\n\t\tif (use_union) {\n\t    \tattributeValue_5.value.ushort_att_value(values);\n\t\t} else {\n\t    \tdeviceAttribute_3.insert_us(argIn);\n\t\t}\n    }","label":0}
{"text":"def poll(args):\n    \"\"\"\"\"\"\n    backend = _get_backend(args)\n    poller = MiFloraPoller(args.mac, backend)\n    print(\"Getting data from Mi Flora\")\n    print(\"FW: {}\".format(poller.firmware_version()))\n    print(\"Name: {}\".format(poller.name()))\n    print(\"Temperature: {}\".format(poller.parameter_value(MI_TEMPERATURE)))\n    print(\"Moisture: {}\".format(poller.parameter_value(MI_MOISTURE)))\n    print(\"Light: {}\".format(poller.parameter_value(MI_LIGHT)))\n    print(\"Conductivity: {}\".format(poller.parameter_value(MI_CONDUCTIVITY)))\n    print(\"Battery: {}\".format(poller.parameter_value(MI_BATTERY)))","label":0}
{"text":"public function detachRole($role, $reload = true)\n    {\n        event(new DetachingRoleFromUser($this, $role));\n        $results = $this->roles()->detach($role);\n        event(new DetachedRoleFromUser($this, $role, $results));\n\n        $this->loadRoles($reload);\n\n        return $results;\n    }","label":0}
{"text":"@Override\r\n    public ReisMogelijkheden getModel(InputStream stream) {\r\n        SimpleDateFormat format = new SimpleDateFormat(NsApi.DATETIME_FORMAT);\r\n        try {\r\n            Xml xml = Xml.getXml(stream, \"ReisMogelijkheden\");\r\n            List<ReisMogelijkheid> reisMogelijkheden = new ArrayList<>(xml.children(\"ReisMogelijkheid\")\r\n                    .size());\r\n            for (Xml reisMogelijkheidXml : xml.children(\"ReisMogelijkheid\")) {\r\n                List<Melding> meldingen = new LinkedList<>();\r\n                if (reisMogelijkheidXml.isPresent(\"Melding\")) {\r\n                    for (Xml meldingXml : reisMogelijkheidXml.children(\"Melding\")) {\r\n                        String id = meldingXml.child(\"Id\").content();\r\n                        boolean ernstig = Boolean.parseBoolean(meldingXml.child(\"Ernstig\").content());\r\n                        String text = meldingXml.child(\"Text\").content();\r\n                        meldingen.add(new Melding(id, ernstig, text));\r\n                    }\r\n                }\r\n                int aantalOverstappen = Integer.parseInt(reisMogelijkheidXml.child(\"AantalOverstappen\").content());\r\n                int geplandeReisTijdMinuten = getReistijdInMinuten(reisMogelijkheidXml.child(\"GeplandeReisTijd\")\r\n                        .content());\r\n                int actueleReisTijdMinuten = getReistijdInMinuten(reisMogelijkheidXml.child(\"ActueleReisTijd\")\r\n                        .content());\r\n                boolean optimaal = true;\r\n                if (reisMogelijkheidXml.isPresent(\"Optimaal\")) {\r\n                    optimaal = Boolean.parseBoolean(reisMogelijkheidXml.child(\"Optimaal\").content());\r\n                }\r\n                Date geplandeVertrekTijd = format.parse(reisMogelijkheidXml.child(\"GeplandeVertrekTijd\").content());\r\n                Date actueleVertrekTijd = format.parse(reisMogelijkheidXml.child(\"ActueleVertrekTijd\").content());\r\n                Date geplandeAankomstTijd = format.parse(reisMogelijkheidXml.child(\"GeplandeAankomstTijd\").content());\r\n                Date actueleAankomstTijd = format.parse(reisMogelijkheidXml.child(\"ActueleAankomstTijd\").content());\r\n                String aankomstVertraging = reisMogelijkheidXml.child(\"AankomstVertraging\").content();\r\n                String status = reisMogelijkheidXml.child(\"Status\").content();\r\n                List<ReisDeel> reisDelen = new ArrayList<>(reisMogelijkheidXml.children(\"ReisDeel\").size());\r\n                for (Xml reisDeelXml : reisMogelijkheidXml.children(\"ReisDeel\")) {\r\n                    String reisSoort = reisDeelXml.attr(\"reisSoort\");\r\n                    String vervoerder = reisDeelXml.child(\"Vervoerder\").content();\r\n                    String vervoerType = reisDeelXml.child(\"VervoerType\").content();\r\n                    int ritNummer = Integer.parseInt(reisDeelXml.child(\"RitNummer\").content());\r\n                    String statusReisdeel = reisDeelXml.child(\"Status\").content();\r\n                    String geplandeStoringId = reisDeelXml.child(\"GeplandeStoringId\").content();\r\n                    String ongeplandeStoringId = reisDeelXml.child(\"OngeplandeStoringId\").content();\r\n                    List<ReisStop> reisStops = new ArrayList<>(reisDeelXml.children(\"ReisStop\").size());\r\n                    for (Xml reisStopXml : reisDeelXml.children(\"ReisStop\")) {\r\n                        String naam = reisStopXml.child(\"Naam\").content();\r\n                        Date tijd = format.parse(reisStopXml.child(\"Tijd\").content());\r\n                        String spoor = reisStopXml.child(\"Spoor\").content();\r\n                        boolean gewijzigdVertrekspoor = false;\r\n                        if (spoor != null) {\r\n                            gewijzigdVertrekspoor = Boolean.parseBoolean(reisStopXml.child(\"Spoor\").attr(\"wijziging\"));\r\n                        }\r\n                        reisStops.add(new ReisStop(naam, tijd, spoor, gewijzigdVertrekspoor));\r\n                    }\r\n                    List<String> reisDetails = new ArrayList<>(reisDeelXml.child(\"Reisdetails\")\r\n                            .children(\"Reisdetail\").size());\r\n                    for (Xml reisDetailXml : reisDeelXml.child(\"Reisdetails\").children(\"Reisdetail\")) {\r\n                        reisDetails.add(reisDetailXml.content());\r\n                    }\r\n                    reisDelen.add(new ReisDeel(reisSoort, vervoerder, vervoerType, ritNummer, statusReisdeel,\r\n                            reisStops, ongeplandeStoringId, geplandeStoringId, reisDetails));\r\n                }\r\n                reisMogelijkheden.add(new ReisMogelijkheid(meldingen, aantalOverstappen, geplandeReisTijdMinuten,\r\n                        actueleReisTijdMinuten, aankomstVertraging, optimaal, geplandeVertrekTijd, actueleVertrekTijd,\r\n                        geplandeAankomstTijd, actueleAankomstTijd, status, reisDelen));\r\n            }\r\n            return new ReisMogelijkheden(reisMogelijkheden);\r\n        }\r\n        catch (ParseException e) {\r\n            logger.error(\"Error parsing stream to actuele vertrektijden\", e);\r\n            throw new NsApiException(\"Error parsing stream to actuele vertrektijden\", e);\r\n        }\r\n    }","label":0}
{"text":"function inspectInstance(target, cache) {\n        \/\/ If browser has no define property it means it is too old and\n        \/\/ in that case we return the target itself.\n        \/\/ This could be improved but I think it does not worth the trouble\n        if (!hasDefineProperty) {\n            return target;\n        }\n\n        var def,\n            simpleConstructor,\n            methodsCache,\n            propertiesCache,\n            obj,\n            tmp,\n            key;\n\n        obj = fetchCache(target, cache.instances);\n        if (obj) {\n            return obj;\n        }\n\n        def = target.$static[$class];\n        simpleConstructor = def.simpleConstructor;\n        methodsCache = target[cacheKeyword].methods;\n        propertiesCache = target[cacheKeyword].properties;\n\n        obj = createObject(simpleConstructor.prototype);\n        cache.instances.push({ target: target, inspect: obj });\n\n        \/\/ Methods\n        for (key in target[redefinedCacheKeyword].methods) {\n            obj[key] = inspect(methodsCache[key], cache, true);\n        }\n\n        \/\/ Properties\n        for (key in target[redefinedCacheKeyword].properties) {\n            tmp = hasOwn(propertiesCache, key) ? propertiesCache[key] : target[key];\n            obj[key] = inspect(tmp, cache, true);\n        }\n\n        \/\/ Handle undeclared properties\n        methodsCache = def.methods;\n        propertiesCache = def.properties;\n        for (key in target) {\n            if (hasOwn(target, key) && !hasOwn(obj, key) && !propertiesCache[key] && !methodsCache[key]) {\n                obj[key] = inspect(target[key], cache, true);\n            }\n        }\n\n        \/\/ Fix the .constructor\n        tmp = obj.constructor.$constructor;\n        while (tmp) {\n            inspectConstructor(tmp, cache, true);\n            tmp = tmp.$parent;\n        }\n\n        return obj;\n    }","label":0}
{"text":"private void validateResource(List<ValidationMessage> errors, WrapperElement resource, WrapperElement element, StructureDefinition profile, IdStatus idstatus, NodeStack stack) throws FHIRException {\n    if (stack == null)\n      stack = new NodeStack(element.isXml());\n\t\tif (resource == null)\n\t\t\tresource = element;\n\n    \/\/ getting going - either we got a profile, or not.\n    boolean ok = true;\n    if (element.isXml()) {\n      ok = rule(errors, IssueType.INVALID, element.line(), element.col(), \"\/\", element.getNamespace().equals(FormatUtilities.FHIR_NS),\n          \"Namespace mismatch - expected '\" + FormatUtilities.FHIR_NS + \"', found '\" + element.getNamespace() + \"'\");\n    }\n    if (ok) {\n      String resourceName = element.getResourceType();\n      if (profile == null) {\n        profile = context.fetchResource(StructureDefinition.class, \"http:\/\/hl7.org\/fhir\/StructureDefinition\/\" + resourceName);\n        ok = rule(errors, IssueType.INVALID, element.line(), element.col(), stack.addToLiteralPath(resourceName), profile != null, \"No profile found for resource type '\" + resourceName + \"'\");\n      } else {\n        String type = profile.hasConstrainedType() ? profile.getConstrainedType() : profile.getName();\n        \/\/ special case: we have a bundle, and the profile is not for a bundle. We'll try the first entry instead\n        if (!type.equals(resourceName) && resourceName.equals(\"Bundle\")) {\n          WrapperElement first = getFirstEntry(element);\n          if (first != null && first.getResourceType().equals(type)) {\n            element = first;\n            resourceName = element.getResourceType();\n\t\t\t\t\t\tidstatus = IdStatus.OPTIONAL; \/\/ why?\n          }\n        }\n        ok = rule(errors, IssueType.INVALID, -1, -1, stack.addToLiteralPath(resourceName), type.equals(resourceName),\n            \"Specified profile type was '\" + profile.getConstrainedType() + \"', but resource type was '\" + resourceName + \"'\");\n      }\n    }\n\n    if (ok) {\n      stack = stack.push(element, -1, profile.getSnapshot().getElement().get(0), profile.getSnapshot().getElement().get(0));\n\t\t\tif (idstatus == IdStatus.REQUIRED && (element.getNamedChild(\"id\") == null))\n\t\t\t\trule(errors, IssueType.INVALID, element.line(), element.col(), stack.getLiteralPath(), false, \"Resource requires an id, but none is present\");\n\t\t\telse if (idstatus == IdStatus.PROHIBITED && (element.getNamedChild(\"id\") != null))\n\t\t\t\trule(errors, IssueType.INVALID, element.line(), element.col(), stack.getLiteralPath(), false, \"Resource has an id, but none is allowed\");\n\t\t\tstart(errors, resource, element, profile, stack); \/\/ root is both definition and type\n    }\n  }","label":0}
{"text":"public function get($node = null)\n    {\n        if ($node !== null) {\n            $nodes         = explode(':', $node);\n            $configuration = $this->getConfiguration();\n            foreach ($nodes as $node) {\n                $configuration = $configuration->{$node};\n            }\n        } else {\n            $configuration = $this->getConfiguration();\n        }\n\n        return $configuration;\n    }","label":0}
{"text":"def libvlc_media_event_manager(p_md):\n    '''\n    '''\n    f = _Cfunctions.get('libvlc_media_event_manager', None) or \\\n        _Cfunction('libvlc_media_event_manager', ((1,),), class_result(EventManager),\n                    ctypes.c_void_p, Media)\n    return f(p_md)","label":0}
{"text":"def used_images\n      result = content.scan(\/!\\[.*\\]\\(.*\\\/image\\\/(\\d.*)\\\/.*\\)\/)\n      image_ids = result.nil? ? nil : result.map{ |i| i[0].to_i }.uniq\n      image_ids\n    end","label":0}
{"text":"private Object timedGet(long nanos) throws TimeoutException {\n        if (Thread.interrupted())\n            return null;\n        if (nanos > 0L) {\n            long d = System.nanoTime() + nanos;\n            long deadline = (d == 0L) ? 1L : d; \/\/ avoid 0\n            Signaller q = null;\n            boolean queued = false;\n            Object r;\n            while ((r = result) == null) { \/\/ similar to untimed, without spins\n                if (q == null)\n                    q = new Signaller(true, nanos, deadline);\n                else if (!queued)\n                    queued = tryPushStack(q);\n                else if (q.nanos <= 0L)\n                    break;\n                else {\n                    try {\n                        ForkJoinPool.managedBlock(q);\n                    } catch (InterruptedException ie) {\n                        q.interrupted = true;\n                    }\n                    if (q.interrupted)\n                        break;\n                }\n            }\n            if (q != null)\n                q.thread = null;\n            if (r != null)\n                postComplete();\n            else\n                cleanStack();\n            if (r != null || (q != null && q.interrupted))\n                return r;\n        }\n        throw new TimeoutException();\n    }","label":0}
{"text":"final public function __send()\n    {\n        $args   = func_get_args();\n        $method = array_shift($args);\n\n        if ($this->__respondTo($method)) {\n            return call_user_func_array(array($this, $method), $args);\n        }\n\n        $message = new KoineString(\"Undefined method '\");\n        $message->append($method)->append(\"' for \")->append($this->getClass());\n        throw new NoMethodException($message);\n    }","label":0}
{"text":"func deserializeToken(token string) (*messages.DelegationToken, error) {\n\tblob, err := base64.RawURLEncoding.DecodeString(token)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tif len(blob) > maxTokenSize {\n\t\treturn nil, fmt.Errorf(\"the delegation token is too big (%d bytes)\", len(blob))\n\t}\n\ttok := &messages.DelegationToken{}\n\tif err = proto.Unmarshal(blob, tok); err != nil {\n\t\treturn nil, err\n\t}\n\treturn tok, nil\n}","label":0}
{"text":"public int read( char[] cbuf, int off, int len ) throws IOException\n    {\n        \/\/check the buffer queue\n        int size = queue.size();\n        if ( size > 0 ) {\n            \/\/TODO\n            \/\/int num = size <= len ? size : len;\n            \/\/System.arraycopy(src, srcPos, dest, destPos, length)\n            throw new IOException(\"Method not implemented yet\");\n        }\n        \n        return reader.read(cbuf, off, len);\n    }","label":0}
{"text":"public function findHeader($level = 1, $id = null, array $relations = array())\n    {\n        return new Accessor\\HeadingAccessor($level, $id, $relations, $this->con);\n    }","label":0}
{"text":"public static DeserializerStringCache from(DeserializationContext context) {\n        return withCache(context, cache -> {\n            if (cache == null) {\n                cache = new DeserializerStringCache(new HashMap<CharBuffer, String>(),\n                        new HashMap<CharBuffer, String>());\n            }\n            return cache;\n        });\n    }","label":0}
{"text":"func (cmd *Cmd) oneCmd(line string) (stop bool) {\n\tif cmd.GetBoolVar(\"timing\") {\n\t\tstart := time.Now()\n\t\tdefer func() {\n\t\t\td := time.Since(start).Truncate(time.Millisecond)\n\t\t\tcmd.SetVar(\"elapsed\", d.Seconds())\n\n\t\t\tif !cmd.SilentResult() {\n\t\t\t\tfmt.Println(\"Elapsed:\", d)\n\t\t\t}\n\t\t}()\n\t}\n\n\tif cmd.GetBoolVar(\"echo\") {\n\t\tfmt.Println(cmd.Prompt, line)\n\t}\n\n\tif cmd.EnableShell && strings.HasPrefix(line, \"!\") {\n\t\tshellExec(line[1:])\n\t\treturn\n\t}\n\n\tvar cname, params string\n\n\tparts := strings.SplitN(line, \" \", 2)\n\n\tcname = parts[0]\n\tif len(parts) > 1 {\n\t\tparams = strings.TrimSpace(parts[1])\n\t}\n\n\tif command, ok := cmd.Commands[cname]; ok {\n\t\tstop = command.Call(params)\n\t} else {\n\t\tcmd.Default(line)\n\t}\n\n\treturn\n}","label":0}
{"text":"public function extractKeys() {\n    if (!$this->hasScalarKeys()) {\n      throw new \\DomainException('Cannot extract non-scalar keys from array lookup ' . $this);\n    }\n    return array_map(function(ScalarNode $key) { return $key->toValue(); }, $this->getKeys());\n  }","label":0}
{"text":"protected String getI18n(final String aMessageKey, final File aFile) {\n        return StringUtils.normalizeWS(myBundle.get(aMessageKey, aFile.getAbsolutePath()));\n    }","label":0}
{"text":"public function getCollectorsForSurvey($surveyId, array $filters = [])\n\t{\n\t\treturn $this->sendRequest(\n\t\t\t$this->createRequest('GET', sprintf('surveys\/%s\/collectors', $surveyId), [ \n\t\t\t\t'query' => $filters \n\t\t\t])\n\t\t);\n\t}","label":0}
{"text":"func (a *AsyncMultiTokenSink) AddEvents(ctx context.Context, events []*event.Event) (err error) {\n\tif token := ctx.Value(TokenCtxKey); token != nil {\n\t\terr = a.AddEventsWithToken(token.(string), events)\n\t} else {\n\t\terr = fmt.Errorf(\"no value was found on the context with key '%s'\", TokenCtxKey)\n\t}\n\treturn\n}","label":0}
{"text":"def content_location(self) -> Optional[UnstructuredHeader]:\n        \"\"\"\"\"\"\n        try:\n            return cast(UnstructuredHeader, self[b'content-location'][0])\n        except (KeyError, IndexError):\n            return None","label":0}
{"text":"public synchronized List<ChainData> getRunningChains(ChannelDataImpl parent) {\n        if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled()) {\n            Tr.entry(tc, \"getRunningChains\");\n        }\n        ChannelContainer channelContainer = null;\n        List<ChainData> chainDataList = new ArrayList<ChainData>();\n\n        \/\/ Iterate the children - they are in the runtime.\n        Iterator<ChildChannelDataImpl> children = parent.children();\n        while (children.hasNext()) {\n            \/\/ Get the runtime channel container for this child.\n            channelContainer = this.channelRunningMap.get(children.next().getName());\n            for (Chain chain : channelContainer.getChainMap().values()) {\n                chainDataList.add(chain.getChainData());\n            }\n        }\n        if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled()) {\n            Tr.exit(tc, \"getRunningChains: \" + chainDataList.size());\n        }\n        return chainDataList;\n    }","label":0}
{"text":"function writeConfig(json) {\n  if (!skyuxConfigOriginal) {\n    skyuxConfigOriginal = JSON.parse(fs.readFileSync(skyuxConfigPath));\n  }\n\n  fs.writeFileSync(skyuxConfigPath, JSON.stringify(json), 'utf8');\n}","label":0}
{"text":"def _flush_pending_events(self):\n        '''\n        \n        '''\n        while len(self._pending_events) and \\\n                isinstance(self._pending_events[0], Frame):\n            self._connection.send_frame(self._pending_events.popleft())","label":0}
{"text":"public function buildSqlQuery(IndexQueryInterface $query, array $columns = null)\n    {\n        $queryString = sprintf(\"SELECT `%s` FROM `%s`\", implode(\"`,`\", $columns), $query->getName());\n\n        if (\"\" !== $criteria = $this->buildSqlConditions($query)) {\n            $queryString .= sprintf(\" WHERE %s\", $criteria);\n        }\n\n        if (null !== $limit = $query->getLimit()) {\n            $queryString .= sprintf(\" LIMIT %d\", $limit);\n        }\n\n        return $queryString;\n    }","label":0}
{"text":"public function ContextsForYear( $year, $matchEndDate = true )\r\n\t{\r\n\t\t$filtered = array_filter( $this->contexts, function ( $context ) use( $year, $matchEndDate ) {\r\n\r\n\t\t\t\/\/ The context may be invalid in which case exclude\r\n\t\t\tif ( ! isset( $context['period'] ) ) return false;\r\n\r\n\t\t\t\/\/ All contexts have start so get the year\r\n\t\t\t$parts = explode( \"-\", $context['period'][ $matchEndDate ? 'endDate' : 'startDate' ] );\r\n\r\n\t\t\t\/\/ If the year matches then it's good\r\n\t\t\t\/\/ if ( $parts[0] == $year ) return true;\r\n\r\n\t\t\t\/\/ \/\/ If the context is an instant then start == end and since the start failed the end will also fail\r\n\t\t\t\/\/ if ( $context['period']['is_instant'] ) return false;\r\n            \/\/\r\n\t\t\t\/\/ \/\/ Its a duration so check the end\r\n\t\t\t\/\/ $parts = explode( \"-\", $context['period']['C'] );\r\n\t\t\treturn $parts[0] == $year;\r\n\r\n\t\t}  );\r\n\r\n\t\treturn new ContextsFilter( $this->instance, $filtered );\r\n\t}","label":0}
{"text":"public static void appendMailto (final StringBuilder out, final String in, final int start, final int end)\n  {\n    for (int i = start; i < end; i++)\n    {\n      final char c = in.charAt (i);\n      final int r = rnd ();\n      switch (c)\n      {\n        case '&':\n        case '<':\n        case '>':\n        case '\"':\n        case '\\'':\n        case '@':\n          if (r < 512)\n            _appendDecEntity (out, c);\n          else\n            _appendHexEntity (out, c);\n          break;\n        default:\n          if (r < 32)\n            out.append (c);\n          else\n            if (r < 520)\n              _appendDecEntity (out, c);\n            else\n              _appendHexEntity (out, c);\n          break;\n      }\n    }\n  }","label":0}
{"text":"public function set($key, $value)\n    {\n        $keys = explode('.', $key);\n\n        $data = &$this->parameters;\n\n        while (count($keys) > 1) {\n            $pkey = $keys[0];\n\n            if (!array_key_exists($pkey, $data) || !is_array($data[$pkey])) {\n                $data[$pkey] = [];\n            }\n\n            $data = &$data[$pkey];\n            array_shift($keys);\n        }\n\n        $data[$keys[0]] = $value;\n\n        return $this;\n    }","label":0}
{"text":"func parseRegular(ymlContent string, subs map[string]string) (SecretsMap, error) {\n\tout := make(map[string]SecretSpec)\n\n\tif err := yaml.Unmarshal([]byte(ymlContent), &out); err != nil {\n\t\treturn nil, err\n\t}\n\n\tfor i, spec := range out {\n\t\terr := spec.applySubstitutions(subs)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\n\t\tout[i] = spec\n\t}\n\n\treturn out, nil\n}","label":0}
{"text":"public static function year($year = null)\n\t{\n\t\t$from = DateTime::create(1, 1, $year);\n\t\t$till = $from->copy()->addYears(1)->addDays(-1);\n\t\treturn new Calendar($from, $till);\n\t}","label":0}
{"text":"func (n *NodeValidatableResource) EvalTree() EvalNode {\n\taddr := n.ResourceAddr()\n\tconfig := n.Config\n\n\t\/\/ Declare the variables will be used are used to pass values along\n\t\/\/ the evaluation sequence below. These are written to via pointers\n\t\/\/ passed to the EvalNodes.\n\tvar provider providers.Interface\n\tvar providerSchema *ProviderSchema\n\tvar configVal cty.Value\n\n\tseq := &EvalSequence{\n\t\tNodes: []EvalNode{\n\t\t\t&EvalGetProvider{\n\t\t\t\tAddr:   n.ResolvedProvider,\n\t\t\t\tOutput: &provider,\n\t\t\t\tSchema: &providerSchema,\n\t\t\t},\n\t\t\t&EvalValidateResource{\n\t\t\t\tAddr:           addr.Resource,\n\t\t\t\tProvider:       &provider,\n\t\t\t\tProviderSchema: &providerSchema,\n\t\t\t\tConfig:         config,\n\t\t\t\tConfigVal:      &configVal,\n\t\t\t},\n\t\t},\n\t}\n\n\tif managed := n.Config.Managed; managed != nil {\n\t\thasCount := n.Config.Count != nil\n\n\t\t\/\/ Validate all the provisioners\n\t\tfor _, p := range managed.Provisioners {\n\t\t\tvar provisioner provisioners.Interface\n\t\t\tvar provisionerSchema *configschema.Block\n\n\t\t\tif p.Connection == nil {\n\t\t\t\tp.Connection = config.Managed.Connection\n\t\t\t} else if config.Managed.Connection != nil {\n\t\t\t\tp.Connection.Config = configs.MergeBodies(config.Managed.Connection.Config, p.Connection.Config)\n\t\t\t}\n\n\t\t\tseq.Nodes = append(\n\t\t\t\tseq.Nodes,\n\t\t\t\t&EvalGetProvisioner{\n\t\t\t\t\tName:   p.Type,\n\t\t\t\t\tOutput: &provisioner,\n\t\t\t\t\tSchema: &provisionerSchema,\n\t\t\t\t},\n\t\t\t\t&EvalValidateProvisioner{\n\t\t\t\t\tResourceAddr:     addr.Resource,\n\t\t\t\t\tProvisioner:      &provisioner,\n\t\t\t\t\tSchema:           &provisionerSchema,\n\t\t\t\t\tConfig:           p,\n\t\t\t\t\tResourceHasCount: hasCount,\n\t\t\t\t},\n\t\t\t)\n\t\t}\n\t}\n\n\treturn seq\n}","label":0}
{"text":"public function create(ProductOrderItem $productOrderItem)\n    {\n        $this->getEm()->persist($productOrderItem);\n        $this->getEm()->flush();\n\n        return $productOrderItem;\n    }","label":0}
{"text":"public function filter($value)\n    {\n        if (is_object($value) && ! method_exists($value, '__toString')) {\n            return '';\n        }\n\n        if (is_array($value)) {\n            $dummy = [\n                'name' => '',\n                'tmp_name' => '',\n                'error' => UPLOAD_ERR_NO_FILE,\n                'size' => 0,\n                'type' => '',\n            ];\n            $value = ArrayUtils::merge($dummy, $value);\n        } else {\n            $value = (string) $value;\n        }\n\n        if (isset($value['error']) && $value['error'] !== UPLOAD_ERR_OK) {\n            return '';\n        }\n\n        if ($this->options['use_uploaded_name'] && isset($value['name'])) {\n            $value = $value['name'];\n        } elseif (isset($value['tmp_name'])) {\n            $value = $value['tmp_name'];\n        }\n\n        if ($this->options['basename']) {\n            $value = basename($value);\n        }\n\n        return $value;\n    }","label":0}
{"text":"func (w *standardSMLWriter) Comment(comment string) error {\n\treturn w.context.Writef(\"{# %s #}\", comment)\n}","label":0}
{"text":"private void validateGatewayConfig(GatewayConfigDocument configDoc, List<String> preProcessErrors) {\n        List<XmlError> errorList = new ArrayList<>();\n        for (String preProcessError : preProcessErrors) {\n            errorList.add(XmlError.forMessage(preProcessError, XmlError.SEVERITY_ERROR));\n        }\n        if (errorList.isEmpty()) {\n            XmlOptions validationOptions = new XmlOptions();\n            validationOptions.setLoadLineNumbers();\n            validationOptions.setLoadLineNumbers(XmlOptions.LOAD_LINE_NUMBERS_END_ELEMENT);\n            validationOptions.setErrorListener(errorList);\n            boolean valid = configDoc.validate(validationOptions);\n            if (valid) {\n                \/\/ Perform custom validations that aren't expressed in the XSD\n                GatewayConfigDocument.GatewayConfig config = configDoc.getGatewayConfig();\n\n                ServiceType[] services = config.getServiceArray();\n                if (services != null && services.length > 0) {\n                    List<String> serviceNames = new ArrayList<>();\n                    for (ServiceType service : services) {\n                        String name = service.getName();\n                        if (name == null || name.length() == 0) {\n                            errorList.add(XmlError.forMessage(\"All services must have unique non-empty names\",\n                                    XmlError.SEVERITY_ERROR));\n                        } else if (serviceNames.indexOf(name) >= 0) {\n                            errorList.add(XmlError\n                                    .forMessage(\"Service name must be unique. More than one service named '\" + name + \"'\",\n                                            XmlError.SEVERITY_ERROR));\n                        } else {\n                            serviceNames.add(name);\n                        }\n                    }\n                }\n\n                SecurityType[] security = config.getSecurityArray();\n                if (security != null && security.length > 1) {\n                    errorList.add(XmlError.forMessage(\"Multiple <security> elements found; only one allowed\",\n                            XmlError.SEVERITY_ERROR));\n                }\n                ServiceDefaultsType[] serviceDefaults = config.getServiceDefaultsArray();\n                if (serviceDefaults != null && serviceDefaults.length > 1) {\n                    errorList.add(XmlError.forMessage(\"Multiple <service-defaults> elements found; only one allowed\",\n                            XmlError.SEVERITY_ERROR));\n                }\n                ClusterType[] clusterConfigs = config.getClusterArray();\n                if (clusterConfigs != null && clusterConfigs.length > 1) {\n                    errorList.add(XmlError.forMessage(\"Multiple <cluster> elements found; only one allowed\",\n                            XmlError.SEVERITY_ERROR));\n                }\n            }\n        }\n\n        \/\/ Report all validation errors\n        if (errorList.size() > 0) {\n            String validationError = \"Validation errors in gateway configuration file\";\n            LOGGER.error(validationError);\n            for (XmlError error : errorList) {\n                int line = error.getLine();\n                if (line != -1) {\n                    int column = error.getColumn();\n                    if (column == -1) {\n                        LOGGER.error(\"  Line: \" + line);\n                    } else {\n                        LOGGER.error(\"  Line: \" + line + \" Column: \" + column);\n                    }\n                }\n                LOGGER.error(\"  \" + error.getMessage().replaceAll(\"@\" + GatewayConfigNamespace.CURRENT_NS, \"\"));\n                if (error.getMessage().contains(\"notify-options\") || error.getMessage().contains(\"notify\")) {\n                    validationError = \"Could not start because of references to APNs in the configuration.\"\n                     + \" APNs is not supported in this version of the gateway, but will be added in a future release.\";\n                    LOGGER.error(validationError);\n\n                }\n                if (error.getMessage().contains(\"DataRateString\")) {\n                    \/\/ Yeah, it's crude, but customers are going to keep tripping over cases like 100KB\/s being invalid otherwise\n                    \/\/ Example output:\n                    \/\/ ERROR - Validation errors in gateway configuration file\n                    \/\/ ERROR -   Line: 12 Column: 36\n                    \/\/ ERROR -   string value '1m' does not match pattern for DataRateString in namespace http:\/\/xmlns.kaazing\n                    \/\/ .com\/2012\/08\/gateway\n                    \/\/ ERROR -   (permitted data rate units are B\/s, kB\/s, KiB\/s, kB\/s, MB\/s, and MiB\/s)\n                    \/\/ ERROR -   <xml-fragment xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\"\/>\n                    LOGGER.error(\"  \" + \"(permitted data rate units are B\/s, kB\/s, KiB\/s, kB\/s, MB\/s, and MiB\/s)\");\n                }\n                if (error.getCursorLocation() != null) {\n                    LOGGER.error(\"  \" + error.getCursorLocation().xmlText());\n                }\n            }\n            throw new GatewayConfigParserException(validationError);\n        }\n    }","label":0}
{"text":"public static Path appendLinesAndClose(String filePath,\n            Collection<String> lineCollection) {\n        return appendLinesAndClose(filePath, UTF_8, lineCollection);\n    }","label":0}
{"text":"func del(strs []string, s string) []string {\n\tfor i := 0; i < len(strs); i++ {\n\t\tif strs[i] != s {\n\t\t\tcontinue\n\t\t}\n\t\tstrs[i] = strs[len(strs)-1]\n\t\tstrs = strs[:len(strs)-1]\n\t\ti--\n\t}\n\treturn strs\n}","label":0}
{"text":"def _process_err(self, err=None):\n        \n        self.stats['errors_received'] += 1\n\n        if err == \"'Authorization Violation'\":\n            self._err = ErrAuthorization\n        elif err == \"'Slow Consumer'\":\n            self._err = ErrSlowConsumer\n        elif err == \"'Stale Connection'\":\n            self._err = ErrStaleConnection\n        else:\n            self._err = Exception(err)\n\n        if self._error_cb is not None:\n            self._error_cb(err)","label":0}
{"text":"def token_expired(self):\n        \"\"\"\"\"\"\n        if self._token_timer is None:\n            return True\n        return timeutil.is_newer_than(self._token_timer, timeutil.ONE_HOUR)","label":0}
{"text":"private static function clearCompiled(): void\n    {\n        $laravel = new Application(getcwd());\n\n        if (\\file_exists($servicesPath = $laravel->getCachedServicesPath())) {\n            @\\unlink($servicesPath);\n        }\n\n        if (\\file_exists($packagesPath = $laravel->getCachedPackagesPath())) {\n            @\\unlink($packagesPath);\n        }\n\n        if (\\file_exists($extensionServicesPath = $laravel->getCachedExtensionServicesPath())) {\n            @\\unlink($extensionServicesPath);\n        }\n    }","label":0}
{"text":"func (w *writerWithoutCloseNotify) Write(buf []byte) (int, error) {\n\treturn w.W.Write(buf)\n}","label":0}
{"text":"def switch_schema(task, kwargs, **kw):\n    \n    # Lazily load needed functions, as they import django model functions which\n    # in turn load modules that need settings to be loaded and we can't\n    # guarantee this module was loaded when the settings were ready.\n    from .compat import get_public_schema_name, get_tenant_model\n\n    old_schema = (connection.schema_name, connection.include_public_schema)\n    setattr(task, '_old_schema', old_schema)\n\n    schema = (\n        get_schema_name_from_task(task, kwargs) or\n        get_public_schema_name()\n    )\n\n    # If the schema has not changed, don't do anything.\n    if connection.schema_name == schema:\n        return\n\n    if connection.schema_name != get_public_schema_name():\n        connection.set_schema_to_public()\n\n    if schema == get_public_schema_name():\n        return\n\n    tenant = get_tenant_model().objects.get(schema_name=schema)\n    connection.set_tenant(tenant, include_public=True)","label":0}
{"text":"def write(self, location, text, encoding):\n        \n        location = os.path.expanduser(location)\n\n        with codecs.open(location, 'w', encoding) as f:\n            f.write(text)","label":0}
{"text": "arr = [3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45]", "label": 1}
{"text": "def fib(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-2) + fib(n-1)", "label": 1}
{"text": "class Point:\n    def __init__(self, x, y):\n        self.x = x \n        self.y = y \n   \n    def __str__(self): \n        return \"({0},{1})\".format(self.x, self.y)", "label": 1}
{"text": "for i in range(1,11):\n    if i % 2 == 0:\n        print(i)", "label": 1}
{"text": "public static long factorial(int n) {\n    if (n == 0) {\n        return 1;\n    }\n    long result = 1;\n    for (int i = 1; i <= n; i++) {\n        result *= i;\n    }\n    return result;\n}", "label": 1}
{"text": "for i in range(1, n+1):\n    print(i)", "label": 1}
{"text": "public class SumOfArray {\n    public static void main(String[] args) {\n        int[] numbers = {1, 2, 3 , 4, 5};\n        int sum = 0;\n        for(int i=0; i < numbers.length;i++) {\n            sum = sum + numbers[i];\n        }\n        System.out.println(\"The sum of numbers in the given array is: \" + sum);\n    }\n}", "label": 1}
{"text": "import React from \"react\";\n\nfunction App() {\n  return (\n    <div>\n      <h1>Hello, World!</h1>\n    </div>\n  );\n}\n\nexport default App;", "label": 1}
{"text": "list = [1, 2, 3, 4, 5]\nprint(\"Total number of elements in the list: \", len(list))", "label": 1}
{"text": "nums = [1, 7, 3, 6]\nsorted_nums = nums.sort\n\n# Calculation of median \nif sorted_nums.length % 2 == 0\n  mid_index = sorted_nums.length/2\n  median = (sorted_nums[mid_index] + sorted_nums[mid_index - 1])/2.to_f\nelse\n  mid_index = sorted_nums.length/2\n  median = sorted_nums[mid_index]\nend\n\nputs median", "label": 1}
{"text": "#!/bin/bash\n\nstring=\"Hello World!\"\nvowels=(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\")\n\nfor i in \"${vowels[@]}\"\ndo\n    string=\"${string//$i/0}\"\ndone\n\necho $string #H0ll0 W0rld!", "label": 1}
{"text": "def arraySum(arr):\n    total = 0\n    for num in arr:\n        total += num\n    return total", "label": 1}
{"text": "import random\nx = random.randint(4, 8)", "label": 1}
{"text": "arr = [x**2 for x in arr] # [1, 4, 9, 16, 25]", "label": 1}
{"text": "SELECT SUM(salary)\nFROM employees;", "label": 1}
{"text": "for (let i = 0; i < 10; i++){\n    printNum(i);\n}", "label": 1}
{"text": "len(text) # 12", "label": 1}
{"text": "import csv\nimport json\n\ndef csv_to_json():\n    # Path of csv file\n    file_csv = 'mycsvfile.csv'\n    \n    # Path of json file\n    file_json = 'myjsonfile.json'\n    \n    with open(file_csv, 'r') as input_file:\n        reader = csv.DictReader(input_file)\n        data = list(reader)\n    \n    with open(file_json, 'w') as output_file:\n        json.dump(data, output_file)\n\ncsv_to_json()", "label": 1}
{"text": "def longest_element(list):\n  max_length = 0\n  max_length_item = None\n\n  for item in list:\n    if len(item) > max_length:\n      max_length = len(item)\n      max_length_item = item\n\n  return max_length_item\n\nlist = [10, 100, 200, 500, 400]\nlongest_element(list) # 500", "label": 1}
{"text": "UPDATE payments \nSET amount = 5 \nWHERE payments.amount IS NOT NULL;", "label": 1}
{"text": "int arr[3] = {1,2,3};\nint sum = 0;\nint* ptr = arr;\nfor (int i = 0; i < 3; i++) \n{\n    sum += *(ptr+i); \n}", "label": 1}
{"text": "SELECT column_name FROM information_schema.columns WHERE table_name = 'employees';", "label": 1}
{"text": "def example_func(lst):\n   output_lst = []\n   for element in lst:\n      if (type(element) == int):\n         output_lst.append(element + 5)\n   return output_lst\n \nexample_func([1, 2, \"hello\"])", "label": 1}
{"text": "public class Puppy { \n   // Instance Variables \n   String name; \n   int age; \n  \n   // Constructor \n   public Puppy(String name, int age){ \n      this.name = name; \n      this.age = age; \n   } \n  \n   // Methods \n   public void bark(){ \n      System.out.println(\"Woof Woof!\"); \n   } \n  \n   public void sleep(){ \n      System.out.println(\"Zzzzzz...\"); \n   } \n}", "label": 1}
{"text": "# Function to check whether the inputNumber is palindrome or not\ndef is_palindrome(inputNumber):\n\n   # negative numbers are not palindrome\n   if inputNumber < 0:\n       return False\n\n   # find the number of digits in the inputNumber\n   div = 1\n   while (inputNumber / div >= 10):\n       div *= 10\n\n   # check if the most significant and least significant digits match\n   while (inputNumber != 0):\n       # compare first and last digits\n       firstdigit = inputNumber // div\n       lastdigit =  inputNumber % 10\n       if firstdigit != lastdigit:\n           return False\n\n       # remove the most and least significant digit of inputNumber\n       inputNumber = (inputNumber % div) // 10\n\n       # reduce div by a factor of 2,  since 2 digits\n       # were removed\n       div = div // 100\n   return True\n\n# Driver code to test above\ninputNumber = 121\nif is_palindrome(inputNumber) :\n  print(\"Yes\")\nelse:\n  print(\"No\")", "label": 1}
{"text": "x = \"5\"\ny = \"2\"\ntry:\n   sum = int(x) + int(y)\n   print(\"Sum of x and y is\", sum)\nexcept:\n   print(\"Error: Invalid input\")", "label": 1}
{"text": "def find_greatest(list):\n    \"\"\"Print out the greatest number from a list of numbers.\"\"\"\n    greatest = list[0]\n    for num in list:\n        if num > greatest:\n            greatest = num\n    print('The greatest number is: ', greatest)", "label": 1}
{"text": "SELECT * FROM users WHERE age > 25", "label": 1}
{"text": "from datetime import datetime\n\ndef get_day_of_week(date):\n    return date.strftime(\"%A\")", "label": 1}
{"text": "import os\n\n# create 'data' folder in the current working directory\ncurrent_directory = os.getcwd()\nnew_directory = os.path.join(current_directory, 'data')\nos.mkdir(new_directory)", "label": 1}
{"text": "function findMax(arr) {\n    let max = arr[0];\n    for (let i = 1; i < arr.length; i++) {\n        if (arr[i] > max) {\n            max = arr[i];\n        }\n    }\n    return max;\n}", "label": 1}
{"text": "<form>\n  <input type=\"text\" id=\"textbox\">\n  <input type=\"submit\" value=\"Submit\">\n  <input type=\"radio\" name=\"choice\" value=\"yes\">Yes\n  <input type=\"radio\" name=\"choice\" value=\"no\">No\n</form>", "label": 1}
{"text": "# defining the Node class\nclass Node: \n\tdef __init__(self, data): \n\t\tself.data = data \n\t\tself.next = None\n\ndef getNthElement(head, n): \n\tcurrent = head \n\tcount = 0\n\n\t# looping through the linked list\n\twhile(current is not None): \n\t\tif (count == n): \n\t\t\treturn current.data \n\t\tcount += 1\n\t\tcurrent = current.next\n\treturn -1", "label": 1}
{"text": "num = 5\nsum = 0\nfor i in range(1, num+1):\n  sum += i", "label": 1}
{"text": "def celsius_to_fahrenheit(c):\n    f = c * (9/5) + 32\n    return f", "label": 1}
{"text": "def count_occurrences(arr, element):\n    count = 0\n    for e in arr:\n        if e == element:\n            count += 1\n    return count\n\nprint(count_occurrences(arr, 40)) # Outputs: 3", "label": 1}
{"text": "SELECT department, COUNT(employee_ID)\nFROM employees\nGROUP BY department\nORDER BY department ASC;", "label": 1}
{"text": "function reverseArrayInPlace(nums) {\n    let left = 0;\n    let right = nums.length - 1;\n  \n    while (left < right) {\n        let temp = nums[left];\n        nums[left] = nums[right];\n        nums[right] = temp;\n  \n        left++;\n        right--;\n    }\n    return nums;\n}", "label": 1}
{"text": "This line of code assigns the remainder of a divided by b to a, so that the resulting value of a is the remainder of a divided by b. For example, if a is 10 and b is 3, the value of a after executing this line of code would be 1 (the remainder of 10 divided by 3).", "label": 1}
{"text": "if n % 2 == 0:\n    return 'even'\nelse:\n    return 'odd'", "label": 1}
{"text": "[x*2 for x in list_one]", "label": 1}
{"text": "difference = max(list_of_numbers) - min(list_of_numbers)\nprint(difference)", "label": 1}
{"text": "def count_vowels(string):\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    count = 0\n    for char in string:\n        if char in vowels:\n            count += 1\n    return count", "label": 1}
{"text": "int  result = 123 + 456;\nConsole.WriteLine(result); //Output: 579", "label": 1}
{"text": "def product(a, b):\n    return a*b", "label": 1}
{"text": "int count = 0; \nint i = 0; \nwhile(i < 100)\n{\n     if(i % 3 == 0)\n          count++; \n     i++;\n}", "label": 1}
{"text": "\"\"\"\nCreate a dictionary containing the key-value pair of a given string\n\"\"\"\n\n# Given string\nstring = \"test string\"\n\n# Initialising an empty dictionary\nmy_dict = {}\n\n# Looping through the given string\nfor char in string:\n    # If the character is not already in dictionary\n    if char not in my_dict:\n        # Adding the character to the dictionary\n        my_dict[char] = 1\n    # If the character already exists in dictionary\n    else:\n        # Incrementing the frequency\n        my_dict[char] += 1\n        \n# Printing the dictionary\nprint(my_dict)", "label": 1}
{"text": "\"\"\"\nWrite a code to check whether two strings are anagrams or not\n\"\"\"\n\n# Strings to be checked\nfirst = \"listen\"\nsecond = \"silent\"\n\n# Sorting the strings\nfirst_sorted = \"\".join(sorted(first))\nsecond_sorted = \"\".join(sorted(second))\n\n# Checking if both sorted strings are equal or not\nif first_sorted == second_sorted:\n    print(\"Strings are Anagrams\")\nelse:\n    print(\"Strings are not Anagrams\")", "label": 1}
{"text": "\"\"\"\nWrite a function that sorts the given list of numbers in descending order\n\"\"\"\n\ndef sort_list_descending(numbers):\n    numbers.sort(reverse = True)\n    return numbers\n\nif __name__ == '__main__':\n    print(sort_list_descending([1, 2, 3, 5, 8, 10]))", "label": 1}
{"text": "\"\"\"\nCreate a program to compute the checksum of a given data packet\n\"\"\"\n\ndef compute_checksum(data_packet):\n    checksum = 0\n    for x in data_packet:\n        checksum += x\n    return checksum\n\nif __name__ == '__main__':\n    data_packet = [0xff, 0x0a, 0x1b, 0x3f]\n    print(compute_checksum(data_packet))", "label": 1}
{"text": "\"\"\"\nCreate a program to generate the sum of all the elements in a given list\n\"\"\"\n\ndef sum_list(nums):\n    total = 0\n    for num in nums:\n        total += num\n    return total\n\nif __name__ == '__main__':\n    print(sum_list([1, 2, 3, 4, 5]))", "label": 1}
{"text": "\"\"\"\nCreate a program to check if a given string is a palindrome\n\"\"\"\n\ndef is_palindrome(string):\n    n = len(string)\n    for i in range(n // 2):\n        if string[i] != string[n-i-1]:\n            return False\n    return True\n\nif __name__ == '__main__':\n    print(is_palindrome(\"racecar\"))", "label": 1}
{"text": "<!DOCTYPE html>\n<html>\n    <head>\n        <title>My First Web Page</title>\n    </head>\n    <body>\n        <div class=\"main\">\n            <h1 align=\"center\">My First Web Page</h1>\n            <p align=\"center\">This is my first web page. It is an amazing experience!</p>\n        </div>\n    </body>\n</html>", "label": 1}
{"text": "function findShortestWord(sentence) { \n    let words = sentence.split(\" \"); \n    let shortestWord = words[0]; \n  \n    for (let i = 0; i < words.length; i++) { \n        if (words[i].length < shortestWord.length) \n            shortestWord = words[i]; \n    } \n  \n    return shortestWord; \n}", "label": 1}
{"text": "for i in range(1,51):\n    if i % 2 != 0:\n        print(i)", "label": 1}
{"text": "string = \"Hello World!\"\nstring = string.replace(\"!\", \"?\")\nprint(string)", "label": 1}
{"text": "# initial max length\nmax_length = 0\n# empty string to store the max length string\nmax_str = ''\n\n# iterate through the list\nfor string in lst:\n    # get the length\n    length = len(string)\n    # update the max length\n    if length > max_length:\n        # get the string\n        max_str = string\n        # update max length\n        max_length = len(string)\n\nprint(max_str)", "label": 1}
{"text": "int maxSubarraySum(int arr[], int n) { \n    int max_so_far = 0, max_ending_here = 0; \n  \n    for (int i = 0; i < n; i++) { \n        max_ending_here = max_ending_here + arr[i]; \n        if (max_so_far < max_ending_here) \n            max_so_far = max_ending_here; \n  \n        if (max_ending_here < 0) \n            max_ending_here = 0; \n    } \n    return max_so_far; \n}", "label": 1}
{"text": "def calculator():\n    number1 = int(input(\"Please enter first number: \"))\n    number2 = int(input(\"Please enter second number: \"))\n    print(\"Please choose operation -\\n\" \\\n          \"1. Add\\n\" \\\n          \"2. Subtract\\n\" \\\n          \"3. Multiply\\n\" \\\n          \"4. Divide\\n\") \n\n    choice = int(input(\"Enter your choice: \"))\n    if choice == 1:\n        ans = number1 + number2\n        print(\"Answer={}\".format(ans))\n    elif choice == 2:\n        ans = number1 - number2\n        print(\"Answer={}\".format(ans))\n    elif choice == 3:\n        ans = number1 * number2\n        print(\"Answer={}\".format(ans))\n    elif choice == 4:\n        ans = number1 / number2\n        print(\"Answer={}\".format(ans))\n    else:\n        print(\"Invalid Choice\")", "label": 1}
{"text": "arr = [x for x in arr if x % 2 == 0]", "label": 1}
{"text": "O(n^2)", "label": 1}
{"text": "class Node: \n  \n  # Function to initializaee the node object \n  def __init__(self, data): \n    self.data = data # Assign data \n    self.next = None # Initialize next as null", "label": 1}
{"text": "def remove_duplicates(string): \n    new_string = \"\" \n    for char in string:\n        if char not in new_string:\n            new_string += char \n    return new_string", "label": 1}
{"text": "def remove_element(list, element):\n    \"\"\"\n    Remove all occurrences of a given element from a list\n    :param list: the list\n    :param element: the element to remove\n    :return: the filtered list\n    \"\"\"\n    filtered_list = [item for item in list if item != element]\n    return filtered_list", "label": 1}
{"text": "\"\"\"\nGenerate a data structure that can efficiently store an array of words\n\"\"\"\n\n# create a trie (a node with 26 references to other nodes)\nclass TrieNode:\n    def __init__(self):\n        self.children = dict()\n        self.end = False\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n\n    def insert(self, word):\n        node = self.root\n        for c in word:\n            if c not in node.children:\n                node.children[c] = TrieNode()\n            node = node.children[c]\n        node.end = True\n\n# create an empty array\nword_array = []\n\n# create a new trie\ntrie = Trie()\n\n# iterate over the array and insert the words into the trie\nfor word in word_array:\n    trie.insert(word)", "label": 1}
{"text": "list1.reverse() # [9, 7, 5, 3, 1]", "label": 1}
{"text": "\"\"\"\nReverse string\n\"\"\"\n\ndef reverse_string(s):\n    \"\"\"Reverse a given string.\n    \n    Args:\n        s (str): The string to reverse.\n        \n    Returns:\n        str: The reversed string.\n    \"\"\"\n    return s[::-1]\n    \nif __name__ == '__main__':\n    s = \"hello world\"\n    print(reverse_string(s))", "label": 1}
{"text": "\"\"\"\nFind the longest common substring between two strings\n\"\"\"\n\ndef longest_common_substring(s1, s2):\n    \"\"\"Find the longest common substring between two strings.\n    \n    Args:\n        s1 (str): The first string.\n        s2 (str): The second string.\n        \n    Returns:\n        str: The longest common substring.\n    \"\"\"\n    max_length = 0\n    longest_substring = \"\"\n    len1, len2 = len(s1), len(s2)\n    for i in range(len1): \n        for j in range(len2):\n            length = 0\n            while i + length < len1 and j + length < len2:\n                if s1[i + length] != s2[j + length]:\n                    break \n                length += 1\n            if length > max_length:\n                max_length = length\n                longest_substring = s1[i : i + length]\n    return longest_substring\n    \nif __name__ == '__main__':\n    s1 = \"Tangible\"\n    s2 = \"Non-Tangible\"\n    print(longest_common_substring(s1, s2))", "label": 1}
{"text": "def is_leap_year(year):\n    \"\"\"\n    Checks if the given year is a leap year or not.\n    \"\"\"\n    if ((year % 4 == 0) and (year % 100 != 0)) or (year % 400 == 0):  \n        return True  \n    else:  \n        return False", "label": 1}
{"text": "def find_smallest_number(arr):\n    \"\"\"\n    Finds the smallest number in an array of numbers.\n    \"\"\"\n    min_num = arr[0]\n    for num in arr[1:]:\n        if num < min_num:\n            min_num = num\n    return min_num", "label": 1}
{"text": "function isPrimeNumber(num) {\n  for(var i = 2; i < num; i++){\n    if(num % i === 0) {\n      return false;\n    }\n  }\n  return num > 1;\n}", "label": 1}
{"text": "//String begins with substring\nvar regex = /^substring/;\n\nif (input_str.match(regex)) {\n  console.log('The string begins with the substring.');\n}", "label": 1}
{"text": "<form>\n  <label>Gender:</label><br>\n  <input type=\"radio\" name=\"gender\" value=\"male\"> Male<br>\n  <input type=\"radio\" name=\"gender\" value=\"female\"> Female<br> \n</form>", "label": 1}
{"text": "8", "label": 1}
{"text": "int diff = 0;\n\nfor (int i=0; i < Math.min(str1.length(), str2.length()); i++) {\n    if (str1.charAt(i) != str2.charAt(i)) {\n        diff++;\n    }\n}\nreturn diff;", "label": 1}
{"text": "You can use the count() method in Python to count the number of specific characters in a given string. For example:\n\ns = 'My name is John'\n\nnum_of_char = s.count('o')\n\nprint(num_of_char) #Output: 2", "label": 1}
{"text": "Imperative Programming", "label": 1}
{"text": "Number.", "label": 1}
{"text": "{\"name\": \"\", \"date\": \"\"}", "label": 1}
{"text": ".sample{\n   background-color: #fff;\n}", "label": 1}
{"text": "CREATE TABLE employees (\n    name VARCHAR(255) NOT NULL,\n    age INT NOT NULL,\n    department VARCHAR(255) NOT NULL,\n    salary DOUBLE NOT NULL\n);", "label": 1}
{"text": "largest_number = 11", "label": 1}
{"text": "def max_values(d):\n return {key: max(d.values()) for key in d}", "label": 1}
{"text": "def generate_powerset(list):\n powerset = []\n for i in range(2**len(list)):\n  subset = [list[bit] for bit in range(len(list)) if is_bit_set(i, bit)]\n  powerset.append(subset)\n return powerset\n\ndef is_bit_set(num, bit):\n return (num & (1 << bit)) != 0", "label": 1}
{"text": "db.books.find({\"title\" : \"Harry Potter and The Sorcerer's Stone\"});", "label": 1}
{"text": "Data analysis libraries in Python include Pandas, NumPy, SciPy, Matplotlib, Scikit-Learn and Seaborn.", "label": 1}
{"text": "h1 {\n  font-weight: bold;\n}", "label": 1}
{"text": "import pandas as pd \n\ndata = {'Name': ['Jerry', 'Peter', 'Paul', 'John'], \n'Age': [20, 22, -18, 24]} \n\ndf = pd.DataFrame(data)\n\ndf = df[df['Age'] >= 0]", "label": 1}
{"text": "import random\n\nrandom_int = random.randint(0, 10)", "label": 1}
{"text": "def is_odd(num):\n    if num % 2 != 0:\n        return True\n    else:\n        return False", "label": 1}
{"text": "my_list.sort(reverse=True)", "label": 1}
{"text": "binary = \"0b1100\"", "label": 1}
{"text": "def longest_palindrome(string):\n    palindrome = ''\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            substring = string[i:j]\n            if substring == substring[::-1] and len(substring) > len(palindrome):\n                palindrome = substring\n    return palindrome", "label": 1}
{"text": "def intersection(list1, list2):\n    result = []\n    for i in list1:\n        for j in list2:\n            if i==j:\n                result.append(i)\n    return result", "label": 1}
{"text": "def find_max(arr): \n    max_val = arr[0] \n    for i in range(len(arr)): \n        if max_val < arr[i]: \n            max_val = arr[i] \n    return max_val \n\narr = [2, 4, 5, 7, 8] \nmax_val = find_max(arr) \nprint(max_val)", "label": 1}
{"text": "#include <iostream> \nusing namespace std; \n  \nfloat avg(int n, int arr[]) \n{  \n    float sum, avg; \n  \n    for (int i = 0; i < n; i++) \n    {\n        sum = sum + arr[i]; \n    }\n    avg = sum / n; \n    return avg; \n}", "label": 1}
{"text": "for item in my_list:\n    print(item)", "label": 1}
{"text": "def min_integer(a, b):\n    \"\"\"This function returns the minimum of two integers\"\"\"\n    return min(a, b)", "label": 1}
{"text": "def get_divisors(num):\n    \"\"\"This function returns a list that contains the divisors of a given number\"\"\"\n    return [x for x in range(1, num + 1) if num % x == 0]", "label": 1}
{"text": "int age = 25;", "label": 1}
{"text": "let evenArray = [3,7,10,6,23].filter(num => num % 2 == 0); \n//evenArray: [10,6]", "label": 1}
{"text": "<h2 style=\"text-align: center;\">Heading Text</h2>", "label": 1}
{"text": "// Function to check if two strings are anagrams\nconst isAnagram = (string1, string2) => {\n  // Check if string lengths are the same\n  let string1Arr = string1.split('').sort();\n  let string2Arr = string2.split('').sort();\n  if (string1Arr.length !== string2Arr.length) return false;\n  \n  // Compare each character in the strings\n  for (let i = 0; i < string1Arr.length; i++) {\n    if (string1Arr[i] !== string2Arr[i]) return false;\n  }\n  \n  // Return true if all characters match\n  return true;\n}", "label": 1}
{"text": "<html>\n  <head>\n    <title>My Site</title>\n  </head>\n  <body>\n    <h1>Welcome!</h1>\n    <p>My website</p>\n  </body>\n</html>", "label": 1}
{"text": "# Define an array\narr = [1, 2, 3, 4]\n\n# Initialize the index\ni = 0\n\n# Iterate over the array and print each element\nwhile i < len(arr):\n    print(arr[i])\n    i += 1", "label": 1}
{"text": "#!/usr/bin/python\nprint(\"Hello, World!\")", "label": 1}
{"text": "def longest_common_prefix(arr_of_dictionaries):\n    prefix = ''\n    if len(arr_of_dictionaries) == 0:\n        return prefix\n    first_dict_keys = arr_of_dictionaries[0].keys()\n    for i in range(len(list(first_dict_keys)[0])):\n        char = list(first_dict_keys)[0][i]\n        for dict in arr_of_dictionaries:\n            if list(dict.keys())[0][i] != char:\n                return prefix\n        prefix += char\n    return prefix", "label": 1}
{"text": "def swap_elements(arr, i, j):\n    arr[i], arr[j] = arr[j], arr[i]\n    return arr", "label": 1}
{"text": "def cube_number(x):\n    return x**3", "label": 1}
{"text": "A linked list is a linear data structure in which each node is comprised of a data element as well as a pointer to the next node in the list. This allows it to form a chain, with each node pointing to the next node in the list and the last node pointing to null.", "label": 1}
{"text": "3", "label": 1}
{"text": "def average(numbers):\n    return sum(numbers) / len(numbers)\n\nprint(average([9, 5, 10, 12]))   # Output: 9.5", "label": 1}
{"text": "public class SortDescending { \n    public static void main(String[] args) \n    {\n        int[] numbers = {3,8,5,1,2,6,4};\n        int temp = 0;\n        for (int i = 0; i < numbers.length; i++) {\n            for (int j = i+1; j < numbers.length; j++) {\n                if (numbers[i] < numbers[j]) {\n                    //swap elements\n                    temp = numbers[i]; // assign value of i to temp\n                    numbers[i] = numbers[j];  // assign value of j to i\n                    numbers[j] = temp;  // assign value of temp to j\n                }\n            }\n        }\n        System.out.println(\"Array elements in descending order:\");\n        for (int i = 0; i < numbers.length; i++) { \n            System.out.print(numbers[i]+\" \"); \n        } \n    }\n}", "label": 1}
{"text": "function isPrime($n) {\n  if ($n == 1) {\n    return false;\n  } \n  elseif ($n == 2) {\n    return true;\n  } \n  else {\n    for ($i = 2; $i <= sqrt($n); $i++) {\n      if ($n % $i == 0) {\n        return false;\n        break;\n      }\n    }\n    return true;\n  }\n}", "label": 1}
{"text": "def square_of_first_n_number(n):\n    \"\"\"Find the square of the first n numbers\"\"\"\n    \n    # Initialize an empty list\n    squares = []\n\n    # Iterate to the first n numbers\n    for i in range(n):\n        # Compute the square and append to the list\n        squares.append(i * i)\n\n    return squares", "label": 1}
{"text": "for letter in \"Hello World\":\n    print(letter)", "label": 1}
{"text": "c = \"Hello World!\"", "label": 1}
{"text": "def all_unique(string): \n  # loops through each character in string \n  for char in string: \n  \n    # if character appears more than once, \n    # return False \n    if string.count(char) > 1: \n      return False \n      \n  # return True if no characters appear more than once\n  return True", "label": 1}
{"text": "def list_sum(input_list):\n    total = 0\n    for item in input_list:\n        total += item\n    return total", "label": 1}
{"text": "def fibonacci_sequence(n):\n    if n == 0:\n        return []\n    elif n == 1:\n        return [1]\n    else:\n        lst = [1, 1]\n        while len(lst) < n:\n            lst.append(lst[-1] + lst[-2])\n        return lst", "label": 1}
{"text": "def intersection(list_one, list_two):\n    lst = []\n    for i in list_one:\n        if i in list_two:\n            lst.append(i)\n    return lst", "label": 1}
{"text": "@app.route('/get_average_transaction_amount', methods=['GET'])\ndef get_average_transaction_amount():\n    customer_id = request.args.get('customer_id')\n    query = \"SELECT AVG(transaction_amount) FROM transactions WHERE customer_id = %s\"\n    result = db.query(query, customer_id)\n    return jsonify(result)", "label": 1}
{"text": "A for loop in Python is used to iterate over a sequence (list, tuple, string) or other iterable objects. It executes a set of statements specified in the for loop for each item of the sequence. It makes it easier to write and execute code multiple times without having to write the same code multiple times.", "label": 1}
{"text": "The better algorithm would be to use a divide and conquer approach. This approach involves splitting the array into two halves, finding the minimum element in each half and then comparing the two elements to determine the overall minimum. This is a faster algorithm than the linear search approach in which we traverse the array from start to end and compare each element with the current minimum.", "label": 1}
{"text": "for i in mylist:\nprint(i)", "label": 1}
{"text": "lowercase_string = string.lower()\nprint(lowercase_string)", "label": 1}
{"text": "function printNumbers(n) {\n for (let i = 1; i <= n; i++) {\n console.log(i);\n }\n}", "label": 1}
{"text": "func sumOfElements(arr: [Int]) -> Int {\n let sum = arr.reduce(0, +)\n return sum\n}", "label": 1}
{"text": "public class PrimeNumber\n{\n static void Main()\n {\n int n1 = 2;\n int n2 = 10;\n while (n1 < n2)\n {\n bool isPrime = true;\n for (int i = 2; i <= n1 / 2; i++)\n {\n if (n1 % i == 0)\n {\n isPrime = false;\n break;\n }\n }\n if (isPrime)\n Console.Write(n1 + \" \");\n n1++;\n }\n }\n}", "label": 1}
{"text": "SELECT CustomerID\nFROM Orders\nWHERE OrderTotal > 500;", "label": 1}
{"text": "A tree structure in data structures is a hierarchical structure composed of a root node connected to one or more nodes each of which is connected to one or more other nodes. It is a non-linear data structure that allows efficient insertion and retrieval of data.", "label": 1}
{"text": "5040", "label": 1}
{"text": "18.85", "label": 1}
{"text": "numbers = [1,2,3,1,4,9]", "label": 1}
{"text": "SELECT SUM(myColumn) FROM myTable", "label": 1}
{"text": "import matplotlib.pyplot as plt\n\ndata_points = [12, 13, 19, 20, 25]\n\nplt.plot(data_points)\nplt.ylabel(\"data points\")\nplt.xlabel(\"index\")\nplt.title(\"Line chart of data points\")\n\nplt.show()", "label": 1}
{"text": "// get the current browser language\nvar language = navigator.language || navigator.userLanguage;\n\nif (language === \"en\") {\n    console.log(\"Hello, welcome to the website!\");\n} \nelse if (language === \"de\") {\n    console.log(\"Hallo, willkommen auf der Webseite!\");\n}\nelse if (language === \"fr\") {\n    console.log(\"Bonjour, bienvenue sur le site Web!\");\n}\nelse {\n    console.log(\"Welcome to the website!\");\n}", "label": 1}
{"text": "// Create an integer array\nint[] array = {4, 2, 6, 1, 3};\n\n// Sort the array using the bubbleSort function\nbubbleSort(array);\n\n// Write a function to implement the bubbleSort algorithm\npublic static int[] bubbleSort(int[] array) {\n    int len = array.length;\n    for (int i = 0; i < len; i++) {\n        for (int j = 0; j < len; j++) {\n            if (array[j] > array[j+1]) {\n                int temp = array[j];\n                array[j] = array[j+1];\n                array[j+1] = temp;\n            }\n        }\n    }\n    return array;\n}\n// The sorted array is [1, 2, 3, 4, 6]", "label": 1}
{"text": "// To generate random numbers using the code provided:\n// 1. Specify number of digits to generate\n// 2. Use the random_with_N_digits function to generate the random number\n// 3. Pass the desired number of digits as the argument in the function\n// 4. The function will return a random number between 10^(n-1) and 10^n-1\n// 5. Use the returned random number for the desired purpose", "label": 1}
{"text": "// To parse an XML document in JavaScript:\n// 1. Use the DOMParser to load the XML document into an XML Document object\n// 2. Use the getElementsByTagName method to obtain all the elements with a specific tag in the document\n// 3. Use the getElementsByTagNameNS method to obtain all the elements with a specific tag and namespace in the document\n// 4. Use the getAttribute method to obtain the attribute values of the desired elements\n// 5. Use the getElementsByClassName method to obtain all the elements with a specific class in the document  \n// 6. Parse the elements and create a custom object according to the returned XML.", "label": 1}
{"text": "10000000", "label": 1}
{"text": "#include <iostream>\n#include <vector>\n \nint sumArray(std::vector<int> &nums)\n{\n    int sum = 0;\n    for (int num : nums) {\n        sum += num;\n    }\n    return sum;\n}\n \nint main()\n{\n    std::vector<int> nums = {1, 2, 3, 4, 5};\n    std::cout << \"Sum: \" << sumArray(nums);\n    return 0;\n}", "label": 1}
{"text": "You should do your homework every day.", "label": 1}
{"text": "The \"break\" keyword is used to immediately break out of a loop in the C programming language. It can also be used to break out of a switch statement. It is used to terminate a loop or switch statement and transfer program control to the next statement after the loop or switch.", "label": 1}
{"text": "SELECT MAX(salary) FROM salary;", "label": 1}
{"text": "for (int i = 0; i < list.length; i++) {\n System.out.println(list[i]);\n}", "label": 1}
{"text": "def my_concat(string1, string2)\n    return string1 + ' ' + string2", "label": 1}
{"text": "// max is assign to 0 as a starting point\nlet max = 0;\n\nfor (let i=0; i < array.length; i++) {\n  // If the current value of i is greater than max, max will be updated\n  if (array[i] > max) { \n    max = array[i];\n  }\n}\n\nconsole.log(max); // Output: 20", "label": 1}
{"text": "[1, 2, 3, 4, 5, 6]", "label": 1}
{"text": "import numpy as np\nnp.random.RandomState(0).rand(3, 3)", "label": 1}
{"text": "A + ' ' + B", "label": 1}
{"text": "#!/bin/bash\n\nls", "label": 1}
{"text": "def letter_counts(sentence):\n  count_dict = {}\n  for char in sentence:\n    if char.isalpha():\n      if char in count_dict:\n        count_dict[char] += 1\n      else:\n        count_dict[char] = 1\n  return count_dict", "label": 1}
{"text": "class User {\n  public $name;\n  public $age;\n\n  function __construct($name, $age) {\n    $this->name = $name;\n    $this->age = $age;\n  }\n}", "label": 1}
{"text": ".heading {\n  font-size: 16px;\n}", "label": 1}
{"text": "print(\"Hello World!\")", "label": 1}
{"text": "car_models = [\"Honda Accord\", \"Toyota Corolla\", \"Ford F150\"]", "label": 1}
{"text": "A Turing machine is a mathematical model of computation that was initially developed by Alan Turing in 1936. It is a device that can read and write symbols on a strip of tape according to a set of instructions. The tape is divided into individual squares, each of which can hold one symbol at a time. The machine can move either right or left one square at a time, and has a set of instructions that determine how its internal state changes based on which symbol it reads. The Turing machine is a powerful tool for understanding computation, as it can be used to simulate any algorithm or computation.", "label": 1}
{"text": "{\n    \"name\": \"John\",\n    \"age\": 20,\n    \"info\": {\n        \"height_cm\": 178,\n        \"weight_kg\": 73\n    }\n}", "label": 1}
{"text": "public class Student {\n  private String name;\n  private int age;\n  private String course;\n\n  public Student(String name, int age, String course) {\n    this.name = name;\n    this.age = age;\n    this.course = course;\n  }\n\n  public void setName(String name) {\n    this.name = name;\n  }\n  public String getName(){\n    return name;\n  }\n  \n  public void setAge(int age){\n    this.age = age;\n  }\n\n  public int getAge(){\n    return age;\n  }\n  \n  public void setCourse(String course){\n    this.course = course;\n  }\n\n  public String getCourse(){\n    return course;\n  }\n}", "label": 1}
{"text": "a = 10\nb = 20", "label": 1}
{"text": "from sklearn.linear_model import LinearRegression\n\n# Create linear regression model\nmodel = LinearRegression()\n\n# Train the model using the training set\nmodel.fit(X, y)\n\n# Make predictions using the testing set\ny_pred = model.predict(X)", "label": 1}
{"text": "public static void printSquare(int n) { \n    for (int i = 0; i < n; i++) { \n        for (int j = 0; j < n; j++) { \n            System.out.print(\"* \"); \n        }  \n        System.out.println(); \n    } \n} \n   \n// Output: \n/*       \n  * * * * * \n  * * * * * \n  * * * * * \n  * * * * * \n  * * * * * \n*/", "label": 1}
{"text": "public static boolean isSorted(int[] array) { \n    int n = array.length; \n    int temp = array[0]; \n  \n    for (int i = 1; i < n; i++) { \n        if (temp > array[i]) \n            return false; \n        temp = array[i]; \n    } \n  \n    return true; \n}", "label": 1}
{"text": "import java.util.ArrayList;\n\npublic class ArrayListExample {\n    public static void main(String[] args) {\n        // Create an arraylist \n        ArrayList<String> list = new ArrayList<String>(); \n  \n        // Adding elements to the list \n        list.add(\"Adam\"); \n        list.add(\"Bob\"); \n        list.add(\"Charlie\"); \n  \n        // Printing elements in the list \n        System.out.println(list); \n  \n        // Accessing elements using get() method \n        String name = list.get(1); \n        System.out.println(\"Name at index 1 is : \" + name); \n  \n        // Adding elements at a specific index \n        list.add(1, \"David\"); \n        System.out.println(\"Updated list : \"+list); \n  \n        // Removing elements from a list \n        list.remove(\"Adam\"); \n        System.out.println(\"Updated list : \"+list); \n  \n        // Check if an element exists in a list \n        boolean isPresent = list.contains(\"Bob\"); \n        System.out.println(\"Bob is present in the list : \" + isPresent); \n    } \n}\n\n// Output:\n// [Adam, Bob, Charlie] \n// Name at index 1 is : Bob\n// Updated list : [Adam, David, Bob, Charlie]\n// Updated list : [David, Bob, Charlie]\n// Bob is present in the list : true", "label": 1}
{"text": "public static void printLetterOccurrences(String str) {\n    int[] alphabet = new int[26];\n    for (int i = 0; i < str.length(); i++) {\n        if (str.charAt(i) >= 'a' && str.charAt(i) <= 'z')\n            alphabet[str.charAt(i) - 'a']++;\n    }\n    for (int i = 0; i < 26; i++) {\n        if (alphabet[i] > 0) {\n            System.out.println(\"Number of Occurrences of \" + (char)(i + 'a') \n                    + \" is \" + alphabet[i]); \n        }\n    }\n}\n\n// Output\n// Number of Occurrences of a is 2 \n// Number of Occurrences of d is 2 \n// Number of Occurrences of e is 1 \n// Number of Occurrences of f is 1", "label": 1}
{"text": "even_nums_list = [num for num in range(1, 21) if num % 2 == 0]", "label": 1}
{"text": "In Java, the syntax of an if statement is as follows:\n\nif (condition) {\n    // Code to execute if condition is true\n}", "label": 1}
{"text": "import React from \"react\";\n\nfunction App() {\n  const title = \"My Page Title\"\n\n  return (\n    <div>\n      <h1>{title}</h1>\n    </div>\n  );\n}\n\nexport default App;", "label": 1}
{"text": "{\n  \"Name\": \"John Smith\",\n  \"Age\": 34,\n  \"Country\": \"US\"\n}", "label": 1}
{"text": "def is_even_or_odd(num):\n    if num % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"", "label": 1}
{"text": "def isValidBST(root): \n      \n    # Check empty tree  \n    if root is None: \n        return True\n          \n    # Check left subtree recursively  \n    if not isValidBST(root.left): \n        return False\n  \n    # if left is not None then check it has \n    # correct data or not i.e. left node's data \n    # should be less than root's data \n    if (root.left is not None and\n        root.data < root.left.data): \n        return False\n      \n    # Check right subtree recursively  \n    if not isValidBST(root.right): \n        return False\n      \n    # if right is not None then check it has \n    # correct data or not i.e. right node's data \n    # should be greater than root's data \n    if (root.right is not None and\n        root.data > root.right.data): \n        return False\n      \n    # If all conditions satisfied  \n    # then return True  \n    return True", "label": 1}
{"text": "set total to 0\nset count to 0\n\nwhile numbers left to process\n    add next number to total\n    increment count\nend while\n\ncalculate average by dividing total by count\n\nprint average", "label": 1}
{"text": "def subset(arr, K): \n    n = len(arr) \n    subset_arr = [0]; \n      \n    for i in range (0, n): \n        x = len(subset_arr) \n        for j in range(0, x): \n              \n            # Generate subset by adding \n            # elements of A\n            temp = [] \n            temp = subset_arr[j] \n            temp.append(arr[i]) \n              \n            # Append in the list \n            subset_arr.append(temp) \n              \n    # Return K size subset \n    length = len(subset_arr) \n    if (length >= K): \n        return subset_arr[length - K:] \n    else: \n        return -1\n    \nprint(subset(arr, K))", "label": 1}
{"text": "str = \"This is a string\" \nwords = str.split()\ncount = {} \n  \nfor word in words: \n    if word in count: \n        count[word] += 1\n    else: \n        count[word] = 1\n        \nprint(count)\n\n# Output: {'This': 1, 'is': 1, 'a': 1, 'string': 1}", "label": 1}
{"text": "function toUpperCase(string) {\n return string.toUpperCase();\n}", "label": 1}
{"text": "SELECT COUNT(*) FROM users;", "label": 1}
{"text": "def factorial(n):\n  if n == 0:\n    return 1\n  else:\n    return n * factorial(n-1)", "label": 1}
{"text": "The contents of an array can be displayed in reverse order by using the reverse() method or by using a for loop. \n\nFor example, to display the content of the array [1, 2, 3, 4], the following code can be used:\n\n// Using reverse()\nlet arr = [1, 2, 3, 4];\narr.reverse();\nconsole.log(arr); // Output: [4, 3, 2, 1]\n\n// Using a for loop\nlet arr = [1, 2, 3, 4];\nfor (let i = arr.length - 1; i >= 0; i--) {\n    console.log(arr[i]); // Output: 4 3 2 1\n}", "label": 1}
{"text": "5", "label": 1}
{"text": "The main difference between for and while loop is that for loop is used when we already know the number of times the loop should iterate, while a while loop is used when the number of iterations is not known in advance. Another difference is that for loop is more convenient for looping through arrays/collections of objects, while a while loop is used for performing more complex computations.", "label": 1}
{"text": "for key, value in myDict.items(): \n    print(value) \n\n# Output\nmeow\nbark\nneigh", "label": 1}
{"text": "The try-catch block is used in Python to handle exceptions. It is a construct used to catch and handle any unexpected errors that may occur in a program, allowing the program to continue running instead of crashing. The statements under the try block are the ones that may raise the exception, and the except block contains code that will be executed if an error does occur. The finally block is generally used to perform clean-up operations, regardless of whether an error occurs or not.", "label": 1}
{"text": "SELECT * FROM users; \n \nThis will return all rows from the \"users\" table.", "label": 1}
{"text": "birthday = datetime.datetime.strptime(name + \" birthdate\", \"%Y-%m-%d\")\ntime_diff = time - birthday\nprint(\"The difference in time from \" + name + \"'s birthday is \" + str(time_diff))", "label": 1}
{"text": "public static int multiply(int x, int y){\n  return x * y;\n}\n\nSystem.out.println(multiply(5, 8));", "label": 1}
{"text": "def print_2D_array(arr):\n  for row in arr:\n    for element in row:\n      print(element,end=\" \")\n    print()\n\nprint_2D_array(arr)", "label": 1}
{"text": "import uuid\n\ndef generate_id(object): \n  return uuid.uuid4()", "label": 1}
{"text": "Web scraping is the process of extracting data from websites using automated software. It involves sending a request to the web server, processing the HTML, locating the relevant data, and saving it. The process usually involves using web crawlers and parsing data using regular expressions or custom logic.", "label": 1}
{"text": "def area_circle(r):\n  return 3.14 * r**2", "label": 1}
{"text": "if (x >= 0) {\n  System.out.println(Math.sqrt(x));\n} else {\nSystem.out.println(\"The number is negative\");\n}", "label": 1}
{"text": "SELECT * FROM table_name WHERE age > 20;", "label": 1}
{"text": "mylist.append(9)", "label": 1}
{"text": "import random\n\ndef random_list(length):\n\trand_list = []\n\tfor i in range(length):\n\t\trand_list.append(random.randint(0,100))\n\treturn rand_list", "label": 1}
{"text": "def validate_input(username, password):\n\tif len(username) < 5 or len(username) > 80:\n\t\treturn False\n\tif len(password) < 8 or len(password) > 16:\n\t\treturn False\n\treturn True", "label": 1}
{"text": "3", "label": 1}
{"text": "Generative Adversarial Networks (GANs) are a type of deep neural network that are composed of two sub-networks; a generative network and a discriminative network. The generative network produces samples such as images, audio, or text that try to fool the discriminator network, which is trained to recognize real data from generated data. The two networks are trained together in an adversarial setting, in which the generator attempts to generate data that is indistinguishable from real data and the discriminator tries to distinguish real data from generated data.", "label": 1}
{"text": "def Fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n        return b", "label": 1}
{"text": "def lev_dist(str1, str2):\n    if len(str1) < len(str2):\n        return lev_dist(str2, str1)\n    \n    if len(str2) == 0:\n        return len(str1)\n \n    previous_row = range(len(str2) + 1)\n    for i, c1 in enumerate(str1):\n        current_row = [i + 1]\n        for j, c2 in enumerate(str2):\n            insertions = previous_row[j + 1] + 1\n            deletions = current_row[j] + 1\n            substitutions = previous_row[j] + (c1 != c2)\n            current_row.append(min(insertions, deletions, substitutions))\n        previous_row = current_row\n    \n    return previous_row[-1]", "label": 1}
{"text": "The sentiment of the statement is negative.", "label": 1}
{"text": "<html>\n <head>\n  <title>Product Prices</title>\n </head>\n <body>\n  <h1>Product Prices</h1>\n  <table>\n   <tr>\n    <th>Product Name</th><th>Price</th>\n   </tr>\n   <tr>\n    <td>Laptop</td><td>1000</td>\n   </tr>\n   <tr>\n    <td>Keyboard</td><td>50</td>\n   </tr>\n   <tr>\n    <td>Monitor</td><td>200</td>\n   </tr>\n   <tr>\n    <td>Mouse</td><td>30</td>\n   </tr>\n   <tr>\n    <td>Headphones</td><td>50</td>\n   </tr>\n  </table>\n </body>\n</html>", "label": 1}
{"text": "The average of the 3 numbers is 36.", "label": 1}
{"text": "def combine_first_three(string1, string2): \n    # Get the first three characters of each string \n    string1 = string1[:3]\n    string2 = string2[:3]\n\n    # Combine the first three characters of each string \n    combined_string = string1 + string2\n\n    # Return the new string \n    return combined_string\n\nprint(combine_first_three(\"Hello\", \"World\")) # HelWor", "label": 1}
{"text": "def remove_longest_word(sentence): \n    # Split the sentence into words \n    words = sentence.split(' ')\n\n    # Find the longest word \n    longest_word = \"\"\n    for word in words:\n        if len(word) > len(longest_word): \n            longest_word = word \n\n    # Remove all occurrences of the longest word\n    new_sentence = [] \n    for word in words:\n        if word != longest_word: \n            new_sentence.append(word) \n    \n    # Join the list back into a string and return it \n    return \" \".join(new_sentence)\n\nprint(remove_longest_word(\"This is a very long sentence\")) # This is a sentence", "label": 1}
{"text": "^[0-9]+$", "label": 1}
{"text": "for(i=1;i<=10;i++) {\n  console.log(3 + \" x \" + i + \" = \" + (3 * i));\n}", "label": 1}
{"text": "Error: n is not defined.\n\nThe given code is trying to use the variable n, which is not declared. To fix this, it should be declared before the if statement. The modified code is as follows:\n\ndef main():\n print(\"Hey I'm here\")\n n = 0\n if n == 0: \n  print(\"Hey I'm there\")\nmain()", "label": 1}
{"text": "0.88", "label": 1}
{"text": "for i in range(len(arr)):\n    print(arr[i])", "label": 1}
{"text": "for i in range(1, 7):\n    for j in range(1, i+1):\n        print(j, end=' ')\n    print()", "label": 1}
{"text": "def validate_phone(phone_number):\n    regex = '^\\+?(\\d[\\d-. ]+)?(\\([\\d-. ]+\\))?[\\d-. ]+\\d$'\n    if re.match(regex, phone_number):\n        return True\n    return False", "label": 1}
{"text": "def do_something(data):\n    # Your code here\n    result = 1\n    for num in data:\n        result *= num\n    return result", "label": 1}
{"text": "multiples_of_3 = [x for x in range(0, 31) if x % 3 == 0]", "label": 1}
{"text": "def remove_duplicates(arr):\n    \"\"\"\n    Return a new array after removing duplicates from a given array.\n    \"\"\"\n    new_arr = []\n    for num in arr:\n        if num not in new_arr:\n            new_arr.append(num)\n    return new_arr\n\narr = [1, 2, 3, 2, 3, 4]\nnew_arr = remove_duplicates(arr)\nprint(new_arr)", "label": 1}
{"text": "def sum_lists(lst1, lst2):\n    \"\"\"\n    Compute the sum of two given lists.\n    \"\"\"\n    new_list = []\n    for i in range(len(lst1)):\n        new_list.append(lst1[i] + lst2[i])\n    return new_list\n\nlst1 = [2,3,4]\nlst2 = [1,2,3]\nsum_lst = sum_lists(lst1, lst2)\nprint(sum_lst)", "label": 1}
{"text": "new_list_ints = list(set(list_int)) # new_list_ints = [4, 7, 8, 6]", "label": 1}
{"text": "[3, 5, 7, 11, 13, 17, 19]", "label": 1}
{"text": "arr = [[1 for _ in range(4)] for _ in range(4)]", "label": 1}
{"text": "def sort_by_length(lst):\n    lst.sort(key=len)\n    return lst", "label": 1}
{"text": "def unique_elements(input_list): \n    result_list = []\n    for item in input_list: \n        if item not in result_list: \n            result_list.append(item)\n    return result_list\n\ninput_list = [2, 3, 9, 5, 2, 4, 9]\nprint(unique_elements(input_list))\n# Output: [2, 3, 9, 5, 4]", "label": 1}
{"text": "<table border=\"1\" cellpadding=\"5\" cellspacing=\"0\" width=\"500\"> \n    <tr> \n        <th>Book Name</th> \n        <th>Author</th> \n        <th>Price</th> \n        <th>Rating</th>  \n    </tr> \n    <tr>\n        <td><b>Harry Potter and the Sorcerer's Stone</b></td> \n        <td>J. K. Rowling</td> \n        <td>$7.99</td> \n        <td>4.7</td> \n    </tr> \n</table>", "label": 1}
{"text": "new_list = []\nfor el in y:\n    new_list.append(el)", "label": 1}
{"text": "def fibonacci(n): \n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return fibonacci(n-1) + fibonacci(n-2) \n  \nfibonacci(15)", "label": 1}
{"text": "SELECT * \nFROM employees\nORDER BY date_of_birth \nLIMIT 3;", "label": 1}
{"text": "def reverse_print_array(arr):\n  for i in range(len(arr)-1, -1, -1):\n    print(arr[i])", "label": 1}
{"text": "def compare_arrays(arr1, arr2, arr3):\n  common_elements = []\n  for elem in arr1:\n    if elem in arr2 and elem in arr3:\n      common_elements.append(elem)\n  print(common_elements)", "label": 1}
{"text": "def merge_sort(arr):\n    if len(arr) > 1: \n      mid = len(arr)//2\n      left_arr = arr[:mid]\n      right_arr = arr[mid:]\n\n      merge_sort(left_arr)\n      merge_sort(right_arr)\n\n      i = j = k = 0\n\n      while i < len(left_arr) and j < len(right_arr): \n        if left_arr[i] < right_arr[j]: \n            arr[k] = left_arr[i] \n            i+=1\n        else: \n            arr[k] = right_arr[j] \n            j+=1\n        k+=1\n      while i < len(left_arr): \n        arr[k] = left_arr[i] \n        i+=1\n        k+=1\n      \n      while j < len(right_arr): \n        arr[k] = right_arr[j] \n        j+=1\n        k+=1", "label": 1}
{"text": "No compile-time error.", "label": 1}
{"text": "<table style=\"width:100%\">\n  <tr>\n    <th>Student</th>\n    <th>Grade</th> \n  </tr>\n  <tr>\n    <td>Student1</td>\n    <td>B</td>\n  </tr>\n  <tr>\n    <td>Student2</td>\n    <td>A</td> \n  </tr>\n  <tr>\n    <td>Student3</td>\n    <td>C</td> \n  </tr>\n  <tr>\n    <td>Student4</td>\n    <td>D</td> \n  </tr>\n  <tr>\n    <td>Student5</td>\n    <td>F</td> \n  </tr>\n  <tr>\n    <td>Student6</td>\n    <td>A</td> \n  </tr>\n</table>", "label": 1}
{"text": "int input_number = 4;\n \nint order = 0;\n \nfor(int i=0; i < input_number; i++){\n    order++;\n}\n \nprintf(\"The order of the number %d in ascending order is %d.\", input_number, order);", "label": 1}
{"text": "import javax.swing.JOptionPane;\n \npublic class DisplayMessage {\n \n    public static void main(String[] args) {\n        JOptionPane.showMessageDialog(null, \"Hello world!\", \"Message\", JOptionPane.INFORMATION_MESSAGE);\n    }\n \n}", "label": 1}
{"text": "function swap(a, b) {\n    let temp = a;\n    a = b;\n    b = temp;\n}", "label": 1}
{"text": "def collect(array1, array2):\n    result = array1 + array2 \n    return result", "label": 1}
{"text": "def array_mean(array):\n    total = 0\n    for num in array:\n        total += num\n    mean = total / len(array)\n    return mean", "label": 1}
{"text": "def flatten(arr):\n    output_list = []\n    for sublist in arr:\n        for item in sublist:\n            output_list.append(item)\n    return output_list", "label": 1}
{"text": "def remove_item(lst, item):\n if item in lst:\n    lst.remove(item)", "label": 1}
{"text": "// Java Program to calculate the sum of all even \n// numbers in a given range \n\npublic static int sumOfEvenInRange(int n1, int n2) { \n    int sum = 0; \n      \n    // calculating the sum of all even numbers in given range \n    for (int i = n1; i <= n2; i++) { \n        // if num is even then add it \n        if (i % 2 == 0) { \n            sum += i; \n        } \n    } \n    return sum; \n}", "label": 1}
{"text": "let side_1= 10;\nlet side_2= 10;\nlet side_3= 8;\n \n//calculate the permiter of triangle \nlet perimiter = (side_1 + side_2 + side_3)/2;\n \n//calculate the area of triangle using Heron's formula \nlet area = Math.sqrt(perimiter*(perimiter-side_1)*(perimiter-side_2)*(perimiter-side_3));\n \nconsole.log(area);", "label": 1}
{"text": "Bubble sort is a sorting algorithm in which adjacent elements in an array are compared and swapped if they are not in the correct order. The algorithm steps through the array multiple times, comparing adjacent elements and swapping them if the elements are not in the correct order. This process is repeated until all elements in the array are sorted.", "label": 1}
{"text": "for (int i = 1; i <= 10; i++) {\n\tSystem.out.println(i);\n}", "label": 1}
{"text": "str1 is a valid URL, whereas str2 is not.", "label": 1}
{"text": "Endpoint: \u2018/api/v1/events\u2019\nHTTP Method: GET\nResponse Format: JSON\nResponse:\n{\n  \"status\": 200,\n  \"events\": [\n    { \"eventId\": 1,\n      \u201cdescription\u201d: \u201cCompany Meeting\u201d,\n      \"dateTime\": \"2020-11-05T09:00:00\"\n    },\n    { \n      \"eventId\": 2,\n      \u201cdescription\u201d: \u201cBoard Meeting\u201d,\n      \"dateTime\": \"2020-11-08T14:00:00\"\n    }\n  ]\n}", "label": 1}
{"text": "#!/bin/bash\n\necho \"Show a list of running processes\"\nps aux | grep -v grep | awk '{print $2 \"  \" $11}'", "label": 1}
{"text": "list_one = [1, 2, 3]\nlist_two = [4, 5, 6]\ncombined_list = list_one + list_two\nprint(combined_list) # Output: [1, 2, 3, 4, 5, 6]", "label": 1}
{"text": "query {\n  selectedUser {\n    posts {\n      title\n      body\n      createdAt\n      comments {\n        body\n        author {\n          name\n        }\n      }\n    }\n  }\n}", "label": 1}
{"text": "Steps for creating an Express application for a web store:\n1. Install Express in the project.\n2. Create the routes for the endpoints.\n3. Create the controllers that handle the request logic.\n4. Add the required models for the endpoints.\n5. Use express.static() to enable static files.\n6. Create and enable middleware for authentication.\n7. Set up a testing environment.\n8. Create the view for the application.", "label": 1}
{"text": "SELECT product, SUM(quantity) AS total_sales\nFROM Sales\nGROUP BY product;", "label": 1}
{"text": "#include <stdio.h>  \nvoid primeCount(int lower, int upper) \n{ \n    while (lower < upper) { \n        int flag = 0; \n  \n        for (int i = 2; i <= lower / 2; ++i) { \n            if (lower % i == 0) { \n                flag = 1; \n                break; \n            } \n        } \n  \n        if (flag == 0) \n            printf(\"%d \", lower); \n  \n        ++lower; \n    } \n} \n  \n// Driver program \nint main() \n{ \n    int lower = 1;\n    int upper = 20;\n    primeCount(lower, upper); \n    return 0; \n}", "label": 1}
{"text": "SELECT e.Name, e.Age, d.Dept_Name, d.Location\nFROM Employees e\nINNER JOIN Departments d \nON e.Dept_ID = d.Dept_ID;", "label": 1}
{"text": "def format_number(num):\n return '{0:.2f}'.format(num)", "label": 1}
{"text": "# Set a swap flag to true\nswap = true \n# While the flag is true\nwhile swap \n  # Set the swap flag to false\n  swap = false\n  # Iterate through the list\n  for i in range(len(list) - 1):\n    # Swap adjacent element if they are out of order\n    if list[i] > list[i + 1]:\n      temp = list[i]\n      list[i] = list[i + 1]\n      list[i + 1] = temp\n      # Set the flag back to true\n      swap = true", "label": 1}
{"text": "def function(a):\n    b = a * 2\n    c = a * 0.5\n    if b == c:\n        return \"equal\"\n    else:\n        return \"not equal\"", "label": 1}
{"text": "def get_freq_list(s): \n      \n    # dictionaries are efficient for such a task \n    freq_list = {} \n  \n    for char in s: \n        if char in freq_list.keys(): \n            freq_list[char] += 1\n        else: \n            freq_list[char] = 1\n  \n    return freq_list \n  \ndef create_huffman_tree(freq_list): \n  \n    # create a priority queue \n    # to pop two minimum element each time \n    priority_queue = [] \n    for key in freq_list.keys(): \n        node = Node(key, freq_list[key]) \n        heapq.heappush(priority_queue, node) \n  \n    while len(priority_queue) > 1: \n        left_node = heapq.heappop(priority_queue) \n        right_node = heapq.heappop(priority_queue) \n  \n        new_node = Node(None, \n              left_node.freq + right_node.freq, \n              left_node, \n              right_node) \n        heapq.heappush(priority_queue, new_node) \n  \n    huffman_tree = heapq.heappop(priority_queue) \n    return huffman_tree \n    \ndef compress_string(huffman_tree, symbols): \n  \n    # create a character-code dict\n    code_dict = {} \n    _generate_codes(huffman_tree, '', code_dict) \n  \n    # encode the string \n    encoded_str = '' \n    for char in symbols: \n        encoded_str += code_dict[char] \n  \n    return encoded_str", "label": 1}
{"text": "int LCS(string X, string Y, int m, int n)\n{\n    int L[m + 1][n + 1];\n    int i, j;\n\n    for (i = 0; i <= m; i++)\n    {\n        for (j = 0; j <= n; j++)\n        {\n            if (i == 0 || j == 0)\n                L[i][j] = 0;\n            else if (X[i - 1] == Y[j - 1])\n                L[i][j] = L[i - 1][j - 1] + 1;\n            else\n                L[i][j] = max(L[i - 1][j], L[i][j - 1]);\n        }\n    }\n\n    return L[m][n];\n}", "label": 1}
{"text": "<html>\n    <head>\n        <title>Red Box</title>\n    </head>\n    <body>\n        <div style=\"width: 200px;height: 200px;background-color: red;\"></div>\n    </body>\n</html>", "label": 1}
{"text": "A common approach to add items to an array in JavaScript is to use the Array.push() method. This method adds the item to the end of the array. \n\nFor example: \nlet arr = [1, 2, 3];\narr.push(4); // [1, 2, 3, 4]", "label": 1}
{"text": "\"\"\"\nA web scraper that can collect data from the same web page\n\"\"\"\nimport requests\nfrom bs4 import BeautifulSoup\n\ndef get_data(url):\n    response = requests.get(url)\n    parser = BeautifulSoup(response.text, 'html.parser')\n    movies = parser.find_all('div', {'class': 'movie-card'})\n    data = []\n    for movie in movies:\n        title = movie.find('h3').get_text()\n        year = movie.find('div', {'class': 'movie-year'}).get_text()\n        rating = movie.find('div', {'class': 'movie-rating'}).get_text()\n        data.append({\n            'title': title,\n            'year': year,\n            'rating': rating\n        })\n    return data\n\nif __name__ == \"__main__\":\n    data = get_data('https://example.com/movies')\n    print(data)", "label": 1}
{"text": "def remove_vowels(string):\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    new_string = \"\"\n    for letter in string:\n        if letter.lower() not in vowels:\n            new_string += letter\n    return new_string", "label": 1}
{"text": "let x = 8 * 8;", "label": 1}
{"text": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n <meta charset=\"UTF-8\">\n <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n <title>Welcome</title>\n</head>\n<body>\n <h1>Welcome</h1>\n\n</body>\n</html>", "label": 1}
{"text": "SELECT * FROM Customers WHERE age > 50;", "label": 1}
{"text": "public class RandomNumber {\n    public static void main(String[] args) {\n        // Generate a random number between 25 and 75\n        int max = 75;\n        int min = 25;\n        int range = max - min + 1;\n\n        int randomNumber = (int) (Math.random() * range) + min;\n\n        System.out.println(randomNumber);\n     }\n }", "label": 1}
{"text": "<form action=\"login.php\" method=\"post\">\n    <label for=\"username\">Username:</label><br>\n    <input type=\"text\" name=\"username\" id=\"username\"><br>\n    <label for=\"password\">Password:</label><br>\n    <input type=\"password\" name=\"password\" id=\"password\"><br>\n    <input type=\"submit\" value=\"Submit\">\n</form>", "label": 1}
{"text": "<table> \n  <tr> \n    <th>Column 1</th>\n    <th>Column 2</th>\n    <th>Column 3</th> \n  </tr>\n  <tr> \n    <td>Row 1, Column 1</td>\n    <td>Row 1, Column 2</td>\n    <td>Row 1, Column 3</td> \n  </tr>\n  <tr> \n    <td>Row 2, Column 1</td>\n    <td>Row 2, Column 2</td>\n    <td>Row 2, Column 3</td> \n  </tr>\n  <tr> \n    <td>Row 3, Column 1</td>\n    <td>Row 3, Column 2</td>\n    <td>Row 3, Column 3</td> \n  </tr>\n  <tr> \n    <td>Row 4, Column 1</td>\n    <td>Row 4, Column 2</td>\n    <td>Row 4, Column 3</td> \n  </tr>\n  <tr> \n    <td>Row 5, Column 1</td>\n    <td>Row 5, Column 2</td>\n    <td>Row 5, Column 3</td> \n  </tr>\n</table>", "label": 1}
{"text": "CREATE TABLE users (\n  id INT AUTO_INCREMENT PRIMARY KEY,\n  email VARCHAR(50),\n  name VARCHAR(50),\n  avatar BLOB\n);", "label": 1}
{"text": "[0, 1, 4, 9, 16, 25, 36, 49, 64, 81, 100]", "label": 1}
{"text": "import random\n\nrandom_numbers = random.sample(range(0, 101), 10)\nprint(random_numbers)", "label": 1}
{"text": "Machine Learning is a subset of Artificial Intelligence that enables computers to learn from patterns in data without explicitly being programmed. It enables them to improve over time by recognizing patterns and adjusting to new data. Machine Learning algorithms are used in a wide variety of applications, such as facial recognition, image recognition, natural language processing, predictive analytics, and robotics.", "label": 1}
{"text": "for i in range(1, 11):\n    print(i)", "label": 1}
{"text": "def sort_numbers_ascending(numbers): \n    # Sort the list \n    numbers.sort() \n    return numbers\n  \n# Driver code \nnums = [3, 7, 1, 5, 4] \n\nprint(sort_numbers_ascending(nums))", "label": 1}
{"text": "def print_message(message, name):\n    print(f\"{message}, {name}!\")", "label": 1}
{"text": "#include <iostream> \nusing namespace std; \n  \nint main() \n{ \n    int i, sum = 0; \n      \n    //Computes the sum \n    for (i = 1; i <= 100; i++) \n    { \n        sum += i; \n    } \n      \n    cout << \"Sum of first 100 natural numbers = \"\n         << sum << endl; \n  \n    return 0; \n}", "label": 1}
{"text": "4\n6\n8\n10", "label": 1}
{"text": "<form>\n  <label>Email:\n    <input type=\"email\" name=\"email\">\n  </label>\n  <label>Password:\n    <input type=\"password\" name=\"password\">\n  </label>\n  <input type=\"submit\" value=\"Submit\">\n</form>", "label": 1}
{"text": "[ NP: I] [ VP: bought] [ NP: a car] [ AdvP: yesterday]", "label": 1}
{"text": "<html>\n<body>\n  <form action = \"processText.php\" method = \"post\">\n    <textarea rows = \"10\" cols = \"30\" name = \"modifiedText\"></textarea><br>\n    <input type = \"submit\" value = \"Submit\" />\n  </form>\n</body>\n</html>", "label": 1}
{"text": "The complexity of the algorithm to reverse a given string is O(n).", "label": 1}
{"text": "import java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\npublic class ThreadPool {\n  private ExecutorService executor;\n\n  public ThreadPool(int size) {\n    this.executor = Executors.newFixedThreadPool(size);\n  }\n\n  public void submit(Runnable task) {\n    this.executor.execute(task);\n  }\n\n  public void shutdown() {\n    this.executor.shutdown();\n  }\n}", "label": 1}
{"text": "my_dictionary = {1: 'a', 2: 'b', 3: 'c'}", "label": 1}
{"text": "SELECT * FROM employees;", "label": 1}
{"text": "def lcm(x, y): \n    if x > y:\n        greater = x \n    else:\n        greater = y \n    while(True): \n        if((greater % x == 0) and (greater % y == 0)): \n            lcm = greater \n            break\n        greater += 1 \n    return lcm \n  \nx = 15\ny = 10\nprint(\"The L.C.M. is\", lcm(x, y))", "label": 1}
{"text": "def add_two_numbers(a, b):\n    return a + b", "label": 1}
{"text": "public static int calculateSquare(int num) {\n    return num * num;\n}", "label": 1}
{"text": "head :: [a] -> a\nhead (x:_) = x", "label": 1}
{"text": "Create a Java program to calculate the sum of all the elements in an array.", "label": 1}
{"text": "def concat_strings(str1, str2):\n    \"\"\"Function to concatenate two strings\"\"\"\n    return str1 + str2\n\nif __name__ == '__main__':\n    result = concat_strings('Hello ', 'World!')\n    print(result) #Hello World!", "label": 1}
{"text": "def swap_dictionary_values(dic):\n    \"\"\"Function to swap the values in the dictionaries\"\"\"\n    dic['x'], dic['y'] = dic['y'], dic['x']\n    return dic\n\nif __name__ == '__main__':\n    dic = {'x': 10, 'y': 20}\n    swapped_dic = swap_dictionary_values(dic)\n    print(swapped_dic) # {'x': 20, 'y': 10}", "label": 1}
{"text": "name = input(\"Enter your name: \")\nage = int(input(\"Enter your age: \"))\n\nprint(\"Hello \" + name + \"! You are \" + str(age) + \" years old.\")", "label": 1}
{"text": "public static int mostFrequentElement(int[] arr) { \n  int count = 0; \n  int maxCount = 0; \n  int mostFrequent = arr[0]; \n  \n  for (int i = 0; i < arr.length; i++) { \n    count = 0; \n    for (int j = 0; j < arr.length; j++) { \n      if(arr[i] == arr[j]) { \n        count++; \n      } \n      if (count > maxCount) { \n        maxCount = count; \n        mostFrequent = arr[i]; \n      } \n    } \n  } \n  return mostFrequent; \n}", "label": 1}
{"text": "82.4", "label": 1}
{"text": "lst = [\"a\", \"b\", \"c\"]\nindex = lst.index(\"c\")", "label": 1}
{"text": "int get_index(int arr[],int size,int value)\n{\n    for(int i=0;i<size;i++)\n    {\n        if(arr[i] == value)\n        {\n            return i;\n        }\n    }\n    return -1;\n}", "label": 1}
{"text": "int findFirstGreaterThan(double[] arr, double value) {\n  for (int i = 0; i < arr.length; i++) {\n    if (arr[i] > value) {\n      return i;\n    }\n  }\n  return -1;\n}", "label": 1}
{"text": "const calculateSum = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n}\n\nconsole.log(calculateSum(5));", "label": 1}
{"text": "#!/bin/bash\nfor i in {1..10}; do echo -n \"$i \"; done\necho", "label": 1}
{"text": "#include <stdio.h> \n \nint main() \n{ \n    int num, sum = 0, r; \n  \n    printf(\"Enter a positive number: \"); \n    scanf(\"%d\", &num); \n  \n    while (num > 0) { \n        r = num % 10; \n        sum += r; \n        num = num / 10; \n    } \n  \n    printf(\"Sum of digits of the number: %d\\n\", sum); \n    return 0; \n}", "label": 1}
{"text": "\"\"\"\nCreate a looping structure to display numbers from 1-10\n\"\"\"\n\n# loop from 1 to 10\nfor num in range(1, 11):\n    print(num)", "label": 1}
{"text": "matched_strings = []\nfor string in strings:\n    if string[1:3] == pattern[1:3]:\n        matched_strings.append(string)\nprint(matched_strings) # [\"bcd\", \"def\"]", "label": 1}
{"text": "import os\n\npath = os.path.abspath(\"../images/example.png\")\nprint(path) # \\user\\path\\to\\images\\example.png", "label": 1}
{"text": "SELECT age, COUNT(*)\nFROM customers\nGROUP BY age;", "label": 1}
{"text": "<input type=\"checkbox\" id=\"terms\" name=\"terms\" value=\"agree\" />\n<label for=\"terms\">Terms of Service</label>", "label": 1}
{"text": "from datetime import datetime\n\ndef get_date_and_time():\n    current_date_and_time = datetime.now()\n    friendly_format = current_date_and_time.strftime('%c')\n    return friendly_format\n\nif __name__ == \"__main__\":\n    print(get_date_and_time())", "label": 1}
{"text": "def reverse_string(sentence):\n    return ' '.join(sentence.split(' ')[::-1])\n\nif __name__ == \"__main__\":\n    sentence = \"Where the wild things are\"\n    print(reverse_string(sentence))", "label": 1}
{"text": "def permutation(str):\n    if len(str) == 0:\n        return []\n    if len(str) == 1:\n        return [str]\n    lst = [] \n    for i in range(len(str)):\n       m = str[i] \n       remLst = permutation(str[:i] + str[i+1:])\n       for p in remLst:\n           lst.append([m] + p)\n    return lst\n\nif __name__ == \"__main__\":\n    str = \"ABC\"\n    print(permutation(str))", "label": 1}
{"text": "import random\nrandom.sample(range(0, 10), 5)", "label": 1}
{"text": "We can use the \"int.TryParse\" method to check if a number is an integer in C#. We pass the number as a string to this method and it returns true if it is an integer or false if it is not. For example:\n\nbool result = int.TryParse(\"2\", out _);\n// result is true", "label": 1}
{"text": "We can use the sort() method from the algorithm library to sort a list of strings lexicographically in C++. The syntax for this method is as follows: \n\nsort(listOfStrings.begin(), listOfStrings.end());", "label": 1}
{"text": "SELECT AVG(age) AS average_age\nFROM students\nWHERE class = 'X';", "label": 1}
{"text": "<?php\n\n$array = [1, 2, 3, 4];\n$index = 2;\n$value = 5;\n\narray_splice($array, $index, 0, $value);\n\necho \"<pre>\";\nprint_r($array);\necho \"</pre>\";\n?>", "label": 1}
{"text": "The correct way to find the length of an array in Java is to use the length field of the array.\nFor example:\n\nint[] arr = new int[10]; \nint len = arr.length; \n// len is now 10", "label": 1}
{"text": "A unidirectional recurrent neural network (RNN) accepts a single input and produces a single output. The input sequence is processed one step at a time and the output of each step depends only on the current input and the weights of the network. This type of network is often used in language models and other sequence-based predictions. \n\nIn contrast, a bidirectional recurrent neural network (BRNN) processes the input sequence in both the forward and backward directions. This allows the network to make use of both past and future context when making predictions. Additionally, it has the potential to learn longer-term dependencies since the state of the network is shared between both directions. This type of network is commonly used in areas like speech recognition and natural language understanding.", "label": 1}
{"text": "def get_min_max(lst):\n    return min(lst), max(lst)", "label": 1}
{"text": "Polymorphism in Python is the ability of an object to take on multiple forms. It is an object-oriented programming concept that allows for different implementations of a function or method to be used depending on the object type being used. In Python, this is done through sub-classing, the use of special methods such as the __init__ method, and by using type hints.", "label": 1}
{"text": "Lambda functions are anonymous short functions that have no name. They are used when a user needs to define a function in just a single expression, usually a function that takes an argument and performs an action on it. Lambda functions can also be used in Python as an alternative to traditional functions when they\u2019re used within a code block, making the code more concise and easier to understand. Lambda functions can also be used to pass a function as an argument to another function. Finally, lambda functions can also be used to create smaller, simpler anonymous functions when the full power of Python\u2019s functions is not required.", "label": 1}
{"text": "from datetime import datetime\n\nnow = datetime.now()\nprint(now.strftime(\"%d-%m-%Y %H:%M:%S\"))", "label": 1}
{"text": "function sortArray(arr) {\n    let sortedArray = arr.sort();\n    return sortedArray;\n}", "label": 1}
{"text": "def binary_search(arr, target): \n\tstart = 0\n\tend = len(arr) - 1\n\n\twhile start <= end: \n\t\tmid = start + (end-start)//2\n\t\tif arr[mid] == target: \n\t\t\treturn mid \n\t\telif arr[mid] < target: \n\t\t\tstart = mid + 1\n\t\telse: \n\t\t\tend = mid - 1\n          \n\treturn -1", "label": 1}
{"text": "<h1 style=\"color: blue;\">Heading</h1>", "label": 1}
{"text": "function isEven(number) {\n  return number % 2 === 0;\n}", "label": 1}
{"text": "SELECT product_name, SUM(quantity)\nFROM orders \nWHERE DATE(order_date) = CURDATE()\nGROUP BY product_name \nORDER BY SUM(quantity) DESC\nLIMIT 1", "label": 1}
{"text": "d = {\n  \"a\": 1,\n  \"b\": 2,\n  \"c\": 3\n}", "label": 1}
{"text": "The difference between let and const is that variables declared with let can be reassigned a different value or reassigned a different value type. On the other hand, variables declared with const are fixed, and cannot be reassigned or reassigned a different value type.", "label": 1}
{"text": "JavaScript has many advantages, such as being easy to learn and implement, being interpreted rather than compiled, and being supported by all major browsers. JavaScript also allows for dynamic and interactive webpages, enabling more user engagement and more sophisticated web experiences. Finally, JavaScript has the ability to run on both the server side and the client side, providing flexibility in how the code is used.", "label": 1}
{"text": "arr = ['blue', 'green', 'yellow']", "label": 1}
{"text": "def TowerOfHanoi(n , from_rod, to_rod, aux_rod): \n    if n == 1: \n        print (\"Move disk 1 from rod\",from_rod,\"to rod\",to_rod) \n        return\n    TowerOfHanoi(n-1, from_rod, aux_rod, to_rod) \n    print (\"Move disk\",n,\"from rod\",from_rod,\"to rod\",to_rod) \n    TowerOfHanoi(n-1, aux_rod, to_rod, from_rod)", "label": 1}
{"text": "import math \ndef f(x): \n    return math.pow(x, 2)\n  \nprint(f(4))", "label": 1}
{"text": "-2", "label": 1}
{"text": "[{name: 'John Doe', age: 25}, {name: 'Jane Doe', age: 41}, {name: 'Sarah Smith', age: 61}];", "label": 1}
{"text": "'25,32,63,18,22'", "label": 1}
{"text": "let sum = 0; \nfor (let i = 0; i <= 10; i++) {\n   sum += i;\n}", "label": 1}
{"text": "import random\n\nrandom_number = random.randint(1, 1000)", "label": 1}
{"text": "def longest_common_substring(str1, str2):\n    len1 = len(str1)\n    len2 = len(str2)\n    result = 0\n    dp = [[0 for x in range(len2+1)] for x in range(len1+1)]\n    for i in range(len1+1):\n        for j in range(len2+1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif str1[i-1] == str2[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n                result = max(result, dp[i][j])\n            else:\n                dp[i][j] = 0\n    return result", "label": 1}
{"text": "const convertStringToInteger = str => {\n  return  parseInt(str, 10);\n}", "label": 1}
{"text": "const subset = (array, k) => { \n  const output = []\n  for (let i = 0; i < k; i++) { \n      let index = Math.floor(Math.random() * array.length);\n      output.push(array.splice(index, 1)[0]);\n  }\n  return output;\n}", "label": 1}
{"text": "def string_to_list(string):\n words = string.split(' ')\n return words", "label": 1}
{"text": "<!DOCTYPE html>\n<html>\n<head>\n  <title>Survey Form</title>\n</head>\n<body>\n  <form action=\"/action_page.php\">\n    <label for=\"name\">Name:</label><br>\n    <input type=\"text\" id=\"name\" name=\"name\" placeholder=\"Your name..\" required><br>\n    <label for=\"email\">Email:</label><br>\n    <input type=\"text\" id=\"email\" name=\"email\" placeholder=\"Your email..\" required><br>\n    <label for=\"age\">Age:</label><br>\n    <input type=\"number\" id=\"age\" name=\"age\" placeholder=\"Your age..\" required><br><br>\n    <fieldset>\n      <legend>Gender:</legend>\n      <input type=\"radio\" id=\"male\" name=\"gender\" value=\"male\" checked>\n      <label for=\"male\">Male</label><br>\n      <input type=\"radio\" id=\"female\" name=\"gender\" value=\"female\">\n      <label for=\"female\">Female</label><br>\n      <input type=\"radio\" id=\"other\" name=\"gender\" value=\"other\">\n      <label for=\"other\">Other</label><br>\n    </fieldset>\n    <fieldset>\n      <legend>Interests:</legend>\n      <input type=\"checkbox\" id=\"tech\" name=\"tech\" value=\"tech\">\n      <label for=\"tech\">Technology</label><br>\n      <input type=\"checkbox\" id=\"sport\" name=\"sport\" value=\"sport\">\n      <label for=\"sport\">Sports</label><br>\n      <input type=\"checkbox\" id=\"science\" name=\"science\" value=\"science\">\n      <label for=\"science\">Science</label><br>\n    </fieldset><br>\n    <label for=\"comment\">Comment:</label><br>\n    <textarea id=\"comment\" name=\"comment\" placeholder=\"Write something..\" style=\"height:90px\"></textarea>\n    <br><br>\n    <input type=\"submit\" value=\"Submit\">\n  </form> \n</body>\n</html>", "label": 1}
{"text": "$numbers = array();\nfor ($i = 0; $i < 20; $i++) {\n    $numbers[$i] = rand(0, 100);\n}", "label": 1}
{"text": "struct User {\n    string name;\n    int age;\n    string city;\n};", "label": 1}
{"text": "import random\n\ndef shuffleArray(arr):\n    # Create a copy of the array\n    temp_arr = arr.copy()\n\n    # Iterate through the array and randomly\n    # swap elements\n    for i in range(len(temp_arr)):\n        j = random.randint(0, len(temp_arr)-1)\n        temp_arr[i], temp_arr[j] = temp_arr[j], temp_arr[i]\n\n    return temp_arr", "label": 1}
{"text": "Average = sum(l) / len(l) = 15 / 5 = 3.0", "label": 1}
{"text": "def findMax(root): \n    if root == None: # if tree is empty\n        return -1\n    while root.right: # Move right in  BST till the last node\n        root = root.right\n    return root.key", "label": 1}
{"text": ".arial-12-pt { \n  font-family: Arial; \n  font-size: 12pt; \n  font-weight: bold;\n}", "label": 1}
{"text": "public static double sqrt(double n) { \n  if (n <= 0); \n  return 0; \n  double g = n; \n  while (Math.abs(g*g - n) > 0.01) {\n    g = (g + n / g) / 2.0; \n  }\n  return g;\n}", "label": 1}
{"text": "SELECT\n    c.customer_id,\n    AVG(o.total_items)\nFROM\n    customers c JOIN\n    orders o ON c.customer_id = o.customer_id  \nWHERE \n    o.order_date > DATE_SUB(NOW(), INTERVAL 1 YEAR)\nGROUP BY\n    c.customer_id", "label": 1}
{"text": "class Dog:\n    def __init__(self):\n        pass\n    \n    def bark(self):\n        print(\"Bark!\")", "label": 1}
{"text": "import multiprocessing\n\ndef send_task(task):\n    # Send the task to a worker process \n    pass\n\ndef process(task):\n    # Process the task \n    pass\n\nif __name__ == '__main__': \n    processes = []\n    # Create two processes\n    process1 = multiprocessing.Process(target=send_task, args=(task,))\n    process2 = multiprocessing.Process(target=process, args=(task,))\n    processes.append(process1) # Put processes in a list \n    processes.append(process2)\n\n    # Run processes\n    for process in processes:\n        process.start()\n\n    # Exit the completed processes\n    for process in processes:\n        process.join()", "label": 1}
{"text": "for num in range(5):\n  print(num)", "label": 1}
{"text": "import nltk\nnltk.download('vader_lexicon')\n\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\nsentence = \"I am truly happy with the amazing results\"\nanalyzer = SentimentIntensityAnalyzer()\nsentiment = analyzer.polarity_scores(sentence)\n\nprint(\"The sentiment of the statement is:\", sentiment['compound'])", "label": 1}
{"text": "strings.sort(key=lambda x: x.lower())", "label": 1}
{"text": "SELECT AVG(population) FROM Cities;", "label": 1}
{"text": "result = \"positive\" if (x > 0) else \"negative\"", "label": 1}
{"text": "name_lengths = {name: len(name) for name in names}", "label": 1}
{"text": "def create_freq_table(lst): \n    freq_table = {} \n    for item in lst: \n        if (item in freq_table): \n            freq_table[item] += 1\n        else: \n            freq_table[item] = 1\n  \n    return freq_table", "label": 1}
{"text": "def search(head, target): \n    curr = head\n    while (curr!= None): \n        if (curr.data == target): \n            return curr.data \n        curr = curr.next\n    return -1", "label": 1}
{"text": "$fruits = array(\"apple\", \"banana\", \"cherry\");", "label": 1}
{"text": "#include <stdio.h> \n#include <string.h> \n  \nint check_palindrome(char str[]) \n{ \n    int l = 0; \n    int h = strlen(str) - 1; \n  \n    while (h > l) \n    { \n        if (str[l++] != str[h--]) \n        { \n            return 0; \n        } \n    } \n    return 1; \n}", "label": 1}
{"text": "function is_prime(num) {\n    for (let i = 2; i < num; i++) {\n        if (num % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}", "label": 1}
{"text": "int i = 0;\n\nwhile (i <= 10) \n{\n    std::cout << i;\n    i++;  \n}", "label": 1}
{"text": "SELECT *\nFROM customers\nWHERE (SELECT SUM(amount) from orders WHERE orders.customer_id = customers.id) > 1000", "label": 1}
{"text": "if x < 0:\n    result = 0\nelif x in [0, 1]:\n    result = x\nelse:\n    result = 2", "label": 1}
{"text": "for letter in string_example:\n    print(letter)", "label": 1}
{"text": "def replace_string(text, old, new):\n    return text.replace(old, new)\n\n# Output\nThe quick brown fox jumps over the lazy cat", "label": 1}
{"text": "def permutations(string):\n    res = set()\n    if len(string) == 1:\n        res.add(string)\n    else:\n        for i, char in enumerate(string):\n            for perm in permutations(string[:i], string[i+1:]):\n                res.add(char + perm)\n    return res\n\n# Output\n{'abc', 'acb', 'bac', 'bca', 'cab', 'cba'}", "label": 1}
{"text": "fibonacci_numbers = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\nfirst_10_fibonacci = [fibonacci_numbers[i] for i in range(10)]", "label": 1}
{"text": "SELECT title, release_date \nFROM Movies \nWHERE YEAR(release_date) = 2019", "label": 1}
{"text": "new_string = \"\"\nfor char in s:\n if char != c:\n  new_string += char\nprint(new_string)", "label": 1}
{"text": "SELECT employee_name\nFROM employees\nWHERE salary > 50000;", "label": 1}
{"text": "let var = 10;\nconsole.log(typeof var);", "label": 1}
{"text": "# the weights array will be used to store the distances\n# from the start cell to any other cell in the array\nweights = [[float('inf')] * 3 for _ in range(3)]\nweights[0][0] = 0\n# Directions are up, down, left and right\ndirections = [(1, 0), (-1, 0), (0, 1), (0, -1)]\n\n# The queue for Dijkstra's algorithm\nq = [(0, 0)]\nwhile q:\n # curr is the current cell in consideration\n curr = q.pop(0)\n # curr_dist is the distance of the current cell\n # from the start cell\n curr_dist = weights[curr[0]][curr[1]]\n # check all the adjacent cells\n for direction in directions:\n  row = curr[0] + direction[0]\n  col = curr[1] + direction[1]\n  # if the adjacent cell is within the array\n  if 0 <= row < 3 and 0 <= col < 3:\n   # if the distance of the adjacent cell is bigger\n   # than current cell distance + 1, update it\n   if weights[row][col] > curr_dist + 1:\n    weights[row][col] = curr_dist + 1\n    q.append((row, col))\n\n# the distance from the start to the end point will\n# be stored in the weights array at the given location\ndistance = weights[2][2]\nprint(f\"The shortest path from start to end is {distance}\")", "label": 1}
{"text": "import json\n\n# Compare two JSON objects and return `True` if equal, `False` if not\ndef compare_json_objects(first_obj, second_obj):\n    first_obj_str = json.dumps(first_obj)\n    second_obj_str = json.dumps(second_obj)\n    if first_obj_str == second_obj_str:\n        return True\n    else:\n        return False\n\nif __name__ == '__main__':\n    first_obj = {\n        'name': 'John',\n        'age': 30\n    }\n    second_obj = {\n        'name': 'John',\n        'age': 34\n    }\n    print(compare_json_objects(first_obj, second_obj))", "label": 1}
{"text": "# Convert an integer to a float in Python\ndef int_to_float(num):\n    return float(num)\n\nif __name__ == '__main__':\n    integer = 5 # Sample integer\n    print(int_to_float(integer))", "label": 1}
{"text": "{\"user_id\": 12345, \"name\": \"John Doe\", \"age\": 41}", "label": 1}
{"text": "function celsiusToFahrenheit(celsius) {\n  return (celsius * 9 / 5) + 32;\n}\nvar fahrenheit = celsiusToFahrenheit(-4.5);", "label": 1}
{"text": "SELECT * FROM users WHERE age < 19;", "label": 1}
{"text": "The strings are different as the second string has an exclamation mark at the end.", "label": 1}
{"text": "Substring = \"Hell\".", "label": 1}
{"text": "def find_substring_occurrences(string, substring):\n    occurrence_list = []\n    index = 0\n    while string.find(substring, index) != -1:\n        index = string.find(substring, index)\n        occurrence_list.append(index)\n        index += 1\n    return occurrence_list", "label": 1}
{"text": "def add_to_dict(input_dict, key, value):\n    if key in input_dict:\n        input_dict[key].append(value)\n    else:\n        input_dict[key] = [value]\n    return input_dict", "label": 1}
{"text": "def binarySearch(arr, target):\n    low = 0\n    high = len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if arr[mid] == target:\n            return mid\n\n        elif arr[mid] < target:\n            low = mid + 1\n\n        else:\n            high = mid - 1\n\n    return -1", "label": 1}
{"text": "def is_palindrome(str):\n    reversedStr = str[::-1]\n    if reversedStr == str:\n        return True\n    else:\n        return False", "label": 1}
{"text": "def largest_element(lst):\n    largest = lst[0]\n    for num in lst:\n        if num > largest:\n            largest = num\n    return largest", "label": 1}
{"text": "Bubble sort is a simple sorting algorithm which iterates through a list and compares adjacent elements, swapping them if they are in the incorrect order. This process is repeated until the list is sorted in its correct order. It is a slow algorithm as it requires multiple iterations of the list, but it is simple to understand and implement.", "label": 1}
{"text": "let numbers = [1,3,7];\nlet result = numbers.map(number => number * 2);\nconsole.log(result);", "label": 1}
{"text": "function detectBrowser() { \n        // return the browser version \n        var browserName = navigator.appName;\n        var browserVersion = navigator.appVersion;\n        return (browserName + \" \" + browserVersion);\n    }", "label": 1}
{"text": "$('.hide').toggle();", "label": 1}
{"text": "import java.util.Arrays;\n\npublic class CommonElements {\n    \n    public static void main(String[] args) {\n        int[] arr1 = {1, 2, 3, 4, 5};\n        int[] arr2 = {2, 5, 6, 7};\n        \n        for(int i=0; i < arr1.length; i++){\n            for(int j = 0; j < arr2.length; j++) \n                if(arr1[i] == arr2[j]) \n                    System.out.println(arr1[i]);\n        }\n    }\n}", "label": 1}
{"text": "print(\"Programming is fun!\")", "label": 1}
{"text": "SELECT * FROM user WHERE age > 30;", "label": 1}
{"text": "C++", "label": 1}
{"text": "def add_matrices(a, b):\n    # create a new empty matrix, use the same dimensions as a and b\n    result = [[0 for x in range(len(a[0]))] for y in range(len(a))]\n\n    # iterate over a and b to complete the matrix addition \n    for i in range(len(a)):\n        for j in range(len(a[0])):\n            result[i][j] = a[i][j] + b[i][j]\n\n    return result", "label": 1}
{"text": "Database Management\nStatistics\nComputer Programming\nApplied Algorithms", "label": 1}
{"text": "def sum_of_digits(n): \n    # handle negative numbers \n    n = abs(n)\n\n    # base case when n has only one digit\n    if n < 10: \n        return n \n\n    # calculate the sum of the digits recursively  \n    else: \n        return (n % 10 + sum_of_digits(int(n / 10))) \n\nprint(sum_of_digits(13))", "label": 1}
{"text": "[[1], [2], [3], [1, 2], [1, 3], [2, 3], [1, 2, 3]]", "label": 1}
{"text": "{\n    \"article\": {\n        \"title\": \"Car\",\n        \"body\": {\n            \"section\": {\n                \"header\": \"Headline\",\n                \"p\": \"Text about cars\"\n            }\n        }\n    }\n}", "label": 1}
{"text": "list_of_nums = [2, 3, 7, 8, 10]\nodd_nums = list(filter(lambda num: num % 2 != 0, list_of_nums))", "label": 1}
{"text": "def my_func(x):\n    if x == 0:\n        return 1\n    else: \n        return x * my_func (x-1) \n\ndef solve(x): \n    return my_func(x)\n\nx = 5\nresult = solve(x)\nprint(result)", "label": 1}
{"text": ".text-center {\n    text-align: center;\n    margin-left: auto;\n    margin-right: auto;\n}", "label": 1}
{"text": "SELECT email FROM customer;", "label": 1}
{"text": "def delete_char(string, character):\n    new_string = \"\"\n    for char in string:\n        if char != character:\n            new_string += char\n    return new_string", "label": 1}
{"text": "The factorial of a given number n is the product of all positive integers less than or equal to n. The factorial of a number can be calculated using a loop to multiple all of the integers up to the given number, or it can be calculated using a recursive method where the factorial(n) = n*factorial(n-1).", "label": 1}
{"text": "<contact>\n <name>John Smith</name>\n <phone>123456789</phone>\n <email>john@example.com</email>\n</contact>", "label": 1}
{"text": "public class Person {\n     private String name;\n     private int age;\n     \n     public Person(String name, int age){\n         this.name = name;\n         this.age = age;\n     }\n     \n     public String getName(){\n         return this.name;\n     }\n     \n     public int getAge(){\n         return this.age;\n     }\n}", "label": 1}
{"text": "def max_num(x, y):\n    if x>y:\n        return x\n    else:\n        return y", "label": 1}
{"text": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None \n\ndef reverse_list(head):\n    prev = None\n    current = head\n    while current:\n        next = current.next\n        current.next = prev\n        prev = current\n        current = next\n    head = prev\n    return head", "label": 1}
{"text": "function fibonacciSequence(n) {\n    let sequence = [0, 1]\n    let i = 2 \n    while (i < n) {\n        sequence.push(sequence[i - 2] + sequence[i - 1]);\n        i++;\n    }\n    return sequence;\n}", "label": 1}
{"text": "sum = 10", "label": 1}
{"text": "pattern = /^[a-zA-Z]+$/", "label": 1}
{"text": "UPDATE Employees \nSET salary = salary * 1.07\nWHERE department = \u2018D2\u2019;", "label": 1}
{"text": "document.getElementById('button').addEventListener('click', (e)=>{\n    alert('Button is clicked!');\n});", "label": 1}
{"text": "8", "label": 1}
{"text": "{\n    \"name\": \"John Doe\",\n    \"age\": 24,\n    \"address\": \"123 Any Street, Anytown, USA\"\n}", "label": 1}
{"text": "let myFavoriteMovie = 'The Matrix';", "label": 1}
{"text": "SELECT first_name, last_name\nFROM Employees;", "label": 1}
{"text": "import smtplib\n\nfrom email.mime.multipart import MIMEMultipart\nfrom email.mime.text import MIMEText\nfrom email.mime.base import MIMEBase\nfrom email import encoders\n\nfrom_address = ''\nto_address = ''\n\n# create message object instance\nmessage = MIMEMultipart()\n\n# setup the parameters of the message\nmessage['From'] = from_address\nmessage['To'] = to_address\nmessage['Subject'] = \"Testing\"\n\n# add in the message body\nmessage.attach(MIMEText('Hello world','plain'))\n\n# attach a pdf file\nfilename = \"example_file.pdf\" \nattachment = open(filename, \"rb\") \n\npart = MIMEBase('application', 'octet-stream')\npart.set_payload((attachment).read())\nencoders.encode_base64(part)\npart.add_header('Content-Disposition', \"attachment; filename= %s\" % filename)\n\nmessage.attach(part)\n\n# create server\nserver = smtplib.SMTP('smtp.gmail.com', 587)\n\n# start server\nserver.starttls() \n  \n# Login \nserver.login(from_address, \"password\") \n  \n# send mail\nserver.sendmail(from_address, to_address, message.as_string()) \n\n# close the connection\nserver.quit()", "label": 1}
{"text": "select city, count(*) as total_count \nfrom customers\ngroup by city;", "label": 1}
{"text": "import math", "label": 1}
{"text": "SELECT customers.*\nFROM customers\nWHERE EXISTS \n(SELECT COUNT(*)\n FROM orders\n WHERE orders.customer_id = customers_id\n HAVING COUNT(*) > 2);", "label": 1}
{"text": "#include <iostream> \n#include <vector> \n#include <algorithm> \n\nusing namespace std;\n\nint main() {\n  vector<int> numbers = {1, 3, 5, 7, 9};\n  int sum = 0;\n  for (auto const& n: numbers)\n    sum += n;\n\n  double mean = sum/numbers.size();\n  double median;\n  if (numbers.size() % 2 == 0)\n    median = (numbers[numbers.size()/2] + numbers[numbers.size()/2 - 1])/2.0;\n  else\n    median = numbers[numbers.size()/2];\n\n  cout<<\"Mean: \"<<mean<<endl;\n  cout<<\"Median: \"<<median;\n\n  return 0;\n}", "label": 1}
{"text": "public class RotateMatrix \n{  \n    public static void rotate(int[][] arr, int n) \n    {  \n        for (int x = 0; x < n/2; x++) \n        {     \n            for (int y = x; y < n-x-1; y++) \n            { \n                int temp = arr[x][y];  \n                arr[x][y] = arr[y][n-1-x];  \n                arr[y][n-1-x] = arr[n-1-x][n-1-y];  \n                arr[n-1-x][n-1-y] = arr[n-1-y][x];  \n                arr[n-1-y][x] = temp;  \n            }  \n        }  \n    }  \n}", "label": 1}
{"text": "SELECT employee_id, first_name, last_name \nFROM employees \nWHERE last_name LIKE 'G%';", "label": 1}
{"text": ".container {\n    width: 960px;\n    margin: 0 auto;\n}", "label": 1}
{"text": "<html>\n  <head>\n    <title>Longest word finder</title>\n    <script type=\"text/javascript\">\n      function longestWordFinder() {\n        // Get user input\n        const inputString = document.getElementById(\"inputString\").value;\n\n        // Split the input string into an array of words\n        let words = inputString.split(\" \");\n\n        // Iterate through the words array and find the longest word\n        let longestWord = words[0];\n        for (let i = 1; i < words.length; i++) {\n            if (words[i].length > longestWord.length)\n                longestWord = words[i];\n        }\n\n        // Display the result\n        document.getElementById(\"result\").innerHTML = longestWord;\n      } \n    </script>\n  </head>\n  <body>\n    <h1>Longest Word Finder</h1>\n    <input type=\"text\" id=\"inputString\" />\n    <button type=\"submit\" onclick=\"longestWordFinder()\">Submit</button>\n    <p>The longest word is: <span id=\"result\"></span></p>\n  </body>\n</html>", "label": 1}
{"text": "function countOccurrence(arr, element) {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] == element) {\n      count++;\n    }\n  }\n  return count;\n}\n\nlet arr = [1, 2, 2, 4, 6];\nlet element = 2;\nconsole.log(countOccurrence(arr, element)); // Output: 2", "label": 1}
{"text": "<html>\n<head>\n  <title>Calorie Table</title>\n</head>\n<body>\n  <h1>Calorie Table</h1>\n  <table>\n    <thead>\n      <th>Dessert</th>\n      <th>Calories</th>\n    </thead>\n    <tbody>\n      <tr>\n        <td>Chocolate Cake</td>\n        <td>450</td>\n      </tr>\n      <tr>\n        <td>Ice Cream Sundae</td>\n        <td>300</td>\n      </tr>\n      <tr>\n        <td>Donut</td>\n        <td>350</td>\n      </tr>\n    </tbody>\n  </table>\n</body>\n</html>", "label": 1}
{"text": "<html>\n<head>\n  <title>Newsletter Sign Up</title>\n</head>\n<body>\n  <form action=\"submit.html\" method=\"POST\">\n    <h1>Newsletter Sign Up</h1>\n    Name: <input type=\"text\" name=\"name\"><br>\n    Email: <input type=\"email\" name=\"email\"><br>\n    <input type=\"submit\" value=\"Submit\">\n  </form>\n</body>\n</html>", "label": 1}
{"text": "function helloWorld() {\n  console.log('Hello' + ' ' + 'World')", "label": 1}
{"text": "The \"my-element\" element is not displaying correctly because it is positioned absolutely, which removes it from the normal flow of the document. As a result, its containing \"container\" is not aware of the element's size and is unable to accurately position it. In order to fix this issue, the \"position\" value should be changed to \"relative\" or \"static\" to render the element correctly within its container.", "label": 1}
{"text": "<table>\n  <thead>\n    <tr>\n      <th>Student Name</th>\n      <th>Student ID</th>\n      <th>Class</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>John Smith</td>\n      <td>12345</td>\n      <td>Freshman</td>\n    </tr>\n    <tr>\n      <td>Mary Jones</td>\n      <td>45678</td>\n      <td>Sophomore</td>\n    </tr>\n  </tbody>\n</table>", "label": 1}
{"text": "import random\nimport string\n\ndef generatePassword():\n    chars = string.ascii_letters + string.digits + '!@#$%^&*/.:?|'\n    size = 8\n    random_string = \"\".join(random.choice(chars) for _ in range(size))\n    return random_string\n\nrandom_password = generatePassword()\nprint(random_password) # qr6.h^37", "label": 1}
{"text": "import nltk\n\nclass LanguageClassifier(object):\n\t\n    def __init__(self):\n        self.languages = []\n\t\n    def train(self, data):\n        train_sents = []\n        train_tags = []\n\n        # extract sentences and tags from data\n        for lang, sentences in data.items():\n            self.languages.append(lang)\n            train_sents.extend(sentences)\n            train_tags.extend([lang] * len(sentences))\n\n        # build featureset\n        feature_set = []\n        for (words, lang) in zip(train_sents, train_tags):\n            words_dict = dict([(word, True) for word in words])\n            feature_set.append((words_dict, lang))\n\t\n        # train classifier\n        self.classifier = nltk.NaiveBayesClassifier.train(feature_set)\n\n    def predict(self, sentence):\n        words_dict = dict([(word, True) for word in sentence])\n        return self.classifier.classify(words_dict)", "label": 1}
{"text": "# Function to calculate \n# maximum number of edges \n# that can be added \n# to a graph without cycles \ndef max_edges(total_nodes): \n\t# initialize result to 0 \n\tresult = 0 \n\t\n\t# consider every pair of nodes \n\tfor i in range(total_nodes): \n\t\tfor j in range(i + 1, total_nodes): \n\t\t\tresult += 1  \n\t\t\n\t# return the result \n\treturn result", "label": 1}
{"text": "import tensorflow as tf\nfrom tensorflow import keras \n\n# create a model\nmodel = keras.Sequential()\n\n# add a convolutional layer\nmodel.add(keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=(28, 28, 1)))\n\n# add a max pooling layer\nmodel.add(keras.layers.MaxPool2D((2,2)))\n\n# add a flatten layer\nmodel.add(keras.layers.Flatten())\n\n# add a Dense layer\nmodel.add(keras.layers.Dense(128, activation='relu'))\n\n# add second Dense layer\nmodel.add(keras.layers.Dense(10, activation='softmax'))\n\n# compile the model\nmodel.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])", "label": 1}
{"text": "array.push(element) if element satisfies a certain condition, such as element.value === 5;", "label": 1}
{"text": "arr.splice(0, 1);", "label": 1}
{"text": "for (let obj of array) {\n  // Your loop code here\n}", "label": 1}
{"text": "const repeat = (str, n) => \n    Array(n).fill(str).join('');", "label": 1}
{"text": "array.splice(index, 1);", "label": 1}
{"text": "The Set data structure can be used to remove duplicate characters from a string in JavaScript. \n\nFor example:\n[...new Set(\"string\")].join(\"\"); // returns \"strng\"", "label": 1}
{"text": "\"\"\"\nCheck a given number is even or odd\n\"\"\"\ndef check_even_or_odd(num):\n    if num % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n\nif __name__ == '__main__':\n    num = int(input(\"Enter a number to check : \"))\n    print(\"The given number is\",check_even_or_odd(num))", "label": 1}
{"text": "# Get user input for two numbers\nnum1 = int(input(\"Enter first number: \"))\nnum2 = int(input(\"Enter second number: \"))\n\n# Print the sum of the two numbers\nprint(\"The sum of the two numbers is:\", num1 + num2)", "label": 1}
{"text": "function getGreater(num1, num2) {\n return Math.max(num1, num2);\n}", "label": 1}
{"text": "Try and except blocks are used in Python to catch and handle errors in code. The basic structure of a try-except block is a try statement followed by one or more except statements. The try block includes code that may throw an error and the except block includes code that will be executed if an error is thrown. This is useful for code that needs to handle any potential errors that may arise from its execution.", "label": 1}
{"text": "def bubble_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]", "label": 1}
{"text": "public class QuickSort \n{ \n    // Method to implement quick sort \n    public static void quickSort(int[] arr, int low, int high) \n    { \n        if (low < high) \n        { \n            /* pi is partitioning index, arr[pi] is  \n              now at right place */\n            int pi = partition(arr, low, high); \n  \n            // Recursively sort elements before \n            // partition and after partition \n            quickSort(arr, low, pi-1); \n            quickSort(arr, pi+1, high); \n        } \n    } \n  \n    // Method to find partition index \n    public static int partition(int arr[], int low, int high) \n    { \n        int pivot = arr[high];  \n        int i = (low-1); // index of smaller element \n        for (int j=low; j<high; j++) \n        { \n            // If current element is smaller than the pivot \n            if (arr[j] < pivot) \n            { \n                i++; \n  \n                // swap arr[i] and arr[j] \n                int temp = arr[i]; \n                arr[i] = arr[j]; \n                arr[j] = temp; \n            } \n        } \n  \n        // swap arr[i+1] and arr[high] (or pivot) \n        int temp = arr[i+1]; \n        arr[i+1] = arr[high]; \n        arr[high] = temp; \n  \n        return i+1; \n    } \n  \n    // Main method \n    public static void main(String args[]) \n    { \n        int[] arr = {4, 3, 6, 2, 5, 1}; \n        int n = arr.length; \n          \n        quickSort(arr, 0, n-1); \n          \n        /* Print the sorted array */\n        System.out.println(\"Sorted array: \"); \n        for(int i=0; i<n; ++i) \n            System.out.print(arr[i] + \" \"); \n    } \n}", "label": 1}
{"text": "sentence = \"I have two friends\"", "label": 1}
{"text": "SELECT item_name, price FROM inventory;", "label": 1}
{"text": "One possible algorithm to solve a N queens problem is to use backtracking. The basic idea is to place a queen in a column and try to place the other queen in the next column, and then repeating this in the subsequent columns until all of the queens are placed in the board.", "label": 1}
{"text": "SELECT name FROM employees WHERE name LIKE 'A%';", "label": 1}
{"text": "li {\n  background-color: blue;\n  color: green;\n}", "label": 1}
{"text": "#include <iostream>\n \nusing namespace std;\n \n// Function to print the sum of two integers\nvoid printSumOfIntegers(int first, int second) {\n    cout << first + second << endl;\n}", "label": 1}
{"text": "The \u2018except\u2019 statement in python is used to handle exceptions that may arise while executing a program. Exceptions can be either syntactic or logical errors. The \u2018except\u2019 statement can be used to catch the specific type of exception and handle them appropriately. For example, it can be used to catch a ValueError, TypeError or IndexError, or any other type of exception, and appropriately handle it.", "label": 1}
{"text": "function sortArray(nums) {\n    for (let i = 0; i < nums.length; i++) {\n        for (let j = i + 1; j < nums.length; j++) {\n            if (nums[j] < nums[i]) {\n                let temp = nums[i];\n                nums[i] = nums[j];\n                nums[j] = temp;\n            }\n        }\n    }\n    return nums;\n}", "label": 1}
{"text": "def reverseString(str): \n    reversed_str = \"\" \n    for i in str: \n        reversed_str = i + reversed_str \n    return reversed_str   \n\nreverseString(\"Hello\")", "label": 1}
{"text": "#include <iostream> \nusing namespace std; \n\nint main() \n{ \n    string str = \"ab123cde\"; \n  \n    string digit; \n    string alpha; \n  \n    for (int i = 0; i < str.length(); i++) { \n        if (isdigit(str[i])) { \n            digit.push_back(str[i]); \n        } \n        else { \n            alpha.push_back(str[i]); \n        } \n    } \n  \n    cout << digit << endl; \n    cout << alpha << endl; \n  \n    return 0; \n}", "label": 1}
{"text": "<button onclick=\"window.location.href='https://example.com/';\">Visit example.com</button>", "label": 1}
{"text": "def isUnique(string): \n \n    # Assuming character set is ASCII (128 characters) \n    if len(string) > 128: \n        return False\n \n    char_set = [False for _ in range(128)] \n    for char in string: \n        char_value = ord(char) \n \n        if char_set[char_value]: \n            return False\n \n        char_set[char_value] = True\n \n    return True", "label": 1}
{"text": "import UIKit\n\nclass ViewController: UIViewController {\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        // Do any additional setup after loading the view.\n        \n        let fromCurrency = \"USD\"\n        let toCurrency = \"AUD\"\n        \n        CurrencyService.shared.getCurrencyExchangeRate(fromCurrency: fromCurrency, toCurrency: toCurrency) { exchangeRate in\n            print(\"The exchange rate from \\(fromCurrency) to \\(toCurrency) is \" + exchangeRate)\n        }\n    }\n\n}\n\nclass CurrencyService {\n    \n    static let shared = CurrencyService()\n    \n    func getCurrencyExchangeRate(fromCurrency: String, toCurrency: String, completion: @escaping (String) -> Void) {\n        guard let url = URL(string: \"https://api.exchangeratesapi.io/latest?base=\\(fromCurrency)&symbols=\\(toCurrency)\") else {\n            return\n        }\n        \n        URLSession.shared.dataTask(with: url) { (data: Data?, response: URLResponse?, error: Error?) in\n            if let error = error {\n                print(\"Error: Could not request exchange rate from server. \\(error.localizedDescription)\")\n            }\n            \n            guard let data = data else {\n                print(\"Error: Did not receive data\")\n                return\n            }\n            \n            do {\n                let json = try JSONSerialization.jsonObject(with: data, options: [])\n                guard let jsonDict = json as? Dictionary<String, Any>,\n                    let rates = jsonDict[\"rates\"] as? Dictionary<String, Double>,\n                    let exchangeRate = rates[toCurrency] else {\n                        print(\"Error: Could not get exchange rate from JSON\")\n                        return\n                }\n                completion(String(exchangeRate))\n            } catch {\n                print(\"Error: Could not parse JSON: \\(error.localizedDescription)\")\n            }\n        }.resume()\n    }\n    \n}", "label": 1}
{"text": "list_floats = [float(x) for x in the_string.split()]\nprint(list_floats)", "label": 1}
{"text": "def combine_lists(list1, list2):\n combined_list = list1 + list2\n return combined_list\n\nprint(combine_lists(list1, list2))", "label": 1}
{"text": "An abstract class is a special type of class which is only partially implemented. It contains one or more abstract methods which are methods that do not have any concrete implementation. Abstract classes cannot be instantiated and can only be used as base classes for other classes.", "label": 1}
{"text": "SELECT name FROM employees WHERE salary BETWEEN 40000 AND 50000;", "label": 1}
{"text": "SELECT SUM(salary) as total_salary FROM employees WHERE salary BETWEEN 40000 AND 50000;", "label": 1}
{"text": "def dictionary(list_keys, list_vals):\n    dict1 = dict(zip(list_keys, list_vals))\n    return dict1\n\nfinal_dict = dictionary(list_keys, list_vals)\nprint(\"Final dictionary:\", final_dict)", "label": 1}
{"text": "def word_count(my_string): \n    words = my_string.split()  \n    frequency = {} \n    for word in words: \n        if word in frequency: \n            frequency[word] += 1\n        else: \n            frequency[word] = 1\n    return frequency\n\nfrequency_dict = word_count(my_string)\nprint(\"Frequency dictionary: \", frequency_dict)", "label": 1}
{"text": "SELECT MAX(salary), MIN(salary)\nFROM Employee", "label": 1}
{"text": "A good approach to debugging a JavaScript program is to start by checking for syntax errors. This can be done by using an integrated development environment (IDE) or text editor with built-in syntax checking capabilities. Additionally, the JavaScript console can be used to inspect variables and view output. It is also useful to set breakpoints in the code and step through the code line-by-line to identify the cause of any issues.", "label": 1}
{"text": "The command to compile a C++ program is typically \"g++ <filename>.cpp\". For example, if the name of the C++ program is \"HelloWorld.cpp\", the command to compile it would be \"g++ HelloWorld.cpp\".", "label": 1}
{"text": "def sum(a, b): \n    return a + b", "label": 1}
{"text": "for lst in my_list:\n    print(lst[1])", "label": 1}
{"text": "def group_three(nums): \n    result = []\n    nums_length = len(nums)\n\n    for index in range(0, nums_length, 3):\n        result.append(nums[index:index + 3])\n\n    return result\n\nif __name__ == '__main__':\n    nums = [1, 2, 3, 4, 5, 6]\n    print(group_three(nums)) # Output: [[1, 2, 3], [4, 5, 6]]", "label": 1}
{"text": "SELECT c.customer_id \nFROM Customers c\n    INNER JOIN Purchases p\n    ON c.customer_id = p.customer_id\nWHERE p.productid = 100\n    AND p.customer_id\nIN \n    (SELECT DISTINCT p2.customer_id\n    FROM Purchases p2\n    WHERE p2.productid = 101)", "label": 1}
{"text": "def sort_list(lst):\n    lst.sort()\n    return lst", "label": 1}
{"text": "function subtractDates(date1, date2) {\n    const diffTime = Math.abs(date2 - date1);\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24)); \n\n    return diffDays;\n}\n\n# Subtract two dates\nresult = subtractDates(new Date(\"2020-11-01\"), new Date(\"2020-11-06\"));\n\n# Output\n# 5", "label": 1}
{"text": "<h1>Lorem ipsum.</h1>", "label": 1}
{"text": "<!DOCTYPE html>\n<html> \n  <head>\n    <title>My Website</title>\n  </head>\n  <body>\n    <h1>My Website</h1>\n  </body>\n</html>", "label": 1}
{"text": "let list = \"alpha, beta, gamma\".split(\", \");", "label": 1}
{"text": "my_dict = {1: 'a', 2: 'b', 3: 'c'}\n\nmy_dict = {1: 'a', 2: 'b'}\nmy_dict[3] = 'c'\nprint(my_dict)", "label": 1}
{"text": "UPDATE employees\nSET Salary = 80000\nWHERE ID = 4;", "label": 1}
{"text": "// Binary Search Algorithm \n\nfunction binarySearch(arr, x) { \n  \n    let start=0, end=arr.length-1; \n          \n    // Iterate while start not meets end \n    while (start<=end) { \n  \n        // Find the mid index \n        let mid=Math.floor((start + end)/2); \n  \n        // If element is present at mid, return True \n        if (arr[mid]===x) return true; \n  \n        // Else look in left or right half accordingly \n        else if (arr[mid] < x)  \n             start = mid + 1; \n        else\n             end = mid - 1; \n    } \n  \n    return false; \n}", "label": 1}
{"text": "public class Stack {\n  \n  private Node top;\n  \n  public Stack(){\n    this.top = null;\n  }\n  \n  private class Node{\n    int data;\n    Node next;\n    \n    public Node(int data){\n      this.data = data;\n      this.next = null;\n    }\n  }\n  \n  public void push(int data){\n    Node newNode = new Node(data);\n    if(top == null){\n      top = newNode;\n    } else {\n      newNode.next = top;\n      top = newNode;\n    }\n  }\n  \n  public int pop(){\n    if(top == null){\n      throw new NoSuchElementException(\"Stack Underflow Error\");\n    }\n    int data = top.data;\n    top = top.next;\n    return data;\n  }\n  \n  public int peek(){\n    if(top == null){\n      throw new NoSuchElementException(\"Stack Underflow Error\");\n    }\n    return top.data;\n  }\n  \n  public boolean isEmpty(){\n    return top == null;\n  }\n}", "label": 1}
{"text": "The syntax for creating a variable in Java is:\n<data_type> <variable_name> = <variable_value>;\n\nFor example:\n\nint myVar = 5;", "label": 1}
{"text": "public class Factorial {\n \n  public static int calcFactorial(int number){\n    int factorial;\n \n    if(number == 0 || number == 1){\n      factorial = 1;\n    } else {\n      factorial = number * calcFactorial(number-1);\n    }\n    return factorial;\n  }\n \n  public static void main(String[] args){\n    System.out.println(calcFactorial(5));\n  }\n}", "label": 1}
{"text": "The best data structure for searching a value in a large set of data is a data structure that supports fast search and retrieval of data such as a hash table or a binary search tree. Hash tables are particularly efficient because they allow for constant time search and retrieval, while binary search trees have a time complexity of O(log n). Additionally, hash tables are typically more space efficient than binary search trees. However, binary search trees also have their uses, as they allow for data to be sorted and can easily handle dynamic changes in the size of the data set.", "label": 1}
{"text": "total = 0\nfor i in mylist:\n    total += 1\nprint(\"The total number of elements is:\", total)", "label": 1}
{"text": "The Python sort() function is used to sort a list of elements. It takes two parameters: the list to be sorted and a function (optional) that defines the sorting criteria. The sorted list is returned in ascending order by default. The sort() function is stable, meaning that the original positions of equal elements will be preserved.", "label": 1}
{"text": "for i in range(3):\n    print(\"hello world\")", "label": 1}
{"text": "def add(a, b):\n return a + b", "label": 1}
{"text": "function countUsers(object) {\n let count = 0;\n const users = object.users;\n \n for (let i = 0; i < users.length; i++) {\n  count++;\n }\n \n return count; \n}", "label": 1}
{"text": "SELECT * FROM accounts INNER JOIN users ON accounts.user_id = users.id", "label": 1}
{"text": "SELECT product_id, product_name, revenue \nFROM products \nORDER BY revenue DESC \nLIMIT 10;", "label": 1}
{"text": "i = 1\nwhile i <= 10:\n  print(i)\n  i += 1", "label": 1}
{"text": "class Student {\n  private:\n    string firstName;\n    string lastName;\n    int marks;\n\n  public:\n    // constructor and methods\n};", "label": 1}
{"text": "def get_max(list):\n    max_value = list[0]\n    for value in list:\n        if value > max_value:\n            max_value = value\n    return max_value", "label": 1}
{"text": "Quick sort is an efficient sorting algorithm that divide-and-conquer approach.  It picks an element as a pivot from the array and partitions the array around the pivot.  It recursively sorts the two sub-arrays created on either side of the pivot element.", "label": 1}
{"text": "const employeeRecords = {\n    id: 0,\n    name: '',\n    email: '',\n    department: '',\n    salary: 0\n}", "label": 1}
{"text": "const factorial = ( num ) => {\n  if ( num === 0 ) return 1;\n  return num * factorial( num - 1 );\n};\n\nconsole.log (factorial(5));", "label": 1}
{"text": "#!/bin/bash\n \n# A Bash script to calculate average of three numbers.\n \n((sum = num1 + num2 + num3))\necho $((sum / 3))", "label": 1}
{"text": "a is an integer, \nb is a character, \nc is a floating point number.", "label": 1}
{"text": "import requests \n  \napi_key = \"YOURAPIKEY\"\n  \n# base_url variable to store url \nbase_url = \"http://api.openweathermap.org/data/2.5/weather?\"\n  \n# Give city name \ncity_name = input(\"Enter city name : \") \n  \n# complete_url variable to store \n# complete url address \ncomplete_url = base_url + \"appid=\" + api_key + \"&q=\" + city_name \n\n# get method of requests module \n# return response object \nresponse = requests.get(complete_url) \n  \n# json method of response object  \n# convert json format data into \n# python format data \nx = response.json() \n  \n# Now x contains list of nested dictionaries \n# Check the value of \"cod\" key is equal to \n# \"404\", means city is found otherwise, \n# city is not found \nif x[\"cod\"] != \"404\": \n  \n    # store the value of \"main\" \n    # key in variable y \n    y = x[\"main\"] \n  \n    # store the value corresponding \n    # to the \"temp\" key of y \n    current_temperature = y[\"temp\"] \n  \n    # store the value corresponding \n    # to the \"pressure\" key of y \n    current_pressure = y[\"pressure\"] \n  \n    # store the value corresponding \n    # to the \"humidity\" key of y \n    current_humidiy = y[\"humidity\"] \n  \n    # store the value of \"weather\" \n    # key in variable z \n    z = x[\"weather\"] \n  \n    # store the value corresponding  \n    # to the \"description\" key at  \n    # the 0th index of z \n    weather_description = z[0][\"description\"] \n  \n    # print following values \n    print(\" Temperature (in kelvin unit) = \" +\n                    str(current_temperature) + \n          \"\\n atmospheric pressure (in hPa unit) = \" +\n                    str(current_pressure) +\n          \"\\n humidity (in percentage) = \" +\n                    str(current_humidiy) +\n          \"\\n description = \" +\n                    str(weather_description)) \n  \nelse: \n    print(\" City Not Found \")", "label": 1}
{"text": "def is_valid_isbn(isbn):\n    isbn_length = len(isbn)\n    if isbn_length != 10:\n        return False\n   \n    # Calculate the check digit\n    sum = 0\n    for i in range(9):\n        sum += (i+1) * int(isbn[i])\n    check_digit = sum % 11\n   \n    # Check if the check digit matches the last character of the ISBN.\n    if check_digit == 10 and isbn[-1].upper() != 'X':\n        return False\n    elif check_digit < 10 and int(isbn[-1]) != check_digit:\n        return False\n    else:\n        return True", "label": 1}
{"text": "#include <iostream>\n#include <unordered_map>\nusing namespace std;\n\nint countPairsWithDiffK(int arr[], int n, int k){\n    // Create an empty unordered_map\n    unordered_map<int, int> map;\n     \n    // Store count of all elements in map\n    for (int i = 0; i < n; i++)\n        map[arr[i]]++; \n     \n    int count = 0; \n \n    // Iterate through all elements and \n    // find number of elements with difference\n    // equal to k.\n    for (int i = 0; i < n; i++) {\n        if (map[arr[i] + k])\n            count += map[arr[i] + k];\n         \n        if (map[arr[i] - k])\n            count += map[arr[i] - k];\n         \n        // Decrease count for same numbers\n        if (k == 0)\n            count--;\n    }\n \n    return count / 2;\n}\n \n// Driver program\nint main()\n{\n    int arr[] =  {1, 7, 5, 9, 2, 12, 3};\n    int n = sizeof(arr) / sizeof(int);\n    int k = 2;\n     \n    cout << countPairsWithDiffK(arr, n, k);\n     \n    return 0;\n}", "label": 1}
{"text": "[\"1\", \"4\", \"8\"]", "label": 1}
{"text": "class DoublyLinkedList:\n    def __init__(self, val):\n        self.val = val\n        self.next = None\n        self.previous = None\n\n    def append(self, val): \n        current = self \n        while current.next is not None: \n            current = current.next\n        current.next = DoublyLinkedList(val) \n        current.next.previous = current", "label": 1}
{"text": "A text editor is a computer program used for entering, editing, formatting and displaying text. Some text editors support syntax coloring, code completion and autopairing for programming languages. Text editors are used for programming, writing, composition, web design and many other forms of text-related work.", "label": 1}
{"text": "class APIHandler:\n    def __init__(self, base_url, api_key):\n        self.base_url = base_url\n        self.api_key = api_key\n    \n    def get(self, endpoint):\n        response = requests.get(self.base_url + endpoint)\n        return response\n    \n    def post(self, endpoint, data):\n        headers = {'Authorization': 'Bearer ' + self.api_key}\n        response = requests.post(self.base_url + endpoint, headers=headers, data=data)\n        return response", "label": 1}
{"text": "import random\n\ndef rand_num(min_num,max_num):\n    return random.randrange(min_num,max_num)", "label": 1}
{"text": "int checkAlpha(char str[]) \n{ \n    int i; \n  \n    for (i = 0; str[i] != '\\0'; i++) { \n        if ((str[i] < 'a' || str[i] > 'z') &&  \n            (str[i] < 'A' || str[i] > 'Z')) { \n            return 0; \n        } \n    } \n  \n    return 1; \n}", "label": 1}
{"text": "The structural output of the query should be: \nname | age | cats \n-----|-----|----- \n  |  |", "label": 1}
{"text": "class Bubble:\n    def sort(self, list):\n        # iterate over the list\n        for i in range(len(list) - 1):\n            for j in range(len(list) - 1 - i): # loop from the first until the last\n                if list[j] > list[j+1]:  # if order is broken\n                    list[j], list[j+1] = list[j+1], list[j]  # swap the elements\n\n# Driver Code \nif __name__ == '__main__': \n    list = [ 64, 34, 25, 12, 22, 11, 90 ]\n    bubble = Bubble() \n    bubble.sort(list) \n   \n    print (\"Sorted array :\") \n    for i in range(len(list)): \n        print (\"%d\" %list[i])", "label": 1}
{"text": "<html>\n <head>\n  <script>\n   function sortStudents(students) {\n    students.sort((a, b) => (a.grade > b.grade) ? 1 : -1);\n    return students;\n   }\n   var sortedStudents = sortStudents(students);\n   document.write('<ul>');\n   sortedStudents.forEach(student => {\n    document.write('<li>' + student.name + ' - ' + student.grade + '</li>');\n   });\n   document.write('<ul>');\n  </script>\n </head>\n</html>", "label": 1}
{"text": "public static boolean isAnagram(String str1, String str2){\n    if(str1.length() != str2.length()){\n        return false;\n    }\n    char[] char1 = str1.toCharArray();\n    char[] char2 = str2.toCharArray();\n    Arrays.sort(char1);\n    Arrays.sort(char2);\n    return Arrays.equals(char1, char2);\n}", "label": 1}
{"text": "def add_numbers(a, b):\n return a + b", "label": 1}
{"text": "#include <iostream>\n\nint main()\n{\n  for (int i=1;i<=100;i++)\n  {\n    cout << i << endl;\n  }\n  return 0; \n}", "label": 1}
{"text": "def delete_node(node):\n  if node is None or node.next is None:\n    return\n  \n  next_node = node.next\n  node.data = next_node.data\n  node.next = next_node.next\n  next_node = None", "label": 1}
{"text": "ClassName objectName = new ClassName(parameters);", "label": 1}
{"text": "12", "label": 1}
{"text": "Python would be the best programming language to use for a web scraping task, as it has powerful libraries such as Scrapy and Beautiful Soup which make it easy to scrape data from webpages.", "label": 1}
{"text": "\\d{3}", "label": 1}
{"text": "import unicodedata\n\ndef string_to_unicode_array(string):\n    return [unicodedata.lookup(ord(char)) for char in string]\n\nif __name__ == '__main__':\n    print(string_to_unicode_array('Hello World'))", "label": 1}
{"text": "The function 'process' can be called with the following syntax: process();", "label": 1}
{"text": "The result of division of two integers is a float.", "label": 1}
{"text": "The date can be formatted in the YYYY-mm-dd format as follows: var date = new Date(); var formatted_date = date.getFullYear() + '-' + (date.getMonth() + 1) + '-' + date.getDate();", "label": 1}
{"text": "def mergesort(nums): \n    if len(nums) == 1: \n        return nums \n  \n    mid = len(nums) // 2\n    left_list = nums[:mid] \n    right_list = nums[mid:] \n  \n    left_list = mergesort(left_list) \n    right_list = mergesort(right_list) \n    return merge(left_list, right_list) \n\ndef merge(left_list, right_list): \n    sorted_list = [] \n    left_list_index = right_list_index = 0\n  \n    left_list_length, right_list_length = len(left_list), len(right_list) \n  \n    for _ in range(left_list_length + right_list_length): \n        if left_list_index < left_list_length and right_list_index < right_list_length: \n            if left_list[left_list_index] <= right_list[right_list_index]: \n                sorted_list.append(left_list[left_list_index]) \n                left_list_index += 1\n            else: \n                sorted_list.append(right_list[right_list_index]) \n                right_list_index += 1\n        elif left_list_index == left_list_length: \n            sorted_list.append(right_list[right_list_index]) \n            right_list_index += 1\n        elif right_list_index == right_list_length: \n            sorted_list.append(left_list[left_list_index]) \n            left_list_index += 1\n  \n    return sorted_list \n\nOutput:\n[2, 3, 5, 7, 9]", "label": 1}
{"text": "indices = []\nfor i, element in enumerate(a):\n    indices.append(i)\n\nOutput:\n[0, 1, 2, 3, 4]", "label": 1}
{"text": "def test_sum(arr, sum): \n    for i in range(len(arr)-1): \n        for j in range(i+1, len(arr)): \n            if arr[i] + arr[j] == sum: \n                return True \n    return False\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4] \n    sum = 7\n    result = test_sum(arr, sum) \n    if result: \n        print(\"Array has two elements with the given sum\") \n    else: \n        print(\"Array doesn't have two elements with the given sum\")", "label": 1}
{"text": "def permutation(str): \n    if len(str) == 0: \n        return [] \n    if len(str) == 1: \n        return [str]  \n    l = []  \n    for i in range(len(str)): \n       m = str[i]  \n       remLst = str[:i] + str[i+1:]  \n       for p in permutation(remLst): \n           l.append([m] + p) \n    return l \n\nif __name__== \"__main__\":\n    s = 'ABC'\n    perms = permutation(s)\n    for p in perms:\n        print(''.join(p))", "label": 1}
{"text": "$(document).ready(function() {\n    $('input.input-element').each(function() {\n        // Do stuff\n    });\n});", "label": 1}
{"text": "Algorithm to sort an array A of integers in ascending order without using any pre-defined sorting functions:\n\n1. Initialize a variable swapped to false.\n2. Iterate through the array A, compare each pair of adjacent elements and swap them if they are not in ascending order.\n3. After each iteration, if a swap has occurred, set swapped to true, otherwise set it to false.\n4. Repeat step 2 and 3 until swapped is false.", "label": 1}
{"text": "String.fromCharCode(105, 152, 85, 248, 0, 248, 88, 88, 105, 133, 233, 240);", "label": 1}
{"text": "let userNumber = parseInt(prompt(\"Please enter a number:\"));\nlet randomNumber = Math.floor(Math.random() * (100 - userNumber + 1)) + userNumber; \nconsole.log(randomNumber);", "label": 1}
{"text": "# defining a function  \ndef add_ele(numbers): \n  \n    # Initialize result \n    result = 0\n    i = 0\n  \n    # Iterating elements in list  \n    for i in range(len(numbers)): \n        result += numbers[i] \n    return result \n  \n# Driver code \nnumbers = [3, 6, 8, 12, 4, 19, 23, 12, 15, 10, 20]\nprint(add_ele(numbers))", "label": 1}
{"text": "if number < 0: \n    print(\"The number is negative.\") \nelse: \n    print(\"The number is positive.\")", "label": 1}
{"text": "def search_array(arr, target):\n    '''This function searches a given array for the target and returns its index if found.'''\n    for i, num in enumerate(arr):\n        if num == target:\n            return i\n    return -1", "label": 1}
{"text": "The most efficient way to find the longest word in a string is to use the split() method to convert the string into a list of words, then use the max() method to find the longest word in the list. For example:\n\nstring = \"The quickest way to find the longest word\"\nlongest_word = max(string.split(), key=len)", "label": 1}
{"text": "def gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)", "label": 1}
{"text": "query getTitlesCount {\n  blog {\n    posts {\n      title\n    }\n    titlesCount: postsCount\n  }\n}", "label": 1}
{"text": "def to_uppercase(str_list):\n    return [s.upper() for s in str_list]", "label": 1}
{"text": "def sum(numbers):\n    return sum(numbers)", "label": 1}
{"text": "def wordCountByLength(string, length):\n    words = string.split()\n    return sum(1 for word in words if len(word) == length)", "label": 1}
{"text": "if string1 > string2:\n    print(\"String 1 is lexicographically greater\")\nelse:\n    print(\"String 2 is lexicographically greater\")", "label": 1}
{"text": "The syntax of a for loop in Python is: \nfor item in iterable:\n    statement(s)", "label": 1}
{"text": "The error is that the operator '=+' should be changed to '+='. This operator adds the value on the left to the current value of the variable on the right, and then assigns the result back to the variable on the right. The correct code should be:\n\nsum = 0\nfor i in range(1,10): \n    sum += i", "label": 1}
{"text": "def is_prime(num):\n    # check prime\n    divisors = []\n    for x in range(1, num + 1):\n        if (num % x == 0):\n            divisors.append(x)\n    if len(divisors) == 2:\n        return True\n    else:\n        return False\n\ndef categorize_numbers(arr):\n    prime_nums = []\n    composite_nums = []\n    for number in arr:\n        if is_prime(number):\n            prime_nums.append(number)\n        else:\n            composite_nums.append(number)\n    return prime_nums, composite_nums\n    \nprime_nums, composite_nums = categorize_numbers(arr)\nprint(\"Prime numbers in arr:\", prime_nums)\nprint(\"Composite numbers in arr:\", composite_nums)", "label": 1}
{"text": "public static void printShortString(String a, String b) {\n    if (a.length() > b.length()) {\n        System.out.println(b);\n    } else {\n        System.out.println(a);\n    }\n}", "label": 1}
{"text": "Classification problem.", "label": 1}
{"text": "fruits = [\"apple\", \"banana\", \"mango\", \"strawberry\", \"kiwi\"]", "label": 1}
{"text": "def remove_duplicates(arr)\n    new_arr = []\n    arr.each do |x|\n        if !new_arr.include? x\n            new_arr.push(x)\n        end\n    end\n    return new_arr\nend", "label": 1}
{"text": "<div style=\"width: 400px; background-color: #00FFFF;\"></div>", "label": 1}
{"text": "const isOnlyNumbers = (str) => {\n  let regex = /^[0-9]+$/;\n  return regex.test(str);\n};", "label": 1}
{"text": "['Kj9F7VAl1q', '28jVYbueph', 'f7VZRif5uP', '2jf5CHXyt7', '3qBtyKjDIY', 'hE5wrRmIP6', 'V7jQcfhIBz', 'UQy6gCwPa5', '6Ujpu7NfMk', 'Z6DFhBoK8e', 'DIFpjgrhT7', 'TzdGsvhRO2', '1Kv4RyZoF8', 'RKjUXviPca', 'yO2PCtEjx1', 'qchomMdP9X', '9ydNHCaTZX', 'TFrhYdgSjp', 'BYeH12I4th', '4XNgJfKCAd']", "label": 1}
{"text": "The character 'l' is the most frequently used character in the given string.", "label": 1}
{"text": "# Python 3\ndef greet(name):\n    print(\"Hello,\", name)\n    \ngreet(\"John\")", "label": 1}
{"text": "def find_primes(n):\n    primes=[]\n    for num in range(2, n+1):\n        for n in range(2, num):\n            if num%n==0:\n                break\n            \n        else:\n            primes.append(num)\n    return primes", "label": 1}
{"text": "def replace_letter(string, replace, with):\n    return string.replace(replace, with)", "label": 1}
{"text": "cube = lambda x: x ** 3\nadd_cube = lambda x, y: cube(x) + cube(y)", "label": 1}
{"text": "s1 = \"Hello\"\ns2 = \"Hello\"\n\nprint(s1 == s2) # Output: True", "label": 1}
{"text": "def most_frequent(s):\n    char_freq = {}\n    max_freq = 0\n    most_frequent_char = \"\"\n\n    for c in s:\n        if c in char_freq:\n            char_freq[c] += 1\n        else:\n            char_freq[c] = 1\n\n        if char_freq[c] > max_freq:\n            max_freq = char_freq[c]\n            most_frequent_char = c\n\n    return most_frequent_char\n\nmy_string = \"hello world\"\nprint(most_frequent(my_string)) # Output: 'l'", "label": 1}
{"text": "my_array = [[1, 2, 3],\n             [4, 5, 6],\n             [7, 8, 9]]\n\n# A function to print second diagonal of \n# given array\ndef print_second_diagonal(arr): \n    # Find length of given array \n    n = len(arr)  \n      \n    # Traverse second diagonal \n    for i in range(0, n): \n        print(arr[i][n-1-i], end = \" \") \n          \n# Driver code \nprint_second_diagonal(my_array)\n# Output: 3 6 9", "label": 1}
{"text": "import pandas as pd\n\nmy_df = pd.DataFrame(my_dict)\nprint(my_df)", "label": 1}
{"text": "for number in my_list:\n    if (number % 2 == 0):\n        print(number)", "label": 1}
{"text": "def classify(x):\n    if x > 0:\n        return \"positive\"\n    elif x == 0:\n        return \"zero\"\n    else:\n        return \"negative\"", "label": 1}
{"text": "def Fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    # First Fibonacci number is 0 \n    elif n==1: \n        return 0\n    # Second Fibonacci number is 1 \n    elif n==2: \n        return 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2)", "label": 1}
{"text": "SELECT TOP 5 *\nFROM customers\nORDER BY purchase_amount DESC", "label": 1}
{"text": "function toArray(numb){\n    let arr = [];\n\n    while (numb > 0) {\n        let remainder = numb % 10;\n        numb = Math.floor(numb / 10);\n        arr.unshift(remainder);\n    }\n\n    return arr;\n}", "label": 1}
{"text": "if condition1 and condition2:\n    # do something", "label": 1}
{"text": "def quicksort(arr):\n    if len(arr) == 0 or len(arr) == 1:\n        return arr\n    else:\n        pivot = arr[0]\n        arr.remove(arr[0])\n        left_arr = []\n        right_arr = []\n        for element in arr:\n            if element <= pivot:\n                left_arr.append(element)\n            else:\n                right_arr.append(element)\n        left_arr = quicksort(left_arr)\n        right_arr = quicksort(right_arr)\n        sorted_arr = left_arr + [pivot] + right_arr\n        return sorted_arr\n\nif __name__ == \"__main__\":\n    array = [2, 4, 5, 1, 9, 0]\n    sorted_arr = quicksort(array)\n    print(sorted_arr)\n\n# Output: [0, 1, 2, 4, 5, 9]", "label": 1}
{"text": "def countOddNumbers(numbers):\n  odd_numbers = 0\n  for i in numbers:\n    if i % 2 == 1: \n      odd_numbers += 1\n  return odd_numbers\n  \nprint(countOddNumbers([1, 4, 2, 6, 3, 9]))\n# Output: 3", "label": 1}
{"text": "if (x >= 5) {\n  // Do something\n}", "label": 1}
{"text": "public class DiamondPattern {\n  public static void main(String[] args) {\n    int n = 5;\n    for (int i = 1; i <= n; i++) {\n      for (int j = 1; j <= n - i; j++) {\n        System.out.print(\" \");\n      }\n      for (int j = 1; j <= i; j++) {\n        System.out.print(\"* \");\n      }\n      System.out.println();\n    }\n    for (int i = 1; i < n; i++) {\n      for (int j = 1; j <= i; j++) {\n        System.out.print(\" \");\n      }\n      for (int j = 1; j <= n - i; j++) {\n        System.out.print(\"* \");\n      }\n      System.out.println();\n    }\n  }\n}", "label": 1}
{"text": "SELECT SUM(Credit) AS SumOfCredits FROM Transactions;", "label": 1}
{"text": "# Generate a new list whose elements are twice of the given list elements \n\nlist1 = [1, 2, 3, 4, 5] \n   \nlist2 = [] \n   \n# using loop to iterate the elements \nfor i in list1: \n    list2.append(i * 2) \n      \n# printing the new list \nprint(list2)", "label": 1}
{"text": "def unique_chars(string):\n    # List to keep track of characters \n    characters = []\n    \n    for c in string:\n        if c not in characters:\n            characters.append(c)\n        else:  \n            return False\n    \n    return True", "label": 1}
{"text": "def circumference(r):\n    '''Calculates the circumference of a circle given its radius'''\n    return 2* PI * r\n\ndef area(r):\n    '''Calculates the area of a circle given its radius'''\n    return PI * r * r", "label": 1}
{"text": "#include <iostream>\n \nvoid printArray(int arr[], int n) {\n    for (int i = 0; i < n; i++)\n       std::cout << arr[i] << ' ';\n \n    std::cout << '\\n';\n}", "label": 1}
{"text": "const SearchBar = () => {\n  return (\n    <div>\n      <input type=\"text\"/>\n      <button>Search</button>\n    </div>\n  );\n};", "label": 1}
{"text": "The critical section of a process is a section of code that must be executed without interruption by other processes. In a multi-threaded system, the critical section is used to guarantee that only one thread can access resources or data structures at any given time. It also ensures that operations that must be mutually exclusive are executed in order to prevent race conditions.", "label": 1}
{"text": "To optimize this code segment, you can use the NumPy library to take advantage of vectorized operations and reduce the number of iterations. Additionally, you can use MultiProcessing to run the code in parallel, taking advantage of multiple cores on the machine:\n\nimport numpy as np\n\nx = np.zeros((100, 100))\n\nfor i in range(100):\n    x[i] = x[i] + 1", "label": 1}
{"text": "def find_index(lst, element):\n    for i,num in enumerate(lst):\n        if num == element:\n            return i\n    return -1", "label": 1}
{"text": "public class longestWord{\n  public static void main(String[] args) {\n \n    String inputStr = \"Hello my name is John\";\n    String[] words = inputStr.split(\" \");\n \n    String longestWord = \"\";\n    int maxLength = 0;\n \n    for (String w : words){\n      if (w.length() > maxLength) {\n        maxLength = w.length();\n        longestWord = w;\n      }\n  }\n      System.out.println(\"Longest Word: \"+ longestWord);\n  }\n}", "label": 1}
{"text": "int sum = 0;\nfor (int i=1; i <= 20; i++){\n   sum = sum + i;\n}\nSystem.out.printf(\"The sum of the first 20 numbers is %d\", sum);", "label": 1}
{"text": "Input: two integer variables, x and y\nOutput: the sum of x and y, an integer", "label": 1}
{"text": "const areaOfRightTriangle = (side_a, side_b) => 0.5 * side_a * side_b;", "label": 1}
{"text": "def refresh_until_visible(element_id):\n    timeout = 0\n    while timeout < 10:\n        if document.getElementById(element_id).style.visibility == 'visible':\n            return\n        Location.reload()\n        timeout += 1", "label": 1}
{"text": "def remove_duplicates(str):\n    result = \"\"\n    for i in str:\n        if i not in result:\n            result += i\n    return result\n\nremove_duplicates(\"googleeee\")\n\n# Output:\n\"gole\"", "label": 1}
{"text": "The data type for this expression \"Hello World!\" is a string.", "label": 1}
{"text": "def find_non_repeating(array):\n  for i in array:\n    if array.count(i) == 1:\n      return i\n  \nfind_non_repeating(array); // Output: 1", "label": 1}
{"text": "def max_num(a, b):\n    if a > b:\n        return a\n    else:\n        return b", "label": 1}
{"text": "var x = 5;\nvar y = 10;\nvar obj = {x, y};", "label": 1}
{"text": "// Function to validate a given string \nfunction validate(str) { \n    \n    // Regex pattern to check if the string has any special characters \n    let strRegex = /^[A-Za-z]+$/; \n  \n    // Check if the string is valid \n    if(strRegex.test(str)) { \n        return true; \n    } \n    else { \n        return false; \n    } \n} \n  \n// String to be validated \nlet str = \"Hello world\"; \n  \n// Function call \nlet result = validate(str); \n  \n// Print the result \nconsole.log(result);", "label": 1}
{"text": "An example of a multi-dimensional array is a two-dimensional array, which is an array of arrays. For example:\n\nvar array = [[1,2,3], [4,5,6], [7,8,9]];", "label": 1}
{"text": "multiply_by_two = lambda x: x * 2", "label": 1}
{"text": "import json\n\ndata = '{\"name\": \"John\", \"age\": 20, \"location\": \"Texas\"}'\ndata = json.loads(data)\nname = data[\"name\"]\nage = data[\"age\"]\nlocation = data[\"location\"]\n\nprint(f\"Name: {name}\")\nprint(f\"Age: {age}\")\nprint(f\"Location: {location}\")", "label": 1}
{"text": "import numpy as np\n\ndata = [10, 15, 20, 25, 30]\nstandard_deviation = np.std(data)\nprint(f\"Standard deviation of the given array is {standard_deviation}.\")", "label": 1}
{"text": "def common_list(list_1, list_2):\n    output = []\n    for i in list_1:\n        if i in list_2:\n            output.append(i)\n    return output\n\n# Result:\ncommon_list(list_1, list_2)  # [2, 4]", "label": 1}
{"text": "import requests\ndef get_average_temperature(city):\n    api_url = 'http://api.openweathermap.org/data/2.5/weather?q='+city+'&APPID=your_api_key'\n    response = requests.get(api_url)\n    data = response.json()\n    temp = data['main']['temp']\n    return temp - 273.15", "label": 1}
{"text": "for(int i = 0; i < numbers.length; i++){\n    int element = numbers[i];\n    // execute code here\n}", "label": 1}
{"text": "def int_to_binary(num):\n    '''This function will convert an integer to its binary representation.'''\n    binary = ''\n    while num > 0:\n        binary += str(num % 2)\n        num //= 2\n    return binary[::-1]\n\nif __name__ == '__main__':\n    num = 15\n    print(int_to_binary(num))", "label": 1}
{"text": "def get_longest_increasing_subsequence(input):\n    '''This algorithm will find the longest increasing subsequence in an array.'''\n    n = len(input)\n    leng = [1]*n\n    for i in range(n):\n        for j in range(i):\n            if(input[i] > input[j] and leng[i] < leng[j] + 1):\n                leng[i] = leng[j]+1\n    max_seq_len = max(leng)\n    max_seq = []\n    for i in range(n):\n        if(leng[i] == max_seq_len):\n            max_seq.append(input[i])\n            max_seq_len -= 1\n    max_seq.reverse()\n    return max_seq\n\nif __name__ == '__main__':\n    input = [9, 8, 4, 12, 2, 10, 6, 14, 1, 16, 3, 11, 5, 15, 7]\n    print(get_longest_increasing_subsequence(input))", "label": 1}
{"text": "document.write(\"Hello World!\");", "label": 1}
{"text": "A stack overflow error occurs when too many functions are called or variables are used during the execution of a program, resulting in a stack overflow. This error is caused because the stack memory area is too full, and thus it can't store any more data. It can be avoided by using a larger stack, optimizing code to use less function calls, and using fewer local variables. Additionally, using recursive functions and a language with automatic memory management can help prevent stack overflow errors.", "label": 1}
{"text": "p {\n text-align: center;\n}", "label": 1}
{"text": "public class ReverseList {\n    public static void reverseList(List<String> list) \n    {\n        if (list.size() > 1) {\n            String temp = list.get(0);\n            list.remove(0);\n            reverseList(list);\n            list.add(temp);\n        }\n    }\n\n    public static void main(String[] args) \n    { \n        List<String> list = new ArrayList<String>(Arrays.asList(\"John\", \"Alice\", \"Bob\"));\n        reverseList(list);\n        System.out.println(list); \n    } \n}", "label": 1}
{"text": "<table>\n  <tr>\n    <th>Name</th>\n    <th>Age</th>\n    <th>City</th>\n  </tr>\n  <tr>\n    <td>John</td>\n    <td>30</td>\n    <td>New York</td>\n  </tr>\n</table>", "label": 1}
{"text": "vals = []\nfor num in arr:\n    for i in range(int(num ** 0.5) + 1):\n        for j in range(int(num ** 0.5) + 1):\n            if i*i + j*j == num:\n                vals.append(num)\n                break;\nprint(vals)\n# Output: [4, 8]", "label": 1}
{"text": "var student = { \n id: 0,\n name: \"John Doe\",\n nationality: \"American\"\n}", "label": 1}
{"text": "# prime number sieve\ndef prime_numbers(n): \n \n    prime = [True for i in range(n+1)] \n    p = 2\n    while (p * p <= n): \n        if (prime[p] == True): \n            for i in range(p * p, n+1, p): \n                prime[i] = False\n        p += 1\n  \n    prime_numbers = []\n    for p in range(2, n): \n        if prime[p]: \n            prime_numbers.append(p)\n    return prime_numbers[:10]\n  \nif __name__ == \"__main__\":\n    n = 100\n    print(prime_numbers(n))", "label": 1}
{"text": "i = 0\nwhile i < 5:\n\tprint(i)\n\tif i == 5:\n\t\tbreak\n\ti += 1", "label": 1}
{"text": "def four_consecutive_chars(input_string): \n    count = 1\n    prev_char = \"\" \n    result = \"\" \n    for char in input_string: \n        if prev_char == char:\n            count += 1 \n            if count == 4:\n                result += char + \" : \" + str(count) \n        else: \n            result += char + \" : \" + str(count) \n            count = 1\n        prev_char = char \n    print(input_string)\n    print(result)", "label": 1}
{"text": "def swap_elements(arr): \n    temp = arr[0] \n    arr[0] = arr[1] \n    arr[1] = temp\n    return arr", "label": 1}
{"text": "CREATE PROCEDURE subtract_numbers ( IN num_1 INT, IN num_2 INT ) \nBEGIN \nSET num_1 = num_1 - num_2;\nEND;", "label": 1}
{"text": "def calculate_length(string):\n    count = 0\n    for letter in string:\n        count += 1\n    return count", "label": 1}
{"text": "class LinkedList:\n    def __init__(self):\n        self.head = None\n    def insert(self, data):\n        new_node = Node(data)\n        new_node.next = self.head\n        self.head = new_node\n\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\n# Given data\ndata = [5, 6, 2, 9, 0]\n\n# Create linked list\nlinked_list = LinkedList()\n\nfor i in data:\n    linked_list.insert(i)", "label": 1}
{"text": "def insert_at_pos(head, node_data, pos):\n    new_node = Node(node_data)\n    if pos == 0:\n        new_node.next = head\n        return new_node\n    temp = head \n    for i in xrange(pos-1):\n        temp = temp.next\n    new_node.next = temp.next\n    temp.next = new_node\n    return head", "label": 1}
{"text": "<html>\n    <header>\n        <title>My Page</title>\n    </header>\n    <body>\n        <a href=\"https://www.example.com\">Link to Example</a>\n    </body>\n</html>", "label": 1}
{"text": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.ensemble import GradientBoostingClassifier\n\n# Load the data\ndata = pd.read_csv('data.csv')\n\n# Split dataset into training and testing sets\nX, y = data.iloc[:, 0: -1], data.iloc[:, -1]\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, \n                                                    random_state=42)\n\n# Preprocess by scaling the data\nscaler = StandardScaler()\nX_train_scaled = scaler.fit_transform(X_train)\nX_test_scaled = scaler.transform(X_test)\n\n# Create the model \nclf = GradientBoostingClassifier(n_estimators=100, max_depth=4, \n                                 learning_rate=0.1)\n\n# Train the model\nclf.fit(X_train_scaled, y_train)\n\n# Test the model\ny_pred = clf.predict(X_test_scaled)", "label": 1}
{"text": "Print(\"Life feels like a constant struggle\")\nPrint(\"When every day's a battle sure to ruffle\")\nPrint(\"But keep your head up, don't you worry\")\nPrint(\"Your courage will soon turn things to merry\")", "label": 1}
{"text": "nums = [1, 2, 3, 4, 5]\nnums.reverse()\nfor num in nums:\n    print(num)", "label": 1}
{"text": "for index, letter in enumerate(text):\n    if letter in 'aeiou':\n        print(f'The letter {letter} is in position {index}.')", "label": 1}
{"text": "/^(Hello|Hi)/.test(string)", "label": 1}
{"text": "import React, { Component } from 'react';\n\nclass UserInfo extends Component {\n\n  render() {\n    return (\n      <div>\n        <p>Name: {this.props.name}</p>\n        <p>Age: {this.props.age}</p>\n        <p>City: {this.props.city}</p>\n      </div>\n    )\n  }\n}\n\nexport default UserInfo;", "label": 1}
{"text": "def sumSquares(numbers):\n  sum = 0\n  for num in numbers:\n    sum += (num ** 2)\n  return sum", "label": 1}
{"text": "^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$", "label": 1}
{"text": "SELECT * FROM order_records\n  WHERE orders BETWEEN 1000 AND 3000;", "label": 1}
{"text": "#include <iostream> \nusing namespace std; \nint main() \n{ \n\tint arr[] = {10, 7, 8, 9, 1, 5}; \n\tint n = sizeof(arr)/sizeof(arr[0]); \n  \n\t// Bubble sort algorithm \n\tfor (int i = 0; i < n-1; i++)\t\t \n\t\tfor (int j = 0; j < n-i-1; j++)  \n\t\t\tif (arr[j] > arr[j+1]) \n\t\t\t\tswap(arr[j], arr[j+1]); \n  \n\t// Prints the sorted array \n\tfor (int i = 0; i < n; i++) \n\t\tcout << arr[i] << \" \"; \n\t\t\n  return 0;\n}", "label": 1}
{"text": "/[1-9]\\d*\\.?\\d*|0\\.\\d*[1-9]\\d*/", "label": 1}
{"text": "<table>\n  <tr>\n    <th>column 1</th>\n    <th>column 2</th>\n    <th>column 3</th>\n  </tr>\n</table>", "label": 1}
{"text": "const adder = {\n  add: (a, b) => a + b\n};", "label": 1}
{"text": "for item in list:\n    print(item)", "label": 1}
{"text": "def replace_whitespace(string)\n    return string.gsub(/\\s+/, '_')\nend", "label": 1}
{"text": "const setBackgroundBlue = () => {\n    document.getElementById(\"my-element\").style.backgroundColor = \"blue\";\n}", "label": 1}
{"text": "def vowel_count(str): \n    # making a set of vowels \n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'} \n  \n    # counter variable to store the count of vowels \n    count = 0\n  \n    #a loop to check every character in a given string\n    for alphabet in str: \n  \n        # if statement to check if the character is in set of vowels \n        if alphabet in vowels: \n            count = count + 1\n  \n    #returning the count \n    return count \n  \n# Driver code \nstr = \"Queensland\"\nprint(\"No. of vowels :\", vowel_count(str))", "label": 1}
{"text": "def count_occurrences(str, substr):\n    count = 0\n    start_index = -1 \n    while True:\n        start_index = str.find(substr, start_index + 1)\n        if start_index == -1:\n            break \n        count = count + 1\n    return count \nprint(\"Number of occurrences:\",count_occurrences(\"Please find the number of occurrences of this string\", \"string\"))", "label": 1}
{"text": "To delete a row from a MySQL table, you can use the DELETE statement. The syntax for the statement is as follows:\n\nDELETE FROM tablename\nWHERE condition;\n\nFor example, if you want to delete all the rows with a score of less than 50 in a table called 'students', you can use the following statement:\n\nDELETE FROM students\nWHERE score < 50;", "label": 1}
{"text": "public static List<Integer> findPrimes(int n) {\n    List<Integer> primes = new ArrayList<>();\n    for (int i = 2; i <= n; i++) {\n        boolean isPrime = true;\n        for (int j = 2; j < i; j++) {\n            if (i % j == 0) {\n                isPrime = false;\n                break;\n            }\n        }\n        if (isPrime) {\n            primes.add(i);\n        }\n    }\n    return primes;\n}", "label": 1}
{"text": "def greater_than(arr, num):\n    result = []\n    for el in arr:\n        if el > num:\n            result.append(el)\n    return result\n\nprint(greater_than(arr, num))", "label": 1}
{"text": "No errors found.", "label": 1}
{"text": "h1 {\n  color: #FF0000;\n  text-align: center;\n}", "label": 1}
{"text": "Negative", "label": 1}
{"text": "Fjk3@sam", "label": 1}
{"text": "permutations = [''.join(p) for p in permutations(list(\"ABC\"))]", "label": 1}
{"text": "def isString(data):\n    strings = []\n    for element in data:\n        if isinstance(element, str):\n            strings.append(element)\n    return strings\n\nprint(isString(data))", "label": 1}
{"text": "def maximum(a, b):\n    if a > b:\n        return a\n    else:\n        return b", "label": 1}
{"text": "<html>\n  <head>\n    <title>Test</title>\n  </head>\n  <body>\n    <h1>My Heading</h1>\n    <p>This is a test.\n  </body>\n</html>", "label": 1}
{"text": "def find_unique_element(arr):\n index = -1\n for i in range(len(arr)):\n  freq = 0\n  for j in range(len(arr)):\n   if arr[i] == arr[j]:\n    freq += 1\n if freq == 1:\n  index = i\n  break\n return index\n\n# Testing\narr = [1, 1, 5, 5, 6, 8]\nindex = find_unique_element(arr)\nprint(\"Index of the unique element is: \", index)", "label": 1}
{"text": "def add_numbers(a,b):\n  return a + b\n\n# Testing\nx = 3\ny = 4\nsum = add_numbers(x, y)\nprint(\"Sum of {0} and {1} is {2}\".format(x, y, sum))", "label": 1}
{"text": "def get_keys_by_value(my_dict, value):\n  keys = []\n  for k, v in my_dict.items():\n    if v == value:\n      keys.append(k)\n\n  return keys\n\n# Testing\nmy_dict = {'a': 1, 'b': 2, 'c': 2}\nkeys = get_keys_by_value(my_dict, 2)\nprint(\"Keys with the value 2 are: \", keys)", "label": 1}
{"text": "def sort_by_key(arr, key):\n  sorted_arr = sorted(arr, key=lambda k: k[key])\n  return sorted_arr\n\n# Testing\narr = [{'name': 'john', 'age': 20}, {'name': 'tim', 'age': 25}, {'name': 'mike', 'age': 30}]\nsorted_arr = sort_by_key(arr, 'age')\nprint(\"Sorted array by age: \", sorted_arr)", "label": 1}
{"text": "favorite_color = \"blue\"", "label": 1}
{"text": "function convertTimeFormat(time) {\n    let hour = time.slice(0, 2);\n    let am_or_pm = hour >= 12 ? 'pm' : 'am';\n    let twelve_hour_format = (hour % 12 ? hour % 12 : 12) + time.slice(2, 5) + am_or_pm;\n    \n    return twelve_hour_format;\n}", "label": 1}
{"text": "input[type=\"text\"] {\n  border: 2px solid red;\n}", "label": 1}
{"text": "<form action=\"\" method=\"post\">\n  Name: <input type=\"text\" name=\"name\" required><br>\n  Email: <input type=\"text\" name=\"email\" required><br>\n  <input type=\"submit\" name=\"submit\" value=\"Submit\">\n</form>", "label": 1}
{"text": "function reverseString(str) {\n  let reversedStr = '';\n  for (let i = str.length -1; i >= 0; i--) {\n    reversedStr += str[i];\n  }\n  return reversedStr;\n}", "label": 1}
{"text": "#include <stdio.h>\n\nint main()\n{\n    int x = 5;\n    int y = 7;\n    \n    int z = x + y;\n    printf(\"%d\", z);\n    \n    return 0;\n}", "label": 1}
{"text": "for (let i = 0; i < numbers.length; i++) {\n    console.log(numbers[i]);\n}", "label": 1}
{"text": "document.cookie = \"username=JohnDoe\";", "label": 1}
{"text": "if (phone.match(/^\\d{3}-\\d{3}-\\d{4}$/)) {\n    console.log(\"Valid phone number\");\n} else {\n    console.log(\"Invalid phone number\");\n}", "label": 1}
{"text": "'#%06x' % (rand * 0xffffff).round(0).to_i", "label": 1}
{"text": "for string in list:\n    print(string)", "label": 1}
{"text": "def remove_duplicate_integers(nums):\n    new_list = []\n    for num in nums:\n        if num not in new_list:\n            new_list.append(num)\n    return new_list\n\nprint(remove_duplicate_integers([3, 6, 8, 10, 10, 11, 15, 15, 15]))", "label": 1}
{"text": "git checkout -b my-feature", "label": 1}
{"text": "arr = [x for x in range(0, n)]\nprint(arr)", "label": 1}
{"text": "#include<stdio.h>\n\nint isPrime(int n) \n{ \n    for (int i = 2; i <= n/2; i++) \n    { \n        if (n % i == 0) \n            return 0; \n    } \n    return 1; \n} \n\nvoid findPrime(int arr[], int n) \n{ \n    int result[n];\n    int k = 0;\n    for (int i = 0; i < n; i++) \n    { \n        if (isPrime(arr[i]) == 1) \n        { \n            result[k] = arr[i];\n            k++;\n        } \n    } \n  \n    for (int i = 0; i < k; i++) \n        printf(\"%d \", result[i]); \n} \n  \nint main() \n{ \n    int arr[] = {2, 3, 5, 6, 9, 10, 15}; \n    int n = sizeof(arr)/sizeof(arr[0]); \n  \n    findPrime(arr, n); \n  \n    return 0; \n}", "label": 1}
{"text": "true", "label": 1}
{"text": "fn lowestCommonAncestor(root: &TreeNode, p: &TreeNode, q: &TreeNode) -> i32 {\n if root == nil {\n  return -1;\n }\n\n if root == p || root == q {\n  return root.val;\n }\n\n let left = lowestCommonAncestor(root.left, p, q);\n let right = lowestCommonAncestor(root.right, p, q);\n\n if left != -1 && right != -1 {\n  return root.val;\n }\n\n return left != -1 ? left : right;\n}", "label": 1}
{"text": "SELECT * FROM employees ORDER BY salary ASC LIMIT 1;", "label": 1}
{"text": "#include <iostream>\n \nint main()\n{\n    int n1 = 0, n2 = 1, n3, i, count = 10;\n    std::cout << n1 << \" \" << n2 << \" \"; \n \n    for (i = 2; i < count; ++i) \n    {\n        n3 = n1 + n2;\n        std::cout << n3 << \" \";\n        n1 = n2;\n        n2 = n3;\n    }\n    return 0;\n}", "label": 1}
{"text": "use JSON;\n\n# Parse a JSON object\nmy $json_text = \"{\\\"name\\\":\\\"John\\\",\\\"age\\\":30,\\\"city\\\":\\\"New York\\\"}\";\nmy $json_obj = decode_json($json_text);\n\n# Access data\nprint \"name  : \" . $json_obj->{\"name\"} . \"\\n\";\nprint \"age   : \" . $json_obj->{\"age\"} . \"\\n\";\nprint \"city  : \" . $json_obj->{\"city\"} . \"\\n\";", "label": 1}
{"text": "using System;\n\nnamespace ConsoleApp1\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // Sum of 5, 9, 1, 2, 3\n            int result = 5 + 9 + 1 + 2 + 3;\n            Console.WriteLine(result.ToString()); // 20\n        }\n    }\n}", "label": 1}
{"text": "public class MainActivity extends AppCompatActivity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        // Get a reference to the TextView\n        TextView textView = (TextView) findViewById(R.id.textView);\n\n        // Set the text view to present the current date and time\n        SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n        String currentDateTimeString = sdf.format(new Date());\n        textView.setText(currentDateTimeString);\n    }\n}", "label": 1}
{"text": "public class MainActivity extends AppCompatActivity implements SensorEventListener {\n\n    private SensorManager sensorManager;\n    private Sensor magneticFieldSensor;\n    \n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        \n        sensorManager = (SensorManager) getSystemService(Context.SENSOR_SERVICE);\n        magneticFieldSensor = sensorManager.getDefaultSensor(Sensor.TYPE_MAGNETIC_FIELD);\n    }\n    \n    @Override\n    protected void onResume() {\n        super.onResume();\n        sensorManager.registerListener(this, magneticFieldSensor, \n            SensorManager.SENSOR_DELAY_NORMAL);\n    }\n    \n    @Override\n    protected void onPause() {\n        super.onPause();\n        sensorManager.unregisterListener(this);\n    }\n    \n    @Override\n    public void onSensorChanged(SensorEvent event) {\n        if (event.sensor.getType() == Sensor.TYPE_MAGNETIC_FIELD) {\n            float xField = event.values[0];\n            float yField = event.values[1];\n            float zField = event.values[2];\n            \n            // handle the magnetic field values here\n        }\n    } \n    \n    @Override\n    public void onAccuracyChanged(Sensor sensor, int accuracy) {\n        // handle the accuracy changes here\n    }\n}", "label": 1}
{"text": "The Big-O notation is a mathematical way of describing the performance of a given algorithm. It measures the complexity of an algorithm by taking into account the number of operations it performs, such as the time and space it takes to complete a given task. Big-O notation is used to compare different algorithms and to assess the impact of various choices on a given program's performance.", "label": 1}
{"text": "new_words = [\"Python\", \"is\", \"fun\"]", "label": 1}
{"text": "score = 0", "label": 1}
{"text": "a_variable = str(8)", "label": 1}
{"text": "combined_list = list_1 + list_2", "label": 1}
{"text": "The three built-in Python data types are integers, floats, and strings.", "label": 1}
{"text": "def compare(string1, string2):\n    if string1 == string2:\n        return True\n    else:\n        return False", "label": 1}
{"text": "def average(arr):\n    sum = 0\n    for i in arr:\n        sum+=i\n    return sum/len(arr)", "label": 1}
{"text": "for name in list:\n    print(name)", "label": 1}
{"text": "def convert_time(seconds):\n    minutes = seconds / 60\n    return minutes", "label": 1}
{"text": "while x > 10:\n    # do something\n    x = x - 1", "label": 1}
{"text": "2 + 3 = 5", "label": 1}
{"text": "ALTER TABLE Customers DROP COLUMN first_name;", "label": 1}
{"text": "int main() {\n  int x;\n  cin >> x;\n  if (x == 0)\n    cout << \"x is zero\" << endl;\n  else\n    cout << \"x is not zero\" << endl;\n}", "label": 1}
{"text": "SELECT users.name, users.age, orders.order_date\nFROM users\nINNER JOIN orders ON users.user_id = orders.user_id", "label": 1}
{"text": "import numpy as np \n\narr = np.array([2,4,6,8,10])", "label": 1}
{"text": "def increment_by_one(n):\n    return n + 1", "label": 1}
{"text": "<html>\n<head>\n  <title>Table Sample</title>\n</head>\n<body>\n  <table>\n    <tr>\n      <th>Name</th>\n      <th>Age</th>\n      <th>City</th>\n    </tr>\n    <tr>\n      <td>John Doe</td>\n      <td>23</td>\n      <td>New York</td>\n    </tr>\n    <tr>\n      <td>Trish Smith</td>\n      <td>29</td>\n      <td>Philadelphia</td>\n    </tr>\n  </table>\n</body>\n</html>", "label": 1}
{"text": "public class MeanCalculator {\n    public static void main(String args[]){\n        int x = 3; int y = 4; int z = 5;\n\n        double mean = (x + y + z) / 3.0;\n        System.out.println(\"The mean of the three numbers is: \" + mean);\n    }\n}", "label": 1}
{"text": "list = [1, 6, 2, 8, 4, 9]\nmax_index = list.index(max(list))\nprint(max_index) # Output: 4", "label": 1}
{"text": "import React, {Component} from 'react';\n\nclass Form extends Component{\n    constructor(){\n        super();\n        this.state={\n            firstName: '',\n            lastName: ''\n        };\n    }\n\n    handleChange = (e) => {\n        this.setState({\n            [e.target.name]: e.target.value\n        });\n    }\n\n    render(){\n        return(\n            <form>\n                <label>First Name</label>\n                <input type=\"text\" name=\"firstName\" onChange={this.handleChange} value={this.state.firstName} />\n                <label>Last Name</label>\n                <input type=\"text\" name=\"lastName\" onChange={this.handleChange} value={this.state.lastName} />\n            </form>\n        );\n    }\n}\n\nexport default Form;", "label": 1}
{"text": "def bubbleSort(arr): \n    n = len(arr) \n  \n    # Traverse through all array elements \n    for i in range(n): \n  \n        # Last i elements are already in place \n        for j in range(0, n-i-1): \n  \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n  \n# Driver code to test above\narr = [34, 16, 12, 9, 5]\n  \nbubbleSort(arr) \n  \nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i]),", "label": 1}
{"text": "def max_element(arr): \n    max_value = arr[0][0] \n    for i in range(len(arr)): \n        for j in range(len(arr[i])): \n            if arr[i][j] > max_value: \n                max_value = arr[i][j] \n    return max_value \n  \n# Driver code \narr = [[2, 4, 7, 1], [8, 12, 9, 5]] \nmax_val = max_element(arr) \nprint(\"The maximum element in 2-dimensional array is\",max_val)", "label": 1}
{"text": "def reverse_string_in_place(word): \n    # Get the input string length \n    n = len(word) \n\n    # Swap character starting  \n    # from two corners \n    for i in range(n // 2): \n        word[i], word[n - i - 1] = word[n - i - 1], word[i] \n\nword = list('hello') \nreverse_string_in_place(word) \nprint(''.join(word))", "label": 1}
{"text": "if not inp_list:\n  print(\"The list is empty.\")\nelse:\n  print(\"The list is not empty.\")", "label": 1}
{"text": "rev_str = string[::-1]\nif rev_str == string:\n  print(\"The string is a palindrome.\")", "label": 1}
{"text": "# Find the maximum value in x\nmax_val = -1\nFOR each i in x\n    IF i > max_val\n        max_val = i\nEND FOR\nRETURN max_val", "label": 1}
{"text": "#include <iostream> \n  \nusing namespace std;\n \nint fibonacci_sequence(int num_terms)  \n{  \n    int first = 0, second = 1, next = 0;  \n  \n    if (num_terms == 0)  \n    {  \n        return 0;  \n    }  \n    else if (num_terms == 1)  \n    {  \n        return 1;  \n    }  \n    else\n    {  \n        for (int i = 2; i <= num_terms; i++)  \n        {  \n            next = first + second;  \n            first = second;  \n            second = next;  \n        }  \n    }  \n    return next;  \n}  \n  \nint main()  \n{  \n    int num_terms;\n    cout << \"Enter the number of terms: \";\n    cin >> num_terms;\n    cout << \"The requested Fibonacci sequence upto term \" << num_terms << \" is: \";\n    for (int i = 1; i <= num_terms; i++)  \n        cout << fibonacci_sequence(i) << \" \";  \n    return 0;  \n}", "label": 1}
{"text": "p {\n  /* styles here */\n}", "label": 1}
{"text": "CREATE TABLE Order (\n    order_id INT NOT NULL,\n    customer_name VARCHAR(255) NOT NULL,\n    order_date DATE NOT NULL, \n    order_amount DECIMAL(15, 2) NOT NULL\n);", "label": 1}
{"text": "def findFactorial(n): \n fact = 1\n while(n> 0): \n fact = fact * n \n n = n - 1\n return fact \n \nprint(find_factorial(5))", "label": 1}
{"text": "def solve(bo):\n    find = find_empty(bo)\n    if not find:\n        return True\n    else:\n        row, col = find\n\n    for i in range(1,10):\n        if valid(bo, i, (row, col)):\n            bo[row][col] = i\n\n            if solve(bo):\n                return True\n\n            bo[row][col] = 0\n\n    return False\n\n\ndef valid(bo, num, pos):\n    # Check row\n    for i in range(len(bo[0])):\n        if bo[pos[0]][i] == num and pos[1] != i:\n            return False\n\n    # Check column\n    for i in range(len(bo)):\n        if bo[i][pos[1]] == num and pos[0] != i:\n            return False\n\n    # Check box\n    box_x = pos[1] // 3\n    box_y = pos[0] // 3\n\n    for i in range(box_y*3, box_y*3 + 3):\n        for j in range(box_x * 3, box_x*3 + 3):\n            if bo[i][j] == num and (i,j) != pos:\n                return False\n\n    return True\n\n\ndef find_empty(bo):\n    for i in range(len(bo)):\n        for j in range(len(bo[0])):\n            if bo[i][j] == 0:\n                return (i, j)  # row, col\n\nprint(solve([\n    [7, 8, 0, 4, 0, 0, 1, 2, 0],\n    [6, 0, 0, 0, 7, 5, 0, 0, 9],\n    [0, 0, 0, 6, 0, 1, 0, 7, 8],\n    [0, 0, 7, 0, 4, 0, 2, 6, 0],\n    [0, 0, 1, 0, 5, 0, 9, 3, 0],\n    [9, 0, 4, 0, 6, 0, 0, 0, 5],\n    [0, 7, 0, 3, 0, 0, 0, 1, 2],\n    [1, 2, 0, 0, 0, 7, 4, 0, 0],\n    [0, 4, 9, 2, 0, 6, 0, 0, 7]\n]))", "label": 1}
{"text": "def swap(a, b):\n    a, b = b, a\n    return a, b\n\na, b = swap(5, 8)\nprint(\"a =\", a, \"and b =\", b)", "label": 1}
{"text": "for num in my_list:\n    print(num)", "label": 1}
{"text": "def sum_list(mylist):\n    s = 0\n    for x in mylist:\n        s += x \n    return s", "label": 1}
{"text": "for num in range(1, 10):\n    if num % 2 == 1:\n        print( num )", "label": 1}
{"text": "The output should be 5 as the result of calling add(2,3) is z = 5.", "label": 1}
{"text": "def reverse(s):  \n    return s[::-1] \n\nx = \"Hello, World!\"\n  \nprint(reverse(x))", "label": 1}
{"text": "<html>\n    <head>\n        <title>Price Table</title>\n    </head>\n    <body>\n        <table>\n            <tr>\n                <th>Description</th>\n                <th>Price</th>\n            </tr>\n            <tr>\n                <td>Item 1</td>\n                <td>$2.99</td>\n            </tr>\n            <tr>\n                <td>Item 2</td>\n                <td>$5.99</td>\n            </tr>\n            <tr>\n                <td>Item 3</td>\n                <td>$9.99</td>\n            </tr>\n        </table>\n    </body>\n</html>", "label": 1}
{"text": "The Angular app will include a login and a registration page. The login page will have an input field for the user to enter their username and password. The registration page will have input fields for the user to enter their username, password, and email address. The app will also contain a service to store the user registration data and a guard to protect the registration page from unauthorized access.", "label": 1}
{"text": "def employee_bonus(hours, hourly_rate):\n    if hours <= 0:\n        return 0\n\n    # Calculate the total amount\n    total_amount = hours * hourly_rate\n    \n    # Calculate the bonus with 10%\n    bonus = total_amount * 0.1\n\n    return bonus", "label": 1}
{"text": "function isPrime(n) {\n  if (n <= 1) {\n    return false;\n  }\n  \n  // Check from 2 to n-1\n  for (let i = 2; i < n; i++) {\n    if (n % i == 0) {\n      return false;\n    }\n  }\n \n  return true;\n}", "label": 1}
{"text": "library(zoo)\n\nexponential_moving_average <- function(x, n, beta) {\n  EMA <- 0\n  for (i in 1:length(x)) {\n     if (i == 1) {\n       EMA[i] <- x[i]\n     } else {\n       EMA[i] <- ((beta * x[i]) + ((1 - beta) * EMA[i - 1]))\n     } \n  }\n  \n  ma_x <- as.numeric(rollapply(EMA, n, mean, fill = NA, align = \"right\"))\n  return(ma_x)\n}", "label": 1}
{"text": "double average(double x, double y, double z) {\n  return (x + y + z) / 3;\n}", "label": 1}
{"text": "/* Create 7 empty buckets */ \nint hashTable[7] = { 0 };", "label": 1}
{"text": "CREATE TABLE teachers (\n  id INTEGER PRIMARY KEY, \n  name VARCHAR(50) NOT NULL, \n  subject VARCHAR(50) NOT NULL, \n  age INTEGER NOT NULL, \n  years_of_experience INTEGER, \n  highest_degree VARCHAR(100)\n);", "label": 1}
{"text": "function removeDuplicates(arr) {\n  let output = [];\n  arr.forEach(function(element, index) {\n    if (arr[index] != arr[index + 1]) {\n      output.push(element);\n    }\n  }); \n  return output;\n}\n\nconsole.log(removeDuplicates([2, 3, 3, 3, 6, 9, 9])); \n// Output: [2, 3, 6, 9]", "label": 1}
{"text": "import numpy as np \n  \n# Creating the 3D tensor \nX = np.zeros((10000, 32, 32)) \n  \n# Initializing it with the grayscale images \nX[:,:,:] = dataset", "label": 1}
{"text": "max_val = max(my_list)  # Computes the maximum of the list", "label": 1}
{"text": "import matplotlib.pyplot as plt \n  \n# Creating the data \ndata = [2, 3, 5, 7, 9]  \n  \n# Creating the figure and axis \nfig, ax = plt.subplots()  \n  \n# plotting the barplot \nax.bar(range(len(data)), data)  \n  \n# show the plot \nplt.show()", "label": 1}
{"text": "[\"p\", \"r\", \"o\", \"g\", \"r\"]", "label": 1}
{"text": "let names = [\"Bobby\", \"Justin\", \"Tyler\"]", "label": 1}
{"text": "def check_number(list, number):\n    if number in list:\n        return True\n    else:\n        return False", "label": 1}
{"text": "def sum_array(arr):\n    sum = 0\n    for ele in arr:\n        sum += ele\n    return sum", "label": 1}
{"text": "for i in range(10, 0, -1):\n    print(i)", "label": 1}
{"text": "def product(a, b):\n    return a * b", "label": 1}
{"text": "def print_numbered_list(array):\n  \"\"\"Prints out a numbered list based on an array of items.\"\"\"\n  for i, item in enumerate(array, start=1):\n    print(f\"{i}. {item}\")", "label": 1}
{"text": "def is_palindrome(user_input):\n    rev_input = user_input[::-1]\n    \n    if (rev_input == user_input):\n        return True\n    else:\n        return False", "label": 1}
{"text": "def insert(arr, num): \n    # start from the rightmost element\n    i = len(arr) - 1\n    while ( i >= 0 and arr[i] > num):\n        arr[i+1] = arr[i]\n        i -= 1\n  \n    arr[i+1] = num", "label": 1}
{"text": "<html>\n<head>\n    <title>My page</title>\n</head>\n<body>\n    <h1>My Page</h1>\n    <p>This is the content of my page.</p>\n</body>\n</html>", "label": 1}
{"text": "def feet_to_meters(feet):\n    \"\"\"This function converts feet to meters\"\"\"\n    meters = feet * 0.3048\n    return meters", "label": 1}
{"text": "my_list.sort(key=lambda x: x['priority'])\nprint(my_list)", "label": 1}
{"text": "<table>\n  <tr>\n    <th>Country</th>\n    <th>Population</th>\n  </tr>\n  <tr>\n    <td>China</td>\n    <td>1449107485</td>\n  </tr>\n  <tr>\n    <td>India</td>\n    <td>1369153466</td>\n  </tr>\n  <tr>\n    <td>USA</td>\n    <td>330765152</td>\n  </tr>\n</table>", "label": 1}
{"text": "Books.sort();\nconsole.log(Books);", "label": 1}
{"text": "/^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/", "label": 1}
{"text": "SELECT Name \nFROM Students \nWHERE Matric No = 151763;", "label": 1}
{"text": "def remove_vowels(sentence):\n    # Create an empty string.  \n    result = \"\" \n    for letter in sentence:  \n        # Select those characters that are not vowels. \n        if letter not in \"aeiouAEIOU\": \n            result += letter  \n  \n    return result\n\n# Test\nprint(remove_vowels(\"Hello, World!\")) \n\n# Output\nHll, Wrld!", "label": 1}
{"text": "class PatternTest\n{\n    public static void main(String[] args)\n    {\n        int[][] pattern = {\n            {1,2,3},\n            {4,5,6},\n            {7,8,9}\n        };\n\n        for (int i=0; i<pattern.length; i++) \n        {\n            for (int j=0; j<pattern[i].length; j++) \n            {\n                System.out.print(pattern[i][j] + \" \");\n            }\n            System.out.println();\n        }\n    }\n}", "label": 1}
{"text": "for(var i = 1; i <= 10; i++) {\n    console.log(i);\n}", "label": 1}
{"text": "import tensorflow as tf\n\narr = [1, 2, 3, 4, 5]\n\narr_tensor = tf.constant(arr)\nmean_tensor = tf.reduce_mean(arr_tensor)\n\nwith tf.Session() as sess:\n    mean_value = sess.run(mean_tensor)\nprint(mean_value)", "label": 1}
{"text": "def check_restaurant_availability(restaurant_status):\n    day = datetime.date.today().strftime(\"%A\").lower()\n    return restaurant_status[day] == \"open\"", "label": 1}
{"text": "function longestWord(str) { \n    let words = str.split(' '); \n    let longestWord = words.reduce((longest, current) => { \n       if (current.length > longest.length) \n          return current; \n       else\n          return longest; \n    }, ''); \n    return longestWord; \n} \n\nconsole.log(longestWord(\"This is an example string\"));", "label": 1}
{"text": "my_2d_array = [[0 for col in range(3)] for row in range(3)]", "label": 1}
{"text": "def replace_vowels(string):\n    vowels = \"aeiouAEIOU\"\n    new_string = \"\"\n    for char in string:\n        if char in vowels:\n            new_string += \"x\"\n        else:\n            new_string += char\n    return new_string\n\nprint(replace_vowels(myString))\n\n# Output\n# Pxthxn Prxgrxmmxr", "label": 1}
{"text": "last_two_elements = mylist[-2:]\nprint(last_two_elements)\n\n# Output\n# [4, 5]", "label": 1}
{"text": "The method add() is a static method and cannot directly access the instance variables x and y. The error can be fixed by passing in the two parameters x and y to the add() method: \n\npublic static int add(int x, int y) {\n    int sum = x + y;\n    return sum;\n}", "label": 1}
{"text": "A flag is a boolean (true/false) value that is used to track the state of a program or condition. It can be used to execute certain statements depending on the value of the flag. For example, a program can have a flag that keeps track of whether the user has logged in or not. If the flag is set to true, certain features of the program are enabled; if it is set to false, these features are disabled.", "label": 1}
{"text": "def heron_area(a, b, c): \n\t# calculate the semi-perimeter \n\ts = (a + b + c) / 2\n\n\t# calculate the area \n\tarea = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n\treturn area", "label": 1}
{"text": "A stack is a data structure that works on the principle of Last in First Out (LIFO). It is used to store and retrieve elements in a particular order, and all operations of insertion and retrieval are performed at one end of the stack, referred to as the top. There are two main operations in a stack: Push - adds an item to the top, and Pop - removes an item from the top.", "label": 1}
{"text": "function helloFiveTimes() {\n return \"Hello \" + \"Hello \" + \"Hello \" + \"Hello \" + \"Hello \";\n}", "label": 1}
{"text": "let result = (x > 0) ? true : false;", "label": 1}
{"text": "System.out.println(\"Hello, World!\");", "label": 1}
{"text": "The HTC U12+ is a flagship Android phone manufactured by HTC Corporation. It features a 6-inch LCD display, 12MP dual rear camera, 8MP front camera, 6GB of RAM, and 64GB of storage. It also has NFC and a 3,420 mAh battery.", "label": 1}
{"text": "let array = [4, 5, 6, 7, 8];\nlet index = 2;\narray.splice(index, 1);\nconsole.log(array);\n// Output: [4, 5, 7, 8]", "label": 1}
{"text": "/^Hello\\sWorld!$/", "label": 1}
{"text": "let string = 'Apple';\nlet count = 0;\n\nfor (let i = 0; i < string.length; i++) {\n  if (string[i] == 'p') {\n    count++;\n  }\n}\n\nconsole.log(count); //2", "label": 1}
{"text": "public static ArrayList<String> allPermutations(String inputString){\n    ArrayList<String> permutations = new ArrayList<>();\n    if (inputString.length() == 0) {\n        permutations.add(\"\");\n        return permutations;\n    }\n\n    char first = inputString.charAt(0);\n    String remainder = inputString.substring(1);\n    ArrayList<String> words = allPermutations(remainder);\n    for (String word : words) {\n        for (int j = 0; j <= word.length(); j++) {\n            permutations.add(insertCharAt(word, first, j));\n        }\n    }\n    return permutations;\n}\n\npublic static String insertCharAt(String word, char c, int i) {\n    String start = word.substring(0, i);\n    String end = word.substring(i);\n    return start + c + end;\n}", "label": 1}
{"text": "<!DOCTYPE html>\n<html>\n<head>\n<title>My Navigation Page</title>\n</head>\n<body>\n<div>\n  <a href=\"page1.html\">Page 1</a>\n  <a href=\"page2.html\">Page 2</a>\n  <a href=\"page3.html\">Page 3</a>\n</div>\n</body>\n</html>", "label": 1}
{"text": "int n = 15;\nbool prime = true;\nfor(int i = 2; i < n; i++)\n{\n    if (n % i == 0)\n    {\n        prime = false;\n        break;\n    }\n}\n\nif (prime)\n{\n    cout << \"The number is prime\";\n}\nelse\n{\n   cout << \"The number is not prime\";\n}", "label": 1}
{"text": "#include<stdio.h>\n \n// Function to print number from 1 to 100\nvoid printNumbers() {\n    // Loop to print the numbers from 1 to 100\n    for (int i = 1; i <= 100; i++) {\n        printf(\"%d\\n\", i);\n    }\n}", "label": 1}
{"text": "A local variable is a variable declared within a block of code, usually within a function. When the block of code ends, the variable is no longer in scope and is destroyed. It is only accessible within the local scope. A global variable is declared outside of any function and is accessible by all code within the same scope. The scope of a global variable is the entire program or file.", "label": 1}
{"text": "if(num % 2 == 0){\n    console.log(\"Number is Even\");\n} else {\n    console.log(\"Number is Odd\");\n}", "label": 1}
{"text": "min_val = min(list)\nprint('Minimum Value:', min_val)", "label": 1}
{"text": "import json\npeople_string = '{\"name\": \"John Smith\", \"age\": 50, \"profession\": \"engineer\"}'\n\ndata = json.loads(people_string)\nprint(\"Name:           \", data[\"name\"])\nprint(\"Age:            \", data[\"age\"])\nprint(\"Profession:     \", data[\"profession\"])", "label": 1}
{"text": "let arr = [ 4, 2, 5, 1, 3 ]\n\nfunction bubbleSort(arr) {\n  for (let i = 0; i < arr.length; i++) {\n      for (let j = 0; j < arr.length - i - 1; j++) {\n        if (arr[j] < arr[j + 1]) {\n            let temp = arr[j];\n            arr[j] = arr[j + 1];\n            arr[j + 1] = temp\n        }\n      }\n  }\n}", "label": 1}
{"text": "for i in range(10, 21, 4):\n    print(i)", "label": 1}
{"text": "curl -X GET \"https://example.client.com/target?foo=bar&baz=qux\"", "label": 1}
{"text": "To set the state object \"userData\" to an empty object in a React.js application, we would first name the class in which we intend to store the state object, and then use the useState hook to initialize the state object. Inside the useState hook, the state object would be declared and set to have an empty object as its initial state.\n\nExample:\n\nclass UserDataState {\n  const [userData, setUserData] = useState({});\n}", "label": 1}
{"text": "Length of given string: 13", "label": 1}
{"text": "Domain name: example.com", "label": 1}
{"text": "<h2 style=\"color: blue;\">Hello, World!</h2>", "label": 1}
{"text": "SELECT name\nFROM Employees\nWHERE title = 'Manager';", "label": 1}
{"text": "import re\n\ntext = \"My name is John, and today is Monday\"\n\npattern = r\"My name is (\\w+), and today is (\\w+)\"\n\nmatch = re.search(pattern, text)\nname = match.group(1)\nday = match.group(2)\n\nprint(name) # Output: John\nprint(day) # Output: Monday", "label": 1}
{"text": "import re\n\npattern = r\"^\\d{3}-\\d{3}-\\d{4}$\"\n\nif re.match(pattern, \"555-555-5555\"):\n    print(\"Valid Phone Number Format\")\nelse:\n    print(\"Invalid Phone Number Format\")\n\n# Output: Valid Phone Number Format", "label": 1}
{"text": "def get_average(numbers):\n    sum_nums = 0\n    for num in numbers:\n        sum_nums += num\n    return sum_nums / len(numbers)\n\nprint(get_average(numbers))", "label": 1}
{"text": "public class Palindrome{ \n    public static boolean checkPalindrome(String str){ \n        int i=0,j=str.length()-1; \n        while(i<j){ \n            if(str.charAt(i) != str.charAt(j)) \n                return false; \n            i++;j--; \n        } \n        return true; \n    } \n}", "label": 1}
{"text": "public static int arrayMaxMinDiff(int[] arr) {\n\t\n\t// Initialize greatest and smallest\n  \tint max = arr[0]; \n  \tint min = arr[0]; \n  \n \t// Iterate the array and find the max & min\n  \tfor (int i = 0; i < arr.length; i++) {\n    \t\tif (arr[i] > max) \n      \t\t\tmax = arr[i]; \n    \t\tif (arr[i] < min) \n      \t\t\tmin = arr[i]; \n  \t}\n  \n  \t// Calculate & return the difference\n  \tint diff = max - min; \n  \treturn diff; \n}\n// Driver Code \nint[] arr = {1, 5, 10, 20}; \nint diff = arrayMaxMinDiff(arr); \nSystem.out.println(\"Difference between largest & smallest elements = \" + diff); \n# Output\nDifference between largest & smallest elements = 19", "label": 1}
{"text": "public int maxPathSum(TreeNode root) {\n    \n    int result = Integer.MIN_VALUE;\n    if (root == null) return result;\n    Stack<TreeNode> stack = new Stack<>();\n    stack.push(root);\n    while (!stack.isEmpty()) {\n        TreeNode currentNode = stack.pop();\n        result = Math.max(result, maxPathSum(currentNode));\n        if (currentNode.left != null) {\n            stack.push(currentNode.left);\n        }\n        if (currentNode.right != null) {\n            stack.push(currentNode.right);\n        }\n    }\n    return result;\n}\n \npublic int maxPathSum(TreeNode root) {\n    if (root == null) return 0;\n    int sum = root.val;\n    int leftSum = maxPathSum(root.left);\n    int rightSum = maxPathSum(root.right);\n    return Math.max(sum + leftSum + rightSum, sum + Math.max(leftSum, rightSum));\n}", "label": 1}
{"text": "list <- c(1, 2, 3, 4, 5)\nfor (i in seq_along(list)) {\n    print(list[i])\n}", "label": 1}
{"text": "#!/bin/bash\n\n# This script prints out the  \n# names of files in the current directory \n\nDIR=\"$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" >/dev/null 2>&1 && pwd )\"\nfor file in \"$DIR\"/*; do\n    if [ -f \"$file\" ] \n    then \n        # File exists\n        by_no_extension=\"${file%.*}\"\n        echo \"${by_no_extension##*/}\"\n    fi\ndone", "label": 1}
{"text": "def read_until_space(string):\n result = \"\"\n for char in string:\n     if char == \" \":\n         break\n     result += char\n return result", "label": 1}
{"text": "def traverseReverse(head):\n    if head is None:\n        return\n\n    stack = []\n    curr = head\n    while curr is not None:\n        stack.append(curr) \n        curr = curr.next \n\n    while len(stack) > 0:\n        curr = stack.pop()\n        print(curr.val)", "label": 1}
{"text": "import random\nimport string\n\ndef random_string(length):\n    # Create a list of characters to be used in the random string\n    char_list = list(string.ascii_letters + string.digits)\n\n    # Create the random string with the given length\n    random_string = ''.join([random.choice(char_list) for i in range(length)])\n    \n    # Return the random string\n    return random_string\n\nif __name__ == '__main__':\n    # Define the length of the random string\n    length = 8\n    # Call the function to generate the random string\n    random_str = random_string(length)\n    # print the generated string\n    print('Random string:', random_str)\n\nOutput:\nRandom string: fdLbBi49", "label": 1}
{"text": "#include <stdio.h>\n\nint main()\n{\n   int n, i, t1 = 0, t2 = 1, nextTerm;\n\n   n = 10;\n\n   printf(\"Fibonacci Series: \");\n\n   for (i = 1; i <= n; ++i)\n   {\n       printf(\"%d, \", t1);\n       nextTerm = t1 + t2;\n       t1 = t2;\n       t2 = nextTerm;\n   }\n   return 0;\n}", "label": 1}
{"text": "function startsWith($string, $input) {\n    return substr($string, 0, strlen($input)) === $input;\n}", "label": 1}
{"text": "#include<iostream>\n#include<algorithm>\nusing namespace std;\n  \nint main() \n{ \n    string arr[] = { \"Hello\", \"World\", \"This\", \"Is\", \"A\", \"Test\" }; \n    int n = sizeof(arr) / sizeof(arr[0]); \n  \n    sort(arr, arr + n); \n  \n    for (int i = 0; i < n; i++) \n        cout << arr[i] << \" \"; \n  \n    return 0; \n}", "label": 1}
{"text": "def list_to_dict(tuples_list):\n    result = {}\n    for tuple_ in tuples_list:\n        result[tuple_[0]] = tuple_[1]\n    \n    return result", "label": 1}
{"text": "Gradient Descent is an algorithm used for finding the minimum value of a given function by iteration. The process begins with initializing the parameters at a random value and then computing the gradient of the cost function. The gradient can then be used to update the parameters in the direction of steepest descent. The process is then repeated until a local minimum of the cost function is achieved.", "label": 1}
{"text": "import random\n\nnum = random.randint(1, 10000)\nprint(\"Random integer between 1 and 10,000:\", num)", "label": 1}
{"text": "const myObject = {\n \"1\": 1,\n \"2\": 2, \n \"3\": 3, \n \"4\": 4, \n \"5\": 5, \n \"6\": 6, \n \"7\": 7, \n \"8\": 8, \n \"9\": 9, \n \"10\": 10\n};", "label": 1}
{"text": "SELECT * FROM customers LIMIT 5;", "label": 1}
{"text": "<ol>\n...\n</ol>", "label": 1}
{"text": "let evenIndexArr = arr.filter((elem, index) => index % 2 === 0);", "label": 1}
{"text": "SELECT name FROM vehicles WHERE year < 2000;", "label": 1}
{"text": "double mean = (45 + 63 + 76 + 89 + 47) / 5;", "label": 1}
{"text": "^[A-Z]\\d{4,}$", "label": 1}
{"text": "function isEven(num) {\n return num % 2 === 0;\n}", "label": 1}
{"text": "# construct employee object\nclass Employee:\n    def __init__(self, name, phone, salary):\n        self.name = name\n        self.phone = phone\n        self.salary = salary", "label": 1}
{"text": "// program to create a switch statement that evaluates an integer\nswitch(num) {\n    case 0: \n        console.log(\"num is 0\")\n        break;\n    case 1: \n        console.log(\"num is 1\")\n        break;\n    case 2: \n        console.log(\"num is 2\")\n        break;\n    case 3: \n        console.log(\"num is 3\")\n        break;\n    case 4: \n        console.log(\"num is 4\")\n        break;\n    case 5: \n        console.log(\"num is 5\")\n        break;\n    default:\n        console.log(\"num is not between 0 and 5\")\n        break;\n}", "label": 1}
{"text": "2", "label": 1}
{"text": "import json\n\nparsed = json.loads(json_str)\nname_list = []\n\nfor key, value in parsed.items():\n    if key == 'name':\n        name_list.append(value)\n\nprint(name_list)", "label": 1}
{"text": "for i in range(len(myString)-1,-1,-1):\n    print(myString[i])", "label": 1}
{"text": "def is_anagram(str1, str2): \n    return sorted(str1) == sorted(str2)", "label": 1}
{"text": "{key: value for (key,value) in [('a',0),('b',1),('c',2)]}", "label": 1}
{"text": "def fibonacci(length): \n    result = [] \n    a, b = 0, 1\n    for _ in range(length): \n        result.append(a) \n        a, b = b, a + b \n    return result", "label": 1}
{"text": "int number = -7;\n\nswitch (number) {\n case 0: \n  System.out.println(\"Zero\");\n  break;\n case > 0:\n  System.out.println(\"Positive\");\n  break;\n case < 0:\n  System.out.println(\"Negative\");\n  break;\n}", "label": 1}
{"text": "A string can be converted to a list in Python by using the list() function. The syntax for this is: \n\nlist(string);\n\nFor example, to convert the string \"apple\" to a list, you would use: \n\nlist(\"apple\");", "label": 1}
{"text": "def append_list(my_list, new_element):\n    my_list.append(new_element)\n    return my_list", "label": 1}
{"text": "function combinedLength(string1, string2) {\n  return string1.length + string2.length;\n}", "label": 1}
{"text": "def remove_punctuation(text):\n    punctuation_chars = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\n    output = \"\"\n    for char in text:\n        if char not in punctuation_chars:\n            output += char\n    return output", "label": 1}
{"text": "for($i = 0; $i <= 10; $i++){\n    echo $i.' ';\n}", "label": 1}
{"text": "let pattern = /a+/;", "label": 1}
{"text": "<span style=\"color:red;\">Hello, World!</span>", "label": 1}
{"text": "class Book:\n    def __init__(self, title, author, publisher, pages):\n        self.title = title\n        self.author = author\n        self.publisher = publisher\n        self.pages = pages\n   \n    def print_info(self):\n        print(f\"Title: {self.title}\")\n        print(f\"Author: {self.author}\")\n        print(f\"Publisher: {self.publisher}\")\n        print(f\"Pages: {self.pages}\")", "label": 1}
{"text": "Infix notation is a way of writing an expression in which the operators are placed between the operands, such as 2 + 5, whereas postfix notation is a way of writing an expression in which the operators are placed after the operands, such as 2 5 +. To convert an expression from postfix notation to infix notation, scan the expression from left to right. If an operand is encountered, simply push it onto a stack. If an operator is encountered, pop two operands from the stack and place the operator in between them. Finally, push the resulting expression back onto the stack and repeat this until the end of the expression is reached.", "label": 1}
{"text": "public int LargestNumber(int a, int b, int c)\n{\n    if (a >= b && a >= c)\n        return a;\n    else if (b >= a && b >= c)\n        return b;\n    else\n        return c;\n}", "label": 1}
{"text": "def reverse_string(str)\n    return str.reverse\nend", "label": 1}
{"text": "def sortArray(array):\n    n = len(array)\n    for i in range(n):\n        min_index = i\n        for j in range(i+1, n):\n            if array[min_index] > array[j]:\n                min_index = j\n        array[i], array[min_index] = array[min_index], array[i]\n    return array", "label": 1}
{"text": "Advantages of using a linked list data structure: \n1. A linked list can grow and shrink in size as needed since nodes can be dynamically allocated. \n2. Nodes can be added at any point in the list without traversing the whole list. \n\nDisadvantages of using a linked list data structure: \n1. Time efficiency is reduced  since nodes must be searched sequentially. \n2. Memory efficiency is reduced since each node requires additional space to store references to the next node.", "label": 1}
{"text": "To execute a beta test using a web application, you can create a prototype or minimum viable version of the web application and allow a limited number of users to access it. You can gather feedback from these users on the usability and performance of the application, which can be then used to make improvements before launching the app. Additionally, you can invite more users to join the beta program, so that you can get a wide range of user experiences and insights that can help make the web application robust.", "label": 1}
{"text": "Sub Transpose() \n \n    Dim ReadyRange As Range \n \n     \n \n    Set ReadyRange = Selection \n \n    ReadyRange.Copy \n \n    ReadyRange.PasteSpecial xlPasteAll, Transpose:=True \n \nEnd Sub", "label": 1}
{"text": "^\\+?1?\\s?\\(?\\d{3}\\)?[\\s\\-]?\\d{3}[\\s\\-]?\\d{4}$", "label": 1}
{"text": "public static String filterCommonCharacters(String str1, String str2) {\n    StringBuilder sb = new StringBuilder();\n    // Traverse both strings\n    for (int i = 0; i < str1.length(); i++) {\n        // Check if str2 contains str1[i]\n        boolean found = false;\n        for (int j = 0; j < str2.length(); j++) {\n            if (str1.charAt(i) == str2.charAt(j)) \n                found = true;\n        }\n        // Append the character if it is not present in str2\n        if (found == false)\n            sb.append(str1.charAt(i));  \n    }  \n    return sb.toString();\n}", "label": 1}
{"text": "public static String prependIntToString(String inputString, int num) {\n    String outputString = num + \"\" + inputString;\n    return outputString;\n}", "label": 1}
{"text": "\"\"\"\nBuild a neural network for binary classification using TensorFlow\n\"\"\"\nimport tensorflow as tf\n\n# Define the model\nmodel = tf.keras.Sequential()\nmodel.add(tf.keras.layers.Dense(units=8, activation='relu', input_shape=(2,))) \nmodel.add(tf.keras.layers.Dense(units=4, activation='relu'))\nmodel.add(tf.keras.layers.Dense(units=1, activation='sigmoid'))\n\n# Compile the model\nmodel.compile(optimizer='adam',\n              loss='binary_crossentropy',\n              metrics=['accuracy'])", "label": 1}
{"text": "function reverseString(str) {\n return str.split('').reverse().join('');\n}", "label": 1}
{"text": "function mostCommonlyOccuring(obj) {\n let count = {};\n let maxCount = 0;\n let mostCommon = null;\n \n for (const key in obj) {\n  if (obj.hasOwnProperty(key)) {\n   if (obj[key] in count) {\n    count[obj[key]]++;\n   } else {\n    count[obj[key]] = 1;\n   }\n   if (count[obj[key]] > maxCount) {\n    maxCount = count[obj[key]];\n    mostCommon = obj[key];\n   }\n  }\n }\n return mostCommon;\n}", "label": 1}
{"text": ".element {\n    text-shadow: 1px 0 white, 0 1px white, 1px 1px white, -1px 0 white, 0 -1px white, -1px -1px white;\n}", "label": 1}
{"text": "def square(n):\n    return n ** 2", "label": 1}
{"text": "list1 = ['a', 'b', 'c']\nlist1.append('d') \n\nprint(list1)\n\nOutput: ['a', 'b', 'c', 'd']", "label": 1}
{"text": "def sqrt(number)\n  Math.sqrt(number)\nend \n\nputs sqrt(9) # output 3.0", "label": 1}
{"text": "An abstract class is a class that contains abstract methods and variables. Abstract classes are meant to be inherited and customized by their subclasses. They are used to provide basic implementations of commonly used methods, as well as impose a common interface between different subclasses.", "label": 1}
{"text": "SELECT COUNT(*) FROM myTable;", "label": 1}
{"text": "public class Sum {\n    public int getSum(int a, int b) {\n        return a + b;\n    }\n}", "label": 1}
{"text": "function anagramCheck(str1, str2) {\n  // Remove whitespace, convert strings to lowercase, and split into arrays\n  let arr1 = str1.replace(/\\s/g, '').toLowerCase().split('');\n  let arr2 = str2.replace(/\\s/g, '').toLowerCase().split('');\n  \n  // If the arrays are different lengths, they cannot be anagrams\n  if (arr1.length !== arr2.length) {\n    return false;\n  }\n  \n  // Sort both arrays, and check if they are the same\n  let sortedArr1 = arr1.sort();\n  let sortedArr2 = arr2.sort();\n  \n  for (let i=0; i<sortedArr1.length; i++) {\n    if (sortedArr1[i] !== sortedArr2[i]) {\n      return false;\n    }\n  }\n  return true;\n}", "label": 1}
{"text": "public class BinaryTree { \n  \n    // Root of Binary Tree \n    Node root; \n  \n    // Function to print binary tree in level order \n    void printLevelOrder() { \n        int h = height(root); \n        int i; \n        for (i = 1; i <= h; i++) \n            levelOrder(root, i); \n    } \n  \n    // Print nodes at a given level \n    void levelOrder(Node root, int level) { \n        if (root == null) \n            return; \n        if (level == 1) \n            System.out.print(root.data + \" \"); \n        else if (level > 1) { \n            levelOrder(root.left, level - 1); \n            levelOrder(root.right, level - 1); \n        } \n    } \n  \n    // Compute the height of a tree--the number of nodes \n    // along the longest path from the root node down to \n    // the farthest leaf node \n    int height(Node root) { \n        if (root == null) \n            return 0; \n        else { \n            // compute height of each subtree \n            int lheight = height(root.left); \n            int rheight = height(root.right); \n  \n            // use the larger one \n            if (lheight > rheight) \n                return (lheight + 1); \n            else\n                return (rheight + 1); \n        } \n    } \n}", "label": 1}
{"text": "var num1 = 8;\nvar num2 = 4;\nvar sum = num1 + num2;\n \nconsole.log(sum);", "label": 1}
{"text": "import random\n\ndef random_int():\n    return random.randint(1, 10)", "label": 1}
{"text": "len_string = len(string)\nprint(len_string) # output: 11", "label": 1}
{"text": "```\nclass Car:\n    def __init__(self, make, model):\n        self.make = make\n        self.model = model\n\n```", "label": 1}
{"text": "def contains_substring(string, substring):\n  return substring in string", "label": 1}
{"text": "def find_min(numbers)\n  min = numbers[0]\n  numbers.each do |num|\n    if num < min\n      min = num\n    end\n  end\n  min\nend", "label": 1}
{"text": "def min_path_sum(matrix):\n\n    # initialize the solution matrix\n    res = [[0 for _ in range(len(matrix[0]))] for _ in range(len(matrix))]\n\n    # copying the first row elements\n    res[0] = matrix[0]\n\n    # iterate over the remaining rows\n    for i in range(1, len(matrix)):\n        # copy the first element\n        res[i][0] = res[i-1][0] + matrix[i][0]\n\n        for j in range(1, len(matrix[0])):\n            # choose the smaller of the two\n            res[i][j] = min(res[i-1][j], res[i][j-1]) + matrix[i][j]\n\n    # return the bottom-right element\n    return res[len(matrix)-1][len(matrix[0])-1]", "label": 1}
{"text": "pre {\n  background-color: #f7f7f7;\n  padding: 10px;\n  border: 1px solid #ccc;\n  border-radius: 5px;\n}\n\ncode {\n  color: #f80;\n  background-color: #fcfcfc;\n  padding: 3px;\n  border: 1px solid #ccc;\n  border-radius: 3px;\n}", "label": 1}
{"text": "SELECT * FROM properties WHERE price BETWEEN 500 AND 1000;", "label": 1}
{"text": "SELECT DISTINCT City FROM dataset;", "label": 1}
{"text": "def get_fibonacci(n):\n    a, b = 0, 1\n    for _ in range(2, n):\n        a, b = b, a + b\n    return b", "label": 1}
{"text": "def print_multiline_message(message):\n    print(message)", "label": 1}
{"text": "public static String numberToString(int num) {\n    StringBuilder sb = new StringBuilder();\n    \n    // if num is negative, append '-' to sb\n    if (num < 0) {\n        sb.append('-');\n    }\n    \n    // obtain absolute value to accommodate for all numbers\n    num = Math.abs(num);\n    \n    // extract each digit and append to sb\n    while (num > 0) {\n        int digit = num % 10;\n        sb.append(digit);\n        num /= 10;\n    }\n    \n    return sb.reverse().toString();\n}", "label": 1}
{"text": "<html>\n <head>\n  <title>People Table</title>\n </head> \n <body>\n  <table>\n   <tr>\n    <th>First Name</th>\n    <th>Last Name</th>\n    <th>Age</th>\n    <th>City</th>\n   </tr>\n   <tr>\n    <td>John</td>\n    <td>Doe</td>\n    <td>50</td>\n    <td>New York</td>\n   </tr>\n   <tr>\n    <td>Jane</td>\n    <td>Smith</td>\n    <td>41</td>\n    <td>Los Angeles</td>\n   </tr>\n   <tr>\n    <td>Dave</td>\n    <td>Jackson</td>\n    <td>28</td>\n    <td>Boston</td>\n   </tr>\n  </table>\n </body>\n</html>", "label": 1}
{"text": "a, b = b, a\nputs a # => 5\nputs b # => 10", "label": 1}
{"text": "Mode: -9 \nMedian: 7", "label": 1}
{"text": "try: \n\tdiv_num=5/0\nexcept ZeroDivisionError as e:\n\t# TODO:\n    print(\"Divide by zero error\")\n    print(\"Error message: \" + str(e))", "label": 1}
{"text": "for number in numbers:\n    print(number*5)", "label": 1}
{"text": "console.log(data.name);", "label": 1}
{"text": "SELECT product_id, MAX(price)\nFROM product_table\nGROUP BY product_id;", "label": 1}
{"text": "public class StringUtils {\n\n    public static String removePunctuation(String input) {\n        String output = input.replaceAll(\"[^a-zA-Z0-9 ]\", \"\");\n        return output;\n    }\n}", "label": 1}
{"text": "let urls = string.match(/https?:\\/\\/(www\\.)?([a-zA-Z0-9][-a-zA-Z0-9]+\\.)+[a-zA-Z]+(\\/[-a-zA-Z0-9_:\\@&?=+,.!/~*'\\(\\)]*)?/g);", "label": 1}
{"text": "import string\nimport random\n\ndef generate_string_array(length):\n    # This function will generate an array of strings\n    array_of_strings = []\n    for _ in range(length):\n        new_string = ''.join(random.choice(string.ascii_lowercase) for _ in range(random.randint(5,10)))\n        array_of_strings.append(new_string)\n    return array_of_strings", "label": 1}
{"text": "let sortedArray = array.sort((a,b) => b - a);", "label": 1}
{"text": "SELECT title \nFROM books \nWHERE is_subscribed IS TRUE;", "label": 1}
{"text": "The \"head\" tag in HTML is used to contain metadata about a page. This metadata includes tags such as title, description, js/css resources to include,  additional search keywords, etc. This metadata is essential for web search engine optimization and helps improve the visibility of the page on search engines. Additionally, the \"head\" tag can also be used to include additional scripts and style sheets to be used in the page.", "label": 1}
{"text": "Three ways to make a web page more accessible are:\n\n1. Provide alternative text for images and videos. This ensures people with vision or hearing impairment can understand the content on the page.\n2. Ensure that the page is navigable with a keyboard. This allows people who cannot use a mouse to still use the web page.\n3. Structure the page elements following standards such as HTML5 and ARIA to aid assistive technology users in navigating the page. This also helps machines understand the content and structure of a page.", "label": 1}
{"text": "x = float(6.02e23)\nprint(x) # 6.02E+23", "label": 1}
{"text": "The Python built-in function to swap two values is the \"tuple unpacking\" operator (x, y = y, x). This allows you to swap two variables without having to use a temporary variable.", "label": 1}
{"text": "def matrix_addition(A, B):\n    if len(A) != len(B) or len(A[0]) != len(B[0]):\n        return 'Matrices cannot be added!'\n    else:\n        result = [[0 for i in range(len(A[0]))] for j in range(len(A))]\n        for i in range(len(A)):\n            for j in range(len(A[0])):\n                result[i][j] = A[i][j] + B[i][j]\n        return result\n\nA = [[3, 5, 7], [1, 6, 9]]\nB = [[4, 8, 2], [3, 5, 7]]\n\nprint(matrix_addition(A, B)) # [[7, 13, 9], [4, 11, 16]]", "label": 1}
{"text": "def insert_sort(arr): \n    for i in range(1, len(arr)): \n        key = arr[i] \n        j = i-1\n        while j >= 0 and key < arr[j] : \n            arr[j + 1] = arr[j] \n            j -= 1\n        arr[j + 1] = key", "label": 1}
{"text": "function mergeArrays(arr1, arr2) {\n    let result = [];\n    let index1 = 0;\n    let index2 = 0;\n\n    while (index1 < arr1.length && index2 < arr2.length) {\n        if (arr1[index1] < arr2[index2]) {\n            result.push(arr1[index1]);\n            index1++;\n        } else {\n            result.push(arr2[index2]);\n            index2++;\n        }\n    }\n\n    while (index1 < arr1.length) {\n        result.push(arr1[index1]);\n        index1++;\n    }\n\n    while (index2 < arr2.length) {\n        result.push(arr2[index2]);\n        index2++;\n    }\n\n    return result;\n}", "label": 1}
{"text": "def median(arr): \n    arr.sort() \n    if (len(arr) % 2 != 0): \n        return arr[len(arr) // 2] \n    else: \n        return (arr[(len(arr) // 2) - 1] + arr[len(arr) // 2]) / 2.0", "label": 1}
{"text": "def longest_substring(string):\n    longest = ''\n    current = ''\n    for i in range(len(string)):\n        if (i==0 or string[i] >= string[i-1]):\n            current += string[i]\n            if (len(current) > len(longest)):\n                longest = current\n        else:\n            current = string[i]\n    return longest", "label": 1}
{"text": "public static int[][] generateMatrix(int n){\n    int[][] matrix = new int[n][n];\n    \n    for(int i = 0; i < n; i++){\n        for(int j = 0; j < n; j++){\n            matrix[i][j] = i * n + j;\n        }\n    }\n    \n    return matrix;\n}", "label": 1}
{"text": "SELECT c.name, c.age, i.income\nFROM customer c\nINNER JOIN income i \nON c.customer_id = i.customer_id;", "label": 1}
{"text": "def sort(arr): \n    if len(arr) == 0: \n        return [] \n    else: \n        pivot = arr[0] \n        lesser = sort([x for x in arr[1:] if x < pivot])\n        greater = sort([x for x in arr[1:] if x >= pivot])\n        return lesser + [pivot] + greater", "label": 1}
{"text": "bin_n = bin(n)\nprint(bin_n) # Returns 0b100", "label": 1}
{"text": "List is an ordered sequence of data that can hold duplicate values. It is one of the most widely used data structures in Python, and is created by placing all the items in a square bracket and separating them by commas. Set is an unordered collection of data that cannot hold duplicate values. Set is created by enclosing all the items in a set() function. Dictionary is an unordered collection of key:value pairs. It is similar to real-life dictionaries in that it stores key-value pairs and retrieves values based on the associated key. It is created with curly brackets and key:value pairs, separated by commas.", "label": 1}
{"text": "index = array.index(element)\nprint(\"Index of the element\", element, \"is\", index)", "label": 1}
{"text": "import random\n\nrandom_numbers = {} \n  \nfor i in range(x + 1): \n    n = random.randint(1, 50) \n      \n    random_numbers[i+1] = n\n      \nprint(random_numbers)", "label": 1}
{"text": "<nav>\n  <a href=\"index.html\">Home</a>\n  <a href=\"about.html\">About</a>\n  <a href=\"contact.html\">Contact</a>\n</nav>", "label": 1}
{"text": "SELECT * FROM students WHERE age > 18;", "label": 1}
{"text": "Type casting is the process of converting one data type into another. It is generally used to convert values from one type to another in order to perform specific operations. In programming languages, type casting involves converting a value of one data type such as an integer or a string into a new data type such as a float or a boolean. Type casting ensures that the operations performed on the data are valid and helps reduce the chances of errors due to incompatibility of data types.", "label": 1}
{"text": "def octal_representation(num):\n    output = \"\"\n    while num > 0:\n        output = str(num % 8) + output\n        num //= 8\n    return output", "label": 1}
{"text": "if(document.body.innerHTML.indexOf('awesome') > -1){\n    console.log('Text found!');\n} else {\n    console.log('Text not found!');\n}", "label": 1}
{"text": "func sort(dict: [String: String]) -> [String: String] {\n    let sortedKeys = dict.keys.sorted { $0 < $1 }\n    var sortedDict = [String: String]()\n    for key in sortedKeys {\n        sortedDict[key] = dict[key]\n    }\n    return sortedDict\n}", "label": 1}
{"text": "inp =raw_input(\"Enter String:\")\nmy_dict = {}\nfor character in inp:\n     if character not in my_dict:\n         my_dict[character] = 1\n     else:\n         my_dict[character] += 1\n\nsorted_order = sorted(my_dict.items(), key=lambda x: x[0])\n\nprint(\"Sorted Dictionary\")\nfor character in sorted_order:\n    print(\"{} : {}\".format(character[0], character[1]))", "label": 1}
{"text": "def find_max(list):\n    max_element = float('-inf')\n    for element in list:\n        if element > max_element:\n            max_element = element\n    return max_element\n\nprint(find_max(list)) # Prints 12", "label": 1}
{"text": "let userInput = prompt('Please enter some input.');\nalert(`The input entered was ${userInput}`);", "label": 1}
{"text": "list=[5,7,8,9]\n\nlist = list(dict.fromkeys(list))", "label": 1}
{"text": "I am learning Java\nI am learning Python", "label": 1}
{"text": "def transpose(arr):\n    transpose_arr = [[0] *len(arr) for _ in range(len(arr[0]))]\n    for row in range(len(arr)):\n        for col in range(len(arr[0])):\n            transpose_arr[col][row] = arr[row][col]\n    return transpose_arr", "label": 1}
{"text": "public static String longestCommonPrefix(String[] arr) \n{ \n    if (arr.length == 0) \n        return \"\"; \n  \n    String prefix = arr[0]; \n  \n    for (int i = 1; i < arr.length; i++) \n    { \n        while (arr[i].indexOf(prefix) != 0) \n        {\n            prefix = prefix.substring(0, prefix.length() - 1); \n            if (prefix.isEmpty()) \n                return \"\";  \n        } \n    } \n    return prefix; \n}", "label": 1}
{"text": "def hello_world():\n    # Prompt user for input\n    user_input = input(\"Please enter your name: \")\n\n    # Prints \"Hello, {user_input}!\"\n    print(\"Hello, {}!\".format(user_input))", "label": 1}
{"text": "class LongerString {\n    constructor(str1, str2) {\n        this.string1 = str1;\n        this.string2 = str2;\n    }\n    \n    getLongerString() {\n        return (this.string1.length > this.string2.length) ? this.string1 : this.string2;\n    }\n}", "label": 1}
{"text": "int matrix[10][10]; \n\nint c = 1; \nfor (int i = 0; i < 10; i++) \n    for (int j = 0; j < 10; j++) \n        matrix[i][j] = c++;", "label": 1}
{"text": "Long Short-Term Memory (LSTM) networks are a type of Recurrent Neural Network (RNN) that enable the model to learn long-term dependencies by remembering information from long periods of time. LSTMs are commonly used to model time-series data such as stock prices, sensor readings, or other sequences of data points that contain predictable patterns. The LSTM predicts the next step in the sequential data using the past data points, and can be used to perform tasks such as forecasting future data points and anomaly detection.", "label": 1}
{"text": "class Calculator:\n    def multiply(self, num1, num2):\n        return num1 * num2\n        \n    def add(self, num1, num2):\n        return num1 + num2\n        \n    def modulus(self, num1, num2):\n        return num1 % num2", "label": 1}
{"text": "def print_words_with_e(mylist):\n for word in mylist:\n  if 'e' in word:\n   print(word)\n\nprint_words_with_e(mylist)\n\n#Output: \nhello\nfire\nfeline", "label": 1}
{"text": "SELECT SUM(price)\nFROM books\nWHERE price > 20;", "label": 1}
{"text": "for(let i=0; i<arr.length; i++){\n    let item = arr[i];\n    console.log(item);\n}", "label": 1}
{"text": "class Animal {\n    public:\n        // constructor\n        Animal(int age);\n        // member function\n        virtual string getDescription() const;\n};", "label": 1}
{"text": "def avg_nums(nums):\n  total = 0\n  for num in nums:\n    total += num\n  avg = total / len(nums)\n  return avg\n\nprint(avg_nums([1, 2, 3, 4, 5]))\n\n# Output: 3.0", "label": 1}
{"text": "int max_value = arr.Max(); // 9", "label": 1}
{"text": "import matplotlib.pyplot as plt \n  \n# X axis values \nx = ['California', 'New York'] \n# Y axis values \npop = [39.56, 19.45] \n  \n# plotting bars  \nplt.bar(x, pop) \n  \n# Naming the x-axis \nplt.xlabel('State') \n# naming the y-axis \nplt.ylabel('Population') \n  \n# giving a title to the figure \nplt.title('California vs. New York Population') \n  \n# function to show the plot \nplt.show()", "label": 1}
{"text": "my favorite food is pizza.", "label": 1}
{"text": "def longest_substring(s1, s2):\n    m = [[0] * (1 + len(s2)) for i in range(1 + len(s1))]\n    longest, x_longest = 0, 0\n    for x in range(1, 1 + len(s1)):\n        for y in range(1, 1 + len(s2)):\n            if s1[x - 1] == s2[y - 1]:\n                m[x][y] = m[x - 1][y - 1] + 1\n                if m[x][y] > longest:\n                    longest = m[x][y]\n                    x_longest = x\n            else:\n                m[x][y] = 0\n    return s1[x_longest - longest: x_longest]\n\ns1 = \"Hello, world!\"\ns2 = \"world, goodbye!\"\nprint(longest_substring(s1, s2))\n\n# Output: world", "label": 1}
{"text": "input_field.addEventListener(\"input\", function(e) {\n    // Fetch the input value \n    var inputValue = e.target.value;\n\n    // Check the input value matches one from our list \n    if (list.includes(inputValue)) {\n        // If so, complete it \n        input_field.value = inputValue;\n    }\n});", "label": 1}
{"text": "console.log(str.repeat(num)); // HelloHelloHello", "label": 1}
{"text": "import re\npattern = r\"\\b\\w{7,}\\b\"\n\nsentence = \"This is a sample sentence to test\"\nmatches = re.findall(pattern, sentence)\n \nprint(matches)", "label": 1}
{"text": "<html>\n  <header>\n    <title>Welcome Page</title>\n  </header>\n  <body>\n    <h1>Welcome to My Website</h1>\n    <p>This website offers a variety of resources.</p>\n    <button onclick=\"window.location.href='anotherpage.html'\">Redirect</button>\n  </body>\n</html>", "label": 1}
{"text": "SELECT SKU, product_name, price \nFROM Products \nWHERE price > 10;", "label": 1}
{"text": "import datetime \nstart_date = datetime.date(2020, 5, 21)\nend_date = datetime.date(2020, 6, 13)\ndelta = end_date - start_date\nprint(\"Number of days between two dates:\", delta.days)", "label": 1}
{"text": "<!DOCTYPE html>\n<html>\n<body>\n\n<form action=\"action_login.php\" method=\"post\">\n  Username: <input type=\"text\" name=\"username\">\n  <input type=\"submit\" value=\"Submit\">\n</form> \n\n</body>\n</html>", "label": 1}
{"text": "SELECT COUNT(*) FROM employees;", "label": 1}
{"text": "def extractDigits(num):\n    extracted_list = []\n    while num > 0:\n        extracted_list.append(num%10)\n        num //= 10\n    extracted_list.sort(reverse=True)\n    return extracted_list", "label": 1}
{"text": "def print_first_five(my_list):\n    \"\"\"This function prints the first five elements of a list.\"\"\"\n    print(my_list[:5])", "label": 1}
{"text": "def sort_ascending(my_array):\n    '''This function sorts an array of integers in ascending order without using the built-in sort() function.'''\n    n = len(my_array)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if my_array[j] > my_array[j+1]:\n                my_array[j], my_array[j+1] = my_array[j+1], my_array[j]\n    return my_array", "label": 1}
{"text": "def analyze_string(input_string):\n    '''This function analyzes a provided string of characters and \n    returns the number of occurrences of each character.'''\n    dict_count = {}\n    for char in input_string:\n        if char in dict_count:\n            dict_count[char] += 1\n        else:\n            dict_count[char] = 1\n    return dict_count", "label": 1}
{"text": "2147483647", "label": 1}
{"text": "http://www.facebook.com/profile/pages", "label": 1}
{"text": "<html>\n    <head>\n    </head>\n    <body>\n        <h1>Hello World</h1>\n    </body>\n</html>", "label": 1}
{"text": "const calculateSum = (start, end) => {\n  let sum = 0;\n  for (let i = start; i <= end; i++) {\n    if (i % 2 === 0) sum += i\n  }\n  return sum;\n}\n\ncalculateSum(20, 100); // 1890", "label": 1}
{"text": "const result = arr.filter(item => item !== 0); // result will be [1,2,3,4,6]", "label": 1}
{"text": "function makeRequest(url) {\n    return fetch(url).then(response => response.json());\n}\n\nmakeRequest(URL);", "label": 1}
{"text": "class Employee:\n    def __init__(self, name, salary):\n        self.name = name\n        self.salary = salary\n    \n    def get_name(self):\n        return self.name\n    \n    def get_salary(self):\n        return self.salary", "label": 1}
{"text": "class ChessBoard:\n    def __init__(self):\n        self.board = [\n            [\"a1\",\"b1\",\"c1\"],\n            [\"a2\",\"b2\",\"c2\"],\n            [\"a3\",\"b3\",\"c3\"]\n        ]\n\n    def __str__(self):\n        board_string = \"\"\n        for row in self.board:\n            for col in row:\n                board_string += col + \" \"\n            board_string += \"\\n\"\n        return board_string", "label": 1}
{"text": "import random\n\ndef random_word(words_list):\n    word = random.choice(words_list)\n    print(word)\n\nrandom_word(words_list)", "label": 1}
{"text": "public static String toUpperCase(String s) {\n    return s.toUpperCase();\n}", "label": 1}
{"text": "def sum_of_two_numbers(num1, num2)\n  puts num1 + num2\nend\n\nsum_of_two_numbers(5, 10)", "label": 1}
{"text": "function sameElementCheck(arr1, arr2) {\n    if (arr1.length !== arr2.length) {\n        return false;\n    }\n\n    let flag = true;\n    arr1.forEach((elem) => {\n        if (!arr2.includes(elem)) {\n            flag = false;\n        }\n    })\n\n    return flag;\n}", "label": 1}
{"text": "public class Palindrome { \n  \n    public static void main(String[] args) {  \n        String a = \"Madam\";  \n        String b = \"\"; \n        int n = a.length(); \n  \n        for(int i = n - 1; i >= 0; i--) { \n            b = b + a.charAt(i); \n        }  \n        if(a.equalsIgnoreCase(b)) { \n            System.out.println(\"The string is a palindrome.\"); \n        } \n        else {\n            System.out.println(\"The string is not a palindrome.\"); \n        }\n    } \n}", "label": 1}
{"text": "def calc_word_freq(text):\n    '''This function calculates word frequency in a given text'''\n    word_freq = {}\n    for word in text.split():\n        if word in word_freq:\n            word_freq[word] += 1\n        else:\n            word_freq[word] = 1\n\n    for word,freq in word_freq.items():\n        print(f'{word} - {freq}')", "label": 1}
{"text": "SELECT * FROM users WHERE last_name = 'Smith'", "label": 1}
{"text": "class Point {\n private:\n  int x;\n  int y;\n public:\n  Point(int x, int y) : x(x), y(y) {}\n  int getX() const { return x; }\n  int getY() const { return y; }\n};", "label": 1}
{"text": "List<string> myList = new List<string>();\nmyList.Add(\"hello\");\nmyList.Add(\"world\");\nmyList.Add(\"testing\");\nmyList.Add(\"123\");\nmyList.Add(\"goodbye\");\n\nforeach (string s in myList)\n{\n Console.WriteLine(s);\n}", "label": 1}
{"text": "for i in range(len(list) - 1, -1, -1):\n    print(list[i])", "label": 1}
{"text": "function sum(a, b) {\n  return a + b;\n}", "label": 1}
{"text": "class Rectangle: \n    def __init__(self, x1, y1, x2, y2): \n        self.x1 = x1\n        self.y1 = y1\n        self.x2 = x2\n        self.y2 = y2\n  \n    def get_coordinates(self): \n        return (self.x1, self.y1, self.x2, self.y2)", "label": 1}
{"text": "SELECT COUNT(*) FROM products;", "label": 1}
{"text": "import requests\n\ndef get_public_ip():\n response = requests.get('https://api.ipify.org')\n return response.text", "label": 1}
{"text": "i = 0\nwhile i < 10:\n print(i)\n i+=1", "label": 1}
{"text": "result = 0\nfor item in items:\n result += item", "label": 1}
{"text": "def cosine_similarity(vec1, vec2):\n    dot_product = np.dot(vec1, vec2)\n    norm_vec1 = np.linalg.norm(vec1)\n    norm_vec2 = np.linalg.norm(vec2)\n    return dot_product / (norm_vec1 * norm_vec2)", "label": 1}
{"text": "def hello(n):\n    if n > 0:\n        for x in range(n):\n            print(\"Hello world!\")\n    else:\n        print(\"Input should be a number greater than 0\")\n\nhello(5)", "label": 1}
{"text": "SELECT * FROM users WHERE age > 18;", "label": 1}
{"text": "SELECT * \nFROM customers \nWHERE zip_code = 10003;", "label": 1}
{"text": "employee_names = ['John', 'Lisa', 'Emily', 'Mia'] \n\nsorted_employees = sorted(employee_names)\n\nprint(sorted_employees)", "label": 1}
{"text": "def product(x,y,z):\n    return x*y*z\n\nx = 3\ny = 5\nz = 7\n\nres = product(x,y,z)\nprint(res)", "label": 1}
{"text": "The main advantage of using dynamic programming over greedy algorithms is that it is optimized for the long-term. Dynamic programming takes into account the entire problem and finds the optimal solution based on the entire problem. On the other hand, greedy algorithms may find an optimal solution to a given sub-problem, but they may not find the optimal solution to the entire problem. In addition, dynamic programming is better suited for problems with overlapping sub-problems, which may not be solved by a greedy algorithm.", "label": 1}
{"text": "def Fibonacci(n): \n    if n <= 1: \n        return n \n    else: \n        return(Fibonacci(n-1) + Fibonacci(n-2)) \n  \n# Driver Code \nnterms = 10\n  \n# check if the number of terms is valid \nif nterms <= 0: \n    print(\"Plese enter a positive integer\") \nelse: \n    print(\"Fibonacci sequence:\") \n    for i in range(nterms): \n        print(Fibonacci(i))", "label": 1}
{"text": "for (let i=0; i < arr.length; i++) {\n  if (arr[i] % 2 === 0) {\n    console.log(arr[i]);\n  }\n}\n\n// Output: 10, 18, 24", "label": 1}
{"text": "string val = Convert.ToString(7.75);", "label": 1}
{"text": "The output of the code snippet is 30. This is the result of multiplying the values of 'a' (5) and 'b' (6).", "label": 1}
{"text": "The most efficient way to find the index of a given element in an unsorted array using JavaScript is by using the indexOf() method. This method returns the index of the first occurrence of a given element in the array, or -1 if it is not present.", "label": 1}
{"text": "myDict = {'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]}\nfor key, val in myDict.items():\n    print(\"key:\", key, \"values:\", val)", "label": 1}
{"text": "div.container h2 { }", "label": 1}
{"text": "def find_common_elements(s1, s2):\n res = []\n for i in s1:\n if i in s2:\n res.append(i)\n return res\n\nfind_common_elements(s1,s2)\n#Output: ['n']", "label": 1}
{"text": "def select_multiples_of_3(input_list):\n    result = []\n    for index, num in enumerate(input_list):\n        if index % 3 == 0:\n            result.append(num)\n    return result\n\n# test\ntest_list = [2, 5, 8, 12, 9, 82, 3]\nprint(select_multiples_of_3(test_list)) # [2, 12, 3]", "label": 1}
{"text": "from sklearn.linear_model import LogisticRegression\nfrom sklearn.preprocessing import OneHotEncoder\n\nX = df[[\"categorical_var\"]]\ny = df[\"target\"]\n\nencoder = OneHotEncoder()\nencoded_X = encoder.fit_transform(X)\n\nmodel = LogisticRegression(solver=\"lbfgs\")\nmodel.fit(encoded_X, y)", "label": 1}
{"text": "from sklearn.ensemble import RandomForestClassifier\n\nrf_model = RandomForestClassifier(n_estimators=100, max_depth=5, random_state=42)\nrf_model.fit(X_train, y_train)", "label": 1}
{"text": "#include <iostream>\nusing namespace std;\n\nint main() {\n    for(int i = 1; i <= 100; i++) {\n        if((i % 3 == 0) && (i % 5 == 0)) {\n            cout << \"FizzBuzz\" << endl;\n        } else if (i % 3 == 0) {\n            cout << \"Fizz\" << endl;\n        } else if (i % 5 == 0) {\n            cout << \"Buzz\" << endl;\n        } else {\n            cout << i << endl;\n        }\n    }\n    return 0;\n}", "label": 1}
{"text": "def sort_strings(arr):\n    sorted_arr = sorted(arr)\n    return sorted_arr\n\nprint(sort_strings([\"hello\", \"world\", \"this\", \"is\", \"a\", \"sentence\"]))\n\n# Output: ['a', 'hello', 'is', 'sentence', 'this', 'world']", "label": 1}
{"text": "# Import the required datetime module\nimport datetime\n\ndef validate_date(date):\n    # Check if the date matches with the given format\n    try:\n       datetime.datetime.strptime(date, '%Y/%m/%d')\n       return True\n    except ValueError:\n        return False", "label": 1}
{"text": "type Post struct {\n        Title string\n        Author string\n        Timestamp time.Time\n        Body string\n        Comments []Comment\n    }", "label": 1}
{"text": "// To get the maximum number from the two input numbers \nlet x = 15;\nlet y = 25;\nlet maxNum = Math.max(x, y);\nconsole.log(maxNum); // Output: 25", "label": 1}
{"text": "def check_sign(num):\n  if num > 0:\n    print(\"Positive\")\n  elif num < 0:\n    print(\"Negative\")\n  else:\n    print(\"Zero\")", "label": 1}
{"text": "A function in JavaScript is a block of code that is delimited by curly brackets and is designed to perform a specific task. It consists of a function declaration, which includes the function name and its parameters, and a function body containing the code that is to be executed when the function is called. The function can return a value and can be either named or anonymous. Functions can also accept arguments and can be used to create objects and closures.", "label": 1}
{"text": "A Hash Table (also known as Hash Map) is a data structure in C++ which uses a hash function to map keys to values. It can be used to store, add, and remove elements in constant time and is often used for caches and associative arrays.", "label": 1}
{"text": "import mysql.connector \n\ndef db_connect():\n    conn = mysql.connector.connect(\n        user='user_name',\n        password='password',\n        host='localhost',\n        database='database_name'\n    )\n    return conn\n \n# Main \nif __name__ == '__main__':\n    conn = db_connect()\n    print(conn)", "label": 1}
{"text": "The recursive code uses a recursive call to loop through each value from num to 0, while the iterative code uses a for-loop to add up from 1 to num.", "label": 1}
{"text": "[4, 2]", "label": 1}
{"text": "CREATE TABLE Users (\n  UserId INT NOT NULL, \n  Username VARCHAR(255) NOT NULL,\n  PRIMARY KEY (UserId)\n);", "label": 1}
{"text": "function sqr(x) {\n  return Math.sqrt(x);\n}", "label": 1}
{"text": "function minNum(a, b, c) {\n  let min = a;\n  if (b < min) {\n    min = b;\n  }\n  if (c < min) {\n    min = c;\n  }\n  return min;\n}", "label": 1}
{"text": "Math.floor(Math.random()*10000000000);", "label": 1}
{"text": "<table>\n  <tbody>\n    <tr>\n      <td>2</td>\n      <td>3</td>\n      <td>4</td>\n      <td>5</td>\n      <td>6</td>\n    </tr>\n  </tbody>\n</table>", "label": 1}
{"text": "function getMax(arr) { \n    let max = 0; \n    for(let i = 0; i < arr.length; i++) { \n        if(arr[i] > max) \n            max = arr[i]; \n    } \n    return max; \n}", "label": 1}
{"text": "def greet(name):\n    print('Hello', name)\ngreet('John')", "label": 1}
{"text": "import tensorflow as tf\n# Load the mnist data set\nmnist = tf.keras.datasets.mnist\n(x_train, y_train), (x_test, y_test) = mnist.load_data()\n# Normalize the input from 0-255 to 0-1\nx_train = tf.keras.utils.normalize(x_train, axis=1)\nx_test = tf.keras.utils.normalize(x_test, axis=1)\n# Build the model \nmodel = tf.keras.models.Sequential()\nmodel.add(tf.keras.layers.Flatten())\n# Add two hidden layers\nmodel.add(tf.keras.layers.Dense(128, activation=tf.nn.relu))\nmodel.add(tf.keras.layers.Dense(128, activation=tf.nn.relu))\n# Add the output layer\nmodel.add(tf.keras.layers.Dense(10, activation=tf.nn.softmax))\n# Compile the model\nmodel.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])\n# Train the model\nmodel.fit(x_train, y_train, epochs=3)\n# Evaluate the accuracy\nval_loss, val_acc = model.evaluate(x_test, y_test)\nprint(val_loss, val_acc)", "label": 1}
{"text": "function findElement(arr, element){\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === element) {\n      return true\n    }\n  }\n  return false;\n}", "label": 1}
{"text": "def add_numbers(a, b):\n    return a + b", "label": 1}
{"text": "#include <stdio.h>\n\nint factorial(int n) \n{ \n  int i, fact = 1; \n  \n  // handles cases greater than 1\n  if (n > 1) { \n    for (i = 2; i <= n; i++) \n      fact = fact * i; \n  } \n  return fact; \n} \n\nint main() \n{ \n  printf(\"The factorial of 5 is %d\", factorial(5)); \n  return 0; \n}", "label": 1}
{"text": "SELECT TOP 1 * \nFROM Employees\nORDER BY Salary DESC", "label": 1}
{"text": "Negative sentiment.", "label": 1}
{"text": "[[\"key1\", \"value1\"], [\"key2\", \"value2\"]]", "label": 1}
{"text": "def mergeSort(myList): \n    if len(myList) >1: \n        mid = len(myList)//2 #Finding the mid of the array \n        L = myList[:mid] # Dividing the array elements  \n        R = myList[mid:] # into 2 halves \n  \n        mergeSort(L) # Sorting the first half \n        mergeSort(R) # Sorting the second half \n  \n        i = j = k = 0\n          \n        # Copy data to temp arrays L[] and R[] \n        while i < len(L) and j < len(R): \n            if L[i] < R[j]: \n                myList[k] = L[i] \n                i+= 1\n            else: \n                myList[k] = R[j] \n                j+= 1\n            k+= 1\n          \n        # Checking if any element was left \n        while i < len(L): \n            myList[k] = L[i] \n            i+= 1\n            k+= 1\n          \n        while j < len(R): \n            myList[k] = R[j] \n            j+= 1\n            k+= 1", "label": 1}
{"text": "db.collection.find({})", "label": 1}
{"text": "import requests\nfrom bs4 import BeautifulSoup\n\ndef get_links(url):\n    response = requests.get(url)\n    soup = BeautifulSoup(response.text, 'html.parser')\n    links = [link.get('href') for link in soup.find_all('a')]\n    return links\n\nif __name__ == '__main__':\n    print(get_links(url))", "label": 1}
{"text": "from collections import Counter\n\ndef get_letter_frequency(string):\n    counter = Counter(string)\n    for key, value in counter.items():\n        print(f'{key}: {value}')\n\nif __name__ == '__main__':\n    get_letter_frequency(string)", "label": 1}
{"text": "# no variables are assigned", "label": 1}
{"text": "condition ? do_something() : do_something_else();", "label": 1}
{"text": "<html>\n  <head>\n    <title>Sample Information</title>\n  </head>\n  <body>\n    <h2>Sample Information</h2>\n    <ul>\n      <li>Name: Sample Name</li>\n      <li>City: New Delhi</li>\n      <li>State: Delhi</li>\n    </ul>\n  </body>\n</html>", "label": 1}
{"text": "def generate_prime_numbers(n): \n    primes = [] \n    for num in range(2, n + 1): \n        is_prime = True\n        for i in range(2, num): \n            if (num % i == 0): \n                is_prime = False\n        if is_prime: \n            primes.append(num) \n    return primes", "label": 1}
{"text": "x = \"10\" \ny = int(x)", "label": 1}
{"text": "x = 0\nif (condition):\n    x += 1", "label": 1}
{"text": "def even_numbers():\n    i = 0\n    while True:\n        if i % 2 == 0:\n            yield i\n        i += 1", "label": 1}
{"text": "my_list = [4, 8, 15, 16, 23, 42]\ndel my_list[-1]\nprint(my_list) # prints [4, 8, 15, 16, 23]", "label": 1}
{"text": "var str = \"racecar\";\n\nfunction isPalindrome(str) {\n  return str == str.split('').reverse().join('');\n}\n\nconsole.log(isPalindrome(str)); // Outputs true", "label": 1}
{"text": "int a = 5;\nint b = 3;\n\nint temp = a;\na = b;\nb = temp;\n\nSystem.out.println(\"a is: \" + a); // Outputs 3\nSystem.out.println(\"b is: \" + b); // Outputs 5", "label": 1}
{"text": "start = 5\nend = 20\n\nfor num in range(start, end+1): \n    if num % 2 != 0: \n        print(num, end = ' ')\n\n# Outputs 5 7 9 11 13 15 17 19", "label": 1}
{"text": "const evenNumbers = arr => arr.filter(num => num % 2 == 0);\n\nconsole.log(evenNumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));", "label": 1}
{"text": "String firstName;", "label": 1}
{"text": "([a-zA-Z0\u20139_.+-]+@[a-zA-Z0\u20139-]+\\.[a-zA-Z0\u20139-.]+)", "label": 1}
{"text": "{\n    \"items\": [\"item1\", \"item2\", \"item3\", \"item4\", \"item5\", \"item6\", \"item7\"]\n}", "label": 1}
{"text": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct HashTable {\n    int key;\n    int value;\n} h[5];\n\nvoid main()\n{\n    for (int i = 0; i < 5; i++) {\n        h[i].key = i;\n        h[i].value = i * i;\n    }\n \n    for (int i = 0; i < 5 ; i++)\n        printf(\"%d  %d\\n\", h[i].key,  h[i].value);\n}", "label": 1}
{"text": "element.focus();\nelement.setSelectionRange(element.value.length, element.value.length);", "label": 1}
{"text": "SELECT * FROM customers WHERE name LIKE 'John%';", "label": 1}
{"text": "SELECT * FROM products WHERE price < 10;", "label": 1}
{"text": "def reverse_string(string):\n    return string[::-1]", "label": 1}
{"text": "def sort_alphabetically(list1):\n    list1.sort()\n    return list1\n\nprint(sort_alphabetically(list1))", "label": 1}
{"text": "df.drop_duplicates()", "label": 1}
{"text": "class BankAccount:\n    def __init__(self, customer_name, account_number, balance):\n        self.customer_name = customer_name\n        self.account_number = account_number\n        self.balance = balance\n\n    def display_balance(self):\n        print('Your balance is', self.balance)\n\n    def withdraw_amount(self, amount):\n        self.balance -= amount\n        print('You withdrew', amount, 'from your account.')\n\n    def deposit_amount(self, amount):\n        self.balance += amount\n        print('You deposited', amount, 'into your account.')\n\n    def transfer_amount(self, target_account, amount):\n        self.balance -= amount\n        target_account.balance += amount\n        print('You transferred', amount, 'to the account', target_account.account_number)", "label": 1}
{"text": "<html>\n  <head>\n    <title>Login</title>\n  </head>\n  <body>\n    <h1>Login</h1>\n    <form action=\"\">\n      <label for=\"username\">Username:</label>\n      <input type=\"text\" name=\"username\" id=\"username\" />\n      <label for=\"password\">Password:</label>\n      <input type=\"password\" name=\"password\" id=\"password\" />\n      <input type=\"submit\" value=\"Login\" />\n    </form>\n  </body>\n</html>", "label": 1}
{"text": ".main {\n  display: block;\n}", "label": 1}
{"text": "SELECT o.owner_name, o.pet_name\nFROM Owners o", "label": 1}
{"text": "new_list = [\"A\", \"B\", \"C\", 1, 2, 3]", "label": 1}
{"text": "person = {\n    \"name\": \"John\",\n    \"age\": 18,\n    \"hobby\": \"reading\"\n}", "label": 1}
{"text": "def convertStringToInt(string): \n    convertValue = int(string) \n    return convertValue", "label": 1}
{"text": "def max_pairwise_product(nums):\n  max_product = 0\n  for i in range(len(nums)):\n      for j in range(i+1,len(nums)):\n          max_product = max(max_product, nums[i] * nums[j])\n  return max_product", "label": 1}
{"text": "def fibonacci(n):\n    a = 0\n    b = 1\n    if n==1:\n        print(a)\n    else:\n        print(a)\n        print(b)\n        for i in range(2,n):\n            c=a+b\n            a=b\n            b=c\n            print(b)", "label": 1}
{"text": "for i in range(1, n+1): \n  for j in range(1,i+1): \n    print(\"* \", end=\"\")  \n  print(\"\\r\")", "label": 1}
{"text": "Overfitting is a phenomenon in which a machine learning model performs better on training data than on new data. This occurs when a model is excessively complex and able to learn the underlying noise of the training data. As a result, the model doesn\u2019t generalize well on previously unseen data and does not perform as expected. Overfitting is typically the result of the model having too many features or parameters relative to the amount of training data available.", "label": 1}
{"text": "public class LinkedListCloneExample {\n\n    static Node head;\n\n    static class Node {\n        int data;\n        Node next;\n\n        Node(int d) {\n            this.data = d;\n            this.next = null;\n        }\n    }\n\n    static Node CloneList(Node node) { \n        Node curr = node; \n        Node next = null; \n        Node temp = null; \n\n        while (curr != null) { \n            next = curr.next; \n\n            // Cloned node \n            temp = new Node(curr.data); \n\n            // Inserting the cloned node \n            // just next to the original node. \n            temp.next = next; \n            curr.next = temp; \n\n            curr = next; \n        } \n\n        // Adjusting the original list \n        // to get the cloned list. \n        curr = node; \n        while (curr != null) { \n            next = curr.next; \n\n            // Just adapting the original \n            // list to the cloned list. \n            curr.next = next.next; \n\n            curr = next.next; \n        } \n\n        return node; \n    } \n    \n    static void printList(Node node) { \n        while (node != null) { \n            System.out.print(node.data + \" \"); \n            node = node.next; \n        } \n    } \n\n    public static void main(String[] args) { \n        head = new Node(1); \n        head.next = new Node(2); \n        head.next.next = new Node(3); \n        head.next.next.next = new Node(4); \n  \n        System.out.println(\"Linked List original: \"); \n        printList(head); \n  \n        System.out.println(\"\\nCloned Linked List: \"); \n        Node cloned_list = CloneList(head); \n        printList(cloned_list); \n    }", "label": 1}
{"text": "CREATE TABLE users (\n    user_id INT NOT NULL AUTO_INCREMENT,\n    name VARCHAR(255),\n    email VARCHAR(255),\n    age INT,\n    PRIMARY KEY (user_id)\n);", "label": 1}
{"text": "def convert_list_keys(list_of_data):\n    key_dict = {}\n    for item in list_of_data:\n        key_dict[item[0]] = item\n    return key_dict", "label": 1}
{"text": "/http[s]?:\\/\\/(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+/", "label": 1}
{"text": "@keyframes bounce {\n 0%, 20%, 50%, 80%, 100% {\n  transform: translateY(0);\n }\n 40% {\n  transform: translateY(-50px);\n }\n 60% {\n  transform: translateY(-45px);\n }\n}\n\n.ball {\n animation: bounce 1s ease infinite;\n}", "label": 1}
{"text": "SELECT MAX(salary) \nFROM employees;", "label": 1}
{"text": "const employeeList = [\n  {\n    \"firstName\": \"John\",\n    \"lastName\": \"Doe\",\n    \"age\": 28\n  },\n  {\n    \"firstName\": \"Alice\",\n    \"lastName\": \"Smith\",\n    \"age\": 33\n  },\n  {\n    \"firstName\": \"Dave\",\n    \"lastName\": \"Moore\",\n    \"age\": 42\n  }\n];\n\nconst secondEmployeeFirstName = employeeList[1].firstName; // Alice", "label": 1}
{"text": "# Function which takes variable arguments\ndef add_lists(*args):\n\n    # Check if all arguments are lists\n    for arg in args:\n        if not isinstance(arg, list):\n            return \"All the arguments should be a list.\"\n\n    # Add all items of the lists\n    result = 0\n    for lst in args:\n        # Iterate each item in the list\n        for item in lst:\n            result += item\n    return result\n\n# Example\nmy_lists = [[1,2,3], [4,5], [6,7,8]]\nprint(add_lists(*my_lists))\n# Output: 36", "label": 1}
{"text": "def recursive_multiply(x, n):\n\t# Base case\n    if n == 0:\n        return 1\n    return x * recursive_multiply(x, n - 1)\n\n# Example\nx = 4\nn = 3\nprint(recursive_multiply(x, n))\n# Output: 64", "label": 1}
{"text": "dct = {}\nfor i in range(1, 16):\n dct[i] = i**2\n\nprint(dct)", "label": 1}
{"text": "function getDaysInMonth(month) {\n  return new Date(2020, month + 1, 0).getDate();\n}\n\nif (typeof module != 'undefined') {\n  module.exports = getDaysInMonth;\n}", "label": 1}
{"text": "An abstract data type is a type of data that is more a collection of related data rather than a particular type of data. An abstract data type allows the user to define a new data type with the desired properties and operations. For example, a stack is an abstract data type that is composed of a collection of items that can be stored and retrieved in a LIFO (last in, first out) manner. An example of implementing a stack as an abstract data type in C++ would be: \n\n#include <iostream>\n#include <stack>\n\nusing namespace std;\n\n// Create an empty stack \nstack<int> s;\n\n// Push items onto the stack\ns.push(10);\ns.push(20);\ns.push(30);\n\n// Pop items from stack\ncout << s.top() << endl;\ns.pop();\ncout << s.top() << endl;\ns.pop();\ncout << s.top() << endl;\ns.pop();\n\nreturn 0;", "label": 1}
{"text": "<!DOCTYPE html>\n<html>\n    <head>\n        <title>Sum of Two Numbers</title>\n        <script>\n            // get numbers from user\n            var a = prompt(\"Enter the first number\");\n            var b = prompt(\"Enter the second number\");\n            // calculate the sum \n            var sum = +a + +b;\n            // print the result\n            document.write(\"Result : \" +sum);\n        </script>\n    </head>\n    <body>\n    </body>\n</html>", "label": 1}
{"text": "#!/bin/bash\n\nnumber1=2\nnumber2=2\n\nsum=$(($number1 + $number2))\n\necho \"The sum is: $sum\"", "label": 1}
{"text": "print(lambda x: x%5 == 0, \"is divisible by 5.\")", "label": 1}
{"text": "IF EXIST \"Temp\" (\n\nECHO Folder exists\n\n) ELSE (\n\nECHO Folder does not exist\n\n)", "label": 1}
{"text": "CREATE VIEW averageMonthlyIncome AS\nSELECT workerid, MONTH(month) AS Month, AVG(income) AS avg_income\nFROM Table\nGROUP BY workerid, MONTH(month);", "label": 1}
{"text": "List<Integer> list = Arrays.asList(5, 2, 8, 1);\n\nCollections.sort(list);", "label": 1}
{"text": "element {\n  text-decoration: underline;\n}", "label": 1}
{"text": "let currentDate = new Date(); \nconsole.log(currentDate);", "label": 1}
{"text": "def spiral_traverse(arr):\n res = []\n top_row, bottom_row = 0, len(arr) - 1\n left_col, right_col = 0, len(arr[0]) - 1\n \n while top_row <= bottom_row and left_col <= right_col:\n  for i in range(left_col, right_col + 1):\n   res.append(arr[top_row][i])\n  top_row += 1\n \n  for i in range(top_row, bottom_row + 1):\n   res.append(arr[i][right_col])\n  right_col -= 1\n \n  for i in range(right_col, left_col - 1, -1):\n   res.append(arr[bottom_row][i])\n  bottom_row -= 1\n \n  for i in range(bottom_row, top_row - 1, -1):\n   res.append(arr[i][left_col])\n  left_col += 1\n \n return res\n\nprint(spiral_traverse(matrix))", "label": 1}
{"text": "public class PrimeFinder {\n \n    public static void main(String[] args) { \n        int count = 0;\n        int num = 1;\n \n        while(count < 5) {\n            num = num + 1;\n            if (isPrime(num)) {\n                System.out.println(num);\n                count++;\n            }\n        }\n    }\n \n    public static boolean isPrime(int n) {\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "label": 1}
{"text": "h1 {\n  font-size: 3rem;\n  font-weight: bold;\n  color: #9100ff;\n}", "label": 1}
{"text": "import java.util.Scanner;\n \npublic class Calculator {\n    public static void main(String[] args) {\n        int number1, number2;\n        char operation;\n        double result;\n \n        Scanner scanner = new Scanner(System.in);\n \n        System.out.print(\"Enter number 1: \");\n        number1 = scanner.nextInt();\n \n        System.out.print(\"Enter number 2: \");\n        number2 = scanner.nextInt();\n \n        System.out.print(\"Choose operation (+, -, *, /): \");\n        operation = scanner.next().charAt(0);\n \n        switch(operation) {\n            case '+':\n                result = number1 + number2;\n                break;\n            case '-':\n                result = number1 - number2;\n                break;\n            case '*':\n                result = number1 * number2;\n                break;\n            case '/':\n                result = (double) number1 / number2;\n                break;\n            default:\n                System.out.println(\"Invalid operation!\");\n                return;\n        }\n \n        System.out.println(\"Result: \" + result);\n    }\n}", "label": 1}
{"text": "def remove_second_largest(arr): \n    max_arr = max(arr) \n    arr.remove(max_arr) \n    return max(arr)", "label": 1}
{"text": "def print_squares():\n    for i in range(1, 11):\n        print(i**2)", "label": 1}
{"text": "def print_in_spiral_order(arr):\n    row_start = 0\n    row_stop = len(arr) - 1\n    col_start = 0 \n    col_stop = len(arr[0]) - 1\n    while row_start <= row_stop and col_start <= col_stop:\n        for i in range(col_start, col_stop + 1):\n            print(arr[row_start][i], end=' ')\n        row_start += 1\n        for i in range(row_start, row_stop + 1):\n            print(arr[i][col_stop], end=' ')\n        col_stop -= 1\n        if row_start <= row_stop:\n            for i in range(col_stop, col_start - 1, -1):\n                print(arr[row_stop][i], end=' ')\n        row_stop -= 1\n        if col_start <= col_stop:\n            for i in range(row_stop, row_start - 1, -1):\n                print(arr[i][col_start], end=' ')\n        col_start += 1", "label": 1}
{"text": "import random\n\ndef generate_string(vowels,consonants,digits):\n    s = ''\n    for _ in range(vowels):\n        s+=random.choice('aeiou')\n    for _ in range(consonants):\n        s+=random.choice('bcdfghjklmnpqrstvwxyz')\n    for _ in range(digits):\n        s+=str(random.randint(0,9))\n    return s\n\nprint(generate_string(2,3,5))", "label": 1}
{"text": "public class Main {\n  public static void main(String[] args) {\n    int[] arr = {3, 8, 4, 16, 1, 7};\n    int sum = 0;\n    int largest1 = arr[0];\n    int largest2 = 0;\n    int largest3 = 0;\n    for (int i = 1; i < arr.length; i++) {\n      if (arr[i] > largest1) {\n        largest3 = largest2;\n        largest2 = largest1;\n        largest1 = arr[i];\n      } else if (arr[i] > largest2) {\n        largest3 = largest2;\n        largest2 = arr[i];\n      } else if (arr[i] > largest3) {\n[        largest3 = arr[i];\n      }\n    }\n    sum = largest1 + largest2 + largest3;\n    System.out.println(\"The sum of the three largest values is: \" + sum);\n  }\n}", "label": 1}
{"text": "technology", "label": 1}
{"text": "class Node {\n  public:\n    int data;\n    Node *left;\n    Node *right;\n    Node(int d) {\n        data = d;\n        left = NULL;\n        right = NULL;\n    }\n};\n\nclass BinaryTree {\n  public:\n    Node *root;\n    BinaryTree() {\n        root = NULL;\n    }\n};", "label": 1}
{"text": "SELECT * \nFROM students \nWHERE marks > 25;", "label": 1}
{"text": "public class Fibonacci {\n    public static void main(String args[]) {\n        int n = 10;\n        int a = 0, b = 1, c;\n        if (n == 1)\n            System.out.println(\"Fibonacci of \" + n + \" is \" + a);\n        else {\n            for (int i = 2; i <= n; i++) {\n                c = a + b;\n                a = b;\n                b = c;\n            }\n            System.out.println(\"Fibonacci of \" + n + \" is \" + b);\n        }\n    }\n}", "label": 1}
{"text": "^.*start.*end.*here.*$", "label": 1}
{"text": "rev_string <- function(string) \n{\n    rev_string <- paste(rev(strsplit(string, \"\")[[1]]), sep = \"\")\n    return(rev_string)\n}", "label": 1}
{"text": "gcc -o output a.c\n./output", "label": 1}
{"text": "Unsupervised machine learning methods can be used to classify the given dataset by applying clustering algorithms. Clustering algorithms group objects which are similar to each other into clusters, while also attempting to keep the clusters distinct from each other. A clustering algorithm could be used to group the given dataset together and form distinct clusters. Each cluster would represent a distinct group, and each group would have a distinct set of characteristics. For example, the algorithm could group A, B, and C into one cluster, thus showing that each entry in the dataset has similar characteristics.", "label": 1}
{"text": "#include <iostream>\n\nint main()\n{\n int a, b, product;\n std::cout<<\"Enter two integers: \";\n std::cin>>a>>b;\n product = a*b;\n std::cout<<\"The product of the two numbers is \"<<product;\n\n return 0;\n}", "label": 1}
{"text": "sum <- 0\n\nfor(i in list){\n  sum <- sum + i\n}\n\nprint(sum)\n\n# Output: 15", "label": 1}
{"text": "The stack is a data structure which stores data in a Last In First Out (LIFO) manner. It is used in programming for various operations such as function calls, expression evaluation, storing local variables, and peripheral operations such as undo or redo. The stack is an area of memory in which programs temporarily store data as they execute.", "label": 1}
{"text": "for num in range(1,51): \n    if num % 3 == 0 and num % 5 == 0: \n        print(\"FizzBuzz\") \n    elif num % 3 == 0: \n        print(\"Fizz\") \n    elif num % 5 == 0: \n        print(\"Buzz\") \n    else: \n        print(num)", "label": 1}
{"text": "#include <iostream> \nusing namespace std; \n  \n// Dimensions of matrices \n#define M 3 \n#define N 3 \n  \n// Function to add two matrices \nvoid addMatrices(int A[][N], int B[][N], int C[][N]) \n{ \n    int i, j; \n    for (i = 0; i < M; i++) \n        for (j = 0; j < N; j++) \n            C[i][j] = A[i][j] + B[i][j]; \n}", "label": 1}
{"text": "\"\"\"\nConstruct a Fibonacci Heap class\n\"\"\"\n\nclass FibonacciHeap:\n    def __init__(self):\n        self.min = None\n        self.nodes = []\n    \n    def insert(self, node):\n        self.nodes.append(node)\n        if self.min is None or node.key < self.min.key:\n            self.min = node\n    \n    def extract_min(self):\n        min_node = self.min\n        self.min = None\n        return min_node \n\nif __name__ == '__main__':\n    heap = FibonacciHeap()\n    node1 = Node(3)\n    node2 = Node(10)\n    heap.insert(node1)\n    heap.insert(node2)\n    print(heap.extract_min().data) # prints 3", "label": 1}
{"text": "# Program to determine whether a number is prime or composite\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\nnumber = int(input(\"Enter a number: \"))\nif is_prime(number):\n    print(f\"{number} is a prime number.\")\nelse:\n    print(f\"{number} is a composite number.\")", "label": 1}
{"text": "first_num = 4\nsecond_num = 2\n\n# Program to subtract two numbers\ndiff = first_num - second_num\n\nprint(f\"The difference between {first_num} and {second_num} is {diff}.\")", "label": 1}
{"text": "The: article\ncat: noun\nran: verb\nquickly: adverb\nacross: preposition\nthe: article\nstreet: noun", "label": 1}
{"text": "my_dict = {\"name\": \"John\", \"age\": 25}", "label": 1}
{"text": "numbers = []\ni = 0\nwhile i <= 10:\n    numbers.append(i)\n    i += 1", "label": 1}
{"text": "The mathematical expression for calculating the next fibonacci number from any number is F(n+1)=F(n)+F(n-1) where n is the number for which we want to calculate the next fibonacci number.", "label": 1}
{"text": "def binary_to_decimal(binary): \n    decimal = 0\n    base = 1\n    binary = str(binary)\n    length = len(binary) \n    for i in range(length-1, -1, -1): \n        if (binary[i] == '1'):      \n            decimal += base\n        base = base * 2\n    return decimal", "label": 1}
{"text": "def trim_whitespace(str):\n    return str.strip()\n\nprint(trim_whitespace(str))", "label": 1}
{"text": "import base64\n\ndef encode_base64(string):\n    \"\"\"Encode the given string using the Base64 algorithm\"\"\"\n    byte_string = string.encode('utf-8')\n    return base64.b64encode(byte_string).decode('utf-8')", "label": 1}
{"text": "This is an implicit variable initialization.", "label": 1}
{"text": "def has_duplicates(arr):\n    \"\"\"Check if an array contains any duplicate elements.\"\"\"\n    return len(arr) != len(set(arr))", "label": 1}
{"text": "import time\n\ndef timestamp_to_iso8601(timestamp):\n    \"\"\"Convert the given timestamp to ISO 8601 format\"\"\"\n    return time.strftime('%Y-%m-%dT%H:%M:%SZ', time.localtime(timestamp))", "label": 1}
{"text": "\"\"\"Object-oriented Python program to simulate a simple calculator with add, subtract and multiply function\"\"\"\n\n# create a class Calculator\nclass Calculator:\n\n    def add(self, x, y):\n        return x + y\n\n    def subtract(self, x, y):\n        return x - y\n\n    def multiply(self, x, y):\n        return x * y\n\n# create an instance of class Calculator\ncalc = Calculator()\n\n# call the add, subtract and multiply functions \nprint(calc.add(5,5))\nprint(calc.subtract(5,5))\nprint(calc.multiply(5,5))", "label": 1}
{"text": "arr = [5, 20, 15]\n\ntotal = 0\nfor num in arr:\n    total += num\n\nprint(total) # Output: 40", "label": 1}
{"text": "def reverse_words(sentence):\n    words = sentence.split(' ')\n    reversed_words = [word[::-1] for word in words]\n    return ' '.join(reversed_words)\n    \nprint(reverse_words('This is a sentence')) # Output: sihT si a ecnetnes", "label": 1}
{"text": "SELECT * FROM employees WHERE fname = 'John';", "label": 1}
{"text": "def find_pairs(nums, sum):\n  result = []\n  for i in range(len(nums)):\n    for j in range(i+1, len(nums)):\n      if nums[i] + nums[j] == sum:\n        result.append((nums[i], nums[j]))\n  return result\n\nres = find_pairs(nums, sum)\nprint(res)\n# Output: [(2, 6), (3, 5)]", "label": 1}
{"text": "int max = Math.max(a, Math.max(b, c));\nSystem.out.println(\"Maximum of the three numbers is: \"+max);", "label": 1}
{"text": "var data = {\n  \"name\": \"John\",\n  \"age\": 30\n};\n \nvar jsonData = JSON.parse(data);\n \nconsole.log(jsonData);", "label": 1}
{"text": "<html>\n<head>\n  <title>My Web Page</title>\n</head>\n<body>\n  <h1>Welcome to My Web Page</h1>\n  <p>This is my first web page.</p>\n</body>\n</html>", "label": 1}
{"text": "for i in range(3):\n    for j in range(3):\n        print('*', end=' ')\n    print()", "label": 1}
{"text": "SELECT * FROM Students\nWHERE test_score > 80", "label": 1}
{"text": "def replace_substrings(main_string, start_substring, end_substring):\n    start_index = main_string.index(start_substring)\n    end_index = main_string.index(end_substring) + len(end_substring)\n    return main_string[:start_index] + \"this string\" + main_string[end_index:]", "label": 1}
{"text": "color: #000000;", "label": 1}
{"text": "SELECT * \nFROM table \nORDER BY column_name DESC \nLIMIT 3;", "label": 1}
{"text": "my_list = list(my_dict.values())\nprint(my_list)\n# Output: [\"John\", 21, \"Delhi\"]", "label": 1}
{"text": "counter = 0\n\nfor i in range(10):\n  print(i)\n  counter += 1\n\nprint(f\"Number of iterations: {counter}\")", "label": 1}
{"text": "const request = new XMLHttpRequest(); \nrequest.open('GET', 'https://example.com/data.json'); \nrequest.onload = () => {\n    const data = JSON.parse(request.responseText); \n    // Handle response data \n};\nrequest.send();", "label": 1}
{"text": "# Python Program to calculate the product of two matrices \n\nA = [[2, 4], [3, 7]] \nB = [[9, 2], [7, 1]] \n  \n\n# function to calculate the product of two matrices \ndef multiplyMatrix(A, B): \n  \n    rowsA = len(A) \n    colsA = len(A[0]) \n    rowsB = len(B) \n    colsB = len(B[0]) \n  \n    if colsA != rowsB: \n        print(\"Cannot multiply the two matrices. Incorrect dimensions.\") \n        return\n  \n    # Create an empty product matrix C[rowA][colB] \n    C = [[0 for row in range(colsB)] for col in range(rowsA)] \n  \n    # Multiply and fill in the product matrix \n    for i in range(rowsA): \n        for j in range(colsB): \n            for k in range(colsA): \n                  C[i][j] += A[i][k] * B[k][j] \n  \n    return C \n  \n  \n# Print the product \nresult = multiplyMatrix(A, B) \nfor r in result: \n    print(r)", "label": 1}
{"text": "#include <iostream> \nusing namespace std; \n\nint main() \n{ \n\tint ele, i, number[20]; \n\n\t//create the fibonacci series\n\tnumber[0] = 0; \n\tnumber[1] = 1; \n\n\tfor (i = 2; i < 20; i++) \n\t{\n\t\tnumber[i] = number[i-1] + number[i-2]; \n\t} \n\n\t//print the fibonacci series\n\tfor (i = 0; i < 20; i++) \n\t{\n\t\tcout << number[i] << \" \"; \n\t} \n\n\treturn 0; \n}", "label": 1}
{"text": "SELECT COUNT(DISTINCT(*) FROM table_name;", "label": 1}
{"text": "<input type=\"text\" id=\"name\" name=\"name\" onChange=\"validateName()\" />\n\n<script>\nfunction validateName() {\n  var name = document.getElementById(\"name\").value;\n  if (name.length < 5) {\n    alert(\"Name should contain at least 5 characters!\");\n  }\n}\n</script>", "label": 1}
{"text": "Index: 4", "label": 1}
{"text": "[[1, 0, 0], \n [0, 1, 0], \n [0, 0, 1]]", "label": 1}
{"text": "def reverse_list(lst): \n    reversed_list = [] \n    for i in range(len(lst) - 1, -1, -1): \n        reversed_list.append(lst[i]) \n    return reversed_list", "label": 1}
{"text": "import json\n\ndata = '{\"data\":[{\"name\":\"John\",\"age\":24},{\"name\":\"Bob\",\"age\":26}]}'\n\nparsed_data = json.loads(data)\n\nfor item in parsed_data['data']:\n  print(item['name'] + \" is \" + str(item['age']) + \"years old.\")", "label": 1}
{"text": "arr.sort(reverse=True)\nprint(arr)", "label": 1}
{"text": "day = int(input(\"Enter date in dd/mm/yyyy format: \").split('/')[0])\nmonth = int(input(\"Enter date in dd/mm/yyyy format: \").split('/')[1])\nyear = int(input(\"Enter date in dd/mm/yyyy format: \").split('/')[2])\n\n# Determine day name\nday_num = datetime(year, month, day).weekday()\ndays = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"]\nday_name = days[day_num]\n\nprint(\"The day is: \", day_name)", "label": 1}
{"text": "primes = []\nfor i in range(2, num+1):\n    is_prime = True\n    for j in range(2, int(i**0.5)+1):\n        if (i % j) == 0:\n            is_prime = False\n            break\n\n    if is_prime:\n        primes.append(i)\n\nprime_divisors = {i for i in primes if num % i == 0}\nprint(prime_divisors)", "label": 1}
{"text": "def rearrange(mylist): \n    mylist.sort() \n    length = len(mylist) \n    temp = [0]*(length + 1) \n       \n    # to store indexes of mylist[] \n    j, k = 0, length-1;\n       \n    # filling temp[] from both sides \n    for i in range(length): \n          \n        if i%2==0: \n            temp[i] = mylist[j] \n            j += 1\n        else: \n            temp[i] = mylist[k] \n            k -= 1\n       \n    # modify original array \n    for i in range(length): \n        mylist[i] = temp[i]\n    return mylist", "label": 1}
{"text": "<form method=\"post\">\n  <label>Name:</label><br>\n  <input type=\"text\" name=\"name\"><br>\n  <label>Address:</label><br>\n  <input type=\"text\" name=\"address\"><br>\n  <label>Favorite Color:</label><br>\n  <select name=\"favorite_color\">\n    <option value=\"red\">Red</option>\n    <option value=\"blue\">Blue</option>\n    <option value=\"green\">Green</option>\n    <option value=\"purple\">Purple</option>\n  </select><br><br>\n  <input type=\"submit\" value=\"Submit\">\n</form>", "label": 1}
{"text": "SELECT name FROM employees WHERE age >= 25;", "label": 1}
{"text": "<html>\n  <head>\n    <style>\n      p {\n        display: none;\n      }\n    </style>\n  </head>\n  <body>\n    <p>This paragraph is hidden.</p>\n    <p>This paragraph is also hidden.</p>\n  </body>\n</html>", "label": 1}
{"text": "function countA(str) {\n  let count = 0;\n  for (let i=0; i<str.length; i++) {\n    if (str[i] === 'a') {\n      count += 1;\n    }\n  }\n  return count;\n}", "label": 1}
{"text": "println(\"Hello, World!\")", "label": 1}
{"text": "#include <stdio.h>\n#include <stdlib.h>\n\nint main()\n{\n    int nums[] = {1,2,3,4};\n    int len = sizeof(nums) / sizeof(nums[0]);\n    int sum = 0;\n    double average = 0;\n\n    for(int i = 0; i < len; i++) {\n        sum += nums[i];\n    }\n\n    average = (double)sum / (double)len;\n\n    printf(\"The average is: %f\",average);\n    \n    return 0;\n}", "label": 1}
{"text": "List<Integer> someList = new ArrayList<>();\nfor (int i=0; i < someList.size(); i++) { \n    System.out.println(someList.get(i));\n}", "label": 1}
{"text": "p1 = Patient(\"John\", 45, \"Diabetes\", \"1234567890\")", "label": 1}
{"text": "122", "label": 1}
{"text": "6", "label": 1}
{"text": "<html>\n<head>\n  <title>Text to Speech</title>\n  <script src=\"https://code.responsivevoice.org/responsivevoice.js?key=KEY_HERE\"></script>\n</head>\n<body>\n  <textarea id=\"text-input\" rows=\"10\" cols=\"50\"></textarea><br>\n  <button type=\"button\" onclick=\"responsiveVoice.speak(document.getElementById('text-input').value)\">Speak</button>\n  <button type=\"button\" onclick=\"responsiveVoice.cancel()\">Stop</button>\n</body>\n</html>", "label": 1}
{"text": "let car = { \n    make:'', \n    model:'', \n    year:'', \n    color:'', \n    price:0 \n};", "label": 1}
{"text": "dog lazy the over jumps fox brown quick The", "label": 1}
{"text": "SELECT DISTINCT Name FROM table_name;", "label": 1}
{"text": "def printShape(num, shape, color):\n\tfor i in range(0, num):\n\t\tprint(color + shape)", "label": 1}
{"text": "def f(x):\n    k = x + 4\n    return k", "label": 1}
{"text": "function printFibonacci(n) {\n       let fibo = [0, 1];\n \n       if (n <= 2) {\n           return 1;\n       }\n \n       for (let i = 2; i <=n; i++ ){\n           fibo[i] = fibo[i-1]+fibo[i-2];\n       }\n \n      return fibo;\n } \n \n console.log(printFibonacci(n));", "label": 1}
{"text": "SELECT AVG(TIMESTAMPDIFF(YEAR, date_of_birth, CURRENT_DATE)) as average_age FROM people WHERE country = 'UK';", "label": 1}
{"text": "let people = [ \n  {name: 'John', age: 25},\n  {name: 'Jack', age: 28}\n]\n\nconsole.log(people)", "label": 1}
{"text": "class Rectangle:\n    def __init__(self, length, width):\n         self.length = length\n         self.width = width\n\n    def area(self):\n        return self.length * self.width", "label": 1}
{"text": "int randomNum = ThreadLocalRandom.current().nextInt(0, MAX_VALUE);", "label": 1}
{"text": "def split_sentence(sentence):\n    return sentence.split(' ')", "label": 1}
{"text": "echo \"Hello world!\"", "label": 1}
{"text": "[[1, 'a'], [1, 'b'], [2, 'a'], [2, 'b']]", "label": 1}
{"text": "for (int i = 0; i < arr.length; i++) { \n  // code to run for each element\n}", "label": 1}
{"text": "const employee = {\n  firstName: \"John\",\n  lastName: \"Doe\",\n  job: \"Engineer\",\n  salary: 5000\n};", "label": 1}
{"text": "function compareStrings($s1, $s2) {\n    if (strcmp($s1, $s2) == 0) {\n        return \"Strings are equal.\";\n    } \n    elseif (strlen($s1) > strlen($s2)) {\n        return \"String 1 is longer than String 2.\";\n    } \n    elseif (strlen($s2) > strlen($s1)) {\n        return \"String 2 is longer than String 1.\";\n    }\n    else {\n        return \"Strings are not equal.\";\n    }\n}", "label": 1}
{"text": "[3, 5, 6]", "label": 1}
{"text": "SELECT * FROM table\nWHERE timestamp BETWEEN '2020-02-10' AND '2020-02-15';", "label": 1}
{"text": "$(document).ready(function() {\n  $(\".member\").click(function() {\n    $(this).toggle();\n  });\n});", "label": 1}
{"text": "SELECT * \nFROM customers \nWHERE balance_due > 0;", "label": 1}
{"text": "<table border = \"1\">\n    <tr>\n        <th>Column1</th>\n        <th>Column2</th>\n        <th>Column3</th>\n    </tr>\n    <tr>\n        <td>Value1</td>\n        <td>Value2</td>\n        <td>Value3</td>\n    </tr>                    \n</table>", "label": 1}
{"text": "MATLAB is a domain-specific language.", "label": 1}
{"text": "def binary_search(data, search_num):\n low = 0\n high = len(data) - 1\n while low <= high:\n  mid = (low + high)//2\n  if data[mid] == search_num:\n   return mid\n  elif data[mid] < search_num:\n   low = mid + 1\n  else:\n   high = mid - 1\n return -1", "label": 1}
{"text": "The code can be refactored as follows: y = x+20 if x > 50 else x-", "label": 1}
{"text": "let sum = 0;\narr.forEach(function(el){\n    sum += el.num;\n});\nconsole.log(sum); // 70", "label": 1}
{"text": "for letter in \"abcdefghijklmnopqrstuvwxyz\":\n    print(letter)", "label": 1}
{"text": "b'hello world'", "label": 1}
{"text": "import xml.etree.ElementTree as et\n\nroot = et.fromstring(\"<doc><title>This is a title</title></doc>\")\ntitle = root.find('title')\nprint(title.text)", "label": 1}
{"text": "def double_array(array):\n    array[:] = [x * 2 for x in array]", "label": 1}
{"text": "list = [5, 4, 3, 2, 1]", "label": 1}
{"text": "CREATE TABLE users (\n    user_id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,\n    name VARCHAR(25) NOT NULL,\n    phone_number VARCHAR(15) NOT NULL,\n    address VARCHAR(255) NOT NULL\n);", "label": 1}
{"text": "def is_valid_bst(root):\n\n    def helper(node, lower_limit, upper_limit):\n        # base case\n        if not node:\n            return True\n        \n        val = node.val\n        if val <= lower_limit or val >= upper_limit:\n            return False\n\n        if not helper(node.right, val, upper_limit):\n            return False\n        if not helper(node.left, lower_limit, val):\n            return False\n        return True\n    \n    return helper(root, float('-inf'), float('inf'))\n\nif __name__ == '__main__':\n    # Assume a binary tree is defined\n    root = Node().root\n    result = is_valid_bst(root)\n    print(result)", "label": 1}
{"text": "<table>\n  <tr>\n    <td>Text 1</td>\n    <td>Text 2</td>\n    <td>Text 3</td>\n  </tr>\n  <tr>\n    <td>Text 4</td>\n    <td>Text 5</td>\n    <td>Text 6</td>\n  </tr>\n  <tr>\n    <td>Text 7</td>\n    <td>Text 8</td>\n    <td>Text 9</td>\n  </tr>\n</table>", "label": 1}
{"text": "def sum_of_even_numbers(n):\n    result = 0\n    for i in range(0, n + 1):\n        if i % 2 == 0:\n            result += i\n    \n    return result", "label": 1}
{"text": "def remove_special_characters(string):\n    new_string = \"\"\n    for char in string:\n        if char.isalpha() or char.isdigit() or char==\" \":\n            new_string += char\n    return new_string", "label": 1}
{"text": "def largest_string(array):\n   largest_string=array[0]\n   for i in array:\n      if len(i) > len(largest_string):\n         largest_string = i\n   return largest_string", "label": 1}
{"text": "for item in my_list:\n    # do something with the item", "label": 1}
{"text": "def postorder_traverse(root):\n\n  if root == null:\n    return\n\n  postorder_traverse(root.left)\n  postorder_traverse(root.right)\n  print(root.value)", "label": 1}
{"text": "import requests\n\ncity = \"Bangalore\"\nurl = f\"http://api.openweathermap.org/data/2.5/weather?q={city}&appid=your_api_key\"\n\n# Fetching the JSON data\nresponse = requests.get(url)\ndata = response.json()\n \n# Get the main weather data\nweather_data = data[\"main\"]\n \n# Obtain the current temperature \ntemp = weather_data[\"temp\"]\n \nprint(f\"The current temperature in {city} is {temp} degrees Celsius.\")", "label": 1}
{"text": "class Person {\n   string name; \n   int age; \npublic:\n   Person(string n, int a) {\n      name = n;\n      age = a;\n   }\n};", "label": 1}
{"text": "def hello_world():\n    return \"Hello World!\"", "label": 1}
{"text": "word_list = [\"Hi,\", \"how\", \"are\", \"you\", \"doing?\"]", "label": 1}
{"text": "my_string = \"Hello World!\"\nmy_string = my_string[::-1]  # slice the string from start to finish in reverse order", "label": 1}
{"text": "def multiply(a, b):\n  return a * b", "label": 1}
{"text": "def print_strings_reverse(string1, string2)\n  puts string2\n  puts string1\nend", "label": 1}
{"text": "db.collection.find({ date: new Date().toISOString().split('T')[0] })", "label": 1}
{"text": "MongoDB and Redis are two of the most popular NoSQL databases. MongoDB is a document-oriented database, while Redis is an open-source in-memory data structure store. MongoDB is known for its scalability and flexible query language whereas Redis is best-suited for caching and real-time applications. MongoDB is best for storing structured, semi-structured and unstructured data, and Redis is used primarily for rapid data manipulation and retrieval of data stored in the key-value store. MongoDB offers an ACID (Atomicity, Consistency, Isolation, and Durability) compliant system with multi-document transactions, while Redis primarily has single-document atomic operations. MongoDB is best for structured or semi-structured data, while Redis is best for caching and real-time applications that require fast data access.", "label": 1}
{"text": "The following code creates a new list from the given list by squaring each element using a list comprehension: new_list = [el**2 for el in original_list]", "label": 1}
{"text": "for i in range(len(array)):\n    for j in range(len(array[i])):\n        print(array[i][j])", "label": 1}
{"text": "45", "label": 1}
{"text": "def getMaxNumber():\n    numbers = []\n    \n    num = int(input(\"Enter how many numbers: \"))\n    \n    for i in range(num):\n        numbers.append(int(input(\"Enter a number: \")))\n        \n    maxNum = max(numbers)\n    print(\"The maximum number is\", maxNum)", "label": 1}
{"text": "c = list(set(a) - set(b))", "label": 1}
{"text": "import requests\n\nurl = \"http://example.com/api\"\n\nresponse = requests.get(url)\ndata = response.json()", "label": 1}
{"text": "Debugging an application in Python can be done using a variety of methods such as using a debugger like pdb, setting breakpoints, using logging, using the assert statement, etc. Additionally, tools like PyCharm and Visual Studio Code come with built-in debugging capabilities.", "label": 1}
{"text": "The result of running this code is that it prints each key-value pair in the object with key and value separated by a colon and a space, e.g, 'a: 1', 'b: 2', 'c: 3'.", "label": 1}
{"text": "The area of a circle with radius 2 is 12.566370614359172.", "label": 1}
{"text": "def multiply(x, y, z):\n  return x * y * z\n  \nprint(multiply(4, 3, 2)) //output 24", "label": 1}
{"text": "<?php \n\n$string1 = \"The quick brown fox jumps over the lazy dog\"; \n$string2 = \"The brown fox jumps quickly\"; \n\n// Create two arrays from the strings \n$arr1 = explode(\" \", $string1); \n$arr2 = explode(\" \", $string2); \n\n// Initialize a variable to store the count of common words \n$wordCount = 0; \n\n// Initialize a variable to store the count of common character \n$charCount = 0; \n\n// Iterate over the two arrays and count the common words\nfor ($i=0; $i < count($arr1); $i++) { \n\t// Compare the words at index $i of arrays \n\tfor ($j=0; $j < count($arr2); $j++) { \n\t\t\n\t\t// If the words match \n\t\tif ($arr1[$i] == $arr2[$j]) { \n\t\t\n\t\t\t// Count the words \n\t\t\t$wordCount++; \n\t\t\n\t\t\t// Iterate over the characters of words \n\t\t\tfor ($k=0; $k < strlen($arr1[$i]); $k++) { \n\t\t\n\t\t\t\t// Check the characters \n\t\t\t\tif ($arr1[$i][$k] == $arr2[$j][$k]) { \n\t\t\t\n\t\t\t\t\t// Count the characters \n\t\t\t\t\t$charCount++; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t} \n} \n\necho \"Common words: \".$wordCount; \necho \"\\nCommon characters: \".$charCount; \n\n?>", "label": 1}
{"text": "my_list = [x for x in range(1, 11)]  \nprint(my_list)", "label": 1}
{"text": "# Define a function to extract the required elements\ndef extract_last_elements(list, n): \n    # Get the length of list \n    l = len(list)    \n    # Check if n is negative or greater than length \n    if n <= 0 or n > l: \n        return [] \n  \n    # return the last n elements \n    return list[l - n:]\n\n# Driver code\nlist = [1, 2, 3, 4, 5]\nn = 3\nprint (extract_last_elements(list, n))", "label": 1}
{"text": "# Define the architecture\ndef model(input_shape):\n    model = tf.keras.Sequential([\n        tf.keras.layers.Flatten(input_shape=input_shape),\n        tf.keras.layers.Dense(128, activation='relu'),\n        tf.keras.layers.Dense(10, activation='softmax')\n    ]) \n    \n    model.compile(optimizer='adam',\n                  loss='sparse_categorical_crossentropy',\n                  metrics=['accuracy']) \n    \n    return model", "label": 1}
{"text": "import pandas as pd\nimport matplotlib.pyplot as plt \n\n# Read csv file \ndata = pd.read_csv('data.csv')  \n\n# Data visualization \nplt.plot(data) \nplt.xlabel('x-axis') \nplt.ylabel('y-axis')  \nplt.title('Plot of data')  \nplt.show()", "label": 1}
{"text": "SELECT *\nFROM customers\nWHERE country = 'US';", "label": 1}
{"text": "Sub add_numbers()\n   Dim sum As Integer\n   sum = 0\n   \n   For i = 1 To 10\n      sum = sum + i\n   Next\n   MsgBox (\"Sum of all numbers from 1 to 10 is : \" & sum)\nEnd Sub", "label": 1}
{"text": "for (let i = 1; i <= 10; i++) {\n   console.log(i); \n}", "label": 1}
{"text": "for ($i = 0; $i < 5; $i++) {\n    echo $array[$i] . \" \";\n}", "label": 1}
{"text": "int sum = 0; \nfor (int x : array) { \n    if (x % 2 == 0) \n        sum += x; \n} \nSystem.out.println(\"Sum of all even numbers = \" + sum);", "label": 1}
{"text": "\"\"\"\nA Python program to find the four letter words from a given list\n\"\"\"\n\n# Initializing the list \nwords = [\"tree\", \"door\", \"apple\", \"ball\", \"house\", \"cat\", \"wood\"] \n\n# Using list comprehension to extract four letter words \nfour_letter_words = [word for word in words if len(word) == 4] \n\n# Printing the four letter words \nprint(\"Four letter words:\", four_letter_words)", "label": 1}
{"text": "public class Person {\nString name;\nString email;\nString gender;\nint age;\n\npublic Person(String name, String email, String gender, int age) {\n  this.name = name;\n  this.email = email;\n  this.gender = gender;\n  this.age = age; \n}\n \npublic String getName() {\n  return name;\n}\n\npublic String getEmail() {\n  return email;\n}\n\npublic String getGender() {\n  return gender;\n}\n\npublic int getAge() {\n  return age;\n}\n\npublic void setName(String name) {\n  this.name = name;\n}\n \npublic void setEmail(String email) {\n  this.email = email;\n}\n \npublic void setGender(String gender) {\n  this.gender = gender;\n}\n\npublic void setAge(int age) {\n  this.age = age;\n}\n\n}", "label": 1}
{"text": "CREATE DATABASE myDB;\n\nUSE myDB;\n\nCREATE TABLE users (\n  id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,\n  name VARCHAR(50) NOT NULL,\n  email VARCHAR(50) NOT NULL\n);\n\nINSERT INTO users (name, email) VALUES \n  ('John Smith', 'john.smith@example.com'), \n  ('Jane Doe', 'jane.doe@example.com'),\n  ('Bob Jones', 'bob.jones@example.com');", "label": 1}
{"text": "def longest_common_substring(s1, s2): \n    m = [[0] * (1 + len(s2)) for i in range(1 + len(s1))]\n    longest, x_longest = 0, 0\n    for x in range(1, 1 + len(s1)):\n        for y in range(1, 1 + len(s2)):\n            if s1[x - 1] == s2[y - 1]:\n                m[x][y] = m[x - 1][y - 1] + 1\n                if m[x][y] > longest:\n                    longest = m[x][y]\n                    x_longest = x\n            else:\n                m[x][y] = 0\n    return s1[x_longest - longest: x_longest]", "label": 1}
{"text": "import datetime\n\n# Get the current datetime\nnow = datetime.datetime.now()\n\n# Prints the current datetime in YYYY-MM-DD HH:MM:SS format\nprint(now.strftime(\"%Y-%m-%d %H:%M:%S\"))", "label": 1}
{"text": "def compare_lists(list1, list2):\n    new_list = []\n    for element in list1:\n        if element in list2:\n            new_list.append(element)\n    return new_list\n    \n# Call the compare_lists()\nlist_common = compare_lists(list1, list2)\n\n# Print the new_list\nprint(list_common) # [3, 5]", "label": 1}
{"text": "# Finds the middle node in a linked list \n# Input: head of the linked list \n# Return: the middle element of the linked list \ndef findMiddleNode(head): \n\t# If the linked list is empty \n\tif (head is None): \n\t\treturn None\n\n\t# Find the length of the linked list \n\tlength, node = 0, head \n\twhile (node is not None): \n\t\tlength += 1\n\t\tnode = node.next\n\n\t# Jump to the middle of linked list \n\tnode = head \n\tfor _ in range(length // 2): \n\t\tnode = node.next\n\t\t\n\treturn mid", "label": 1}
{"text": "text = \"Hello! My name is John. What is your name?\"\n\nsentences = text.split(\". \")\nprint(sentences) # ['Hello! My name is John', 'What is your name?']", "label": 1}
{"text": "In Python, object-oriented programming is supported by classes which contain attributes that represent the characteristics of an object, and methods which represent the actions that an object can take. To implement a simple object-oriented concept in Python, we would first define a class that represents the type of object we wish to create. This class will contain attributes (i.e. data fields) that define the state of the object, as well as methods that define the behaviors of the object. Finally, we can create objects using the class definition, providing an initial state and access to the methods.", "label": 1}
{"text": "let binarySearch = (array, x) => {\n  let start = 0;\n  let end = array.length - 1;\n  \n  while (start <= end) {\n    let middle = Math.floor((start + end) / 2);\n    if (array[middle] === x) {\n      return middle;\n    } else if (x < array[middle]) {\n      end = middle - 1;\n    } else {\n      start = middle + 1;\n    }  \n  }\n  return -1;\n}", "label": 1}
{"text": "struct Point {\n    int x;\n    int y;\n};\n\nPoint operator+(Point p1, Point p2) {\n    Point result;\n    result.x = p1.x + p2.x;\n    result.y = p1.y + p2.y;\n    return result;\n}", "label": 1}
{"text": "CDIII", "label": 1}
{"text": "AJAX provides several advantages for a website. It allows for asynchronus data transfer between the server and the client, making it possible to update a web page without refreshing the whole page. It also improves the user experience by providing a faster, smoother interface. By minimizing server load, AJAX facilitates better scalability.\n\nOn the other hand, AJAX can lead to slower response times, especially if a large amount of data is being transferred. It can also be difficult to debug since errors are often not visible to the user or the developer. Additionally, AJAX requires JavaScript to be enabled, which may not be the case for all users.", "label": 1}
{"text": "SELECT name FROM customers WHERE age > 30;", "label": 1}
{"text": "public class SimpleStringReverser {\n    public static String reverse(String str) {\n        String result = \"\";\n        for(int i = str.length() - 1; i >= 0; i--) {\n            result += str.charAt(i);\n        }\n        return result;\n    }\n}", "label": 1}
{"text": "def longest_increasing_subsequence(arr):\n    n = len(arr)\n    lis = [1] * n \n  \n    for i in range (1 , n): \n        for j in range(0 , i): \n            if arr[i] > arr[j] and lis[i]< lis[j] + 1 : \n                lis[i] = lis[j]+1\n  \n    maximum = 0\n    for i in range(n): \n        maximum = max(maximum , lis[i]) \n  \n    return maximum", "label": 1}
{"text": "public static int[] bubbleSort(int[] array) {\n        int n = array.length;\n        for (int i = 0; i < n-1; i++) {\n            for (int j = 0; j < n-i-1; j++) {\n                if (array[j] > array[j+1]) {\n                    int temp = array[j];\n                    array[j] = array[j+1];\n                    array[j+1] = temp;\n                }\n            }\n        }\n        return array;\n    }", "label": 1}
{"text": "const MongoClient = require('mongodb').MongoClient;\n \n// Connection url\nconst url = 'mongodb://localhost:27017';\n// Database Name\nconst dbName = 'myproject';\n \n// Connect using MongoClient\nMongoClient.connect(url, function(err, client) {\n   // Create a collection we want to drop later\n   const col = client.db(dbName).collection('users');\n   // Insert a bunch of documents\n   col.find({}).toArray(function(err, docs) {\n      // Print the documents returned\n      console.log(\"Found the following records\");\n      console.log(docs)\n      // Close the DB\n      client.close();\n   });\n});", "label": 1}
{"text": "public class User { \n  private String name; \n  private String email; \n\n  //getters and setters\n  ...\n}\n\npublic class Post {\n  private int id;\n  private String title;\n  private User author;\n  private String content;\n\n  //getters and setters \n  ... \n}", "label": 1}
{"text": "def generate_report(data):\n    doc = PDFDocument()\n    title = doc.add_heading('Customer Report', 0)\n    doc.add_page_break()\n\n    table = doc.add_table(rows=1, cols=2)\n    table.style = 'TableGrid'\n    header_row = table.rows[0]\n    header_row.cells[0].text = 'Order ID'\n    header_row.cells[1].text = 'Amount'\n\n    rows = len(data)\n    for row in range(rows):\n        new_row = table.add_row()\n        new_row.cells[0].text = str(data[row][0])\n        new_row.cells[1].text = '{:.2f}'.format(data[row][1])\n\n    doc.add_page_break()\n    doc.save('Customer_Report.pdf')", "label": 1}
{"text": "DELETE FROM people WHERE age = 18;", "label": 1}
{"text": "SELECT product_name, price\nFROM products;", "label": 1}
{"text": "<!DOCTYPE html>\n<html>\n  <head>\n    <title>Sum Calculator</title>\n    <script>\n      function calculate() {\n        var num1 = Number(document.getElementById(\"num1\").value);\n        var num2 = Number(document.getElementById(\"num2\").value);\n        document.getElementById(\"output\").innerHTML = num1 + num2;\n      }\n    </script>\n  </head>\n  <body>\n    <h3>Sum Calculator</h3>\n    <input type=\"text\" id=\"num1\">\n    <input type=\"text\" id=\"num2\">\n    <button onclick=\"calculate()\"> Calculate </button>\n    <p>Result: <span id=\"output\"></span></p>\n  </body>\n</html>", "label": 1}
{"text": "@app.route('/delete/<int:user_id>', methods=['DELETE'])\ndef delete(user_id):\n   user = db.query.get(user_id)\n   db.session.delete(user)\n   db.session.commit()\n   return jsonify({'message':'User deleted successfully'})", "label": 1}
{"text": "^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$", "label": 1}
{"text": "json_obj = {\n  \"1\": {\n    \"name\": \"John\",\n    \"age\": 26\n  },\n  \"2\": {\n    \"name\": \"Kelly\",\n    \"age\": 23\n  }\n}\n \nname = json_obj[\"2\"][\"name\"]\nprint(name) # prints Kelly", "label": 1}
{"text": "SELECT * \nFROM Customer\nWHERE first_name LIKE \"A%\"", "label": 1}
{"text": "#include <iostream>\n\nint main() {\n int x, y;\n std::cin >> x >> y\n std::cout << x/y << std::endl;\n return 0;\n}", "label": 1}
{"text": "<form>\n    Name: <input type=\"text\" name=\"name\"><br>\n    Age:  <input type=\"text\" name=\"age\"><br>\n</form>", "label": 1}
{"text": "dictionary = {\"name\": \"John\", \"age\": 30}\n\ndef add_year(dictionary):\n    \"\"\"Add a new key-value pair (\"year\": 2020) to the dictionary\"\"\"\n    dictionary[\"year\"] = 2020\n    return dictionary\n\nif __name__ == '__main__':\n    dictionary = {\"name\": \"John\", \"age\": 30}\n    print(add_year(dictionary))", "label": 1}
{"text": "SELECT * FROM users ORDER BY age DESC;", "label": 1}
{"text": "def binary_list_to_int(binary_list):\n    return int(''.join(str(x) for x in binary_list), 2)", "label": 1}
{"text": "import random\n\ndef generate_addition_equation():\n\n    a = random.randrange(0, 6)\n    b = random.randrange(0, 6)\n\n    equation = str(a) + \" + \" + str(b) + \" = \"\n\n    return equation", "label": 1}
{"text": "def common_elements_of_two_lists(list1, list2): \n    result = [] \n    for element in list1: \n        if element in list2: \n            result.append(element) \n    return result", "label": 1}
{"text": "function logout() {\n  session_destroy();\n  header('Location:index.php');\n  exit;\n}", "label": 1}
{"text": "import java.util.*;\n\npublic class CountWords {\n  public static void main(String[] args) {\n    String str = \"This is a sample sentence.\";\n    int wordCount = 0;\n    for (int i = 0; i < str.length(); i++) {\n      if ((str.charAt(i) == ' ') || (str.charAt(i) == '.')) {\n        wordCount++;\n      }\n    }\n    System.out.println(\"The number of words in the given sentence is \" + (wordCount + 1));\n  }\n}", "label": 1}
{"text": "class RollingAverage {\n  private:\n    int windowSize;\n    int currentIndex;\n    double total;\n    std::vector<double> data;\n\n  public:\n    RollingAverage(int windowSize)\n        : windowSize(windowSize)\n        , currentIndex(0)\n        , total(0.0)\n        , data(windowSize) \n    { \n        for (int i = 0; i < windowSize; ++i) {\n            data.push_back(0.0);\n        }\n    }\n\n    void add(double value) {\n        int prevIndex = (currentIndex - 1 + windowSize) % windowSize;\n        total -= data[prevIndex];\n        total += value;\n        data[currentIndex] = value;\n        currentIndex = (currentIndex + 1) % windowSize;\n    }\n\n    double getAverage() {\n        return total / windowSize;\n    }\n};", "label": 1}
{"text": "SELECT first_name, last_name, CONCAT(first_name, ' ', last_name) AS full_name \nFROM customers;", "label": 1}
{"text": "// This code loop through the numbers from 0 to 9 and add them to the variable result.\nlet result = 0; \nfor (let i = 0; i < 10; i++) { \n  // Add the current number to the value of result\n  result += i;\n}", "label": 1}
{"text": "def closestInBST(root, target):\n  res = root.val\n  while root:\n    if root.val == target:\n      return root.val\n    if abs(root.val-target) < abs(res-target):\n      res = root.val\n    if target < root.val:\n      root = root.left\n    else:\n      root = root.right\n  return res", "label": 1}
{"text": "const newPerson = new Person('John', 23);", "label": 1}
{"text": "SELECT first_name, COUNT(*) as count \nFROM customers \nWHERE gender='male' \nGROUP BY first_name \nORDER BY count DESC;", "label": 1}
{"text": "def get_primes(n): \n  primes = [] \n  for num in range(2, n+1): \n    is_prime = True     \n    for div in range(2, n): \n      if (num % div == 0): \n        is_prime = False      \n    if is_prime: \n      primes.append(num) \n  return primes", "label": 1}
{"text": "Sample inputs for testing the edge cases:\n- Input: a = 0, b = 5\n- Input: a = 5, b = 0\n- Input: a = 0, b = 0", "label": 1}
{"text": "i = 0\nwhile i < 5: \n    i += 1", "label": 1}
{"text": "#include <cstdlib> \n#include <time.h>  \n  \n//Generating random number \nint random_number =  rand() % 1001; \n  \n// Print the random number \ncout << random_number;", "label": 1}
{"text": "for i in range(len(arr)):\n    print(arr[i])", "label": 1}
{"text": "db.collection.find( { count: { $gt: 10 } } )", "label": 1}
{"text": "switch (day_index) {\n  case 0:\n    console.log('Monday');\n    break;\n  case 1:\n    console.log('Tuesday');\n    break;\n  case 2:\n    console.log('Wednesday');\n    break;\n  case 3:\n    console.log('Thursday');\n    break;\n  case 4:\n    console.log('Friday');\n    break;\n  case 5:\n    console.log('Saturday');\n    break;\n  case 6:\n    console.log('Sunday');\n    break;\n}", "label": 1}
{"text": "{\n  \"name\": \"John\",\n  \"age\": 34\n}", "label": 1}
{"text": "try {\n  if (typeof( x ) !== 'number') {\n    throw \"Value must be an integer\";\n  }\n}\ncatch(err) {\n  console.log(err);\n}", "label": 1}
{"text": "total_tax = 30 * 0.075 = 2.25", "label": 1}
{"text": "for (let i = 0; i < array.length; i++) {\n  // TODO\n}", "label": 1}
{"text": "<a href=\"https://github.com/\">GitHub</a>", "label": 1}
{"text": "\"\"\"\nUsing Java, create a program to compute the area of a circle given the radius.\n\"\"\"\n \npublic class AreaCircle {\n   public static void main(String[] args) {\n      double radius = 7.5;\n      double area;\n   \n      area = Math.PI * Math.pow(radius, 2);\n      System.out.println(\"Area of the circle is: \" + area);\n   }\n}", "label": 1}
{"text": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-book-list',\n  templateUrl: './book-list.component.html',\n  styleUrls: ['./book-list.component.css']\n})\nexport class BookListComponent implements OnInit {\n\n  bookList = [\n    {name: 'The Aeneid', author: \u2018Virgil\u2019},\n    {name: \u2018The Odyssey\u2019, author: 'Homer\u2019},\n    {name: \u2018The Divine Comedy\u2019, author: \u2018Dante\u2019}\n  ];\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n\n<ul>\n  <li *ngFor=\"let book of bookList\">{{book.name}} - {{book.author}}</li>\n</ul>", "label": 1}
{"text": "Total surface area of a rectangular prism = 2(lw + lh + wh)\n= 2(10 x 8 + 10 x 5 + 8 x 5) \n= 2(80 + 50 + 40) \n= 220 cm2", "label": 1}
{"text": "a = [0] * 10", "label": 1}
{"text": "max = 9", "label": 1}
{"text": "#description{\n display: block;\n}", "label": 1}
{"text": "/^a\\w{4}s$/", "label": 1}
{"text": "#include<stdio.h>\n \nint main()\n{\n    int num = -3;\n    if (num < 0)\n        printf(\"Number is negative.\");\n    else\n        printf(\"Number is positive.\");\n \n    return 0;\n}", "label": 1}
{"text": "$(arr).each(function(i,val){\n    console.log(val*3);\n});", "label": 1}
{"text": "The correct syntax for converting a C# string to an integer is int.Parse(string). This method parses the string as a signed integer and returns the result.", "label": 1}
{"text": "A method for adding two numbers using a stack data structure involves the following steps: \n1. Push the two numbers onto the stack. \n2. Pop the two numbers off the stack and add them together. \n3. Push the result onto the stack.\n4. Pop the result off the stack and return it as the final answer.", "label": 1}
{"text": "string = \"apple\"\ncount_map = dict()\n\nfor char in string:\n    if char in count_map:\n        count_map[char] += 1\n    else:\n        count_map[char] = 1\n\nprint(count_map)", "label": 1}
{"text": "<html>\n    <head>\n        <title>List of Items</title>\n    </head>\n    <body>\n        <h1>List of Items</h1>\n        <ul>\n            <li>Item 1</li>\n            <li>Item 2</li>\n            <li>Item 3</li>\n            <li>Item 4</li>\n            <li>Item 5</li>\n        </ul>\n    </body>\n</html>", "label": 1}
{"text": "import java.util.Scanner; \n\nclass UserInput { \n  \n    public static void main(String[] args) \n    { \n        Scanner read = new Scanner(System.in); \n        System.out.print(\"Enter some string: \"); \n        String inputString = read.nextLine(); \n  \n        System.out.println(\"You have entered: \" + inputString); \n    } \n}", "label": 1}
{"text": "mylist = [bin(i) for i in mylist]", "label": 1}
{"text": "class Point: \n    \n    def __init__(self, x_coordinate, y_coordinate): \n        self.x = x_coordinate \n        self.y = y_coordinate \n  \n    def get_x(self): \n        return self.x \n  \n    def get_y(self): \n        return self.y \n  \n    def set_x(self, x_coordinate): \n        self.x = x_coordinate \n  \n    def set_y(self, y_coordinate): \n        self.y = y_coordinate \n  \n    def distance(self, other_point): \n        x_diff_sq = (self.x - other_point.x) * (self.x - other_point.x) \n        y_diff_sq = (self.y - other_point.y) * (self.y - other_point.y) \n          \n        return (x_diff_sq + y_diff_sq) ** 0.5 \n  \np1 = Point(1, 2) \np2 = Point(3, 4) \n\nprint(p1.distance(p2))", "label": 1}
{"text": "[1, 2, 3, 4, 7, 11, 18, 29, 47, 76, 123, 199]", "label": 1}
{"text": "def extract_urls(html): \n    res = []\n    \n    soup = BeautifulSoup(html, 'html.parser') \n    for link in soup.find_all('a'): \n        res.append(link.get('href')) \n    \n    return res", "label": 1}
{"text": "# Using the + operator \nstr1 = \"Hi\"\nstr2 = \" there!\"\nstr3 = str1 + str2 \nprint(str3)\n\n# Output: Hi there!\n\n# Using the join() method\nstr1 = \"Hi\"\nstr2 = \" there!\"\nstr3 = \"\".join([str1, str2]) \nprint(str3)\n\n# Output: Hi there!", "label": 1}
{"text": "my_list = [4, 8, 19, 6, 17, 11]\n\nsorted_list = sorted(my_list, reverse=True)", "label": 1}
{"text": "def remove_element(lst, element):\n    return [x for x in lst if x != element]", "label": 1}
{"text": "HTML is the language most suitable for creating a web page. It allows you to create the structure and content of the web page and can be combined with other languages such as CSS and JavaScript to improve the look and feel of the web page.", "label": 1}
{"text": "4", "label": 1}
{"text": "[\"Banana\", \"Apple\", \"Mango\"]", "label": 1}
{"text": "Math.floor(Math.random() * (100 - 1 + 1)) + 1", "label": 1}
{"text": "x = input(\"What is your name? \")", "label": 1}
{"text": "import tensorflow as tf\n\n# Define the inputs, weights and bias.\ninputs = tf.keras.Input(shape=(features))\nweights = tf.keras.layers.Dense(3, activation='relu')(inputs)\nbias = tf.Variable(tf.random_normal([1]))\n\n# Create the model.\nmodel = tf.keras.Model(inputs, weights + bias)\n\n# Compile and fit the model.\nmodel.compile(optimizer='adam', loss='mse', metrics=['accuracy'])\nmodel.fit(x_train, y_train, validation_split=0.2, epochs=50)", "label": 1}
{"text": "def concat(str1, str2)\n    return str1 + str2\nend", "label": 1}
{"text": "int binary_search(int arr[], int left, int right, int x) { \n\tif (right >= left) { \n\t\tint mid = left + (right - left) / 2; \n\n\t\t// If the element is present at the middle \n\t\tif (arr[mid] == x) \n\t\t\treturn mid; \n\n\t\t// If element is smaller than mid, then it can only \n\t\t// be present in left subarray \n\t\tif (arr[mid] > x) \n\t\t\treturn binary_search(arr, left, mid - 1, x); \n\n\t\t// Else the element can only be present in right \n\t\t// subarray \n\t\treturn binary_search(arr, mid + 1, right, x); \n\t} \n\t\n\t// We reach here when element is not present \n\t// in array \n\treturn -1;\n}", "label": 1}
{"text": "SELECT name\nFROM words\nORDER BY LENGTH(name) DESC\nLIMIT 1;", "label": 1}
{"text": "SELECT * FROM people WHERE age >= 25;", "label": 1}
{"text": "import string\nimport random\n\ndef generate_password(passwordlen):\n    ''' \n    This function generates a random password of the given length\n    '''\n    code_str = string.ascii_letters + string.digits\n    password = ''.join(random.choice(code_str) for i in range(passwordlen))\n    return password\n\nif __name__ == '__main__':\n    passwordlen = 8\n    print(generate_password(passwordlen))", "label": 1}
{"text": "int[] a = [3, -2, 1, 5, 6, -1, 4];\nint max_so_far = Integer.MIN_VALUE;\nint max_ending_here = 0;\nint start = 0;\nint end = 0;\nint s = 0;\n\nfor (int i = 0; i < a.length; i++) {\n\n    max_ending_here += a[i];\n\n    if (max_so_far < max_ending_here) {\n        max_so_far = max_ending_here;\n        start = s;\n        end = i;\n    }\n\n    if (max_ending_here < 0) {\n        max_ending_here = 0;\n        s = i + 1;\n    }\n}\n\nSystem.out.println(\"Maximum contiguous subarray is from \" + start + \" to \" + end);", "label": 1}
{"text": "public static List<Object> flattenArray(List<Object> arr) { \n  \n    List<Object> result = new ArrayList<>(); \n  \n    for (int i = 0; i < arr.size(); i++) { \n  \n        if (arr.get(i) instanceof List<?>) { \n  \n            List<Object> flat = flattenArray((List<Object>) arr.get(i)); \n            result.addAll(flat); \n        } \n        else { \n            result.add(arr.get(i)); \n        } \n  \n    } \n    return result; \n\n}", "label": 1}
{"text": "public static void printReversedLinkedList(Node head) {\n    if(head == null) return;\n    printReversedLinkedList(head.next);\n    System.out.print(head.data + \" \");\n    }", "label": 1}
{"text": "<ul>\n  <li>List item 1</li>\n  <li>List item 2</li>\n  <li>List item 3</li>\n</ul>", "label": 1}
{"text": "SELECT * FROM people WHERE last_name='Smith';", "label": 1}
{"text": "ArrayList<String> valueList = new ArrayList<String>();\nvalueList.add(\"Apple\");\nvalueList.add(\"Banana\");\nvalueList.add(\"Orange\");\nSystem.out.println(\"Number of elements: \" + valueList.size();", "label": 1}
{"text": "$num = 6;\n  \nwhile ($num <= 14) \n{\n    echo $num;\n    $num++;\n}", "label": 1}
{"text": "8b5f5d45ab80fa9e", "label": 1}
{"text": "#!/bin/bash\n\n#Store the output of command history into an array\nhistoryArray=($(history))\n\n#Declare a Map\ndeclare -A wordCount\n \n#Loops through the history commands\nfor word in \"${historyArray[@]}\"; do\n   wordCount[\"$word\"]=$((wordCount[\"$word\"] + 1 ))\ndone\n \n#Counter for tracking the most used command\nmaxCount=0\n \n#Loop through the Map\nfor key in \"${!wordCount[@]}\"\ndo\n   #Keeps track of the most used command\n   if [ ${wordCount[$key]} -gt $maxCount ]\n   then\n      maxCount=\"${wordCount[$key]}\"\n      mostUsed=\"$key\"\n   fi\ndone\n \necho The Most Used Command is $mostUsed", "label": 1}
{"text": "f(-3) = 4(-3)^2 + 7(-3) + 1 = -36 + 21 + 1 = -14", "label": 1}
{"text": "* {\n  font-size: 15px;\n  color: #555;\n}", "label": 1}
{"text": "CREATE TABLE my_table (\n    int SERIAL PRIMARY KEY,\n    str VARCHAR(255) NOT NULL,\n    boolean BOOLEAN\n);", "label": 1}
{"text": "even_nums = [num for num in my_list if num % 2 == 0]", "label": 1}
{"text": "import React, { useState } from 'react';\n\nconst Form = () => {\n  const [input, setInput] = useState('');\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    // Do something with input\n  }\n  return (\n    <form onSubmit={handleSubmit}>\n      <input type=\"text\" value={input} onChange={e => setInput(e.target.value)} />\n      <button type=\"submit\">Submit</button>\n    </form>\n  )\n};\n\nexport default Form;", "label": 1}
{"text": "<html>\n\n<head>\n<style> \n  div {\n    width:200px;\n    height:200px;\n    box-sizing:border-box;\n    border-radius: 10px;\n  }\n  .box-1 {\n    background: #F78181;\n  }\n  .box-2 {\n    background: #FBB117;\n  }\n  .box-3 {\n    background: #99E1D9;\n  }\n  .box-4 {\n    background: #CDC5C2;\n  }\n</style>\n</head>\n\n<body>\n  <div class=\"box-1\"></div>\n  <div class=\"box-2\"></div>\n  <div class=\"box-3\"></div>\n  <div class=\"box-4\"></div>\n</body>\n\n</html>", "label": 1}
{"text": "// Function to find matching pair in an array \npublic static void findPair(int[] arr) { \n    int pairIndex = -1; \n  \n    // Loop through the array \n    for (int i = 0; i < arr.length; i++) { \n        int current = arr[i]; \n  \n        // Check if it's a matching pair \n        for (int j = i + 1; j < arr.length; j++) { \n            if (current == arr[j]) { \n                pairIndex = j; \n                break; \n            } \n        } \n    } \n  \n    // Print the result \n    if (pairIndex != -1) \n        System.out.println(\"Pair found at index: \" + pairIndex); \n    else\n        System.out.println(\"Pair not found!\"); \n}", "label": 1}
{"text": "SELECT SUM(i.price * c.quantity) AS total_cost\nFROM items i\nINNER JOIN customers c\n    ON c.item_id = i.id\nWHERE c.customer_id = 1;", "label": 1}
{"text": "#include <iostream>\nusing namespace std;\n\nclass Stack {\n\tprivate:\n\t\tint top = -1;\n\t\tint size;\n\t\tint *arr;\n\t\n\tpublic:\n\t    Stack(int n) {\n\t        size = n;\n\t        arr = new int[size];\n\t    }\n\t\n\t    void push(int x) {\n\t        if (top < size - 1) {\n\t            ++top;\n\t            arr[top] = x;\n\t        } else {\n\t            cout << \"Stack overflow!\" << endl;\n\t        }\n\t    }\n\t\n\t    int pop() {\n\t        if (top < 0) {\n\t            cout << \"Stack underflow!\" << endl;\n\t            return -1;\n\t        } else {\n\t            return arr[top--];\n\t        }\n\t    }\n\t\n\t    int topElement() {\n\t        if (top < 0) {\n\t            cout << \"Stack underflow!\" << endl;\n\t            return -1;\n\t        } else {\n\t            return arr[top];\n\t        }\n\t    }\n\t\n\t    int isEmpty() {\n\t        return top < 0;\n\t    }\n};", "label": 1}
{"text": "#!/bin/bash\n\nfor i in \"$@\"\ndo\n  echo -n $(echo $i | sed 's/\\(\\w\\)/\\1\\n/g' | sort -u)\ndone \necho", "label": 1}
{"text": "public class Circle\n{\n    public static void main(String[] args)\n    {\n        double radius = 6.2;\n        double area = Math.PI * radius * radius;\n        double circumference = 2 * Math.PI * radius;\n\n        System.out.println(\"Area = \" + area);\n        System.out.println(\"Circumference = \" + circumference);\n    }\n\n}", "label": 1}
{"text": "int multiply(int a, int b) {\n  return a * b;\n}", "label": 1}
{"text": "function sumOfSquares(a, b) {\n  return a*a + b*b;\n}", "label": 1}
{"text": "class MovieTheater {\n private:\n  string name;\n  int capacity;\n  float ticketPrice;\n public:\n  MovieTheater(string name, int capacity, float ticketPrice);\n  string getName();\n  int getCapacity();\n  float getTicketPrice();\n  void setName(string name);\n  void setCapacity(int capacity);\n  void setTicketPrice(float ticketPrice);\n  int calculateSales();\n};", "label": 1}
{"text": "db.orders.aggregate([\n  {$match: {status: 'completed'}},\n  {$group: {user_id: '$user_id', count: {$sum: 1}}},\n  {$sort: {count: -1 }}\n])", "label": 1}
{"text": "my_tuple = (1, 2, 3)  # Output: (1, 2, 3)", "label": 1}
{"text": "The model can be built using any machine learning algorithm. The model should be trained with data points labeled as spam or non-spam emails. After training the model with the data, it should be able to predict whether an email is spam or not based on the input.", "label": 1}
{"text": "class MatrixOperation {\n  constructor(matrix) {\n    this.matrix = matrix;\n  }\n\n  // Implement the operation here\n  // e.g. Matrix multiplication\n}\n\nconst matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\nconst mOp = new MatrixOperation(matrix);", "label": 1}
{"text": "In Java, the method used to add an element to a stack is push(). This method adds an element to the top of the stack and increases the stack size by one.", "label": 1}
{"text": "<input type=\"text\" placeholder=\"Enter name\">", "label": 1}
{"text": "The given input data is an array of strings.", "label": 1}
{"text": "SELECT TOP 1 Salary\nFROM (\n\tSELECT DISTINCT TOP 3 Salary\n\tFROM Employees\n\tORDER BY Salary DESC\n) AS Param\nORDER BY Salary ASC", "label": 1}
{"text": "db.collection.find({\"field.arrayName\": \"value\"})", "label": 1}
{"text": "# Function to calculate area of triangle  \ndef calculateArea(a, b, c): \n     \n    # Calculating the semi-perimeter of triangle  \n    s = (a + b + c) / 2\n  \n    # Calculate the area  \n    area = (s*(s - a)*(s - b)*(s - c)) ** 0.5    \n    \n    return area \n\n# Driver code  \na = 5\nb = 6\nc = 7\nprint(\"Area of triangle is %0.2f\" %calculateArea(a, b, c))", "label": 1}
{"text": "SELECT department, COUNT(*) AS count, gender\nFROM employees\nGROUP BY department, gender;", "label": 1}
{"text": "public static int compare(Object o1, Object o2) {\n\n    if (o1 < o2) {\n        return -1;\n    } else if (o1 == o2) {\n        return 0;\n    }\n    else {\n        return 1;\n    }\n}", "label": 1}
{"text": "for (int i = 0; i < 100; i++) {\n    System.out.println(\"hi\");\n}", "label": 1}
{"text": "<!DOCTYPE html>\n<html>\n\n<head>\n    <title>Navigation Bar Demo</title>\n</head>\n\n<body>\n    <nav>\n        <ul>\n            <li><a href=\"#\">Home</a></li>\n            <li><a href=\"#\">About</a></li>\n            <li><a href=\"#\">Contact</a></li>\n        </ul>\n    </nav>\n\n    <h1>Welcome!</h1>\n    <p>This is a demo page with a navigation bar at the top.</p>\n    \n</body>\n\n</html>", "label": 1}
{"text": "var colors = ['Red', 'Green', 'Blue'];", "label": 1}
{"text": "19", "label": 1}
{"text": "var employee = {\n  name: 'John',\n  position: 'Manager'\n};", "label": 1}
{"text": "#include<iostream>\n\nint main() {\n    for(int i = 0; i < 10; i++)\n        std::cout << \"Hello, World!\" << std::endl;\n    return 0;\n}", "label": 1}
{"text": "The next number in the given sequence is 36.\n\nTo use a machine learning model, the dataset should be split into features and labels. The features could be the numbers in the sequence, and the label could be the next number. The model can be trained on this dataset to accurately predict the next number in a sequence.", "label": 1}
{"text": "import string\nimport random\n\ndef generate_random_string():\n chars = string.ascii_letters + string.digits + string.punctuation\n string_length = 8\n random_string = ''.join(random.choice(chars) for _ in range(string_length))\n return random_string", "label": 1}
{"text": "def squares_list():\n squares = []\n for i in range(1, 51):\n squares.append(i**2)\n return squares", "label": 1}
{"text": "x = 10\nif x == 10:\nprint('x is 10')", "label": 1}
{"text": "total = 5 + 10;", "label": 1}
{"text": "A closure is a special type of function that allows a program to access variables and functions from an outer (or parent) scope, even after that outer scope has been closed or finished executing. The closure essentially \"closes\" the variables and functions from the outer scope, making them available for use in the inner scope of the function.", "label": 1}
{"text": "import random\nimport string\n\ndef generate_password(length):\n    chars = string.ascii_letters + string.digits\n    return ''.join(random.choice(chars) for _ in range(length))\n\nprint(generate_password(10))", "label": 1}
{"text": "[x for x in range(0, 12)]", "label": 1}
{"text": "def truncate_string(string, limit):\n    return string[:limit]", "label": 1}
{"text": "def compute_summation(list):\n    result = 0\n    for i in list:\n        result += i\n    return result", "label": 1}
{"text": "class Animal:\n  def __init__(self, name):\n    self.name = name\n   \n  def eat(self):\n    print(f\"{self.name} is eating\")\n\nclass Dog(Animal):\n  def bark(self):\n    print(f\"{self.name} is barking\")\n\ndog = Dog(\"Fido\")\ndog.eat()\ndog.bark()\n\n# Output:\n# Fido is eating\n# Fido is barking", "label": 1}
{"text": "<?php \n  $str = \"PHP scripting language\"; \n  echo $str; \n?>", "label": 1}
{"text": "def ascii_to_decimal(string):\n    decimal_value = 0\n    for c in string:\n        decimal_value += ord(c)\n    return decimal_value\n\nprint(ascii_to_decimal('hello')) # Output -> 104 101 108 108 111", "label": 1}
{"text": "def sum(start, end):\n    sum = 0\n    for i in range(start, end+1):\n        sum += i\n    return sum\n\nprint(sum(0, 10)) # Output -> 55", "label": 1}
{"text": "def rearrange_string(myString):\n    myString = myString.lower().strip()\n    words = myString.split(' ') \n    words.sort() \n    return ' '.join(words)\n\nprint(rearrange_string(myString))", "label": 1}
{"text": "def hypotenuse(x, y):\n    return (x**2 + y**2)**0.5", "label": 1}
{"text": "A hash function is a function which maps a given input of arbitrary or variable length to a fixed length output. It is deterministic, meaning that the same input will always result in the same output, and it is a one-way function, meaning that it is not possible to reconstruct the input from the output. The main purpose of a hash function is to act as a digital fingerprint for data or messages, allowing them to be quickly compared with other fingerprints to determine whether they are the same or different.", "label": 1}
{"text": "length :: [a] -> Int\nlength [] = 0\nlength (_:xs) = 1 + (length xs)", "label": 1}
{"text": "void print_string(string str) \n{  \n    cout << str; \n}", "label": 1}
{"text": "// Function to find the sum of all elements in an array\n\nfunction sumElements(arr){\n  let sum = 0;\n  arr.forEach(element => {\n    sum += element;\n  });\n  return sum;\n}\n\nlet arr = [3, 5, 2, 6, 4, 4];\nconsole.log(sumElements(arr)); // Output: 24", "label": 1}
{"text": "def validate_integer(val):\n    if isinstance(val, int):\n        return True\n    else: \n        return False", "label": 1}
{"text": "List<String> nonEmpty = Arrays.stream(arr)\n\t\t\t    .filter(x -> !x.equals(\"\"))\n\t\t\t    .collect(Collectors.toList());", "label": 1}
{"text": "def largest_palindromic_number(arr):\n    largest = 0\n\n    for i in arr:\n        s = str(i)\n        if s == s[::-1]:\n            largest = max(i, largest) \n    return largest\n\nlargest = largest_palindromic_number([73, 111, 109])\nprint(\"The largest palindromic number is:\", largest)", "label": 1}
{"text": "def has_all_alphabet(string):\n    letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    return set(letters).issubset(string.upper())", "label": 1}
{"text": "A web server is a computer system that hosts web applications and responds to requests from users over the internet. The web server processes the requests and sends a response back to the users, usually in the form of an HTML web page.", "label": 1}
{"text": "model = LogisticRegression(solver='lbfgs')\nmodel.fit(X, Y)", "label": 1}
{"text": "SELECT * \nFROM product \nORDER BY price DESC \nLIMIT 3;", "label": 1}
{"text": "import java.awt.*;\nimport javax.swing.*;\n\npublic class GUIExample {\n    public static void main(String[] args) {\n        JFrame frame = new JFrame(\"GUI Example\");\n        frame.setSize(400, 600);\n \n        JPanel panel = new JPanel();\n \n        JLabel label = new JLabel(\"This is a simple GUI.\");\n        JButton button = new JButton(\"Click Me!\");\n \n        panel.add(label);\n        panel.add(button);\n \n        frame.add(panel);\n        frame.setVisible(true);\n    }\n}", "label": 1}
{"text": "population_dict = {\n 'India': 1237696000,\n 'Nigeria': 142429000,\n 'China': 1139517000\n}", "label": 1}
{"text": "def wrap_text(text, columns):\n  wrapped_text = \"\"\n  for i in range(0, len(text), columns):\n    wrapped_text += text[i:i+columns] + \"\\n\"\n  return wrapped_text\n \ntext = \"It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout.\"\nprint(wrap_text(text, 30)) \n\n# Prints\n# It is a long established \n# fact that a reader will \n# be distracted by the rea\n# dable content of a page \n# when looking at its layo\n# ut.", "label": 1}
{"text": "Breadth-first search (BFS) is an algorithm used to traverse a graph or tree data structure. The algorithm works by starting at the root node and exploring each of its adjacent nodes before exploring any of its children. The adjacent nodes are explored in the order with which they were discovered in the graph or tree. The algorithm moves from node to node by visiting the nearest neighbors first, as opposed to a depth-first search, which moves from node to node by exploring the furthest nodes first. The basic algorithm for a breadth-first search is as follows:\n\n1. Create an empty queue\n2. Enqueue the root\n3. While the queue is not empty: \n    a. Dequeue the next node\n    b. If it is the desired node, return success\n    c. Else, add all of its children to the queue\n4. Return failure", "label": 1}
{"text": "def partition(array, begin, end):\n    pivot = begin\n    for i in range(begin+1, end+1):\n        if array[i] <= array[begin]:\n            pivot += 1\n            array[i], array[pivot] = array[pivot], array[i]\n    array[pivot], array[begin] = array[begin], array[pivot]\n    return pivot\n\ndef quick_sort(array, begin=0, end=None):\n    if end is None:\n        end = len(array) - 1\n    \n    def _quick_sort(array, begin, end):\n        if begin >= end:\n            return\n        pivot = partition(array, begin, end)\n        _quick_sort(array, begin, pivot-1)\n        _quick_sort(array, pivot+1, end)\n\n    return _quick_sort(array, begin, end)", "label": 1}
{"text": "def is_anagram(string1, string2):\n    # Make sure strings are the same length\n    if len(string1) != len(string2):\n        return False\n\n    # Create dictionary of letter frequency for each string \n    char_freq1 = {}\n    char_freq2 = {}\n\n    # Iterate through each character in the strings\n    for char in string1:\n        char_freq1[char] = char_freq1.get(char, 0) + 1\n    for char in string2:\n        char_freq2[char] = char_freq2.get(char, 0) + 1\n\n    # Compare the two dictionaries\n    if char_freq1 == char_freq2:\n        return True\n    else:\n        return False\n\nif __name__ == '__main__':\n    string1 = \"elbon\"\n    string2 = \"noble\"\n    print(is_anagram(string1, string2))", "label": 1}
{"text": "def compute_bulk_density(mass, volume):\n    \"\"\"Compute the bulk density of a polyhedron using the formula $\\frac{mass}{volume}$.\"\"\"\n    return mass / volume\n\nif __name__ == '__main__':\n    mass = 3.5 # g\n    volume = 2.6 # cm^3\n    print(compute_bulk_density(mass, volume))", "label": 1}
{"text": "A lambda expression is an anonymous function in Python, which can take any number of arguments and return any type of expression or value. Lambda functions are mainly used for functional programming and can be used wherever normal functions can be used, such as in the filter, map, and reduce functions.", "label": 1}
{"text": "def depth_first_search(graph, start):\n    explored = [] # List of already explored nodes\n    stack = [start] # Stack of nodes to explore\n\n    while stack:\n        node = stack.pop() # Pop the next node from stack\n        if node not in explored:\n            explored.append(node) # Add the node to explored\n            neighbors = graph[node] # List of neighbors of node\n            for neighbor in neighbors:\n                stack.append(neighbor) # Add neighbors to stack\n    \n    return explored", "label": 1}
{"text": "def replace_odds_with_zero(arr):\n  for i in range(len(arr)):\n    if arr[i] % 2 == 1:\n      arr[i] = 0\n  return arr", "label": 1}
{"text": "SELECT CONCAT('Hello', 'World', '!') AS concat_string;", "label": 1}
{"text": "app.controller('pageCtrl', function ($scope, $location) {\n    $scope.page = $location.search().page;\n});", "label": 1}
{"text": "SELECT * FROM users WHERE email LIKE '%@gmail.com';", "label": 1}
{"text": "The word 'programmer' is at position 9 in the given string.", "label": 1}
{"text": "[3, 4, 5, 6]", "label": 1}
{"text": "#!/bin/sh \n\n# loop from 0 to 100\nfor i in $(seq 0 2 100)\ndo\n  echo $i\ndone", "label": 1}
{"text": "#include <iostream>\n \nusing namespace std;\n \n// Function to search an element in the array\n// arr[]  = array to search\n// x      = element to search\n// n      = size of array\nbool search(int arr[], int n, int x)\n{\n  int i;\n  for (i = 0; i < n; i++)\n    if (arr[i] == x)\n      return true;\n  return false;\n}\n \nint main()\n{\n  int arr[] = {10, 11, 12, 15, 17};\n  int x = 12;\n  int n = sizeof(arr) / sizeof(arr[0]);\n \n  // Calling the search function\n  if (search(arr, n, x) == true)\n    cout << \"Element found\\n\"; \n  else\n    cout << \"Element not found\\n\"; \n \n  return 0;\n}", "label": 1}
{"text": "<?php \n  \n// Function to return the maximum of two numbers without using if...else or a comparison operator\nfunction maximum($x, $y) \n{ \n    // Calculate the sum of two numbers\n    $sum = $x + $y; \n  \n    // Calculate the difference between two numbers\n    $diff = $x - $y; \n  \n    // Set sign of the difference\n    $s = $diff >> 31 & 0x1; \n  \n    // Return maximum of two numbers  \n    return ($x * $s + $y * (1-$s)); \n} \n  \n// Driver code \necho \"Maximum of 45 and 68 is \", maximum(45, 68); \n?>", "label": 1}
{"text": "import numpy as np\n\nX = np.array([[4,7], [2,5], [3,6]])\ny = np.array([7, 5, 6])\n\nfrom sklearn.linear_model import LinearRegression  \nmodel = LinearRegression()  \nmodel.fit(X, y)", "label": 1}
{"text": "import pandas as pd\n\ndf = pd.DataFrame(array)\nmean_by_region = df.groupby('region')['score'].mean() \n\nprint(mean_by_region)", "label": 1}
{"text": "for i in range(10, 0, -1): \n    print(i)", "label": 1}
{"text": "def extract_substring(string, start_index, end_index):\n    return string[start_index:end_index]\n\nstring = \"Hello World\"\nstart_index = 2\nend_index = 5\n\nprint(extract_substring(string, start_index, end_index))", "label": 1}
{"text": "list = [14, 37, 54, 20]\n\ndef compute_sum(list):\n    total_sum = 0\n    for number in list:\n        total_sum += number\n    return total_sum\n\nprint(compute_sum(list))", "label": 1}
{"text": "list = [25, 67, 12, 8]\n\ndef find_smallest(list):\n    smallest = list[0]\n    for number in list:\n        if number < smallest:\n            smallest = number\n    return smallest\n\nprint(find_smallest(list))", "label": 1}
{"text": "let person = {\nname: \"John Doe\",\nage: 32, \ngender: \"Male\", \naddress: \"123 Street Street, City, State\" \n};", "label": 1}
{"text": "SELECT p1.* \nFROM products p1 \nINNER JOIN \n  (SELECT category, MIN(price) AS min_price \n   FROM products \n   GROUP BY category) p2 \nON p1.category = p2.category \nAND p1.price = p2.min_price;", "label": 1}
{"text": "public static int daysInMonth(int month, int year) { \n    int days[] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}; \n    if (month == 2 && isLeapYear(year)) \n        return 29; \n    else\n        return days[month - 1]; \n}", "label": 1}
{"text": "let s = \"This Is A String\";\nlet lowercaseString = s.toLowerCase(); // returns \"this is a string\"", "label": 1}
{"text": "def bubble_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1] :\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr\n\nbubble_sort([3,1,5,4,2])", "label": 1}
{"text": "import numpy as np \narr = np.array([2,4,6,8])\nprint(arr)", "label": 1}
{"text": "The average of 1, 2 and 3 is 2.0.", "label": 1}
{"text": "[5, 4, 3, 2, 1]\narr = [1, 2, 3, 4, 5]\narr = arr[::-1]\nprint(arr)", "label": 1}
{"text": "A hash table is a data structure that stores data items in an associative array where the key is used to quickly search for the data item. It is based on the concept of hashing which converts a key into an address in the array. Each address points to the data item associated with that key. The hash table offers fast lookup times by using hashing functions which are designed to spread data evenly over the table.", "label": 1}
{"text": "def find_substring(lst, query):\n    result = []\n    for el in lst:\n        if query in el:\n            result.append(el)\n    return result\n\nfind_substring(['Hello', 'Hello, world', 'Bonjour', 'My name is John'], 'lo')\n# output: ['Hello', 'Hello, world']", "label": 1}
{"text": "from random import randint \n\ndef rock_paper_scissors():\n    print(\"rock, paper, scissors!\")\n    player = input(\"Your input: \")\n    rand_num = randint(0,2)\n    if rand_num == 0:\n        computer = \"rock\"\n    elif rand_num == 1:\n        computer = \"paper\"\n    else:\n        computer = \"scissors\" \n\n    print(\"The computer plays: \" + computer)\n    if player == computer:\n        print(\"It's a tie!\")\n    elif player == \"rock\":\n        if computer == \"paper\":\n            print(\"Computer wins!\")\n        else:\n            print(\"Player wins!\")\n    elif player == \"paper\":\n        if computer == \"scissors\":\n            print(\"Computer wins!\")\n        else:\n            print(\"Player wins!\")\n    elif player == \"scissors\":\n        if computer == \"rock\":\n            print(\"Computer wins!\")\n        else:\n            print(\"Player wins!\")\n    else:\n        print(\"Invalid input! You have to choose between rock, paper or scissors\")\n\nrock_paper_scissors()", "label": 1}
{"text": "string = \"Hello World!\"\ninverted_string = \"\"\nfor char in string:\n    inverted_string = char + inverted_string\n\nprint(inverted_string) # Output: \"!dlroW olleH\"", "label": 1}
{"text": "let length = 10;\nlet volume = length * length * length;\nconsole.log(volume); // Output: 1000", "label": 1}
{"text": "let regex = /^A.*Z$/;\nconsole.log(regex.test(\"ABDZ\")); // Output: true", "label": 1}
{"text": "{\n \"name\": \"John\",\n \"age\": 25,\n \"address\": {\n \"street\": \"123 Main Street\"\n }\n}", "label": 1}
{"text": "int number = 5;\nwhile (number > 0) {\n System.out.println(\"Number: \" + number);\n number--;\n}", "label": 1}
{"text": "public class Sum {\n\n  public static int sumInts(int a, int b) {\n    return a + b;\n  }\n\n  public static double sumDoubles(double a, double b) {\n    return a + b;\n  }\n\n}", "label": 1}
{"text": "def check_if_string_contains_all_vowels(string):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    str_vowels = [ltr for ltr in string.lower() if ltr in vowels]\n    return len(str_vowels) == len(vowels)", "label": 1}
{"text": "from datetime import datetime, timedelta\n\nt1 = datetime(2020, 1, 1, 12, 0)\nt2 = datetime(2020, 1, 1, 15, 30)\n\nminutes_difference = int((t2-t1).total_seconds()/60)\nprint(\"The difference in minutes between the two timestamps is: \" + str(minutes_difference) + \" minutes.\")", "label": 1}
{"text": "def print_square_of_a_number():\n    num = int(input(\"Enter a number: \"))\n    print(\"The square of the number is: \" + str(num**2))", "label": 1}
{"text": "string = \"Hello\" \n\nrevString = \"\" \nfor i in range(len(string)-1,-1,-1): \n\trevString = revString + string[i] \n  \nprint(revString)", "label": 1}
{"text": "import random\nmin_val = 0\nmax_val = 20\nprint(random.randint(min_val, max_val))", "label": 1}
{"text": "print(f\"Error at line {lineno}: {error}\")", "label": 1}
{"text": "SELECT employee_id, employee_name, salary\nFROM Employees\nWHERE salary > 100000;", "label": 1}
{"text": "const myObject = { \n  \"name\": \"John Doe\", \n  \"age\": 25, \n  \"languages\": [\"English\",\"Spanish\"]\n}", "label": 1}
{"text": "list_of_numbers = [1, 2, 3, 4, 5]\nsum = 0\nfor num in list_of_numbers:\n    sum += num\nprint(sum)", "label": 1}
{"text": "SELECT COUNT(*) \nFROM customers \nWHERE firstname = 'John';", "label": 1}
{"text": "regex = r\"^(([a-zA-Z]{1})|([a-zA-Z]{1}[a-zA-Z]{1})|([a-zA-Z]{1}[0-9]{1})|([0-9]{1}[a-zA-Z]{1})|([a-zA-Z0-9][a-zA-Z0-9-_]{1,61}[a-zA-Z0-9]))\\.([a-zA-Z]{2,6}|[a-zA-Z0-9-]{2,30}\\.[a-zA-Z]{2,3})$\"", "label": 1}
{"text": "days = 28\n\nif month == 'February':\n    print(days)\nelse:\n    print('Invalid Month')", "label": 1}
{"text": "def get_largest(lst):\n    largest = 0\n    for i in range (0,len(lst)):\n        if lst[i] > largest:\n            largest = lst[i]\n    return largest\n\n# Driver code\nmyList = [1,2,3,4,5,6]\nprint(get_largest(myList)) # Output: 6", "label": 1}
{"text": "SELECT * \nFROM customers \nWHERE country = 'United States';", "label": 1}
{"text": "def create_list(n):\n  result = [] \n  for i in range(0,n): \n    result.append(i) \n  return result", "label": 1}
{"text": "from bs4 import BeautifulSoup\n\nhtml_doc = \"\"\n<html>\n<head><title>My title</title></head>\n<body>\n  <h1>Hello, world!</h1>\n  <p>This is a sample HTML document.</p>\n</body>\n</html>\n\"\"\n\nsoup = BeautifulSoup(html_doc, 'html.parser') \nprint(soup.get_text())\n\n#Output\nHello, world!\nThis is a sample HTML document.", "label": 1}
{"text": "An application programming interface (API) for a program can be defined as a set of routines, protocols, and tools that provide access services for a software component. An API can expose some aspects of a program's functionality, such as creating a user or managing database records, so that other programs can interact with it and access its data.", "label": 1}
{"text": "Dynamic programming is an algorithm design technique that is used to solve optimization problems by breaking them down into smaller subproblems. It enables you to solve a problem by combining solutions to similar subproblems, saving time and often being more efficient than standard methods. It is widely used in operations research, artificial intelligence, bioinformatics, linguistics, and other fields.", "label": 1}
{"text": "def print_even_numbers_in_range(start, end):\n    for i in range(start, end+1):\n        if i % 2 == 0:\n            print(i)\n\nprint_even_numbers_in_range(2, 10)", "label": 1}
{"text": "def binary_search(arr, x):\n    low = 0\n    high = len(arr)-1\n    while low<=high:\n        mid = (low+high)//2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1", "label": 1}
{"text": "function equalArrays(arr1, arr2) {\n  if (arr1.length !== arr2.length) {\n    return false;\n  }\n \n  for (let i = 0; i < arr1.length; i++) {\n    if (arr1[i] !== arr2[i]) {\n      return false;\n    }\n  }\n \n  return true;\n}", "label": 1}
{"text": "[[2, 7, 9], [1, 5, 6], [3, 4, 8]]", "label": 1}
{"text": "The regular expression to match numbers that start with 8 is: ^8\\d+$", "label": 1}
{"text": "The most efficient way to search for a specific item in an array is to use a binary search algorithm. Binary search works by repeatedly dividing the array in half until the desired item is found. This method has a time complexity of O(log n).", "label": 1}
{"text": "static int[] intersect(int[] array1, int[] array2){\n   \n    int[] result = new int[array1.length];\n    int k = 0;\n \n    for (int i = 0; i < array1.length; i++) {\n        for (int j = 0; j < array2.length; j++) {\n            if(array1[i] == array2[j]){\n                result[k] = array1[i];\n                k++;\n            }\n        }\n    }\n\n    // Return the result array \n    return result;\n}", "label": 1}
{"text": "# Create a new array with one element at the beginning\nnew_array = [1] + Array\n\n# Print the new array\nprint(new_array) # Output: [1, 3, 4, 6, 9]", "label": 1}
{"text": "def convert_mph_to_kph(mph):\n    return mph * 1.609", "label": 1}
{"text": "https://example.com/users/PUT", "label": 1}
{"text": "36", "label": 1}
{"text": "def toUpperCase(string):\n    return string.upper()\n\n# Output: HELLO WORLD!", "label": 1}
{"text": "Static programming is when all of the instructions to perform a task are written out before the program is executed. In static programming, the order of instructions and the number of instructions does not change during execution. Dynamic programming is when the instructions and number or order of instructions can change at runtime. The instructions and order of instructions may also depend on inputs or external conditions. Dynamic programming is mainly used in optimization problems to reduce the number of calculations needed for a solution.", "label": 1}
{"text": "let arr = [1, 2, 1, 1, 3, 4, 4];\nlet unique_nums = [];\n\nfor (let i = 0; i < arr.length; i++) {\n  if (!unique_nums.includes(arr[i])) {\n    unique_nums.push(arr[i]);\n  }\n}\n\nconsole.log(unique_nums);", "label": 1}
{"text": "function myFunc(n) {\n  return Math.abs(n);\n}", "label": 1}
{"text": "This code creates a new array, arr2, which contains the same elements as the original array, arr1. The spread operator (...) is used to unpack the elements of arr1, and copy them into the newly created arr2.", "label": 1}
{"text": "def compute_sum(arr):\n    result = 0\n    for num in arr:\n        result += num\n    return result", "label": 1}
{"text": "Yes, it is possible to create a copy of a multi-dimensional array in Python using the copy or deepcopy methods from the copy module. These methods return a new object that is a shallow or deep copy of an array respectively.", "label": 1}
{"text": "def find_most_frequent(data):\n    counts = {}\n    for item in data:\n        if item in counts:\n            counts[item] += 1\n        else:\n            counts[item] = 1\n    most_frequent_item = max(counts, key=counts.get)\n    return most_frequent_item", "label": 1}
{"text": "SELECT name, department FROM employees WHERE department='Sales';", "label": 1}
{"text": "SELECT COUNT(DISTINCT job_role) FROM employee;", "label": 1}
{"text": "SELECT * FROM Employees WHERE salary > 50000;", "label": 1}
{"text": "SELECT name, salary \nFROM employee \nWHERE department = 'finance';", "label": 1}
{"text": "int number = 0;\nwhile(number <= 20){\n    if(number % 2 == 0){\n        System.out.println(number);\n    }\n    number++;\n}", "label": 1}
{"text": "class LinkedList { \n    Node head;  \n  \n    class Node { \n        int data; \n        Node next; \n  \n        Node(int d) \n        { \n            data = d; \n            next = null; \n        } \n    } \n  \n    public void push(int new_data) \n    { \n        Node new_node = new Node(new_data); \n        new_node.next = head; \n        head = new_node; \n    } \n}", "label": 1}
{"text": "def longest_string(string_list):\n    longest_string = \"\"\n    for s in string_list:\n        if len(s) > len(longest_string): \n            longest_string = s\n    return longest_string", "label": 1}
{"text": "def sort_list(nums):\n    sorted_nums = []\n    for i in range(len(nums)):\n        max_num = max(nums)\n        sorted_nums.append(max_num)\n        nums.remove(max_num)\n    return sorted_nums", "label": 1}
{"text": "#include <stdio.h> \n#include <math.h> \n  \n// A utility function to calculate the discriminant \nfloat discriminant(float a, float b, float c) \n{ \n    return (b*b - 4*a*c); \n} \n  \n// Function to calculate the roots of Quadratic Equations \nvoid findRoots(float a, float b, float c) \n{ \n    float discriminant = discriminant(a, b, c); \n   \n    if (discriminant > 0) \n    { \n        float x1 = (-b + sqrt(discriminant)) / (2*a); \n        float x2 = (-b - sqrt(discriminant)) / (2*a); \n        printf(\"Roots are real and distinct.\\nx1 = %f, x2 = %f\", x1, x2); \n    } \n    else if (discriminant == 0) \n    { \n        float x = -b / (2*a); \n        printf(\"Roots are real and same.\\nx1 = x2 = %f\", x); \n    } \n    else\n    { \n        printf(\"Roots are complex.\\n\"); \n    } \n} \n  \n// Driver program \nint main() \n{ \n    float a = 3, b = 2, c = 1; \n    findRoots(a, b, c); \n    return 0; \n}", "label": 1}
{"text": "def create_input_string(nums, ops):\n    input_str = \"\"\n    \n    for i in range(len(nums)):\n        if i == 0:\n            input_str += str(nums[i])\n        else:\n            input_str += ops[i - 1] + str(nums[i])\n    \n    return input_str", "label": 1}
{"text": "class BankAccount:\n    def __init__(self, balance):\n        self.balance = balance\n    \n    def deposit(self, amount):\n        self.balance += amount\n    \n    def withdraw(self, amount):\n        self.balance -= amount", "label": 1}
{"text": "body {\n    background-color: white; \n    color: black;\n}", "label": 1}
{"text": "The 16-bit hash for the given data is 0xB8C2.", "label": 1}
{"text": "The suitable data type for this data is a string.", "label": 1}
{"text": "i = 0\nwhile i < len(my_list):\n    print(my_list[i])\n    i += 1", "label": 1}
{"text": "class Employee:\n    \"\"\"\n    This class contains instance variables of a name, age, and salary.\n    \"\"\"\n\n    def __init__(self, name, age, salary):\n        self.name = name\n        self.age = age\n        self.salary = salary", "label": 1}
{"text": "true", "label": 1}
{"text": "for item in list:\n    print(item)", "label": 1}
{"text": "import string\nimport random\n\ndef generate_random_string(length):\n    char_list = \"\".join(random.sample(string.ascii_letters, length))\n    return char_list", "label": 1}
{"text": "import os\n\ncurrdir = os.getcwd()\nprint(currdir)", "label": 1}
{"text": "import os\n\ndef create_folder(folder_name):\n    try:\n        if not os.path.exists(folder_name):\n            os.makedirs(folder_name)\n    except OSError:\n        print(\"Error creating directory\")\n        \ncreate_folder(\"my_folder\")", "label": 1}
{"text": "remainder = 50 % 4\nprint('Remainder: {}'.format(remainder))", "label": 1}
{"text": "def sum_numbers(number):\n    # Initialize sum\n    total = 0\n    # Iterate through 1 to number\n    for i in range(1, number + 1):\n        total += i\n    return total\n\nsum_result = sum_numbers(10)\nprint('Total sum: {}'.format(sum_result))", "label": 1}
{"text": "sum = a + b\nprint(sum)", "label": 1}
{"text": "import sys\n\ndef get_command_line_arg():\n    print(sys.argv[1])", "label": 1}
{"text": "<input type=\"text\" id=\"name\" />", "label": 1}
{"text": "def calculate_e(term): \n    e = 0\n    for i in range(term + 1): \n        e += 1 / math.factorial(i) \n    return e", "label": 1}
{"text": "A Heap is a specialized tree-based structure in data structures where the root node is compared with its children and arranged accordingly. Every node is either greater than or equal to or less than its children, according to a comparison key. Heaps are commonly used for Priority queues and efficient sorting algorithms.", "label": 1}
{"text": "public static string NumberToWords(int number)\n{\n    if (number == 0)\n        return \"Zero\";\n\n    int[] num = new int[4];\n    int first = 0;\n    int u, h, t;\n    System.Text.StringBuilder sb = new System.Text.StringBuilder();\n\n    if (number < 0)\n    {\n        sb.Append(\"Minus \");\n        number = -number;\n    }\n\n    string[] words0 = { \"\", \"One \", \"Two \", \"Three \", \"Four \", \"Five \", \"Six \", \"Seven \", \"Eight \", \"Nine \" };\n    string[] words1 = { \"Ten \", \"Eleven \", \"Twelve \", \"Thirteen \", \"Fourteen \", \"Fifteen \", \"Sixteen \", \"Seventeen \", \"Eighteen \", \"Nineteen \" };\n    string[] words2 = { \"Twenty \", \"Thirty \", \"Forty \", \"Fifty \", \"Sixty \", \"Seventy \", \"Eighty \", \"Ninety \" };\n    string[] words3 = { \"Thousand \", \"Lakh \", \"Crore \" };\n\n    num[0] = number % 1000; // units\n    num[1] = number / 1000;\n    num[2] = number / 100000;\n    num[1] = num[1] - 100 * num[2]; // thousands\n    num[3] = number / 10000000; // crores\n    num[2] = num[2] - 100 * num[3]; // lakhs\n\n    for (int i = 3; i > 0; i--)\n    {\n        if (num[i] != 0)\n        {\n            first = i;\n            break;\n        }\n    }\n    for (int i = first; i >= 0; i--)\n    {\n        if (num[i] == 0) continue;\n        u = num[i] % 10; // ones\n        t = num[i] / 10;\n        h = num[i] / 100; // hundreds\n        t = t - 10 * h; // tens\n        if (h > 0) sb.Append(words0[h] + \"Hundred \");\n        if (u > 0 || t > 0)\n        {\n            if (h > 0 || i < first) sb.Append(\"and \");\n            if (t == 0)\n                sb.Append(words0[u]);\n            else if (t == 1)\n                sb.Append(words1[u]);\n            else\n                sb.Append(words2[t - 2] + words0[u]);\n        }\n        if (i != 0) sb.Append(words3[i - 1]);\n    }\n    return sb.ToString().TrimEnd();\n}\n\nNumberToWords(563);\n\n// Output: Five Hundred Sixty Three", "label": 1}
{"text": "def get_p_tags(html):\n    soup = BeautifulSoup(html,\"html.parser\")\n    p_tags = soup.find_all('p')\n    content = []\n    for tag in p_tags:\n        content.append(tag.get_text())\n    return content\n\nhtml = \"\"\"\n<html>\n<head>\n  <title>Parsing HTML</title>\n</head>\n<body>\n  <h1>Parsing HTML</h1>\n  <p>This is the first paragraph.</p>\n  <p>This is the second paragraph.</p>\n</body>\n</html>\n\"\"\"\n\nprint(get_p_tags(html))", "label": 1}
{"text": "function daysInMonth(month) {\n    switch (month) {\n        case \"January\":\n        case \"March\":\n        case \"May\":\n        case \"July\":\n        case \"August\":\n        case \"October\":\n        case \"December\":\n            return 31;\n        case \"April\":\n        case \"June\":\n        case \"September\":\n        case \"November\":\n            return 30;\n        case \"February\":\n            return 29;\n        default:\n            throw new Error('Invalid month');\n    }\n}", "label": 1}
{"text": "54 (3^2 + 4^2 + 5^2 = 54)", "label": 1}
{"text": "The median is a statistical measure that is used to represent the middle value of a set of data points. It is calculated by arranging the given data points in ascending or descending order and taking the mean of the two middle values, if the set of data points contains an even number of values. If it contains an odd number of values, the median is simply the middle value. The median is not affected by outliers, making it a more robust measure of central tendency than the mean. It is a helpful measure when analyzing large datasets, as it can give a better representation of the data than a mean, which can be greatly influenced by outliers.", "label": 1}
{"text": "SELECT MAX(A) FROM T;", "label": 1}
{"text": "SELECT * FROM table_name WHERE id = 5;", "label": 1}
{"text": "<?php  \nfor ($i = 1; $i < 10; $i++)  \n{  \n    for ($j = 1; $j <= 10; $j++)  \n    {  \n        echo $i. \" x \". $j. \" = \". ($i*$j). \"<br/>\";  \n    }  \n    echo \"<br/>\";  \n}  \n?>", "label": 1}
{"text": "The union of sets A and B is [1,2,3,4,5,6].", "label": 1}
{"text": "def sum_even_ints(list_nums):\n    total_sum = 0\n    for num in list_nums:\n        if num % 2 == 0:\n            total_sum += num\n    return total_sum\n\nsum_even_ints([1, 2, 3, 4, 5])", "label": 1}
{"text": "class Point {\n    int x;\n    int y;\npublic:\n    Point(int _x, int _y) : x(_x), y(_y)  {}\n};", "label": 1}
{"text": "text-align: center;", "label": 1}
{"text": "//class definition \nclass Item { \n  constructor(cost, taxRate) { \n    this.cost = cost;\n    this.taxRate = taxRate;\n  }\n  \n  //calculate the cost including sales tax\n  getCostWithTax() {\n    return this.cost * (1 + this.taxRate);\n  }\n  \n} \n\n//instantiate Item and calculate cost\nlet item = new Item(10, 0.1); \nlet costWithTax = item.getCostWithTax();\nconsole.log(costWithTax); //11", "label": 1}
{"text": "//class definition\npublic class Contact {\n  private String name;\n  private String phoneNumber;\n  private String email;\n\n  public Contact(String name, String phoneNumber, String email) {\n    this.name = name;\n    this.phoneNumber = phoneNumber;\n    this.email = email;\n  }\n  \n  //getters and setters\n  public String getName(){ \n      return name;\n  }\n  public void setName(String name){\n      this.name = name;\n  }\n  public String getPhoneNumber(){ \n      return phoneNumber;\n  }\n  public void setPhoneNumber(String phoneNumber){\n      this.phoneNumber = phoneNumber;\n  }\n  public String getEmail(){ \n      return email;\n  }\n  public void setEmail(String email){\n      this.email = email;\n  }\n}", "label": 1}
{"text": "db.items.find({\"price\": {$gt: 10}});", "label": 1}
{"text": "Scanner input = new Scanner(System.in);\nint number = input.nextInt();\nSystem.out.println(number);", "label": 1}
{"text": "class Person:\n    def __init__(self, name, age=None):\n        self.name = name\n        self.age = age", "label": 1}
{"text": "fit <- lm(y ~ x1 + x2 + x3)", "label": 1}
{"text": "def gcd(a, b): \n  \n   if (a == 0): \n       return b \n       \n   if (b == 0): \n       return a \n       \n   if (a == b): \n       return a \n       \n   if (a > b): \n       return gcd(a-b, b) \n      \n   return gcd(a, b-a)", "label": 1}
{"text": "function reverseString(str) {\n  return str.split('').reverse().join(''); \n}", "label": 1}
{"text": "echo ${PATH}", "label": 1}
{"text": "def split_string(string):\n    return string.split(\" \")\n\nprint(split_string(string))", "label": 1}
{"text": "def count_letters(string):\n    letter_count = {}\n    for char in string:\n        if char not in letter_count:\n            letter_count[char] = 1\n        else:\n            letter_count[char] += 1;\n    return letter_count\n\nprint(count_letters(string))", "label": 1}
{"text": "<ul>\n  <li><a href=\"/home\">Home</a>\n <ul>\n   <li><a href=\"/about\">About</a></li>\n   <li><a href=\"/contact\">Contact</a></li>\n </ul>\n  </li>\n</ul>", "label": 1}
{"text": "def string_length(string):\n  return len(string)", "label": 1}
{"text": "import re\n\ndef remove_non_alphabetic(string):\n  return re.sub(\"[^a-zA-Z ]\", \"\", string)", "label": 1}
{"text": "const express = require('express');\nconst app = express();\n \napp.get('/', (req, res) => {\n  res.status(200).send('Hello world!');\n});\n \nmodule.exports = app;", "label": 1}
{"text": "number.toFixed(2)", "label": 1}
{"text": "sorted_dict = dict(sorted(mydict.items(), key=lambda x: x[1]))", "label": 1}
{"text": "def fibonacci_loop(n):\n    prev, curr = 0, 1\n    for _ in range(1, n):\n        prev, curr = curr, prev + curr\n    return curr\n\nif __name__ == '__main__':\n    print(fibonacci_loop(10))", "label": 1}
{"text": "def convert_anagram(word):\n    result = {}\n    for c in word:\n        result.setdefault(c, 0)\n        result[c] += 1\n    return result", "label": 1}
{"text": "import tensorflow as tf\n\n# create input layer\ninputs = tf.keras.Input(shape=(2,))\n\n# create the first layer of the network with 16 neurons\nfc1 = tf.keras.layers.Dense(16, activation=\"relu\")(inputs)\n\n# create the second layer of the network with 8 neurons\nfc2 = tf.keras.layers.Dense(8, activation=\"relu\")(fc1)\n\n# create the output layer of the network with 1 neuron (for regression)\noutputs = tf.keras.layers.Dense(1, activation=\"sigmoid\")(fc2)\n\n# create the model and compile it.\nmodel = tf.keras.Model(inputs=inputs, outputs=outputs)\nmodel.compile(optimizer='Adam', loss='mse')", "label": 1}
{"text": "15", "label": 1}
{"text": "for loop.", "label": 1}
{"text": "max_num = 2\n\nLoop 1: num = 3, max_num = 3\nLoop 2: num = 4, max_num = 4\nLoop 3: num = 6, max_num = 6\nLoop 4: num = 5, max_num = 6\n\nOutput: 6", "label": 1}
{"text": "Regex: ^([A-Za-z]{3})_([A-Za-z]{3})_([A-Za-z]{3})$", "label": 1}
{"text": "def mean(list): \n    # Finding total of the list elements \n    total = 0\n    for num in list: \n        total += num \n\n    # Calculate mean of the list \n   mean = total / len(list) \n\n    # Return the mean \n    return mean", "label": 1}
{"text": "<form>\n    <label for=\"email\">Email:</label>\n    <input type=\"text\" name=\"email\" id=\"email\" required>\n    <input type=\"submit\" value=\"Submit\">\n</form>", "label": 1}
{"text": "let student = {\n    firstName: \"John\",\n    lastName: \"Doe\",\n    grades: {\n        math: 89,\n        science: 80,\n        english: 92,\n        history: 94\n    }\n}", "label": 1}
{"text": "def extract_country_code(number):\n    # Check if number is valid\n    if len(number) == 13 and number[0] == '+':\n        # Extract the country code\n        cc = number[1:3]\n        return cc\n\nif __name__ == \"__main__\":\n    number = \"+91 983-741-3256\"\n    print(extract_country_code(number))", "label": 1}
{"text": "def count_trailing_zeroes(factorial_number):\n    \n\u00a0 \u00a0 # Initialize count \n\u00a0 \u00a0 count = 0\n\n\u00a0 \u00a0 # Keep dividing n by powers of 5 and update count\n\u00a0 \u00a0 i = 5\n\u00a0 \u00a0 while (factorial_number/i>=1):\n\u00a0 \u00a0 \u00a0 \u00a0 count += int(factorial_number/i)\n\u00a0 \u00a0 \u00a0 \u00a0 i *= 5\n\u00a0 \u00a0 \u00a0 \u00a0 \n\u00a0 \u00a0 return int(count)\n\nif __name__ == \"__main__\":\n    factorial_number = 12\n    print(count_trailing_zeroes(factorial_number))", "label": 1}
{"text": "sum = 0\nfor i in range(1, 11): \n    sum += i**2 \n \nprint(\"The sum of the square of the first 10 natural numbers is\", sum)", "label": 1}
{"text": "// create an index\nlet index = {};\n\n// add a document to the index\nlet addDocument = (document, content) => {\n  let words = content.split(' ');\n  words.forEach((word) => {\n    if (index.hasOwnProperty(word)) {\n      //if the word is already in the index, add the document to its list\n      index[word].push(document);\n    } else {\n      //add the word to the index\n      index[word] = [document];\n    }\n  });\n};\n\n// perform a search\nlet search = (query) => {\n  //array to hold the found documents\n  let found = [];\n\n  query.split(' ').forEach((word) => {\n    //check if word is in index\n    if (index.hasOwnProperty(word)) {\n      index[word].forEach((doc) => {\n        //make sure document isn't already in the list\n        if (found.indexOf(doc) == -1) {\n          found.push(doc);\n        }\n      });\n    }\n  });\n\n  //return the found documents\n  return found;\n};", "label": 1}
{"text": "# Create an empty list\nsquared_nums = []\n\n# Iterate through the given list \nfor num in nums:\n  # Calculate the square of the element\n  squared_num = num * num\n  # Append it to the new list\n  squared_nums.append(squared_num)\n\n# Print the new list\nprint(squared_nums) \n# Output: [4, 9, 16]", "label": 1}
{"text": "int[] arr = {3, 5, 7, 9, 11, 13, 15, 17, 19, 21};", "label": 1}
{"text": "Using the Object-Oriented Programming (OOP) approach in programming offers a number of advantages such as increased code reusability, easier maintenance, data hiding, and better performance. OOP makes it easier to model real-world objects and their relationships, allowing developers to reduce complexity by breaking programs down into smaller parts. This makes it easier to identify, debug and modify code. Additionally, OOP promotes the development of extensible and reusable code, cutting down on the cost and time of development. Finally, OOP allows for better tracking of data and control over which elements outside the program can modify the data.", "label": 1}
{"text": "SELECT employee_name FROM employees WHERE start_date >= '2019-01-01'", "label": 1}
{"text": "#include <iostream>\n#include <algorithm>\n\nint main()\n{\n    int arr[] = {5, 3, 7, 1, 2};\n    int n = sizeof(arr) / sizeof(arr[0]);\n\n    std::sort(arr, arr+n, std::greater<int>());\n\n    for (int i = 0; i < n; ++i)\n        std::cout << arr[i] << \" \";\n    std::cout << std::endl;\n\n    return 0;\n}", "label": 1}
{"text": "public class Student {\n    private String name;\n    private int age;\n\n    public Student(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n}", "label": 1}
{"text": "def add_list_items(list_a, list_b):\n    output = []\n    for item_a, item_b in zip(list_a, list_b):\n        output.append(item_a + item_b)\n    return output", "label": 1}
{"text": "def bubble_sort(arr):\n    n = len(arr)\n    for i in range(n-1, 0, -1):\n        for j in range(i):\n            if arr[j] > arr[j+1]:\n                arr[j+1], arr[j] = arr[j], arr[j+1]", "label": 1}
{"text": "def count_pairs(nums, k):\n    count = 0\n    # Create a set to store all the elements of the array\n    num_set = set(nums)\n    for num in nums:\n        if num + k in num_set:\n            count += 1\n\n    return count\n\nnum_diff = 3\npair_count = count_pairs(nums, num_diff)\nprint(\"Number of pairs with difference\", num_diff, \" is :\", pair_count)", "label": 1}
{"text": "function bubbleSort(arr) {\n  for (let i = arr.length-1; i > 0; i--) {\n    for (let j = 0; j < i; j++) {\n      if (arr[j] > arr[j + 1]) {\n        let temp = arr[j];\n        arr[j] = arr[j + 1];\n        arr[j + 1] = temp;\n      }\n    }\n  }\n  return arr;\n}", "label": 1}
{"text": "class Node {\n  int data;\n  Node next;\n  Node(int data) { \n    this.data = data; \n    next = null;\n  }\n}\n\nclass LinkedList {\n  Node head;\n  public void insertNode(int data) { \n    Node new_node = new Node(data); \n    if (head == null) { \n        head = new_node;\n        return;\n    }\n    Node last = head;  \n    while (last.next != null) {\n        last = last.next;\n    }\n    last.next = new_node; \n  } \n}\n\nLinkedList list = new LinkedList();\nlist.insertNode(2);\nlist.insertNode(6);\nlist.insertNode(7);\nlist.insertNode(8);\nlist.insertNode(10);", "label": 1}
{"text": "int modulo(int n, int m)\n{\n    return n % m;\n}", "label": 1}
{"text": "[2, 3, 4, 5, 9]", "label": 1}
{"text": "apiVersion: v1\nkind: Service\nmetadata:\n  name: my-service\n  labels:\n    app: my-service\nspec:\n  replicas: 3\n  ports:\n  - port: 8080\n  selector:\n    app: my-service\n  type: NodePort\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: my-service\nspec:\n  selector:\n    matchLabels:\n      app: my-service\n  replicas: 3\n  template:\n    metadata:\n      labels:\n        app: my-service\n    spec:\n      containers:\n        - name: my-service\n          image: my-service:v1\n          resources:\n            requests:\n              cpu: 500m\n              memory: 1Gi\n          env:\n            - name: NODE_ENV\n              value: production\n          ports:\n            - containerPort: 8080\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: my-service-lb\n  labels:\n    app: my-service\nspec:\n  type: NodePort\n  ports:\n  - port: 8080\n    nodePort: 30008\n  selector:\n    app: my-service", "label": 1}
{"text": "from django.http import JsonResponse\n\ndef comments_list(request):\n    if request.method == 'GET':\n        comments = Comment.objects.all()\n        comments_list = [{\n            'id': comment.id,\n            'user': comment.user.username,           \n            'content': comment.content,\n            'created_at': comment.created_at,\n            'updated_at': comment.updated_at\n        } for comment in comments]\n        return JsonResponse(comments_list, safe=False)", "label": 1}
{"text": "def filter_words(characters, words):\n    result = []\n    for word in words:\n        if set(characters).issubset(word):\n            result.append(word)\n    return result\n\nprint(filter_words(\"aeiou\", ['apple','elephant','mountain','river']))\n# Output: ['apple', 'elephant', 'river']", "label": 1}
{"text": "def count_characters_per_word(sentence):\n    words = sentence.split(' ') \n    char_count_per_word = [] \n    for word in words:\n        char_count_per_word.append(len(word)) \n    return char_count_per_word\n\nprint(count_characters_per_word(\"the quick brown fox jumps over the lazy dog\"))\n# Output: [3, 5, 5, 3, 5, 3, 4, 3]", "label": 1}
{"text": "#example {\n...\n}", "label": 1}
{"text": "def is_palindrome(sample):\n    res = True\n    i = 0\n    j = len(sample) - 1\n    while i < j:\n        if sample[i] != sample[j]:\n            res = False\n            break\n        else:\n            i += 1\n            j -= 1\n            \n    return res", "label": 1}
{"text": "# construct a lambda that multiplies the argument by two\nfunc = lambda x : x * 2", "label": 1}
{"text": "The distance between the two points is 6.244997998398398.", "label": 1}
{"text": "def sortStringArray(stringArray): \n    return sorted(stringArray)", "label": 1}
{"text": "<!DOCTYPE html>\n<html>\n<head>\n  <title>Employee Salaries</title>\n</head>\n<body>\n  <table>\n    <tr>\n        <th>Employee Name</th>\n        <th>Salary</th>\n    </tr>\n    <tr>\n        <td>John Smith</td>\n        <td>$22,000</td>\n    </tr>\n    <tr>\n        <td>Jane Doe</td>\n        <td>$21,000</td>\n    </tr>\n    <tr>\n        <td>Joseph Brown</td>\n        <td>$25,000</td>\n    </tr>\n  </table>\n</body>\n</html>", "label": 1}
{"text": "def search(dic, keyword):\n    for key, value in dic.items():\n        if keyword in key:\n            return value\n    return \"No matching keyword found!\"\nsearch(dictionary, 'Laptop')", "label": 1}
{"text": "SELECT table_name \nFROM information_schema.tables", "label": 1}
{"text": "@app.route('/users/avg_age', methods=['GET'])\ndef get_avg_age():\n    connection = sqlite3.connect(\"users_database.db\")\n    cursor = connection.cursor()\n    query = \"SELECT AVG(age) from users;\"\n    cursor.execute(query)\n    result = cursor.fetchall()\n    return json.dumps({\"avg_age\": result[0][0]})", "label": 1}
{"text": "def fibonacci(n):\n    \"\"\"\n    Generate a list with the first n Fibonacci numbers.\n    \"\"\"\n    fib_list = [0, 1]\n\n    # Generate the list and stop when n is reached\n    while len(fib_list) < n:\n        fib_list.append(fib_list[-1] + fib_list[-2])\n    \n    return fib_list\n\nif __name__ == '__main__':\n    print(fibonacci(20))", "label": 1}
{"text": "import re\n\ndef extract_words(string, letter):\n    \"\"\"\n    Extract words that start with a specific letter from a given string\n    \"\"\"\n    # Use a regular expression to match words that start with the letter\n    pattern = r\"\\b\" + letter + r\"\\w*\\b\"\n    words = re.findall(pattern, string) \n  \n    return words\n\nif __name__ == '__main__':\n    string = \"This is a test sentence\"\n    letter = \"t\"\n    print(extract_words(string, letter))", "label": 1}
{"text": "if grade >= 90:\n  letter_grade = 'A'\nelif grade >= 80:\n  letter_grade = 'B'\nelif grade >= 70:\n  letter_grade = 'C'\nelif grade >= 60:\n  letter_grade = 'D'\nelse:\n  letter_grade = 'F'", "label": 1}
{"text": "{'name': 'john', 'age': 32}", "label": 1}
{"text": "def count_letters(string_name):\n    return len(string_name)", "label": 1}
{"text": "<form> \n  <input type=\"text\" name=\"name\">\n  <button type=\"submit\">Submit</button> \n</form>", "label": 1}
{"text": "\\w+ \\w+", "label": 1}
{"text": "import java.util.HashMap; \nimport java.util.Map; \n  \npublic class Main { \n    public static void main (String[] args) \n    { \n        // Creating a HashMap \n        Map<String, Integer> hash_map = new HashMap<String, Integer>(); \n  \n        // Mapping int values to string keys \n        hash_map.put(\"Geeks\", 10); \n        hash_map.put(\"4\", 15); \n        hash_map.put(\"Geeks\", 20); \n        hash_map.put(\"Welcomes\", 25); \n        hash_map.put(\"You\", 30); \n  \n        // Displaying the HashMap \n        for (Map.Entry mapElement : hash_map.entrySet()) { \n            String key = (String)mapElement.getKey(); \n            int value = (int)mapElement.getValue(); \n            System.out.println(\"Key: \" + key + \"\\t Value: \" + value); \n        } \n    } \n}", "label": 1}
{"text": "def generateFibonacciSequence(n):\n    fib_sequence = [0,1]\n    for i in range(2,n):\n        fib_sequence.append(fib_sequence[i-1] + fib_sequence[i-2])\n        \n    return fib_sequence", "label": 1}
{"text": "echo \"<script>alert('Hello World');</script>\";", "label": 1}
{"text": "#!/bin/bash\n\n# Print factorial of a given number\n\necho \"Please enter a number:\"\nread num\n\nfactorial=1\nfor (( i=1; i<=num; i++ ))\ndo\n    factorial=$[ $factorial * $i ]\ndone\necho \"$num!=$factorial\"", "label": 1}
{"text": "GET /scrape\nParameters:\nurl (required): URL of the website to be scraped\nselectors (optional): list of CSS selectors\n\nResponse:\n{\n    \"data\": [\n        {\n            \"selector\": \"h2>a\",\n            \"text\": \"Example Title\"\n        },\n        {\n            \"selector\": \"#main-image\",\n            \"url\": \"http://example.com/main-image.jpg\"\n        }\n    ]\n}", "label": 1}
{"text": "import matplotlib.pyplot as plt\nimport numpy as np\n \nmonths = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun']\nsales = [40000, 42000, 46000, 50000, 60000, 63000]\n \nfig, ax = plt.subplots()\nax.plot(months, sales, marker='o')\nax.set_title('Monthly Sales')\nax.set_xlabel('Month')\nax.set_ylabel('Sales ($)')\nax.set_ylim(0, max(sales) + 5000)\n \nplt.show()", "label": 1}
{"text": "class Circle\n  def initialize(r)\n    @r = r\n  end\n \n  def area\n    @r*@r*Math::PI\n  end\nend", "label": 1}
{"text": "import json\n\ndata = '{\"name\":\"John\", \"age\":30, \"city\":\"New York\"}'\n\n# parse the JSON string\nparsed_string = json.loads(data) \n\n# print the individual elements\nname = parsed_string[\"name\"]\nage = parsed_string[\"age\"]\ncity = parsed_string[\"city\"]\n\nprint(name)\nprint(age)\nprint(city)", "label": 1}
{"text": "greeting_message = \"hello world\"", "label": 1}
{"text": "let myArray = [1,2,3,4,5,6,7,8,9,10];", "label": 1}
{"text": "function reverseString(str) {\n        if (str.length === 0) {\n            return \"\";\n        }\n        return reverseString(str.slice(1)) + str[0];\n    }\n\n    console.log(reverseString(\"My name is John\"));", "label": 1}
{"text": "#include <iostream>\n\nint main()\n{\n   int m = 3;\n   std::cout << m * m << std::endl;\n\n   return 0;\n}\n\n// Compile and run with this command\ng++ program.cpp -o program\n./program", "label": 1}
{"text": "#include<iostream> \n#include<vector> \n  \nusing namespace std; \n\n\n// Class to represent a Stack \nclass Stack \n{\n    // container to store elements \n    vector<int> v;    \n    \npublic: \n    void push(int data); \n    bool empty(); \n    void pop(); \n    int top(); \n}; \n\nvoid Stack::push(int data) \n{ \n    // inserting an element \n    // on the top of the stack \n    v.push_back(data); \n} \n\nbool Stack::empty() \n{ \n    // checking if the stack is empty \n    return v.size() == 0; \n} \n\nvoid Stack::pop() \n{ \n    // removing element \n    // from the top of the stack \n    if (!empty()) \n    { \n        v.pop_back(); \n    } \n} \n\nint Stack::top() \n{ \n    // returns the top element \n    // of the stack \n    return v.back(); \n}", "label": 1}
{"text": "// Print the elements to the console\nlet domElements = document.querySelectorAll('.container');\ndomElements.forEach(el => {\n    console.log(el);\n    console.log(el.firstChild);\n    console.log(el.firstChild.firstChild);\n    console.log(el.firstChild.lastChild);\n});", "label": 1}
{"text": "^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,4}$", "label": 1}
{"text": "def reverse_sentence(sentence):\n    words = sentence.split()\n    reversed_words = words[::-1]\n    reversed_sentence = ' '.join(reversed_words)\n    return reversed_sentence\n\nif __name__ == '__main__': \n    sentence = \"The quick brown fox jumps over the lazy dog.\"\n    print(reverse_sentence(sentence))", "label": 1}
{"text": "public class ArmstrongNumber { \n\tpublic static boolean armstrongNumber(int number) \n\t{ \n\t\tint result = 0, originalNumber, remainder; \n\n\t\toriginalNumber = number; \n\n\t\t// Check if the number is Armstrong number \n\t\twhile (originalNumber != 0) { \n\t\t\tremainder = originalNumber % 10; \n\t\t\tresult += Math.pow(remainder, 3); \n\t\t\toriginalNumber /= 10; \n\t\t} \n\n\t\tif (result == number) \n\t\t\treturn true; \n\t\telse\n\t\t\treturn false; \n\t} \n\t\t\n\tpublic static void main(String[] args) \n\t{ \n\t\tint number = 153; \n\t\tboolean isArmstrong = \n\t\t\tarmstrongNumber(number); \n\t\tif (isArmstrong) \n\t\t\tSystem.out.println(number + \n\t\t\t\t\t\" is an Armstrong number.\"); \n\t\telse\n\t\t\tSystem.out.println(number + \n\t\t\t\t\t\" is not an Armstrong number.\"); \n\t} \n}", "label": 1}
{"text": "SELECT COUNT(*) \nFROM courses;", "label": 1}
{"text": "function getUserName(user){\n return user.name;\n}", "label": 1}
{"text": "public static double findAvg(int[] arr) {\n  int sum = 0;\n\n  for (int i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n\n  double avg = (double)sum / (double)arr.length;\n\n  return avg;\n}", "label": 1}
{"text": "import re\n\nregex = r\"\\ban\\sapple\\s\\ba\\sday\\skeeps\\sthe\\sdoctor\\saway\\b\"", "label": 1}
{"text": "def unique(arr):\n    unique_list = []\n    for el in arr:\n        if el not in unique_list:\n            unique_list.append(el)\n    return unique_list", "label": 1}
{"text": "def sort_floats(arr): \n    arr.sort(key=float) \n    return arr", "label": 1}
{"text": "def print_odd(numbers):\n    odd_numbers = []\n    for num in numbers:\n        if num % 2 != 0:\n            odd_numbers.append(num)\n    return odd_numbers\n\nif __name__ == '__main__':\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n    print(print_odd(numbers))", "label": 1}
{"text": "def form_list_from_list(list1, list2):\n    return [list1[i] + list2[i] for i in range(len(list1))]\n\nif __name__ == '__main__':\n    list1 = [1, 2, 3] \n    list2 = [4, 5, 6]\n    print(form_list_from_list(list1, list2))", "label": 1}
{"text": "[4, 5, 6]", "label": 1}
{"text": "for (let num = 0; num < 5; num++) {\n    console.log(num);\n}", "label": 1}
{"text": "SELECT * FROM Employees ORDER BY Employment_Date ASC;", "label": 1}
{"text": "package main\n\nimport \"fmt\"\n\nfunc KelvinToCelsius(k float64) float64 {\n    c := k - 273.15\n    return c\n}\n\nfunc main() {\n    k := 300.15\n    c := KelvinToCelsius(k)\n    fmt.Printf(\"%.2f kelvin is equal to %.2f celsius.\\n\", k, c)\n}", "label": 1}
{"text": "def print_leap_years(start_year, end_year): \n    for year in range(start_year, end_year + 1):\n        if (year % 4 == 0 and year % 100 != 0) or year % 400 == 0:\n            print(year)\n\nprint_leap_years(2015, 2050)", "label": 1}
{"text": "SELECT *\nFROM table\nWHERE sky = 'blue';", "label": 1}
{"text": "SELECT *\nFROM Students\nWHERE Age BETWEEN 18 and 25;", "label": 1}
{"text": "from machine import Pin\nled = Pin(0, Pin.OUT)\nled.on()", "label": 1}
{"text": "class Test:\n    def print_name(self, name):\n        print(name)", "label": 1}
{"text": "public static int ReverseDigits (int num) {\n   int result = 0;\n   while (num > 0) {\n      int temp = num % 10;\n      result = (result * 10) + temp;\n      num = num / 10; \n   }\n   return result;\n}", "label": 1}
{"text": "var divs = document.getElementsByTagName('div');\nfor (var i = 0; i < divs.length; i++) {\n    console.log(divs[i].innerHTML);\n}", "label": 1}
{"text": "public static List<List<Integer>> findSumPairs(int arr[], int sum) {\n    List<List<Integer>> result = new ArrayList<>();\n    Map<Integer, Integer> map = new HashMap<>();\n \n    for (int i = 0; i < arr.length; i++) {\n        int target = sum - arr[i];\n        if (map.containsKey(target)) {\n            result.add(Arrays.asList(map.get(target), i));\n        }\n        map.put(arr[i], i);\n    }\n    return result;\n}", "label": 1}
{"text": "a {\n    text-decoration: underline;\n}", "label": 1}
{"text": "class Point3D {\n    var x: Double\n    var y: Double\n    var z: Double\n \n    init(x: Double, y: Double, z: Double) {\n        self.x = x\n        self.y = y\n        self.z = z\n    }\n}", "label": 1}
{"text": "import java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        \n        int[] numList = new int[5];\n        int sum = 0;\n        \n        for(int i=0;i<numList.length;i++){\n            System.out.println(\"Enter number \"+(i+1));\n            numList[i] = sc.nextInt();\n            sum += numList[i];\n        }\n        \n        double avg = (double)sum/numList.length;\n        System.out.println(\"Average = \"+avg);\n        \n    }\n}", "label": 1}
{"text": "var visitedSites = [\"www.facebook.com\", \"www.google.com\", \"www.yahoo.com\"];\nconsole.log(\"Visited sites today: \" +visitedSites);", "label": 1}
{"text": "The purpose of SQL is to manage data stored in relational databases and to manipulate data in the database by performing operations such as creating, updating, and deleting records. It is also used to define and manipulate data in the database. By using SQL, users can combine and analyze data from multiple sources.", "label": 1}
{"text": "my_dict = {\n \"name\": \"John\",\n \"age\": 17,\n \"gender\": \"male\",\n \"height\": 180,\n \"hobbies\": [\"basketball\", \"reading\", \"traveling\"]\n}", "label": 1}
{"text": "public static string ReplaceAwithO(string input){\n  return input.Replace('a', 'o');\n}", "label": 1}
{"text": "import java.util.Scanner;\n\npublic class ReverseString {\n\n  public static void main(String[] args) {\n    Scanner scanner = new Scanner(System.in);\n    System.out.print(\"Enter a string : \");\n    String inputString = scanner.nextLine();\n    String reversedString = \"\";\n\n    for(int i=inputString.length()-1; i>=0; i--) {\n      reversedString = reversedString + inputString.charAt(i);\n    }\n    System.out.println(\"The reversed string is : \" + reversedString);\n  }\n\n}", "label": 1}
{"text": "#!/bin/bash\n\n# Install cURL\nsudo apt install curl\n\n# Connect to the API end-point\ncurl https://example.com/api/users > user_details.json\n\n# Print the list of users\ncat user_details.json", "label": 1}
{"text": "def find_average(list):\n    sum = 0\n    for num in list:\n        sum += num\n    return sum/len(list)", "label": 1}
{"text": "Merging two sorted lists involves examining elements of each list and inserting them in order into a third list. This process continues until all elements from the two lists have been inserted into the third resulting list. The algorithm requires that the two starting lists be in sorted order, although the elements can be in any order (ascending, descending, or random) as long as each list is sorted.", "label": 1}
{"text": "#include<iostream>\n#include<string>\n\nstd::string remove_extra_spaces(const std::string& str) { \n    std::string result;\n  \n    int n = str.length(); \n    bool isPreviousCharSpace = false; \n  \n    for (int i = 0; i < n; i++) { \n        char ch = str[i]; \n  \n        if (ch == ' ' && !isPreviousCharSpace) { \n            result += ch; \n            isPreviousCharSpace = true; \n        } \n  \n        else if (ch != ' ') { \n            result += ch; \n            isPreviousCharSpace = false; \n        } \n    } \n  \n    return result; \n} \n\nint main() \n{ \n    std::string str = \"  Coding     is     Fun   \"; \n    std::cout << remove_extra_spaces(str) << std::endl; \n    return 0; \n} \n\n// Output: Coding is Fun", "label": 1}
{"text": "def binary_search(arr, x): \n    low = 0\n    high = len(arr) - 1\n    while low <= high: \n        mid = (high+low)//2\n        if arr[mid] < x: \n            low = mid + 1\n        elif arr[mid] > x: \n            high = mid - 1\n        else: \n            return mid \n  \n    return -1", "label": 1}
{"text": "The first common ancestor of node 1 (15) and node 2 (16) is 14.", "label": 1}
{"text": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Student Records</title>\n</head>\n<body>\n    <h1>Student Records</h1>\n    <table>\n        <tr>\n            <th>Name</th>\n            <th>Age</th>\n            <th>Gender</th>\n        </tr>\n        <tr>\n            <td>Jerry</td>\n            <td>21</td>\n            <td>Male</td>\n        </tr>\n        <tr>\n            <td>Janice</td>\n            <td>18</td>\n            <td>Female</td>\n        </tr>\n        <tr>\n            <td>Jack</td>\n            <td>20</td>\n            <td>Male</td>\n        </tr>\n    </table>\n</body>\n</html>", "label": 1}
{"text": "int findMaximum(int arr[], int size)\n{\n    int max = arr[0];\n    for (int i=1; i<size; i++)\n        if (arr[i] > max)\n           max = arr[i];\n \n    return max;\n}", "label": 1}
{"text": "An element can be inserted into a pre-existing array using the JavaScript Array.prototype.push() method. The push() method takes a single element as an argument and appends it to the end of the array. For example, to insert the value 7 into an array, you could use the following syntax: array.push(7);", "label": 1}
{"text": "def mean(number_list):\n    return sum(number_list) / len(number_list)\n \naverage = mean(number_list)\nprint(average)\n\n# Output: 6.166666666666667", "label": 1}
{"text": "A regular expression (regex) is a sequence of characters that define a search pattern used to match strings or pieces of text. It can be used for searching, validating and manipulating text.", "label": 1}
{"text": "def LongestCommonSubsequence(str1, str2):\n    n = len(str1)\n    m = len(str2)\n    t = [[0 for j in range(m+1)] for i in range(n+1)]\n    \n    for i in range(1, n+1): \n        for j in range(1, m+1):  \n            if str1[i-1] == str2[j-1]: \n                t[i][j] = 1 + t[i-1][j-1] \n            else: \n                t[i][j] = max(t[i-1][j], t[i][j-1])   \n    return t[n][m]", "label": 1}
{"text": "def replace_kth_smallest(nums, k):\n    min_num = min(nums)\n    min_count = nums.count(min_num)\n    if k > min_count:\n        k -= min_count\n        nums.remove(min_num)\n    nums[k-1] = 0\n    return nums", "label": 1}
{"text": "def second_highest_num(arr):\n  arr.sort()\n  return arr[-2]", "label": 1}
{"text": "def is_prime(num):\n    if num <= 1: \n        return False\n    for i in range(2, num): \n        if num % i == 0: \n            return False\n    return True", "label": 1}
{"text": "all_equal = all(x == 10 for x in [10, 10, 10])", "label": 1}
{"text": "for x in [1,2,3,4]:\n    print(x)\n    \n# Output:\n1\n2\n3\n4", "label": 1}
{"text": "<img src=\"output-graph.png\" width=\"400\" height=\"200\" />", "label": 1}
{"text": "int c = a + b;", "label": 1}
{"text": "int max;\n\nif (a > b) {\n max = a;\n} else {\n max = b;\n}", "label": 1}
{"text": "String[] strArray = {\"1\", \"2\", \"3\", \"4\"};\nint[] intArray = Arrays.stream(strArray)\n                            .mapToInt(Integer::parseInt)\n                            .toArray();", "label": 1}
{"text": "public static int minValue(int[] arr) {\n int minValue = arr[0];\n for (int i = 1; i < arr.length; i++) {\n if (arr[i] < minValue) {\n minValue = arr[i];\n }\n }\n return minValue;\n}", "label": 1}
{"text": "function removeDuplicates(arr) {\n  let unique = arr.filter((v, i, a) => a.indexOf(v) === i);\n  return unique;\n}\n\nlet arr = [1, 2, 3, 4, 4, 5];\nlet result = removeDuplicates(arr);\nconsole.log(result); // [1, 2, 3, 4, 5]", "label": 1}
{"text": "class Rectangle:\n  def __init__(self, width, height):\n    self.width = width\n    self.height = height\n    self.area = width * height", "label": 1}
{"text": "# function to find all the substrings of a given string  \ndef substr(string):  \n    length = len(string) \n  \n    # Weighted Index of the string  \n    w_index = 0\n      \n    list_substr = [] \n  \n    # Run a loop from 0 to n-1 \n    while w_index < length: \n  \n        # Run inner loop from w_index + 1 to n  \n        s_index = w_index + 1\n        while s_index < length + 1: \n            list_substr.append(string[w_index:s_index])\n            s_index += 1\n          \n        w_index += 1\n          \n    return list_substr\n\n# Test program \ns = \"abcdefg\"\nprint(substr(s)) \n\n# Output\n# ['a', 'ab', 'abc', 'abcd', 'abcde', 'abcdef', 'abcdefg', 'b', 'bc', 'bcd', 'bcde', 'bcdef', 'bcdefg', 'c', 'cd', 'cde', 'cdef', 'cdefg', 'd', 'de', 'def', 'defg', 'e', 'ef', 'efg', 'f', 'fg', 'g']", "label": 1}
{"text": "const toggleMode = () => {\n  let mode = localStorage.getItem(\"mode\"); \n  if (mode) {\n    document.body.className = mode;\n    mode === \"dark-mode\" ? mode = \"light-mode\" : mode = \"dark-mode\";\n    localStorage.setItem(\"mode\", mode);\n  } else {\n    localStorage.setItem(\"mode\", \"dark-mode\");\n    document.body.className = \"dark-mode\";\n  }\n}\n\ntoggleMode()", "label": 1}
{"text": "const alphabetize = (str) => {\n    const words = str.split(' ');\n    words.sort();\n    return words;\n};\n\nlet sortedWords = alphabetize('Hello World How Are You');\nconsole.log(sortedWords); // Output: ['Are', 'Hello', 'How', 'You', 'World']", "label": 1}
{"text": "const mainHeading = document.getElementById('main-heading');", "label": 1}
{"text": "The K-Means Clustering Algorithm can be used to partition a data set into k distinct clusters of samples such that each sample belongs to the cluster with the nearest mean. It can be used for tasks such as data segmentation, anomaly detection, customer segmentation and image compression.", "label": 1}
{"text": "function isSorted(arr) {\n  for (let i=1; i<arr.length; i++) {\n    if (arr[i] < arr[i-1]) return false;\n  }\n  return true;\n}", "label": 1}
{"text": "The logical operator being used is the \"or\" operator (||).", "label": 1}
{"text": "2, 6, 7, 1, 5, 4, 4, 7, 1, 6, 8, 9, 4, 1, 3, 4, 5, 10, 3, 7, 1, 8, 10, 8, 8, 2, 10, 7, 5, 10, 8, 7, 5, 6, 1, 7, 8, 2, 8, 7, 5, 1, 3, 7, 10, 2, 10, 7, 5, 6, 9, 2, 4, 2, 1, 2, 5, 2, 4, 7, 6, 2, 4, 7, 1, 2, 7, 10, 4, 6, 7, 4, 1, 5, 7, 3, 8, 4, 7, 10, 6, 8, 2, 9, 2, 5, 2, 3, 6, 4, 9, 4, 2, 6, 7", "label": 1}
{"text": "SELECT * FROM Orders WHERE status = 'active';", "label": 1}
{"text": "{\"name\": \"John Smith\", \"age\": 28, \"department\": \"Engineering\"}", "label": 1}
{"text": "A hash table is an ideal data structure for storing and retrieving large amounts of textual data, as it provides an efficient way to map and access data using a key-value pair. Hash tables use a hashing algorithm to efficiently map each key-value pair to a specific location within the table, making it much easier and faster to access any element.", "label": 1}
{"text": "# Find the probability of a random variable following a normal distribution with a mean of 10 and a standard deviation of 2.\nfrom scipy.stats import norm\n\nprob = norm.pdf(x, 10, 2)\n\nprint(prob) # Output: 0.17603266338214976", "label": 1}
{"text": "# Extract the list of urls using the beautifulsoup library\nfrom bs4 import BeautifulSoup\n\nsoup = BeautifulSoup(html_text, 'html.parser')\nurls = [link.get('href') for link in soup.find_all('a')]\n\nprint(urls) # Output: ['http://example.com', 'http://example2.com']", "label": 1}
{"text": "import time\n\ndef log_time(func):\n    def inner(*args, **kwargs):\n        start = time.time()\n        result = func(*args, **kwargs)\n        end = time.time()\n\n        print(f'Function {func.__name__} took {end-start} sec to run')\n\n        return result\n    return inner\n\n@log_time\ndef sum_function(a, b):\n    return a + b", "label": 1}
{"text": "import math\n\ndef sphere_volume(radius):\n    return (4*math.pi*radius*radius*radius)/3", "label": 1}
{"text": "def reverse_string(s):\n    return s[::-1]", "label": 1}
{"text": "public class Student { \n   \n  private String firstname; \n  private String lastname; \n  private int age; \n  private String gender; \n   \n  public Student(String firstname, String lastname, int age, String gender) { \n    this.firstname = firstname; \n    this.lastname = lastname; \n    this.age = age; \n    this.gender = gender; \n  } \n   \n  // getters and setters \n}", "label": 1}
{"text": "def product(nums):\n  total = 1\n  for num in nums:\n    total *= num\n  return total", "label": 1}
{"text": "import { Directive, ElementRef, HostListener } from '@angular/core';\n\n@Directive({\n selector: '[appNotifyOnChange]'\n})\nexport class NotifyOnChangeDirective {\n constructor(private el: ElementRef) { }\n\n@HostListener('input', ['$event'])\nonChange(event) {\n alert('Value changed to: ' + event.target.value);\n}\n}", "label": 1}
{"text": "Accesing elements of the array can be done by using the index of the array. For example, for a two-dimensional array, the elements can be accessed using the following syntax: array[i][j], where i is the index of the outer array, and j is the index of the inner array. For a three-dimensional array, the syntax would be array[i][j][k].", "label": 1}
{"text": "SELECT name FROM employees WHERE department = 'IT';", "label": 1}
{"text": "const http = require('http');\n\nconst server = http.createServer(function (req, res) {\n  if(req.url == '/'){\n    res.writeHead(200);\n    res.end('Hello World!');\n  }\n});\n\nserver.listen(3000);", "label": 1}
{"text": "def calculateAnagrams(string): \n   \n    # Create a list of all permutations \n    all_permutations = [''.join(i) for i in permutations(string)] \n   \n    # Return the count of all permutations \n    return len(all_permutations) \n  \n# Driver code \nprint(calculateAnagrams('listen'))", "label": 1}
{"text": "def invoke_print_statements(string):\n    exec(string) \n    \n# Driver Code \nif __name__ == '__main__': \n    string = \"print('Hello, World!')\\nprint('Hello, Python!')\"\n    invoke_print_statements(string)", "label": 1}
{"text": "def get_prime_numbers(start, end):\n    prime_numbers = []\n    for num in range(start, end + 1):\n        if num > 1:\n            for i in range(2, num):\n                if (num % i) == 0:\n                    break\n            else:\n                prime_numbers.append(num)\n    return prime_numbers\n    \n# print list of prime numbers\nprint(get_prime_numbers(10, 15))  \n# Output: [11, 13, 15]", "label": 1}
{"text": "def fizzbuzz_pattern(n):\n    for num in range(n, n+16):\n        if num % 3 == 0 and num % 5 == 0:\n            print(\"FizzBuzz\")\n        elif num % 3 == 0:\n            print(\"Fizz\")\n        elif num % 5 == 0:\n            print(\"Buzz\")\n        else:\n            print(num)", "label": 1}
{"text": "def parse_ip_address(ip):\n    octets = ip.split(\".\")\n    return octets", "label": 1}
{"text": "def rot13(string):\n    encoded = \"\"\n    for char in string:\n        if char.isalpha():\n            ascii_val = ord(char)\n            ascii_val += 13\n            if ascii_val > ord('z'):\n                ascii_val -= 26\n            encoded += chr(ascii_val)\n        else:\n            encoded += char\n    return encoded", "label": 1}
{"text": "def is_sorted(array):\n for i in range(len(array)-1):\n if array[i] > array[i+1]:\n return False\n return True", "label": 1}
{"text": "public static double stringToDecimal(String numString) {\n   double result = 0;\n\n   String[] tokens = numString.split(\"\\\\.\");\n   result += Integer.parseInt(tokens[0]);\n   \n   int power = 1;\n   for (int i = tokens[1].length(); i > 0; i--) {\n        power *= 10;\n        result += Integer.parseInt(tokens[1].charAt(i - 1) +\"\") * 1.0 / power;\n   }\n\n   return result;\n}", "label": 1}
{"text": "SELECT product_name, COUNT(*) as num_orders \nFROM orders \nGROUP BY product_name;", "label": 1}
{"text": "ABC*+", "label": 1}
{"text": "mov ax, 27    ; put x = 27 in ax\nmov bx, 11    ; put y = 11 in bx\nadd ax, bx    ; add ax and bx, sum is stored in ax\n; ax = 38", "label": 1}
{"text": "public static String[] findPalindromes(String[] words) {\n    ArrayList<String> result = new ArrayList<>();\n    for (String word : words) {\n        if (word.length() >= 2 && isPalindrome(word)) {\n            result.add(word);\n        }\n    }\n    return result.toArray(new String[result.size()]);\n}  \n\npublic static boolean isPalindrome(String str) {\n    int left = 0;\n    int right = str.length()-1;\n    \n     while (left < right) { \n        if (str.charAt(left) != str.charAt(right)) \n            return false; \n  \n        left++; \n        right--; \n    } \n  \n    return true; \n}", "label": 1}
{"text": "function mysteryFunction(x) {\n    let result = 1;\n    for (let i = 1; i <= x; i++) {\n        result = result * i;\n    }\n    return result;\n}", "label": 1}
{"text": "import numpy as np \nimport tensorflow as tf\n\n# Create the model \nmodel = tf.keras.models.Sequential([\n  tf.keras.layers.Dense(2, activation='sigmoid', input_shape=(3,))\n]) \n\n# Compile the model \nmodel.compile(optimizer='adam', loss='mean_squared_error', metrics=['accuracy']) \n\n# Create the input and output data \ninput_data = np.array([[x1, x2, x3]])\noutput_data = np.array([[y1, y2]])\n\n# Train the model \nmodel.fit(input_data, output_data, epochs=100)", "label": 1}
{"text": "False", "label": 1}
{"text": "def indexString(listStr, s):\n    output = []\n    for i in listStr:\n        if i.find(s) != -1 :\n            output.append(i)\n    return output", "label": 1}
{"text": "<!DOCTYPE html>\n<html>\n<head>\n <title>My Webpage</title>\n</head>\n\n<body>\n<div>\n <p style=\"color:red;\">This is paragraph one.</p>\n \n <p style=\"color:red;\">This is paragraph two.</p>\n</div>\n</body>\n</html>", "label": 1}
{"text": "Here is a possible algorithm to count the number of nodes in a binary tree:\n\n1. Initialize count as 0\n2. If the tree is empty, return 0.\n3. Else\n   a. Recursively call the procedure on left subtree.\n   b. Add 1 to the `count` variable.\n   c. Recursively call the procedure on right subtree.\n4. Return count.", "label": 1}
{"text": "selected_records = list(filter(lambda x:x['name']=='John', records))", "label": 1}
{"text": "new_list = list(set(list))", "label": 1}
{"text": "list_items = [item.replace(\"'\", \"\").replace(\"(\", \"\").replace(\")\", \"\").split(\",\") for item in s[1:-1].split(\"), (\")]\nlist_of_tuples = [(item[0], int(item[1])) for item in list_items]", "label": 1}
{"text": "Use list comprehension to reduce the amount of code used, such as:\n\nprint([item for item in myList])", "label": 1}
{"text": "class Student:\n    def __init__(self, id, name, age):\n        self.id = id\n        self.name = name\n        self.age = age", "label": 1}
{"text": "def is_rotation(str1, str2):\n    if len(str1) != len(str2):\n        return False\n        \n    temp = str1 + str1\n    return str2 in temp", "label": 1}
{"text": "let numbers = [3, 1, 2, 5, 4]\n\nnumbers.sort(by: {$0 < $1})", "label": 1}
{"text": "<html>\n    <head>\n        <title>Webpage Title</title>\n    </head>\n    <body>\n        <h1>Webpage Title</h1>\n        <p>Paragraph 1</p>\n        <p>Paragraph 2</p>\n    </body>\n</html>", "label": 1}
{"text": "function isPrime(num) {\n    if (num <= 1) { \n        return false; \n    }\n    \n    for (let i = 2; i < num; i++) {\n        if (num % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}", "label": 1}
{"text": "#include<iostream>\n \nusing namespace std;\n \nint main()\n{\n    float celsius, fahrenheit;\n  \n    cout << \"Enter the temperature in Celsius: \";\n    cin >> celsius;\n \n    fahrenheit = (celsius * 9 / 5) + 32;\n \n    cout << \"The temperature in Fahrenheit is: \" << fahrenheit;\n \n    return 0;\n}", "label": 1}
{"text": "def reverse_array(arr)\n  arr.reverse_each { |num| puts num }\nend", "label": 1}
{"text": "#!/bin/bash\n\n# store the input into variables\nnum1=$1\nnum2=$2\n\n# calculate the product\nproduct=$((num1*num2))\n\n# print the result\necho \"$num1 x $num2 = $product\"", "label": 1}
{"text": "for(int i = 0; i < array.length; i++){\n    array[i] = array[i] - 100;\n}", "label": 1}
{"text": "const title = \"My Page\"\nconst newPage = `<html><head><title>${title}</title><head></html>`;", "label": 1}
{"text": "import pandas as pd\n\ndf = pd.DataFrame()", "label": 1}
{"text": ".blackBorder {\n    border: 1px solid black;\n    background-color: red;\n}", "label": 1}
{"text": "@media only screen and (max-width: 767px) { \n    .text-center {\n        text-align: center;\n    }\n}", "label": 1}
{"text": "def reverse(num):\n    arr = []\n    while num > 0:\n        digit = num % 10\n        arr.append(digit)\n        num //= 10\n    return arr\n\nprint(reverse(12345)) # prints [5, 4, 3, 2, 1]", "label": 1}
{"text": "#!/bin/bash\n\nsentence=\"This is a test sentence to test the most frequent word\"\n\nwords=($(echo $sentence | tr ' ' '\\n'))\n\nmostFrequentWord=''\nmostFrequentWordCount=0\n\nfor ((i=0; i<${#words[@]}; i++))\ndo\n  word=${words[i]}\n  count=0\n  for ((j=0; j<${#words[@]}; j++))\n  do\n    if [[ \"$word\" == \"${words[j]}\" ]]\n    then\n      count=$((count+1))\n    fi\n  done\n  if [[ $count -gt $mostFrequentWordCount ]]\n  then\n    mostFrequentWordCount=$count\n    mostFrequentWord=$word\n  fi\ndone\n\necho \"The most frequent word is: \"$mostFrequentWord", "label": 1}
{"text": "list1 = [2, 5, 3, 1]  \nprint(min(list1), max(list1))", "label": 1}
{"text": "list1 = [1, 2, 3, 4, 5]\n\nprint(len(list1))", "label": 1}
{"text": "const evenNumbers = numbers.filter(number => number % 2 == 0);\nconst oddNumbers = numbers.filter(number => number % 2 != 0);", "label": 1}
{"text": "SELECT * FROM users WHERE age BETWEEN 18 AND 25;", "label": 1}
{"text": "print(\"<p>Hello World</p>\")", "label": 1}
{"text": "x.append(\"Giraffe\")", "label": 1}
{"text": "def convert_base_10_to_base_8(number):\n   binary_number = bin(number)[2:]\n   octal_number = oct(int(binary_number, 2))[2:]\n   return octal_number", "label": 1}
{"text": "int countVowels(char text[])\n{\n    int count = 0;\n    for (int i = 0; text[i] != '\\0'; i++) \n    {\n        if (text[i] == 'a' || text[i] == 'e' || text[i] == 'i' || text[i] == 'o' || text[i] == 'u' || text[i] == 'A'|| text[i] == 'E' || text[i] == 'I' || text[i] == 'O' || text[i] == 'U')\n            count++;\n    }\n    return count;\n}", "label": 1}
{"text": "sum=$(echo \"$1 + $2\" | bc -l)\necho $sum", "label": 1}
{"text": "#include<stdio.h>\n\nint main(){\n  char sentence[100];\n  int count = 0;\n  scanf(\"%[^\\n]s\", sentence);\n  for (int i=0; sentence[i]!='\\0'; i++){\n    count++;\n  }\n  printf(\"Number of characters: %d\\n\", count);\n  return 0;\n}", "label": 1}
{"text": "SELECT name, address, email FROM customers\nWHERE last_order_date > CURRENT_DATE - INTERVAL 30 DAY", "label": 1}
{"text": "The surface area of a sphere with radius 6m is 113.1 m2.", "label": 1}
{"text": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-timer',\n  template: `\n  {{ counter }}\n  `\n})\nexport class TimerComponent {\n  counter = 0;\n\n  constructor() {\n    setInterval(() => {\n      this.counter++;\n    }, 1000);\n  }\n}", "label": 1}
{"text": "console.log(myVar);", "label": 1}
{"text": "<input type=\"text\" id=\"name\" />", "label": 1}
{"text": "// Given triangle side lengths\nfloat side1 = 4;\nfloat side2 = 4;\nfloat side3 = 4;\n\nif (side1 == side2 && side2 == side3) {\n  // Equilateral Triangle\n  print(\"This triangle is an equilateral triangle.\");\n} \nelse if (side1 == side2 || side2 == side3 || side1 == side3) {\n  // Isosceles Triangle\n  print(\"This triangle is an isosceles triangle.\");\n} \nelse {\n  // Scalene Triangle\n  print(\"This triangle is a scalene triangle.\");\n}", "label": 1}
{"text": "SELECT * FROM customer_table \nWHERE order_date > (CURRENT_DATE - INTERVAL '30' DAY);", "label": 1}
{"text": "SELECT EmployeeNumber\nFROM Employees\nORDER BY EmployeeNumber DESC\nLIMIT 5;", "label": 1}
{"text": "const renderTextArea = text => {\n  return (\n    <textarea value={text} />\n  );\n};", "label": 1}
{"text": "def max_index(lst): \n    max = 0\n    max_index = 0\n    for i in range(len(lst)): \n        if lst[i] > max: \n            max = lst[i]\n            max_index = i\n    return max_index", "label": 1}
{"text": "def non_shared(list1, list2):\n    non_shared_elements = [element for element in list1 if element not in list2]\n    return non_shared_elements", "label": 1}
{"text": "def dec2hex(n):\n    return hex(n)[2:]", "label": 1}
{"text": "def add_dict_entry(d, key, value):\n    d[key] = value\n    return d", "label": 1}
{"text": "function randomString(n) {\n  const possibleCharacters = \"abcdefghijklmnopqrstuvwxyz0123456789\";\n  const possibleLength = possibleCharacters.length;\n  let generatedString = '';\n  \n  for (let i = 0; i < n; i++) {\n    let randomIndex = Math.floor(Math.random() * possibleLength);\n    let randomCharacter = possibleCharacters.charAt(randomIndex);\n    generatedString += randomCharacter;\n  }\n  \n  return generatedString;\n}\n\nconsole.log(randomString(8));", "label": 1}
{"text": "import string\nimport random\n\ndef generate_pin():\n pin = '';\n chars = string.ascii_lowercase + string.ascii_uppercase + string.digits\n for i in range(6):\n  pin += random.choice(chars)\n return pin\n\nprint(generate_pin())", "label": 1}
{"text": "SELECT * \nFROM (SELECT table, AVG(column) \n      FROM table \n      GROUP BY table) \nWHERE AVG(column) < 10", "label": 1}
{"text": "def my_func(a, b, c):\n    return a + b + c", "label": 1}
{"text": "programming_str = 'Python is a great programming language'[17:]", "label": 1}
{"text": "for item in items:", "label": 1}
{"text": "def get_avg_temp(days, temps):\n    total = 0\n    for i in range(len(days)):\n        total += temps[i]\n        \n    avg = total / len(days)\n    \n    return avg", "label": 1}
{"text": "def is_prime(n):\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n    \nprime_array = []\nfor i in range(2, 51):\n    if is_prime(i):\n        prime_array.append(i)", "label": 1}
{"text": "new_list = []\n\nfor item in list_one: \n    if item['Name'] + item['Lastname'] not in new_list: \n        new_list.append(item['Name'] + item['Lastname']) \n    if item['Name'] + dict_one[item['Name']] not in new_list: \n        new_list.append(item['Name'] + dict_one[item['Name']])\n\nfinal_list = [item for item in list_one if item['Name'] + item['Lastname'] in new_list]", "label": 1}
{"text": "def is_list_empty(head):\n    if head == None:\n        return True\n    else:\n        return False", "label": 1}
{"text": "#include <iostream> \n#include <cstdlib> \n#include <ctime> \n  \n// Main function \nint main() \n{ \n    srand((unsigned)time(0)); \n    for (int i = 0; i < 100; i++) \n    { \n        int random_number = rand() % 11; \n        std::cout << random_number << ' '; \n    } \n  \n    return 0; \n}", "label": 1}
{"text": "class Car{\n    constructor(year){\n        this.year = year;\n    }\n    printYear(){\n        console.log(this.year);\n    }\n}", "label": 1}
{"text": "counter = 0\nfor i in range(10):\n    counter += 1", "label": 1}
{"text": "multiples_list = [n * 7 for n in range(0, 51) if n * 7 <= 50]", "label": 1}
{"text": "if len(arr) == 0:\n   print(\"No food available\")\nelif len(arr) == 1:\n   print(arr[0] + \" is available\")\nelif len(arr) == 2:\n   print(arr[0] + \" and \"+ arr[1] + \" are available\")\nelse:\n   print(\"Multiple items are avaiable: \" + ', '.join(arr))", "label": 1}
{"text": "def add(x, y):\n   return x + y\n\ndef subtract(x, y):\n   return x - y\n\ndef multiply(x, y):\n   return x * y\n\ndef divide(x, y):\n   return x / y", "label": 1}
{"text": "const jsonData = JSON.parse('{\"courseName\":\"Python\"}');\nconst courseName = jsonData.courseName;", "label": 1}
{"text": "def get_longest_str(str_list):\n    longest_str = str_list[0]\n    for str in str_list:\n        if len(str) > len(longest_str):\n            longest_str = str\n    \n    return longest_str", "label": 1}
{"text": "int difference(int a, int b)\n{\n return a - b;\n}", "label": 1}
{"text": "<p style=\"font-size:16px;\">This is a paragraph of text.</p>", "label": 1}
{"text": "let count = 10;\n\nlet timerId = setInterval(function() {\n console.log(count);\n \n if (count === 0) {\n  clearInterval(timerId);\n }\n \n count--;\n}, 2000);", "label": 1}
{"text": "from sklearn import tree\n\n# Our features are house_size\nX = [[1000], [1100], [1250], [1300], [1400], [1500]]\n\n# Labels are house_label\ny = [\"small\", \"small\", \"small\", \"large\", \"large\", \"large\"]\n\n# Create and train the decision tree\nclf = tree.DecisionTreeClassifier()\nclf = clf.fit(X, y)", "label": 1}
{"text": "import math\n\ndef calculate_angle(X1, Y1, X2, Y2):\n    deltaY = Y2 - Y1\n    deltaX = X2 - X1\n    angleInDegrees = (math.atan2(deltaY, deltaX)) * 180 / math.pi\n    return angleInDegrees", "label": 1}
{"text": "SELECT COUNT(*) FROM Customers;", "label": 1}
{"text": "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\"> \n    <title>Bootstrap Example</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <!-- Bootstrap -->\n    <link href=\"css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <div class=\"row\">\n      <div class=\"col-md-4\">\n        <!-- Your content goes here -->\n      </div>\n      <div class=\"col-md-4\">\n        <!-- Your content goes here -->\n      </div>\n      <div class=\"col-md-4\">\n        <!-- Your content goes here -->\n      </div>  \n    </div>\n  </body>\n</html>", "label": 1}
{"text": "public class Fibonacci { \n  \n    // Function to print the nth \n    // fibonacci number \n    static void printFibonacciSeries(int n) \n    { \n        int a = 0, b = 1, c; \n        if (n == 0) {\n            System.out.print(a); \n            return; \n        }\n        for (int i = 2; i <= n; i++) { \n            c = a + b; \n            System.out.print(c + \" \"); \n            a = b; \n            b = c; \n        } \n    } \n  \n    // Driver Code \n    public static void main(String[] args) \n    { \n        int n = 10; \n        printFibonacciSeries(n); \n    } \n}", "label": 1}
{"text": "def long_increasing_subsequence(arr):\n    # Number of items in given array\n    n = len(arr)\n \n    # Initialize 'lengths' values for all indices\n    lengths = [1]*n\n \n    # Find the longest increasing subsequence\n    for i in range(1, n):\n        for j in range(i):\n            if arr[j] < arr[i] and lengths[j] + 1 > lengths[i]:\n                lengths[i] = lengths[j] + 1\n \n    return lengths", "label": 1}
{"text": "const mongoose = require('mongoose');\nconst Schema = mongoose.Schema;\n\nconst userSchema = new Schema({\n  name: {\n    type: String\n  },\n  age: {\n    type: Number\n  }\n});\n\nconst User = mongoose.model('User', userSchema);\n\ndata.forEach( (user) => {\n  const newUser = new User(user);\n  newUser.save()\n    .then( () => console.log('User saved') )\n    .catch( err => console.log(err))\n});", "label": 1}
{"text": ".message {\n  font-size: 14px; \n  color: red;\n}", "label": 1}
{"text": "<html>\n  <head>\n    <title>Interactive Table</title>\n  </head>\n  <body>\n    <table>\n      <thead>\n        <tr>\n          <th>ID</th>\n          <th>First Name</th>\n          <th>Last Name</th>\n        </tr>\n      </thead>\n      <tbody>\n        {% for item in data %}\n          <tr>\n            <td>{{ item.id }}</td>\n            <td>{{ item.first_name }}</td>\n            <td>{{ item.last_name }}</td>\n          </tr>\n        {% endfor %}\n      </tbody>\n    </table>\n  </body>\n</html>", "label": 1}
{"text": "{\n \"title\": \"The Catcher in the Rye\",\n \"author\": \"J.D. Salinger\", \n \"publication_year\": 1951\n}", "label": 1}
{"text": "A while loop is a control flow statement that repeats a set of instructions while a certain condition is true. It consists of a loop condition and a set of instructions that are to be executed as long as the condition remains true. The loop condition is evaluated first, and if it returns true then the instruction set is executed, after which the condition is evaluated again. This process is repeated until the condition returns false, at which point the loop terminates and execution continues at the statement after the loop.", "label": 1}
{"text": "HTML is written in a markup language known as HyperText Markup Language (HTML). HTML is a language for describing web pages. It is used for structuring and presenting content for the web. It is written in the form of HTML elements consisting of tags enclosed in angle brackets.", "label": 1}
{"text": "from itertools import permutations \ndef all_permutations(str): \n    permList = permutations(str) \n  \n    for perm in list(permList): \n        print(''.join(perm)) \n  \nif __name__ == \"__main__\": \n    string = \"ABC\"\n    all_permutations(string)", "label": 1}
{"text": "my_list.pop()", "label": 1}
{"text": "def merge_arrays(arr1, arr2):\n    # creating a new list to store the result\n    merged_arr = []\n    # looping over the two arrays\n    for i in range(len(arr1)):\n        merged_arr.append(arr1[i])\n    for i in range(len(arr2)):\n        merged_arr.append(arr2[i])\n    # sorting function to sort the merged array\n    merged_arr.sort()\n    return merged_arr\n\n# Driver code\nnew_arr = merge_arrays(arr1, arr2)\n\n# to print the sorted merged array\nprint(new_arr)\n# Output: [2, 3, 4, 5, 7]", "label": 1}
{"text": "<?php\n\n$str = 'Hello World!';\necho strtoupper($str);\n\n// Output: HELLO WORLD!\n?>", "label": 1}
{"text": "def is_permutation(str1, str2): \n    \"\"\"\n    Function to check if the given string str1 is a permutation of the string str2 \n    \n    Parameters: \n    str1 (str): first string \n    str2 (str): second string \n    \n    Returns: \n    bool: True if str1 is a permutation of str2, False otherwise\n    \"\"\"\n    if (len(str1) != len(str2)): \n        return False\n    else: \n        count = [0] * 128\n        for i in range(len(str1)):\n            count[ord(str1[i])] +=1\n            count[ord(str2[i])] -=1\n        for i in range(128):\n            if count[i] != 0: \n                return False\n        return True", "label": 1}
{"text": "SELECT AVG(credit_score)\nFROM users\nWHERE age <= 18", "label": 1}
{"text": "// returns the nth Fibonacci number\nfunction nthFibonacciNumber(n) {\n    let fib = [0, 1];\n    for (i=2; i<=n; i++)\n    {\n      fib[i] = fib[i-2] + fib[i-1];\n    }\n    return fib[n];\n}\n\nconsole.log(nthFibonacciNumber(8));", "label": 1}
{"text": "\"\"\"\nFind all words that start with 'a' in a sentence\n\"\"\"\n\nimport re\n\ndef find_words_with_a(sentence):\n    pattern = r\"\\b[aA]\\w+\\b\"\n    matches = re.findall(pattern, sentence)\n    return matches\n\nif __name__ == '__main__':\n    sentence = \"All animals are amazing\"\n    print(find_words_with_a(sentence))", "label": 1}
{"text": "SELECT product_id \nFROM products \nWHERE color = 'red';", "label": 1}
{"text": "class Dog(color:String, breed:String, size:String){\n  def description = s\"This dog is a $color $breed, and is $size.\" \n}", "label": 1}
{"text": "def smallest_common_multiple(x, y):\n  for i in range(1, y+1):\n    if (i % x == 0) and (i % y == 0):\n      return i\n\nif __name__ == '__main__':\n  x = 12\n  y = 24\n  print(smallest_common_multiple(x, y))", "label": 1}
{"text": "SELECT * FROM Purchases ORDER BY Date DESC LIMIT 3;", "label": 1}
{"text": "#include <iostream> \n\nusing namespace std; \n  \nint Fibonacci(int n) \n{ \n    if (n <= 1) \n        return n; \n    return Fibonacci(n - 1) + Fibonacci(n - 2); \n} \n\nint main () \n{ \n    int n;\n    cout<<\"Enter the number of elements: \";\n    cin>>n; \n    cout << \"Fibonacci sequence: \"; \n    for (int i = 0; i < n; i++) \n        cout << Fibonacci(i) <<\" \"; \n  \n    return 0; \n} ;", "label": 1}
{"text": "# This program is used to calculate the sum of a given list of numbers\n\nnumbers = [1, 2, 3, 4, 5]\nsum = 0\nfor num in numbers:\n    sum += num", "label": 1}
{"text": "def remove_duplicates(arr):\n  new_arr = []\n  \n  for i in arr:\n    if i not in new_arr:\n      new_arr.append(i)\n  \n  return new_arr\n  \nremove_duplicates([1, 1, 2, 5, 6, 6, 10])\n# returns [1, 2, 5, 6, 10]", "label": 1}
{"text": "last_char = string[-1]\nprint(last_char)", "label": 1}
{"text": "<html>\n    <head>\n        <title>My HTML Page</title>\n    </head>\n    <body>\n        <h1>Hello World!</h1>\n        <p>This is a simple HTML page created using code.</p>\n        <button>Click Me!</button>\n    </body>\n</html>", "label": 1}
{"text": "class Calculator:\n    def __init__(self):\n        pass\n\n    def add(self, a, b):\n        return a + b\n    \n    def subtract(self, a, b):\n        return a - b\n\n    def multiply(self, a, b):\n        return a * b\n\n    def divide(self, a, b):\n        return a / b", "label": 1}
{"text": "print(\"Hello World!\")", "label": 1}
{"text": "import random\n\nnumbers = [10, 20, 30, 40]\n\nrandom_number = random.choice(numbers)\n\nprint(random_number)", "label": 1}
{"text": "def removeGreaterThanTen(arr): \n\t# Create a new_arr array\n    new_arr = [] \n\n    # Iterate each element in array\n    for i in range(len(arr)):\n\n        # Check if the element is greater than 10\n        if arr[i] <= 10: \n            # Add the element to the new_arr\n            new_arr.append(arr[i]) \n\n    return new_arr", "label": 1}
{"text": "\"\"\"\nThis program prints \"Hello World\" when executed. \nIt defines a function called \"hello\" that does not take any parameters \nand simply prints out \"Hello World\" when it is called.\n\"\"\"", "label": 1}
{"text": "try:\n    my_list = [1, 2, 3]\n    my_list[3]\nexcept TypeError:\n    print(\"Error: Nonetype Found\")", "label": 1}
{"text": "db.Employees.aggregate([\n    { \n    $group: { \n            _id: null, \n            average_salary: { \n                $avg: \"$salary\" \n            } \n        } \n    }\n])", "label": 1}
{"text": "CREATE TABLE users ( \n  user_id INT PRIMARY KEY,\n  fname VARCHAR(50), \n  lname VARCHAR(50)\n);", "label": 1}
{"text": "for (let i = 0; i < str.length; i++) {\n  alert(str.charAt(i));\n}", "label": 1}
{"text": "count = 0\ncount += 1", "label": 1}
{"text": "SELECT * \nFROM users\nORDER BY age DESC\nLIMIT 1;", "label": 1}
{"text": "The function makes a recurrent call at the end of the function, which is redundant.", "label": 1}
{"text": "5 -4", "label": 1}
{"text": "#include <stdio.h>\n \nint main()\n{\n    int sum = 0, i;\n    for (i = 1; i <= 20; i++)\n        sum = sum + i;\n \n    printf(\"Sum = %d\\n\",sum);\n \n    return 0;\n}", "label": 1}
{"text": "tell application \"Calculator\"\n    launch\nend tell", "label": 1}
{"text": "def minutes_to_hours(minutes):\n  hours = minutes // 60\n  minutes = minutes % 60\n  return hours, minutes", "label": 1}
{"text": "#include <iostream>\nusing namespace std;\n\nint main()\n{\n    int i, n;\n    for (i = 1; i <= 32; i *= 2)\n    {\n        cout << i << \" \";\n    }\n\n    return 0;\n}", "label": 1}
{"text": "The syntax for performing an instruction inside a loop in JavaScript is: \n\nfor (initialization; condition; iteration) {\n    // instruction\n}", "label": 1}
{"text": "def gcd(m, n):\n    # base case \n    if m == 0:\n        return n\n    \n    # recursive case\n    return gcd(n % m, m)\n\nprint(gcd(8, 20)) # Output: 4", "label": 1}
{"text": "import random\n\ndef guessing_game():\n    secret_number = random.randint(0, 10)\n    guess = int(input(\"Guess a number between 0 and 10: \"))\n    while guess != secret_number:\n        print(\"Incorrect! Try again.\")\n        guess = int(input(\"Guess a number between 0 and 10: \")) \n    print(\"Correct!\")", "label": 1}
{"text": "def is_evenly_divisible(x, y):\n    return x % y == 0", "label": 1}
{"text": "def is_palindrome(input_string):\n    rev_input = input_string[::-1]\n    return input_string == rev_input", "label": 1}
{"text": "def get_max(numbers):\n    max_value = numbers[0]\n    for number in numbers:\n        if (number > max_value):\n            max_value = number\n    return max_value", "label": 1}
{"text": "const calculateArea = (width, length) => {\n  return width * length;\n}", "label": 1}
{"text": "numbers = [2, 3, 4]\ntotal_sum = 0\n\n# iterate through the list and add each element to the total sum\nfor n in numbers: \n    total_sum += n \n    \nprint(total_sum)", "label": 1}
{"text": "static int[] sortAscending(int[] nums) {\n    for (int i = 0; i < nums.length-1; i++) {\n        for (int j = 0; j < nums.length-1-i; j++) {\n            if (nums[j] > nums[j+1]) {\n                int temp = nums[j];\n                nums[j] = nums[j+1];\n                nums[j+1] = temp;\n            }\n        }\n    }\n    return nums;\n}", "label": 1}
{"text": "for _ in range(5):\n    print(\"Welcome to Tech World!\")", "label": 1}
{"text": "mean = (4 + 6 + 8 + 10) / 4 = 7.5", "label": 1}
{"text": "try:\n    x = 1\n    y = 0\n    print(x / y)\nexcept ZeroDivisionError:\n    print(\"Cannot divide by zero!\")", "label": 1}
{"text": "s = \"Hello!\"\nnew_str = s[:1] + \"X\" + s[2:]\nprint(new_str) # Output: HXllo!", "label": 1}
{"text": "arr = [\"dinosaur\", \"cat\", \"dog\", \"elephant\", \"tiger\"]\narr.sort()", "label": 1}
{"text": "list_of_numbers = [11, 22, 31, 37, 44]\nfor num in list_of_numbers:\n    if num % 2 == 0:\n        print(num)", "label": 1}
{"text": "def is_palindrome(text):\n\trev = ''.join(reversed(text)) \n\treturn rev == text", "label": 1}
{"text": "list_of_items = [\"apple\", \"banana\", \"cherry\", \"orange\"]\n\nlast_two = list_of_items[-2:]\nprint(last_two)", "label": 1}
{"text": "The QuickSort algorithm is a fast sorting algorithm for a list of integers. QuickSort is a divide and conquer algorithm, meaning it divides a list into smaller lists and then sorts and combines the lists. It starts by partitioning the input list around a pivot element, then recursively sorts the two partitions and recombines them. Its average time complexity is O(n log n) with a space complexity of O(n).", "label": 1}
{"text": "\\d{3}", "label": 1}
{"text": "The console screen can be cleared in C++ using the system() command with the clear argument: system(\"clear\");", "label": 1}
{"text": "def first_two_chars(string):\n  return string[:2]", "label": 1}
{"text": "SELECT name FROM Customers WHERE age BETWEEN 20 and 30;", "label": 1}
{"text": "function sort(array) { \n  for (let i = 0; i < array.length - 1; i++) { \n    for (let j = 0; j < array.length - i - 1; j++) { \n      if (array[j] > array[j+1]) { \n        let temp = array[j]; \n        array[j] = array[j+1]; \n        array[j+1] = temp; \n      } \n    } \n  } \n  return array; \n}", "label": 1}
{"text": "const myObject = { \n  key1: 'value1',\n  key2: 'value2', \n  key3: 'value3' \n}", "label": 1}
{"text": "function foo() {\n  console.log(\"this is a test\");\n}", "label": 1}
{"text": "In Python, we can dynamically add an element to a set using the add() method. For example, \n\ns = set()\ns.add(4)\nprint(s)", "label": 1}
{"text": "#include <iostream> \n#include <cmath>\n \nint main() \n{ \n    int number; \n  \n    std::cout << \"Enter an integer: \"; \n    std::cin >> number; \n  \n    // Add code to print square root of the number \n    std::cout << \"Square root of \" << number << \" is: \" << sqrt(number) << std::endl;\n  \n    return 0;\n}", "label": 1}
{"text": "function containsSameNumbers(arr1, arr2) {\n\tconst intersection = [];\n\tfor (let i = 0; i < arr1.length; i++) {\n\t\tif (arr2.includes(arr1[i])) {\n\t\t\tintersection.push(arr1[i]);\n\t\t}\n\t}\n\treturn intersection;\n}\n\ncontainsSameNumbers(arr1, arr2); // Output: [3, 4, 5]", "label": 1}
{"text": "function add(a, b) {\n  let sum = a + b;\n  return sum;\n}", "label": 1}
{"text": "mkdir myFolder", "label": 1}
{"text": "def print_sequence():\n  for i in range(1, 11):\n    print(i)\n\nprint_sequence() # Output: 1 2 3 4 5 6 7 8 9 10", "label": 1}
{"text": "import nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\nfrom textblob import TextBlob\nfrom nltk.tokenize import word_tokenize \nfrom nltk.tokenize import sent_tokenize\nfrom nltk.probability import FreqDist\nimport matplotlib\nimport matplotlib.pyplot as plt\nfrom matplotlib.backends.backend_pdf import PdfPages\n\ndef get_top_words(string):\n tokenized_words = word_tokenize(string)\n freqdist = FreqDist(tokenized_words)\n return freqdist.most_common(15)\n\n# Download nltk dependencies\n# nltk.download('punkt')\n# nltk.download('vader_lexicon')\n\n# Scrape news articles\narticles = scrape_nyt()\n\n# Get top words\ntop_words = []\nfor article in articles:\n top_words.append(get_top_words(article))\n\n# Create PDF report\npp = PdfPages('nyt_word_freq.pdf')\nplt.figure(figsize=(15,10))\nplt.bar(*zip(*top_words))\nplt.xticks(rotation=90)\npp.savefig()\npp.close()", "label": 1}
{"text": "def is_arithmetic_progression(arr):\n # Check if the given array is empty\n if len(arr) == 0:\n  return False\n # Initialize the common difference and the first element\n commonDifference = arr[1] - arr[0]\n firstElement = arr[0]\n # Iterate over the array\n for i in range(len(arr)):\n  if arr[i] != firstElement + (i * commonDifference):\n   return False\n # If all elements are in an arithmetic progression\n return True", "label": 1}
{"text": "list1 = [1, 2, 3, 4, 5]\nx = 6\nindex = 3\n\nlist1.insert(index, x)", "label": 1}
{"text": "def __init__(self, name, balance):\n  self.name = name\n  self.balance = balance", "label": 1}
{"text": "^[a-c][0-9][a-z][A-Z]$", "label": 1}
{"text": "O(n^2)", "label": 1}
{"text": "{\n  \"full_name\": \"\",\n  \"age\": 0,\n  \"address\": {\n    \"street\": \"\",\n    \"city\": \"\",\n    \"state\": \"\"\n  }\n}", "label": 1}
{"text": "let arrLength = arr.length;\nlet temp;\n\nfor(i = 0; i < arrLength; i++){\n   for(j = 0; j < (arrLength - i - 1); j++){\n\t   // Compare two adjacent elements\n       if(arr[j] > arr[j+1]){\n          // Swap them\n          temp = arr[j];\n          arr[j] = arr[j+1];\n          arr[j+1] = temp;\n       }\n    }\n}\n\nconsole.log(arr); // Output: [-5, 3, 17, 19, 23, 32]", "label": 1}
{"text": "student = {\n  name: \"John Smith\",\n  age: 22,\n  gpa: 3.5\n}", "label": 1}
{"text": "numbers = []\nfor i in range(51):\n  if i % 7 == 0:\n    numbers.append(i)\nprint(numbers)\n# output: [0, 7, 14, 21, 28, 35, 42, 49]", "label": 1}
{"text": "CREATE TABLE student_info (\n  student_id INT PRIMARY KEY,\n  student_name VARCHAR(50),\n  student_age INT,\n  student_grade INT\n);", "label": 1}
{"text": "let arr = [100, 200, 75, 10, 50];\n\nlet min = Math.min(...arr);\nlet max = Math.max(...arr);\n\nconsole.log(`The minimum of the array is ${min}`);\nconsole.log(`The maximum of the array is ${max}`);", "label": 1}
{"text": "d = {'a': 10, 'b': 15, 'c': 20} \n\nprint(sum(d.values())) # Output: 45", "label": 1}
{"text": "def indent_text(text, indentation):\n    \"\"\"\n    A function to format the given text using a given indentation level.\n    Input: string, integer\n    Output: string\n    \"\"\"\n    # Split the text into lines\n    lines = text.splitlines()\n    # Iterate through each line of the text\n    for i in range(len(lines)):\n        # Add the indentation to each line\n        lines[i] = \" \" * indentation + lines[i]\n    # Join all the lines\n    indented_text = \"\\n\".join(lines)\n    \n    return indented_text", "label": 1}
{"text": "Recursion can be used when performing a task that can be broken down into smaller, simpler parts. For example, performing a Depth-First Search on a Graph. It can also be used when implementing algorithms to solve complex problems such as finding the largest number in a list or creating a binary search tree.", "label": 1}
{"text": "a = 5\nb = 10\n\ndef add_numbers(a, b)\n  a + b\nend\n\nsum = add_numbers(a,b)\n\nputs \"The sum of #{a} and #{b} is #{sum}.\"", "label": 1}
{"text": "SELECT * \nFROM customers \nWHERE age > 18 \nAND (state = 'NY' OR experience > 3 \n  OR (country = 'US' AND experience > 5))", "label": 1}
{"text": "public static HashMap<Integer, String> intersect(HashMap<Integer, String> A, HashMap<Integer, String> B) {\n    HashMap<Integer, String> result = new HashMap<>();\n    for (Integer key: A.keySet()) {\n        if (B.containsKey(key)) {\n            result.put(key, A.get(key));\n        }\n    }\n    return result;\n}", "label": 1}
{"text": "class Pig(object):\n    def __init__(self, name, color, age):\n        self.name = name\n        self.color = color\n        self.age = age\n    \n    def set_name(self, name):\n        self.name = name\n    \n    def set_color(self, color):\n        self.color = color\n    \n    def set_age(self, age):\n        self.age = age", "label": 1}
{"text": "l = ['a', 'b', 'c', 'd', 'e', 'f']\ndel l[2:4]", "label": 1}
{"text": "d = {\n    'foo': 'bar',\n    'baz': {\n        'qux': 12\n    }\n}\nqux = d['baz']['qux']", "label": 1}
{"text": "def make_length_five(lst):\n    '''This function will ensure that all strings in the list have a length of 5 characters.'''\n    for i in range(len(lst)):\n        if len(lst[i]) < 5:\n            lst[i] = lst[i] + ' ' * (5 - len(lst[i]))\n        elif len(lst[i]) > 5:\n            lst[i] = lst[i][:5]\n    return lst", "label": 1}
{"text": "lst = [123.4567, 678.9012, 789.3456]\nlst = [format(num, '.3f') for num in lst]", "label": 1}
{"text": "<a href=\"https://www.example.com\">[Link text]</a>", "label": 1}
{"text": "function allValuesSame(arr) {\n  for (var i = 1; i < arr.length; i++) {\n    if (arr[i] !== arr[0])\n      return false;\n  }\n  return true;\n}", "label": 1}
{"text": "class Student {\nprivate:\n    string name;\n    int studentID;\n    int grade;\n\npublic:\n    Student();\n    Student(string name, int studentID, int grade);\n    void setName(string name);\n    string getName();\n    void setStudentID(int studentID);\n    int getStudentID();\n    void setGrade(int grade);\n    int getGrade();\n};", "label": 1}
{"text": "public class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello World!\");\n    }\n}", "label": 1}
{"text": "random_number <- function(min, max) {\n   return(runif(1, min=min, max=max))\n}", "label": 1}
{"text": "def add_two_numbers(a, b):\n    return a + b", "label": 1}
{"text": "<html>\n <head>\n  <title>My Webpage</title>\n  <meta http-equiv=\"refresh\" content=\"5\">\n </head>\n <body>\n  Hello World!\n </body>\n</html>", "label": 1}
{"text": "In C#, variables can be set to a constant by using the keyword 'const' before the variable declaration. The constant cannot be changed or reassigned once it is declared. Example: const int a = 5;", "label": 1}
{"text": "def roman_to_integer(numeral):\n  romans = {\"I\": 1,\n            \"V\": 5,\n            \"X\": 10,\n            \"L\": 50,\n            \"C\": 100,\n            \"D\": 500,\n            \"M\": 1000\n            }\n  num = 0\n  i = 0\n  while i < len(numeral):\n    if i+1 < len(numeral):\n      if romans[numeral[i]] >= romans[numeral[i+1]]:\n        num = num + romans[numeral[i]]\n      else :\n        num = num + romans[numeral[i+1]] - romans[numeral[i]]\n        i+=1\n    else:\n      num = num + romans[numeral[i]]\n    i+=1\n  return num", "label": 1}
{"text": "def compare_lists(list1, list2):\n    return [x for x in list1 if x in list2]", "label": 1}
{"text": "def flatten(arr):\n    return [item for row in arr for item in row]", "label": 1}
{"text": "def convert_days(days):\n  weeks = days // 7\n  days = days % 7\n  return (weeks, days)", "label": 1}
{"text": "def find_longest_at_length(lst, k):\n    longest_str = lst[0]\n    for s in lst[1:]:\n        if len(s) <= k and len(s) > len(longest_str):\n            longest_str = s\n    return longest_str", "label": 1}
{"text": "#!/bin/bash \necho \"Hello World\"", "label": 1}
{"text": "import copy\n\noriginal_dict = {1: 'a', 2: 'b', 3: 'c'}\nnew_dict = copy.deepcopy(original_dict)", "label": 1}
{"text": "UPDATE users\nSET age = 25\nWHERE name = 'John Doe';", "label": 1}
{"text": "let multiplicationTable = {\n 1:1,2,3,4,5,6,7,8,9,10,\n 2:2,4,6,8,10,12,14,16,18,20,\n 3:3,6,9,12,15,18,21,24,27,30,\n 4:4,8,12,16,20,24,28,32,36,40,\n 5:5,10,15,20,25,30,35,40,45,50,\n 6:6,12,18,24,30,36,42,48,54,60,\n 7:7,14,21,28,35,42,49,56,63,70,\n 8:8,16,24,32,40,48,56,64,72,80,\n 9:9,18,27,36,45,54,63,72,81,90,\n 10:10,20,30,40,50,60,70,80,90,100\n};", "label": 1}
{"text": "def getStringLength(s):\n  return len(s)", "label": 1}
{"text": "var userID = document.cookie.split(';')\n  .find(c => c.trim().startsWith('userID'))\n  .split('=')[1];", "label": 1}
{"text": "CREATE TABLE Users (\n  firstname VARCHAR(200) NOT NULL,\n  lastname VARCHAR(200) NOT NULL,\n  email VARCHAR(200) NOT NULL\n);", "label": 1}
{"text": "let sortedWords = words.sort(); \nconsole.log(sortedWords); // ['apple', 'book', 'car', 'cat', 'tree']", "label": 1}
{"text": "An array is a data structure used in programming to store a collection of elements of the same type in a contiguous block of memory. Arrays are used to hold items such as numbers, strings, objects, etc. and to perform operations such as searching, sorting, and manipulation on the elements of the array. Arrays are also used to implement other data structures such as stacks, queues, and linked lists.", "label": 1}
{"text": "for i in range(1, 11): \n    print(i)", "label": 1}
{"text": "name = input(\"Enter your name: \")\ntry:\n    name = int(name)\n    print(\"Hello, \" + str(name))\nexcept ValueError:\n    print(\"Error: That was not an integer.\")", "label": 1}
{"text": "const getUniqueElements = array => {\n    const uniqueElements = [...new Set(array)];\n    return uniqueElements;\n}\n\nconsole.log(getUniqueElements(arr)); // [3, 1, 4, 2, 5]", "label": 1}
{"text": "def frequency(array)\n    frequency_hash = Hash.new(0)\n    array.each { |num| frequency_hash[num] += 1 }\n    frequency_hash\nend\n\nputs frequency(array) // {2=>3, 3=>2, 4=>1, 5=>1}", "label": 1}
{"text": "\"\"\"\nGenerate a random password that is at least 8 characters and contains numbers, uppercase letters, and symbols.\n\"\"\"\n\nimport random\n\ndef generate_password():\n    charset = \"01234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&*()?\"\n    password = \"\"\n    for _ in range(8):\n        password += random.choice(charset)\n    return password\n    \nif __name__ == '__main__':\n    print(generate_password())", "label": 1}
{"text": "\"\"\"\nSelect all customers from the customer_table with age greater than 25 and their zip codes within a given range.\n\"\"\"\n\n#select customers\ncustomers = [ customer for customer in customer_table if (customer[1] > 25) and (customer[2] >= zipcode_range[0] and customer[2] <= zipcode_range[1])]\n\nprint(customers)", "label": 1}
{"text": "\"\"\"\nDetermine whether a given string is a palindrome using stack data structure.\n\"\"\"\n\ndef is_palindrome(string):\n    # reverse the string\n    stack = []\n    for char in string:\n        stack.append(char)\n\n    rev_string = \"\"\n    while stack:\n        rev_string = rev_string + stack.pop()\n\n    # compare reversed string with original string\n    if rev_string == string:\n        return True\n    else:\n        return False\n\nif __name__ == '__main__':\n    string = \"racecar\"\n    print(is_palindrome(string))", "label": 1}
{"text": "\"\"\"\nCreate a class named 'Stack' with the following methods: push, pop, peek, isEmpty.\n\"\"\"\n\nclass Stack:\n    def __init__(self):\n        self.items = []\n\n    def push(self, item):\n        self.items.append(item)\n\n    def pop(self):\n        return self.items.pop()\n    \n    def peek(self):\n        return self.items[-1]\n    \n    def isEmpty(self):\n        return self.items == []", "label": 1}
{"text": "\"\"\"\nUse a Linked List structure to implement a stack data structure.\n\"\"\"\n\nclass Node:\n    def __init__(self, val):\n        self.value = val\n        self.next = None\n\nclass Stack:\n    def __init__(self):\n        self.top = None\n        self.size = 0\n\n    def push(self, val):\n        new_node = Node(val)\n        new_node.next = self.top\n        self.top = new_node\n        self.size += 1\n    \n    def pop(self):\n        if self.top == None:\n            return None\n        else:\n            pop_node = self.top\n            self.top = self.top.next\n            self.size -= 1\n            return pop_node.value", "label": 1}
{"text": "function randomString(length) {\n  let result           = '';\n  let characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  let charactersLength = characters.length;\n  for ( let i = 0; i < length; i++ ) {\n     result += characters.charAt(Math.floor(Math.random() * charactersLength));\n  }\n  return result;\n}", "label": 1}
{"text": "[a-zA-Z]*[bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ]{3}[a-zA-Z]*", "label": 1}
{"text": "SELECT COUNT(*)\nFROM Customers c\nINNER JOIN Purchases p ON c.CustomerID = p.CustomerID\nWHERE c.Country = 'CountryName';", "label": 1}
{"text": "\\d+", "label": 1}
{"text": "def printPrimesUpTo_n(n):\n\n    while n > 1:\n        if not (n % 2 and n > 2):\n            flag = False\n            for i in range(2, int(n**0.5) +1):\n                if not n % i:\n                    flag = True\n                    break\n            if not flag:\n                print(n)\n        n -= 1", "label": 1}
{"text": "SELECT MAX(salary) \nFROM employees;", "label": 1}
{"text": "def count_words(string):\n\twords = string.split()\n\treturn len(words)", "label": 1}
{"text": "SELECT * \nFROM employees \nWHERE name LIKE '%John%'", "label": 1}
{"text": "<html>\n <head>\n  <title>Styled Page</title>\n  <style type=\"text/css\">\n    body {\n        background-color: white;\n    }\n    h1 {\n        font-family: 'Arial', sans-serif;\n        font-size: 30px;\n        color: black;\n        text-align: center;\n    }\n  </style>\n </head>\n <body>\n  <h1>Styled Page</h1>\n </body>\n</html>", "label": 1}
{"text": "def listItems():\n    list_items = [\"item1\", \"item2\", \"item3\"]\n    return list_items", "label": 1}
{"text": "#include <iostream> \nusing namespace std; \n  \n// Function to demonstrate printing pattern \nvoid triangle(int n) \n{ \n    // Outer loop to handle number of rows \n    // n in this case \n    for (int i=0; i<n; i++) \n    { \n        // Inner loop to handle number of columns \n        // values changing acc. to outer loop \n        for (int j=0; j<=i; j++ ) \n        { \n            // Printing stars \n            cout << \"x\"; \n        } \n  \n        // Ending line after each row \n        cout << \"\\n\"; \n    } \n} \n  \n// Driver Function \nint main() \n{ \n    int n = 4; \n    triangle(n); \n    return 0; \n}", "label": 1}
{"text": "public static String changeCase(String input) {\n    StringBuilder outputString = new StringBuilder();\n    for (int i = 0; i < input.length(); i++) {\n        char c = input.charAt(i);\n        if (Character.isUpperCase(c)) {\n            outputString.append(Character.toLowerCase(c));\n        } else {\n            outputString.append(Character.toUpperCase(c));\n        }\n    }\n    return outputString.toString();\n}", "label": 1}
{"text": "public static String replaceText(String old, String newText) {\n  return old.replace(old, newText);\n}", "label": 1}
{"text": "sort(array A[]):\n  for i = 1 to n-1\n  begin\n    min = i\n    for j = (i + 1) to n\n      if A[j] < A[min]\n        min = j\n    swap the value at index min and index i\n  end\n  return A[]", "label": 1}
{"text": "import pandas as pd\nimport numpy as np\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.linear_model import LogisticRegression\n\n# load dataset\ndataframe = pd.read_csv('text_classification_data.csv')\n\n# convert to vectors\nvectorizer = TfidfVectorizer()\nvectors = vectorizer.fit_transform(dataframe['text'])\n\n# split data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(vectors, dataframe['label'], test_size = 0.25)\n\n# create model\nmodel = LogisticRegression()\n\n# train model\nmodel.fit(X_train,y_train)\n\n# test model\npredictions = model.predict(X_test)", "label": 1}
{"text": "def retrieve_data_from_database():", "label": 1}
{"text": "class RandomNumberGenerator:\n    def __init__(self, min_num, max_num):\n        self.min_num = min_num\n        self.max_num = max_num\n    \n    def get_random_number(self):\n        return random.randint(self.min_num, self.max_num)", "label": 1}
{"text": "The best sorting algorithm to use for this task would be the Bubble Sort algorithm. In the Bubble Sort algorithm, the list is looped through and elements are compared to each other and swapped if they are not in the correct order. This process is repeated until the list is sorted.", "label": 1}
{"text": "def calculate_tax(price):\n    tax_rate = 0.20\n    total = price + (price * tax_rate)\n    return round(total, 2)", "label": 1}
{"text": "public class Calculator {\n    public static void main(String args[]) {\n        int a = 10;\n        int b = 20;\n        int c = a + b;\n        System.out.println(\"Sum : \"+c);\n    }\n}", "label": 1}
{"text": "import numpy as np\n \nA = np.array([1,2,3])\nB = np.array([4,5,6])\n \nC = np.multiply(A, B)\nprint(C)", "label": 1}
{"text": "class Student { \n  \n    // data members \n    String name; \n    int id; \n    String major; \n    double gpa; \n  \n    // constructors \n    Student(String name, int id, String major, double gpa) {  \n        this.name = name; \n        this.id = id; \n        this.major = major; \n        this.gpa = gpa; \n    } \n  \n  \n    // method 1 \n    public String getName() \n    { \n        return this.name; \n    } \n  \n    // method 2 \n    public int getId() \n    { \n        return this.id; \n    } \n  \n    // method 3 \n    public String getMajor() \n    { \n        return this.major; \n    } \n  \n    // method 4 \n    public double getGPA() \n    { \n        return this.gpa; \n    } \n  \n    // method 5 \n    public void setName(String name) \n    { \n        this.name = name; \n    } \n  \n    // method 6 \n    public void setId(int id) \n    { \n        this.id = id; \n    } \n  \n    // method 7 \n    public void setMajor(String major) \n    { \n        this.major = major; \n    } \n  \n    // method 8 \n    public void setGPA(int gpa) \n    { \n        this.gpa = gpa; \n    } \n}", "label": 1}
{"text": "def print_letters(string): \n    for letter in string: \n        print(letter)", "label": 1}
{"text": "{\n \"name\": \"John\",\n \"age\": 22,\n \"grade\": \"A\"\n}", "label": 1}
{"text": "var url = window.location.href;", "label": 1}
{"text": "#include <stdio.h>\n\nint main(){\n    int score = 80;\n\n    printf(\"Your final score is: %i\", score);\n\n    return 0;\n}", "label": 1}
{"text": "def search(arr, e):\n    for i in range(len(arr)):\n        if (arr[i] == e):\n            return i\n    return -1", "label": 1}
{"text": "def max_sum_k_elements(array, k):\n    max_sum = array[0]\n    for i in range(len(array)-k+1):\n        sum_temp = 0\n        for j in range(k):\n            sum_temp += array[i+j]\n        if sum_temp > max_sum:\n            max_sum = sum_temp\n    return max_sum\n\nmax_sum_k_elements(array, k)", "label": 1}
{"text": "<?php\n  foreach($names as $name){\n    echo \"<b>\".$name.\"</b><br>\";\n  }\n?>", "label": 1}
{"text": ".selected {\n\tborder: 1px solid green;\n}\n#heading_text {\n    color: green;\n}\n.selected:active #heading_text {\n    color: green;\n}", "label": 1}
{"text": "SELECT first_name, last_name\nFROM users\nWHERE age > 25", "label": 1}
{"text": "[list[i] for i in range(0,len(list),2)]", "label": 1}
{"text": "list_1.extend(list_2)", "label": 1}
{"text": "SELECT books.* \nFROM books \nJOIN authors ON books.author_id = authors.id \nWHERE authors.name = 'John Doe'", "label": 1}
{"text": "<h2>My First Web Page</h2>\n\n<p>This is my first web page. <a href=\"url-to-some-site\">Learn More</a>.</p>", "label": 1}
{"text": "C++ memory management is done through the use of pointers. Pointers are variables which hold the address of a variable or an object. Memory for variables and objects is allocated dynamically at run-time through the use of the new keyword, and deallocated dynamically through the use of the delete keyword. The C++ runtime library also comes with functions such as malloc() and free() for allocating and deallocating memory.", "label": 1}
{"text": "<table>\n     <tr>\n        <td>Name</td>\n        <td>John</td>\n    </tr>\n    <tr>\n        <td>Age</td>\n        <td>31</td>\n    </tr>\n    <tr>\n        <td>City</td>\n        <td>New York</td>\n    </tr>\n</table>", "label": 1}
{"text": "SELECT title, author FROM Books;", "label": 1}
{"text": "<html>\n <head>\n  <title>My HTML Page</title>\n </head>\n <body>\n  <header>\n   <h1>My Website</h1>\n  </header>\n  <main>\n   This is the main content of the page.\n  </main>\n  <footer>\n   Copyright 20", "label": 1}
{"text": "public static String[] splitString(String s, String regex) \n{ \n    return s.split(regex); \n}", "label": 1}
{"text": "public class Fibonacci { \n\n    static int fib(int n) \n    { \n    if (n <= 1) \n       return n; \n    return fib(n-1) + fib(n-2); \n    } \n       \n    public static void main (String args[]) \n    { \n    int n = 10; \n    System.out.println(fib(n)); \n    } \n}", "label": 1}
{"text": "def sum_odd_numbers(start, finish)\n  total = 0\n  (start..finish).each do |number|\n    total += number if number % 2 == 1 \n  end\n  total\nend\n\np sum_odd_numbers(1, 10)", "label": 1}
{"text": "MOV R1, #3000 \n MOV R2, #3001 \n ADD R3, R1, R2 \n MOV 2000, R3", "label": 1}
{"text": "def find_most_frequent(arr) \n  hash = Hash.new(0) \n  arr.each do |num| \n    hash[num] += 1 \n  end \n  arr.max_by { |v| hash[v] } \nend \n\narr = [3, 2, 1, 2, 4, 8, 7, 4] \nprint find_most_frequent(arr) \n# Output is 4", "label": 1}
{"text": "def modify_list(int_list):\n    for i in range(len(int_list)):\n        if int_list[i] % 2 == 0:\n            int_list[i] += 1\n        else:\n            int_list[i] -= 1\n    return int_list", "label": 1}
{"text": "regex = \"\\w=(\\d+)\"\na, b, c = re.findall(regex, \"a=1,b=2,c=3\")", "label": 1}
{"text": "arr.sort(); // arr is now [1, 4, 7, 10, 23]", "label": 1}
{"text": "<html>\n<head>\n    <script>\n        function checkInteger(number) {\n            if(typeof number == 'number') {\n                if(Math.floor(number) == number) \n                    return true;\n            }\n            return false;\n        }\n    </script>\n</head>", "label": 1}
{"text": "public class BinarySearch2D\n{\n    public void Search(int[,] matrix, int target)\n    {\n        if (matrix == null || matrix.GetLength(0) == 0 || matrix.GetLength(1) == 0) \n            return;\n        \n        int rows = matrix.GetLength(0);\n        int columns = matrix.GetLength(1);\n        \n        int row = 0;\n        int column = columns - 1;\n        \n        while (row < rows && column >= 0)\n        {\n            if (matrix[row, column] == target)\n            {\n                Console.WriteLine($\"Target found at row: {row} and column: {column}\");\n                return;\n            }\n            else if (matrix[row, column] > target)\n            {\n                column--;\n            }\n            else\n            {\n                row++;\n            }\n        }\n    }\n}", "label": 1}
{"text": "import random\n\ndef generate_random_string(length):\n    \"\"\"Generate a random string with given length using a set of lowercase and uppercase letters, numbers, and punctuation characters.\"\"\"\n    chars = \"abcdefghijklmnopqrstuvwxyz ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()[]{}\\\\|;:'\"\",./<>?\"\n    result = \"\"\n    for i in range(length):\n        result += random.choice(chars)\n    return result\n\nrandom_string = generate_random_string(10)\nprint(random_string) #eg. 7O?1Y%%&_K", "label": 1}
{"text": "function calculateArea(a, b, c) {\n    let s = (a + b + c) / 2;\n    return Math.sqrt(s * (s - a) * (s - b) * (s - c));\n}", "label": 1}
{"text": "SELECT team, COUNT(*) AS total_count\nFROM Employees\nGROUP BY team", "label": 1}
{"text": "Algorithm:\n\n// Take two strings, str1 and str2\n\n// Step 1:\n// Start\n\n// Step 2:\n// Run a loop over the length of the strings\n\n// Step 3:\n// For each character in str1, check if it also exists in str2. If it does, continue to next character. \n\n// Step 4:\n// If a character does not have a corresponding character in the other string, return False. \n\n// Step 5:\n// If all the characters are found, return True. \n\n// Step 6:\n// Stop", "label": 1}
{"text": "function getRandomItem(arr) {\n  const index = Math.floor(Math.random() * arr.length);\n  return arr[index]; \n}\n \nconst randomItem = getRandomItem(fruits);\nconsole.log(randomItem);", "label": 1}
{"text": "arr = list(map(int,arr))", "label": 1}
{"text": "git clone https://github.com/myusername/myrepo\ngit checkout -b my-new-feature\ngit commit -am \"Added new feature\"\ngit push origin my-new-feature\ngit pull-request -m \"New feature added\"", "label": 1}
{"text": "let fib_nums = [1, 1]\nfor (let i=2; i < 10; i++) {\n  fib_nums[i] = fib_nums[i - 1] + fib_nums[i - 2]\n}", "label": 1}
{"text": "SELECT COUNT(*) FROM TABLE_NAME WHERE COLUMN_NAME > VALUE;", "label": 1}
{"text": "public class SortList { \n  \n  public static void sort (int[] array) { \n    int temp;\n    \n    for (int i = 0; i < array.length; i++) { \n    for (int j = 0; j < array.length; j++) { \n      if (array[j] > array[i]) { \n        temp = array[i]; \n        array[i] = array[j]; \n        array[j] = temp; \n      }\n    } \n  }\n  } \n  \n  public static void main(String args[]) { \n    int[] array = {3, 6, 2, 8, 1, 9}; \n    \n    sort(array); \n    \n    System.out.print(\"Sorted list: \\n\"); \n    for (int i = 0; i < array.length; i++) \n      System.out.print(array[i] + \" \"); \n  } \n}", "label": 1}
{"text": "<div>\n  <h1>Hello World!</h1>\n  <button>Click me!</button>\n</div>\n<script>\n    $(document).ready(function(){\n        $(\"button\").click(function(){\n            $(\"div\").css(\"background-color\", \"green\");\n        });\n    });\n</script>", "label": 1}
{"text": "const blogPostSchema = new mongoose.Schema({\n  title: { type: String, required: true },\n  body:  { type: String, required: true },\n  isPublished: { type: Boolean, default: false}\n});", "label": 1}
{"text": "v=(1 2 3 4 5)\n\nfor i in ${v[@]}; do\n    echo $i\ndone", "label": 1}
{"text": "import random\n\nrandom_int = str(random.randint(100000, 999999))", "label": 1}
{"text": "class Node: \n    def __init__(self, data): \n        self.data = data  \n        self.next = None\n\ndef delete_node(head, node):\n    prev = None\n    curr = head\n    while(curr is not None and curr.data != node):\n        prev = curr\n        curr = curr.next\n    prev.next = curr.next", "label": 1}
{"text": "Higher order functions are functions that can take other functions as arguments or return other functions as output. First class functions are functions that can be passed as arguments to other functions, returned from other functions, assigned to variables, or used in any other way that a value can be used.", "label": 1}
{"text": "The acronym JSON stands for JavaScript Object Notation. It is a text-based format for data interchange, which makes it easy for machines to parse and generate.", "label": 1}
{"text": "def find_distinct(arr):\n    distinct_list = []\n    for num in arr:\n        if num not in distinct_list:\n            distinct_list.append(num)\n\n    return distinct_list\n\narr = [1, 2, 3, 3, 4, 5]\nprint(find_distinct(arr))  # Output: [1, 2, 3, 4, 5]", "label": 1}
{"text": "arr = ['a', 'b', 'c', 'd', 'e'] \narr.append('z') \nprint(arr)", "label": 1}
{"text": "The SELECT statement is used to retrieve data from one or more tables in a database. It is typically used in a query, where it specifies which columns and rows of data should be returned. The statement can also be used to perform calculations on data in the database and to group data together.", "label": 1}
{"text": "df -h", "label": 1}
{"text": "2 * 5 + 3 * -1 - 7 * 8 = -31", "label": 1}
{"text": "min = min(x, y)\nprint(min) # Output: 5", "label": 1}
{"text": "for i in range(1,11):\n    print(f'{num} x {i} = {num * i}')", "label": 1}
{"text": "Words: ['cat', 'dog', 'elephant']\nNumbers: [15, 20, 8]", "label": 1}
{"text": "baz", "label": 1}
{"text": "Th* appl*phant is walking", "label": 1}
{"text": "def is_even(number):\n    if number % 2 == 0:\n        return True\n    else:\n        return False", "label": 1}
{"text": "21", "label": 1}
{"text": "class Vehicle:\n    def __init__(self, vehicle_type, make, model, color):\n        self.type = vehicle_type\n        self.make = make\n        self.model = model\n        self.color = color\n\ncar = Vehicle(\"Car\", \"Toyota\", \"Camry\", \"Red\")", "label": 1}
{"text": "function maxFromArray(arr) {\n    let maxNum = arr[0];\n    for (let i = 1; i < arr.length; i++) {\n        if (arr[i] > maxNum) {\n            maxNum = arr[i];\n        }\n    } \n    return maxNum;\n}\n\nconsole.log(maxFromArray([5, 10, 8, 3, 13])); // Outputs: 13", "label": 1}
{"text": "echo \"Today is \" . date('l');", "label": 1}
{"text": "<div id=\"content\"></div>", "label": 1}
{"text": "hcuqwhvqme", "label": 1}
{"text": "10", "label": 1}
{"text": "Using MongoDB:\n\nconst MongoClient = require('mongodb').MongoClient;\n\nconst users = [\n  {\n    \"name\": \"Bob\",\n    \"age\": 30,\n    \"city\": \"New York\"\n  },\n  {\n    \"name\": \"Alice\",\n    \"age\": 25,\n    \"city\": \"San Francisco\"\n  }\n];\n\nconst url = 'mongodb://localhost:27017';\nconst dbName = 'myDatabase';\n\nMongoClient.connect(url, {useNewUrlParser: true}, (err, client) => {\n  if(err){\n    console.log(\"Error connecting to database \" + err);\n    return;\n  } else {\n    console.log(\"Successfully connected to database\");\n    const db = client.db(dbName);\n    const collection = db.collection('users');\n    collection.insertMany(users, (err, result) => {\n      if(err){\n        console.log(\"Error inserting users: \" + err);\n      } else {\n        console.log(\"Successfully inserted users into database\");\n      }\n    });\n  }\n});", "label": 1}
{"text": "SELECT name\nFROM customers\nWHERE name != 'Bob';", "label": 1}
{"text": "The United Nations is a global intergovernmental organization that works to maintain peace and security, foster friendly relations between nations, and promote international cooperation. It is the world's largest and most internationally represented organization, and is capable of powerful action to promote global harmony.", "label": 1}
{"text": "let employeeData = [\n  {\n    \"name\": \"John\",\n    \"age\": 24,\n    \"city\": \"New York\"\n  },\n  {\n    \"name\": \"Jane\",\n    \"age\": 28,\n    \"city\": \"London\"\n  },\n  {\n    \"name\": \"Bob\",\n    \"age\": 32,\n    \"city\": \"Los Angeles\"\n  },\n  {\n    \"name\": \"Alice\",\n    \"age\": 25,\n    \"city\": \"San Francisco\"\n  },\n  {\n    \"name\": \"Greg\",\n    \"age\": 30,\n    \"city\": \"Paris\"\n  }\n]", "label": 1}
{"text": "list2 = sorted(list1, key=len)\nprint(list2) #['cat', 'dog', 'apple', 'banana']", "label": 1}
{"text": "SELECT AVG(salary)\nFROM engineers \nWHERE designation = 'Senior Software Engineer';", "label": 1}
{"text": "import base64 \ndef decode_base64(encoded_s):\n   decoded_s = base64.b64decode(encoded_s).decode('utf-8') \n   return decoded_s", "label": 1}
{"text": "def print_table(dictionary):\n    \"\"\"Prints a table from a dictionary of lists.\"\"\"\n    # retrieve the lists\n    names = dictionary['Name']\n    ages = dictionary['Age']\n\n    # print the table\n    print('\\tName\\tAge')\n    print('-' * 20)\n    for i, name in enumerate(names):\n        age = ages[i]\n        print(f'\\t{name}\\t{age}')", "label": 1}
{"text": "function areaOfCircle (radius) {\n    return Math.PI * radius * radius;\n}", "label": 1}
{"text": "One way to debug these lines of code is to add print statements before and after the loop to print the value of \"i\" both before and after the loop. Then, inside the loop, you can print out the value of \"i\" just before the ``println`` statement and you can also print out the value of ``i`` after the loop is exited. This will help you see which iteration is causing the issues.", "label": 1}
{"text": "def toUpperCase(str):\n  return str.upper()", "label": 1}
{"text": "SELECT student_id, student_marks, total_marks, (student_marks/total_marks)*100 AS Percentage\nFROM table\nWHERE student_id = 987;", "label": 1}
{"text": "import java.util.Date;\n\npublic class DateTime {\n   public static void main(String args[]) {\n      Date date = new Date();\n      System.out.println(\"Current date and time is: \" + date);\n   }\n}", "label": 1}
{"text": "public static double sumIntegers(int a, int b){\n    return (double) (a + b);\n}", "label": 1}
{"text": "SELECT firstname, lastname, email\nFROM student;", "label": 1}
{"text": "String str = \"This is a string\";\nString newStr = str.replaceAll(\"\\\\s\", \"_\");\nSystem.out.println(newStr);  // This_is_a_string", "label": 1}
{"text": "function isNGreaterThanM(n, m) { \n  return n > m ? true : false; \n}", "label": 1}
{"text": "#include <iostream> \n#include <string> \n\n// function to reverse the words of a string \nstd::string reverseWords(std::string str) \n{ \n\tstd::string revString = \"\"; \n\tint length = str.length(); \n\n\t// Traverse given string from end \n\tfor (int i = length - 1; i >= 0; i--) { \n\t\t// if (str[i] == ' ') \n\t\t\t// continue; \n\n\t\t// Store next word \n\t\tstd::string temp = \"\"; \n\t\twhile (i >= 0 && str[i] != ' ') { \n\t\t\ttemp = temp + str[i]; \n\t\t\ti--; \n\t\t} \n\n\t\t// Append next word to result \n\t\trevString = revString + temp + \" \"; \n\t} \n\n\treturn revString; \n}", "label": 1}
{"text": "<html>\n<head>\n<style>\n  .book-container{\n    display: flex;\n    flex-wrap: wrap;\n  }\n  .book{\n\twidth: 300px;\n\tpadding: 10px;\n\tborder: 1px solid #ccc;\n\tmargin: 10px;\n\tbox-sizing : border-box;\n  }\n  .author {\n\t  font-weight: bold;\n  }\n  .title {\n\t  font-style: italic;\n  }\n  .description {\n\t  font-size: 12px;\n  }\n</style>\n</head>\n<body>\n  <div class=\"book-container\">\n    <div class=\"book\">\n      <p class=\"author\">Author: John</p>\n      <p class=\"title\">Title: The Catcher in the Rye</p>\n      <p class=\"description\">Description: \u201cThe Catcher in the Rye is a 1951 novel by J. D. Salinger.\u201d</p>\n    </div>\n    <div class=\"book\">\n      <p class=\"author\">Author: Jane</p>\n      <p class=\"title\">Title: Sense and Sensibility</p>\n      <p class=\"description\">Description: \u201cSense and Sensibility is a novel by Jane Austen, published in 1811.\u201d</p>\n    </div>\n  </div>\n</body>\n</html>", "label": 1}
{"text": "CSS Rule: \n{\n  font-size: 20px;\n}", "label": 1}
{"text": "def intersection(arr1, arr2): \n\n    result = []\n    \n    i = 0\n    j = 0\n  \n    while i < len(arr1) and j < len(arr2): \n        if arr1[i] < arr2[j]: \n            i += 1\n        elif arr2[j] < arr1[i]: \n            j += 1\n        else: \n            result.append(arr2[j]) \n            j += 1\n            i += 1\n  \n    return result", "label": 1}
{"text": "def search(document, word):\n    if word in document:\n        print(\"The word '{}' was found in the document\".format(word))\n    else:\n        print(\"The word '{}' was not found in the document\".format(word))\n\nsearch(document, word) # output = \"The word 'words' was found in the document.\"", "label": 1}
{"text": "function getMessage() {\n    const fullName = getName();\n    // return a Promise\n    return new Promise ((resolve, reject) => {\n       resolve(fullName);\n    });\n}", "label": 1}
{"text": "<div id=\"Container\">\n    <p>Hello World</p>\n    <img src=\"your_image.jpg\" alt=\"your_image\" />\n</div>", "label": 1}
{"text": "The main difference between the \"var\" and \"let\" keywords in JavaScript is their scope. Variables declared with the \"var\" keyword have a function scope and are available throughout the entire function, while variables declared with \"let\" have a block scope and are available only in the block in which they are declared.", "label": 1}
{"text": "SELECT * \nFROM employees \nWHERE years_of_experience > 5;", "label": 1}
{"text": "class ItemComponent extends React.Component {\n  render() {\n    return ( \n      <div>\n        <img src={this.props.imageURL} />\n        <div>\n          id: {this.props.id}\n        </div>\n        <div>\n          name: {this.props.name}\n        </div>\n        <div>\n          price: {this.props.price}\n        </div>\n      </div>\n    );\n  }\n}", "label": 1}
{"text": "function dateDifference(date1, date2){\n    let date1Moment = moment(date1, \"MM/DD/YYYY\");\n    let date2Moment = moment(date2, \"MM/DD/YYYY\");\n    let diffInDays = date2Moment.diff(date1Moment, 'days');\n    return diffInDays;\n}\nconsole.log(dateDifference(date1, date2));", "label": 1}
{"text": "SELECT * FROM TABLE_NAME WHERE COL2 <> '';", "label": 1}
{"text": "class Queue:\n    def __init__(self):\n        self.data = []\n\n    def is_empty(self):\n        return not self.data \n\n    def enqueue(self, element):\n        self.data.append(element)\n\n    def dequeue(self):\n        return self.data.pop(0)\n        \n    def peek(self):\n        if not self.is_empty():\n            return self.data[0]", "label": 1}
{"text": "\"\"\"\nRun a sentiment analysis of the sentence using Python\n\"\"\"\nimport nltk \nfrom textblob import TextBlob \n\ntext = 'The food was really good but the service was terrible.'\nblob = TextBlob(text) \nfor sentence in blob.sentences:\n    print(sentence.sentiment)\n\n# Output\nSentiment(polarity=0.05, subjectivity=0.6)", "label": 1}
{"text": "div {\n   background-color: red;\n}", "label": 1}
{"text": "SELECT name FROM people WHERE year_of_birth <1990;", "label": 1}
{"text": "def DFS(root):\n    s = Stack()\n    s.push(root)\n    while (s.size() > 0):\n        node = s.pop()\n        # Do something with the node\n        if (node.left != NULL):\n            s.push(node.left)\n        if (node.right != NULL):\n            s.push(node.right)", "label": 1}
{"text": "def factorial(n):\n \u00a0 \u00a0if n == 0:\n \u00a0 \u00a0 \u00a0 \u00a0return 1\n \u00a0 \u00a0else:\n \u00a0 \u00a0 \u00a0 \u00a0return n * factorial(n - 1)", "label": 1}
{"text": "The main difference between procedural and object-oriented programming is that object-oriented programming focuses on the objects and how they interact with each other, while procedural programming focuses on executing a sequence of steps. In object-oriented programming, data and functions are encapsulated into objects that can interact with each other, while procedural programming relies on the execution of a sequence of instructions. In addition, object-oriented programming encourages code reusability, while procedural programming does not.", "label": 1}
{"text": "def fibonacci(): \n  a, b = 0, 1\n  while True: \n    a, b = b, a + b \n    yield a", "label": 1}
{"text": "function countString(str) {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str.substring(i, i + 5) == \"Hello\") {\n      count++;\n    }\n  }\n  return count;\n}", "label": 1}
{"text": "set.seed(1234)\nrunif(5, min = 0, max = 1)", "label": 1}
{"text": "regex: \\bapple\\b", "label": 1}
{"text": "$('.my-button').click(function(){\n    // Code here \n});", "label": 1}
{"text": "let result = [];\nlet max = arr[0];\nresult.push(max);\nfor (let i = 1; i < arr.length; i++) {\n  let min = Math.min(max, arr[i]);\n  result.push(min);\n  max = min;\n}\n\nconsole.log(result); # Output: [5, 4, 3, 2, 1]", "label": 1}
{"text": "* {\n    font-size: 14px;\n}", "label": 1}
{"text": "def reverseString(string):\n  return string[::-1]\n\nprint(reverseString(string)) # Output: !dlrow olleH", "label": 1}
{"text": "const array = [\n    { id: 1, firstName: 'John', lastName: 'Doe', age: 20 },\n    { id: 2, firstName: 'Jane', lastName: 'Smith', age: 21 },\n    { id: 3, firstName: 'Mike', lastName: 'Williams', age: 22 }\n];", "label": 1}
{"text": "pairs = []\nfor i in range(len(list)):\n    for j in range(i+1, len(list)):\n        pairs.append((list[i], list[j])) \n\nprint(pairs)", "label": 1}
{"text": "def sort_list(list):\n    for i in range(len(list)):\n        for j in range(0, len(list)-i-1):\n            if len(list[j]) < len(list[j+1]):\n                list[j], list[j+1] = list[j+1], list[j]\n    return list\n\nsort_list([\"Hello\", \"World\", \"Technology\"])", "label": 1}
{"text": "my_dict = dict([('a', 1), ('b', 2)])\n\nprint(my_dict)", "label": 1}
{"text": "class Student {\n  private:\n    int id; \n    string name;\n    int age;\n    string gender;\n  public:\n    int getId() const;\n    void setId(int id);\n    string getName() const;\n    void setName(string name);\n    int getAge() const;\n    void setAge(int age);\n    string getGender() const;\n    void setGender(string gender);\n};", "label": 1}
{"text": "['The', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog.']", "label": 1}
{"text": "22", "label": 1}
{"text": "There are 25 distinct prime numbers less than 100.", "label": 1}
{"text": "import random \n\nrandom.seed(32) \nunique_id = random.randint(100000000, 999999999)\nprint(\"unique 8-digit number:\", unique_id)", "label": 1}
{"text": "^\\S(.*\\S)?$", "label": 1}
{"text": "my_list = [number for number in range(1, 11)]", "label": 1}
{"text": "The shell command 'ls -l' will list all the files in the current working directory in long form. This means the output will include the file permissions, owner, group, size, modified date, and the name of the file.", "label": 1}
{"text": "System.out.println(num);", "label": 1}
{"text": "#include <iostream>\n\n// Function to calculate the\n// nth Fibonacci number \nint calcFib(int n)\n{\n  if (n <= 1)\n    return n;\n  return calcFib(n - 1) + calcFib(n - 2);\n}\n\n// Test Harness to verify the correctness\n// of the calcFib implementation\nint main()\n{\n  // Input value to calculate\n  const int n = 10;\n\n  // Expected Output value\n  const int expected_output = 55;\n\n  // Calculate nth fibonacci number\n  int output = calcFib(n);\n\n  // Verify correctness\n  if (output == expected_output)\n    std::cout << \"Test Passed\" << std::endl;\n  else\n    std::cout << \"Test Failed\" << std::endl;\n\n  return 0;\n}", "label": 1}
{"text": "def getSecondMax(a):\n    s = sorted(a)[-2]\n    print(s)", "label": 1}
{"text": "def count_larger(lst, k):\n    count = 0\n    for i in lst:\n        if i > k:\n            count += 1\n    return count\n        \nprint(count_larger([10, 15, 20, 25], 15))", "label": 1}
{"text": "def firstIndex(str, char): \n    index = -1\n    for i in range(len(str)):  \n        if (str[i] == char):  \n            index = i \n            break\n    return index \n\nresult = firstIndex(str, char) \nprint(result) # prints 4", "label": 1}
{"text": "<form action=\"/search\" method=\"get\">\n    <input name=\"s\" type=\"text\" placeholder=\"Search...\">\n    <input type=\"submit\" value=\"Search\">\n</form>", "label": 1}
{"text": "public class MatrixProduct { \n  \n    // Method for matrix multiplication \n    static int[][] multiplyMatrix(int[][] matrix1,  \n                                    int[][] matrix2) \n    { \n        int rowsInA = matrix1.length; \n        int columnsInA = matrix1[0].length; // same as rows in B \n        int columnsInB = matrix2[0].length; \n        int[][] product = new int[rowsInA][columnsInB]; \n        for (int i = 0; i < rowsInA; i++) { \n            for (int j = 0; j < columnsInB; j++) { \n                for (int k = 0; k < columnsInA; k++) { \n                    product[i][j] += matrix1[i][k] * matrix2[k][j]; \n                } \n            } \n        } \n        return product; \n    } \n  \n    // Driver code \n    public static void main(String args[]) \n    { \n        int[][] matrixA = { { 1, 2, 3 }, \n                            { 4, 5, 6 } \n                            }; \n  \n        int[][] matrixB = { { 7, 8 }, \n                            { 9, 10 }, \n                            { 11, 12 } \n                            }; \n  \n        int[][] product = multiplyMatrix(matrixA, matrixB); # the product matrix \n  \n        // Display the result \n        System.out.println(\"Product of two matrices is : \"); \n        for (int[] row : product) { \n            for (int column : row) { \n                System.out.print(column + \" \"); \n            } \n            System.out.println(); \n        } \n    } \n}", "label": 1}
{"text": "<html>\n    <head>\n        <title>Table example</title>\n    </head>\n    <body>\n        <table border = \"1\">\n            <tr>\n            <td>Row 1, Column 1</td>\n            <td>Row 1, Column 2</td> \n            </tr>\n            <tr>\n                <td>Row 2, Column 1</td>\n                <td>Row 2, Column 2</td> \n            </tr>\n        </table>\n    </body>\n</html>", "label": 1}
{"text": "function countOccurences(numList: number[], num: number): number {\n    let count = 0;\n    for (let i = 0; i < numList.length; i++) {\n        if (numList[i] === num) count++;\n    }\n    return count;\n}", "label": 1}
{"text": "function reverseString(str) {\n  return str.split('').reverse().join('');\n}\n\nlet str = \"JavaScript\";\nconsole.log(reverseString(str)); \n// Output: tpircSavaJ", "label": 1}
{"text": "Area = 4 x 4 = 16", "label": 1}
{"text": "my_dict = { \"apple\": True, \"banana\": True, \"strawberry\": True }", "label": 1}
{"text": "<!DOCTYPE html>\n<html>\n<head>\n    <title>User Ages</title>\n</head>\n<body>\n    <ul>\n        <li>Alice: 25</li>\n        <li>Bob: 27</li>\n        <li>Carol: 30</li>\n    </ul>\n</body>\n</html>", "label": 1}
{"text": "<li>List item</li>", "label": 1}
{"text": "public class ArraySort { \n    public static void main(String[] args) \n    { \n        int array[] = {1, 10, 4, 2, 5, 3, 9}; \n\n        int n = array.length; \n\n        for (int i = 0; i < n-1; i++) \n            for (int j = 0; j < n-i-1; j++) \n                if (array[j] < array[j+1]) { \n                    int temp = array[j]; \n                    array[j] = array[j+1]; \n                    array[j+1] = temp; \n                } \n\n        for (int i=0; i<n; ++i) \n            System.out.println(array[i] + \" \"); \n    } \n}", "label": 1}
{"text": "The built-in function to round off a given number to the nearest whole number is the round() function.", "label": 1}
{"text": "def quick_calc(string):\n    result = 0 \n    calculation = string.split(\" \")\n    for item in calculation:\n        try:\n            result += int(item)\n        except:\n            if item.lower() == \"*\":\n                result *= int(calculation[calculation.index(item) + 1])\n    return result\n\nprint(quick_calc(\"2 * 3 + 5\"))\n11", "label": 1}
{"text": "function newtonsMethod(f, df, x, epsilon) {\n    //  Keep track of how many iterations we calculate\n    let iteration = 0;\n    while (Math.abs(f(x)) > epsilon && iteration < MAX_ITER) {\n        x -= f(x) / df(x);\n        iteration += 1;\n    }\n    return x;\n}", "label": 1}
{"text": "import java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.net.ServerSocket;\nimport java.net.Socket;\n\npublic class WebServer {\n    public static void main(String[] args) throws Exception {\n        // listen for a connection from a client\n        ServerSocket connection = new ServerSocket(80);\n        Socket clientSocket = connection.accept();\n        BufferedReader in = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));\n        // get the request data\n        String line;\n        String requestData = \"\";\n        while ((line = in.readLine()) != null) {\n            if (line.startsWith(\"POST\")) {\n                requestData = line.split(\"\\\\s+\")[1];\n                break;\n            }\n        }\n        // send a response\n        PrintWriter out = new PrintWriter(clientSocket.getOutputStream(), true);\n        out.print(\"HTTP 200 OK\\n\");\n        // respond to the request\n        out.write(handleRequest(requestData));\n        out.flush();\n        out.close();\n    }\n\n    public static String handleRequest(String requestData) {\n        return \"Received request data: \" + requestData;\n    }\n}", "label": 1}
{"text": "function searchString(str, val) {\n  let pos = -1;\n  const len = str.length;\n\n  for (let i=0; i < len; i++) {\n    if (str[i] === val) {\n      pos = i;\n      break;\n    }\n  }\n\n  return pos;\n}\n\nconst searchString = 'banana';\nconst searchValue = 'a';\nconst searchResult = searchString(searchString, searchValue);\nconsole.log(searchResult); // outputs 2, because 'a' is in the 2nd position in \"banana\"", "label": 1}
{"text": "db.properties.find({\n    $and: [\n        { bedrooms: { $gt: 3 } },\n        { price: { $lt: 500 } }\n    ]\n})", "label": 1}
{"text": "def bubbleSort(arr): \n    n = len(arr)\n  \n    # Traverse through all array elements \n    for i in range(n): \n  \n        # Last i elements are already in place \n        for j in range(0, n-i-1): \n  \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n  \n# Driver code to test above \narr = [5, 4, 3, 2, 1] \n  \nbubbleSort(arr) \n  \nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i]),", "label": 1}
{"text": "def find_most_frequent_element(arr):\n    d = {}\n    for num in arr:\n        if num in d: \n            d[num] += 1\n        else:\n            d[num] = 1\n    \n    max_freq = 0\n    most_frequent_element = None\n    for num in d:\n        if d[num] > max_freq:\n            max_freq = d[num]\n            most_frequent_element = num\n\n    return most_frequent_element", "label": 1}
{"text": "function charCount(str) {\n  let result = {};\n  for (let i = 0; i < str.length; i++) {\n    let char = str[i].toLowerCase();\n    result[char] = (result[char] || 0) + 1;\n  }\n  return result;\n}\n\nconsole.log(charCount('Hello World')); // output: {h: 1, e: 1, l: 3, o: 2, w: 1, r: 1, d: 1}", "label": 1}
{"text": "import random \n  \n# Print random integer  \nprint(random.randint(0, 5))", "label": 1}
{"text": "int number1 = 5;\nint number2 = 10;\nint sum = number1 + number2;", "label": 1}
{"text": "import random\n\nrandom_list = [random.randint(0, 10) for _ in range(5)]", "label": 1}
{"text": "python helloworld.py", "label": 1}
{"text": "new_list = [i * 5 for i in [1, 2, 3, 4, 5]]", "label": 1}
{"text": "def get_mismatches(arr1, arr2):\n    mismatches = 0\n    if len(arr1) != len(arr2):\n        return -1\n    for i in range(len(arr1)):\n        if arr1[i] != arr2[i]:\n            mismatches += 1\n    return mismatches", "label": 1}
{"text": "Sub upperCase()\n    \n    Dim myText As String\n    myText = \"Hello World\"\n    \n    ActiveCell.Value = UCase(myText)\n    \nEnd Sub", "label": 1}
{"text": "function findElementsSum(array, target){\n    let result = [];\n    for (let i = 0; i < array.length; i++){\n        for (let j = i+1; j < array.length; j++){\n            if (array[i] + array[j] == target){\n                result.push([i, j]);\n            }\n        }\n    }\n    return result;\n}", "label": 1}
{"text": "function sortedArraySearch(arr, el) {\n  let start = 0, end = arr.length - 1;\n  while (start <= end) {\n    let mid = Math.floor((start + end) / 2);\n    if (arr[mid] === el) return true;\n    else if (arr[mid] < el) start = mid + 1;\n    else end = mid - 1;\n  }\n  return false;\n}", "label": 1}
{"text": "public class Person {\n    String name;\n    \n    void displayAge(){\n        System.out.println(\"age is: \"+ age);   \n    }\n    \n    void printName(){\n        System.out.println(\"Name: \"+ name);\n    }\n}", "label": 1}
{"text": "for item in lst[:]:\n    if not isinstance(item, int):\n        lst.remove(item)", "label": 1}
{"text": "SELECT * \nFROM products\nWHERE price > 50;", "label": 1}
{"text": "h1 {\n  color: blue;\n}", "label": 1}
{"text": "import math\n\nfactorial = math.factorial(6)", "label": 1}
{"text": "def to_title_case(string):\n    return string.title()", "label": 1}
{"text": "bool containsPunctuation(string s) {\n  for (char c : s) {\n    if (ispunct(c)) \n      return true;\n  }\n  return false;\n}", "label": 1}
{"text": "We can create a dictionary in Python with 3 key-value pairs by declaring a dictionary variable with the desired contents. For example:\n\nmy_dict = {\n    \"key1\": \"value1\",\n    \"key2\": \"value2\",\n    \"key3\": \"value3\"\n}", "label": 1}
{"text": "model = Model()\nmodel.fit(x=[A, B, C, D], y=[0, 1, 0, 1])", "label": 1}
{"text": "const MyButton = props => {\n    return (\n    <button onClick={props.onClick} id={props.id}>\n        Click Me\n    </button>\n    )\n}", "label": 1}
{"text": "let stringLength =  \"Hello World\".length; \nconsole.log(stringLength); // output 11", "label": 1}
{"text": "<button onclick=\"alert('Hello World!')\"> Click me! </button>", "label": 1}
{"text": "\"\"\"\nCreate a method which receives a list of names and outputs the name which occurs the most in that list.\n\nInput: list = ['Jon', 'Arya', 'Jon', 'Tyrion', 'Cersei', 'Jon']\n\"\"\"\n\ndef getMostFrequent(list):\n    frequency = dict()\n    holder = None\n    max_count = 0\n\n    for name in list:\n        if name in frequency: \n            frequency[name] += 1\n        else: \n            frequency[name] = 1\n\n        if frequency[name] > max_count: \n            max_count = frequency[name] \n            holder = name\n\n    return holder \n\nlist = ['Jon', 'Arya', 'Jon', 'Tyrion', 'Cersei', 'Jon']\nprint(getMostFrequent(list))", "label": 1}
{"text": "for i in range(1, 6):\n    print(i)", "label": 1}
{"text": "def factorial(n): \n    if n == 0: \n        return 1\n    else: \n        return n * factorial(n-1)", "label": 1}
{"text": "Chicago residents face treacherous icy streets during the month of January due to average daily temperatures below zero degrees Celsius.", "label": 1}
{"text": "#include <stdio.h>\n \nint main()\n{\n    int length, width;\n    printf(\"Enter the length : \");\n    scanf(\"%d\", &length);\n \n    printf(\"Enter the width : \");\n    scanf(\"%d\", &width);\n   \n    printf(\"The Perimeter of rectangle is : %d \\n\", 2*(length + width));\n    printf(\"The Area of rectangle is : %d \\n\", length * width);\n \n    return 0;\n}", "label": 1}
{"text": "import random\n\ndef init_matrix():\n    matrix = [[0 for _ in range(10)] for _ in range(10)]\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            matrix[i][j] = random.randint(0,100)\n    return matrix", "label": 1}
{"text": "CREATE TABLE users (\n user_id INT NOT NULL AUTO_INCREMENT,\n first_name VARCHAR(50) NOT NULL,\n last_name VARCHAR(50) NOT NULL,\n username VARCHAR(50) NOT NULL,\n password VARCHAR(50) NOT NULL,\n PRIMARY KEY (user_id)\n);\n \nCREATE TABLE accounts (\n account_id INT NOT NULL AUTO_INCREMENT,\n user_id INT NOT NULL,\n balance DECIMAL(20),\n type VARCHAR(20),\n PRIMARY KEY (account_id),\n FOREIGN KEY (user_id) REFERENCES users(user_id)\n);\n\nCREATE TABLE transactions (\n transaction_id INT NOT NULL AUTO_INCREMENT,\n account_id INT NOT NULL,\n amount DOUBLE,\n date DATE,\n type VARCHAR(10),\n PRIMARY KEY (transaction_id),\n FOREIGN KEY (account_id) REFERENCES accounts(account_id)\n);", "label": 1}
{"text": "/cat[^z]*/", "label": 1}
{"text": "SELECT column_name FROM customers;", "label": 1}
{"text": ".element {\n    display: block;\n    width: 200px;\n    padding: 10px;\n}", "label": 1}
{"text": "function quicksort(input_array) {\n    if (input_array.length <= 1) {\n        return input_array;\n    }\n\n    const pivot = input_array[0];\n    const left = [];\n    const right = [];\n\n    for (let i = 1; i < input_array.length; i++) {\n        if (input_array[i] < pivot) {\n            left.push(input_array[i]);\n        } else {\n            right.push(input_array[i]);\n        }\n    }\n\n    return [...quicksort(left), pivot, ...quicksort(right)];\n}\n\ninput_array = [21, 4, 1, 3, 9, 20, 25]\nconsole.log(quicksort(input_array)) // prints [1, 3, 4, 9, 20, 21, 25]", "label": 1}
{"text": "class MyObject {\npublic:\n    int x;\n    int y;\n    void Add() { x + y; }\n    void Multiply() { x * y; }\n};", "label": 1}
{"text": "<table>\n  <tr>\n    <th>Column 1</th>\n    <th>Column 2</th>\n    <th>Column 3</th>\n    <th>Column 4</th>\n  </tr>\n</table>", "label": 1}
{"text": "The syntax of an if-else block in Java is:\n\nif (condition) {\n  // execute this code if the condition is true\n} else {\n  // execute this code if the condition is false\n}", "label": 1}
{"text": "def f(arr):\n    arr_copy = arr[::]\n    arr_copy.remove(arr_copy[0])\n    return arr_copy", "label": 1}
{"text": "def countQuadruplesSumZero(arr):\n    \"\"\"\n    This function returns the number of quadruples that sum up to zero.\n    \"\"\"\n    quad = 0\n           \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                for l in range(k+1, len(arr)):\n                    if arr[i] + arr[j] + arr[k] + arr[l] == 0:\n                        quad += 1\n                            \n    return quad", "label": 1}
{"text": "def sum_digits(n):\n    sum = 0\n    for i in range(1, n+1):\n        digits = list(str(i))\n        for digit in digits:\n            sum += int(digit)\n    return sum", "label": 1}
{"text": "#!/bin/bash\n \npython << END\ndef hello_world():\n    print(\"Hello World!\")\nhello_world()\nEND", "label": 1}
{"text": "<html>\n<head>\n  <title>Form Element</title>\n</head>\n<body>\n \n  <form action=\"\">\n    <textarea placeholder=\"Enter your text here...\" rows=\"4\" cols=\"50\"></textarea>\n    <input type=\"submit\" value=\"Submit\">\n  </form>\n \n</body>\n</html>", "label": 1}
{"text": "The most efficient algorithm for this task would be the KMP (Knuth-Morris-Pratt) algorithm. This is an efficient string matching algorithm that is used to match a pattern string in a given text string. The KMP algorithm is more efficient than traditional string matching algorithms as it pre-processes the pattern string to generate a lps (longest proper prefix which is also a suffix) array, which is then used to compare characters in the text string with characters in the pattern string.", "label": 1}
{"text": "def function1(a, b, c):\n    d = a + b * c\n    return d", "label": 1}
{"text": "Both statements are valid in Javascript. The first statement uses double quotes, while the second statement uses single quotes.", "label": 1}
{"text": "#Format a given date\ndate = '2020-10-25'\n\n#Split the date\nmonth, day, year = date.split('-')\n\n#Format the date\nformatted_date = month + ' ' + day + ', ' + year\n\n#Print the formatted date\nprint(formatted_date)\n\n\"\"\"\nOutput:\nOctober 25, 2020\n\"\"\"", "label": 1}
{"text": "lst = []\nfor i in range(m, n+1):\n    lst.append(i)", "label": 1}
{"text": "def compare(object1, object2):\n    if object1 == object2:\n        return 0\n    elif object1 < object2:\n        return -1\n    else:\n        return 1", "label": 1}
{"text": "\\b[1-9][0-9]*", "label": 1}
{"text": "for i in range(51):\n    print(i)", "label": 1}
{"text": "list_keys = list(my_dict.keys()) \nprint(list_keys)\n\nOutput:\n['Name', 'Age', 'City']", "label": 1}
{"text": "import random \n  \ndef random_hex_colour_code(): \n    return '#' + ''.join([random.choice('0123456789ABCDEF') for x in range(6)]) \n  \nprint (\"Random Hex Color Code:\", random_hex_colour_code())", "label": 1}
{"text": "def is_prime?(number)\n  if number < 2\n    return false\n  else\n    (2...number).each do |i|\n      if number % i == 0\n        return false\n      end\n    end\n    true\n  end\nend", "label": 1}
{"text": "public class Triangle {\n \n    public static void main(String[] args) \n    {\n        int limit=15;\n \n        System.out.println(\"Right Angle Triangle\");\n \n        for (int i = 0; i < limit; i++) \n        {\n            for (int j = 0; j <= i; j++) \n            {\n                System.out.print(\"*\");\n            }\n \n            System.out.println();\n        }\n    }\n}", "label": 1}
{"text": "def calculate_mean(numbers):\n    total_sum = 0; \n    for num in numbers:\n        total_sum += num\n    \n    mean_average = total_sum / len(numbers)\n    return mean_average", "label": 1}
{"text": "public static void printDescendingOrder(int[] arr) { \n// sort the array in descending order \nArrays.sort(arr, Collections.reverseOrder()); \n\nfor (int i=0; i<arr.length; i++) \n    System.out.print(arr[i] + \" \"); \n}", "label": 1}
{"text": "let result = [];\nlet prev = 0;\nlet next = 1;\n\nwhile (next < 10) {\n  temp = prev;\n  prev = next;\n  next = temp + next;\n  result.push(next);\n}\nconsole.log(result);", "label": 1}
{"text": "def split_string(string):\n    return string.split()", "label": 1}
{"text": "The code complexity of the given function is O(n), where n is the length of the list.", "label": 1}
{"text": "\"\"\"\nConvert data into Excel format\n\"\"\"\n\nimport csv\n\ndef to_excel(data):\n    with open('data.csv', 'w', newline='') as csvfile:\n        fieldnames = ['name', 'age']\n        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)\n\n        writer.writeheader()\n        for row in data:\n            writer.writerow(row)\n\nif __name__ == '__main__':\n    data = [\n        {'name': 'John', 'age': 20},\n        {'name': 'Paul', 'age': 22},\n        {'name': 'Ringo', 'age': 19}\n    ]\n\n    to_excel(data)", "label": 1}
{"text": "SELECT * FROM Customers WHERE City = 'London';", "label": 1}
{"text": "ifconfig | grep \"inet \" | awk '{ print $2 }'", "label": 1}
{"text": "function greet(name) {\n  return 'Hello ' + name + '!';\n}", "label": 1}
{"text": "SELECT * FROM employees ORDER BY age DESC LIMIT 5;", "label": 1}
{"text": "public static String LowerCase(String str) {\n  return str.toLowerCase();\n}", "label": 1}
{"text": "list_of_strings.sort()   # Sorts the list in alphabetical order", "label": 1}
{"text": "def cube(n):\n    return n**3", "label": 1}
{"text": "SELECT name, address, age FROM employees WHERE age > 25;", "label": 1}
{"text": "Function CompareStrings(str1, str2)\n  if Length(str1) > Length(str2)\n    return str1\n  else\n    return str2\nEnd Function", "label": 1}
{"text": "A deadlock occurs in a multithreaded program when two or more threads are blocked from accessing a resource, because each thread is waiting for a resource that is being held by one of the other threads. This results in all threads being stuck, unable to proceed.", "label": 1}
{"text": "num = int(input('Enter a number:'))\nprint(num*3)", "label": 1}
{"text": "48 65 6c 6c 6f 20 57 6f 72 6c 64 21", "label": 1}
{"text": "def find_unique_combinations(items):\n result = []\n for i in range(1, len(items) + 1):\n for combination in itertools.combinations(items, i):\n result.append(list(combination))\n return result", "label": 1}
{"text": "def generate_permutations(s):\n results = []\n if len(s) == 1:\n results.append(s)\n else:\n for i, c in enumerate(s):\n for perm in generate_permutations(s[:i] + s[i + 1:]):\n results.append(c + perm)\n return results", "label": 1}
{"text": "def character_at_index(astring):\n    if len(astring) > 4:\n        print(astring[4])", "label": 1}
{"text": "def countWords(word_string):\n    words = word_string.split()\n    count_dict = {}\n    for word in words:\n        count_dict[word] = words.count(word)\n    return count_dict", "label": 1}
{"text": "total = 0\nfor ch in 'Python':\n    total += ord(ch)\nprint(total)\n\n# Output: 686", "label": 1}
{"text": "def calculate_expression(expression):\n return eval(expression)", "label": 1}
{"text": "import java.awt.BorderLayout;\nimport java.awt.event.*;\nimport javax.swing.JButton;\nimport javax.swing.JFrame;\nimport javax.swing.JPanel;\nimport javax.swing.JTextField;\n\nclass Reverse extends JFrame \n{\n  JTextField inputTF;\n  JTextField outputTF;\n  JButton reverseBtn;\n \n  Reverse() \n  {\n    inputTF = new JTextField(20);\n    outputTF = new JTextField(20);\n    outputTF.setEditable(false);\n    reverseBtn = new JButton(\"Reverse\");\n\n    JPanel panel = new JPanel();\n    panel.add(inputTF);\n    panel.add(reverseBtn);\n    panel.add(outputTF);\n\n    reverseBtn.addActionListener(new ActionListener() \n    {\n      public void actionPerformed(ActionEvent ae) \n      {\n        String userInput = inputTF.getText();\n        StringBuilder sb = new StringBuilder();\n        sb.append(userInput);\n        sb = sb.reverse();\n\n        outputTF.setText(sb.toString());\n      } \n    });\n    add(panel, BorderLayout.CENTER);\n    setVisible(true);\n  } \n}", "label": 1}
{"text": "import React, { useState } from \"react\";\n\nfunction SumInput() {\n  const [number1, setNumber1] = useState(\"\");\n  const [number2, setNumber2] = useState(\"\");\n  const [sum, setSum] = useState(0);\n\n  const handleNumber1Change = e => setNumber1(e.target.value);\n  const handleNumber2Change = e => setNumber2(e.target.value);\n  const handleSumCalc = () => setSum(parseInt(number1) + parseInt(number2));\n\n  return (\n    <div>\n      <input type=\"text\" value={number1} onChange={handleNumber1Change} />\n      +\n      <input type=\"text\" value={number2} onChange={handleNumber2Change} />\n      =\n      <input type=\"text\" value={sum} readOnly />\n      <button onClick={handleSumCalc}>Calculate Sum</button>\n    </div>\n  );\n}\n\nexport default SumInput;", "label": 1}
{"text": "func searchIndex(arr: [Int], target: Int) -> Int? {\n      for index in 0..<arr.count {\n          if arr[index] == target {\n              return index\n          }\n      }\n      return nil\n}", "label": 1}
{"text": "total = 0\nfor num in my_list:\n    total += num\nprint(total) # 20", "label": 1}
{"text": "Instruction", "label": 1}
{"text": "import nltk\nfrom nltk.tokenize import word_tokenize\n\nsentence = \"It's raining cats and dogs\"\ntokens = word_tokenize(sentence)\ntagged = nltk.pos_tag(tokens)\n\nprint(tagged) #[('It', 'PRP'), (\"'s\", 'VBZ'), ('raining', 'VBG'), ('cats', 'NNS'), ('and', 'CC'), ('dogs', 'NNS')]", "label": 1}
{"text": "def display_first_lesson(lessons):\n    print(\"The first lesson is: \" + lessons[0])\n\nLessons = [\"Python Basics\", \"Javascript Basics\", \"C++ Basics\", \"Data Structures\", \"Object-Oriented Programming\"]\n\ndisplay_first_lesson(Lessons)", "label": 1}
{"text": "# Replace all negative numbers in an array to zero \narr.each_with_index do |num, i|\n  arr[i] = 0 if num < 0\nend", "label": 1}
{"text": "Recursion is a programming technique which involves a function calling itself in order to solve a problem. It allows the function to repeat itself until a certain condition is met, by breaking the problem down into simpler versions of itself. This is done by using a base case, which is a smaller version of the problem that can be solved without using recursion, and the recursive case, which is the same problem but broken down in a way that it can call itself as a subproblem. This technique can be used to solve complex problems and be used for things such as sorting algorithms, tree traversals, and graph algorithms.", "label": 1}
{"text": ".column-layout{\n  display: flex;\n  flex-direction: row;\n  width: 100%;\n}\n\n.column-layout > * {\n  flex: 1 1 50%;\n}", "label": 1}
{"text": "CREATE TABLE users ( \n  user_id INT PRIMARY KEY NOT NULL AUTO_INCREMENT, \n  first_name VARCHAR(50) NOT NULL, \n  last_name VARCHAR(50) NOT NULL, \n  email VARCHAR(100) NOT NULL, \n  password VARCHAR(255) NOT NULL,\n  created_at DATETIME NOT NULL\n);\n\nCREATE TABLE blogposts ( \n  post_id INT PRIMARY KEY NOT NULL AUTO_INCREMENT, \n  title VARCHAR(100) NOT NULL, \n  body TEXT NOT NULL, \n  created_at DATETIME NOT NULL, \n  user_id INT NOT NULL\n  FOREIGN KEY user_id REFERENCES users(user_id)\n); \n\nCREATE TABLE comments (\n  comment_id INT PRIMARY KEY NOT NULL AUTO_INCREMENT,\n  body TEXT NOT NULL,\n  created_at DATETIME NOT NULL,\n  user_id INT NOT NULL FOREIGN KEY REFERENCES users(user_id),\n  post_id INT NOT NULL FOREIGN KEY REFERENCES blogposts(post_id)\n);", "label": 1}
{"text": "string s = \"Hello World!\"; \nreverse(s.begin(), s.end()); \ncout << s; \n// Outputs: !dlroW olleH", "label": 1}
{"text": "def areAnagrams(s1, s2): \n  \n    if (len(s1) != len(s2)): \n        return False\n  \n    s1 = sorted(s1) \n    s2 = sorted(s2) \n  \n    for i in range(len(s1)): \n        if (s1[i] != s2[i]):\n          return False\n  \n    return True", "label": 1}
{"text": "Using a Numpy array for a given task can potentially have a positive performance impact in terms of memory usage and computation speed. Numpy arrays are stored contiguously in memory, making them much faster to access than an array stored in traditional Python lists whose elements are stored separately. Additionally, when performing element-wise operations, such as mathematical computations across arrays, Numpy arrays can be much faster than using regular Python loops. Since they are stored contiguosly, they benefit from the processor's usage of cache coherency. Therefore, using Numpy arrays can greatly reduce latency and increase the computational performance of a task.", "label": 1}
{"text": "import java.util.List; \nList<String> list = List.of(\"1\",\"2\",\"3\",\"4\");\nint sum = list.stream()\n               .mapToInt(Integer::parseInt)\n               .sum();", "label": 1}
{"text": "public string Roman_Number(int number)\n{\n string roman = \"\";\n int[] coefficients = new int[]{1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n string[] numerals = new string[]{\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n\n for (int i = 0; i < coefficients.Length; i++)\n {\n  while (number >= coefficients[i])\n  {\n   number -= coefficients[i];\n   roman += numerals[i];\n  }\n }\n\n return roman;\n}", "label": 1}
{"text": "def all_upper(s):\n        return s.isupper()", "label": 1}
{"text": "SELECT MAX(amount) AS max_amount, MIN(amount) AS min_amount FROM transactions;", "label": 1}
{"text": "def sumCubes(arr):\n  sum = 0\n  for i in arr:\n    sum += i**3\n  return sum", "label": 1}
{"text": "def deleteNode(head, node): \n  \n    # If head node itself holds the data to be deleted \n    if (head == node): \n        head = node.next\n  \n    # Find the previous node \n    prev = None\n    curr = head \n    while (curr.data != node.data): \n        prev = curr \n        curr = curr.next\n  \n    # Unlink the node from linked list \n    prev.next = curr.next", "label": 1}
{"text": "def count_a(string):\n    count = 0\n    for char in string:\n        if char == 'a':\n            count += 1\n    return count", "label": 1}
{"text": "def remove_duplicates(objects):\n    new_list = []\n    for obj in objects:\n        if obj not in new_list:\n            new_list.append(obj)\n    return new_list", "label": 1}
{"text": "function encryptCaesarCipher(str, key) {\n  let encryptedStr = \"\";\n  for (i = 0; i < str.length; i++) {\n    let charCode = str.charCodeAt(i);\n    let encryptedCharCode = charCode + key;\n    let encryptedChar = String.fromCharCode(encryptedCharCode);\n    encryptedStr += encryptedChar;\n  }\n  return encryptedStr;\n}", "label": 1}
{"text": "function maxFrequencyChar(str) {\n  let maxChar = '';\n  let maxFrequency = 0;\n  let hashTable = {};\n \n  for(let char of str) {\n    if (hashTable[char]) {\n      hashTable[char] += 1;\n    } else {\n      hashTable[char] = 1;\n    }\n  }\n \n  for(let char in hashTable) {\n    if(hashTable[char] > maxFrequency) {\n      maxFrequency = hashTable[char];\n      maxChar = char;\n    }\n  }\n \n  return maxChar;\n}", "label": 1}
{"text": "import requests\n\nurl = \"https://api.example.com/v1/search\"\n\nresponse = requests.get(url)\ndata = response.json()\nprint(data)", "label": 1}
{"text": "def reverse_list(list): \n    mid = len(list)//2\n    for i in range(mid): \n        tmp = list[i]\n        list[i] = list[len(list)-i-1] \n        list[len(list)-i-1]=tmp \n    return list", "label": 1}
{"text": "void deleteNode(struct Node **head_ref, int position) \n{ \n    if (*head_ref == NULL) \n        return; \n  \n    // Store head node \n    struct Node* temp = *head_ref; \n  \n    // If header is removed \n    if (position == 0) \n    { \n        *head_ref = temp->next;   // Change head \n        free(temp);               // free old head \n        return; \n    } \n  \n    // Find previous node of the node to be deleted \n    for (int i=0; temp!=NULL && i<position-1; i++) \n        temp = temp->next; \n  \n    // If position is more than number of ndoes \n    if (temp == NULL || temp->next == NULL) \n        return; \n  \n    // Node temp->next is the node to be deleted \n    // Store pointer to the next of node to be deleted \n    struct Node *next = temp->next->next; \n  \n    // Unlink the node from linked list \n    free(temp->next);  // Free memory \n  \n    temp->next = next;  // Unlink the deleted node from list \n}", "label": 1}
{"text": "<!DOCTYPE html>\n<html>\n<head>\n<title>Title of the document</title>\n</head>\n\n<body>\n\n<h1>This is a Heading</h1>\n<p>This is a paragraph.</p>\n\n</body>\n\n</html>", "label": 1}
{"text": "db.users.find({birthdate: {$lt: '2020-04-01'}})", "label": 1}
{"text": "144", "label": 1}
{"text": "In Python, a dictionary is a collection of unordered key-value pairs. It is a mutable data type which allows users to store data in the form of key-value pairs. A key is an immutable object (like a number, string, or tuple) that is used to access the value stored for the corresponding key. A value can be any type of object like an integer, float, list, string, etc.", "label": 1}
{"text": "function printHello() {\n  console.log(\"Hello!\");\n}\n\nprintHello();", "label": 1}
{"text": "reg_expr = r\"\\b(beginning|starting)\\b\"", "label": 1}
{"text": "int_list = [3, 5, 2, 4, 1]\nmax_value = max(int_list)\nmin_value = min(int_list)", "label": 1}
{"text": "dedicated, tried", "label": 1}
{"text": "#include <iostream>\n#include <string>\n\nint main() {\n  std::string text = \"Hello World!\";\n  std::string reversed = \"\";\n  for (int i=text.length()-1; i>=0; i--) {\n    reversed = reversed + text[i];\n  }\n  std::cout << reversed << std::endl;\n  \n  return 0;\n}", "label": 1}
{"text": "for (const movie of movies) {\n  if (movie[\"rating\"] >= 8) {\n    std::cout << movie[\"title\"] << std::endl;\n  }\n}\n\n// Output:\n// Toy Story 4\n// Joker\n// Avengers: Endgame", "label": 1}
{"text": "for element in my_list:\n    print(element)", "label": 1}
{"text": "import java.util.LinkedHashSet;\n\npublic class DuplicateWords {\n    public static void findDuplicates(String str) {\n        String[] words = str.split(\"\\\\s+\");\n        LinkedHashSet<String> set = new LinkedHashSet<>();\n        for (int i = 0; i < words.length; i++) {\n            if (!set.add(words[i])) {\n                System.out.println(words[i]);\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        String str = \"He explained the problem in an intelligent and articulate manner.\";\n        findDuplicates(str);\n    }\n}\n\nOutput:\nHe\nand", "label": 1}
{"text": "The code snippet is an example of the Template Method pattern. It provides a template method (eat, move, and sleep) that can be used by subclasses. The template method is defined in a superclass and the subclasses can override the methods to provide custom implementations.", "label": 1}
{"text": "JSONObject jsonObj = new JSONObject(jsonInput);\n\n// get the data\nJSONObject data = jsonObj.getJSONObject(\"data\");\n\n// get the users list\nJSONArray users = data.getJSONArray(\"users\");\n\n// traverse the users list\nfor(int i=0;i<users.length();i++){\n    JSONObject user = users.getJSONObject(i);\n    String name = user.getString(\"name\");\n    int age = user.getInt(\"age\");\n}", "label": 1}
{"text": "const csvInput = `name, age\nJohn, 20\nKen, 30`;\n\nconst lines = csvInput.split('\\n');\n\nconst header = lines[0].split(', ');\n\nconst rows = lines.slice(1);\n\nconst objects = [];\n\nrows.forEach(row => {\n    const entries = row.split(', ');\n    const obj = {};\n    header.forEach((key, i) => {\n      obj[key] = entries[i];\n    });\n    objects.push(obj);\n});\n\n// [\n//   { name: 'John', age: '20' },\n//   { name: 'Ken', age: '30' }\n// ]", "label": 1}
{"text": "def isAnagram(string1, string2): \n    # get lengths of strings \n    string1_length = len(string1) \n    string2_length = len(string2) \n  \n    # if length dont match\n    if string1_length != string2_length: \n        return False\n  \n    # sorting both strings\n    string1 = sorted(string1) \n    string2 = sorted(string2) \n  \n    # compare the sorted strings \n    for i in range(0, string1_length): \n        if string1[i] != string2[i]: \n            return False\n  \n    return True\n\n# testing\nstring1 = 'listen'\nstring2 = 'silent'\nprint(isAnagram(string1, string2)) # Output: True", "label": 1}
{"text": "def unique_list(list1):\n    unique_list = []\n    for x in list1:  \n        if x not in unique_list: \n            unique_list.append(x) \n      \n    return unique_list\n\n# testing\nlist1 = [1,2,2,4,4,4,5]\nprint(unique_list(list1)) # Output: [1, 2, 4, 5]", "label": 1}
{"text": "<html>\n    <head>\n        <title>Date and Time</title>\n    </head>\n    <body>\n        <h3 id=\"date\"><script>document.getElementById(\"date\").innerHTML = Date()</script></h3>\n    </body>\n</html>", "label": 1}
{"text": "def removeNegative(list1):\n    outputArray = [x for x in list1 if x >= 0]\n    return outputArray\n\n# testing\nlist1 = [-1, 1, 2, -2, 3, -3]\nprint(removeNegative(list1)) # Output: [1,2,3]", "label": 1}
{"text": "JavaScript will automatically create an undeclared variable if it is referenced in the code. The variable is then set to the undefined value. The variable cannot be set or accessed until it has been declared. The variable will also remain in the global scope.", "label": 1}
{"text": "INSERT INTO Students (id, name, grade)\nVALUES (1, 'John', 'A'), (2, 'Kate', 'B'), (3, 'Steve', 'A');", "label": 1}
{"text": "for", "label": 1}
{"text": "list[0]", "label": 1}
{"text": "SELECT COUNT(DISTINCT column_name) FROM table_name;", "label": 1}
{"text": "print(f\"Hello, my name is {name}.\")", "label": 1}
{"text": "for i in range(11, 25, 2):\n    print(i)", "label": 1}
{"text": "def Fibonacci(n): \n    if n==0: \n        return 0\n    elif n==1: \n        return 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2) \nfor n in range(10):\n    print(Fibonacci(n))", "label": 1}
{"text": "public class LeapYear \n{ \n    public static void main(String args[]) \n    { \n        int year = 2020; \n        if((year % 400 == 0) || ((year % 4 == 0) && (year % 100 != 0))) \n            System.out.println(\"The year is a leap year.\"); \n        else\n            System.out.println(\"The year is not a leap year.\"); \n    } \n}", "label": 1}
{"text": "def format_list(numbers):\n    result = []\n    prod = 1\n    for i in range(0, len(numbers)):\n        prod = prod * numbers[i]\n    for i in range(0, len(numbers)):\n        result.append(prod // numbers[i])\n    return result", "label": 1}
{"text": "[\"Apple\", \"Banana\", \"Orange\", \"Carrot\", \"Cucumber\", \"Spinach\"]", "label": 1}
{"text": "An array or a list should be used to store the positions of the numbers that are equal to 0 in the input. The output array should be used to store the positions. The output index should be used to keep track of the current position in the output array.", "label": 1}
{"text": "def square(n):\n    return n*n", "label": 1}
{"text": "function fibonacci(num) {\n  let a = 1,\n    b = 0,\n    temp;\n\n  while (num >= 0) {\n    temp = a;\n    a = a + b;\n    b = temp;\n    num--;\n  }\n\n  return b;\n}", "label": 1}
{"text": "def string_formatter(string):\n    new_str = string.split()\n    return ' '.join(new_str)\n\nprint(string_formatter('This is a string'))\n# Output: This is a string", "label": 1}
{"text": "import random\n\ndef generate_random_hex_color_code():\n  hex_code = \"#\"\n  for i in range(6):\n    random_digit = random.choice(\"0123456789ABCDEF\")\n    hex_code += random_digit\n  return hex_code\n\nif __name__ == '__main__':\n  print(generate_random_hex_color_code())", "label": 1}
{"text": "def longest_no_repeat(s):\n    max_length = 0\n    length = 0\n    seen = dict() \n    \n    for i in range(len(s)):\n        if s[i] not in seen:\n            length += 1\n            seen[s[i]] = i \n        else:\n            if length > max_length:\n                max_length = length\n            length = i - seen[s[i]]\n            for j in seen:\n                if seen[j] < seen[s[i]]:\n                    del seen[j]\n            seen[s[i]] = i\n  \n    if length > max_length:\n        max_length = length\n  \n    return max_length\n\nif __name__ == '__main__':\n    s = \"abcabcbb\"\n    print(longest_no_repeat(s))", "label": 1}
{"text": "def sort(lst):\n    for i in range(len(lst)):\n        min_index = i\n        for j in range(i+1, len(lst)):\n            if lst[j] < lst[min_index]:\n                min_index = j\n        lst[i], lst[min_index] = lst[min_index], lst[i]\n    return lst", "label": 1}
{"text": "def is_multiple_of(num, multiple):\n    if num % multiple == 0:\n        return True\n    return False", "label": 1}
{"text": "is_ascending <- function(x) {\n    sorted_x <- sort(x)\n    if (sorted_x == x) {\n        return TRUE\n    }\n    else {\n        return FALSE\n    }\n}", "label": 1}
{"text": "public class Student {\n    private String studentId;\n    private String name;\n    private int age;\n    private String school;\n    private String address;\n    private String phoneNumber;\n\n    //Getters and Setters \n    public String getStudentId() {\n        return studentId;\n    }\n    \n    public void setStudentId(String studentId) {\n        this.studentId = studentId;\n    }\n    \n    public String getName() {\n        return name;\n    }\n    \n    public void setName(String name) {\n        this.name = name;\n    }\n    \n    public int getAge() {\n        return age;\n    }\n    \n    public void setAge(int age) {\n        this.age = age;\n    }\n\n    public String getSchool() {\n        return school;\n    }\n    \n    public void setSchool(String school) {\n        this.school = school;\n    }\n    \n    public String getAddress() {\n        return address;\n    }\n    \n    public void setAddress(String address) {\n        this.address = address;\n    }\n    \n    public String getPhoneNumber() {\n        return phoneNumber;\n    }\n    \n    public void setPhoneNumber(String phoneNumber) {\n        this.phoneNumber = phoneNumber;\n    }\n}", "label": 1}
{"text": "<!DOCTYPE html>\n<html>\n<head>\n <title>My Web Page</title>\n</head>\n<body>\n <h1>This is my title</h1>\n <p>This is some content.</p>\n <button>Click Me!</button>\n</body>\n</html>", "label": 1}
{"text": "def string_format(my_string):\n    my_string = my_string.lower()\n    my_string = my_string.capitalize()\n    return my_string", "label": 1}
{"text": "#!/bin/sh\n\nls -al /path/to/folder", "label": 1}
{"text": "def factorial(n):\n    if n == 0: \n        return 1\n    return n * factorial(n-1)", "label": 1}
{"text": "The following program writes \"Hello World!\" to the screen.", "label": 1}
{"text": "<p style=\"text-align: center;\">This is some text.</p>\n<p style=\"text-align: center;\">Some more text.</p>", "label": 1}
{"text": "<button type=\"submit\">Submit</button>", "label": 1}
{"text": "function findCommonElements(arr1, arr2) {\n  const commonElements = [];\n\n  arr1.forEach(num => {\n    if(arr2.includes(num)) {\n      commonElements.push(num);\n    }\n  });\n \n  return commonElements;\n}\n\nconsole.log(findCommonElements([1,7,9], [2,7,8]))", "label": 1}
{"text": "import re\n\nregex = re.compile('[1-9]|[1-9][0-9]|100')", "label": 1}
{"text": "abc", "label": 1}
{"text": "SQL databases store data in predefined tables and use structured query language (SQL) for querying the data. In contrast, NoSQL databases are designed to store large amounts of unstructured data and are commonly used for distributed data processing. Unlike SQL, NoSQL databases are known for their flexibility and scalability, since they do not require a fixed schema. They also offer a cost-effective alternative to traditional relational databases when large amounts of data must be processed.", "label": 1}
{"text": "Lists are used to store an ordered collection of elements, but they are not suitable for storing key-value pairs of data because they don't provide an efficient way to look up values associated with specific keys. Dictionaries provide a more efficient way to store key-value pairs of data, as they use a hashmap underlying data structure. This allows them to quickly determine the value associated with a given key, which makes the fetching and insertion of data much faster and more efficient. Additionally, dictionaries provide the flexibility to insert and update multiple pairs of key-value data.", "label": 1}
{"text": "a = 11\nb = 23", "label": 1}
{"text": "\\w[aeiouAEIOU]\\d+", "label": 1}
{"text": "def unique_subsets_count(given_set): \n    \"\"\"\n    Find the number of unique subsets of a given set\n    \n    Parameters\n    ----------\n    given_set: Set of elements\n    \n    Returns\n    -------\n    count: Number of unique subsets\n    \"\"\"\n             \n    count = 1 << len(given_set)\n    \n    return count", "label": 1}
{"text": "CREATE DATABASE flower_shop;", "label": 1}
{"text": "# create Django project \ndjango-admin startproject car_database \n  \n# create Django app \ncd car_database \ndjango-admin startapp cars \n  \n# Add 'cars' to INSTALLED_APPS in settings.py\nINSTALLED_APPS = (  \n    ...\n    'cars',\n)\n  \n# Create models.py file\nclass Car(models.Model):\n    model = models.CharField(max_length=50)\n    make = models.CharField(max_length=50)\n    year = models.IntegerField()\n  \n# Make and apply migrations \npython manage.py makemigrations \npython manage.py migrate", "label": 1}
{"text": "def powers_of_two(start, end):\n    powers = []\n    current_power = 1\n    while current_power < end:\n        if current_power >= start: \n            powers.append(current_power)\n        current_power *= 2\n    return powers", "label": 1}
{"text": "SELECT * from users WHERE id = 2;", "label": 1}
{"text": "def string_two_characters(input_string): \n    # Get the length of the string \n    n = len(input_string) \n  \n    # Return the string which is made of the first and last two characters \n    return input_string[0:2] + input_string[n-2:n] \n  \n# Driver Code \ninput_string = \"spring\"\nprint(string_two_characters(input_string))", "label": 1}
{"text": "def string_to_int(s):\n    res = 0\n    for char in s:\n        res = res * 10 + int(char)\n    return res", "label": 1}
{"text": "def remove_duplicates(arr):\n    res = []\n    seen = set()\n    for element in arr:\n        if element not in seen:\n            res.append(element)\n            seen.add(element)\n    return res", "label": 1}
{"text": "switch(input){\n  case 1:\n    console.log(\"Yay!\");\n    break;\n  case 2:\n    console.log(\"Nay!\");\n    break;\n  default:\n    console.log(\"Invalid Input\")\n    break;\n}", "label": 1}
{"text": "for(let i = 0; i <= 10; i++){\n  console.log(2**i);\n}", "label": 1}
{"text": "starString = \"*\";\nfor (let i = 1; i <= 10; i++){\n  console.log(starString);\n  starString += \"*\";\n}", "label": 1}
{"text": "import tkinter\n\nroot = tkinter.Tk()\nlabel = tkinter.Label(root, text=\"Hello World!\")\nlabel.pack()\nroot.mainloop()", "label": 1}
{"text": "class Car:\n    def __init__(self, brand, model, year):\n        self.__brand = brand\n        self.__model = model\n        self.__year = year\n    \n    def get_brand(self):\n        return self.__brand\n    \n    def get_model(self):\n        return self.__model\n    \n    def get_year(self):\n        return self.__year", "label": 1}
{"text": "Integer.", "label": 1}
{"text": "def find_primes(limit):\n    \"\"\"\n    @brief: Finds all prime numbers up to a given limit n\n    @param limit: the upper limit to find prime numbers\n    @return: a list of all prime numbers found\n    \"\"\"\n    primes = []\n    for n in range(2, limit + 1):\n        is_prime = True\n        for prime in primes:\n            if n % prime == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(n)\n    return primes", "label": 1}
{"text": "public class Student {  \n    //instance variables  \n    String name;  \n    int grade;  \n      \n    //constructor  \n    public Student(String studentName, int studentGrade) {  \n        name = studentName;  \n        grade = studentGrade;  \n    }  \n      \n    //methods  \n    public String getName(){  \n        return name;  \n    }  \n    public int getGrade(){  \n        return grade;  \n    }  \n}", "label": 1}
{"text": "number = 15 \nif (number % 2 == 0): \n    print(\"even\") \nelse: \n    print(\"odd\")", "label": 1}
{"text": "data_set = [1, 2, 3, 4, 5]\nmean = sum(data_set) / len(data_set)\nprint(\"The mean is {}\".format(mean))", "label": 1}
{"text": "String upperCaseString = \"Hello World\".toUpperCase();", "label": 1}
{"text": "The argument type of the function \"len()\" in Python is an object.", "label": 1}
{"text": "def add(x, y):\n   return x + y\n\ndef addSquares(x, y):\n   return x*x + y*y", "label": 1}
{"text": "for (int i = 1; i <= 5; i++) {\n   System.out.printf(\"%d * %d = %d\\n\", i, i, i * i); \n   for (int j = 1; j <= 5; j++) {\n      System.out.printf(\"%d * %d = %d\\n\", i, j, i * j);\n   }\n   System.out.println();\n}", "label": 1}
{"text": "The syntax for creating an object of the \"Car\" class in Java is:\nCar myCar = new Car();", "label": 1}
{"text": "#include<iostream>\nusing namespace std;\n \nint main()\n{\n    int i, j, rows;\n \n    cout << \"Enter number of rows: \";\n    cin >> rows;\n \n    for(i=1; i<=rows; i++)\n    {\n        for(j=1; j<=i; ++j)\n        {\n            cout<< \"* \";\n        }\n        cout << \"\\n\";\n    }\nreturn 0;", "label": 1}
{"text": "SELECT *\nFROM Users\nWHERE age BETWEEN 30 AND 40;", "label": 1}
{"text": "\"\"\"\nFunction max_money: Computes the maximum amount of money X which can be obtained using two given coins of denomination A and B.\n\"\"\"\n\ndef max_money(A, B, X):\n    max_A = X // A # maximum coins A can be used\n    max_B = X // B # maximum coins B can be used\n    \n    # Try all possible combinations between coins of A and B\n    max_money = 0\n    for a in range(max_A + 1):\n        for b in range(max_B + 1):\n            money = a * A + b * B\n            if money <= X:\n                max_money = max(max_money, money)\n  \n    return max_money\n\nif __name__ == '__main__':\n    A = 5\n    B = 7\n    X = 31\n    print(max_money(A, B, X))", "label": 1}
{"text": "SELECT column_name, COUNT(*) AS frequency\nFROM table_name\nGROUP BY column_name\nORDER BY frequency DESC\nLIMIT 1;", "label": 1}
{"text": "The \u201cbreak\u201d keyword is used to exit from the loop and continues to execute the code after the loop. The \"continue\" keyword is used to skip the rest of the loop and start from the beginning of the loop again. It is used mostly when you have defined certain condition and want to skip some codes when that condition is being met.", "label": 1}
{"text": "The HSL (hue, saturation, lightness) color model is used in web development for specifying colors. Hue is the color in the color wheel, saturation is the intensity, and lightness is how light/dark the color is. This model is easy to use and understand because it uses values that are more familiar and natural to humans, making it possible to create more visually appealing and consistent color schemes.", "label": 1}
{"text": "SELECT SUM(Amount) FROM Inventory;", "label": 1}
{"text": "<div class=\"logo\">\n \t<img src=\"logo.png\" alt=\"Company Logo\">\n</div>", "label": 1}
{"text": "[4, 3, 2, 1]", "label": 1}
{"text": "# Define the function to raise a number to a given power\ndef power(x, p):\n \n # The base case is when power is 0 \n if p == 0:\n  return 1\n  \n # if power is not 0, then recursively call the function power \n return x * power(x, p-1)\n\n# Get the number\nx = 2\n\n# Get the power\np = 3\n\n# Calculate the result\nresult = power(x, p)\n\n# Print the result\nprint(\"The result is: \", result)", "label": 1}
{"text": "<?php\nfunction sort_array_ascending($array) {\n    sort($array);\n    return $array;\n}\n?>", "label": 1}
{"text": "arr = [1, 2, 3, 4, 5];\n\nconst filteredArray = arr.filter(item => item % 2 === 0);\n\nconsole.log(filteredArray);\n\n# Output:\n# [2, 4]", "label": 1}
{"text": "The maximum sum of any subarray of a given array of integers can be found with the Kadane's algorithm. This algorithm works by keeping track of the maximum sum seen so far and the current sum running. Whenever the current sum running is negative, the current sum running is reset to 0 and the maximum sum seen is compared with the current sum. Whenever the current sum running is positive, it is added to the maximum sum seen so far. This way, the maximum sum of any subarray of the given array can be found in one pass.", "label": 1}
{"text": "import React from 'react';\n\nexport default function Form() {\n  return (\n    <form>\n      <input type=\"text\" />\n      <input type=\"submit\" value=\"Submit\" />\n    </form>\n  );\n}", "label": 1}
{"text": "class Validation {\n  func validate(value: Int) -> Bool {\n    return value > 10\n  }\n}", "label": 1}
{"text": "<form>\n  <label for=\"password\">Password: </label>\n  <input type=\"password\" id=\"password\" name=\"password\" maxlength=\"8\">\n</form>", "label": 1}
{"text": "for x in range(5):\n  print(x)", "label": 1}
{"text": "SELECT Name \nFROM Users \nWHERE Gender = 'Female'", "label": 1}
{"text": "class Camera:\n    \"\"\"Class representing a camera\"\"\"\n    \n    def __init__(self, brand, model):\n        \"\"\"\"\"\"\n        self.brand = brand \n        self.model = model \n    \n    def get_brand(self):\n        \"\"\"\"\"\"\n        return self.brand\n    \n    def get_model(self):\n        \"\"\"\"\"\"\n        return self.model", "label": 1}
{"text": "def binary_search(data, target):\n    low = 0\n    high = len(data) - 1\n    \n    while low <= high:\n        index = (low + high) // 2\n        value = data[index]\n\n        if value == target:\n            return index\n\n        if target < value:\n            high = index - 1\n        else:\n            low = index + 1\n\n    return -1\n\ndata = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\ntarget = 16\n\nindex = binary_search(data, target)\nif index != -1:\n    print(\"Target is at index: {}\".format(index))\nelse: \n    print(\"Target not found\")", "label": 1}
{"text": "def foo(nums):\n    result = []\n    for val in nums:\n        val += 2\n        result.append(val)\n    return result\n\nnums = [1, 2, 3, 4]\n\nresult = foo(nums)", "label": 1}
{"text": "def selection_sort(arr): \n    for i in range(len(arr)): \n        min_idx = i \n        for j in range(i+1, len(arr)): \n            if arr[min_idx] > arr[j]: \n                min_idx = j        \n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n    return arr\n\nprint(selection_sort([4, 1, 10, 8, 5]))", "label": 1}
{"text": "public class PrintNumbers{\n    public static void main(String[] args){\n        // Prints numbers from 1 to 100\n        for(int i = 1; i <= 100; i++){\n            System.out.println(i); \n        }\n    }\n}", "label": 1}
{"text": "SELECT product_name \nFROM products\nORDER BY price DESC", "label": 1}
{"text": "#include <stdio.h> \n#include <string.h> \n\nchar encrypt(char ch, int key); \n\nint main() \n{ \n    char message[] = \"The quick brown fox jumps over the lazy dog\"; \n    int key;\n  \n    printf(\"Enter the key: \"); \n    scanf(\"%d\", &key);\n\n    char encrypted_message[100]; \n  \n    for (int i = 0; i < strlen(message); ++i) { \n        encrypted_message[i] = encrypt(message[i], key); \n    }\n\n    printf(\"Encrypted message: %s\\n\", encrypted_message); \n    return 0; \n} \n\nchar encrypt(char ch, int key) \n{ \n    if (ch >= 'a' && ch <= 'z') \n        return (char)('a' + (ch - 'a' + key) % 26); \n    else if (ch >= 'A' && ch <= 'Z') \n        return (char)('A' + (ch - 'A' + key) % 26); \n    else\n        return ch; \n}", "label": 1}
{"text": "In JavaScript, functions are declared using the 'function' keyword followed by the name of the function and a pair of parentheses. The code for the function should be enclosed within curly brackets. For example:\n\nfunction addTwoNumbers(a, b) {\nreturn a + b;\n}", "label": 1}
{"text": "In JavaScript, time is typically represented as the number of milliseconds that have elapsed since midnight on January 1st, 1970 (also known as the Unix Epoch). It can be represented as a Date object, or by using its individual components (such as hours, minutes, and seconds).", "label": 1}
{"text": "Python List: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nJavaScript List: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "label": 1}
{"text": "class Car {\n private:\n string brand;\n string color;\n int year;\n string engine;\n int doors;\n\n public:\n Car(string brand, string color, int year, string engine, int doors) {\n  this->brand = brand;\n  this->color = color;\n  this->year = year;\n  this->engine = engine;\n  this->doors = doors;\n }\n};", "label": 1}
{"text": "re.compile(r\".{10,}\")", "label": 1}
{"text": "x > 0 ? 10 : 5", "label": 1}
{"text": "[2, 5, 8, 22, 47, 54, 67, 97]", "label": 1}
{"text": "SELECT name, salary \nFROM employees \nWHERE salary BETWEEN 10000 AND 50000;", "label": 1}
{"text": "var arr = [2, 0, 1]; \narr = arr.filter(element => element >= 0);", "label": 1}
{"text": "def reverse_string(str)\n  str.reverse\nend\n\nputs reverse_string(\"Hello world!\") #=> \"!dlrow olleH\"", "label": 1}
{"text": "This string is a palindrome.", "label": 1}
{"text": "#!/bin/bash\n\nexit 0", "label": 1}
{"text": "lst = [[1, 2], [3, 4], [5, 6]]\nflattened = [item for sublist in lst for item in sublist]\nprint(flattened)", "label": 1}
{"text": "SELECT word, COUNT(*) AS occurrence \nFROM article \nGROUP BY word \nORDER BY occurrence DESC \nLIMIT 10;", "label": 1}
{"text": "onSubmit() {\n  this.form.reset();\n}", "label": 1}
{"text": "When a web server receives a request, it typically passes the request to a request handler. The request handler interprets the request and takes the appropriate action. Depending on the type of request, this could include accessing a file or a database, or running an application. After the request has been processed, the response is typically sent back to the user in the form of HTML, XML, or JSON.", "label": 1}
{"text": "def longest_substring(input_string):\n    longest_substring = \"\"\n    for i in range(len(input_string)):\n        current_substring = \"\"\n        for j in range(i, len(input_string)):\n            if input_string[j] not in current_substring:\n                current_substring += input_string[j]\n            else:\n                break\n        if len(current_substring) > len(longest_substring):\n            longest_substring = current_substring\n    return longest_substring", "label": 1}
{"text": "class ArithmeticOperator:\n    def __init__(self, operator, left, right):\n        self.operator = operator\n        self.left = left\n        self.right = right\n\n    def operate(self):\n        if self.operator == \"+\":\n            return self.left + self.right\n        elif self.operator == \"-\":\n            return self.left - self.right\n        elif self.operator == \"*\":\n            return self.left * self.right\n        elif self.operator == \"/\":\n            return self.left / self.right\n        else:\n            raise ValueError('Not a valid operator')", "label": 1}
{"text": "def print_fibonacci_series(n):\n    a = 0\n    b = 1\n    print(a, end = \" \")\n    print(b, end = \" \")\n    for _ in range(2, n):\n        c = a + b\n        a = b\n        b = c\n        print(c, end = \" \")\n    print()\n\nprint_fibonacci_series(5)", "label": 1}
{"text": "function isUnique(str) {\n    for(let i = 0; i<str.length; i++){\n        for(let j = i+1; j<str.length; j++){\n            if(str.charAt(i) === str.charAt(j)){\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nlet str = 'Hello';\nlet result = isUnique(str);\nconsole.log(result);", "label": 1}
{"text": "function getValue(data, key) {\n    return data[key];\n}", "label": 1}
{"text": "<div><p>Hello World!</p></div>", "label": 1}
{"text": "SELECT * FROM table1 LIMIT 10;", "label": 1}
{"text": "a = 8\nb = a + 2\nc = a * b\nprint(c)", "label": 1}
{"text": "class adder \n{ \n    int a, b;\n \npublic: \n    adder (int a, int b) \n    { \n        this->a = a; \n        this->b = b; \n    }\n \n    int add() \n    { \n        int sum = a + b; \n        return sum; \n    }\n};", "label": 1}
{"text": "<html>\n<head>\n<title>My Website</title>\n</head>\n<body>\n<h1 align=\"center\">My Website</h1>\n<img src=\"<link to logo file>\" align=\"center\">\n<style>\n  body {\n  background-color: #123456;\n  color: #234567;  \n  }\n  h1 {\n    color: #345678;\n  }\n</style>\n</body>\n</html>", "label": 1}
{"text": "A = [1, 4, 5, 12, 3, 7, 16]\neven_list = [x for x in A if x % 2 == 0 ]", "label": 1}
{"text": "#include <iostream> \nusing namespace std; \n  \nint perfectNo(int low, int high) \n{ \n    int sum = 0; \n    for (int i=low; i<high; i++) \n    { \n        int div_sum = 0; \n  \n        for (int j=1; j<i; j++) \n            if (i % j == 0) \n                div_sum += j; \n  \n        if (div_sum == i && i != 1) \n            sum += i; \n    } \n    return sum; \n} \n  \nint main() \n{ \n    int low = 1, high = 25; \n    cout << perfectNo(low, high) << endl; \n    return 0; \n}", "label": 1}
{"text": "function findPrimeFactors(num) { \n    let factors = []; \n    while (num % 2 === 0) { \n        factors.push(2); \n        num = num / 2; \n    } \n  \n    // num must be odd at this point \n    for (let i = 3; i <= Math.sqrt(num); i += 2) { \n        while (num % i === 0) { \n            factors.push(i); \n            num = num / i; \n        } \n    } \n  \n    // This condition is to handle the case \n    // when num is a prime number greater than 2 \n    if (num > 2) \n        factors.push(num); \n  \n    // Distinct prime factors\n    let uniqFactors = new Set(factors);\n    return [...uniqFactors];\n}", "label": 1}
{"text": "<?php \nfunction Fibonacci($n){ \n  \n    if ($n == 0) \n        return 0;     \n    else if ($n == 1) \n        return 1;     \n      \n    else\n        return (Fibonacci($n-1) +  \n                Fibonacci($n-2)); \n} \n  \n$n = 50; \nfor ($i = 0; $i < $n; $i++) \n    echo Fibonacci($i),' '; \n  \n?>", "label": 1}
{"text": "#include <iostream>\n#include <cmath>\n \nusing namespace std;\n \nstruct Point\n{\n    double x, y, z;\n};\n \n//Calculate distance between two points\ndouble distance(Point p1, Point p2)\n{\n    return sqrt(pow(p2.x - p1.x, 2) + pow(p2.y - p1.y, 2) + pow(p2.z - p1.z, 2)*1.0);\n}\n \nint main()\n{\n    Point p1 = {2.0, 4.0, 9.0};\n    Point p2 = {5.1, 7.5, 10.0};\n    cout << \"Distance between p1 and p2 is \" << distance(p1, p2);  \n    return 0;\n}", "label": 1}
{"text": "let result = array.filter(n => n % 2 == 0);", "label": 1}
{"text": "def sort_descending(nums):\n    for i in range(len(nums)):\n        for j in range(len(nums)):\n            if nums[i] > nums[j]:\n                nums[i],nums[j] = nums[j],nums[i]\n    return nums", "label": 1}
{"text": "for i in range(10):\n    print(i)", "label": 1}
{"text": "\"coding do can I\"", "label": 1}
{"text": "#/bin/bash\n\necho \"Enter the first number: \"\nread num1\n\necho \"Enter the second number: \"\nread num2\n\necho \"Enter the third number: \"\nread num3\n\necho \"The sum of the three numbers is: \"\necho $(($num1 + $num2 + $num3))", "label": 1}
{"text": "function printAge(obj) {\n    console.log(obj.age);\n}", "label": 1}
{"text": "db.collection.find({ \"quantity\": { $gt: 5 } })", "label": 1}
{"text": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Layout</title>\n    <style>\n        .row {\n            display: flex;\n            flex-wrap: wrap;\n        }\n\n        .column {\n            flex: 25%;\n        }\n    \n        #nav {\n            position: sticky;\n            top: 0;\n            background-color: #000;\n            padding: 10px;\n            text-align: center;\n        }    \n    </style>\n</head>\n<body>\n    <div id=\"nav\">Navigation Bar</div>\n    <div class=\"row\">\n        <div class=\"column\">Column1</div>\n        <div class=\"column\">Column2</div>\n        <div class=\"column\">Column3</div>\n    </div>\n</body>\n</html>", "label": 1}
{"text": "def print_list_tuple(t):\n    for item in t:\n        print(item)", "label": 1}
{"text": "url = \"http://www.example.com:port/path?query=blah\"", "label": 1}
{"text": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Input field and Reset button</title>\n</head>\n<body>\n    <input type=\"text\" placeholder=\"Type something\">\n    <button onclick=\"resetInput()\">Reset</button>\n\n    <script>\n        function resetInput() {\n            document.querySelector('input[type=\"text\"]').value = '';\n        }\n    </script>\n</body>\n</html>", "label": 1}
{"text": ".center {\n    margin: 0 auto;\n}", "label": 1}
{"text": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 50;\n    int y = 100;\n    \n    printf(\"x = %d and y = %d\\n\", x, y);\n    swap(&x, &y);\n    printf(\"x = %d and y = %d\\n\", x, y);\n    \n    return 0;\n}", "label": 1}
{"text": "Function 2 will be faster than Function 1 for executing a given operation. This is because Function 2 uses a while loop, which checks the condition before executing the loop body, while Function 1 uses a for loop, which executes the loop body before checking the condition.", "label": 1}
{"text": "def removeDupChars(input_string): \n    string_set = set(input_string) \n    new_string = \"\". join(string_set)\n    return new_string", "label": 1}
{"text": "public class Natural { \n    public static void main(String[] args) \n    { \n        int n = 1; \n        while (n <= 50) { \n            System.out.println(n); \n            n = n + 1; \n        } \n    } \n}", "label": 1}
{"text": "h1{ \n    border: 1px solid red;\n}", "label": 1}
{"text": "The Big O complexity of this code snippet is O(n), since it takes linear time to loop through the array and check if the element has appeared before.", "label": 1}
{"text": "The input to this JavaScript code should be a string. The code capitalizes the first letter of the string, and then concatenates the rest of the string after the first letter.\nFor example, if the input is \"hello\", the output will be \"Hello\".", "label": 1}
{"text": "\"\"\"\nPrint out the Fibonacci sequence up to the nth number\n\"\"\"\ndef printFibSequence(n): \n    \n    # Initialize first two terms \n    a = 0\n    b = 1\n\t\n    # Add the first two terms \n    print(a, end=\" \") \n    print(b, end=\" \") \n\t\n    # Loop up to the n-2th number\n    for i in range(2, n): \n        c = a + b \n        print(c, end=\" \") \n        a = b \n        b = c \n\n# Main program\nif __name__ == '__main__':\n    n = 10 \n    printFibSequence(n)", "label": 1}
{"text": "let person = {\n    \"firstName\": \"Ahsan\",\n    \"lastName\": \"\"\n}", "label": 1}
{"text": ".highlight {\n  \n}", "label": 1}
{"text": "let randomString = \"\";\nlet characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n \nfor (let i = 0; i < 10; i++) {\n  randomString += characters.charAt(Math.floor(Math.random() * characters.length));\n}\n\nconsole.log(randomString);", "label": 1}
{"text": "A convenient way to extract the last element from a given list in Python is to use negative indexing. This allows you to access the last element of a list by using the index -1. For example, the following code will return the last element of the list \"my_list\": \n\nmy_last_element = my_list[-1]", "label": 1}
{"text": "<html>\n<body>\n   <script>\n\t  function onPageLoad() {\n\t\t  var name = prompt('Please enter your name: ');\n\t\t  alert('Welcome ' + name + '!');\n\t  }\n\t  onPageLoad();\n   </script>\n</body>\n</html>", "label": 1}
{"text": "from sklearn import svm \n\n# define model \nmodel = svm.SVC(kernel='linear', C=1.0) \n\n# define inputs \nX = [[3.0, -4.0, 2.0, 0.8]] \ny = ['Positive'] \n\n# fit model \nmodel.fit(X, y)", "label": 1}
{"text": "import pandas as pd\n\ndf = pd.DataFrame({'Name': ['Alice', 'Bob', 'Carol'],\n                   'Age': [26, 32, 12]})\n\ndf", "label": 1}
{"text": "\"\"\"\nCreate an algorithm to find the optimal sum from a set of given numbers such that the sum is equal to a given target.\n\"\"\"\ndef optimal_sum(target, numbers): \n    if (target == 0): \n        return True\n    n = len(numbers) \n    subset = [True] + [False]*target \n      \n    for i in range(n): \n        for j in range(target,numbers[i]-1,-1): \n            subset[j] = subset[j] or subset[j-numbers[i]] \n  \n    return subset[target] \n\nif __name__ == '__main__': \n    target = 10\n    numbers = [1,4,5,3,6]\n    print(optimal_sum(target, numbers))", "label": 1}
{"text": "def two_sum(nums, target):\n    for i in range(len(nums) - 1):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return (i, j)\n    return -1", "label": 1}
{"text": "DELETE FROM table_name WHERE id = <value>;", "label": 1}
{"text": "K Nearest Neighbors (KNN) classification is a supervised machine learning algorithm used for solving classification problems. The main feature of the KNN algorithm is that it defines the class of a data sample based on the classes of its closest K neighbors, determined using a distance measure. It is a non-parametric and lazy learner algorithm, meaning it does not make any assumptions about the data distribution and is not prone to overfitting. It is also easy to implement and not computationally expensive.", "label": 1}
{"text": "One way to use Machine learning to classify the sentiment of a given text is to use a supervised Machine learning algorithm such as Support Vector Machines to build a classifier. The classifier can be trained on a labeled dataset which contains texts with corresponding labels like 'positive' or 'negative'. The trained classifier can then be used to predict the sentiment of a new text.", "label": 1}
{"text": "SELECT *\nFROM Users\nWHERE age > 24;", "label": 1}
{"text": "let topFiveCountries = ['China', 'India', 'United States', 'Indonesia', 'Brazil'];", "label": 1}
{"text": "public class TwoDArray{\n    public static void print2DArray(int[][] arr){\n        for (int[] row : arr){\n            for (int element : row){\n                System.out.print(element+\" \");\n            }\n            System.out.println();\n        }\n    }\n    \n    public static void main(String[] args) {\n        int[][] arr = { {1,2,3}, {4,5,6}, {7,8,9} };\n        print2DArray(arr);\n    }\n}", "label": 1}
{"text": "def expand_list(strings): \n    new_list = []\n    for string in strings: \n        for character in string: \n            new_list.append(character) \n    return new_list", "label": 1}
{"text": "import itertools\n\ncombinations = [''.join(i) for i in itertools.product(chars)]\n\n# Output: [\"a\", \"b\", \"c\", \"ab\", \"ac\", \"ba\", \"bc\", \"ca\", \"cb\", \"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"]", "label": 1}
{"text": "UPDATE employee\nSET salary = 2000\nWHERE employee_id = 1", "label": 1}
{"text": "The output of the function will be 8.", "label": 1}
{"text": "SELECT name\nFROM Employees\nWHERE departmentID = 7;", "label": 1}
{"text": "def print_odd_numbers():\n    for i in range(1, 11):\n        if i % 2 != 0:\n            print(i)\n\nprint_odd_numbers()", "label": 1}
{"text": "import pandas as pd\ndata = [{\"animal\": \"cat\"}, {\"animal\": \"dog\"}, {\"animal\": \"fish\"}]\ndf = pd.DataFrame(data)\nprint(df)", "label": 1}
{"text": "function removeSpecialChars(str) {\n    return str.replace(/[^\\w\\s]/gi, '');\n}\n\nconsole.log(removeSpecialChars('$sample!%string!*'));", "label": 1}
{"text": "def swap(List): \n    temp = List[0] \n    List[0] = List[3] \n    List[3] = temp\n    return List \n  \nList = [10, 20, 30, 40]\nprint(swap(List))", "label": 1}
{"text": "A radix sort would be an appropriate sorting algorithm for an array that contains both duplicates and unique elements. Radix sorts start by sorting the array based on the least significant digit, and then sort based on the next digit, and so on.", "label": 1}
{"text": "SELECT DISTINCT * FROM students;", "label": 1}
{"text": "def longest_substring(string):\n    curr_len = 1\n    max_len = 1\n    prev_index = 0\n    n = len(string)\n    visited = [-1] * 256\n    visited[ord(string[0])] = 0\n    for i in range(1,n):\n        prev_index = visited[ord(string[i])]\n        if prev_index == -1 or (i - curr_len > prev_index):\n            curr_len+=1\n        else:\n            if curr_len > max_len:\n                max_len = curr_len\n            curr_len = i - prev_index\n        visited[ord(string[i])] = i\n    if curr_len > max_len:\n        max_len = curr_len\n    return max_len", "label": 1}
{"text": "for i in range(1, 11):\n    square = i * i\n    print(square)", "label": 1}
{"text": "SELECT product_id, SUM(quantity) AS total_sales \nFROM sales\nWHERE MONTH(order_date)='<month>'\nGROUP BY product_id;", "label": 1}
{"text": "public static boolean hasDuplicates(int[] arr) {\n    for (int i = 0; i < arr.length; i++) {\n        for (int j = i + 1; j < arr.length; j++) {\n            if (arr[i] == arr[j])\n                return true;\n        }\n    }\n    return false;\n}", "label": 1}
{"text": "<script type=\"text/javascript\">\n    $(document).ready(function(){\n        var str = \"This is a sample string.\";\n        var words = str.split(\" \");\n        var longestWord = words.sort(function (a, b) { return b.length - a.length; })[0];\n        alert(\"The longest word is: \"+longestWord);\n    });\n</script>", "label": 1}
{"text": "new_arr = list(set(arr))  # [1, 2, 3, 4]", "label": 1}
{"text": "void ReverseString(char *str)\n{ \n    int length = 0; \n    char temp; \n\n    // calculate the length of string \n    while (*str != 0) { \n        length++; \n        str++; \n    } \n  \n    // the end of string \n    str--; \n  \n    // swap first and last characters \n    for (int i = 0; i < length/2; i++) \n    { \n        temp = *str; \n        *str = *(str - length + 1); \n        *(str -length + 1) = temp; \n  \n        str--; \n    } \n}", "label": 1}
{"text": "my_list = ['a',\"a\",'b',1,1,1,'c']\nmy_dict = {}\nfor i in my_list:\n    my_dict[i] = my_dict.get(i, 0) + 1\n\nprint(my_dict) \n# Output: {'a': 2, 'b': 1, 1: 3, 'c': 1}", "label": 1}
{"text": ".button {\n  background-color: black;\n  color: white;\n  border-radius: 5px;\n  padding: 10px;\n}\n<button class=\"button\">Greet</button>", "label": 1}
{"text": "SELECT * FROM table_name ORDER BY column_name ASC", "label": 1}
{"text": "def add(a, b): \n    # Iterate till there is no carry  \n    while (b != 0): \n          \n        # Carry now contains common  \n        # set bits of x and y \n        carry = a & b \n  \n        # Sum of bits of x and y where at  \n        # least one of the bits is not set \n        a = a ^ b \n  \n        # Carry is shifted by one so that  \n        # adding it to x gives the required sum \n        b = carry << 1\n          \n    return a", "label": 1}
{"text": "def zero_sum_pair(list):\n    # loop through the list \n    for i in range(len(list)): \n        for j in range(i + 1, len(list)): \n            if list[i] + list[j] == 0: \n                return [list[i], list[j]] \n    return None", "label": 1}
{"text": "def my_function(my_list):\n    output = []\n    for i in range(0, len(my_list), 2):\n        output.append(my_list[i] * 2)\n    return output\nBy looping over the list in steps of two, the function will only have to go through half of the elements, thus optimizing the runtime.", "label": 1}
{"text": "import pandas as pd \n  \ndata = {'Name':['Tom', 'nick', 'krish', 'jack'], \n        'Age':[20, 21, 19, 18] \n       } \n\ndf = pd.DataFrame(data)  \n\ncols = ['Name', 'Age']\n\n# Creating new Dataframe  \ndf_new = df[cols] \n\nprint(df_new)", "label": 1}
{"text": "my_dict = {'first': 'one', 'second': 'two', 'third': 'three'}\n\nfor key, value in my_dict.items():\n    print(key, value)", "label": 1}
{"text": "print(\"challenge. coding a is This\")", "label": 1}
{"text": "\"\"\"\nWrite a code that prints each word in a given string on a separate line\n\"\"\"\n\ndef print_words(string):\n    words = string.split() \n    for word in words:\n        print(word)\n\nif __name__ == '__main__':\n    string = \"This is a coding challenge\"\n    print_words(string)", "label": 1}
{"text": "\"\"\"\nComplete the following code to delete the item at a given index from a list\n\"\"\"\n\nindex = 4\nlist_items = [2, 3, 4, 5, 6, 7, 8]\n\n# remove the item at index 4\ndel list_items[index]\n\n# print the list\nprint(list_items)", "label": 1}
{"text": "for i in range(5):\n    for j in range(i+1):\n        print(\"*\", end=\" \")\n    print(\"\")", "label": 1}
{"text": "SELECT * FROM employees ORDER BY age DESC;", "label": 1}
{"text": "void quickSort(int arr[], int left, int right) \n{ \n    int i = left, j = right; \n    int tmp; \n    int pivot = arr[(left + right) / 2]; \n  \n    /* partition */\n    while (i <= j) { \n        while (arr[i] < pivot) \n            i++; \n        while (arr[j] > pivot) \n            j--; \n        if (i <= j) { \n            tmp = arr[i]; \n            arr[i] = arr[j]; \n            arr[j] = tmp; \n            i++; \n            j--; \n        } \n    }; \n  \n    /* recursion */\n    if (left < j) \n        quickSort(arr, left, j); \n    if (i < right) \n        quickSort(arr, i, right); \n}", "label": 1}
{"text": "# Get all column names\nall_columns <- names(data_frame)\n\n# Create an empty vector\nuncorrelated_columns <- c()\n# Iterate each column name in the data_frame\nfor(column_name in all_columns) {\n  # Store the correlations of each column in a vector\n  correlations <- cor(data_frame[column_name], data_frame[-column_name])\n  # If the value of a correlation it is below 0.8\n  if(any(correlations < 0.8)) {\n    # Add column name to empty vector\n    uncorrelated_columns <- c(uncorrelated_columns, column_name)\n  }\n}", "label": 1}
{"text": "a {\n  text-decoration: none;\n  font-weight: bold;\n  color: #0F8CC2;\n}\n\na:visited {\n  color: #00FFDC;\n}\n\na:hover {\n  color: #FF0089;\n}\n\na:active {\n  color: #C30000;\n}", "label": 1}
{"text": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nfrom sklearn.linear_model import LinearRegression\n\n# Read the dataset\ndataset = pd.read_csv('Apple_Historical_Data.csv')\n\n# Get target and predictors\nX = dataset.iloc[:, :-1].values\ny = dataset.iloc[:, -1].values\n\n# Train the Linear Regression model\nlr_model = LinearRegression()\nlr_model.fit(X, y)\n\n# Predict stock price \nprediction = lr_model.predict(X)", "label": 1}
{"text": "public class MyClass { \n    String field1; \n    int field2; \n    \n    public MyClass(String field1, int field2) { \n        this.field1 = field1; \n        this.field2 = field2; \n    } \n    \n    public MyClass() { \n        this.field1 = \"\"; \n        this.field2 = 0; \n    } \n}", "label": 1}
{"text": "#!/bin/bash\n\n#Create array from set of numbers\narr=(5 10 15 20)\n\n#Initialize sum and count\nsum=0\ncount=0\n\n#Loop through the array and sum up the values\nfor item in ${arr[@]}; do\n    let sum=sum+$item \n    let count=count+1\ndone\n\n#Calculate mean\necho $(echo $sum/$count | bc -l)", "label": 1}
{"text": "true", "label": 1}
{"text": "SELECT * FROM Table_Name WHERE column_name IS NULL;", "label": 1}
{"text": "elephant", "label": 1}
{"text": "[1, 2, 4, 5]", "label": 1}
{"text": "y = 17", "label": 1}
{"text": "The variable str1 is not updated and remains as 'This is a string' when you add a suffix to str2. This means that the values of str1 and str2 are no longer the same.", "label": 1}
{"text": "def has_duplicates(list): \n    seen = set() \n    for item in list: \n        if item in seen: \n            return True \n        seen.add(item) \n    return False", "label": 1}
{"text": "class Cube(object):\n    \n    def __init__(self, side_length):\n        self.side_length = side_length\n    \n    \n    def calculate_volume(self):\n        return self.side_length * self.side_length * self.side_length", "label": 1}
{"text": "\u2200x(Animal(x) \u2192 Mammal(x))", "label": 1}
{"text": "<table>\n    <tr>\n        <td></td>\n        <td></td>\n        <td></td>\n    </tr>\n    <tr>\n        <td></td>\n        <td></td>\n        <td></td>\n    </tr>\n</table>", "label": 1}
{"text": "import sqlite3\n\nconn = sqlite3.connect('database.db')\nc = conn.cursor()\n\n# Create table\nc.execute('CREATE TABLE Course (course_name TEXT, course_id TEXT, course_description TEXT, course_instructor TEXT)')\n\n# Save (commit) the changes\nconn.commit()\n\n# Close the connection\nconn.close()", "label": 1}
{"text": "SELECT * FROM employees\nWHERE department = 'R&D';", "label": 1}
{"text": "const JString = JSON.stringify(JObj);\nconsole.log(JString); // { \u201cname\u201d : \u201cJohn\u201d, \u201cage\u201d : 42 }", "label": 1}
{"text": "function isPositive(num) {\n  return num > 0;\n}", "label": 1}
{"text": "import time\ndef convert_date_to_timestamp(d):\n    return time.mktime(time.strptime(d, \"%m/%d/%Y\"))", "label": 1}
{"text": "import random\ndef generate_rand_str():\n    return ''.join(random.choices(string.ascii_letters + string.digits, k=5))", "label": 1}
{"text": "class Person {\n    constructor(name, age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    outputInfo() {\n        console.log(`Name: ${this.name}, Age: ${this.age}`);\n    }\n}", "label": 1}
{"text": "def print_string_reverse(str):\n    if not str:\n        return\n    else:\n        print_string_reverse(str[1:])\n        print(str[0], end='')", "label": 1}
{"text": "<!DOCTYPE html>\n<html>\n    <head>\n        <title>Buttons</title>\n    </head>\n    <body>\n        <input type=\"button\" value=\"Button 1\" />\n        <input type=\"button\" value=\"Button 2\" />\n    </body>\n</html>", "label": 1}
{"text": "class myContextManager:\n    def __init__(self, name):\n        self.name = name\n        print(\"Context Manager initialized.\")\n        \n    def __enter__(self):\n        print(\"Entering context.\")\n        return self\n        \n    def __exit__(self, type, value, traceback):\n        print(f\"Exiting context: {self.name}\")", "label": 1}
{"text": "def nestedListSum(nested_list):\n    total = 0\n    for sub_list in nested_list:\n        total += sum(sub_list)\n    return total", "label": 1}
{"text": "const largestNumber = Math.max(...numbers);", "label": 1}
{"text": "SELECT MAX(Age) FROM Employee;", "label": 1}
{"text": "if (Object.prototype.hasOwnProperty.call(object, 'property')) { \n // property exists\n}", "label": 1}
{"text": "import React from 'react';\n\nfunction Postcard() {\n  return (\n    <div>\n      <p>Hello from Paris!</p>\n      <img src=\"eiffel-tower.jpg\" alt=\"Eiffel Tower\" />\n      <button type=\"button\">Return to Homepage</button>\n    </div>\n  )\n}\n\nexport default Postcard;", "label": 1}
{"text": "function stringLength(str){\n    return str.length;\n}", "label": 1}
{"text": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n\n    def append(self, data):\n        new_node = Node(data)\n        if not self.head:\n            self.head = new_node\n            return\n\n        current = self.head\n        while current.next:\n            current = current.next\n\n        current.next = new_node", "label": 1}
{"text": "[\"jump\", \"jumps\"]", "label": 1}
{"text": "<header>\n<div></div>\n<div></div>\n<div></div>\n<div></div>\n<div></div>\n</header>", "label": 1}
{"text": "def generate_key_value(arr):\n    key_val_pairs = {k:v for k,v in enumerate(arr)}\n    return key_val_pairs\n\nprint(generate_key_value(arr))\n\nOutput:\n{0: 1, 1: 2, 2: 3, 3: 4}", "label": 1}
{"text": "#include <stdio.h>\n#include <string.h>\n\nint main(){\n  char str1[] = \"ab\";\n  char str2[] = \"cd\";\n  int i, j;\n  for(i=0; i<strlen(str1); i++){\n    for(j=0; j<strlen(str2); j++){\n      printf(\"%c%c \", str1[i], str2[j]);\n    }\n  }\n  printf(\"\\n\");\n  return 0;\n}\n\nOutput:\nac ad bc bd", "label": 1}
{"text": "def sort_numbers_desc(arr): \n    for i in range(len(arr)): \n  \n        max_element = arr[i] \n        max_index = i \n  \n        for j in range(i+1, len(arr)): \n            if arr[j] > max_element: \n                max_element = arr[j] \n                max_index = j  \n  \n        arr[i], arr[max_index] = arr[max_index], arr[i] \n    return arr\n\nprint(sort_numbers_desc(arr))", "label": 1}
{"text": "*args and **kwargs are special syntax in Python used to pass a variable number of arguments to a function. *args denotes positional arguments, while **kwargs represents keyword arguments. The syntax allows functions to take arbitrary number of arguments and provide flexibility for functions to handle different arguments.", "label": 1}
{"text": "function isPrime(n) {\n    if (n === 2) return true;\n    if (n % 2 === 0) return false;\n    for (let i = 3; i <= Math.sqrt(n); i += 2) {\n        if (n % i === 0) return false;\n    }\n    return true;\n}\nfunction primeFilter(array) {\n    let result = [];\n    for (let i = 0; i < array.length; i++) {\n        if (isPrime(array[i])) {\n            result.push(array[i]);\n        }\n    }\n    return result;\n}", "label": 1}
{"text": "The maximum number of nodes in a height-balanced binary tree of height 4 is 15. This can be determined by using the formula 2^(h+1) - 1.", "label": 1}
{"text": "The time complexity of inserting a value into a singly linked list is O(1), as it is a constant time operation.", "label": 1}
{"text": "def reverse_and_trim(s): \n    s = s.strip() \n    s = s.replace(\" \", \"\") \n    return s[::-1]", "label": 1}
{"text": "<table>\n  <tr>\n    <th>Name</th>\n    <th>Age</th>\n  </tr>\n  <tr style=\"background-color: lightgrey;\">\n    <td>John</td>\n    <td>30</td>\n  </tr>\n  <tr>\n    <td>Anna</td>\n    <td>20</td>\n  </tr>\n  <tr style=\"background-color: lightgrey;\">\n    <td>Mark</td>\n    <td>25</td>\n  </tr>\n  <tr>\n    <td>Amy</td>\n    <td>28</td>\n  </tr>\n</table>", "label": 1}
{"text": "def insert(self,val): \n\tif not self.root: \n\t\tself.root = Node(val) \n\telse: \n\t\tcurrent = self.root\n\t\twhile True: \n\t\t\tif val < current.val: \n\t\t\t\tif current.left: \n\t\t\t\t\tcurrent = current.left \n\t\t\t\telse: \n\t\t\t\t\tcurrent.left = Node(val) \n\t\t\t\t\tbreak\n\t\t\telif val > current.val: \n\t\t\t\tif current.right: \n\t\t\t\t\tcurrent = current.right \n\t\t\t\telse: \n\t\t\t\t\tcurrent.right = Node(val) \n\t\t\t\t\tbreak\n\t\t\telse: \n\t\t\t\tbreak", "label": 1}
{"text": "public class Sum {\n \n  public static int getSum(int[] arr) {\n  \n    int sum = 0;\n    for(int i=0; i < arr.length; i++)\n        sum += arr[i];\n    return sum;\n  }\n}", "label": 1}
{"text": "import re\n\nstring1 = \"Hello World\"\nstring2 = \"Hello*World\"\n\npattern = re.compile(string2.replace('*', '.'))\nmatch = pattern.search(string1)\n\nif match:\n    print('Matched!')", "label": 1}
{"text": "<html>\n    <head>\n        <title>Registration Form</title>\n    </head>\n    <body>\n        <h1>Registration Form</h1>\n        <form action=\"register.php\" method=\"POST\">\n          <div class=\"form-row\">\n            <label>Username:</label>\n            <input type=\"text\" name=\"username\" required>\n          </div>\n          <div class=\"form-row\">\n            <label>Email:</label>\n            <input type=\"email\" name=\"email\" required>\n          </div>\n          <div class=\"form-row\">\n            <label>Password:</label>\n            <input type=\"password\" name=\"password\" required>\n          </div> \n          <div class=\"form-row\">\n            <input type=\"submit\" value=\"Register\">\n          </div>\n        </form>\n    </body>\n</html>", "label": 1}
{"text": "function getRandom() {\n    return Math.random();\n}", "label": 1}
{"text": "__m256 x_vec = _mm256_loadu_ps(x + 0);\n__m256 y_vec = _mm256_loadu_ps(y + 0);\n__m256 z_vec =_mm256_loadu_ps(z + 0);\n\nx_vec = _mm256_add_ps(y_vec, z_vec);\n\n_mm256_storeu_ps(x + 0, x_vec);", "label": 1}
{"text": "#!/bin/bash\necho \"I love programming in Bash!\"", "label": 1}
{"text": "function add(a, b) {\n return a + b;\n}", "label": 1}
{"text": "def avg(numbers):\n sum = 0\n for num in numbers:\n  sum += num\n return sum/len(numbers)\n\naverage = avg([2, 4, 8, 5])\nprint(average)", "label": 1}
{"text": "def switch_list(mylist):\n    for i in range(0, len(mylist), 2):\n        temp = mylist[i]\n        mylist[i] = mylist[i + 1]\n        mylist[i + 1] = temp\n    return mylist", "label": 1}
{"text": "def remove_all_strings(myList):\n    myList.clear()\n    return myList", "label": 1}
{"text": "for i in range(1,100):\n    if i % 7 == 0:\n        print(i, end=\" \")", "label": 1}
{"text": "A suitable machine learning algorithm for this task is a supervised learning algorithm, such as a Naive Bayes classifier.", "label": 1}
{"text": "def div(x, y):\n    if y == 0:\n        raise ValueError('Cannot divide by zero')\n    else:\n        return x // y", "label": 1}
{"text": "SELECT table_name FROM information_schema.tables\nWHERE table_schema NOT IN ('pg_catalog', 'information_schema');", "label": 1}
{"text": "SELECT email FROM users\nWHERE email LIKE 'p%';", "label": 1}
{"text": "The prerequisites for learning Python are basic knowledge of Computer Science concepts, knowledge of some programming language like C/C++, understanding of Object-Oriented Programming, and familiarity with some text editors like Notepad++, Visual Studio Code, etc.", "label": 1}
{"text": "def char_frequency(string): \n    counts = {}\n    for char in string:\n        if counts.get(char) == None: \n            counts[char] = 1\n        else: \n            counts[char] += 1\n    return counts", "label": 1}
{"text": "One way to flatten a two dimensional list is to use the itertools.chain() method. This method takes an iterable of iterables and returns a single iterable that contains all the elements of the original iterables.", "label": 1}
{"text": "To print the element at the index 5 in an array, you need to use the index accessor brackets, passing the index of the element that needs to be printed as an argument. For example, if the array is named `arr`, you can print the element at index 5 by writing `cout << arr[5]`;.", "label": 1}
{"text": "The function in Python which can be used to convert a list to a dictionary is the dict() function. This function takes in an iterable such as a list as an argument and returns a dictionary with the elements of the iterable as the keys and their index as the values.", "label": 1}
{"text": "def copy_list(lst):\n    new_lst = lst[:]\n    return new_lst\n\nmy_list = [1, 2, 3, 4]\nprint(copy_list(my_list))", "label": 1}
{"text": "class HistoryDataStruct:\n    def __init__(self, k):\n        self.history_size = k\n        self.history = [] # list of (undo command, state of only that undo command) of size k\n        self.current_state = None # Current state of the data structure\n\n    def save_states(self, state):\n        self.history.append((state, self.current_state))\n\n        if len(self.history) > self.history_size:\n            self.history.pop(0)\n\n        self.current_state = state\n\n    def undo(self):\n        command, prev_state = self.history[-1]\n        self.history.pop(-1)\n        self.current_state = prev_state\n        return command", "label": 1}
{"text": "model = lm(sales ~ ., data = Advertising)", "label": 1}
{"text": "def rightangle_triangles_pattern(n): \n    pattern = \"\" \n    \n    \n    for i in range(1,n+1): \n        for j in range(1,i+1): \n            pattern = pattern + \" * \"\n        pattern = pattern + \"\\n\"\n  \n   \n    print(pattern) \n    \n    \nrightangle_triangles_pattern(5)", "label": 1}
{"text": "switch (day) { \n    case 1: \n        console.log(\"Monday\"); \n        break; \n    case 2: \n        console.log(\"Tuesday\"); \n        break; \n    case 3:\n        console.log(\"Wednesday\"); \n        break; \n   .....  \n    case 7:\n        console.log(\"Sunday\"); \n        break; \n\n    default: \n        console.log(\"Invalid input\"); \n        break; \n}", "label": 1}
{"text": "def my_function(num):\n    res = num * 2\n    print(res)", "label": 1}
{"text": "# Function to remove all consecutive duplicates in the string\ndef remove_duplicates(string):\n    # Empty string to store the result\n    result = ''\n    \n    # Iterate over the string and keep track of the previous character seen\n    prev = ''\n    for char in string:\n        # If the current character is not the same as the previous, then add it to the result\n        if char != prev:\n            result += char\n        # Change the previous character seen to the current character\n        prev = char\n        \n    # Return the result string\n    return result\n\n# Test the function by printing the string without consecutive duplicates\nprint(remove_duplicates(string))", "label": 1}
{"text": "countries = {\n    \"United_Kingdom\": 66_000_000,\n    \"United_States\": 323_000_000\n}", "label": 1}
{"text": "import datetime\n\ndef update_web_page_time_date():\n    # Get the current time and date\n    current_time = datetime.datetime.now().strftime(\"%H:%M:%S %d-%m-%Y\")\n\n    # Update the content of the web page\n    with open(\"index.html\", \"w\") as fh:\n        fh.write(\"<p>The current time and date is: {}<p>\".format(current_time))\n\nif __name__ == '__main__':\n    update_web_page_time_date()", "label": 1}
{"text": "The first 5 numbers in the Fibonacci sequence are 0, 1, 1, 2, 3.", "label": 1}
{"text": "The columns of the table are: fruit, price, and quantity. \nThe rows of the table are: apple, banana, and mango.", "label": 1}
{"text": "The data structure that can be used to convert the given list into a dictionary is a list of tuples. The tuples will comprise of the key and the value in the dictionary, e.g. (\"apple\", \"pear\"), (100, 0.25), (False, True). This can then be converted into a dictionary by using the dict() constructor.", "label": 1}
{"text": "def longest_sum_zero(arr):\n    left = 0\n    max_len = 0\n    sum = 0\n    hash_map = dict()\n    for right in range(len(arr)):\n        sum += arr[right]\n        if sum == 0:\n            max_len = max(max_len, right - left + 1)\n        if sum in hash_map:\n            left = max(left, hash_map[sum] + 1)\n            max_len = max(max_len, right - left + 1)\n        hash_map[sum] = right\n\n    return max_len", "label": 1}
{"text": "Adverb.", "label": 1}
{"text": "def sort_dict_by_values(dict_list):\n    return sorted(dict_list, key=lambda k: k['value'])", "label": 1}
{"text": "import random\n\ndef generate_random_array():\n    array = []\n    for i in range(10):\n        array.append(random.randint(1,100))\n    return array", "label": 1}
{"text": "SELECT name, age\nFROM employees\nGROUP BY age;", "label": 1}
{"text": "Object-oriented programming (OOP) is a programming language model in which programs are organized around objects rather than actions and data rather than logic. OOP languages allows the programmer to think in terms of classes and objects which makes it easier to maintain and modify existing code. In an OOP language, objects are collections of related variables and methods, and classes are templates of objects. Classes allow objects of the same type to be created with the same properties, while still allowing flexibility as new objects can be created with different properties.", "label": 1}
{"text": "function generatePassword(){\n  var charSet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#%^&*()_+-=\";\n  var passwordLength = Math.floor(Math.random() * (10 - 8 + 1)) + 8;\n  var password = '';\n  \n  for(let i = 0; i < passwordLength; i++){\n    var randomChar = charSet[Math.floor(Math.random() * charSet.length)];\n    password += randomChar;\n  }\n  \n  return password;\n}", "label": 1}
{"text": "A string can be encoded in base64 by using the string's bytes as input to the base64 encoding algorithm. The base64 encoding algorithm works by taking 3 bytes of input data and converting them into 4 bytes of output data. Each of these 4 bytes represent 6 bits of the original string, which is represented by 4 characters in the base64 string.", "label": 1}
{"text": "def display_char(s):\n    for char in s:\n        print(char)\n\ns = \"Hello World!\"\ndisplay_char(s)", "label": 1}
{"text": "The maximum depth of a binary tree of size n is log2(n).", "label": 1}
{"text": "def generate_permutations(string):\n    if len(string) == 1:\n        return [string]\n \n    all_perms = []\n    for i, c in enumerate(string):\n        other_chars = string[:i] + string[i+1:]\n        other_perms = generate_permutations(other_chars)\n        for perm in other_perms:\n            all_perms.append(c + perm)\n    return all_perms", "label": 1}
{"text": "# Calculate the roots of the given equation\ndef quadratic_roots(a, b, c):\n   # Calculate the discriminant\n   discriminant = b**2 - 4*a*c\n \n   # Calculate root1 and root2\n   root1 = (-b + discriminant**0.5)/(2*a)\n   root2 = (-b - discriminant**0.5)/(2*a)\n   \n   return root1, root2", "label": 1}
{"text": "def fibonacci(num):\n    first = 0\n    second = 1\n    for i in range(num):\n        temp = first\n        first = second\n        second = temp + second\n    return first", "label": 1}
{"text": "def word_count(str): \n    return len(str.split(' '))", "label": 1}
{"text": "SELECT SUM(amount) FROM Purchases;", "label": 1}
{"text": "def swap(x, y): \n    temp = x \n    x = y \n    y = temp \n  \nx = 10\ny = 5\n\nswap(x, y) \n\nprint(\"x =\", x, \"y =\", y)\n\n# Output: x = 5 y = 10", "label": 1}
{"text": "key_list = list(dict.keys())\n# Output: ['Name', 'Age', 'Gender']", "label": 1}
{"text": "List1 = list(set(List1))\n# Output: List1 = [1, 2, 3, 4]", "label": 1}
{"text": "even_array = [i for i in [43, 55, 12, 23, 44] if i % 2 == 0]", "label": 1}
{"text": "function createArray(string) { \n return string.split(','); \n}", "label": 1}
{"text": "let numbers = [1, 2, 3]\n\nfunction sumArray(arr) {\n    let total = 0;\n    for(let i = 0; i < arr.length; i++) {\n        total += arr[i];\n    }\n    return total;\n} \n\nconsole.log(sumArray(numbers));", "label": 1}
{"text": "char[] array = str.toCharArray();", "label": 1}
{"text": "String s = \"Hello World!\";\nint count = 0;\n\nfor (int i=0; i < s.length(); i++) {\n    if (s.charAt(i) == 'e') {\n        count++;\n    }\n}\nSystem.out.println(\"The number of occurrences of character 'e' in the string is: \" + count);", "label": 1}
{"text": "1 1 2 3 5", "label": 1}
{"text": "string = \"12345\"\n\nnumber = int(string)\n\nprint(number)", "label": 1}
{"text": "The third element of a list can be accessed using the index value 2, as Python indexing starts from 0. For example, if x is a list containing the elements [1, 2, 3], x[2] will return the third element of the list i.e. 3.", "label": 1}
{"text": "/**\n * Develop a function in Java that takes two integers as its arguments and prints out the maximum of the two.\n */\npublic class maximum {\n  public static int maximum(int a, int b){\n      if(a > b){\n          return a;\n      } else {\n          return b;\n      }\n  }\n\n  public static void main(String[] args) {\n      int a = 25;\n      int b = 27;\n      int max = maximum(a, b);\n      System.out.println(\"Maximum of the two numbers is: \" + max);\n  }\n}", "label": 1}
{"text": "def multiply(a, b):\n    \"\"\"Returns the product of the two parameters.\"\"\"\n    return a * b", "label": 1}
{"text": "DELETE FROM Employee;", "label": 1}
{"text": "The simplest way to find the area of the largest square sub-matrix composed entirely of '1's is to use a dynamic programming approach. The algorithm works by iterating through all the elements in the matrix. At each cell, it checks if the current element is a '1' and if the other elements around it form a square sub-matrix of size at least one containing '1's, and if so it updates the answer accordingly. The code for finding the area of the largest square sub-matrix composed of only '1's may look like this:\n\n# n is the size of the matrix\ndef maximum_square_submatrix(matrix, n):\n    # answer stores the maximum size of the square\n    ans = 0\n\n    # dp array of size n+1 x n+1\n    dp = [[0 for _ in range(n+1)] for _ in range(n+1)]\n\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            # if the element is 1\n            if matrix[i-1][j-1] == 1:\n                # find the minimum of the elements on its left, top and diagonal\n                dp[i][j] = 1 + min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1])\n                # update the answer\n                ans = max(ans, dp[i][j])\n\n    # return the answer\n    return ans * ans", "label": 1}
{"text": "mydict = {x: None for x in set(lst)}\nprint(mydict)\n\n# Output:\n# {1: None, 2: None, 3: None, 4: None, 5: None, 6: None}", "label": 1}
{"text": "age = person['age']\nprint(\"The value for the element 'age' is:\", age)\n\n# Output:\nThe value for the element 'age' is: 32", "label": 1}
{"text": "str_upper = str.upper()\nprint(str_upper)\n\n# Output:\nTHIS IS AN EXAMPLE OF A STRING", "label": 1}
{"text": "def find_elements(list, number): \n    result = [] \n    for i in range(len(list)): \n        for j in range(i + 1, len(list)): \n            if list[i] + list[j] == number: \n                result.append([list[i], list[j]]) \n  \n    return result \n  \n# Driver code \nlist = [5, 7, 9, 4] \nn = 18\nprint(find_elements(list, n))", "label": 1}
{"text": "function isPrime(number) {\n\nfor (i=2; i <= Math.sqrt(number); i++) {\n    if (number % i == 0) {\n        return false;\n    }\n}\nreturn true;\n}\n\nlet number = 29\nconsole.log(isPrime(number))", "label": 1}
{"text": "DateTime now = DateTime.Now;\nConsole.WriteLine(now.ToString(\"dd-MM-yyyy\"));", "label": 1}
{"text": "The code works, however the variable `largest` is not properly initialized. Instead of setting it to 0, it should be set to the first element in the list - `number_list[0]`. This will improve the efficiency of the code, as it will not have to perform unnecessary comparisons.", "label": 1}
{"text": "class NumbersList:\n    def __init__(self, numbers_list):\n        self.numbers_list = numbers_list\n    \n    def get_list(self):\n        return self.numbers_list\n    \n    def set_list(self, numbers_list):\n        self.numbers_list = numbers_list", "label": 1}
{"text": "my_json = {\n    'name': 'John',\n    'age': 20\n}", "label": 1}
{"text": "SELECT product_name, price FROM products WHERE product_name LIKE 'A%';", "label": 1}
{"text": "alert('Thank You for Visiting');", "label": 1}
{"text": "arr = (1..10).to_a.select { |x| (x % 3).zero? }", "label": 1}
{"text": "Sum = 47", "label": 1}
{"text": "SELECT AVG(cost)\nFROM product;", "label": 1}
{"text": "function filterStrings(strings) {\n  return strings.filter(string => string.length < 7);\n}", "label": 1}
{"text": "public static int compare(String s1, String s2) {\n    return s1.compareTo(s2);\n}", "label": 1}
{"text": "<html>\n  <head>\n    <title>List of Books</title>\n  </head>\n  <body>\n    <h1>List of Books</h1>\n    <ul>\n      <li>The Alchemist</li>\n      <li>Life of Pi</li>\n      <li>The Great Gatsby</li>\n      <li>The Catcher in the Rye</li>\n      <li>Harry Potter and the Sorcerer's Stone</li>\n    </ul>\n  </body>\n</html>", "label": 1}
{"text": "std::string s = \"It's raining today\";", "label": 1}
{"text": "def concatenate_lists(list1, list2):\n    return list1 + list2", "label": 1}
{"text": "def query_mongo(collection, field_name, field_value):\n    query = {field_name: field_value}\n    documents = collection.find(query)\n    return list(documents)", "label": 1}
{"text": "<html>\n    <head>\n        <title>Query Results</title>\n    </head>\n    <body>\n        <table>\n            <thead>\n                <tr>\n                    <th>Field1</th>\n                    <th>Field2</th>\n                    <th>Field3</th>\n                </tr>\n            </thead>\n            <tbody>\n                <?php\n                    $query_result = execute_query();\n                    while($row = $query_result->fetch_assoc()){\n                        echo '<tr>\n                                <td>'.$row['field1'].'</td>\n                                <td>'.$row['field2'].'</td>\n                                <td>'.$row['field3'].'</td>\n                            </tr>';\n                    }\n                ?>\n            </tbody>\n        </table>\n    </body>\n</html>", "label": 1}
{"text": "28", "label": 1}
{"text": "[0, 1, 1, 2, 3, 5, 8, 13]", "label": 1}
{"text": "#!/bin/bash\n \ntoday=$(date +\"%A\")\n \necho \"Today is $today\"", "label": 1}
{"text": "<form action=\"\" method=\"post\">\n  <input type=\"text\" name=\"email\" placeholder=\"Enter your email address\">\n  <input type=\"submit\" value=\"Submit\">\n</form>", "label": 1}
{"text": "for i in range(101):\n    if i % 3 == 0 and i % 5 == 0:\n        print(i)", "label": 1}
{"text": "public static boolean compareStrings(String s1, String s2) {\n    return s1.equals(s2);\n}", "label": 1}
{"text": "\"\"\"\nDevise a function that converts a number represented in the binary system to a decimal number\n\"\"\"\n\ndef binary_to_decimal(number):\n    decimal = 0\n    power = 0\n    while number != 0:\n        last_digit = number % 10\n        decimal += last_digit * pow(2, power)\n        power += 1\n        number //= 10\n    return decimal", "label": 1}
{"text": "<form>\n  <label for=\"name\">Name:</label>\n  <input type=\"text\" name=\"name\" id=\"name\">\n  <input type=\"submit\" value=\"Submit\">\n</form>", "label": 1}
{"text": "<p>Welcome to our website!</p>", "label": 1}
{"text": "#!/bin/bash\n\necho $(java -version 2>&1)", "label": 1}
{"text": "df.dropna(inplace=True)", "label": 1}
{"text": "def print_reverse(str):\n    for i in range(len(str)-1, -1, -1):\n        print(str[i], end=\"\")\n    print()", "label": 1}
{"text": "public class Average { \n    public static void main(String args[]) \n    { \n        double nums[] = {8, 5, 10, 3, 9}; \n        double result = 0; \n        int i; \n  \n        for (i=0; i<5; ++i) { \n            result = result + nums[i]; \n        } \n        System.out.println(\"Average is \" + result / 5); \n    } \n}", "label": 1}
{"text": "int array[4] = {5, 3, 10, 8};\n\nfor(int i = 1; i < 4; i++)\n    array[i] = array[i+1];\n \n//Decrement the size of array  \nint n = sizeof(array)/sizeof(array[0]);\nn = n - 1;", "label": 1}
{"text": "int sum = 0; \nfor (int i=0; i<size; i++) \n    sum += arr[i];", "label": 1}
{"text": "{\n  \"studentDetails\": {\n    \"name\": \"John Doe\",\n    \"age\": 25,\n    \"address\": {\n      \"street\": \"XYZ Street\",\n      \"city\": \"New York\",\n      \"state\": \"NY\"\n    }\n  }\n}", "label": 1}
{"text": "import matplotlib.pyplot as plt\n\ndata = [3, 5, 8, 1, 9, 12]\nplt.hist(data, color='blue', ec='black')\n\nplt.title(\"Histogram\")\nplt.xlabel(\"Values\")\nplt.ylabel(\"Frequency\")\n\nplt.show()", "label": 1}
{"text": "def search_x(x, vector):\n    for i in range(len(vector)):\n        if vector[i] == x:\n            return i \n    return -1", "label": 1}
{"text": "public static String[] convertStringToArray(String data) {\n \n    String[] elements = data.split(\",\");\n \n    // Trim all the elements\n    for (int i = 0; i < elements.length; i++) {\n        elements[i] = elements[i].trim();\n    }\n \n    return elements;\n}", "label": 1}
{"text": "#include <iostream>\n#include <string>\n \nint main() {\n \n   std::string string1 = \"Hello\";\n   std::string string2 = \"World\";\n \n   std::string concatenation = string1 + \" \" + string2;\n \n   std::cout << concatenation;\n   return 0;\n}", "label": 1}
{"text": "int a = 10;\nint b = 20;\n\nint c = a + b;\nSystem.out.println(c); // Outputs 30", "label": 1}
{"text": "public class HelloWorld \n{\n    public static void main(String[] args) \n    {\n        System.out.println(\"Hello World!\");\n    }\n}", "label": 1}
{"text": "fedcba", "label": 1}
{"text": "public class Sum {\n\n    public static void main(String[] args) {\n        int num = 10;\n        int sum = 0;\n\n        for (int i = 1; i <= num; i++) {\n            sum += i;\n        }\n        System.out.println(\"Sum of natural numbers from 1 to \" + num + \" is \" + sum);\n    }\n}", "label": 1}
{"text": "SELECT * \nFROM product;", "label": 1}
{"text": "def num_common_characters(str1, str2):\n    char_count = {}\n    for c in str1:\n        if c in str2:\n            if c not in char_count:\n                char_count[c] = 1\n            else:\n                char_count[c] += 1\n    return sum(char_count.values())", "label": 1}
{"text": "const http = require('http');\n\nconst requestListener = function (req, res) {\n  res.end('Hello World!');\n};\n\nconst server = http.createServer(requestListener);\nserver.listen(3000);", "label": 1}
{"text": ".styled-link {\n  color: #00b3e6;\n  text-decoration: none;\n  font-weight: bold;\n}", "label": 1}
{"text": "{\n \"deleted\": true,\n \"name\": \"John Doe\",\n \"email\": \"john.doe@example.com\",\n \"age\": 32,\n \"gender\": \"Male\"\n}", "label": 1}
{"text": "const axios = require('axios');\n  \naxios.get('https://api.github.com/search/repositories?q=language:javascript&sort=stars&order=desc&per_page=100')\n  .then(function (response) {\n    let repos = response.data.items.filter(repo =>\n      repo.language === 'JavaScript' &&\n      new Date(repo.created_at).getTime() > Date.now() - 30*24*60*60*1000\n    );\n  \n    repos.forEach(repo => {\n      console.log(repo.name)\n    });\n  })\n  .catch(function (error) {\n    console.log(error);\n  });", "label": 1}
{"text": "import java.util.Scanner;\n\npublic class ReverseString \n{\n    public static void main(String[] args) \n    {\n        Scanner in = new Scanner(System.in);\n        System.out.print(\"Enter a string: \");\n        String str = in.nextLine();\n        in.close();\n\n        char[] arr = str.toCharArray();\n\n        for (int i = arr.length - 1; i >= 0; i--) \n        {\n            System.out.print(arr[i]);\n        }\n    }\n}", "label": 1}
{"text": "The forEach() method in Javascript is used to iterate over each element in an array. It takes a callback function as an argument which is executed for each element of the array. The syntax of the forEach() method is as follows:\narray.forEach(function(element, index, array) {\n  // code to be executed;\n});", "label": 1}
{"text": "a {\n  font-size: 16px;\n  color: green;\n}", "label": 1}
{"text": "Garbage collection in Java works by periodically running a garbage collector to identify and reclaim memory occupied by objects that are no longer referenced. This process is done in order to free the memory for use by other objects and to prevent memory leaks. The Java Virtual Machine implements the garbage collection process by running a special type of thread, called the garbage collector, which scans for objects that are no longer referenced. When an object is no longer referenced, the garbage collector then reclaims the memory occupied by that object and makes it available for use elsewhere.", "label": 1}
{"text": "public static String convertTimeStampToDateTime(long timestamp) {\n    Date date = new Date(timestamp * 1000L);\n    SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss z\");\n    return sdf.format(date);\n}", "label": 1}
{"text": "def print_even_odd(number):\n if number % 2 == 0:\n print(\"even\")\n else:\n print(\"odd\")", "label": 1}
{"text": "def calculate_area(length, width, height):\n return 0.5 * (length * width + length * height + width * height)", "label": 1}
{"text": "\"\"\"\nCompute a factorial of a given integer\n\"\"\"\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nif __name__ == '__main__':\n    n = int(input())\n    print(factorial(n))", "label": 1}
{"text": "\"\"\"\nImplement a Wiki page title search using Python\n\"\"\"\n\nimport wikipedia\n\ndef search_wiki_title(search_string):\n    try:\n        wikipedia.set_lang(\"en\")\n        result = wikipedia.search(search_string)[0]\n    except (wikipedia.exceptions.PageError, wikipedia.exceptions.DisambiguationError):\n        result = None\n    return result\n\nif __name__ == '__main__':\n    search_string = input('Search string: ')\n    result = search_wiki_title(search_string)\n    print(result)", "label": 1}
{"text": "\"\"\"\nWrite a function to find the average of given numbers using a list\n\"\"\"\n\ndef find_average(nums):\n    return sum(nums) / len(nums)\n    \nif __name__ == '__main__':\n    nums = [2, 4, 6, 8]\n    print(find_average(nums))", "label": 1}
{"text": "A try-except block in Python allows a code block to be tested for errors. The code that could potentially cause an exception is placed in the try clause and the code that handles the exception is put in the except clause. If an error is encountered in the try clause, the program execution is transferred to the except clause for further handling. The except clause can also be used to handle multiple exceptions in the same block of code.", "label": 1}
{"text": "int result = 5 + (10 * 3); \nSystem.out.println(result); \n// Output: 35", "label": 1}
{"text": "text = \"The food I ate yesterday was really amazing. I loved the entire experience.\"\n \n# lowercase \ntext = text.lower() \n\n# remove punctuation \ntext = re.sub(r'[^\\w\\s]','',text) \n\n# remove digits \ntext = re.sub(r'\\d+','',text) \n\n# Tokenization \ntokens = word_tokenize(text) \n\n# Stopword removal \nfiltered_words = [word for word in tokens if word not in stopwords.words('english')] \n\n# Lemmatization\nlemmatizer = WordNetLemmatizer() \nlemmatized_word = [lemmatizer.lemmatize(word) for word in filtered_words] \n\nprint(lemmatized_word)", "label": 1}
{"text": "def isEven(n): \n    if (n % 2 == 0): \n        return True\n    else: \n        return False", "label": 1}
{"text": "CREATE TABLE table_name (\n    column1 datatype,\n    column2 datatype,\n    column3 datatype\n);", "label": 1}
{"text": "string_from_tuple = \" \".join(tuple_to_string)", "label": 1}
{"text": "Recursion is a process in which a function calls itself, either directly or indirectly. The execution of such a function consists of recurring steps each of which is called a recurrence step. The number of recurrence steps decreases with each step and the function terminates and returns a result when the number of steps reaches zero. Recursion is used to solve problems that can be broken down into smaller problems of the same type and can be used to simplify the coding process.", "label": 1}
{"text": "<div class=\"container\"></div>", "label": 1}
{"text": "def generate_fibonacci_sequence(length):\n sequence = []\n current_val, next_val = 0,1\n for i in range(length):\n   sequence.append(current_val)\n   current_val, next_val = next_val, current_val + next_val\n return sequence\n\nprint(generate_fibonacci_sequence(length))\n#Output: [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]", "label": 1}
{"text": "<p> </p>", "label": 1}
{"text": "class Dictionary:\n def __init__(self):\n     self.data = {}\n\ndef add(self, key, value):\n self.data[key] = value\n\ndef find(self, key):\n if key in self.data:\n return self.data[key]\n return None", "label": 1}
{"text": "def sort_by_age(employees):\n sorted_records = []\n while employees:\n record = employees.pop(0)\n inserted = False\n for i in range(len(sorted_records)):\n if record['age'] < sorted_records[i]['age']:\n sorted_records.insert(i, record)\n inserted = True\n break\n if not inserted:\n sorted_records.append(record)\n return sorted_records", "label": 1}
{"text": "2", "label": 1}
{"text": "def calculateTotalEarnings(arr): \n\ttotalEarnings = 0 \n\t\n\tfor i in range(1, len(arr)): \n\t\ttotalEarnings += max(arr[i] - arr[i - 1], 0) \n\t\t\n\treturn totalEarnings \n\narr = [5, 7, 15.5, 6, 10, 11] \n\ntotalEarnings = calculateTotalEarnings(arr) \n\nprint(\"Total earnings: \", totalEarnings) \n\n# Output\n# Total earnings:  9.5", "label": 1}
{"text": "def random_num(lower_bound, upper_bound):\n\timport random\n\treturn random.randint(lower_bound, upper_bound)\n\nlower_bound = 10\nupper_bound = 20\n\nprint(random_num(lower_bound, upper_bound))\n\n# Output\n# [random number between 10 and 20]", "label": 1}
{"text": "def reverseString(s): \n\trev = s[::-1] \n\treturn rev \n\ns = \"Hello World\"\n\nprint(reverseString(s))\n\n# Output\n# dlroW olleH", "label": 1}
{"text": "def findPrimeNumbers(arr): \n\tprime_list = []\n\tfor number in arr: \n\t\tisPrime = True\n\t\tfor i in range(2, number): \n\t\t\tif number % i == 0: \n\t\t\t\tisPrime = False\n\t\tif isPrime: \n\t\t\tprime_list.append(number)\n\n\treturn prime_list \n\narr = [2, 11, 9, 5, 4, 7]\n\nprint(findPrimeNumbers(arr))\n\n# Output\n# [2, 11, 5, 7]", "label": 1}
{"text": "num = int(input(\"Enter a number: \"))\nprint(num * 2)", "label": 1}
{"text": "SELECT CURRENT_DATE;", "label": 1}
{"text": "str1 = str(54)\nstr2 = str(32)", "label": 1}
{"text": "import datetime\n\ndate_time = datetime.datetime.now()\nprint(date_time.strftime(\"%A %d %B, %Y, %I:%M %p\"))\n\n# Output: Tuesday 12 November, 2019, 11:17 PM", "label": 1}
{"text": "class TwoInputsComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value1: '',\n      value2: ''\n    };\n    this.handleChange1 = this.handleChange1.bind(this);\n    this.handleChange2 = this.handleChange2.bind(this);\n  }\n\n  handleChange1(e) {\n    this.setState({\n      value1: e.target.value,\n      value2: e.target.value\n    });\n  }\n\n  handleChange2(e) {\n    this.setState({\n      value1: e.target.value,\n      value2: e.target.value\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <input type=\"text\" value={this.state.value1} onChange={this.handleChange1} />\n        <input type=\"text\" value={this.state.value2} onChange={this.handleChange2} />\n      </div>\n    );\n  }\n}", "label": 1}
{"text": "let sum = 0;\n\nfor (let i = 2; i <= 6; i++) {\n  sum += i * i;\n}\n\nconsole.log(sum);", "label": 1}
{"text": "<ul>\n  <li>Item 1</li>\n  <li>Item 2</li>\n  <li>Item 3</li>\n  <li>Item 4</li>\n</ul>", "label": 1}
{"text": "import json\n\ndata = [1,2,3]\n\nwith open('my-json-file.json', 'w') as outfile:\n  json.dump(data, outfile)", "label": 1}
{"text": "Classes are typically used to represent a database table in an object-oriented programming language. Each of the database table's columns can be represented as fields in the class. The values for those fields can then be accessed though the class' accessor methods.", "label": 1}
{"text": "<?php\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n    $name = $_POST['name'];\n    $age = $_POST['age'];\n\n    // Store data in database\n    $servername = \"localhost\";\n    $username = \"root\";\n    $password = \"\";\n    $dbname = \"myDB\";\n\n    // Connect to database\n    $conn = new mysqli($servername, $username, $password, $dbname);\n    if (!$conn) {\n        die(\"Connection failed: \" . mysqli_connect_error());\n    }\n    // Insert data\n    $sql = \"INSERT INTO users (name, age)\n    VALUES ('$name', '$age')\";\n\n    if (mysqli_query($conn, $sql)) {\n        echo \"Data stored successfully\";\n    } else {\n        echo \"Error: \" . $sql . \"<br>\" . mysqli_error($conn);\n    }\n\n    mysqli_close($conn);\n}\n?>", "label": 1}
{"text": "function truncateString(str, num) {\n  if (str.length <= num) {\n    return str;\n  }\n  return str.slice(0, num) + \"...\";\n}", "label": 1}
{"text": "SELECT * FROM mytable WHERE mycolumn > 5;", "label": 1}
{"text": "<button style=\"font-size: 20px; color: rgb(255, 0, 128); background-color: #6790FF;\">Click Here</button>", "label": 1}
{"text": "second_dict = data.get('second')\nfor key, value in second_dict.items():\n    print(key, value)", "label": 1}
{"text": "for (int i = 0; i < my_list.length; i++) { \n        for (int j = i + 1; j < my_list.length; j++) { \n            if (my_list[i] > my_list[j]) { \n                int temp = my_list[i]; \n                my_list[i] = my_list[j]; \n                my_list[j] = temp; \n            } \n        } \n    }", "label": 1}
{"text": "model = tf.keras.Sequential() \nmodel.add(tf.keras.layers.Input(shape=(1000,))) \nmodel.add(tf.keras.layers.Dense(units=128, activation='relu')) \nmodel.add(tf.keras.layers.Dense(units=2, activation='softmax')) \nmodel.compile(optimizer='Adam', loss = 'categorical_crossentropy',metrics=['accuracy']) \nmodel.fit(X,y, epochs=10)", "label": 1}
{"text": "const dateOne = new Date(\"2021/07/26\");\nconst dateTwo = new Date(\"2022/06/01\");\nconst timeDifference = dateTwo.getTime() - dateOne.getTime();\nconst daysDifference = timeDifference / (1000 * 3600 * 24);\nconsole.log(daysDifference);", "label": 1}
{"text": "public class Point {\n  double x,y;\n  \n  public Point(double x, double y) {\n    this.x = x; \n    this.y = y; \n  }\n  \n  public double getX() { return x; }\n  public double getY() { return y; }\n  public void setX(double x) { this.x = x; }\n  public void setY(double y) { this.y = y; }\n  \n  public double distance(Point other) {\n    return Math.sqrt(Math.pow(x - other.getX(), 2) + \n                     Math.pow(y - other.getY(), 2)); \n  }\n}", "label": 1}
{"text": "model = AIplatform.SentimentAnalysis() \nmodel.fit(X, y) \nprediction = model.predict(sentence)", "label": 1}
{"text": "# Imports \nimport requests\nfrom bs4 import BeautifulSoup\n\n# Define the URL\nurl = \"https://www.example.com/\"\n\n# Get the HTML\nresponse = requests.get(url)\nhtml = response.content\n\n# Parse the HTML\nsoup = BeautifulSoup(html,\"html.parser\")\n\n# Extract the title and description \ntitle = soup.find(\"title\").text\ndescription = soup.find(\"meta\",  property=\"og:description\")['content']\n\n# Print the title and description\nprint(\"Title:\", title) \nprint(\"Description:\", description)", "label": 1}
{"text": "# Define the population size\nPOPULATION_SIZE = 100\n\n# Define the parameters for the genetic algorithm \nMUTATION_RATE = 0.2 \nCROSSOVER_RATE = 0.7 \nMAX_ITERATIONS = 10 \n\n# Create the initial population\npopulation = create_population(POPULATION_SIZE) \n\n# Run the genetic algorithm\nfor iteration in range(MAX_ITERATIONS):\n  # Select the fittest individuals to reproduce\n  selected_pop = select_fittest(population)\n  \n  # Crossover two individuals to form a new population\n  children_pop = crossover(selected_pop, CROSSOVER_RATE)\n  \n  # Mutate the new population \n  mutate_pop = mutate(children_pop, MUTATION_RATE)\n  \n  # Replace the population with the mutated population \n  population = mutate_pop \n\n# Return the optimal solution\nreturn best_solution(population)", "label": 1}
{"text": "a = 10\nb = 25\n\nif a < b:\n\tprint(\"b is greater than a\")\nelse:\n\tprint(\"a is greater than b\")", "label": 1}
{"text": "#!/bin/bash \n \nIP_ADDRESS=\"$1\"\n \nif [[ $IP_ADDRESS =~ ^[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}$ ]]; then\n  echo \"Valid IP Address\"\nelse\n  echo \"Invalid IP Address\"\nfi", "label": 1}
{"text": "The given function takes a string as an argument, creates an empty string to store unique characters from the given string. It then iterates through the given string and checks if the character is already present in the new string. If the character is not present, it adds the character to the new string. After iterating through the entire string, the modified string which doesn\u2019t contain any duplicate characters is returned.", "label": 1}
{"text": "def remove_duplicates(arr): \n    unique_arr = []\n    for item in arr:\n        if item not in unique_arr:\n            unique_arr.append(item)\n    return unique_arr\n\n# Driver code \narr = ['apple', 'apple', 'orange', 'kiwi', 'apple', 'banana', 'banana'] \nprint (remove_duplicates(arr))", "label": 1}
{"text": "def split(string, delimiter): \n    return string.split(delimiter) \n  \n# Driver code \nstring = \"This-is-a-test\"\ndelimiter = \"-\"\nprint (split(string, delimiter))", "label": 1}
{"text": "for i in range(11):\n    print(i)", "label": 1}
{"text": "import random\n\ndef game():\n    options = ['rock', 'paper', 'scissors']\n\n    player1 = random.choice(options)\n    player2 = random.choice(options)\n\n    if player1 == 'rock' and player2 == 'scissors':\n        print(\"Player 1 Wins!\")\n    elif player1 == 'paper' and player2 == 'rock':\n        print(\"Player 1 Wins!\")\n    elif player1 == 'scissors' and player2 == 'paper':\n        print(\"Player 1 Wins!\")\n    elif player1 == 'scissors' and player2 == 'rock':\n        print(\"Player 2 Wins!\")\n    elif player1 == 'rock' and player2 == 'paper':\n        print(\"Player 2 Wins!\")\n    elif player1 == 'paper' and player2 == 'scissors':\n        print(\"Player 2 Wins!\")\n    else:\n        print(\"It's a draw!\")", "label": 1}
{"text": "# Pattern 1\nfor i in range(1, 10):\n    for j in range(1, i + 1):\n        print(\"*\", end=\" \")\n    print(\" \")\n\n# Pattern 2\nfor i in range(10, 0, -1):\n    for j in range(i, 0, -1):\n        print(\"*\", end=\" \")\n    print(\" \")", "label": 1}
{"text": "#!/bin/bash\n\narray=(\"Hello\" \"World\" \"Natasha\")\narray_elements=${#array[@]}\nmax_length=0 \n\nfor i in `seq 0 $(($array_elements-1))`; do\nlength=${#array[$i]}\n\nif [ \"$length\" -gt \"$max_length\" ]; then\n max_length=$length\n fi\ndone\n\necho \"The length of the longest string is $max_length\"", "label": 1}
{"text": "model = LogisticRegression()\nmodel.fit(X, y)", "label": 1}
{"text": "class StringPrinter extends React.Component{\n  render(){\n    console.log(this.props.string);\n    return null;\n  }\n}", "label": 1}
{"text": "def decimal_to_binary(num):\n\nresult = \"\"\n\nwhile num > 0:\n remainder = num % 2 \n result = str(remainder) + result\n num = num // 2\n\nreturn result", "label": 1}
{"text": "function hasKey(obj, key) {\n    if(obj.hasOwnProperty(key)) {\n        return true;\n    }\n    return false;\n}", "label": 1}
{"text": "def combine_lists(list1,list2):\n  result = []\n  for i in list1:\n    for j in list2:\n      result.append([i,j])\n  return result", "label": 1}
{"text": "<?php\nforeach($myArray as $item) {\n    echo \"I like \" . $item . \"<br>\";\n}\n?>", "label": 1}
{"text": "^g\\w+", "label": 1}
{"text": "<html>\n    <head>\n        <title>Example</title>\n    </head>\n    <body>\n        <div>\n            <input type=\"text\" id=\"input\">\n            <button type=\"submit\" onclick=\"output()\">Submit</button>\n        </div>\n        <div id=\"output\"></div>\n        <script>\n            function output() {\n               output.innerHTML = inp.value;\n            }\n        </script>\n    </body>\n</html>", "label": 1}
{"text": "SELECT * FROM employees WHERE name = '<employee_name>';", "label": 1}
{"text": "$substr = substr $string, 0, 2;", "label": 1}
{"text": "def subtract(num1, num2):\n    return num1 - num2\n\nresult = subtract(3, 2)\nprint(result)  # Output: 1", "label": 1}
{"text": "def sum_of_two_numbers(x, y):\n    if type(x) is not int or type(y) is not int:\n        return None\n    return x + y", "label": 1}
{"text": "for i in range(len(arr)):\n    print(\"Index: \" + str(i) + \", Value: \" + str(arr[i]))", "label": 1}
{"text": "import unittest\n\nclass TestArithmeticFunction(unittest.TestCase):\n    def test_sum(self):\n        self.assertEqual(arithmetic_function(2, 5), 7)\n        self.assertEqual(arithmetic_function(-4, 9), 5)\n        self.assertEqual(arithmetic_function(-2, 0), -2)\n\nif __name__ == '__main__':\n    unittest.main()", "label": 1}
{"text": "def sort_by_length(arr):\n    arr.sort(key=len)\n    return arr", "label": 1}
{"text": "message = \"Hello World!\"\nvalue = 1", "label": 1}
{"text": "<div>\n  <span class=\"tag\" style=\"font-size: 300%;\">The</span>\n  <span class=\"tag\" style=\"font-size: 200%;\">quick</span>\n  <span class=\"tag\" style=\"font-size: 250%;\">brown</span>\n  <span class=\"tag\" style=\"font-size: 150%;\">fox</span>\n  <span class=\"tag\" style=\"font-size: 200%;\">jumps</span>\n  <span class=\"tag\" style=\"font-size: 250%;\">over</span>\n  <span class=\"tag\" style=\"font-size: 100%;\">the</span>\n  <span class=\"tag\" style=\"font-size: 150%;\">lazy</span>\n  <span class=\"tag\" style=\"font-size: 200%;\">dog</span>\n</div>", "label": 1}
{"text": "func factorial(_ n: UInt) -> UInt {\n    if n == 0 {\n        return 1\n    }\n    return n * factorial(n - 1)\n}\n\nprint(factorial(7))", "label": 1}
{"text": "gcc -c yourprogram.c\ngcc -o yourprogram yourprogram.o -L/path/to/shared/library -lfoo", "label": 1}
{"text": "total = 0\n\nfor i in arr:\n    total += i\n\naverage = total / len(arr)\n\nprint(average) # 5.6", "label": 1}
{"text": "function daysLeft(date){ \n  let today = new Date(); \n  let endDate = new Date(date); \n  let timeDifference = endDate - today; \n  \n  let daysLeft = Math.ceil(timeDifference / (1000 * 60 * 60 * 24));\n  \n  return daysLeft;\n }", "label": 1}
{"text": "SELECT * FROM Employees ORDER BY Salary ASC LIMIT 1", "label": 1}
{"text": "CREATE TABLE customers (\n  CustomerID int NOT NULL AUTO_INCREMENT, \n  Name varchar(255) NOT NULL, \n  Address varchar(255) NOT NULL,\n  Phone varchar(255) NOT NULL, \n  PRIMARY KEY (CustomerID)\n);", "label": 1}
{"text": "dictionary['profession'] = 'journalist' # add new key and value to dictionary{'name': 'John', 'age': 18, 'city': 'New York', 'profession': 'journalist' }", "label": 1}
{"text": "$('#btn').click(function(){\n  alert('Button clicked!');\n});", "label": 1}
{"text": "<!DOCTYPE html>\n<html>\n<head>\n  <title>Hello World</title>\n  <style>\n  \tbody {\n  \t\tbackground-color: #eee;\n  \t\ttext-align: center;\n  \t\tpadding: 20px;\n  \t}\n  \th1 {\n  \t\tfont-family: sans-serif;\n  \t\tfont-size: 2em;\n  \t\tletter-spacing: 2px;\n  \t\tcolor: #444;\n  \t\tmargin-bottom: 20px;\n  \t}\n  </style>\n</head>\n<body>\n\t<h1>Hello, World!</h1>\n</body>\n</html>", "label": 1}
{"text": "SELECT column1, column2\nFROM table_name\nWHERE condition\n\nThis statement will return the values of column1 and column2 from the table_name table where the condition is fulfilled.", "label": 1}
{"text": "def fibonacci\n  x = 1\n  y = 1\n  for i in 1..5\n    output = x\n    sum = x + y\n    x = y\n    y = sum\n    puts output\n  end\nend\n\nfibonacci()", "label": 1}
{"text": "UPDATE users SET age = age + 1 WHERE id = <specified_id>;", "label": 1}
{"text": "#include<iostream>\nusing namespace std;\n\nstruct Node\n{\n    int data;\n    Node *next;\n};\n \n// Function to search a given element x in the list\nbool search(Node* head, int x)\n{\n    Node* current = head;\n    while (current != NULL)\n    {\n        if (current->data == x)\n            return true;\n        current = current->next;\n    }\n    return false;\n}\n \n// Program to test function search()\nint main()\n{\n    Node* head = NULL;\n    Node* second = NULL;\n    Node* third = NULL;\n \n    head = new Node();  \n    second = new Node();\n    third = new Node();\n \n    head->data = 1;\n    head->next = second;\n    \n    second->data = 2;\n    second->next = third;\n \n    third->data = 5;\n    third->next = NULL;\n \n    int elementToSearch = 5;\n    if(search(head, elementToSearch)) \n        cout<<\"Yes, Element Found\";\n    else\n        cout<<\"No, Element Not Found\";\n}", "label": 1}
{"text": "<html> \n <head> \n  <style> \n   .background { \n    background-color: #000; \n   } \n  </style> \n </head> \n <body> \n  <div class=\"background\" style=\"background-color: #FFFF00;\"></div> \n </body> \n</html>", "label": 1}
{"text": "let studentData = {\n  \"1\": {\n    \"name\": \"John\",\n    \"age\": \"18\",\n    \"country\": \"USA\"\n  },\n  \"2\": {\n    \"name\": \"Peter\",\n    \"age\": \"20\",\n    \"country\": \"UK\"\n  },\n  \"3\": {\n    \"name\": \"Anna\",\n    \"age\": \"19\",\n    \"country\": \"USA\"\n  },\n  \"4\": {\n    \"name\": \"Steven\",\n    \"age\": \"22\",\n    \"country\": \"Canada\"\n  },\n  \"5\": {\n    \"name\": \"Alex\",\n    \"age\": \"21\",\n    \"country\": \"Australia\"\n  },\n  \"6\": {\n    \"name\": \"David\",\n    \"age\": \"25\",\n    \"country\": \"UK\"\n  },\n  \"7\": {\n    \"name\": \"Dan\",\n    \"age\": \"23\",\n    \"country\": \"USA\"\n  },\n  \"8\": {\n    \"name\": \"Julia\",\n    \"age\": \"18\",\n    \"country\": \"Germany\"\n  }\n};\n\nconsole.log(studentData);", "label": 1}
{"text": "def printPalindromicNumbers(n): \n    for num in range(1, n + 1):\n        s = str(num)\n        if(s == s[::-1]):\n            print(num, end=\" \")\n\nprintPalindromicNumbers(100)", "label": 1}
{"text": "fgets() is a JavaScript function for reading contents of a file is incorrect. The correct statement is fgets() is a PHP function for reading contents of a file.", "label": 1}
{"text": "class IntToString {\n  public static String intToString(int n) {\n    String s = String.valueOf(n); \n    return s;\n  }\n}", "label": 1}
{"text": "def are_all_characters_unique(string):\n    seen_characters = set()\n    for c in string:\n        if c in seen_characters:\n            return False\n        seen_characters.add(c)\n    return True", "label": 1}
{"text": "The declaration let myArray = [] in JavaScript is declaring a variable myArray which is an empty array.", "label": 1}
{"text": "function helloWorld() {\n\treturn \"Hello World\";\n}", "label": 1}
{"text": "let myVar = \"Hello World\";", "label": 1}
{"text": "* {\n    font-size: 14px; \n}", "label": 1}
{"text": "She_looked_up_at_the_stars_and_got_lost_in_thought_", "label": 1}
{"text": "<html>\n  <head>\n  </head>\n  <body>\n    <h1>User Details</h1>\n    <p>John \u2013 Age: 24, Profession: Developer</p>\n    <p>Mark \u2013 Age: 26, Profession: Designer</p>\n  </body>\n</html>", "label": 1}
{"text": "*_*_*\n_*_*_\n*_*_*", "label": 1}
{"text": "def frequency_of_odd_and_even(arr):\n    freq_even = 0\n    freq_odd = 0\n    for i in arr:\n        if i % 2 == 0:\n            freq_even += 1\n        else:\n            freq_odd += 1\n    print(\"Frequency of even numbers:\", freq_even)\n    print(\"Frequency of odd numbers:\", freq_odd)", "label": 1}
{"text": "class Textbox {\n    constructor(size, position, color) {\n        this.size = size;\n        this.position = position;\n        this.color = color;\n    }\n\n    showTextbox() {\n        const textbox = document.createElement(\"div\");\n        textbox.style.width = this.size + \"px\";\n        textbox.style.position = this.position;\n        textbox.style.background = this.color;\n        document.body.appendChild(textbox);\n    }\n}", "label": 1}
{"text": "SELECT SUM(price)\nFROM orders\nWHERE customer_id = 1 and\n      order_date > DATE_SUB(NOW(), INTERVAL 1 MONTH)", "label": 1}
{"text": "Function overloading refers to using the same function name for different functions, with different parameter lists. On the other hand, function overriding refers to redefining a base class function with a child class that has the same signature.  Function overriding enables the child class to have a different implementation of the same method as the parent class.  This is especially useful in polymorphism.", "label": 1}
{"text": "The code snippet does not contain any errors and will print \"Hello world!\" ten times.", "label": 1}
{"text": "The code snippet takes an input string, ``x``, and formats it by adding a prefix of \"The output is: \" to it and returns the formatted string. For example, if the input string is \"Hello\", the output string will be \"The output is: Hello\".", "label": 1}
{"text": "A better way to store a series of strings for fast lookup is to use a hash table. A hash table is a data structure that uses hashing to store data and allows for efficient lookups. To use a hash table to store the strings, we can create a mapping between each string and a unique key. For example, we can map \"apple\" to 0, \"strawberry\" to 1, and \"banana\" to 2. This allows us to quickly look up a string based on its key.", "label": 1}
{"text": "class Book:\n    def __init__(self, title, author, pages):\n        self.title = title\n        self.author = author\n        self.pages = pages", "label": 1}
{"text": "#include <bits/stdc++.h> \nusing namespace std; \n  \n// Function to find maximum and minimum of \n// given array \npair <int, int> getMinMax(int arr[], int n) \n{ \n    pair <int, int> minmax; \n    int i; \n  \n    /* If array has even number of elements then \n    initialize the first two elements as minimum  \n    and maximum */\n    if (n % 2 == 0) \n    { \n        if (arr[0] > arr[1])  \n        { \n            minmax.second = arr[0]; \n            minmax.first = arr[1]; \n        }  \n        else\n        { \n            minmax.first = arr[0]; \n            minmax.second = arr[1]; \n        } \n        i = 2;  // set the startung index for loop \n    } \n  \n    /* If array has odd number of elements then  \n    initialize the first element as minimum and  \n    maximum */\n    else\n    { \n        minmax.first = arr[0]; \n        minmax.second = arr[0]; \n        i = 1;  // set the startung index for loop \n    } \n      \n    /* In the while loop, pick elements in pair and  \n    compare the pair with max and min so far */\n    while (i < n - 1)  \n    { \n        if (arr[i] > arr[i + 1])  \n        { \n            if(arr[i] > minmax.second) \n                minmax.second = arr[i]; \n            if(arr[i + 1] < minmax.first) \n                minmax.first = arr[i + 1]; \n        }  \n        else\n        { \n            if (arr[i] < minmax.first) \n                minmax.first = arr[i]; \n            if(arr[i + 1] > minmax.second) \n                minmax.second = arr[i + 1]; \n        } \n        i += 2; // Increment the index by 2 as two elements are processed in loop \n    } \n    return minmax; \n}", "label": 1}
{"text": "ul {\n    list-style-type: none;\n    padding: 0;\n    margin: 0;\n}\n\nli {\n    display: inline-block;\n    width: 33.33%;\n}", "label": 1}
{"text": "SELECT name, id, address \nFROM customers \nWHERE address LIKE '%39911%';", "label": 1}
{"text": "curl -X GET \"testserver.com/api/user\" -H \"accept: application/json\"", "label": 1}
{"text": "// a function to sort the hashtable by its keys\nfunc sortHashTableKeys(hashTable map[int]string) map[int]string {\n    // a slice to store the keys in order\n    var keys []int\n    for key := range hashTable {\n        keys = append(keys, key)\n    }\n\n    // sort the slice \n    sort.Ints(keys)\n    \n    // create a new map with the sorted keys\n    sortedHashTable := make(map[int]string)\n    for _, key := range keys {\n        sortedHashTable[key] = hashTable[key]\n    }\n\n    return sortedHashTable\n}", "label": 1}
{"text": "<html>\n<head>\n  <title>My Webpage</title>\n</head>\n<body>\n  <nav>\n    <ul>\n      <li><a href=\"index.html\">Home</a></li>\n      <li><a href=\"about.html\">About Us</a></li>\n      <li><a href=\"contact.html\">Contact</a></li>\n    </ul>\n  </nav>\n</body>", "label": 1}
{"text": "\"\"\"\nBuild a TensorFlow model for classification of a 2-D dataset.\n\nInput:\nX = [[1, 2], [3, 4], [5, 6]]\nY = [0, 1, 1]\n\nOutput:\nimport tensorflow as tf\n\n# data\nX = tf.constant([[1, 2], [3, 4], [5, 6]], dtype=tf.float32)\nY = tf.constant([0, 1, 1], dtype=tf.float32)\n\n# model\nmodel = tf.keras.Sequential()\nmodel.add(tf.keras.layers.Dense(2, activation='relu'))\nmodel.add(tf.keras.layers.Dense(1, activation='sigmoid'))\n\nmodel.compile(optimizer='adam',\n              loss='binary_crossentropy',\n              metrics=['accuracy'])\n\nmodel.fit(X, Y, epochs=50, batch_size=3)\n\"\"\"", "label": 1}
{"text": "Numpy arrays are more efficient than lists as they are homogeneous in nature. This means that all the items in a numpy array must be of the same data type, while a list can contain items of any data type. Additionally, numpy arrays can be multi-dimensional while lists are only one-dimensional. Numpy arrays can be indexed and sliced the same way as lists. However, operations on numpy arrays are much faster than operations on lists. Lastly, numpy arrays support vectorization which allows for efficient computation.", "label": 1}
{"text": "for element in list:\n    print(element)", "label": 1}
{"text": "class TemperatureViewer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { \n      tempFahrenheit : 0, \n      tempCelsius: 0, \n      tempKelvin: 0\n    };\n    this.handleTemperatureChange = this.handleTemperatureChange.bind(this);\n  }\n  handleTemperatureChange(tempFahrenheit) {\n    this.setState({\n      tempFahrenheit : tempFahrenheit,\n      tempCelsius : (tempFahrenheit - 32) * 5/9,\n      tempKelvin : (tempFahrenheit + 459.67) / 1.8\n    });\n  }\n  render() {\n    return (\n      <div>\n        <TemperatureInput \n        scale=\"f\" \n        value={this.state.tempFahrenheit}\n        onTemperatureChange={this.handleTemperatureChange} />\n        <TemperatureDisplay\n        scale=\"c\"\n        value={this.state.tempCelsius} />\n        <TemperatureDisplay\n        scale=\"k\"\n        value={this.state.tempKelvin} />\n      </div>\n    );\n  }\n}", "label": 1}
{"text": "$result = array_filter([\"abc123\", \"123abc\", \"abc456\", \"abc\"], function($value){\n    return preg_match('/^\\d+$/', $value);\n});\nprint_r($result);\n\n# Output\nArray ( [1] => 123abc [2] => 456 )", "label": 1}
{"text": "import nltk\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\n\n# loading data\ndata = [('This is an email about about a promotion', 'spam'),\n\t('We want to transfer money to your account', 'spam'),\n\t('This email is about programming', 'not_spam'),\n\t('There is a new version of python', 'not_spam'),\n]\n\n# extracting features\nX, y = [], []\nfor feat, lab in data:\n\tX.append(feat)\n\ty.append(lab)\n\ncv = CountVectorizer()\nX_vect = cv.fit_transform(X)\n\n# training the model\nmodel = MultinomialNB()\nmodel.fit(X_vect, y)\n\n# predicting\nprediction = model.predict(cv.transform([\"This is an email about a discount sale\"]))\nprint(prediction)\n\n# Output\n['spam']", "label": 1}
{"text": "\"\"\"\nPython script to determine how many lowercase letters are in a given string \n\"\"\"\n\n# Initialize a variable to count the lowercase letters\nlowercase_letter_count = 0\n\n# Loop through each character in the string\nfor char in string:\n    # Check if the character is a lowercase letter\n    if char.islower():\n        # If yes, then increment the counter\n        lowercase_letter_count += 1\n\n# Print the total number of lowercase letters\nprint(lowercase_letter_count)", "label": 1}
{"text": "function biggestNum(){\nvar num1 = parseInt(prompt(\"Please enter the first number: \")); \nvar num2 = parseInt(prompt(\"Please enter the second number: \")); \n  \nif(num1 > num2){\n  alert(\"The largest number is: \" + num1); \n}\nelse if(num2 > num1){\n  alert(\"The largest number is: \" + num2); \n}\nelse{\n  alert(\"Both numbers are equal.\");\n}\n}\nbiggestNum();", "label": 1}
{"text": "def find_two_numbers(my_list, sum):\n    for i in range(len(my_list)):\n        for j in range(i + 1, len(my_list)):\n            if my_list[i] + my_list[j] == sum:\n                return my_list[i], my_list[j]\n\nfind_two_numbers(my_list, sum);", "label": 1}
{"text": "def factorial(num): \n    \"\"\"Function to return the factorial of a positive integer\"\"\"\n    if(num <=1): \n        return 1\n    else: \n        return(num*factorial(num-1))", "label": 1}
{"text": "def create_frequency_table(words):\n    \"\"\"\n    Function to create a frequency table for a given list of words.\n    \n    Arguments:\n        words {list}: List of words.\n    \n    Returns:\n        dictionary: Frequency table of words.\n    \"\"\"\n    frequency_table = dict()\n    for word in words:\n        if word in frequency_table:\n            frequency_table[word] += 1\n        else:\n            frequency_table[word] = 1\n    return frequency_table", "label": 1}
{"text": "import re\nemail_list = []\nfor text in text_list:\n    emails = re.findall(r'[\\w\\.-]+@[\\w\\.-]+', text)\n    email_list.extend(emails)", "label": 1}
{"text": "def find_unique_values(L):\n    \"\"\"\n    Function to find all the unique values in a list.\n    \n    Arguments:\n        L {list}: The list to search in.\n    \n    Returns:\n        set: The set of unique values.\n    \"\"\"\n    unique_values = set()\n    for item in L:\n        if item not in unique_values:\n            unique_values.add(item)\n    return unique_values", "label": 1}
{"text": "Function sumArray (arr[])\n{\n    sum = 0\n    for i = 0 to arr.length - 1\n        sum += arr[i]\n    end for\n    return sum\n}", "label": 1}
{"text": "<button type=\"button\" onclick=\"alert('Pop up window')\">Click Me!</button>", "label": 1}
{"text": "public class Multiples \n{ \n    public static void main(String[] args) \n    { \n        int number = 5; \n        for (int i = 1; i <= 10; i++)  \n        { \n            System.out.println(number*i); \n        } \n    } \n}", "label": 1}
{"text": "#include <iostream> \nusing namespace std; \n\nint main() \n{ \n    int n = 100; \n  \n    int a = 0, b = 1, c; \n  \n    cout << a << \" \" << b << \" \"; \n  \n    for (int i = 2; i < n; i++) \n    { \n        c = a + b; \n        cout << c << \" \"; \n        a = b; \n        b = c; \n    } \n    return 0; \n}", "label": 1}
{"text": "class AverageCalculator:\n    def __init__(self, numbers):\n        self.numbers = numbers\n    \n    def calculate_average(self): \n        total = 0\n        for item in self.numbers:\n            total += item\n        return total / len(self.numbers)", "label": 1}
{"text": "#!/bin/bash\nInputArray=(1 2 2 3 4 4 5)\n\necho \"Unique values in the array: \" \necho $(echo \"${InputArray[@]}\" | tr ' ' '\\n' | sort -u | tr '\\n' ' ')", "label": 1}
{"text": "def evenNumbers(m,n):\n    evenNum=[]\n    for i in range(m,n+1):\n        if i%2 == 0:\n            evenNum.append(i)\n    return evenNum", "label": 1}
{"text": "def is_prime?(num)\n  is_prime = true\n  for divisor in 2..(num-1)\n    if (num % divisor == 0) \n      is_prime = false\n      break\n    end\n  end\n  return is_prime\nend\n\ndef primes_upto(m)\n  primes = []\n  for n in 2..m\n    primes << n if is_prime?(n)\n  end\n  return primes\nend", "label": 1}
{"text": "print(\"Sorry, that's not correct. Please try again\")", "label": 1}
{"text": "111001000", "label": 1}
{"text": ".box-shadow {\n    box-shadow: 0 0 6px 0 yellow;\n}", "label": 1}
{"text": "#include <stdio.h>\n#include<string.h>\n\n// function to count the occurrence of letters\nint countOccurrences(char *str)\n{\n    int count = 0;\n    int i;\n    int j;\n    int len = strlen(str);\n\n    // Iterate through each letter in the string\n    for (i = 0; i < len; i++)\n    {\n        int numberCount = 0;\n        // Check if the current character matches with any of the other character\n        for (j = 0; j < len; j++)\n        {\n            if (str[i] == str[j])\n            {\n                numberCount++;\n            }\n        }\n\n        // If number of occurrence of current character is more than 1, then increments 'count'\n        if (numberCount > 1)\n        {\n            count++;\n        }\n    }\n\n    return count;\n}\n\nint main()\n{\n    char str[] = \"This is a sentence\";\n\n    int count = countOccurrences(str);\n    printf(\"\\nNumber of letters having more than one occurrence : %d\\n\", count);\n    return 0;\n}", "label": 1}
{"text": "def get_sum_of_evens(numbers):\n    sum_of_evens = 0\n    for num in numbers:\n        if num % 2 == 0: \n            sum_of_evens += num\n    return sum_of_evens\n\nnumbers = [2, 4, 5, 6, 7, 8]\nprint(get_sum_of_evens(numbers))", "label": 1}
{"text": "SELECT title, count(*) as cnt \nFROM movie_table \nGROUP BY title \nORDER BY cnt DESC \nLIMIT 10;", "label": 1}
{"text": "const MongoClient = require('mongodb').MongoClient;\nconst assert = require('assert');\n// Connection URL\nconst url = 'mongodb://localhost:27017';\n// Database Name\nconst dbName = 'QuotesDB';\n\n// Create a new MongoClient\nconst client = new MongoClient(url);\n\n// Use connect method to connect to the Server\nclient.connect(function(err) {\n  assert.equal(null, err);\n  console.log(\"Connected successfully to server\");\n\n  const db = client.db(dbName);\n  db.collection('quotes').insertOne({\"quote\": \"A journey of a thousand miles begins with a single step.\"}, (err, res) => {\n    if (err) {\n        console.log(\"Failed to insert quote\", err);\n    } else {\n        console.log(\"Inserted new quote\");\n    }\n    client.close();\n  });\n\n});", "label": 1}
{"text": "import xmltodict\n\ndef xmlToJsonObject(xmlStr):\n  return xmltodict.parse(xmlStr)", "label": 1}
{"text": "def subtract_numbers(num1, num2):\n  return num1 - num2", "label": 1}
{"text": "uniquelist = []\nfor string in mylist:\n    if string not in uniquelist:\n        uniquelist.append(string)\n\nprint(uniquelist)", "label": 1}
{"text": "def count_words_longer_than_number(text, number):\n  words = text.split()\n  count = 0\n  for word in words:\n    if len(word) > number:\n      count += 1\n\n  return count\n\ncount_words_longer_than_number(Sentence, Number)", "label": 1}
{"text": "even_list = []\nfor num in mylist:\n    if num % 2 == 0:\n        even_list.append(num)\n\nprint(even_list)", "label": 1}
{"text": "def reverse_string(str):\n  return str[::-1]\n\nprint(reverse_string('hello'))", "label": 1}
{"text": "The maximum possible value that can be stored in a single byte is 255.", "label": 1}
{"text": "def countK(arr, k): \n    if len(arr) == 0: \n        return 0\n    if arr[0] % k == 0: \n        return 1 + countK(arr[1:], k)\n    else: \n        return 0 + countK(arr[1:], k)", "label": 1}
{"text": "Shallow copying is the process of creating a copy of the original object which only contains references to the values contained in the original instance. This means that any shallow copy only contains references to the same objects as the original instance, while any changes made to the copy will be reflected in the original object as well. Deep copying on the other hand, is the process of creating a new instance of the original object with all of its values copied over. This means that any changes made to the copy are not reflected in the original object.", "label": 1}
{"text": "function factorial(x, y) {\n    let result = 1;\n    for (let i = x; i <= y; i++) {\n        result *= i;\n    }\n    return result;\n}", "label": 1}
{"text": "import random\n\n# Generate 25 random numbers\nrandom_list = []\nfor i in range(25):\n    random_list.append(random.randint(0, 8))\n\nprint(random_list)", "label": 1}
{"text": "words = [\"Stack\", \"Overflow\", \"Python\", \"Coding\"]\n\nwords = list(filter(lambda x : len(x)<=5, words))\nprint(words)", "label": 1}
{"text": "In JavaScript, the \"==\" operator compares two values by performing type-conversion if necessary, while the \"===\" operator does not perform type-conversion and compares the values directly. For example, the statement \"3 == '3'\" will return true for the \"==\" operator, but false for the \"===\" operator, since the two values on either side of the operator are not of the same type.", "label": 1}
{"text": "arr = [1,2,3,4,5]\n\nfor index in range(len(arr)-1, -1, -1):\n    print(arr[index])", "label": 1}
{"text": "def sum_second_elements(arr):\n    sum_num = 0\n    for i in range(1, len(arr), 2):\n        sum_num += arr[i]\n    return sum_num", "label": 1}
{"text": "def identify_odd_even(num):\n    if num % 2 == 0:\n        return \"even\"\n    else:\n        return \"odd\"", "label": 1}
{"text": "# Program to generate a random password of 10 characters\n\nimport string \nimport random \n\n# Get all the symbols to use in the password \nsymbols = string.ascii_letters + string.digits \n\n# Generate a random password \npassword = ''.join(random.choice(symbols) for _ in range(10)) \n\nprint(password)", "label": 1}
{"text": "class Circle:\n    def __init__(self, radius):\n        self.radius = radius\n\n    def area(self):\n        return 3.14 * (self.radius**2)\n\n    def circumference(self):\n        return 2 * 3.14 * self.radius", "label": 1}
{"text": "dictionary = {\n    'Apple': 'Red',\n    'Banana': 'Yellow',\n    'Strawberry': 'Red',\n    'Orange': 'Orange',\n    'Grape': 'Purple'\n}", "label": 1}
{"text": "[1, 3, 4, 5, 6, 7, 8]", "label": 1}
{"text": "[2, 3, 6, 8]", "label": 1}
{"text": "# define the Employee class\nclass Employee:\n    # construct a new Employee instance\n    def __init__(self, id, name):\n        self.id = id\n        self.name = name\n\n# create a new Employee object\nemployee1 = Employee(1, \"John Doe\")\n\n# access the employee id and name\nprint(employee1.id)\nprint(employee1.name)", "label": 1}
{"text": "# define a function to combine two lists into one\ndef combine_lists(list_1, list_2):\n    # create a new list\n    combined_list = []\n    \n    # append the elements from list 1\n    for ele in list_1:\n        combined_list.append(ele)\n\n    # append the elements from list 2    \n    for ele in list_2:\n        combined_list.append(ele)\n    \n    # return the combined list\n    return combined_list\n\n# input two lists\nlist_1 = [1, 2, 3]\nlist_2 = [4, 5, 6]\n\n# output the combined list\ncombined_list = combine_lists(list_1, list_2)\nprint(\"The combined list is \" + str(combined_list))", "label": 1}
{"text": "def solve_eq(x, y, z):\n  '''This function will solve the equation: x^2 + y^2 = z^2.'''\n\n  # Use the Pythagorean Theorem\n  if x**2 + y**2 == z**2:\n    return True\n  else:\n    return False", "label": 1}
{"text": "def array_to_floats(string_arr):\n    # Create an array to store the float values\n    float_arr = []\n    # Iterate over the given array and convert to float\n    for s in string_arr:\n        float_arr.append(float(s))\n    # Return the new array\n    return float_arr\n\nstring_arr=['1.1', '2.3', '3.4']\nresult = array_to_floats(string_arr)\nprint(\"The array as floats is:\", result)", "label": 1}
{"text": "def sort_list(n_list):\n    \"\"\"\n    Sort a given list of numbers in ascending order.\n\n    Parameters\n    ----------\n    n_list: list\n        The list of numbers to sort\n\n    Returns\n    -------\n    sorted_list : list\n        The sorted list\n    \"\"\"\n    sorted_list = sorted(n_list)\n    return sorted_list\n\nn_list = [3, 9, 1, 4, 5]\nprint(sort_list(n_list)) # Outputs [1, 3, 4, 5, 9]", "label": 1}
{"text": "def compute_combination(n, r):\n    \"\"\"\n    Compute the number of ways for a host to select 'r' items from\n    a list of 'n' options.\n\n    Parameters\n    ----------\n    n : int\n        The total number of items\n    r : int\n        The number of items to select\n\n    Returns\n    -------\n    num : int\n        The number of ways to select\n    \"\"\"\n    num = 1\n\n    # Calculate combination\n    for i in range(r):\n        num *= n - i\n    num //= math.factorial(r)\n    \n    return num\n\nn = 8\nr =  3\nprint(compute_combination(n, r)) # Outputs 336", "label": 1}
{"text": "def extract_name(string):\n    \"\"\"\n    Parse a given string and extract the name from it.\n\n    Parameters\n    ----------\n    string : str\n        The string to parse\n\n    Returns\n    -------\n    name : str\n        The extracted name\n    \"\"\"\n    # Split the string by words\n    words = string.split()\n    \n    # The last word is the name\n    name = words[-1]\n\n    return name\n\nstring = \"Hi! My name is John Smith\"\nprint(extract_name(string)) # Outputs \"John Smith\"", "label": 1}
{"text": "tasks = [\"cook breakfast\", \"run errand\", \"pick up kids\", \"feed the dog\"]", "label": 1}
{"text": "def char_count(text):\n    count = 0\n    for char in text:\n        count += 1\n    return count", "label": 1}
{"text": "def multiplyArray(arr):\n    result = 1\n    for x in arr:\n        result = result * x\n    return result", "label": 1}
{"text": "This coding question is asking you to write a Python function to check whether a given number is prime or not. The function should take an integer as an argument and return a boolean indicating if the number is prime or not.", "label": 1}
{"text": "def detect_overlapping_dates(dates_list): \n  overlaps = set()\n\n  for i in range(len(dates_list)-1):\n    for j in range(i+1, len(dates_list)):\n      date1_start_year, date1_start_month, date1_start_day, date1_end_year, date1_end_month, date1_end_day = dates_list[i]\n      date2_start_year, date2_start_month, date2_start_day, date2_end_year, date2_end_month, date2_end_day = dates_list[j]\n      # check if the two dates overlap\n      if (date1_start_year <= date2_end_year and date2_start_year <= date1_end_year) and (date1_start_month <= date2_end_month and date2_start_month <= date1_end_month) and (date1_start_day <= date2_end_day and date2_start_day <= date1_end_day):\n        # if the two dates overlap, add to the overlapping set\n        overlaps.add(dates_list[i])\n        overlaps.add(dates_list[j])\n  \n  return list(overlaps)\n \ndates_list = [\n  (2018,1,1,2018,3,1),\n  (2018,12,1,2018,9,30),\n  (2018,2,15,2018,5,10)\n]\n\nprint(detect_overlapping_dates(dates_list))", "label": 1}
{"text": "def parse_urls(url): \n    queries = url.split('?')[1]\n    queries_dict = {}\n    for query in queries.split('&'): \n        key, value = query.split('=') \n        queries_dict[key] = value \n    return queries_dict", "label": 1}
{"text": "import pandas as pd\nimport matplotlib.pyplot as plt\n \n# Read the dataset\ndf = pd.read_csv('data.csv')\n \n# Create visualization\nfig, ax = plt.subplots(figsize=(10,8))\nax.bar(df['State'], df['Cases'], color='#88e398')\nplt.xlabel('States')\nplt.ylabel('Coronavirus Cases')\nplt.title('Covid-19 Cases per US State')\nplt.xticks(rotation=45)\nplt.show()", "label": 1}
{"text": "public class Hovercar {\n \n  // Properties\n  private String color;\n  private int maxSpeed;\n  private int currentSpeed;\n \n  // Constructor\n  public Hovercar(String color, int maxSpeed) {\n    this.color = color;\n    this.maxSpeed = maxSpeed;\n    this.currentSpeed = 0;\n  }\n \n  // Getters and Setters\n  public String getColor() {\n    return color;\n  }\n \n  public void setColor(String color) {\n    this.color = color;\n  }\n \n  public int getMaxSpeed() {\n    return maxSpeed;\n  }\n \n  public void setMaxSpeed(int maxSpeed) {\n    this.maxSpeed = maxSpeed;\n  }\n \n  public int getCurrentSpeed() {\n    return currentSpeed;\n  }\n \n  public void setCurrentSpeed(int currentSpeed) {\n    if (currentSpeed > maxSpeed || currentSpeed < 0) {\n      this.currentSpeed = 0;\n    } else {\n      this.currentSpeed = currentSpeed;\n    }\n  }\n}", "label": 1}
{"text": ".hidden {\n  display: none;\n}", "label": 1}
{"text": "Objects are instantiated in Python by using the keyword \"class\". Python then creates a new instance of the class and assigns it a unique object ID. This object is then used as the basis for the object's other attributes and methods, which are defined within the class definition. Object instantiation is usually used to create objects that inherit from other classes, or that contain data that need to be initialized.", "label": 1}
{"text": "5", "label": 1}
{"text": "SELECT name, length_of_service \n FROM employees \n ORDER BY length_of_service DESC \n LIMIT 5;", "label": 1}
{"text": "^(.)(?:(.)(?<=\\2))?\\1?$", "label": 1}
{"text": "#include <iostream> \n#include <string> \n\nbool is_palindrome(std::string str) \n{ \n    int i = 0; \n    int j = str.length() - 1; \n  \n    while (i < j) \n    { \n        if (str[i] != str[j]) \n            return false; \n  \n        i++; \n        j--; \n    } \n  \n    return true; \n} \n\nint main() \n{ \n    std::string str = \"madam\"; \n    if (is_palindrome(str)) \n        std::cout << str << \" is a palindrome\"; \n    else\n        std::cout << str << \" is not a palindrome\"; \n  \n    return 0; \n}", "label": 1}
{"text": "Recursion is a programming technique that allows a function to call itself repeatedly until a certain condition is met. This allows for a clear solution to problems that involve repeated cycles of steps in their execution. Recursion also helps to solve complex problems by breaking them down into simpler sub-problems which can then be more easily solved. By effectively breaking a problem down into simpler sub-problems, the result is often a much more efficient and elegant implementation of a solution than an iterative approach. Recursion helps to reduce the complexity of code, making it easier to read, debug and maintain.", "label": 1}
{"text": "A possible API endpoint for a user profile could be `GET /users/:id` which returns the profile information associated with the given user ID.", "label": 1}
{"text": "class Rectangle:\n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\n\t\n    def get_area(self):\n        return self.width * self.height", "label": 1}
{"text": "def add_two_numbers(a, b):\n    return a + b", "label": 1}
{"text": "^www\\.somedomain\\.com\\/posts\\/\\d+$", "label": 1}
{"text": "In JavaScript, lists of elements can be defined using an array. An array is a data structure that stores a set of elements of the same type. The elements of an array can be accessed by their index.\n\nExample:\nvar myList = ['item1', 'item2', 'item3'];", "label": 1}
{"text": ".button {\n    display: inline-block;\n    padding: 0.5rem;\n    font-size: 1rem;\n    background-color: #1e85e7;\n    color: #fff;\n    border-radius: 0.25rem;\n    border: 0;\n    cursor: pointer;\n}", "label": 1}
{"text": "def remove_duplicates(arr):\n    \"\"\"Remove the duplicates from the list without using built-in methods.\"\"\"\n    # Initialize empty list\n    new_list = []\n    # Iterate through array\n    for num in arr:\n        # Check if element is not in list\n        if num not in new_list:\n            # Add element to list\n            new_list.append(num)\n    return new_list\n\nremove_duplicates([1, 2, 1, 2, 3, 2, 4, 2]) # Outputs [1, 2, 3, 4]", "label": 1}
{"text": "import datetime\n\ndef convert_to_timestamp(date_string):\n    \"\"\"Write a code to convert a given date string into a timestamp.\"\"\"\n    date_object = datetime.datetime.strptime(date_string, '%Y-%m-%d %H:%M:%S')\n    timestamp = datetime.datetime.timestamp(date_object)\n    return timestamp\n\nconvert_to_timestamp(\"2020-07-24 14:50:00\") # Outputs 1595538200.0", "label": 1}
{"text": "One way to reverse a singly linked list without using any additional data structures is to iterate through the linked list, while keeping track of the current node's predecessor and successor. At each iteration, store the predecessor and successor, remove the link from the predecessor to the current node,and link the current node to the predecessor. Once all the nodes have been iterated through, the predecessor of the head node should be connected to the tail node.", "label": 1}
{"text": "One way to find the longest word which can be constructed from a set of characters is by using a trie data structure. To do this, first create the trie from the given dictionary of words, then traverse it to look for the longest word which can be constructed from the given set of characters. At each node, check if the character at the current node is present in the given set, and if yes, traverse down. If no, then backtrack until a valid character is found.", "label": 1}
{"text": "res = list_of_words(str)\nres = ['This', 'is', 'a', 'sentence.']", "label": 1}
{"text": "for i in range(1,6):\n  print(i)", "label": 1}
{"text": "if (num % 2 == 0):\n    print(\"Number is even\")\nelse:\n    print(\"Number is odd\")", "label": 1}
{"text": "def remove_duplicates(x):\n    res = []\n    for i in x:\n        if i not in res:\n            res.append(i)\n    return res", "label": 1}
{"text": "def postfix_to_infix(expression):\n    stack = []\n    for c in expression.split():\n        if c in \"+-*/\":\n            operand1 = stack.pop()\n            operand2 = stack.pop()\n            stack.append(\"({} {} {})\".format(operand2, c, operand1))\n        else:\n            stack.append(c)\n    return stack[0]\n\nif __name__ == '__main__':\n    expression = '3 4 + 5 *'\n    print(postfix_to_infix(expression))", "label": 1}
{"text": "<form>\n <label>Name: </label><input type=\"text\" name=\"name\"><br>\n <label>Age: </label><input type=\"number\" name=\"age\"><br>\n <label>Gender: </label><input type=\"text\" name=\"gender\"><br>\n <label>Address: </label><input type=\"text\" name=\"address\"><br>\n <input type=\"submit\" value=\"Submit\">\n</form>", "label": 1}
{"text": "class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n    \n    def intro(self):\n        print(\"Hi, my name is %s and I am %d years old.\" % (self.name, self.age))", "label": 1}
{"text": "result = [x*2 for x in list]", "label": 1}
{"text": "numbers = [] \nnum = 0\nwhile len(numbers) < 10:\n    num += 1\n    if (num % 4 == 0) and (num % 7 == 0):\n        numbers.append(num) \nprint(numbers)", "label": 1}
{"text": "SELECT customer_id, SUM(cost) AS total_spending\nFROM orders\nWHERE order_date >= CURDATE() - INTERVAL 12 MONTH\nGROUP BY customer_id\nORDER BY total_spending DESC\nLIMIT 5", "label": 1}
{"text": "Hello World", "label": 1}
{"text": "public int foo(int a, int b) {\n    return a * b;\n}", "label": 1}
{"text": "The sum of all the prime numbers between 45 and 65 is 458.", "label": 1}
{"text": "[5, 10, 15, 20, 25, 30, 35]", "label": 1}
{"text": "The regular expression to search for \"carrot\" in a given string is /carrot/.", "label": 1}
{"text": "int result = (int)Math.pow(3, 4);", "label": 1}
{"text": "def solve_linear_equation(a, b):\n  return -b/a", "label": 1}
{"text": "def permutations(nums):\n    if len(nums) == 0:\n        return []\n\n    if len(nums) == 1:\n        return [[nums[0]]]\n    \n    perms = []\n\n    for i, n in enumerate(nums):\n        sub_perms = permutations(nums[:i] + nums[i+1:])\n\n        for perm in sub_perms:\n            perms.append([n] + perm)\n\n    return perms", "label": 1}
{"text": "def remove_elements_at_indices(numbers, indices):\n    for index in sorted(indices, reverse=True):\n        del numbers[index]\n    return numbers\n\nmodified_list = remove_elements_at_indices(list_of_numbers, indices)\nprint(modified_list) # prints [0, 1, 4]", "label": 1}
{"text": "list1 = [1, 2, 3, 4, 5]\n\nfor item in list1:\n    print(item) #output: \n    1\n    2\n    3\n    4\n    5", "label": 1}
{"text": "<html>\n<head>\n<title>Example</title> \n</head>", "label": 1}
{"text": "h1 {\n    font-family: Arial, Helvetica, sans-serif;\n    font-size: 28px;\n    font-style: normal;\n    font-weight: bold;\n    line-height: 32px;\n    letter-spacing: 0.5px;\n    color: #000000;\n    text-align: center;\n    padding-top: 10px;\n    padding-bottom: 10px;\n    margin-bottom: 0px;\n}", "label": 1}
{"text": "def sum_numbers():\n    number_list = []\n    input_numbers = input(\"Please enter the numbers you want to sum up (enter q to exit): \")\n    while input_numbers != \"q\":\n        number_list.append(int(input_numbers))\n        input_numbers = input(\"Please enter the numbers you want to sum up (enter q to exit): \")\n    return sum(number_list)", "label": 1}
{"text": "np.array([0, 0, 0, 1, 1, 1])", "label": 1}
{"text": "DataFrame:\ncol1    col2    col3\n1       a       3\n2       b       4", "label": 1}
{"text": "{\"red\": \"red\", \"blue\": \"blue\", \"green\": \"green\"}", "label": 1}
{"text": "total = 0\nfor num in [1, 3, 5, 7, 9]:\n  total += num\nprint(total)", "label": 1}
{"text": "my_set = {3, 6, 9}", "label": 1}
{"text": "def ascending_order(word):\n    list = []\n    for letter in word:\n        list.append(letter)\n    sorted_list = sorted(list)\n    return \"\".join(sorted_list)", "label": 1}
{"text": "// loop through all n elements in the array \nfor (int i = 0; i < n; i++) \n{\n    // code \n}", "label": 1}
{"text": "if x > 0:\n    # execute one block of code\nelse:\n    # execute another block of code", "label": 1}
{"text": "def my_func(x, y, z):\n  max_num = max(x, y, z)\n  return max_num", "label": 1}
{"text": "SELECT year, SUM(total_sales) \nFROM Sales \nGROUP BY year;", "label": 1}
{"text": "function double_up(arr) {\n    // Declare a new array\n    let result = [];\n\n    // Loop through input array\n    for (let i=0; i < arr.length; i++) {\n        result.push(arr[i] * 2);\n    }\n\n    //Return the new array \n    return result;\n}", "label": 1}
{"text": "body {\n  background-color: medium-blue;\n}", "label": 1}
{"text": "#define SET_BIT(number, n) ((number) |= (1 << (n)))\n#define CLEAR_BIT(number, n) ((number) &= ~(1 << (n))) \n#define TOGGLE_BIT(number, n) ((number) ^= (1 << (n)))", "label": 1}
{"text": "class NaiveBayesModel: \n    def __init__(self): \n        pass \n      \n    def train(self, data, labels): \n        self.prior_probability = self.calculatePriorProbabilities(labels)\n        self.likelihoods = self.calculateLikelihoods(data, labels)\n    \n    def calculatePriorProbabilities(self, labels): \n        labels_counts = {} \n        for label in labels: \n            if label not in labels_counts: \n                labels_counts[label] = 0 \n            labels_counts[label] += 1 \n              \n        return {label: count/len(labels)\n                for label, count in labels_counts.items()} \n\n    def calculateLikelihoods(self, data, labels): \n        likelihoods = {} \n        for feature, values in data.items(): \n            likelihoods[feature] = {} \n            for label in labels: \n                for value in values: \n                    pass # complete the calculation\n                    \n        return likelihoods", "label": 1}
{"text": "def hello_world_generator():\n    for _ in range(10):\n        yield \"Hello World\"", "label": 1}
{"text": "function permutate(str){\n  if (str.length <= 1) {\n    return str;\n  } \n  let permutations = []; \n  for (let i = 0; i < str.length; i++) {\n    let char = str[i];\n    // excluding the character from the string\n    let remainingString = str.slice(0, i) + str.slice(i + 1, str.length);\n    // recursively call the function\n    for (let subPermutation of permutate(remainingString)) {\n      permutations.push(char + subPermutation);\n    }\n  }\n  return permutations;\n}\n\nconst possiblePermutations = permutate(\"abc\");\n\n// Output: [\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"]", "label": 1}
{"text": "In order to access an element in an array using JavaScript, you can use the index of the element. The index is the position of the element in the array. For example, if the array is [4, 8, 15], then you can use the following code to access the element at index 1 (i.e. 8):\n\nvar array = [4, 8, 15];\nvar element = array[1];\n// The variable `element` now contains the value 8", "label": 1}
{"text": "<?php\n    $root_dir = $_SERVER['DOCUMENT_ROOT'];\n    echo $root_dir;\n?>", "label": 1}
{"text": "def remove_vowels(string):\n    vowels = 'aeiouAEIOU'\n    new_string = ''\n    for char in string:\n        if char not in vowels:\n            new_string += char\n            \n    return new_string", "label": 1}
{"text": "fun main() {\n    for(i in 1..10) {\n        println(i)\n    }\n}", "label": 1}
{"text": "The recursive approach to finding the sum of all elements in an array is to consider the array as a combination of two subarrays. We first calculate the sum of the first subarray and then for the second subarray. The total sum of elements in the array can be found by adding the sum of the two subarrays. This process is repeated until the size of the array is 0, at which point the final sum is returned. This approach is known as the divide and conquer algorithm.", "label": 1}
{"text": "SELECT *\nFROM product \nORDER BY price DESC\nLIMIT 1;", "label": 1}
{"text": "let str = \"Welcome to the World !\";\nlet upperCaseStr = str.toUpperCase();\nconsole.log(upperCaseStr);\n\n# Output: \"WELCOME TO THE WORLD !\"", "label": 1}
{"text": "def printDivisorSum(num): \n   \n    sum = 0\n    i = 1\n  \n    while i <= num / 2: \n  \n        if num % i == 0: \n            sum = sum + i \n        i = i + 1\n  \n    print(\"Sum of divisors of \" + str(num) + \" is \" + str(sum)) \n\nnum = 16\nprintDivisorSum(num)", "label": 1}
{"text": "public class HelloWorld {\n\n    public static void main(String[] args) {\n        System.out.println(\"Hello World!\");\n    }    \n}", "label": 1}
{"text": "#include <iostream>\n\nint main() {\n    int a=5, b=7;\n    double result = a*a+b*b;\n    std::cout << result << std::endl;\n    return 0;\n}", "label": 1}
{"text": "print(\"Hello, World!\")", "label": 1}
{"text": "def Fibonacci_number(n): \n    if n<0: \n        print(\"Incorrect input\") \n    # First Fibonacci number is 0 \n    elif n==1: \n        return 0\n    # Second Fibonacci number is 1 \n    elif n==2: \n        return 1\n    else: \n        return Fibonacci_number(n-1)+Fibonacci_number(n-2)", "label": 1}
{"text": "<html>\n    <head>\n        <title>Welcome</title>\n    </head>\n    <body>\n        <h1>Hello World!</h1>\n    </body>\n</html>", "label": 1}
{"text": "def minWindow(s, t): \n    # Initialize with None \n    minWindowLength = None\n    leftIndex = 0 \n          \n    # Balance will act as alphabet to store the occurrence of each character in t \n    balance = {}\n    for char in t:\n        if char not in balance:\n            balance[char] = 1\n        else:\n            balance[char] += 1\n              \n    # leftIndex and rightIndex act as two poiners to traverse the list\n    leftIndex = 0\n    rightIndex = 0\n    charactersFound = 0\n    # Start traversal from left \n    for i in range(len(s)): \n          \n        # If character present in t \n        if s[i] in balance: \n              \n            # Decrease its counter by 1 \n            balance[s[i]] -= 1  \n              \n            # if the character is found first time \n            if balance[s[i]] == 0: \n                charactersFound += 1\n                  \n        # If all characters present \n        if charactersFound == len(balance): \n            # Check the right side window \n            while(rightIndex <= i and charactersFound == len(balance)): \n                  \n                # remove the left side character \n                if s[leftIndex] in balance: \n                    if balance[s[leftIndex]] == 0: \n                        charactersFound -= 1\n  \n                    # Increase the counter of that character \n                    balance[s[leftIndex]] += 1\n                      \n                # Calculate the minimum window\n                if minWindowLength == None or (i-leftIndex+1) < minWindowLength: \n                    minWindowLength = i-leftIndex+1\n                      \n                leftIndex += 1\n                  \n    return minWindowLength", "label": 1}
{"text": "def sort(arr):\n    n = len(arr)\n    \n    # Various loops to sort the array \n    for i in range(n): \n        min_idx = i \n        for j in range(i+1, n): \n            if arr[min_idx] > arr[j]: \n                min_idx = j \n        arr[i], arr[min_idx] = arr[min_idx], arr[i] \n    return arr", "label": 1}
{"text": "SELECT Name FROM Movies WHERE Release_Year > YEAR(CURDATE()) - 10;", "label": 1}
{"text": "Assembly language is a low-level programming language that provides a symbolic representation of the machine instructions for a specific processor or family of processors. It is typically used when writing code for embedded systems, or when the target processor and/or instruction set of the program is not well-known. Assembly language is generally used when more control over the memory management and data layout of a program is desired. It also allows for generating more efficient code since the code can be tailored for the target processor and instruction set.", "label": 1}
{"text": "def sum_odd_nums(n):\n    total = 0\n    for i in range(1, n+1):\n        if i % 2 != 0:\n            total += i\n    return total", "label": 1}
{"text": "dictionary = {4:4, 8:8, 12:12, 16:16}", "label": 1}
{"text": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<data>\n    <person>\n        <name>Alice</name>\n        <age>25</age>\n    </person>\n    <person>\n        <name>Bob</name>\n        <age>30</age>\n    </person>\n</data>", "label": 1}
{"text": "public class SearchAlgorithm {\n  public int search(int[] array, int target) {\n    int left = 0;\n    int right = array.length - 1;\n    \n    while (left <= right) {\n      int mid = (left + right) / 2;\n      \n      if (target == array[mid]) {\n        return mid;\n      }\n      if (target < array[mid]) {\n        right = mid - 1;\n      } else {\n        left = mid + 1;\n      }\n    }\n    return -1;\n  }\n}", "label": 1}
{"text": "def loopRecursion(num): \n  if(num<10): \n    print(\"i:\",num) \n    loopRecursion(num+1) \n\nloopRecursion(0)", "label": 1}
{"text": "fn main() {\n    let arr = [6, 1, 4, 22, 7, 9];\n    let max_num: i32 = arr[0];\n\n    for x in 0..arr.len() {\n        if arr[x] > max_num {\n            max_num = arr[x];\n        }\n    }\n\n    println!(\"Max number: {}\",max_num);\n}", "label": 1}
{"text": "index_of_item = my_list.index(item_to_find)\n\n# Output\n2", "label": 1}
{"text": "def func1():\n    print(\"this is function 1\") \n    print(\"this is function 2\")", "label": 1}
{"text": "square_numbers = []\n\nfor i in range(10):\n    square_numbers.append(i * i)\n\nprint(square_numbers) # [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]", "label": 1}
{"text": "import json \n  \n# input JSON \njson_data = '{ \"person\": { \"name\":\"John\", \"age\":30, \"location\":\"USA\" } }'\n\n# parse json\ndata = json.loads(json_data) \n\n# get the name\nname = data[\"person\"][\"name\"] \n\n# print the name\nprint(name)", "label": 1}
{"text": "def nth_smallest(nums, n):\n    sorted_nums = sorted(nums)\n    return sorted_nums[n-1]\n\nprint(nth_smallest([5, 8, 1, 9, 4], 3)) # Output: 5", "label": 1}
{"text": "list = [\"apple\", \"banana\", \"mango\", \"pear\"]", "label": 1}
{"text": "for num in range(0, 11, 2):\n    print(num)", "label": 1}
{"text": "<!DOCTYPE html>\n<html>\n  <head>\n    <title>Hello World</title>\n  </head>\n  <body>\n    <b>Hello, World!</b>    \n  </body>\n</html>", "label": 1}
{"text": "for (int i = 0; i < 10; i++) \n{ \n Console.WriteLine(i); \n}", "label": 1}
{"text": "SELECT Job, AVG(Salary)\nFROM Employee\nGROUP BY Job", "label": 1}
{"text": "String \"06/05/2019, 08/10/2020\"", "label": 1}
{"text": "The total number of weights in the network layer is 4 * 3 = 12.", "label": 1}
{"text": "The loop will be executed 5 times. The range function will generate numbers from 0 to 4 (inclusive). Therefore, the loop will be executed 5 times with 'Hello' being printed each time.", "label": 1}
{"text": "The average value of [2, 3, 6, 4] is 3.75. This can be calculated by summing up all of the numbers, i.e. 2 + 3 + 6 + 4 = 15, and then dividing by the number of elements in the list, i.e. 4. Therefore, the average value is 15 / 4 = 3.75.", "label": 1}
{"text": "def append_num_with_zeros(string, max_len):\n    \"\"\"Append a number with zeros to a given string up to a maximum number of characters.\"\"\"\n    # Convert string to list\n    ls = list(string)\n    # Calculate number of zeros required to append\n    num_zeros = max_len - len(string)\n    # Append zeros\n    for i in range(num_zeros):\n        ls.append('0')\n    # Convert list back to string\n    return ''.join(ls)", "label": 1}
{"text": "def sum_list(list):\n    \"\"\"Calculate the sum of numbers from a given list\"\"\"\n    # Initialize sum\n    s = 0\n    # Sum the list\n    for number in list:\n        s += number\n    # Return the result\n    return s", "label": 1}
{"text": "npm install ejs", "label": 1}
{"text": "public static int RoundToNearestInteger(double number)\n{\n        return (int)Math.Round(number, 0);\n}\n\nRoundToNearestInteger(27.7); //output: 28", "label": 1}
{"text": "public static synchronized void incrementCounter(int counter) {\n  counter += 1;\n}", "label": 1}
{"text": "class Math {\n  add(n1: number, n2: number): number {\n    return n1 + n2;\n  }\n}", "label": 1}
{"text": "function mostFrequentElem(arr) {\n  let countMap = new Map();\n\n  for (let i = 0; i < arr.length; i++) {\n    if (!countMap.has(arr[i])) {\n      countMap.set(arr[i], 1);\n    } else {\n      let val = countMap.get(arr[i]);\n      countMap.set(arr[i], val + 1);\n    }\n  }\n  let maxCount = 1;\n  let maxElem;\n  for (let [key, val] of countMap.entries()) {\n    if (val > maxCount) {\n      maxCount = val;\n      maxElem = key;\n    }\n  }\n  return maxElem;\n}", "label": 1}
{"text": "[10, 20, 30]", "label": 1}
{"text": "A local variable in Python is a variable that is declared within a function or a class. It is a variable that only exists in the context of that function or class, and cannot be accessed outside the function or class in which it is declared. Local variables are also referred to as \"lexical\" or \"automatic\" variables because they are automatically scoped to the function or class in which they are declared. They are different from global variables, which are available to the entire program. Local variables are helpful in limiting the scope of a variable, which means that the variable is only accessible in the function or class in which it is declared. This can help make code more efficient, clear, and secure.", "label": 1}
{"text": "let users = [\n  {\n    username: 'John',\n    age: 20\n  },\n  {\n    username: 'Jane',\n    age: 22\n  },\n  {\n    username: 'Jacob',\n    age: 25\n  }\n];", "label": 1}
{"text": "def get_fibonacci(n):\n    \"\"\" Generates n terms of the Fibonacci sequence\n    \n    Args:\n        n (int): The number of Fibonacci terms to generate\n        \n    Returns:\n        list: A list of the first n Fibonacci numbers\n    \"\"\"\n    # Initialize first two Fibonacci numbers\n    a = 0\n    b = 1\n\n    # Initialize the Fibonacci Sequence list\n    fibonacci_sequence = []\n    fibonacci_sequence.append(a)\n    fibonacci_sequence.append(b)\n\n    # Generate the Fibonacci Sequence\n    while len(fibonacci_sequence) < n:\n        c = a + b\n        fibonacci_sequence.append(c)\n        a = b\n        b = c\n\n    return fibonacci_sequence", "label": 1}
{"text": "def merge_sorted_lists(list1, list2):\n    \"\"\" Merges two sorted linked lists and returns it as a new list\n    \n    Args:\n        list1 (list): The first sorted linked list \n        list2 (list): The second sorted linked list\n        \n    Returns:\n        list: The merged sorted linked list\n    \"\"\"\n    # Initialize the merged list\n    merged_list = []\n    \n    # Initialize the pointers\n    i = 0\n    j = 0\n\n    # Iterate over the two lists\n    while i < len(list1) and j < len(list2):\n        # Add the element with the smaller value to the merged list\n        if list1[i] < list2[j]:\n            merged_list.append(list1[i])\n            i += 1\n        else:\n            merged_list.append(list2[j])\n            j += 1\n    \n    # Add the remaining elements to the merged list\n    while i < len(list1):\n        merged_list.append(list1[i])\n        i += 1\n    \n    while j < len(list2):\n        merged_list.append(list2[j])\n        j += 1\n    \n    return merged_list", "label": 1}
{"text": "In Python, the modulo operator (also known as the \u201cremainder\u201d or \u201cmodulus\u201d operator) is the percentage sign (%). It is used to calculate the remainder after division of one number by another. For example, the expression \u201c7 % 3\u201d will evaluate to 1. This means that the remainder after 7 is divided by 3 is 1. Generally, the syntax for this operation is \u201ca % b\u201d, where a and b are numbers. The result of this operation is the remainder after a is divided by b.", "label": 1}
{"text": "10", "label": 1}
{"text": "The web scraper can be designed using the Python library BeautifulSoup. The scraper can take a url of a wiki article as an argument and extract the text content using the method find_all('p'). The text content of the article can then be extracted using the get_text() method.", "label": 1}
{"text": "my_list = [1, 2, 5, 4, 2, 1, 5]\ncount = 0\nfor i in my_list:\n  if i == 5:\n    count += 1\nprint(count) #2", "label": 1}
{"text": "lens = []\nfor name in names:\n    lens.append(len(name))", "label": 1}
{"text": "res = str1 + str2", "label": 1}
{"text": "SELECT column_name \nFROM table_name;", "label": 1}
{"text": "SELECT CITY, COUNT(*) as Occurrences\nFROM person\nGROUP BY City\nORDER BY Count(*) DESC\nLIMIT 5;", "label": 1}
{"text": "print(\"Hello\",\"|\".join([str(x) for x in [1,2,3]]))", "label": 1}
{"text": "def fibonacci_sequence(n): \n    nums = []\n    a, b = 0,1\n    for i in range(n): \n        nums.append(a)\n        a, b = b, a + b \n    return nums\n\nprint(fibonacci_sequence(7))", "label": 1}
{"text": "class PrintNumber{\n    constructor(num1, num2){\n        this.num1 = num1;\n        this.num2 = num2;\n    }\n    printNumber(){\n        console.log(`${this.num1}, ${this.num2}`);\n    }\n}", "label": 1}
{"text": "std::string intToString(int number){\n    std::stringstream ss; \n    ss << number; \n    return ss.str();\n}", "label": 1}
{"text": "System.out.println(s);", "label": 1}
{"text": "for char in \"Hello World\":\n    if char == 'o':\n        print(char)", "label": 1}
{"text": "#include <iostream>\n\nusing namespace std;\n\nint addition(int a, int b){\n   return (a+b);\n}\n\n// Subtraction function\nint subtraction(int a, int b){\n   return (a-b);\n}\n\n// Multiplication function\nint multiplication(int a, int b){\n   return (a*b);\n}\n\n// Division function\nint division(int a, int b){\n   return (a/b);\n}\n\n// Function to perform basic calculator operations\nint calculate(int a, int b, char c){\n    int result;\n    switch (c){\n       case '+':\n           result = addition(a, b);\n           break;\n       case '-':\n           result = subtraction(a, b);\n           break;\n       case '*':\n           result = multiplication(a, b);\n           break;\n       case '/':\n           result = division(a, b);\n           break;\n       default:\n           break;\n    }\n    return result;\n}\n\nint main(){\n    int x, y;\n    char a;\n    \n    cout << \"Please enter two numbers: \";\n    cin >> x >> y;\n    \n    cout << \"Please enter an operator: \";\n    cin >> a;\n    \n    int result = calculate(x, y, a);\n    cout << \"The result is: \" << result;\n    \n    return 0;\n}", "label": 1}
{"text": "A multi-threaded application is an application that uses multiple threads of execution to execute different tasks simultaneously. All threads share the same address space, so multiple threads can access the same data in memory. This provides a more optimized use of resources, as one thread does not need to wait for another thread to finish before accessing the same data.\n\nA multi-process application is an application that uses multiple processes to execute different tasks simultaneously. Each process has its own separate address space, meaning the processes do not share the same data in memory. This means that the processes can\u2019t directly access data from each other, and communication between processes must be established through inter-process communication mechanisms like pipes, sockets, and message queues.", "label": 1}
{"text": "class Greeting extends React.Component {\n    render() {\n        return (\n            <div> \n                <h1>Hello World!</h1> \n            </div>\n        );\n    }\n}", "label": 1}
{"text": "let count = 0;\nconst keyObject = () => {\n    let newObj = {[`key_${count}`]: count};\n    count++;\n    return newObj;\n}", "label": 1}
{"text": "NLTK (Natural Language Toolkit) is a popular library used for text processing and breaking it down into basic meaningful parts. It is a platform for building Python programs to work with human language data.", "label": 1}
{"text": "O(n)", "label": 1}
{"text": "import collections\n\ndef get_most_used_words(string):\n    # Tokenize the string\n    words = string.split()\n\n    # Calculate frequency of each word\n    freq = {}\n    for word in words:\n       if word in freq:\n           freq[word] += 1\n       else:\n           freq[word] = 1\n\n    # Sort the words in descending order of frequency\n    sorted_freq = sorted(freq.items(), key=lambda x: x[1], reverse=True)\n\n    # Get the top ten most used words\n    most_used_words = [word for word, count in sorted_freq[:10]]\n\n    return most_used_words", "label": 1}
{"text": "let reverseString = (str) => str.split('').reverse().join('');", "label": 1}
{"text": "const express = require('express');\nconst app = express();\n\napp.get('/time', (req, res) => {\n const date = new Date();\n const time = {\n  hour: date.getHours(),\n  minutes: date.getMinutes(),\n  seconds: date.getSeconds()\n }\n res.json(time)\n});\n\napp.listen(6000);", "label": 1}
{"text": "SELECT user_id, username, age, subscriptions \nFROM users \nWHERE age < 24 \nAND subscriptions >= 10", "label": 1}
{"text": "We can use the built-in min() function to find the minimum value in a list. This function takes an iterable such as a list, tuple or set as an argument and returns the smallest item in the iterable. For example, if given a list of numbers, the min() function would return the number with the lowest value.\n\nExample: \n\nmy_list = [3, 6, 2, 8, 4]\nmin_val = min(my_list)\nprint(min_val)  # 2", "label": 1}
{"text": "SELECT *\nFROM Orders\nWHERE price > 1000;", "label": 1}
{"text": "class myClass():\n    def __init__(self):\n        self.var1 = \"Hello\"\n        self.var2 = \"World!\"\n        self.var3 = 5\n    def method1(self):\n        print(self.var1)\n    def method2(self):\n        print(self.var2)", "label": 1}
{"text": "# k-nearest neighbor algorithm\ndef knn(k, data, targets, query):\n    # find k nearest neighbors of the query\n\tindices = get_neighbors(k, data, query)\n\t\n\t# find most common label among the neighbors\n\tcounts = {}\n\tfor index in indices:\n\t\tlabel = targets[index]\n\t\tcounts[label] = counts.get(label, 0) + 1\n\t\n\t# from the most to the least occurring \n\tlabels = sorted(counts, key=counts.get, reverse=True)\n\treturn labels[0]", "label": 1}
{"text": "function downloadData(url) {\n  return new Promise((resolve, reject) => {\n    // Code to download data\n    if (/* success */) {\n      resolve(data)\n    } else {\n      reject(err)\n    }\n  })\n}", "label": 1}
{"text": "sendRequest(url) {\n  // Code to send request\n}\n\nrequests = []; // Array to keep track of requests\n\nmakeRequest(url) {\n  if (!requests.includes(url)) { // Check if request doesn't already exist\n    sendRequest(url);\n    requests.push(url); // Add request to list\n  }\n}", "label": 1}
{"text": "SELECT name \nFROM Students \nWHERE grade >= 7;", "label": 1}
{"text": "import socket\n\ndef get_ip(hostname):\n    return socket.gethostbyname(hostname)\n\nprint(get_ip('google.com'))", "label": 1}
{"text": "40", "label": 1}
{"text": "#sidebar {\n  border-bottom: 1px solid black;\n}\n\n#content {\n  border-top: 1px solid black;\n}", "label": 1}
{"text": "#Add two parameters together and return the result\ndef add_two_params(a, b):\n    return a + b\nresult = add_two_params(1, 2)\nprint('The result is', result)", "label": 1}
{"text": "#Calculate the applicable tax amount \ndef get_tax_amount(income, country):\n    #Country specific logic\n    if country == 'Ireland':\n        tax_rate = 0.20\n    else:\n        tax_rate = 0.15\n    #Calulate tax amount\n    tax_amount = income * tax_rate\n    return tax_amount\nif __name__ == '__main__':\n    income = 20000\n    country = 'Ireland'\n    tax_amount = get_tax_amount(income, country)\n    print('Tax amount:', tax_amount)", "label": 1}
{"text": "// XPath query to retrieve all elements from the given XML string \n/root/child", "label": 1}
{"text": "SELECT e.name, a.file_name, a.file_url\nFROM employees e\nJOIN attachments a ON e.id = a.employee_id\nWHERE e.department = 'Sales'", "label": 1}
{"text": "let data = {\n  \"name\": \"John\", \n  \"age\": 30, \n  \"city\": \"New York\"\n};", "label": 1}
{"text": "<input type=\"email\" name=\"email\" placeholder=\"Enter your email address\">", "label": 1}
{"text": "<form>\n  <label>Name:</label><input type=\"text\" name=\"name\"><br>\n  <label>Age:</label><input type=\"number\" name=\"age\"><br>\n  <input type=\"submit\" value=\"Submit\">\n</form>", "label": 1}
{"text": "String: '&lt;div&gt;'", "label": 1}
{"text": "var randomNum = Math.floor(Math.random() * (11 - 0)) + 0;", "label": 1}
{"text": "arr = [\"Dog\",\"Cat\",\"Mouse\"]\nlongest_str = max(arr, key=len)\nprint(len(longest_str))", "label": 1}
{"text": "document.querySelector('p').style.fontSize = \"14px\";", "label": 1}
{"text": "Math.sqrt(961); //Output is: 31", "label": 1}
{"text": "def dict_sum(nums):\n sum = 0\n for key, val in nums.items():\n  sum +=val\n return sum\n\nprint(dict_sum(dict)) //Output is: 18", "label": 1}
{"text": "function validateEmail(email) {\n    var re = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\n    return re.test(email); \n}", "label": 1}
{"text": "\"\"\"Print the Hello World message using the Tkinter module in Python\"\"\"\nimport tkinter as tk\n\n# Create the main window\nwindow = tk.Tk()\n\n# Create the label with the text\nhello_label = tk.Label(window, text=\"Hello World\")\n\n# Pack the label to the window\nhello_label.pack()\n\n# Main loop\nwindow.mainloop()", "label": 1}
{"text": "if age >= 18:\n    print(\"You are an adult\")\nelse:\n    print(\"You are a minor\")", "label": 1}
{"text": "def create_dictionary(keys, values):\n    # Create an empty dictionary\n    my_dict = {}\n    # Populate the dictionary with elements from lists\n    for i in range(len(keys)): \n        my_dict[keys[i]] = values[i]\n    return my_dict", "label": 1}
{"text": "SELECT * FROM [table_name] LIMIT 10;", "label": 1}
{"text": "//h2", "label": 1}
{"text": "class Person(\n    var firstName: String,\n    var lastName: String, \n    var age: Int\n)", "label": 1}
{"text": "filter_words_over_five_letters <- function(words_list) {\n  filtered_words <- words_list[nchar(words_list) > 5]\n  return(filtered_words)\n}", "label": 1}
{"text": "var a = 0, b = 1\n\nfor _ in 1...20 {\n    let c = a + b\n    a = b\n    b = c\n    print(\"\\(c)\")\n}", "label": 1}
{"text": "CREATE TABLE medical_records (\n    record_id INT AUTO_INCREMENT PRIMARY KEY,\n    patient_name VARCHAR(255) NOT NULL,\n    doctor VARCHAR(255) NOT NULL,\n    diagnosis TEXT,\n    test_results TEXT,\n    notes TEXT\n);", "label": 1}
{"text": "for item in some_list:\n    print(\"{:>20}\".format(item))", "label": 1}
{"text": "def find_max(list):\n    # base condition\n    if len(list) == 1:\n        return list[0] \n    else:\n        # compare the current element to the next element\n        max_element = max(list[0], list[1])\n        # remove the compared element\n        list.pop(1)\n        # call the function on the remaining list\n        return find_max(list[:1] + [max_element] + list[1:])", "label": 1}
{"text": "public class Main {\n    public static void main(String[] args) {\n        System.out.println(10 % 3);\n    }\n}", "label": 1}
{"text": "SELECT * FROM Sales WHERE date BETWEEN '2021-04-01'AND '2021-04-15';", "label": 1}
{"text": "mylist = list(set(mylist))\nprint(mylist)", "label": 1}
{"text": "def is_prime(x):\n    if x<2:\n        return False\n    for i in range(2, int(x**0.5)+1):\n        if x % i == 0:\n            return False\n    return True\n\nfor x in range(2,1001):\n    if is_prime(x):\n        print(x)", "label": 1}
{"text": "import mysql.connector\n\nmydb = mysql.connector.connect(\nhost=\"localhost\",\nuser=\"username\",\npassword=\"password\"\n)\n\nmycursor = mydb.cursor()\nmycursor.execute(\"SELECT * from products\")\n\nresult = mycursor.fetchall()\n\nfor row in result:\n    print(row)", "label": 1}
{"text": "import java.util.Arrays; \n\npublic class SortList { \n    public static void main(String[] args) \n    { \n        int unsortedList[] = {7, 6, 5, 4, 3, 2, 1}; \n        Arrays.sort(unsortedList);\n  \n        int n = unsortedList.length; \n        for (int i=n-1; i>=0; i--) \n            System.out.print(unsortedList[i]+\" \"); \n    } \n}", "label": 1}
{"text": "console.log()", "label": 1}
{"text": "The language used to install packages in Ubuntu and other Linux-based systems is apt.", "label": 1}
{"text": "bool isValid = true;", "label": 1}
{"text": "def lcs(str1, str2):\n    m = len(str1)\n    n = len(str2)\n\n    table = [[0] * (n + 1) for _ in range(m + 1)]\n\n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0 or j == 0:\n                table[i][j] = 0\n            elif str1[i-1] == str2[j-1]:\n                table[i][j] = table[i-1][j-1] + 1\n            else:\n                table[i][j] = max(table[i-1][j], table[i][j-1])\n\n    lcs = []\n    i = m\n    j = n\n    while i > 0 and j > 0:\n        if str1[i-1] == str2[j-1]:\n            lcs.append(str1[i-1])\n            i -= 1\n            j -= 1\n        elif table[i-1][j] > table[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return lcs[::-1]\n\n\nstr1 = \"ABGXABCAB\"\nstr2 = \"ZXABGAYBCB\"\n\nprint(lcs(str1, str2))", "label": 1}
{"text": "def array_lengths_to_dict(arr):\n    my_dict = {}\n    for s in arr:\n        my_dict[s] = len(s)\n    return my_dict\n\narr = [\"apple\", \"banana\", \"cherry\"]\n\nprint(array_lengths_to_dict(arr))", "label": 1}
{"text": "SELECT name, age, city FROM users;", "label": 1}
{"text": "Breadth-first search (BFS) is a technique used to traverse a tree or graph. In BFS, nodes are visited layer by layer, moving across each level from left to right. The algorithm traverses the tree level by level, beginning with the root node, then traversing the child nodes of the root, then traversing the grandchild nodes of the root, and so on. It continues the traversal until all the nodes in the tree have been visited.", "label": 1}
{"text": "def greet(name, message):\n    print(message + \" \" + name + \"!\")", "label": 1}
{"text": "def binary_search(list, goal): \n    start = 0 \n    end = len(list) - 1\n    while start <= end: \n        mid = (start + end) // 2\n        if list[mid] == goal: \n            return mid \n        elif goal < list[mid]: \n            end = mid - 1 \n        else: \n            start = mid + 1\n    return -1\n\nresult = binary_search(list, goal)\nprint(result)", "label": 1}
{"text": "def print_lsc(x):\n   print(x%10)", "label": 1}
{"text": "import sys\nimport re", "label": 1}
{"text": "var multiply = function(x, y) { \n    return x * y;\n};", "label": 1}
{"text": "def lcs(str1, str2, n, m): \n    if n == 0 or m == 0:          \n        return 0\n  \n    elif str1[n-1] == str2[m-1]:   \n        return 1 + lcs(str1, str2, n-1, m-1) \n \n    else: \n        return max(lcs(str1, str2, n, m-1),    \n                   lcs(str1, str2, n-1, m))", "label": 1}
{"text": "def modify_string(string):\n  new_string = \"\"\n  for i in string:\n    if (i.isupper()) == True:\n      new_string += i.lower()\n    elif (i.islower()) == True:\n      new_string += i.upper()\n  return new_string", "label": 1}
{"text": "def remove_first_occurrence(arr, element):\n    if element in arr:\n        arr.remove(element)\n    return arr", "label": 1}
{"text": "#!/bin/bash\n\n# Remove all system log files\nsudo rm /var/log/*.log", "label": 1}
{"text": "zyxwvutsrq", "label": 1}
{"text": "public class StringSort { \n  \n    public static void sortStringArray(String[] arr) \n    { \n        // Sorting strings \n        Arrays.sort(arr); \n  \n        // Displaying the strings after sorting \n        System.out.println(\"Strings in sorted order: \"); \n        for (int i = 0; i < arr.length; i++) \n            System.out.println(arr[i]); \n    } \n}", "label": 1}
{"text": "<link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\" />", "label": 1}
{"text": "def rot13(message):\n    output = []\n    for char in message:\n        char_code = ord(char)\n        if char_code >= ord('A') and char_code <= ord('Z'):\n            # Rotate lower case characters\n            char_code += 13\n            if char_code > ord('Z'):\n                char_code -= 26\n        elif char_code >= ord('a') and char_code <= ord('z'):\n            # Rotate upper case characters\n            char_code += 13\n            if char_code > ord('z'):\n                char_code -= 26\n        output.append(chr(char_code))\n    return ''.join(output)\nprint(rot13(\"Hello World\"))", "label": 1}
{"text": "O(n).", "label": 1}
{"text": "for row in arr:\n    for elem in row:\n        print(elem, end=' ')\n    print()\n\n# Output\n# 1 2 3\n# 4 5 6\n# 7 8 9", "label": 1}
{"text": "<button>Submit</button>", "label": 1}
{"text": "function assignOddOrEven(num){\n  let result;\n  if(num % 2 === 0) {\n    result = false;\n  } else {\n    result = true;\n  }\n  return result;\n}", "label": 1}
{"text": "\"\"\"\nCreate a FOR loop to print out the odd numbers between a given range\n\"\"\"\n\n# define the range\nmin = input[0]\nmax = input[1]\n\n# iterate through the range\nfor i in range(min, max+1):\n    # check for odd numbers\n    if i % 2 == 1:\n        print(i)", "label": 1}
{"text": "list = [1, 2, 3, 4]\nlist.remove(2)\nlist.remove(3)\n\n# list is now [1, 4]", "label": 1}
{"text": "numbers = [1, 2, 3, 4]", "label": 1}
{"text": "def highest_number(num1, num2):\n  if num1 > num2:\n    return num1\n  else:\n    return num2\n\nhighest_number(x, y)   # returns 8", "label": 1}
{"text": "shopping_list = {\n    'item1': 2.5,\n    'item2': 3.5,\n    'item3': 4.25\n}\n\ndef calculate_cost(list):\n    cost = 0\n    for item in list:\n        cost += list[item]\n    return cost\n\ntotal_cost = calculate_cost(shopping_list)\nprint(total_cost)  # prints 10.25", "label": 1}
{"text": "def find_min_max(arr):\n    min_num = arr[0]\n    max_num = arr[0]\n    for num in arr:\n        if num < min_num:\n            min_num = num \n        if num > max_num:\n            max_num = num \n    return max_num, min_num\n\nmax_num, min_num = find_min_max(arr)\nprint('Max element is', max_num, 'and min element is', min_num)  # prints Max element is 6 and min element is 1", "label": 1}
{"text": "\"\"\"\nWrite a code in Python to remove all the duplicate elements from a list and print the result\n\"\"\"\n\ndef remove_duplicates(lst):\n    new_list = []\n    for i in lst:\n        if i not in new_list:\n            new_list.append(i)\n    return new_list\n\nif __name__ == '__main__':\n    lst = [2,3,3,4,5,5]\n    print(\"List with duplicates removed:\", remove_duplicates(lst))", "label": 1}
{"text": "def spiral_traverse(matrix):\n    top = 0\n    left = 0\n    right = len(matrix[0])-1\n    bottom = len(matrix)-1\n    while top <= bottom and left <= right:\n        for i in range(left, right+1):\n            print(matrix[top][i], end = ' ')\n        top += 1\n        for i in range(top, bottom+1):\n            print(matrix[i][right], end = ' ')\n        right -= 1\n        if top <= bottom:\n            for i in range(right, left-1, -1):\n                print(matrix[bottom][i], end = ' ')\n            bottom -= 1\n        if left <= right:\n            for i in range(bottom, top-1, -1):\n                print(matrix[i][left], end = ' ')\n            left += 1", "label": 1}
{"text": "body {\n    font-weight: bold;\n}", "label": 1}
{"text": "import requests\nfrom bs4 import BeautifulSoup\n\ndef get_page_title(url):\n    \"\"\"\n    This function makes an HTTP request to the given URL and extracts the title of the web page.\n    \"\"\"\n    response = requests.get(url)\n    soup = BeautifulSoup(response.content, 'html.parser')\n    return soup.title.string\n\nprint(get_page_title('https://en.wikipedia.org/wiki/Deep_learning'))", "label": 1}
{"text": "for i in range(0, 21):\n    if i % 2 == 0:\n        print(i)", "label": 1}
{"text": "# 6ba62f1bf", "label": 1}
{"text": "let arr = [9, 5, 7, 11, 2];\n\nfunction bubbleSort(arr) {\n  let swapped;\n\n  do {\n    swapped = false;\n    for (let i = 0; i < arr.length; i++) {\n      if (arr[i] > arr[i+1]) {\n         let temp = arr[i];\n         arr[i] = arr[i+1];\n         arr[i+1] = temp;\n         swapped = true;\n      }\n    } \n  }\n  while (swapped);\n\n  return arr;\n}\n\nbubbleSort(arr);\n// Output: [2, 5, 7, 9, 11]", "label": 1}
{"text": "# Create program that assigns an ID to each element of an array\n\narr = [\"Car\", \"Bike\", \"Bus\"]\n\n# Initialize a counter\ncounter = 0\n\n# Loop over each element of the array\nfor element in arr:\n    # Assign an ID to the element (in this case, the counter value)\n    element_id = counter\n\n    # Print the assigned ID\n    print(f\"Element {element} is assigned ID {element_id}\")\n\n    # Increment the counter\n    counter += 1", "label": 1}
{"text": "def find_max_difference(nums):\n    # Initialize a max difference\n    max_diff = float('-inf')\n    \n    # Iterate through the array\n    for i in range(1, len(nums)):\n        diff = nums[i] - nums[i-1]\n        if diff > max_diff:\n            max_diff = diff\n    \n    return max_diff\n\n# Call the function\nfind_max_difference([3, 2, 7, 1, 4]) # returns 6", "label": 1}
{"text": "import pandas as pd\n\ndata = {\n  \"name\": \"John\",\n  \"age\": 30,\n  \"city\": \"New York\"\n}\n\ndf = pd.DataFrame([data])", "label": 1}
{"text": "ls /home/test/*/", "label": 1}
{"text": "<p>Hello World</p>", "label": 1}
{"text": "A hashmap (also known as a dictionary or associative array) is a data structure that stores key-value pairs. It is used to store and retrieve information using a keyword or search term as the key. The key can then be used to quickly fetch the associated value from the hashmap. This makes hashmaps a powerful tool for storing and accessing large amounts of data efficiently.", "label": 1}
{"text": "A set is a data structure that stores a collection of unique values. A set is efficient for checking if a particular value exists in the collection, as the existence of the value can be checked in constant time.", "label": 1}
{"text": "db.customers.find({ customer_id: 1 });", "label": 1}
{"text": "The main problem with this code is that it is not very efficient. It uses a recursive approach which requires solving the same subproblem multiple times, thus leading to a large time complexity. To improve the efficiency of the code, it could be rewritten to use iteration instead of recursion.", "label": 1}
{"text": "Negative", "label": 1}
{"text": "model = svm.SVC(kernel=\"linear\")\nmodel.fit(X, y)", "label": 1}
{"text": "let number = 7;", "label": 1}
{"text": "{\n  \"name\": \"John Doe\",\n  \"age\": 25\n}", "label": 1}
{"text": "<html>\n<head>\n <title>My Website</title>\n</head>\n<body>\n <p>Welcome to my website</p>\n</body>\n</html>", "label": 1}
{"text": "import calendar\n\nprint(calendar.monthrange(2020, 11)[1])", "label": 1}
{"text": "1. If the tree is empty, then return \n2. Find the key to be deleted in the tree and store it in a temporary node. \n3. Check if the key to be deleted has zero children or one child. \n    a. If the key has one child, then copy the child to the temporary node and delete the key. \n    b. If the key has two children, then find inorder successor of the key, copy it to the temporary node and delete the key.\n4. Free the memory occupied by the temporary node.", "label": 1}
{"text": "def three_sum(array, number):\n   result_sets = [] \n   for i in range(len(array) - 2):\n       for j in range(i+1, len(array) - 1):\n           for k in range(j+1, len(array)):\n               if array[i] + array[j] + array[k] == number: \n                   result_sets.append([array[i], array[j], array[k]])\n   return result_sets \n\nprint(three_sum([2, 5, 8], 10)) # Result: [[2, 5, 8]]", "label": 1}
{"text": "SELECT name \nFROM customers \nWHERE age > 30", "label": 1}
{"text": "import nltk\nfrom nltk.corpus import stopwords\n\ntxt = \"I am wondering what is the best way to learn English.\"\nwords = nltk.word_tokenize(txt)\nfiltered_words = [w for w in words if not w in stopwords.words('english')] \n  \nprint(filtered_words)", "label": 1}
{"text": "import base64\n\njson_object = '{\"name\":\"John Doe\",\"age\":25}'\nencoded_object = base64.b64encode(bytes(json_object, 'utf-8'))\nprint(encoded_object)", "label": 1}
{"text": "from itertools import permutations \n  \ndef permutations_string(string):\n    return list(permutations(string))\n\npermutations_string(\"abc\")\n\nOutput: [('a', 'b', 'c'), ('a', 'c', 'b'), ('b', 'a', 'c'), ('b', 'c', 'a'), ('c', 'a', 'b'), ('c', 'b', 'a')]", "label": 1}
{"text": "The error in the HTML page is that there is no closing <body> tag. The HTML page should have a closing </body> tag after the <h2>Welcome!</h2> tag.", "label": 1}
{"text": "Create a package containing API authentication logic and all the necessary API keys. Set up a cloud service, such as AWS or GCP, and deploy the package. Configure the cloud service to accept incoming requests and authenticate the user using the API keys.", "label": 1}
{"text": "* {\n font-style: italic;\n}", "label": 1}
{"text": "The output of the code snippet is 22, since the value of x will be incremented twice, from 7 to 16 and then again from 16 to 22.", "label": 1}
{"text": "d = {\n    1: 'one',\n    2: 'two',\n    3: 'three',\n    4: 'four',\n    5: 'five',\n    6: 'six',\n    7: 'seven',\n    8: 'eight',\n    9: 'nine',\n    10: 'ten',\n    11: 'eleven',\n    12: 'twelve',\n    13: 'thirteen',\n    14: 'fourteen',\n    15: 'fifteen',\n    16: 'sixteen',\n    17: 'seventeen',\n    18: 'eighteen',\n    19: 'nineteen',\n    20: 'twenty',\n    21: 'twenty-one',\n    22: 'twenty-two',\n    23: 'twenty-three',\n    24: 'twenty-four',\n    25: 'twenty-five',\n    26: 'twenty-six',\n    27: 'twenty-seven',\n    28: 'twenty-eight',\n    29: 'twenty-nine',\n    30: 'thirty',\n    31: 'thirty-one',\n    32: 'thirty-two',\n    33: 'thirty-three',\n    34: 'thirty-four',\n    35: 'thirty-five',\n    36: 'thirty-six',\n    37: 'thirty-seven',\n    38: 'thirty-eight',\n    39: 'thirty-nine',\n    40: 'forty',\n    41: 'forty-one',\n    42: 'forty-two',\n    43: 'forty-three',\n    44: 'forty-four',\n    45: 'forty-five',\n    46: 'forty-six',\n    47: 'forty-seven',\n    48: 'forty-eight',\n    49: 'forty-nine',\n    50: 'fifty',\n    51: 'fifty-one',\n    52: 'fifty-two',\n    53: 'fifty-three',\n    54: 'fifty-four',\n    55: 'fifty-five',\n    56: 'fifty-six',\n    57: 'fifty-seven',\n    58: 'fifty-eight',\n    59: 'fifty-nine',\n    60: 'sixty',\n    61: 'sixty-one',\n    62: 'sixty-two',\n    63: 'sixty-three',\n    64: 'sixty-four',\n    65: 'sixty-five',\n    66: 'sixty-six',\n    67: 'sixty-seven',\n    68: 'sixty-eight',\n    69: 'sixty-nine',\n    70: 'seventy',\n    71: 'seventy-one',\n    72: 'seventy-two',\n    73: 'seventy-three',\n    74: 'seventy-four',\n    75: 'seventy-five',\n    76: 'seventy-six',\n    77: 'seventy-seven',\n    78: 'seventy-eight',\n    79: 'seventy-nine',\n    80: 'eighty',\n    81: 'eighty-one',\n    82: 'eighty-two',\n    83: 'eighty-three',\n    84: 'eighty-four',\n    85: 'eighty-five',\n    86: 'eighty-six',\n    87: 'eighty-seven',\n    88: 'eighty-eight',\n    89: 'eighty-nine',\n    90: 'ninety',\n    91: 'ninety-one',\n    92: 'ninety-two',\n    93: 'ninety-three',\n    94: 'ninety-four',\n    95: 'ninety-five',\n    96: 'ninety-six',\n    97: 'ninety-seven',\n    98: 'ninety-eight',\n    99: 'ninety-nine',\n    100: 'one hundred'\n    }", "label": 1}
{"text": "def is_palindrome(str):\n    \"\"\"Checks if a given string is a palindrome.\n    \n    Parameters:\n    str (str): string to be tested\n    \"\"\"\n    str = str.lower()\n    return str[::-1] == str\n\nif __name__ == '__main__':\n    string = \"racecar\"\n    print(is_palindrome(string))", "label": 1}
{"text": "function coinFlip(){\n  let flipResult = Math.floor(Math.random() * 2);\n  \n  if (flipResult == 0){\n    return \"Heads\";\n  } \n  else {\n    return \"Tails\";\n  }\n}\n\nlet result = coinFlip();\nconsole.log(result);", "label": 1}
{"text": "def combinations_with_sum(n, m): \n  for i in range(1, m): \n    for j in range(i, m):\n      if i + j == n:\n        print(i, '+', j, '=', n)", "label": 1}
{"text": "a:link {\n    color: blue;\n}\n\na:visited {\n    color: red;\n}", "label": 1}
{"text": "import numpy as np\narr = np.array([[1,2,3],[4,5,6]])\n\n# Get the sum of all elements in the array\ntotal_sum = np.sum(arr)\n\n# Print the sum\nprint(total_sum)", "label": 1}
{"text": "# Create a list of unique elements from given list\nunique_nums = list(set(nums))\n\n# Print the list\nprint(unique_nums)", "label": 1}
{"text": "from datetime import datetime\nimport re\n\n# Parse the date string \ndate = datetime.strptime(date_string, '%d %B %Y')\n\n# Convert the date to ISO 8601 format\niso_8601 = date.strftime(\"%Y-%m-%d\")\n\n# Print the ISO 8601 formatted date\nprint(iso_8601)", "label": 1}
{"text": "new_list = []\nfor string in my_list:\n    new_list.append(string.capitalize())\n\nprint(new_list) # prints ['Hello', 'World', 'How', 'Are', 'You?']", "label": 1}
{"text": "if num % 2 == 0\n    puts \"The number is even\"\nelse\n    puts \"The number is odd\"\nend", "label": 1}
{"text": "class Point {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n  distance(other) {\n    let dx = this.x - other.x;\n    let dy = this.y - other.y;\n    return Math.sqrt(dx * dx + dy * dy);\n  }\n}", "label": 1}
{"text": "<html>\n<head> \n  <title> Title of page </title>\n</head>\n<body>\n  <h1> Header title </h1>\n  <p> This is a sample content of a web page. </p>\n</body>\n</html>", "label": 1}
{"text": "<button class=\"button\" onclick=\"calc()\">Multiply</button>\n\n<script>\n    let result;\n    function calc() {\n        result = 4*9\n        alert(`The result of the multiplication is: ${result}`)\n    }\n</script>", "label": 1}
{"text": "SELECT name, MAX(salary)\nFROM employee\nGROUP BY name;", "label": 1}
{"text": "public class Employee {\n\tprivate String name;\n\tprivate int age;\n\t\n\tpublic Employee(String name, int age) {\n\t\tthis.name = name;\n\t\tthis.age = age;\n\t}\n\t\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\t\n\tpublic int getAge() {\n\t\treturn age;\n\t}\n\t\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\t\n\tpublic void setAge(int age) {\n\t\tthis.age = age;\n\t}\n}", "label": 1}
{"text": "A superclass is a class from which other classes can inherit methods and properties. A subclass is a class that has inherited a superclass' methods and properties. In object-oriented programming (OOP), a class can be both a superclass and a subclass simultaneously. When a class inherits from another class it is said to extend the superclass, thereby creating a subclass. As such, a subclass has all the properties and methods of its superclass, as well as additional properties and methods that are unique to the subclass itself.", "label": 1}
{"text": "import turtle\n# create an instance of Turtle class\nmy_turtle = turtle.Turtle()\nmy_turtle.speed(0)\n# draw a triangle\nmy_turtle.forward(100)\nmy_turtle.left(120)\nmy_turtle.forward(100)\nmy_turtle.left(120)\nmy_turtle.forward(100)\n# finish the drawing\nmy_turtle.done()", "label": 1}
{"text": "SELECT DISTINCT nums FROM table;", "label": 1}
{"text": "UPDATE employee \nSET salary = 5000 \nWHERE id = 2;", "label": 1}
{"text": "public class Student {\n    private String firstName;\n    private String lastName;\n    private int age;\n      \n    public Student(String firstName, String lastName, int age) {\n        this.firstName = firstName;\n        this.lastName = lastName;\n        this.age = age;\n    }\n   \n    public String getFirstName() {\n        return firstName;\n    }\n\n    public void setFirstName(String firstName) {\n        this.firstName = firstName;\n    }\n\n    public String getLastName() {\n        return lastName;\n    }\n\n    public void setLastName(String lastName) {\n        this.lastName = lastName;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public void setAge(int age) {\n        if(age<0) {\n            throw new IllegalArgumentException(\"age must be >= 0\");\n        }\n        this.age = age;\n\t}\n}", "label": 1}
{"text": "#Function to check if a number is an Armstrong number\ndef isArmstrong(number):\n   sum  = 0\n   temp = number\n\n   while temp > 0:\n    digit = temp % 10\n    sum += digit ** 3\n    temp //= 10\n \n   if number == sum:\n       return True\n   else:\n       return False\n   \n#Usage\nnumber = 9\nif(isArmstrong(number)):\n    print(f\"{number} is an Armstrong number\")\nelse:\n    print(f\"{number} is not an Armstrong number\")", "label": 1}
{"text": "SELECT * FROM table_name LIMIT 20;", "label": 1}
{"text": "def longest_common_substring(s1, s2): \n    m = len(s1) \n    n = len(s2) \n  \n    # initialize matrix \n    L = [[0 for x in range(n + 1)] for x in range(m + 1)] \n  \n    # To store the length of longest common substring \n    length = 0 \n  \n    # Comparing each character of s1 and s2 \n    for i in range(m + 1): \n        for j in range(n + 1): \n  \n            # If current character of s1 and s2 matches \n            if i == 0 or j == 0: \n                L[i][j] = 0\n            elif s1[i - 1] == s2[j - 1]: \n                L[i][j] = L[i - 1][j - 1] + 1\n                length = max(length, L[i][j]) \n            else: \n                L[i][j] = 0\n  \n    return length \n\n# Driver code \ns1 = 'abcde'\ns2 = 'abfghe'\nprint(\"Length of Longest Common Substring is: \", longest_common_substring(s1, s2))", "label": 1}
{"text": "5.2", "label": 1}
{"text": "true", "label": 1}
{"text": "def reverse(s):\n    rev = \"\"\n \n    i = len(s)\n    while i > 0:\n        rev += s[ i - 1 ]\n        i = i - 1\n \n    return rev", "label": 1}
{"text": "public float getAverage(float a, float b) {\n  return (a + b) / 2;\n}", "label": 1}
{"text": "def reverse_nums(num_list):\n    n = len(num_list)\n    for i in range(n//2):\n        num_list[i], num_list[n-i-1] = num_list[n-i-1], num_list[i]\n    return num_list", "label": 1}
{"text": "def foo(x, y, z = 0):\n    print(x, y, z)", "label": 1}
{"text": "#include <iostream>\nvoid print_fibonacci(int n) {\n int first = 0, second = 1, next;\n while (first <= n) \n {\n std::cout << first << \" \"; \n next = first + second; \n first = second; \n second = next; \n } \n}\n\nint main () {\n int n = 50;\n print_fibonacci(n); \n return 0;\n}", "label": 1}
{"text": "def sorting_algorithm(arr):\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                arr[i], arr[j] = arr[j], arr[i]\n    return arr\n\n# Test\narr = [34, 19, 42, -9, 2018, 0, 105]\nprint(sorting_algorithm(arr)) # [-9, 0, 19, 34, 42, 105, 2018]", "label": 1}
{"text": "list = [2, 7, 11, 15]\ntarget = 9\n\nfor i in range(0, len(list) - 1):\n    for j in range(i + 1, len(list)):\n        if list[i] + list[j] == target:\n            print('The two numbers in the list whose sum is equal to the target number are %d and %d' %(list[i], list[j]))", "label": 1}
{"text": "function evaluateExpression(str) {\n    let expression = str.split(' ').map(el => {\n        if (el === '+' || el === '-' || el === '*' || el === '/') {\n            return el;\n        }\n        return parseInt(el);\n    });\n    let stack = [];\n    let result;\n\n    for (let i = 0; i < expression.length; i++) {\n        let el = expression[i];\n        if (typeof el === 'number') {\n            stack.push(el);\n        } else {\n            let secondOperand = stack.pop();\n            let firstOperand = stack.pop();\n            switch (el) {\n                case '+':\n                    result = firstOperand + secondOperand;\n                    break;\n                case '-':\n                    result = firstOperand - secondOperand;\n                    break;\n                case '*':\n                    result = firstOperand * secondOperand;\n                    break;\n                case '/':\n                    result = firstOperand / secondOperand;\n                    break;\n            }\n            stack.push(result);\n        }\n    }\n    return stack.pop();\n}\n\nconsole.log(evaluateExpression(\"2 + 3 * 4 - 5 / 3\"));", "label": 1}
{"text": "import itertools\nflattened_list = list(itertools.chain.from_iterable(nested_list))\nprint(flattened_list)\n# Output: [1, 2, 3, 4, 5, 6]", "label": 1}
{"text": "my_set = set(my_list)\nprint(my_set)\n# Output: {1, 2, 3, 4}", "label": 1}
{"text": "from itertools import permutations\npermutation_list = list(permutations(my_list))\nprint(permutation_list)\n# Output: [(1, 2, 3), (1, 3, 2), (2, 1, 3), (2, 3, 1), (3, 1, 2), (3, 2, 1)]", "label": 1}
{"text": "[0, 1, 4, 6, 7, 9]", "label": 1}
{"text": "def sum_of_odd_integers(n,m):\n    total_sum = 0\n    for i in range(m,m+(2*n-1),2):\n        total_sum += i\n    return total_sum", "label": 1}
{"text": "import random\n\ndef create_random_array():\n    lst = []\n    for i in range(4):\n        lst.append(random.randint(1,10))\n\n    return lst", "label": 1}
{"text": "class Animal:\n\n    def make_sound(self):\n        \"\"\"Makes a sound specific to the animal.\"\"\"\n        pass\n    \n    def eat(self):\n        \"\"\"Eats food.\"\"\"\n        pass", "label": 1}
{"text": "let string = \"Hello, World!\"\nlet separator = \",\"\n\nlet array = string.components(separatedBy: separator)\nprint(array) // [\"Hello\", \" World!\"]", "label": 1}
{"text": "array = [4, 5, 2, 8, 9];\nnumber = 6;\n\n% Count the number of elements in the array that are greater than the given number\ncount = 0;\nfor i=1:length(array)\n    if array(i) > number\n        count = count + 1;\n    end\nend\n\ndisp(count);  % Output: 2", "label": 1}
{"text": "SELECT COUNT(*) \nFROM traffic \nWHERE type = 'website' \nAND date = '<date>'", "label": 1}
{"text": "# Node class \nclass Node: \n \n\t# Function to initialise the node object \n\tdef __init__(self, data): \n\t\tself.data = data # Assign data \n\t\tself.next = None # Initialize next as null \n\n# Linked List class \nclass LinkedList: \n\n\t# Function to initialize head \n\tdef __init__(self): \n\t\tself.head = None\n\n\t# Function to insert a new node at the beginning \n\tdef insert_at_head(self, new_data): \n\t\t\n\t\t# Create a new node \n\t\tnew_node = Node(new_data) \n\n\t\t# update the new nodes next to old head\n\t\tnew_node.next = self.head \n\n\t\t# update head to new node \n\t\tself.head = new_node", "label": 1}
{"text": "def sum_range(start, end):\n    res = 0\n    for i in range(start, end+1):\n        res += i\n    return res\n\nsum_range(1, 10)", "label": 1}
{"text": "The unit of measurement for the average speed of a car is kilometers per hour (km/h) or miles per hour (mph).", "label": 1}
{"text": "numberArray = []\nfor x in range(10, 0, -1):\n    numberArray.append(x)\n\nprint(numberArray) # [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]", "label": 1}
{"text": "function traverse2DArray(arr) {\n    for(let i=0; i<arr.length; i++) {\n        for(let j=0; j<arr[i].length; j++) {\n            console.log(arr[i][j]);\n        }\n    }\n}", "label": 1}
{"text": "print(list[:5])", "label": 1}
{"text": "db.inventory.find( { quantity: { $gt: 10 } } )", "label": 1}
{"text": "# Node class \nclass Node: \n    # Function to initialise the node object \n    def __init__(self, data): \n        self.data = data  # Assign data \n        self.next = None  # Initialize next as null \n  \n# Linked List class \nclass LinkedList: \n  \n    # Function to initialize head \n    def __init__(self): \n        self.head = None\n\n    # Function to delete given node at position \n    def delete_node(self, position): \n  \n        # If linked list is empty \n        if self.head == None: \n            return \n  \n        # Store head node \n        temp = self.head \n  \n        # If head needs to be removed \n        if position == 0: \n            self.head = temp.next\n            temp = None\n            return \n  \n        # Find previous node of the node to be deleted \n        for i in range(position -1 ): \n            temp = temp.next\n            if temp is None: \n                break\n  \n        # If position is more than number of nodes \n        if temp is None: \n            return \n        if temp.next is None: \n            return \n  \n        # Node temp.next is the node to be deleted \n        # store pointer to the next of node to be deleted \n        next = temp.next.next\n  \n        # Unlink the node from linked list \n        temp.next = None\n  \n        temp.next = next \n  \n# Given Position\nposition = 5\n\n# Create a linked list with four nodes\nlinked_list = LinkedList()\nlinked_list.head = Node(1)\nsecond = Node(2)\nthird = Node(3)\nfourth = Node(4)\n\n# Now connect the linked list \nlinked_list.head.next = second\nsecond.next = third\nthird.next = fourth\n\n# Delete the node from given position\nlinked_list.delete_node(position)", "label": 1}
{"text": "SELECT item_name, price\nFROM products\nORDER BY price DESC\nLIMIT 10;", "label": 1}
{"text": "int a = 5;\nint b = 2;\n\nint c = a - b;", "label": 1}
{"text": "^[A-Z]+$", "label": 1}
{"text": "# Algorithm to reverse a string\ndef reverse_string(s):\n# Create a result string\n result = \"\"\n # Iterate through the string in reverse order\n for i in range(len(s)-1, -1, -1):\n result += s[i]\nreturn result", "label": 1}
{"text": "#!/bin/bash\n\n# num will be the number to be checked\nnum=2\n\n# counter to count the number of Prime numbers\ncounter=0\n \necho \"First 10 prime numbers are:\"\n\nwhile [ $counter -lt 10 ]\ndo\n\t# isPrime will take value 0 or 1, 1 if prime\n\tisPrime=1\n \n\t# i will start from 2, because 2 is the smallest prime number\n\ti=2\n \n\t# this loop will run from 2 to less than given number\n\twhile [ $i -lt $num ]\n\tdo\n \n\t\tif [ `expr $num % $i` -eq 0 ]\n\t\tthen\n\t\t\t# if modulus comes out to be 0, then it is not prime\n\t\t\tisPrime=0\n\t\tfi\n \n\t\ti=`expr $i + 1`\n \n\tdone\n \n\t# if prime, then counter should be incremented\n\tif [ $isPrime -eq 1 ]\n\tthen\n\t\techo $num\n\t\tcounter=`expr $counter + 1`\n\tfi\n \n\t# increment the number for next loop\n\tnum=`expr $num + 1`\n \ndone", "label": 1}
{"text": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Current Date and Time</title>\n    <style>\n        p {\n            font-size: 3em;\n            font-family: Arial, sans-serif;\n        }\n    </style>\n</head>\n<body>\n    <p id=\"time\"></p>\n\n    <script>\n        const today = new Date();\n        const time = `${today.toLocaleString()}`;\n        document.getElementById(\"time\").innerHTML = time;\n    </script>\n</body>\n</html>", "label": 1}
{"text": "{\n    \"key1\": \"value1\",\n    \"key2\": \"value2\"\n}", "label": 1}
{"text": "calculate median <- function(arr){\n    sorted <- sort(arr)\n    n <- length(arr)\n    if(n%%2 == 0){\n        mid <- n/2\n        median <- (sorted[mid] + sorted[mid + 1] ) / 2\n    } else {\n        mid <- (n + 1) / 2\n        median <- sorted[mid]\n    }\n    return(median)\n}\n\ncalculate_median(c(2, 3, 4, 5))", "label": 1}
{"text": "<html>\n    <head>\n        <title>Table Example</title>\n    </head>\n    <body>\n        <table>\n            <tr>\n                <td>Row 1, Column 1</td>\n                <td>Row 1, Column 2</td>\n                <td>Row 1, Column 3</td>\n            </tr>\n            <tr>\n                <td>Row 2, Column 1</td>\n                <td>Row 2, Column 2</td>\n                <td>Row 2, Column 3</td>\n            </tr>\n            <tr>\n                <td>Row 3, Column 1</td>\n                <td>Row 3, Column 2</td>\n                <td>Row 3, Column 3</td>\n            </tr>\n        </table>\n    </body>\n</html>", "label": 1}
{"text": "import javafx.application.Application;\nimport javafx.scene.Scene;\nimport javafx.scene.input.KeyCode;\nimport javafx.scene.layout.Pane;\nimport javafx.scene.paint.Color;\nimport javafx.scene.shape.Rectangle;\nimport javafx.stage.Stage;\n\npublic class MoveSquare extends Application {\n    public static void main(String[] args) {\n        launch(args);\n    }\n    \n    public void start(Stage primaryStage) {       \n        Rectangle rect = new Rectangle(30, 30);\n        rect.setFill(Color.BLUE);\n        \n        Pane root = new Pane();\n        root.getChildren().add(rect);\n        \n        Scene scene = new Scene(root);\n        scene.setOnKeyPressed(event -> {\n            KeyCode keyPressed = event.getCode();\n            if (keyPressed == KeyCode.UP) {\n                rect.setY(rect.getY() - 5);\n            } else if (keyPressed == KeyCode.DOWN) {\n                rect.setY(rect.getY() + 5);\n            } else if (keyPressed == KeyCode.LEFT) {\n                rect.setX(rect.getX() - 5);\n            } else if (keyPressed == KeyCode.RIGHT) {\n                rect.setX(rect.getX() + 5);\n            }\n        });\n        \n        primaryStage.setTitle(\"Move Square\");\n        primaryStage.setScene(scene);\n        primaryStage.setWidth(300);\n        primaryStage.setHeight(300);\n        primaryStage.show();\n        \n        scene.requestFocus();\n    }\n}", "label": 1}
{"text": "for num in [1, 2, 3, 4]:\n    print(num)", "label": 1}
{"text": "let obj = {\n   message: \"Hello, World\"\n}", "label": 1}
{"text": "public static int findMax(int num1, int num2) {\n   return (num1 > num2) ? num1 : num2;\n}", "label": 1}
{"text": "phrase, category\nThis is a big mess, Disaster\nThat was a nice evening, Joy\nI am feeling thirsty, Discomfort", "label": 1}
{"text": "x = 10\ny = 5\nx = x + y\nprint(x) # Prints 15", "label": 1}
{"text": "name = \"John Smith\" # str", "label": 1}
{"text": "for (int i=0; i<10; i++) {\n    // execute block of code\n}", "label": 1}
{"text": "def f(n): \n    i = 0\n    while i < n:\n        i+=1\n\t\t# Fixed missing indentation\n        if i % 5 == 0:\n            print(i)\n\t\t# Added missing closing bracket after print() statement", "label": 1}
{"text": "class Book:\n    def __init__(self, title, author, year):\n        self.title = title\n        self.author = author\n        self.year = year\n        \n    def get_title(self):\n        return self.title\n    \n    def get_author(self):\n        return self.author\n    \n    def get_year(self):\n        return self.year\n    \n    def set_title(self, new_title):\n        self.title = new_title\n        \n    def set_author(self, new_author):\n        self.author = new_author\n        \n    def set_year(self, new_year):\n        self.year = new_year", "label": 1}
{"text": "def traverse_tree(root): \n  if root is None: \n    return\n\t\n  traverse_tree(root.left) \n  print(root.data) \n  traverse_tree(root.right)", "label": 1}
{"text": "The type of layout used in this HTML structure is a Grid Layout. The columns are divided into equal widths, which creates a grid pattern. The content within each column is arranged horizontally.", "label": 1}
{"text": "10", "label": 1}
{"text": "import com.rabbitmq.client.ConnectionFactory;\nimport com.rabbitmq.client.Connection;\nimport com.rabbitmq.client.Channel;\nimport com.rabbitmq.client.DeliverCallback;\n\npublic class Consumer {\n\n  public static void main(String[] args) throws Exception {\n    // establish a connection to the RabbitMQ broker\n    ConnectionFactory factory = new ConnectionFactory();\n    factory.setHost(\"hostname\");\n    Connection connection = factory.newConnection();\n    Channel channel = connection.createChannel();\n    \n    // declare a queue\n    String queueName = \"myQueue\";\n    channel.queueDeclare(queueName, false, false, false, null);\n\n    // set up a consumer that will listen to the declared queue\n    DeliverCallback deliverCallback = (consumerTag, delivery) -> {\n      String message = new String(delivery.getBody());\n      System.out.println(\"Received '\" + message + \"'\");\n    };\n    channel.basicConsume(queueName, true, deliverCallback, consumerTag -> { });\n  }\n}", "label": 1}
{"text": "result = (condition) ? 5 : 10;", "label": 1}
{"text": "DELETE FROM customers WHERE address = 'Unknown';", "label": 1}
{"text": "<table>\n  <thead>\n    <tr>\n      <th>Col1</th>\n      <th>Col2</th>\n      <th>Col3</th>\n      <th>Col4</th>\n      <th>Col5</th>\n      <th>Col6</th>\n      <th>Col7</th>\n      <th>Col8</th>\n      <th>Col9</th>\n      <th>Col10</th>\n    </tr>\n  </thead>\n  <tbody>\n    <script>\n      for (var i = 0; i < 10; i++){\n        document.write(\"<tr><td>\" + i + \"</td></tr>\");\n      }\n    </script>\n  </tbody>\n</table>", "label": 1}
{"text": "class HuffmanCoding:\n \n    def __init__(self, inp_string):\n        self.inp_string = inp_string\n        self.string_length = len(inp_string)\n        self.frequency_table = self.get_frequency_table(inp_string)\n        self.huff_tree = self.build_huffman_tree(self.frequency_table)\n \n    def get_frequency_table(self, inp_string):\n        # Create dictionary to store frequencies\n        freq_table = {}\n        # Count frequency of characters in the string\n        for char in inp_string:\n            if char in freq_table:\n                freq_table[char] += 1\n            else:\n                freq_table[char] = 1\n        # Return the frequency table\n        return freq_table\n \n    def build_huffman_tree(self, frequency_table):\n        # Create a priority queue to store the trees \n        pq = PriorityQueue()\n        # Create a tree for each value\n        for value in frequency_table:\n            pq.put((frequency_table[value], Node(value)))\n        # Start the loop with two trees\n        while pq.qsize() > 1:\n            left_node = pq.get()\n            right_node = pq.get()\n            combined_freq = left_node[0] + right_node[0]\n            new_node = Node(left=left_node[1], right=right_node[1])\n            pq.put((combined_freq, new_node))\n        # Return the tree\n        return pq.get()[1]", "label": 1}
{"text": "def bottomUpCutRod(prices, n): \n \n    # Create an array of size n+1 \n    temp_array = [0 for i in range(n+1)] \n    for i in range(1, n+1): \n        tempval = -float('inf') \n        for j in range(i): \n            tempval = max(tempval, prices[j] + temp_array[i-j-1]) \n        temp_array[i] = tempval \n  \n    return temp_array[n]", "label": 1}
{"text": "Python provides two ways to handle errors: \n\n1. The try and except statement, and \n2. The raise statement.\n\nThe try and except statement is used to catch and handle exceptions, while the raise statement is used to explicitly raise an exception.", "label": 1}
{"text": "A Recurrent Neural Network (RNN) is a type of artificial neural network that is widely used for natural language processing, dialogue systems, and time series prediction. RNNs have the ability to process data sequences, which gives them an advantage over traditional neural networks. This is done by using recurrent connections between the hidden layers of the network. In this type of network architecture, the outputs from the previous layer are used as inputs to the next layer. This allows the network to remember the context of the data sequentially, which makes it suitable for problems with a temporal component. RNNs can also be used to train the model to produce a sequence output by predicting the next item in the sequence.", "label": 1}
{"text": "def printTree(root): \n    \n    # Check if tree is empty\n    if root == None: \n        return\n    \n    # First print the root data\n    print(root.data, end=\" \")\n    \n    # First recur on left child\n    printTree(root.left)\n    \n    # the recur on right child\n    printTree(root.right)", "label": 1}
{"text": "In Java, the supported data types include primitive data types like int, float, char, as well as non-primitive types such as String, Array, List, Set, and Map.", "label": 1}
{"text": "function getPathFromURL(url) {\n  const urlObj = new URL(url);\n  const path = urlObj.pathname;\n  return path;\n}", "label": 1}
{"text": "def replace_char(text):\n    if len(text) > 5:\n        return text.replace('e','E')\n    else:\n        return text", "label": 1}
{"text": "import hashlib\n\ndef generate_token(algorithm, size, encoding):\n\ttoken = hashlib.sha256(os.urandom(size//2)).hexdigest()[:size]\n\treturn token", "label": 1}
{"text": "This code creates a div element which contains an h3 for a title, a p for a paragraph, and a button element. It will be rendered as a box with the title at the top, followed by the paragraph and button below it.", "label": 1}
{"text": "for (int i = 1; i <= 10; i++)\n{\n    for (int j = 1; j <= 10; j++)\n    {\n        Console.WriteLine(\"{0} * {1} = {2}\", i, j, (i * j));\n    }\n    Console.WriteLine();\n}", "label": 1}
{"text": "let a = 12;\nlet b = 8;", "label": 1}
{"text": "{\n  \"name1\": \"value1\", \n  \"name2\": \"value2\"\n}", "label": 1}
{"text": "SELECT * FROM employees WHERE age > 30;", "label": 1}
{"text": "def sum_to_n(n):\n    total = 0\n    for i in range(1, n + 1):\n        total += i\n    return total", "label": 1}
{"text": "function isPalindrome(str) {\n    var i;\n    var len = str.length;\n\n    for (i = 0; i < len/2; i++) {\n        if (str[i] !== str[len - 1 - i]) {\n            return false;\n        }\n    }\n    return true;\n}", "label": 1}
{"text": "class ArraySum: \n    def __init__(self, arr):\n        self.arr = arr\n\n    def sum(self):\n        total = 0\n        for i in self.arr:\n            total += i\n        return total", "label": 1}
{"text": "x = [i for i in x if i % 2 == 0]", "label": 1}
{"text": "{\n    \"name\": \"John Doe\", \n    \"age\": 24, \n    \"occupation\": \"Software Engineer\"\n}", "label": 1}
{"text": "<form>\n    <label for=\"name_field\">Name:</label>\n    <input type=\"text\" id=\"name_field\" name=\"name\"/>\n    <br />\n    <label for=\"email_field\">Email:</label>\n    <input type=\"text\" id=\"email_field\" name=\"email\"/>\n    <br />\n    <input type=\"submit\" value=\"Submit\"/>\n</form>", "label": 1}
{"text": "name = \"John\"", "label": 1}
{"text": "Immutability in Python refers to the concept of objects that are unable to be modified. Immutable objects are specified when they are created and cannot be changed beyond that point. For example, tuples and strings are always immutable.", "label": 1}
{"text": "class Student:\n  def __init__(self, name, age):\n    self.name = name\n    self.age = age", "label": 1}
{"text": "print(\"The answer is \" + str(10 - 5))", "label": 1}
{"text": "df = pd.DataFrame({\"A\": [12,15,20], \n                    \"B\": [30,25,35], \n                    \"C\": [40,45,50]})", "label": 1}
{"text": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<xsl:stylesheet xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"\n  version=\"1.0\">\n\n<xsl:template match=\"/\">\n  <html>\n    <body>\n      <xsl:apply-templates/>\n    </body>\n  </html>\n</xsl:template>\n\n<xsl:template match=\"*\"> \n  <xsl:element name=\"{local-name()}\">\n    <xsl:apply-templates select=\"@* | node()\" />\n  </xsl:element>\n</xsl:template>\n\n<xsl:template match=\"@*\">\n  <xsl:attribute name=\"{local-name()}\">\n    <xsl:value-of select=\".\"/>\n  </xsl:attribute>\n</xsl:template>\n\n</xsl:stylesheet>", "label": 1}
{"text": "matrix = [[1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n          [10]]", "label": 1}
{"text": "public class MainActivity extends AppCompatActivity {\n\n    EditText radiusEditText;\n    TextView outputTextView;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        radiusEditText = findViewById(R.id.radiusEditText);\n        outputTextView = findViewById(R.id.outputTextView);\n\n        findViewById(R.id.calculateButton).setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                calculateAreaOfCircle();\n            }\n        });\n    }\n\n    private void calculateAreaOfCircle() {\n        double radius = Double.parseDouble(radiusEditText.getText().toString());\n        double area = Math.PI * radius * radius;\n\n        outputTextView.setText(String.valueOf(area));\n    }\n}", "label": 1}
{"text": "[3, 4, 5, 6]", "label": 1}
{"text": "import random\n\ndef assign_random_value(my_list):\n    \"\"\"Assign a random value to each item in a given list.\"\"\"\n    # iterate through each item in the list\n    for i in range(len(my_list)):\n        # generate a random integer between 0 and 1\n        random_int = random.randint(0, 1)\n        # assign the random integer to the current item in the list\n        my_list[i] = random_int\n    return my_list", "label": 1}
{"text": "def f(n):\n    if n == 0:\n        return 0\n    else:\n        return n + f(n-1)\n\nprint(f(5)) # prints 15", "label": 1}
{"text": "import java.util.ArrayList;\n\npublic class Qsort {\n    public static int partition(ArrayList<Integer> array, int low, int high) {\n        int pivot = array.get(high);\n        int i = low-1; \n        for (int j=low; j<high; j++) {\n            if (array.get(j) < pivot) {\n                i++;\n                int temp = array.get(i);\n                array.set(i, array.get(j));\n                array.set(j, temp);\n            }\n        }\n        int temp = array.get(i+1);\n        array.set(i+1, array.get(high));\n        array.set(high, temp);\n\n        return i+1;\n    }\n\n    public static void quicksort(ArrayList<Integer> array, int low, int high) {\n        if (low < high) {\n            int pivot_position = partition(array, low, high);\n            quicksort(array, low, pivot_position-1);\n            quicksort(array, pivot_position+1, high);\n        }\n    }\n}", "label": 1}
{"text": "if (age > 18) {\n  console.log('Adult');\n} else {\n  console.log('Minor');\n}", "label": 1}
{"text": "public static ListNode reverseList(ListNode head) { \n  \n    // Initialize current, previous and \n    // next pointers \n    ListNode current = head; \n    ListNode prev = null; \n    ListNode next = null; \n  \n    while (current != null) { \n        // Store next \n        next = current.next; \n\n        // Reverse current node's pointer \n        current.next = prev; \n  \n        // Move pointers one position ahead. \n        prev = current; \n        current = next; \n    } \n    head = prev; \n    return head; \n}", "label": 1}
{"text": "class Solution:\n    def addTwoNumbers(self, l1, l2):\n        # Initialize current, previous and \n        # next pointers \n        curr1 = l1\n        curr2 = l2\n        head = None\n        prev = None\n        \n        carry = 0\n        while curr1 != None or curr2 != None or carry != 0:\n            val1 = 0\n            if curr1 != None:\n                val1 = curr1.val\n                curr1 = curr1.next\n            \n            val2 = 0\n            if curr2 != None:\n                val2 = curr2.val\n                curr2 = curr2.next\n                \n            val = val1 + val2 + carry\n            carry = val // 10\n            temp = ListNode(val%10)\n\n            if prev == None:\n                head = temp\n            else:\n                prev.next = temp\n            \n            prev = temp\n\n        return head", "label": 1}
{"text": "Science", "label": 1}
{"text": "The purpose of a library in software development is to provide a collection of related functions and data structures that can be used by a program. Libraries are used to simplify or abstract away the details of how a particular operation is implemented or offer prepackaged functionality. Libraries offer code reuse, faster development time, and optimized performance. They also act as the interface between the application and the system or the environment it is running on.", "label": 1}
{"text": "def cost(x, price): \n    return x*price \ncost(5, 2.00)  # returns 10.00", "label": 1}
{"text": "def linear_interpolation(x1, y1, x2, y2): \n    # slope \n    m = (y2 - y1) / (x2 - x1) \n    # intercept \n    c = y2 - (m * x2) \n    return m, c", "label": 1}
{"text": "# create a priority queue \n# score will be the priority and name will be stored as data\nimport queue\nscores = queue.PriorityQueue(maxsize=5)\n\ndef add_score(score, name):\n    if scores.full():\n        min_score = scores.get()\n        if min_score[0] < score:\n            scores.put((score, name))\n        else:\n            scores.put(min_score)\n    else:\n        scores.put((score, name))", "label": 1}
{"text": "def storeDataIn2DArray(data):\n    rowLength = len(data[0])\n    columnLength = len(data)\n    twoDArray = []\n  \n    for row in range(rowLength):\n        twoDArrayRow = []\n\n        for column in range(columnLength):\n            twoDArrayRow.append(data[column][row])\n\n        twoDArray.append(twoDArrayRow)\n\n    return twoDArray", "label": 1}
{"text": "def printPreOrder(root): \n    if root != None: \n        print(root.data, end=\" \") \n        printPreOrder(root.left) \n        printPreOrder(root.right)", "label": 1}
{"text": "function convert24HourFormatTo12HourFormat(hours) {\n    if (hours > 12) {\n      return (hours - 12) + \"PM\";\n    } else if (hours == 12) {\n      return hours + \"PM\";\n    } else if (hours == 0) {\n        return 12 + \"AM\";\n    } else {\n      return hours + \"AM\";\n    }   \n}", "label": 1}
{"text": "class Node:\n def __init__(self, data):\n   self.data = data\n   self.next = None\n\nclass LinkedList:\n def __init__(self):\n   self.head = None\n\nlist = [10, 20, 30]\nllist = LinkedList()\nllist.head = Node(list[0])\n \ntemp = llist.head\n \nfor i in range(1, len(list)):\n temp.next = Node(list[i])\n temp = temp.next", "label": 1}
{"text": "SELECT gender, age, COUNT(*) FROM people WHERE age BETWEEN 20 AND 30 GROUP BY gender, age;", "label": 1}
{"text": "def linear_search(arr, target):\n    for i in range(len(arr)):\n        if arr[i] == target:\n            return i\n    \n    return None\n\nprint(linear_search([4, 5, 2, 3], 2)) # Output: 2", "label": 1}
{"text": "def make_dict(list_a, list_b):\n  dict = {}\n  for a, b in zip(list_a, list_b):\n    dict[a] = b\n\n  return dict", "label": 1}
{"text": "SELECT * FROM employees WHERE date_of_birth > '1984-01-01';", "label": 1}
{"text": "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable({\n providedIn: 'root'\n})\nexport class AuthService {\n \n constructor(private http: HttpClient) { }\n\n authenticateUser(username: string, password: string) {\n  const body = { username: username, password: password };\n \n  return this.http.post('/api/auth', body);\n }\n}", "label": 1}
{"text": "import json\n\ninput_json = {\n        \"name\": \"John Doe\",\n        \"age\": 28,\n        \"country\": \"United States\"\n}\n\ndef get_name(json):\n    json_dict = json.loads(json)\n    name = json_dict['name']\n    return name\n\nif __name__ == '__main__':\n    print(get_name(input_json))", "label": 1}
{"text": "def find_max_of_three(a, b, c): \n    \"\"\"\n    This function finds the maximum of three numbers\n    \"\"\"  \n    return max(a, b, c)\n\nif __name__ == '__main__':\n    a = 6\n    b = 7\n    c = 4\n    print(find_max_of_three(a, b, c))", "label": 1}
{"text": "def capitalize(string): \n    return string.capitalize()", "label": 1}
{"text": "def remove_non_alphanumeric(string):\n    return ''.join(c for c in string if c.isalnum())\n\nremove_non_alphanumeric(\"Hello world!\")", "label": 1}
{"text": "The code implements Bubble Sort, which is a type of comparison sorting algorithm. It works by repeatedly swapping adjacent elements if they are in the wrong order.", "label": 1}
{"text": "def Fibonacci(n): \n\ta = 0\n\tb = 1\n\tif n < 0: \n\t\tprint(\"Incorrect input\") \n\telif n == 0: \n\t\treturn a \n\telif n == 1: \n\t\treturn b \n\telse: \n\t\tfor i in range(2,n): \n\t\t\tc = a + b \n\t\t\ta = b \n\t\t\tb = c \n\t\treturn b \n  \n# Driver Code \nprint(\"Fibonacci Sequence:\")\nfor i in range(50):\n\tprint(Fibonacci(i), end = ' ')", "label": 1}
{"text": "git branch feature-X\ngit checkout feature-X", "label": 1}
{"text": "function removeSpecialChars(str) {\n    let regex = /[^a-zA-Z0-9]/g;\n    let cleanString = str.replace(regex, '');\n    return cleanString;\n}\n\nlet result = removeSpecialChars(str);\nconsole.log(result); // HelloWorld", "label": 1}
{"text": "def calculate_sum(arr):\n    sum = 0\n    for x in arr:\n        sum += x\n    return sum\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4, 5]\n    print(calculate_sum(arr))", "label": 1}
{"text": "import re\n\ndef is_valid_email(email):\n    regex = r\"^[a-zA-Z0-9.!#$%&amp;'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$\"\n    return re.match(regex, email)", "label": 1}
{"text": "def evaluate_expression(a, b, c):\n    return a * (b + c)", "label": 1}
{"text": "let myArr = ['a', 'b', 'c'];\nmyArr.push('d');", "label": 1}
{"text": "for element in reversed(my_list):\n    print(element)", "label": 1}
{"text": "string1.count(string2) # 1", "label": 1}
{"text": "He was very contentious throughout the meeting.", "label": 1}
{"text": "int sum = 0;\nfor (int i = 2; i < 10; i += 2)\n{\n sum += i;\n}\nConsole.WriteLine(\"The sum of the first 5 positive even numbers is: \" + sum);", "label": 1}
{"text": "int[] arr = {1, 2, 3, 4, 5};\nint result = 0;\nfor (int i = 0; i < arr.Length; i++)\n{\n    result += arr[i];\n    for (int j = i + 1; j < arr.Length; j++)\n    {\n        if (arr[i] % arr[j] == 0)\n        {\n            result += arr[j];\n        }\n    }\n}", "label": 1}
{"text": "i = 2\nsum = 0\n\nwhile i < 10:\n    sum += i\n    i += 2\n\nprint(\"The sum of first 5 even numbers is: \", sum)", "label": 1}
{"text": "public static int longestIncreasingSubsequence(int[] arr) {\n  int[] dp = new int[arr.length];\n  int maxLength = 1;\n  \n  dp[0] = 1;\n  \n  for (int i=1; i<arr.length; i++) {\n      int maxVal = 0;\n      for (int j=0; j<i; j++) {\n          if (arr[j] < arr[i] && dp[j] > maxVal) {\n              maxVal = dp[j];\n          }\n      }\n      dp[i] = maxVal + 1;\n      if (dp[i] > maxLength) {\n          maxLength = dp[i];\n      }\n  }\n  \n  return maxLength;\n}", "label": 1}
{"text": "var arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];", "label": 1}
{"text": "function degToRad(deg) {\n    return deg * (Math.PI/180);\n}", "label": 1}
{"text": "Create a Spreadsheet with the following columns: Month, Sales ($), Hours Worked.\nFill in the rows with the data given above.", "label": 1}
{"text": "A multithreaded program is a software program or application that uses multiple threads to execute different parts of its code simultaneously. This allows for faster execution of the program by using more than one processor core at the same time.", "label": 1}
{"text": "SELECT \n    EmployeeId, \n    AVG(Sales) as SalesAverage \nFROM SALES \nGROUP BY EmployeeId \nORDER BY SalesAverage DESC \nLIMIT 5;", "label": 1}
{"text": "<html>\n  <head>\n    <title>Data Table</title>\n  </head>\n  <body>\n  <table>\n    <tr>\n        <th>Name</th>\n        <th>Age</th>\n        <th>Occupation</th>\n    </tr>\n    <tr>\n        <td>John</td>\n        <td>32</td>\n        <td>Engineer</td>\n    </tr>\n    <tr>\n        <td>Max</td>\n        <td>28</td>\n        <td>Doctor</td>\n    </tr>\n    <tr>\n        <td>Jill</td>\n        <td>23</td>\n        <td>Teacher</td>\n    </tr>\n  </table>\n  </body>\n</html>", "label": 1}
{"text": "margin-left: 1000px;", "label": 1}
{"text": "SELECT DISTINCT country\nFROM countries;", "label": 1}
{"text": "[1, 2, 4, 5]", "label": 1}
{"text": "class Student():\n    def __init__(self, name, age, year):\n        self.name = name\n        self.age = age\n        self.year = year\n  \n    def get_name(self):\n        return self.name\n  \n    def get_age(self):\n        return self.age\n  \n    def get_year(self):\n        return self.year", "label": 1}
{"text": "class PriorityQueue(): \n   \n    def __init__(self): \n        self.elements = [] \n  \n    def is_empty(self): \n        return len(self.elements) == 0 \n  \n    def enqueue(self, item, priority): \n        self.elements.append((item, priority)) \n  \n    def dequeue(self): \n        max_priority_index = 0\n        for index, element in enumerate(self.elements): \n            if element[1] > self.elements[max_priority_index][1]: \n                max_priority_index = index \n        element = self.elements[max_priority_index] \n        del self.elements[max_priority_index] \n        return element", "label": 1}
{"text": "def reverseList(node): \n    prev = None\n    while (node != None): \n        next = node.next\n        node.next = prev \n        prev = node  \n        node = next\n    return prev", "label": 1}
{"text": "#example {\n   color: red;\n}", "label": 1}
{"text": "class Person: \n    def __init__(self, name, age): \n        self.name = name \n        self.age = age", "label": 1}
{"text": "// JavaScript Code\nlet list = [];\nconst addToList = (str) => {\n list.push(str);\n}\n\nconst createList = () => {\nlet html = \"<ul>\\n\";\n for(let i = 0; i < list.length; i++) {\n html += `<li>${list[i]}</li>\\n`;\n }\nhtml += \"</ul>\";\n document.getElementById('list').innerHTML = html;\n}", "label": 1}
{"text": "public class StudentRecord {\n private String studentName;\n private int grade;\n private double score;\n\n public StudentRecord(String studentName, int grade, double score) {\n  this.studentName = studentName;\n  this.grade = grade;\n  this.score = score;\n }\n\n public String getStudentName() {\n  return studentName;\n }\n\n public int getGrade() {\n  return grade;\n }\n\n public double getScore() {\n  return score;\n }\n\n public void setStudentName(String studentName) {\n  this.studentName = studentName;\n }\n\n public void setGrade(int grade) {\n  this.grade = grade;\n }\n\n public void setScore(double score) {\n  this.score = score;\n }\n}", "label": 1}
{"text": "public class Circle2D\n{\n    private double radius;\n\n    public Circle2D() \n    {\n        radius = 0;\n    }\n    public Circle2D(double radius) \n    {\n        this.radius = radius;\n    }\n\n    public double getRadius() \n    {\n        return radius;\n    }\n    public void setRadius(double radius) \n    {\n        this.radius = radius;\n    }\n}", "label": 1}
{"text": "For loops are better than while loops in Python because they provide a clearer syntax and are easier to debug due to their predictable and structured behavior. For loops are also more efficient than while loops since they don't require explicit initialization and condition checking, while while loops need to check if a condition is true on each iteration. This makes for loops faster and more memory-efficient, as it requires fewer operations compared to while loops.", "label": 1}
{"text": "struct TreeNode\n{\n    struct TreeNode* left;\n    struct TreeNode* right;\n    int data;\n}; \n \n \nTreeNode* LCA(TreeNode* root,TreeNode* node1, TreeNode* node2) \n{ \n    int small = min(node1->data, node2->data);\n    int large = max(node1->data, node2->data);\n  \n    if (root == NULL) \n        return NULL; \n  \n    if (root->data >= small && root->data <= large) \n        return root; \n  \n    if (root->data > large) \n        return LCA(root->left, node1, node2); \n  \n    return LCA(root->right, node1, node2); \n}", "label": 1}
{"text": "S -> bAa\nA -> AaA | aAa | bAb | abB | \u03b5", "label": 1}
{"text": "arr = [7, 5, 8, 4, 9, 6, 1, 3, 2]\n\n# Create a list of the top 3 highest valued elements\ntop_three = [max(arr)] # start with the maximum elements\narr.remove(max(arr)) # remove the maximum element from the list\ntop_three.append(max(arr)) #Add the second maximum element to top_three\narr.remove(max(arr)) # remove the second maximum element from the list\ntop_three.append(max(arr)) # Add the third maximum element to top_three\n\nprint(top_three) # Output: [9, 8, 7]", "label": 1}
{"text": "# Write an expression to check if a given number is a perfect square\n\nimport math\n\ndef is_perfect_square(num):\n    return math.sqrt(num).is_integer()\n    \n# Check the given number\nprint(is_perfect_square(16)) # Output: True", "label": 1}
{"text": "Different types of sorting algorithms include Bubble Sort, Insertion Sort, Selection Sort, Heap Sort, Merge Sort, Quick Sort, Radix Sort, Shell Sort, Counting Sort, and Bucket Sort.", "label": 1}
{"text": "function reverseSort(array){\n  return array.sort(function(a, b){\n    return b - a;\n  });\n}\n\nreverseSort([9,2,8,4,7]);\n// Output: [9,8,7,4,2]", "label": 1}
{"text": "SELECT name FROM countries;", "label": 1}
{"text": "SELECT * FROM exampleTable LIMIT 10;", "label": 1}
{"text": "GPT-3 is an advanced AI language model that can generate sentences and paragraphs of text that are relevant and coherent to a given context.", "label": 1}
{"text": "The application will allow users to store their sensor data such as location, temperature and pressure with a timestamp. The application will have a user interface to allow users to input their sensor data as well as view their stored data. The application will also have a settings page where they can configure the kinds of sensor data they want to store.", "label": 1}
{"text": "for i in range(10,21):\n    print(i**2)", "label": 1}
{"text": "import re\nstring = \"I have 2 apples and 3 bananas\"\nwords = re.findall(r'\\w+', string)\nprint(words)\n\n# Output\n['I', 'have', '2', 'apples', 'and', '3', 'bananas']", "label": 1}
{"text": "length = len(\"Hello World\")\nprint(length)\n\n# Output\n11", "label": 1}
{"text": "def array_sum(arr): \n    total = 0\n    # Iterate through arr and add elements to total  \n    for i in range (0, len(arr)): \n        total += arr[i] \n    return total \n  \n# Driver code \narr = [2, 4, 7, 10] \nsum = array_sum(arr) \nprint (sum) # -> 23", "label": 1}
{"text": "def compare(a, b):\n    if a < b:\n        return True\n    else:\n        return False", "label": 1}
{"text": "def list_primes(n): \n    primes = [] \n    for num in range(2, n+1): \n        prime=True\n        for i in range(2, int(num/2)+1):\n            if num%i == 0:\n                prime=False\n        if prime:\n            primes.append(num)\n    return primes", "label": 1}
{"text": "def is_arithmetic_sequence(sequence):\n    is_arithmetic = True\n    diff = 0\n    for i in range(1, len(sequence)):\n        if i ==1:\n            diff = sequence[i]-sequence[i-1]\n        else:\n            new_diff = sequence[i]-sequence[i-1]\n            if new_diff != diff:\n                is_arithmetic = False\n                break\n    return is_arithmetic", "label": 1}
{"text": "for i in range(1, 6):\n    print('*'*i)", "label": 1}
{"text": "def get_length(param):\n    return len(param)", "label": 1}
{"text": "SELECT title, price FROM Books;", "label": 1}
{"text": "SELECT a.job_role, a.emp_name, a.salary \nFROM employees a\nINNER JOIN (\n    SELECT job_role, MAX(salary) car_max \n    FROM employees \n    GROUP BY job_role\n) b \nON a.job_role=b.job_role AND a.salary=b.car_max;", "label": 1}
{"text": "A function pointer is a variable that holds the address of a function. It can be used to invoke a specific function based on the address stored in the pointer. It is commonly used in C and C++.", "label": 1}
{"text": "def compare_and_remove_letters(string1, string2):\n    result = \"\"\n    for i in string1:\n        if i not in string2:\n            result += i\n    for i in string2:\n        if i not in string1:\n            result += i\n    return result\n\n# example\nprint(compare_and_remove_letters(\"Hello World!\", \"Bye World!\")) # output: Byelo!", "label": 1}
{"text": "String strUpper = str.toUpperCase();\n\nSystem.out.println(strUpper); // Prints: HELLO WORLD", "label": 1}
{"text": "SELECT user_id, MAX(login_date) \nFROM users \nGROUP BY user_id \nORDER BY login_date DESC\nLIMIT 5;", "label": 1}
{"text": "SELECT * FROM Customers WHERE City = 'New York';", "label": 1}
{"text": "def reverse_string(s):\n    # Initialize empty string\n    rev_string = \"\"\n    # Traverse over each letter in the string in reverse order\n    for letter in s[::-1]:\n        # Append the current letter to the end of rev_string\n        rev_string = rev_string + letter\n    # Return the reversed string\n    return rev_string", "label": 1}
{"text": "struct Node{ \n    int data; \n    struct Node *next; \n}; \n\n// Function to print the elements of the linked list\nvoid printList(struct Node *node) \n{ \n    while (node != NULL) { \n        printf(\"%d \", node->data); \n        node = node->next; \n    } \n}", "label": 1}
{"text": "def filter_negative_numbers(nums):\n    # return only positive numbers\n    return [num for num in nums if num >= 0]\n\nprint(filter_negative_numbers([2, 3, -1, 4, -5, 6]))", "label": 1}
{"text": "SELECT * FROM Students WHERE Age > 25;", "label": 1}
{"text": "_a", "label": 1}
{"text": "SELECT Name FROM Students;", "label": 1}
{"text": "even_numbers = [2, 4]\nodd_numbers = [1, 3, 5]", "label": 1}
{"text": "In Python, you can retrieve the 3rd element of a set by using the index operator []. The 3rd element of a set can be accessed by using the syntax set[2]. Note that the indexing in Python starts from 0, so the 3rd element will have index 2.", "label": 1}
{"text": "SELECT customer_name \nFROM customers \nJOIN orders ON customers.customer_id = orders.customer_id \nWHERE orders.price > 1000;", "label": 1}
{"text": "def list_to_dict(list_of_tuples):\n    return dict(list_of_tuples)", "label": 1}
{"text": "def alphabetical_sort(lst):\n    sorted_list = sorted(lst, key=lambda x: x.lower())\n    return sorted_list", "label": 1}
{"text": "def pow_n_m(n, m):\n    result = 1\n    for i in range(1, m+1):\n        result *= n\n    return result\n  \n# example  \nn = 3 \nm = 7\nprint(pow_n_m(n, m))", "label": 1}
{"text": "def capitalize_sentences(text): \n   sent_list = text.split(\".\")\n   cap_sent_list = [sentence.capitalize() for sentence in sent_list]\n   output = '.'.join(cap_sent_list)\n   return output", "label": 1}
{"text": "([\\w.-]+)@([\\w.-]+)", "label": 1}
{"text": "To be an AI engineer, at a minimum, a person must have a bachelor\u2019s degree in computer science, mathematics, or a related field. It is also beneficial for a person to have an understanding of artificial intelligence and machine learning principles, and to be familiar with programming languages, such as Python and C++. In addition, a working knowledge of data structures and algorithms, and experience with debugging and software development are important. Experience and/or certification in data engineering frameworks, such as TensorFlow or PyTorch, are also recommended.", "label": 1}
{"text": "import json\n\ndata = [\n    {\n        \"id\": \"12345\",\n        \"model\": \"Honda\",\n        \"year\": 2021\n    }\n]\n\ndata[0][\"color\"] = \"red\"\n\njson_object = json.dumps(data, indent = 4)\nprint(json_object)\n\nOutput: \n[\n    {\n        \"id\": \"12345\",\n        \"model\": \"Honda\",\n        \"year\": 2021,\n        \"color\": \"red\"\n    }\n]", "label": 1}
{"text": "function getValues(objList, key) {\n  let results = [];\n  objList.forEach(function(obj) {\n    if (obj.hasOwnProperty(key)) {\n      results.push(obj[key]);\n    }\n  });\n  return results;\n}\n\nlet ages = getValues(objList, 'age');\nconsole.log(ages);\n\nOutput:\n[25, 28, 31]", "label": 1}
{"text": "Memory leaks in Java can be prevented by following certain coding practices. Firstly, it is important to ensure proper object references are maintained, so that objects are not unintentionally retained in memory for long periods of time. Secondly, it is important to be mindful of resource usage, such as closing input/output streams or releasing database connections when they are no longer required. Finally, it is important to periodically check for memory usage by using the JVM's built-in Memory Monitor and then tweaking code as necessary to ensure all unused resources are released.", "label": 1}
{"text": "SELECT firstname, lastname FROM customers WHERE orderid = 30;", "label": 1}
{"text": "echo \"five\";", "label": 1}
{"text": "<form action=\"\" method=\"post\">\n  <label>Username:</label>\n  <input type=\"text\" name=\"username\">\n  <label>Password:</label>\n  <input type=\"password\" name=\"password\">\n  <label>Confirm Password:</label>\n  <input type=\"password\" name=\"confirm_password\">\n  <input type=\"submit\" value=\"Submit\">\n</form>", "label": 1}
{"text": "let x = 0;\nlet y = 1;\n\nfor (let i = 0; i < 5; i++) {\n let z = x + y;\n console.log(z);\n x = y;\n y = z;\n}", "label": 1}
{"text": "/\\d+/", "label": 1}
{"text": "SELECT *\nFROM Customers\nWHERE status = 'active';", "label": 1}
{"text": "SELECT * \nFROM Customers\nWHERE processing_time > 5;", "label": 1}
{"text": "[[0.7071, -0.7071, 0.0],\n [0.7071, 0.7071, 0.0],\n [0.0, 0.0, 1.0]]", "label": 1}
{"text": "import json\n\njson_object = {\n    'name': 'John',\n    'age': 20,\n    'location': 'New York'\n}\n\ndata = json.loads(json_object)\n\nfor key, value in data.items():\n    print(key + \": \" + str(value))", "label": 1}
{"text": "def prime_numbers(n):\n    prime_nums = []\n    for num in range(2, n + 1):\n        if num > 1:\n            for i in range(2, num): \n                if (num % i) == 0: \n                    break\n            else:\n                prime_nums.append(num)\n    return prime_nums", "label": 1}
{"text": "def find_unique(string): \n    uniq_char = [] \n    for i in string: \n        if i not in uniq_char: \n            uniq_char.append(i) \n    return uniq_char \n\nprint(find_unique(\"Geeksforgeeks\"))", "label": 1}
{"text": "The fadeIn() function in jQuery is used to gradually increase the opacity of an element from hidden to visible, in a specified duration. The function works by adjusting the CSS property for opacity for the element, from 0 to 1, over a specified duration of time.", "label": 1}
{"text": "let fib = [0, 1];\nwhile (fib.length < 10) {\n  fib.push(fib[fib.length - 1] + fib[fib.length - 2]);\n}\nconsole.log(fib);  // [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]", "label": 1}
{"text": "int sum(int a, int b) {\n return a + b;\n}\n\nstd::cout << sum(a, b) << std::endl; // 30", "label": 1}
{"text": "SELECT employee_id, first_name, last_name, age \nFROM Employees \nORDER BY age DESC\nLIMIT 10;", "label": 1}
{"text": "CREATE TABLE employees (\n id SERIAL PRIMARY KEY, \n name VARCHAR(50) not null, \n age INTEGER not null, \n address VARCHAR(50)\n);", "label": 1}
{"text": "String str = \"Good morning!\";", "label": 1}
{"text": "int arr[10];", "label": 1}
{"text": "for element in my_list: \n    print(element)", "label": 1}
{"text": "<html> \n  <head>\n    <title>Text Capturing</title>\n  </head>\n \n  <script>\n    function captureText() {\n      var text = document.getElementById(\"inputBox\").value; \n      alert(\"Entered text: \" + text);\n    }\n  </script>\n\n  <body>\n    <h1> Text Capturing </h1>\n    <input type=\"text\" id=\"inputBox\" />\n    <button onclick=\"captureText()\">Capture Text</button> \n  </body>\n</html>", "label": 1}
{"text": "public class LinkedList {\n    private Node head; // head of the list \n    // linked list Node. \n    // This inner class is made static \n    // so that main() can access it \n    static class Node { \n        int data; \n        Node next; \n        // Constructor \n        Node(int d) \n        { \n            data = d; \n            next = null; \n        } \n    } \n  \n    public void append(int new_data) \n    { \n        // allocate new Node \n        Node new_node = new Node(new_data); \n        // if the Linked List is empty, \n        // then make the new Node as head \n        if (head == null) { \n            head = new Node(new_data); \n            return; \n        } \n  \n        // This new Node is going to be the last node, so make next of \n        // it as null \n        new_node.next = null; \n        // Else traverse till the last Node \n        Node last = head; \n        while (last.next != null) \n            last = last.next; \n        // Change the next of last Node \n        last.next = new_node; \n        return; \n    }\n}", "label": 1}
{"text": "// C++ implementation of the linear search\n#include <iostream> \nusing namespace std; \n  \n// A iterative linear search function to search 'x' in arr[] \n// of size 'n' \nint search(int arr[], int n, int x) \n{ \n    int i; \n    for (i = 0; i < n; i++) \n        if (arr[i] == x) \n            return i; \n    return -1; \n} \n  \nint main() \n{ \n    int arr[] = { 2, 3, 4, 10, 40 }; \n    int x = 10; \n    int n = sizeof(arr) / sizeof(arr[0]); \n    int result = search(arr, n, x); \n    (result == -1) ? cout<<\"Number not found\" \n               : cout<<\"Number found at index \"<<result; \n    return 0; \n}", "label": 1}
{"text": "function findMax(num1, num2) {\n return Math.max(num1, num2); \n}", "label": 1}
{"text": "def fahrenheit_to_celsius(temp): \n    return (temp - 32) * 5/9;  \n  \n# Driver code \ntemperature = float(input(\"The temperature in Fahrenheit: \")) \nprint(\"Temperature in Celsius: {}\".format( fahrenheit_to_celsius(temperature)))", "label": 1}
{"text": "public class Program\n{\n    public static int SearchElement(int[] arr, int value)\n    {\n        for (int i=0; i<arr.Length; i++)\n        {\n            if (arr[i] == value)\n                return i;\n        }\n        return -1;\n    }\n\n    public static void Main()\n    {\n        int[] myArray = { 1, 2, 3, 5, 7, 10, 15 };\n        int element = 5;\n\n        int index = SearchElement(myArray, element);\n\n        if (index == -1)\n            Console.WriteLine(\"Element not found\");\n        else\n            Console.WriteLine(\"Element found at position: \" + (index+1));\n    }\n}", "label": 1}
{"text": "public static int maxSubArraySum(int a[]) \n{ \n    int size = a.length; \n    int maxSoFar = Integer.MIN_VALUE, maxEndingHere = 0; \n  \n    for (int i = 0; i < size; i++) \n    { \n        maxEndingHere = maxEndingHere + a[i]; \n        if (maxSoFar < maxEndingHere) \n            maxSoFar = maxEndingHere; \n        if (maxEndingHere < 0) \n            maxEndingHere = 0; \n    } \n    return maxSoFar; \n}", "label": 1}
{"text": "def fibonacci(n):\n    if n == 0:\n        return 0 \n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)", "label": 1}
{"text": "def find_first_non_repeating(string):\n    seen = {}\n    for char in string:\n        if char in seen:\n            seen[char] +=1 \n        else:\n            seen[char] = 1\n    return [char for char in string if seen[char] == 1][0]", "label": 1}
{"text": "def contains_palindrome(words):\n    for word in words:\n        if word == word[::-1]:\n            return True\n    return False", "label": 1}
{"text": "Julia's dynamic programming technique uses memoization, which is a method of storing and reusing the result of previous computations. Bottom-up dynamic programming is a type of dynamic programming that begins with the solution to small problem instances and gradually builds up towards larger problem instances. Julia's dynamic programming approach does not necessarily build up from solution to small problem to larger problems and therefore may provide a more efficient solution for certain problems.", "label": 1}
{"text": "for i in range(11):\n    print(i)", "label": 1}
{"text": "public static int[] mergeArrays(int[] arr1, int[] arr2) {\n    int[] result = new int[arr1.length + arr2.length];\n    int i = 0, j = 0, k = 0;\n  \n    while (i < arr1.length && j < arr2.length)  \n    { \n        if (arr1[i] < arr2[j])  \n            result[k++] = arr1[i++]; \n        else\n            result[k++] = arr2[j++]; \n    } \n  \n    while (i < arr1.length)  \n        result[k++] = arr1[i++]; \n  \n  \n    while (j < arr2.length)  \n        result[k++] = arr2[j++]; \n  \n    return result; \n}", "label": 1}
{"text": "SELECT DISTINCT customer_name FROM orders;", "label": 1}
{"text": "public class SumOfElements { \n    // Function to get sum of all elements. \n    public static int getSum(int[] arr) \n    { \n        int sum = 0; \n        for (int i : arr) \n            sum += i; \n        return sum; \n    } \n  \n    public static void main(String[] args) \n    { \n        int arr[] = { 4, 8, 2, 6, 1 }; \n        int sum = getSum(arr); \n  \n        System.out.println(\"Sum is : \" + sum); \n    } \n}", "label": 1}
{"text": "^[6-9][0-9]{9}$", "label": 1}
{"text": "\"\"\"\nThe main difference between Python 2 and Python 3 is in how strings are treated. In Python 2, strings are written in byte strings or fully Unicode strings; in Python 3, strings are written in Unicode by default. Other differences include the import statement, integer division, integer in range function, function print, raising and catching exceptions, binary revisers, and many more.\n\"\"\"", "label": 1}
{"text": "\"\"\"\nSome of the most commonly used libraries in data science are NumPy, pandas, Matplotlib, Scikit-Learn, TensorFlow, Theano, Seaborn, Keras, NLTK, Apache Spark, and Bokeh. These libraries are used for a variety of tasks such as data manipulation, machine learning, visualization, natural language processing, and big data analysis.\n\"\"\"", "label": 1}
{"text": "import random\nrandom_string = ''.join(random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZ') for _ in range(10))", "label": 1}
{"text": "<li class=\"highlight\">Hello</li>", "label": 1}
{"text": "h1 {\n  color: #FF0000;\n}", "label": 1}
{"text": "<input type=\"checkbox\" name=\"yes\" value=\"Yes\">Yes\n<input type=\"checkbox\" name=\"no\" value=\"No\">No", "label": 1}
{"text": "The regular expression pattern that identifies 3 consecutive numbers is: \\d{3}", "label": 1}
{"text": "def multiply(x,y)  { \n    return x*y \n  \nx = 5\ny = 4\nprint(multiply(x,y))", "label": 1}
{"text": "public void btnClick_Click(object sender, System.EventArgs e)  \n{\n    System.Console.WriteLine(\"Button clicked!\");\n}", "label": 1}
{"text": "SELECT id, name, date \nFROM Events \nORDER BY date DESC;", "label": 1}
{"text": "def next_mult_of_7(num):\n    return num + (7 - num%7)", "label": 1}
{"text": "def print_dict_key_value(dic):\n    for key, value in dic.items():\n        print(f\"{key}: {value}\")", "label": 1}
{"text": "Welcome to My Program! \n\nPlease select from the following menu:\n\n1. Run Program\n2. Edit Settings\n3. View Logs\n4. Quit Program\n\nPlease enter the number of your choice:", "label": 1}
{"text": "def array_int_string(arr):\n    \"\"\"Converts an array of integers into strings.\"\"\"\n    return [str(num) for num in arr]\n\narray_int_string(arr)  # returns [\"1\", \"2\", \"3\"]", "label": 1}
{"text": "import tkinter as tk\n\nroot = tk.Tk()\n\n# design the window\nroot.title(\"Calculator\")\nroot.geometry(\"200x250\")\n\n# create the buttons\nbutton1 = tk.Button(root, text=\"1\", width=5, height=2)\nbutton1.grid(row=0, column=0, padx=4, pady=4)\n\nbutton2 = tk.Button(root, text=\"2\", width=5, height=2)\nbutton2.grid(row=0, column=1, padx=4, pady=4)\n\nbutton3 = tk.Button(root, text=\"3\", width=5, height=2)\nbutton3.grid(row=0, column=2, padx=4, pady=4)\n\n# create more buttons\n# and so on\n\nroot.mainloop()", "label": 1}
{"text": "def max_elements(matrix):\n    max_elements = []\n    for row in matrix:\n        max_elements.append(max(row))\n    return max_elements", "label": 1}
{"text": "You can remove all blank spaces from a given string in Python using the replace() function. This function takes two arguments, the first is the substring to be replaced and the second is the substring to be inserted in its place. In this case, you can use an empty string as the second argument to remove any instance of the white space from the string. \n\nFor example:\n\nstring_with_spaces = \"   Hello  World  \" \nno_spaces = string_with_spaces.replace(\" \", \"\") \nprint(no_spaces)  # Output: \"HelloWorld\"", "label": 1}
{"text": "SELECT * FROM user_data WHERE age >= 20;", "label": 1}
{"text": "def merge(l1, l2):\n    l3 = l1 + l2\n    return l3", "label": 1}
{"text": "d = { \n    \"one\" : 1, \n    \"two\" : 2, \n    \"three\" : 3\n}", "label": 1}
{"text": "h2 {\n color: blue;\n}", "label": 1}
{"text": "The quick brown fox jumps over the lazy dog.\n\nAnswer: The,quick, brown, and over.", "label": 1}
{"text": "average <- function(numbers) {\n  sum <- 0\n  for (i in numbers) {\n    sum <- sum + i\n  }\n  return(sum/length(numbers))\n}", "label": 1}
{"text": "# Create a new set to store the missing numbers\nmissing_numbers = set(list1).difference(set(list2)) \n  \n# Print the missing numbers\nprint(\"Missing numbers:\", *missing_numbers)", "label": 1}
{"text": "class Animal:\n    def __init__(self):\n        pass\n    \n    def is_mammal(self):\n        \"\"\"Return True if animal is a mammal, False otherwise\"\"\"\n        pass\n\n    def is_reptile(self):\n        \"\"\"Return True if animal is a reptile, False otherwise\"\"\"\n        pass\n    \n    def is_amphibian(self):\n        \"\"\"Return True if animal is an amphibian, False otherwise\"\"\"\n        pass\n\n    def is_bird(self):\n        \"\"\"Return True if animal is a bird, False otherwise\"\"\"\n        pass", "label": 1}
{"text": "Java is a compiled language while JavaScript is interpreted. Java is a class-based language while JavaScript is a prototype-based language. Java is statically typed while JavaScript is dynamically typed. Java supports method overloading while JavaScript does not.", "label": 1}
{"text": "public class Fibonacci {\n\n    public static void printFibonacci(int n) {\n        int n1 = 0, n2 = 1;\n        for (int i = 0; i < n; i++) {\n            System.out.print(n1 + \" \");\n            int sum = n1 + n2;\n            n1 = n2;\n            n2 = sum;\n        }\n    }\n}", "label": 1}
{"text": "for number in range(1, 11):\n print(number)", "label": 1}
{"text": "def insert_item(lst, index, item):\n  lst.insert(index, item)\n  return lst", "label": 1}
{"text": "import copy\n\ndef clone_dict(dict):\n    return copy.deepcopy(dict)", "label": 1}
{"text": "import bs4 \n\nhtml = \"<html><h1>Heading 1</h1><h2>Heading 2</h2><h2>Heading 3</h2></html>\" \n\nsoup = bs4.BeautifulSoup(html, 'html.parser') \n\nh2_list = soup.find_all('h2')\nprint(h2_list)", "label": 1}
{"text": "sum_value = sum(2, 6)", "label": 1}
{"text": "import numpy as np", "label": 1}
{"text": "let num1 = 5;\nlet num2 = 10;\nlet num3 = 3;\n\nlet maxNum = Math.max(num1, num2, num3);\n\nconsole.log(\"The maximum number of the three numbers given is \" + maxNum);", "label": 1}
{"text": "import random\nimport string\n\ndef get_random_string(stringLength=10):\n    letters = string.ascii_lowercase\n    return ''.join(random.choice(letters) for i in range(stringLength))\n\nrandomString = get_random_string()\nprint(randomString) # outputs a random string of length 10", "label": 1}
{"text": "class MyDict(dict):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n\n    def __getitem__(self, key): \n        if key in self:\n            return super().__getitem__(key)\n        else: \n            return None", "label": 1}
{"text": "import numpy as np\n\n# Create a matrix with 5 rows and 7 columns\nmatrix = np.random.rand(5,7)", "label": 1}
{"text": "def sum_of_multiples(num): \n    sum = 0 \n    for i in range(num):\n            if i % 3 == 0: \n                sum += i\n            elif i % 5 == 0: \n                sum += i\n    return sum\n\n# Driver code \nsum = sum_of_multiples(15)\nprint(\"Sum of multiples of 3 and 5 =\",sum)", "label": 1}
{"text": "dlroW olleH", "label": 1}
{"text": "function generateDates(startdate, enddate) {\n    const dates=[],\n          start=new Date(startdate),\n          end=new Date(enddate);\n\n    while (start <= end) {\n        const newdate = new Date(start);\n        const formatteddate = `${newdate.getDate()}/${newdate.getMonth()+1}/${newdate.getFullYear()}`;\n        if(!dates.includes(formatteddate)) dates.push(formatteddate)\n        start.setDate(start.getDate() + 1);\n    }\n\n    return dates;\n}", "label": 1}
{"text": "The most common integer in a list can be found using the collections.Counter module. The Counter class creates a dictionary with the elements in the list as keys and the number of occurrences as values. The most_common() method can then be used to find the element with the highest number of occurrences.", "label": 1}
{"text": "function jsonToQueryString(jsonObject) {\n    let queryString = '';\n    for(let key in jsonObject) {\n        queryString += key + '=' + jsonObject[key] + '&';\n    }\n    return queryString.substring(0, queryString.length-1);\n}\n\nconsole.log(jsonToQueryString(obj)); // prints \"name=John&age=25&job=developer\"", "label": 1}
{"text": "#Title {\n    border: 1px solid black;\n}", "label": 1}
{"text": ".MODEL SMALL \n.DATA \n        N DB ? \n        I DB ? \n        S DB ? \n.CODE \n    MOV AX,@DATA\n    MOV DS,AX\n    MOV DX,N\n    MOV AL,2\n    MUL DX\n    SUB AL,1\n    MOV N,AL\n    MOV I,N\n    MOV S,0\nAGAIN:\n    MOV AX,S\n    ADD AX,I\n    MOV S,AX\n    DEC I\n    CMP I,0\n    JNZ AGAIN\n    MOV DX,S\n    MOV AH,4CH\n    INT 21H \nEND", "label": 1}
{"text": "def list_primes(start, end):\n    prime_list = [2]\n    for num in range(start, end + 1):\n        if all(num % i != 0 for i in range(2, num)):\n            prime_list.append(num)\n\n    return prime_list", "label": 1}
{"text": "Using functions in programming is important for a few reasons. Functions can be used to divide a program into smaller, more manageable pieces, making it easier to read, debug, and maintain code. Additionally, functions can be reused across multiple programs by creating libraries that can be imported, saving time and effort. The use of functions also promotes code modularity and re-usability, allowing developers to write code once and use or modify it for different applications. Finally, functions can help to improve the overall performance of code by optimizing execution time because process and code only needs to be run once per function call.", "label": 1}
{"text": "SELECT COUNT(*) from people WHERE age < 25;", "label": 1}
{"text": "def find_median(arr):\n    arr.sort()\n    if len(arr) % 2 == 0: \n        median = (arr[(len(arr)//2)-1] + arr[len(arr)//2])/2 \n    else: \n        median = arr[len(arr)//2] \n    return median\n\nmedian = find_median([3,7,2,1,9])\nprint(median) # Prints 3.5", "label": 1}
{"text": "class HashTable:\n    def __init__(self, size):\n        self.size = size\n        self.table = [None] * size\n\n    def insert(self, key, value):\n        hash_value = hash(key)\n        index = hash_value%self.size\n        if self.table[index] == None:\n            self.table[index] = [key, value]\n        else:\n            self.table[index].append([key,value])\n\n    # Other methods go here\n\n# Create a hashtable\nht = HashTable(8)\n\n# Insert elements\nht.insert('apple', 5)\nht.insert('banana', 8)\nht.insert('strawberry', 11)\nht.insert('kiwi', 2)\nht.insert('mango', 6)", "label": 1}
{"text": "def reverseString(str):\n    reversed_str = \"\"\n    for i in range(len(str)-1, -1, -1):\n        reversed_str += str[i]\n    return reversed_str\n\nprint(reverseString(\"Hello World\"))", "label": 1}
{"text": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$", "label": 1}
{"text": "SELECT * FROM students WHERE GPA > 3.0;", "label": 1}
{"text": "A basic algorithm you can practice on FreeCodeCamp is Bubble Sort. Bubble Sort is an algorithm that sorts an array of elements by repeatedly swapping matched pairs of elements if they appear in the wrong order. It continues until no further swaps are needed, at which point the array is considered sorted.", "label": 1}
{"text": "for x in range(1, 11):\n  print(x)", "label": 1}
{"text": "#!/bin/bash\n\n# Restart network interfaces\nsudo ifconfig wlan0 down\nsudo ifconfig wlan0 up\nsudo ifconfig eth0 down\nsudo ifconfig eth0 up", "label": 1}
{"text": "SELECT Name \nFROM Employees \nWHERE Salary > 50000;", "label": 1}
{"text": "import React from 'react';\nimport { Button } from 'react-native';\n\nconst SubmitButton = ({ text }) => {\n return (\n  <Button\n   title={text}\n  />\n );\n}\nexport default SubmitButton;", "label": 1}
{"text": "let date = new Date();\nlet current_datetime = date.getDate() + \"/\"\n                    + (date.getMonth()+1)  + \"/\" \n                    + date.getFullYear() + \" @ \"  \n                    + date.getHours() + \":\"  \n                    + date.getMinutes() + \":\" \n                    + date.getSeconds();", "label": 1}
{"text": "<html>\n  <head>\n    <title>Table Example</title>\n  </head>\n  <body>\n    <table>\n      <tr>\n        <th>Column 1</th>\n        <th>Column 2</th>\n        <th>Column 3</th>\n      </tr>\n      <tr>\n        <td>Row 1, Column 1</td>\n        <td>Row 1, Column 2</td>\n        <td>Row 1, Column 3</td>\n      </tr>\n      <tr>\n        <td>Row 2, Column 1</td>\n        <td>Row 2, Column 2</td>\n        <td>Row 2, Column 3</td>\n      </tr>\n     </table>\n  </body>\n</html>", "label": 1}
{"text": "def add_two_nums(a, b):\n    return a + b", "label": 1}
{"text": "for x in my_list:\n    if x > 10:\n        print(\"{0} is greater than 10\".format(x))", "label": 1}
{"text": "def max_min(my_list):\n    max_val = my_list[0]\n    min_val = my_list[0]\n\n    for val in my_list:\n        if val > max_val:\n            max_val = val\n        \n        if val < min_val:\n            min_val = val\n    \n    return (max_val, min_val)", "label": 1}
{"text": "def fibonacci(n): \n  # base case \n  if n <= 1: \n    return n \n  # recursive case \n  else:\n    return(fibonacci(n-1) + fibonacci(n-2))", "label": 1}
{"text": "import pandas as pd\n\n# Read in the data\ndf = pd.DataFrame({'name': ['John', 'Mark', 'Isabelle'], \n                   'age': [25, 45, 75]})\n\n# Add a new column \"age_group\"\ndef categorize_age(age):\n    if age < 18:\n        return \"young\"\n    elif 18 <= age < 65:\n        return \"adult\"\n    else:\n        return \"elderly\"\n\ndf['age_group'] = df['age'].apply(categorize_age)", "label": 1}
{"text": "# Generate a list containing the squares of the first ten odd numbers\nlist_of_squares = [x**2 for x in range(1, 21, 2)]\n\nprint(list_of_squares) # prints [1, 9, 25, 49, 81, 121, 169, 225, 289, 361]", "label": 1}
{"text": "def get_prime_numbers(start, end):\n    \"\"\"\n    Function to return a list of all the prime numbers between start and end\n    \"\"\"\n    prime_numbers = []\n    for num in range(start, end + 1):\n        if num > 1:\n            is_prime = True\n            for j in range(2, int(num/2) + 1):\n                if num % j == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                prime_numbers.append(num)\n    return prime_numbers\n    \nprint(get_prime_numbers(2, 10)) # prints [2, 3, 5, 7]", "label": 1}
{"text": "for i in range(10):\n    print('hello')", "label": 1}
{"text": "let obj = {\n key1: 'value1',\n key2: 'value2',\n key3: 'value3',\n key4: 'value4',\n key5: 'value5'\n};", "label": 1}
{"text": "let jsonString = '{\"name\": \"John Doe\", \"age\": 30, \"city\": \"New York\"}';\nlet parsedJSON = JSON.parse(jsonString);\nlet array = Object.values(parsedJSON); // ['John Doe', 30, 'New York']", "label": 1}
{"text": "In C#, a loop of 3 elements can be created using a for loop. The general syntax is as follows: \n \nfor (int i = 0; i < 3; i++) {\n    // Code to execute\n}", "label": 1}
{"text": "def delete_element(arr, element):\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] == element:\n            while count < len(arr)-1:\n                arr[i] = arr[i+1]\n                i+=1\n            count+=1\n    arr.pop()\n    return arr", "label": 1}
{"text": "SELECT customer_id, count(*) FROM orders GROUP BY customer_id;", "label": 1}
{"text": "The range of the output variable is [-2, \u221e).", "label": 1}
{"text": "The tag names are title and body.", "label": 1}
{"text": "The sum of the first 5 elements in the given array is 30.", "label": 1}
{"text": "Constructor chaining is a feature in Java that enables a class to call one or more other constructors of the same class in the same order as they appear in the class. This enables code reuse and helps to write a concise and robust constructor.", "label": 1}
{"text": "# Node class to define a node of a BST \nclass Node(object): \n  \n    # Constructor \n    def __init__(self, data): \n        self.data = data \n        self.left = None\n        self.right = None\n  \n# Function to delete a given node from BST \ndef delete_node(root, key): \n  \n    # base case \n    if root is None: \n        return None\n  \n    # If the key to be delete is smaller than the root's \n    # key then it lies in left subtree \n    if key < root.data: \n        root.left = delete_node(root.left, key) \n  \n    # If the kye to be delete is greater than the root's key \n    # then it lies in right subtree \n    elif(key > root.data): \n        root.right = delete_node(root.right, key) \n  \n    # if key is same as root's key, then this is the node \n    # to be deleted \n    else: \n        # Node with only one child or no child \n        if root.left is None : \n            temp = root.right \n            root = None\n            return temp \n              \n        elif root.right is None : \n            temp = root.left \n            root = None\n            return temp \n  \n        # Node with two children: Get the inorder successor \n        # (smallest in the right subtree) \n        temp = find_min(root.right) \n  \n        # Copy the inorder successor's content to this node \n        root.data = temp.data \n  \n        # Delete the inorder successor \n        root.right = delete_node(root.right , temp.data) \n  \n  \n    return root \n  \n\"\"\" Helper Functions \"\"\"\n  \n# Function to find the minimum node \ndef find_min(node): \n    current = node \n  \n    # loop down to find the leftmost leaf \n    while(current.left is not None): \n        current = current.left  \n  \n    return current", "label": 1}
{"text": "try:\n  input_num = int(input(\"Enter a number: \"))\nexcept ValueError:\n  print(\"Please enter a valid number\")", "label": 1}
{"text": "ABCXYZ, ABCXZY, ABYXZC, ABYZXC, ACBXYZ, ACBXZY, ACYXZB, ACYZXB, AXBZYC, AXBYCZ, AXYBCZ, AXYZBC, XABCYZ, XABCZY, XAYBZC, XAYCZB, XBACYZ, XBACZY, XBYACZ, XBYZAC, XYABCZ, XYAZBC.", "label": 1}
{"text": "SELECT * FROM table_name WHERE email LIKE '%@%';", "label": 1}
{"text": "function equalNumberOfPAndTCharacters(str){\n    let countP = 0;\n    let countT = 0;\n    \n    for (let i = 0; i < str.length; i++) {\n        if (str.charAt(i) == 'P') {\n            countP++;\n        } else if (str.charAt(i) == 'T') {\n            countT++;\n        }\n    }\n\n    if(countP == countT){\n        return true;\n    } else {\n        return false;\n    }\n}\n\n//testing\nconsole.log(equalNumberOfPAndTCharacters(\"PPTTPT\")); //true", "label": 1}
{"text": "//using 'split()' method\nString[] words = sentence.split(\"\\\\s+\");  //split with regular expression\nint count = 0;\nfor(String word: words){\n    count += word.length();\n}\nSystem.out.println(\"The number of characters in the sentence is : \"+count);\n\n//using 'replaceAll()' method\nint count = sentence.replaceAll(\" \", \"\").length();\nSystem.out.println(\"The number of characters in the sentence is : \"+count);", "label": 1}
{"text": "testString = \"Hello world!\"\nprint(testString[index])\n# Output will be: w", "label": 1}
{"text": "def row_sum(arr): \n    row_sum = [] \n    for row in arr:\n        sum = 0 \n        for ele in row: \n            sum += ele \n        row_sum.append(sum) \n    return row_sum", "label": 1}
{"text": "class Customer:\n    def __init__(self, name, address, phone):\n        self.name = name\n        self.address = address\n        self.phone = phone", "label": 1}
{"text": "model = sklearn.linear_model.LinearRegression()\nmodel.fit(data[['crime_rate', 'school_quality]], data['house_price'])", "label": 1}
{"text": "import nltk\nfrom nltk.corpus import wordnet\nsentence1 = \"This has been an exciting journey\"\ns1 = nltk.word_tokenize(sentence1) \nsentence2 = \"It's been a thrilling ride\"\ns2 = nltk.word_tokenize(sentence2) \n\n# First we convert the words into their respective synonyms\nsyn1 = []\nfor word in s1:\n    for syn in wordnet.synsets(word): \n        for l in syn.lemmas(): \n            syn1.append(l.name())\n\nsyn2 = []\nfor word in s2:\n    for syn in wordnet.synsets(word): \n        for l in syn.lemmas(): \n            syn2.append(l.name())\n\n# Calculating similarity using Path_Similarity \nsimilarity = []\nfor word1 in syn1:\n    for word2 in syn2:\n        p_sim = wordnet.path_similarity(wordnet.synset(word1),wordnet.synset(word2))\n        similarity.append(p_sim)\n       \n# Calculate the average of all similarity scores\nresult = sum(similarity)/len(similarity)\n\n# Output\n0.6521739130434783", "label": 1}
{"text": "String s1 = \"Update\";\nString s2 = s1.replace('u','v');", "label": 1}
{"text": "import numpy as np\narr = np.random.rand(3, 3)\nprint(arr)\n\n# Output\n[[0.78000621 0.36251339 0.91162219]\n [0.52734163 0.56699849 0.03191476]\n [0.81245571 0.21147751 0.72691151]]", "label": 1}
{"text": "The sum of a list of numbers in Python can be calculated using the built-in sum() function. This function takes an iterable object (such as a list or tuple) containing numbers as its argument and returns the sum of all the elements in the object. For example, sum([1,2,3]) will return 6.", "label": 1}
{"text": "SELECT MAX(Salary) FROM Employee;", "label": 1}
{"text": "SELECT * FROM Customers LIMIT 3;", "label": 1}
{"text": "\"\"\"\nGet the top 10 trending topics on Twitter with their volume using the Twitter API\n\"\"\"\n\nimport tweepy\n\n#Authenticate to Twitter\nauth = tweepy.OAuthHandler(\"CONSUMER_KEY\", \"CONSUMER_SECRET\")\nauth.set_access_token(\"ACCESS_KEY\", \"ACCESS_SECRET\")\n\n#Create API Object\napi = tweepy.API(auth)\n\n#Get top 10 trending topics\ntrends = api.trends_place(23424975) # 23424975 is the WOEID code for the US\n\n#Print the top 10 trending topics\nfor trend in trends[0][\"trends\"][:10]:\n    print(trend[\"name\"] + \" (Volume: \" + str(trend[\"tweet_volume\"]) + \")\")", "label": 1}
{"text": "<?php \n  \n// Function to find the length of the longest common substring \nfunction lcsLength($str1, $str2) \n{ \n    // store the lengths of strings    \n    $len1 = strlen($str1);     \n    $len2 = strlen($str2);    \n    \n    // Declare empty 2D array of size  \n    // (length of str1 x length of str2)    \n    $dp = [];     \n    $max = 0;     \n  \n    // initialize all elements of dp[][] = 0    \n    for ($i = 0; $i <= $len1; $i++) \n    { \n        for ($j = 0; $j <= $len2; $j++) \n        { \n            $dp[$i][$j] = 0; \n        } \n    }     \n  \n    //LCS procedure   \n    for ($i = 0; $i <= $len1; $i++) \n    { \n        for ($j = 0; $j <= $len2; $j++) \n        { \n            // if character of str1 and str2  \n            // match and indices are not same    \n            if ($i > 0 &&  \n                $j > 0 &&  \n                $str1[$i - 1] == $str2[$j - 1])   \n            { \n                // reduce length by 1    \n                $dp[$i][$j] = $dp[$i - 1][$j - 1] + 1; \n                  \n                // update the maximum length  \n                $max = max($max, $dp[$i][$j]); \n            } \n        } \n    } \n  \n    // return the maximum length     \n    return $max; \n} \n  \n// Driver Code \n$str1 = \"abcdxyz\"; \n$str2 = \"xyzabcd\"; \n  \n// Function Call \necho lcsLength($str1, $str2); \n  \n?>", "label": 1}
{"text": "import langdetect\n\ndef detect_language(s):\n    \"\"\"\n    Detects the dominant language from a given string.\n\n    Parameters\n    ----------\n    s : str\n        A string containing multiple languages\n\n    Returns\n    -------\n    str\n        The dominant language found in the given string\n    \"\"\"\n    return langdetect.detect(s)\n\ntext = \"This is a test string with multiple languages, including French, Spanish, and English.\"\nlang = detect_language(text)\nprint('The dominant language found in the text is:', lang)", "label": 1}
{"text": "vector<int> v(10, 0);", "label": 1}
{"text": "UPDATE TableB  \nSET TableB.age = TableA.age \nFROM TableA \nWHERE TableB.name = TableA.name;", "label": 1}
{"text": "sum = 3750", "label": 1}
{"text": "string.find('keyword') or string.index('keyword')", "label": 1}
{"text": "The line \"for i in range 0, n\" contains a syntax error. The syntax for the for loop should be \"for i in range(0, n)\".", "label": 1}
{"text": "var a = 3;\nvar b = 4;\nvar c = 5;\n\nvar perimeter = a + b + c; // 12", "label": 1}
{"text": "document.addEventListener(\"mousemove\", function(e) {\n   console.log(\"mouse is at x:\" + e.clientX + \" y:\" + e.clientY);\n});", "label": 1}
{"text": "The main difference between a switch statement and an if-else statement in C++ is that the switch statement is used for multiple-branch control of the program, while the if-else statement is used for dual-branch control. The switch statement tests the value of a variable from a given set of matches and branch the program to different parts of the code according to the value of the variable, while the if-else statement tests the condition of the variable and branch the program according to whether the condition is true or false. Another main difference is that a switch statement only allows integer values and characters char, while an if-else statement can take any type of value. Finally, the switch statement allows for the use of break statements to avoid the execution of multiple branches of code.", "label": 1}
{"text": "def odd_numbers_list(input_data):\n    \"\"\"Function to create a list that preserves the order of the original input and contains only the odd numbers from it\"\"\"\n    output_list = [] \n    for el in input_data: \n        if el % 2 != 0:\n            output_list.append(el) \n    return output_list\n\nif __name__ == '__main__':\n    input_data = [1,2,3,4,5,6,7,8,9]\n    output_list = odd_numbers_list(input_data)\n    print(output_list)", "label": 1}
{"text": "def find_median(A, B):\n    \"\"\"Function to find median of two sorted arrays\"\"\"\n    m = len(A)\n    n = len(B)\n    if m > n:\n        A,B,m,n = B,A,n,m\n    imin, imax, half_len = 0, m , (m+n+1) // 2\n    while imin <= imax:\n        i = (imin+imax) // 2\n        j = half_len -i\n        if i < m and B[j-1] > A[i]:\n            # i is too small, must increase it\n            imin = i + 1\n        elif i > 0 and A[i-1] > B[j]:\n            # i is too big, must decrease it\n            imax = i - 1\n        else:\n            # i is perfect\n            if i == 0:\n                max_of_left = B[j-1] \n            elif j == 0:\n                max_of_left = A[i-1] \n            else:\n                max_of_left = max(A[i-1], B[j-1]) \n \n            if (m + n) % 2 == 1:\n                return max_of_left \n \n            if i == m:\n                min_of_right = B[j] \n            elif j == n:\n                min_of_right = A[i] \n            else:\n                min_of_right = min(A[i], B[j]) \n \n            return (max_of_left + min_of_right) / 2.0\n\nif __name__ == '__main__':\n    A = [1,4,6,7]\n    B = [3,5,8,9]\n    median = find_median(A, B)\n    print(median)", "label": 1}
{"text": "# Start of code\ni = 1\nwhile i<=10:\n    print(i)\n    i += 1\n# End of code", "label": 1}
{"text": "The statements that are erroneous or have logical errors are:\n1) There is no colon (:) after the 'if' and 'elif' statements\n2) There is no colon (:) after the 'else' statement.\n3) The parentheses after 'print' are unnecessary.", "label": 1}
{"text": "SELECT * FROM orders WHERE order_num >= 1000;", "label": 1}
{"text": "True", "label": 1}
{"text": "\ud835\udf0e = \u221a((\u2211(x - mean)^2)/n)", "label": 1}
{"text": "Three ways to optimize a database are database normalization, indexing, and partitioning. Database normalization involves restructuring a database schema into multiple tables and establishing referential integrity. Indexing is a technique used to speed up the retrieval of data from a table. Partitioning, also known as sharding, is a database optimization technique that divides a database into multiple, smaller databases.", "label": 1}
{"text": "for x in range(4, 15):\n    print(x)", "label": 1}
{"text": "print(\"HELLO WORLD\".upper())", "label": 1}
{"text": "def absolute_value(x):\n    if x < 0:\n        return -x\n    else:\n        return x", "label": 1}
{"text": "public static int linearSearch(int[] x, int element) \n    {\n        for (int i = 0; i < x.length; i++) { \n            if (x[i] == element) \n                return i; \n        } \n        return -1; \n    }", "label": 1}
{"text": "def softmax(x):\n  \"\"\"Compute softmax values for each sets of scores in x.\"\"\"\n  e_x = np.exp(x - np.max(x))\n  return e_x / e_x.sum(axis=0)", "label": 1}
{"text": "for i in range(0,11):\n\tprint(i)", "label": 1}
{"text": "def get_num_males(data):\n    # create a counter variable\n    num_males = 0\n    # loop through the data\n    for person in data:\n        if person['gender'] == 'male':\n            num_males += 1\n    # return the number of males\n    return num_males", "label": 1}
{"text": "SELECT \n    emp_id,\n    name,\n    department,\n    doj,\n    current_role\nFROM \n    employees\nWHERE \n    DATE_SUB(CURDATE(), INTERVAL 4 YEAR) <= doj;", "label": 1}
{"text": "for num in range(10):\n  if num % 2 == 0:\n    print(num);", "label": 1}
{"text": "function compareDates(date1, date2) {\n    const timeDifference = date1.getTime() - date2.getTime(); \n    if(timeDifference > 0) {\n        // date1 is after date2\n        return 1;\n    } else {\n        // date2 is after date1\n        return 0;\n    }       \n}\n\nif __name__ == '__main__':\n    date1 = new Date('August 19, 2025');\n    date2 = new Date('August 20, 2025');\n    print(compareDates(date1, date2))", "label": 1}
{"text": "HloWrd", "label": 1}
{"text": "84", "label": 1}
{"text": "\"\"\"\nFunction to format a number with two decimal places\n\"\"\"\n\ndef two_decimals(num):\n    \"\"\"\n    Format a number with two decimal places\n    \"\"\"\n    return \"{:.2f}\".format(num)\n\nif __name__ == '__main__':\n    print(two_decimals(23.14159)) # prints 23.14", "label": 1}
{"text": "int variable; \nString variable = \"\";\nboolean variable = false;", "label": 1}
{"text": "var XHR = new XMLHttpRequest();\n\nXHR.onreadystatechange = function () {\n    if (XHR.readyState == 4 && XHR.status == 200) {\n        var data = JSON.parse(XHR.responseText);\n        // Handle the response data here\n    }\n};\n\nXHR.open(\"GET\", url);\nXHR.send();", "label": 1}
{"text": "ul li:nth-child(2n+2) {\n    // Styling\n}", "label": 1}
{"text": "[9, 8, 6, 5, 3, 2]", "label": 1}
{"text": "public class FahrenheitToCelsius { \n  \n    // F to C conversion formula \n    public static double fahrenheitToCelsius(double fahrenheit) { \n        return ((fahrenheit - 32) * 5) / 9; \n    } \n  \n    public static void main(String[] args) { \n        double fahrenheit = 100; \n        double celsius = fahrenheitToCelsius(fahrenheit); \n        System.out.printf(\"%.2f degree Fahrenheit is equal to %.2f degree Celsius\",fahrenheit,celsius); \n    } \n}", "label": 1}
{"text": "import Foundation\n\nfunc isTriangle(sideA: Int, sideB: Int, sideC: Int) -> Bool {\n    let sides = [sideA, sideB, sideC].sorted()\n  \n    return sides[2] < sides[1] + sides[0]\n}\n\n// Usage\nprint(isTriangle(sideA: 3, sideB: 4, sideC: 6) // Output: true\nprint(isTriangle(sideA: 3, sideB: 9, sideC: 10) // Output: false", "label": 1}
{"text": "[A-Za-z0-9]", "label": 1}
{"text": "df -h /mount/point", "label": 1}
{"text": "[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]", "label": 1}
{"text": "json_string = json.dumps(data)", "label": 1}
{"text": "def largest(a, b):\n    \"\"\"Returns the larger number from two numbers provided.\"\"\"\n    if a > b:\n        return a\n    else:\n        return b\n\nnum1 = 4\nnum2 = 5\nprint(largest(num1, num2))", "label": 1}
{"text": "def combinations(n, k):\n    if k == 0 or k > n:\n        return []\n    result = []\n    def dfs(start,n,k):\n        if k == 0:\n            result.append(temp[:])\n            return \n        for i in range(start, n):\n            temp.append(i)\n            dfs(i+1, n, k-1)\n            temp.pop()\n            \n    temp = []\n    dfs(0, n, k)\n    return result", "label": 1}
{"text": "def remove_letter(string, letter):\n    output = \"\"\n    for s in string:\n        if s != letter:\n            output += s\n    return output", "label": 1}
{"text": "The data of the first element in a JSON array can be retrieved using the index \"0\". For example, if the JSON array is [\"apple\", \"banana\", \"cherry\"], then the data of the first element can be retrieved by \"array[0]\". It would return the data \"apple\".", "label": 1}
{"text": "A key-value pair in a dictionary can be looped over using the \"for\" loop with the \"items()\" method. For example, if the dictionary is {'a': 1, 'b': 2, 'c': 3}, it can be looped over as:\n\nfor key, value in dictionary.items():\n  print(key, value)\n\nIt will print the key-value pairs as:\na 1\nb 2\nc 3", "label": 1}
{"text": "['The', 'the', 'that']", "label": 1}
{"text": "The given sentence belongs to the class 'positive sentiment'.", "label": 1}
{"text": "def is_similar(list_1, list_2):\n  if len(list_1) != len(list_2):\n    return False\n  list_1.sort()\n  list_2.sort()\n  for i, j in zip(list_1, list_2):\n    if i != j:\n      return False\n  return True", "label": 1}
{"text": "SELECT name, COUNT(name)\nFROM orders\nGROUP BY name", "label": 1}
{"text": "def cost_calc(products, quantity): \n    total_cost = 0\n    for i, q in zip(products, quantity):\n        cost = i.cost * q \n        total_cost += cost \n    return total_cost", "label": 1}
{"text": "void selectionSort(int arr[], int n)  \n{  \n    int i, j, min_idx;  \n  \n    // One by one move boundary of unsorted subarray  \n    for (i = 0; i < n-1; i++)  \n    {  \n        // Find the minimum element in unsorted array  \n        min_idx = i;  \n        for (j = i+1; j < n; j++)  \n        if (arr[j] < arr[min_idx])  \n            min_idx = j;  \n  \n        // Swap the found minimum element with the first element  \n        swap(&arr[min_idx], &arr[i]);  \n    }  \n}", "label": 1}
{"text": "The maximum sum of a subarray of length 3 is 51 (20 + 5 +26).", "label": 1}
{"text": "def find_path(array, source, dest):\n    path = [source]\n    sx, sy = source\n    while path[-1] != dest:\n        dx, dy = path[-1]\n        if dx > 0 and array[dx - 1][dy] == 0:\n            path.append([dx-1, dy])\n        elif dy > 0 and array[dx][dy-1] == 0:\n            path.append([dx, dy-1])\n        elif dx < len(array)-1 and array[dx + 1][dy] == 0:\n            path.append([dx+1, dy])\n        elif dy < len(array[0])-1 and array[dx][dy+1] == 0:\n            path.append([dx, dy+1])\n    return path", "label": 1}
{"text": "public class LongestString {\n \n    public static String getLongestString(String[] array) {\n    \n        if(array.length == 0) {\n            return null;\n        }\n         \n        String longestString = array[0]; \n         \n        for(int i = 1; i < array.length; i++) {\n            if(array[i].length() > longestString.length()) {\n                longestString = array[i];\n            }\n        }\n         \n        return longestString;\n    }\n    \n    public static void main(String[] args) {\n \n        String[] array = {\"Google\", \"Facebook\", \"Amazon\", \"Zapier\"};\n         \n        String longestString = getLongestString(array);\n         \n        System.out.println(\"Longest string: \"+longestString); \n    }\n}", "label": 1}
{"text": "data = [\"James\", \"John\", \"Susan\", \"Bella\", \"Natalie\", \"Adam\", \"Sam\", \"Eric\"]\n\nfiltered_data = [name for name in data if len(name) > 5]\n\nprint(filtered_data) \n# Output: [\"James\", \"John\", \"Bella\", \"Natalie\", \"Sam\"]", "label": 1}
{"text": "import datetime\n\ndef get_difference_in_seconds(timestamp1, timestamp2):\n    datetime1 = datetime.datetime.strptime(timestamp1, \"%Y-%m-%d %H:%M:%S\")\n    datetime2 = datetime.datetime.strptime(timestamp2, \"%Y-%m-%d %H:%M:%S\")\n    difference = (datetime2 - datetime1).total_seconds()\n    return difference", "label": 1}
{"text": "def generateRange(start:Int, end:Int): List[Int] = {     \n   if (start > end) List(end)\n   else start :: generateRange(start+1, end)\n}", "label": 1}
{"text": "SELECT COUNT(*)\nFROM Employees\nWHERE Department='HR'\nAND Gender='F';", "label": 1}
{"text": "class Student:\n  def __init__(self, name):\n    self.name = name\n  \n  def print_name_upper(self):\n    print(self.name.upper())", "label": 1}
{"text": "movie_dict = {\n  'title' : str,\n  'director' : str,\n  'producer' : str,\n  'writer' : str,\n  'actors' : list,\n  'release_date' : date,\n  'runtime_minutes' : int,\n  'budget' : int,\n  'production_company' : str,\n  'box_office' : int,\n  'genres' : list,\n  'plot' : str,\n  'awards' : list,\n  'language' : str,\n  'country' : str,\n}", "label": 1}
{"text": "import random\nimport string\n\ndef generate_password():\n    characters = string.ascii_letters + string.digits + string.punctuation\n    length = 8\n    password = ''.join(random.choice(characters) for _ in range(length))\n    while not (any(c.isdigit() for c in password) and any(c.isalpha() for c in password)\n           and any(c in string.punctuation for c in password)):\n        password = ''.join(random.choice(characters) for _ in range(length))\n    return password", "label": 1}
{"text": "(1 % <)", "label": 1}
{"text": "Create an AWS Lambda function with associated IAM roles and policies that define the function\u2019s access to related AWS resources. Package your code into a .zip file and upload it to AWS Lambda. Connect the Lambda function to an API Gateway to make your function accessible through an API endpoint.", "label": 1}
{"text": "public class LongestIncreasingSubsequence {\n  \n    public static int longestSubsequence (int[] nums) {\n        // Base case\n        if (nums.length == 0) {\n            return 0;\n        }\n \n        int[] dp = new int[nums.length];\n        dp[0] = 1;\n        int maxLength = 1;\n \n        for (int i=1; i < nums.length; i++) {\n            int temp = 0;\n            for (int j=0; j < i; j++) {\n                if (nums[j] < nums[i]) {\n                    temp = Math.max(dp[j], temp);\n                }\n            }\n \n            dp[i] = temp + 1;\n            maxLength = Math.max(dp[i], maxLength);\n        }\n \n        return maxLength;\n    }\n}", "label": 1}
{"text": "public class Add {\n    public static void main(String[] args) {\n        int x = 3;\n        int y = 4;\n\n        int sum = x + y;\n\n        if (sum > 5) {\n            System.out.println(\"Greater than 5\");\n        } else {\n            System.out.println(\"Less than or equal to 5\");\n        }\n    }\n}", "label": 1}
{"text": "19", "label": 1}
{"text": "class Person():\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age", "label": 1}
{"text": "#!/bin/bash\necho $1\necho $3", "label": 1}
{"text": "let someNumber = 10;", "label": 1}
{"text": "[\"The\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]", "label": 1}
{"text": "void updateArray (int arr[], int n) \n{ \n    for (int i=0; i<n; i++) \n        arr[i] = arr[i] * 2; \n}", "label": 1}
{"text": "import datetime\n\ndef get_current_time():\n    now = datetime.datetime.now()\n    return now.strftime(\"%Y-%m-%d %H:%M:%S\")", "label": 1}
{"text": "class Student {\n  constructor(name, age, lastScore) {\n    this.name = name;\n    this.age = age;\n    this.lastScore = lastScore;\n  }\n}", "label": 1}
{"text": "import numpy as np\nnp.random.seed(0)\n\n# simulate the rolling of two fair six-sided dice\noutcomes = np.random.randint(1,7, size=(2,2))\nprint(outcomes)", "label": 1}
{"text": "array = [[7, 8, 9], \n        [7, 8, 9], \n        [7, 8, 9]]\n\ndef max_columns(array): \n    for col in range(len(array[0])): \n        m = array[0][col] \n        for row in array:\n            if row[col] > m: \n                m = row[col]\n        for row in range(len(array)):\n            array[row][col] = m \n    return array", "label": 1}
{"text": "<?php\n$string = \"Hello World!\";\necho strlen($string);\n?>", "label": 1}
{"text": "let randomNumber = {\n    getNumber: function() {\n        return Math.floor(Math.random() * 10);\n    }\n}\n\nlet myNum = randomNumber.getNumber(); // Possible output: 5", "label": 1}
{"text": "NaOH + H2SO4 \u2192 Na2SO4 + 2H2O.", "label": 1}
{"text": "for (int i = 1; i <= 10; i++) {\n  System.out.print(i + \" \");\n}", "label": 1}
{"text": "class Arithmetic\n  def add(x, y)\n    x + y\n  end  \n  def subtract(x, y)\n    x - y\n  end  \n  def multiply(x, y)\n    x * y\n  end  \n  def divide(x, y)\n    x.to_f / y\n  end\nend", "label": 1}
{"text": "def sort_array(arr):\n    for i in range(len(arr) - 1):\n        min_index = i\n        for j in range(i + 1, len(arr)):\n            if arr[j] < arr[min_index]:\n                min_index = j\n        arr[i], arr[min_index] = arr[min_index], arr[i]  # swap\n    return arr", "label": 1}
{"text": "def find_sum_target(nums, target):\n for i in range(len(nums) - 1):\n for j in range(i+1, len(nums)):\n if nums[i] + nums[j] == target:\n return [nums[i], nums[j]]\n return []", "label": 1}
{"text": "class BinarySearchTree { \n    Node root; \n    \n    /* Class containing left and right child of current node and key value*/\n    class Node { \n        int key; \n        Node left, right; \n  \n        public Node(int item) { \n            key = item; \n            left = right = null; \n        } \n    } \n  \n    // Constructor \n    BinarySearchTree() {  \n        root = null;  \n    } \n  \n    // This method mainly calls insertRec() \n    void insert(int key) { \n       root = insertRec(root, key); \n    } \n      \n    /* A recursive function to insert a new key in BST */\n    Node insertRec(Node root, int key) { \n  \n        /* If the tree is empty, return a new node */\n        if (root == null) { \n            root = new Node(key); \n            return root; \n        } \n  \n        /* Otherwise, recur down the tree */\n        if (key < root.key) \n            root.left = insertRec(root.left, key); \n        else if (key > root.key) \n            root.right = insertRec(root.right, key); \n  \n        /* return the (unchanged) node pointer */\n        return root; \n    } \n    \n    // This method mainly calls InorderRec() \n    void inorder()  { \n       inorderRec(root); \n    } \n  \n    // A utility function to do inorder traversal of BST \n    void inorderRec(Node root) { \n        if (root != null) { \n            inorderRec(root.left); \n            System.out.println(root.key); \n            inorderRec(root.right); \n        } \n    } \n  \n    // Driver Program to test above functions\n    public static void main(String[] args) { \n        BinarySearchTree tree = new BinarySearchTree(); \n  \n        /* Let us create following BST \n              50 \n           /     \\ \n          30      70 \n         /  \\    /  \\ \n        20   40  60   80 */\n        tree.insert(50); \n        tree.insert(30); \n        tree.insert(20); \n        tree.insert(40); \n        tree.insert(70); \n        tree.insert(60); \n        tree.insert(80); \n  \n        // print inorder traversal of the BST \n        tree.inorder(); \n    } \n}", "label": 1}
{"text": "The website should provide the users with an interface to select their star sign from a drop-down list. When the user selects their star sign, the website should display their daily horoscope. To achieve this, the website should connect to a database which contains the daily horoscopes for each of the star signs.", "label": 1}
{"text": "import random\n\ndef shuffle(arr):\n    random.shuffle(arr)\n    return arr\n\nresult = shuffle([1, 2, 3, 4, 5])\nprint(result)", "label": 1}
{"text": "SELECT * \nFROM Table1 \nINNER JOIN Table2 \nON Table1.field2 = Table2.field2", "label": 1}
{"text": "def is_palindrome(string): \n    left = 0\n    right = len(string) - 1\n  \n    while right >= left: \n        if string[left] != string[right]: \n            return False\n        left += 1\n        right -= 1\n    return True", "label": 1}
{"text": "def hcf(x, y): \n  \n    if x > y: \n        smaller = y \n    else: \n        smaller = x \n    \n    for i in range(1, smaller+1): \n        if((x % i == 0) and (y % i == 0)): \n            hcf = i \n            \n    return hcf \n\nx = 24\ny = 48\n\nprint (\"The H.C.F. of 24 and 48 is\", hcf(x, y))", "label": 1}
{"text": "{\n  \"_id\": ObjectId(), \n  \"title\": String,\n  \"author\": String,\n  \"ISBN\": String\n}", "label": 1}
{"text": "The Fibonacci sequence is a sequence of numbers where each number in the sequence is the sum of the two numbers preceding it. The first two numbers in the sequence are 0 and 1. The sequence starts with 0 and 1 and continues by adding the two previous numbers to get the next number in the sequence. For example, the first six numbers in the Fibonacci sequence are 0, 1, 1, 2, 3, 5. The sequence can be represented as 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, and so on.", "label": 1}
{"text": "The network should include a server to send data, and a client to receive data. The server should have a dedicated IP address and listening port to receive instructions from the client, such as HTTP requests. The client should have a unique IP address, and should connect to the server to request data. Both the client and server should have the necessary network infrastructure for data transmission, such as routers, gateways, and firewalls.", "label": 1}
{"text": "SELECT name, id FROM customers WHERE state = 'California';", "label": 1}
{"text": "// Define a polygon class\npublic class Polygon {\n  // An array of Points to represent the vertices of a polygon\n  private Point[] vertices;\n \n  // A constructor that takes an array of Points\n  public Polygon(Point[] vertices) {\n    this.vertices = vertices;\n  }\n \n  // A method that returns the area of the polygon\n  public double getArea() {\n    double area = 0;\n    int j = this.vertices.length - 1;\n    for (int i = 0; i < this.vertices.length; i++) {\n\t\tarea += (this.vertices[j].getX() + this.vertices[i].getX()) \n\t\t\t\t* (this.vertices[j].getY() - this.vertices[i].getY());\n\t\tj = i; \n    }   \n    return Math.abs(area / 2); \n  }\n}", "label": 1}
{"text": "def max_sum_digits(arr, K):\n    max_sum = 0\n    arr.sort()\n    for i in range(K):\n        max_sum += arr[len(arr)-1-i]\n    return max_sum", "label": 1}
{"text": "const request = require('request');\n\nfunction fetchUser(username, password) {\n  const url = `/users/fetch?username=${username}&&password=${password}`;\n  request.get(url, (err, res) => {\n    if (err) {\n      console.log('Failed to fetch user', err);\n      return;\n    }\n    \n    const userData = JSON.parse(res.body);\n    // insert userData into database\n  });\n}", "label": 1}
{"text": "def binary_search(nums, target):\n  low = 0\n  high = len(nums) - 1\n\n  while low <= high:\n    mid = (low + high) // 2\n    if target == nums[mid]:\n      return mid\n    elif target < nums[mid]:\n      high = mid - 1\n    else:\n      low = mid + 1\n  \n  return -1", "label": 1}
{"text": "The probability of the event occurring is 0.1 + 0.2 + 0.3 + 0.4 = 1.0", "label": 1}
{"text": "def longest_common_subsequence(str1, str2):\n  n = len(str1)\n  m = len(str2)\n  \n  dp = [[0] * (m+1) for _ in range(n+1)]\n\n  for i in range(1, n+1):\n    for j in range(1, m+1):\n      if str1[i-1] == str2[j-1]:\n        dp[i][j] = 1 + dp[i-1][j-1]\n      else:\n        dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n  \n  return dp[n][m]", "label": 1}
{"text": "RegExp(\"X\", \"i\")", "label": 1}
{"text": "def merge_lists(lst1, lst2): \n  sorted_list = []\n  i=j=0\n  while (i<len(lst1) and j<len(lst2)):\n    if lst1[i] <= lst2[j]:\n      sorted_list.append(lst1[i])\n      i+=1\n    else:\n      sorted_list.append(lst2[j])\n      j+=1\n\n  sorted_list  += lst1[i:]\n  sorted_list += lst2[j:]\n \n  return sorted_list\n\nlist1 = [3, 5, 7]\nlist2 = [1, 2, 4]\n \nprint(merge_lists(list1, list2))", "label": 1}
{"text": "def is_prime(n):\n    \"\"\"\n    This function will check if a given number is prime or not.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef generate_list_of_primes(n):\n    \"\"\"\n    This function will generate a list of all the prime numbers in the range from 0 to the given number n.\n    \"\"\"\n    primes = []\n    for i in range(2, n + 1):\n        if is_prime(i):\n            primes.append(i)\n    return primes", "label": 1}
{"text": "def normalize_df(df): \n    normalized_df=(df-df.min())/(df.max()-df.min())\n    return normalized_df\n\nnorm_df = normalize_df(df)", "label": 1}
{"text": "function stripHTMLTags(str) {\n  return str.replace(/<[^>]*>/g, \"\");\n}\n\n// Usage\nstripHTMLTags(\"<h1>Hello World</h1>\"); // result: \"Hello World\"", "label": 1}
{"text": "class Calculator\n    def multiply(a, b)\n        return a * b\n    end\n\n    def add(a, b)\n        return a + b\n    end\nend", "label": 1}
{"text": "public static String reverseString(String input){\n    StringBuilder output = new StringBuilder();\n    for (int i = input.length()-1; i >= 0; i--){\n        output.append(input.charAt(i));\n    }\n    return output.toString();\n}\n\nSystem.out.println(reverseString(\"Hello World!\")); // Outputs \"!dlroW olleH\"", "label": 1}
{"text": "SELECT * FROM customers WHERE age > 30;", "label": 1}
{"text": "False. Java and JavaScript are two different programming languages. Java is a statically typed, strong-typing, object-oriented language while JavaScript is an interpreted language and is used mainly in web development.", "label": 1}
{"text": "SELECT * FROM Animals ORDER BY Animals ASC", "label": 1}
{"text": "Pandas DataFrame is a two-dimensional data structure, i.e. data is aligned in a tabular fashion in rows and columns. It is a widely used tool for data manipulation and analysis in Python. It offers a variety of features such as filtering, sorting, adding/removing columns, updating the data, indexing, and many others.", "label": 1}
{"text": "public static int getRandomElement(int[] A) {\nint randomIndex = (int)(Math.random() * A.length); \nreturn A[randomIndex]; \n}", "label": 1}
{"text": "def toUpperCase(string):\n    return string.upper()", "label": 1}
{"text": "h1 {\n    font-size: 16px;\n    color: #00cc33;\n}", "label": 1}
{"text": "<script>\nwindow.onload = function(){\n alert(\"Hello, World!\");\n}\n</script>", "label": 1}
{"text": "i = 1\nwhile i <= 11:\n    print(i)\n    i = i + 1", "label": 1}
{"text": "class Person:\n    def __init__(self,age=10):\n        self.age = age", "label": 1}
{"text": "5", "label": 1}
{"text": "def calc_perc(arr):\n  count = 0\n  for num in arr:\n    if num > 5:\n      count +=1\n  return count/len(arr) *100\n\ncalc_perc([3, 4, 7, 8, 9, 11])", "label": 1}
{"text": "The result is 1000.", "label": 1}
{"text": "This is an isosceles triangle.", "label": 1}
{"text": "SELECT * \nFROM Employees \nWHERE age > 30;", "label": 1}
{"text": "from flask import Flask, request\n\napp = Flask(__name__)\n\nusers = {\"John\": \"123456\", \"Jenny\": \"456789\"}\n\n@app.route('/', methods=['GET'])\ndef root():\n    if request.authorization and request.authorization.username in users \\\n            and request.authorization.password == users[request.authorization.username]:\n        return 'Authentication successful!' \n    else:\n        return 'Authentication failed!'\n        \nif __name__ == '__main__':\n    app.run(debug=True)", "label": 1}
{"text": "def f(x):\n  numbers = []\n  for i in range(1, x + 1):\n    numbers.append(x * i)\n  return numbers", "label": 1}
{"text": "arr = [2, 3, 5, 7]\nresult = [(arr[i],arr[j]) for i in range(len(arr)-1) for j in range(i+1,len(arr))]", "label": 1}
{"text": "num = 10\ni = 0\n\nwhile i < 10:\n    i += 1\n    print(i * num)", "label": 1}
{"text": "def has_duplicates(arr):\n  return len(arr) != len(set(arr))", "label": 1}
{"text": "a = round(0.54678, 2)  # rounds off to 2 decimal places", "label": 1}
{"text": "def square_numbers(nums):\n  return [num**2 for num in nums]", "label": 1}
{"text": "The surface area of a cube with side length of 6 cm is 216 cm2.", "label": 1}
{"text": "INSERT INTO customers (ID, Name, Age) VALUES (123, 'John Doe', 35);", "label": 1}
{"text": "<html>\n <head>\n  <title>Hello World</title>\n </head>\n <body>\n  <h1>Hello World!</h1>\n </body>\n</html>", "label": 1}
{"text": "boolean variable = false;", "label": 1}
{"text": "CREATE TABLE users(\n name VARCHAR(255) NOT NULL,\n email VARCHAR(255) NOT NULL,\n age INT NOT NULL\n);", "label": 1}
{"text": "class Rectangle:\n    def __init__(self, length, width):\n        self.length = length\n        self.width = width\n \n    def area(self):\n        return self.length * self.width", "label": 1}
{"text": "1255908800", "label": 1}
{"text": "myList = list(range(10,51))", "label": 1}
{"text": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)", "label": 1}
{"text": "def bits_in_byte():\n     return 8\n\ntotal_bits = bits_in_byte()\nprint(total_bits) # 8", "label": 1}
{"text": "def slice_string(string, n):\n    return string[n:]\n\ninput_string = 'Python'\nprint(slice_string(input_string, 3)) # hon", "label": 1}
{"text": "<nav>\n  <ul>\n    <li><a href=\"#\">Home</a></li>\n    <li><a href=\"#\">About</a></li>\n    <li><a href=\"#\">Contact</a></li>\n  </ul>\n</nav>", "label": 1}
{"text": "public class Person {\n  private String firstName;\n  private String lastName;\n\n  public Person(String firstName, String lastName) {\n    this.firstName = firstName;\n    this.lastName = lastName;\n  }\n}", "label": 1}
{"text": "def isAnagram(str1, str2): \n\n # convert both strings into lowercase \n str1 = str1.lower()\n str2 = str2.lower()\n  \n # sort both strings \n sortedStr1 = ''.join(sorted(str1)) \n sortedStr2 = ''.join(sorted(str2)) \n  \n # check if sorted strings are equal \n if sortedStr1 == sortedStr2: \n     return True\n else: \n     return False\n\nresult = isAnagram(string1, string2)\nprint(result)", "label": 1}
{"text": "SELECT * FROM Users", "label": 1}
{"text": "Solution:\n\n// Using Kadane's algorithm\nfunction maxSubArraySum(arr) {\n  let max_so_far = 0; \n  let max_ending_here = 0; \n \n  for (let i = 0; i < arr.length; i++) { \n    max_ending_here = max_ending_here + arr[i]; \n    if (max_ending_here < 0) {\n      max_ending_here = 0; \n    }\n    else if (max_so_far < max_ending_here) {\n      max_so_far = max_ending_here; \n    }\n  } \n  return max_so_far; \n}", "label": 1}
{"text": "Java in code to love I \n\npublic class Reverse { \n    \n    static void reverseWords(String str)  \n    {  \n          \n        // Specific marker to identify the strings \n        String[] words = str.split(\"\\\\s\"); \n          \n        String reversedString = \"\"; \n          \n        for (int i = 0; i < words.length; i++)  \n        { \n            String word = words[i]; \n            String reverseWord = \"\"; \n              \n            for (int j = word.length()-1; j >= 0; j--) \n            { \n                reverseWord = reverseWord + word.charAt(j); \n            } \n              \n            reversedString = reversedString + reverseWord + \" \"; \n        } \n          \n        System.out.println(str); \n          \n        System.out.println(reversedString); \n    } \n      \n    public static void main(String[] args)  \n    { \n        reverseWords(\"I love to code in Java\"); \n    } \n}", "label": 1}
{"text": "oldest_person = max(people, key=lambda person: person['age'])\n\nprint(\"Name: {} Age: {}\".format(oldest_person['name'], oldest_person['age']))", "label": 1}
{"text": "<html>\n    <body>\n        <input type=\"text\" id=\"myInput\" autofocus />\n        <script type=\"text/javascript\">\n            document.getElementById('myInput').focus();\n        </script>\n    </body>\n</html>", "label": 1}
{"text": "The number of lines of code to print Fibonacci sequence of 30 numbers is 5.", "label": 1}
{"text": "The reason for the failure of a unit test can be any number of things, including incorrect expectations, incorrect or missing test data, or a problem with the code being tested. It can also be due to a lack of suitable code coverage. In any case, it is important to identify the source of the failure to ensure that the issue can be resolved.", "label": 1}
{"text": "CREATE TABLE users (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    name VARCHAR(128) NOT NULL,\n    email VARCHAR(128) NOT NULL UNIQUE,\n    password VARCHAR(128) NOT NULL\n);", "label": 1}
{"text": "def shuffle(arr): \n    for i in range(len(arr)-1, 0, -1): \n        j = random.randint(0, i) \n        arr[i], arr[j] = arr[j], arr[i] \n    return arr", "label": 1}
{"text": "A_Transpose = A'", "label": 1}
{"text": "int sum=0;\nfor (int i=0; i<=n; ++i)\n    sum += pow(i,2);\nend", "label": 1}
{"text": "#container {\n  width: 500px;\n}", "label": 1}
{"text": "sd(x)", "label": 1}
{"text": "['Apple', 'Banana', 'Orange', 'Grape', 'Potato', 'Carrot', 'Onion', 'Cucumber', 'Tomato', 'Pepper']", "label": 1}
{"text": "<html>\n  <head>\n    <title>Contact Page</title>\n  </head>\n  <body>\n    <h1>Contact Us Now!</h1>\n  </body>\n</html>", "label": 1}
{"text": "return (x > 0 && x < 10);", "label": 1}
{"text": "def is_valid_sudoku(puzzle): \n  size = len(puzzle) \n  for row in range(len(puzzle)): \n    seen = set() \n    for col in range(size): \n      number = puzzle[row][col] \n      if number != 0: \n        if number in seen: \n          return False \n        seen.add(number) \n  for col in range(3): \n    seen = set() \n    for row in range(size): \n      number = puzzle[row][col] \n      if number != 0: \n        if number in seen: \n          return False \n        seen.add(number) \n  # and so on \n  return True", "label": 1}
{"text": "for item in list_items:\n    if 'a' in item:\n        print(item)\n\n# Output\napple\nbanana\ncarrot", "label": 1}
{"text": "def multiply(a, b):\n    return a * b\n\nresult = multiply(a, b)\nprint(result)", "label": 1}
{"text": "list = [1,2,3,4,5,6,7]\n\nsum = 0\nfor i in list:\n    sum += i\n\nmean = sum/len(list)\n\nprint(mean)", "label": 1}
{"text": "list.sort()\nprint(list)\n\n# Output\n[1,2,3,7,9]", "label": 1}
{"text": "import random\n\narr = []\nfor i in range(10):\n    arr.append(random.randint(0, 9))\n\nprint(arr)", "label": 1}
{"text": "length = len(arr)\nprint(length)\n\n# Output\n5", "label": 1}
{"text": "for i in range (1, 11):\n    print(i**2)", "label": 1}
{"text": "public class Main {\n\n    public static void main(String[] args) {\n\n        char ch = 'A';\n        int asciiCode = (int) ch;\n        System.out.println(\"ASCII code of 'A' :\" + asciiCode);\n    }\n}", "label": 1}
{"text": "function arrayToString(arr, separator=\"|\") {\n    return arr.join(separator);\n}\n\narrayToString(array1); // returns \"1|2|3|4|5\"", "label": 1}
{"text": "<!-- flexbox design -->\n<div class=\"layout-wrapper\" style=\"display: flex; flex-direction: row;\">\n  <div class=\"header\" style=\"flex: 1; background-color: red;\">\n    Header\n  </div>\n  <div class=\"body\" style=\"flex: 3; display:flex; flex-direction: row;\">\n    <div class=\"left-column\" style=\"flex: 1; background-color: yellow;\">\n      Left Column\n    </div>\n    <div class=\"middle-column\" style=\"flex: 3; background-color: green;\">\n      Content\n    </div>\n    <div class=\"right-column\" style=\"flex: 1; background-color: blue;\">\n      Right Column\n    </div>\n  </div>\n  <div class=\"footer\" style=\"flex: 1; background-color: purple;\">\n    Footer\n  </div>\n</div>", "label": 1}
{"text": "<?php\n    // Establish a connection to the database\n    $conn = new mysqli('localhost', 'username', 'password', 'database');\n\n    // Check the connection\n    if ($conn->connect_error) {\n        die(\"Connection failed:\" . $conn->connect_error);\n    }\n\n    // Execute the query\n    $sql = \"SELECT * FROM POSTS\";\n    $result = $conn->query($sql);\n\n    // Loop through the results\n    if ($result->num_rows > 0) {\n        while($row = $result->fetch_assoc()) {\n            echo $row['title'] . \"<br />\";\n        }\n    }\n\n    // Close the connection\n    $conn->close();\n?>", "label": 1}
{"text": "flag = False\nstr1 = \"Hello World\"\n\nif flag:\n    print(str1)\nelse:\n    print(\"The flag is set to False, so nothing is printed\")", "label": 1}
{"text": "num1 = 5\nnum2 = 7\n\noutput = [num1, num2]\nprint(output) # Output: [5, 7]", "label": 1}
{"text": "from bs4 import BeautifulSoup\n\nhtml_str = \"\"\"\n<html>\n  <p>This is a paragraph</p>\n  <div>\n    <span>This is a span</span>\n    <p>This is also a paragraph</p>\n    <p>This is another paragraph</p>\n  </div>\n</html>\n\"\"\"\n\nsoup = BeautifulSoup(html_str, 'html.parser')\nparagraphs = soup.find_all('p')\n\nfor p in paragraphs:\n    print(p)", "label": 1}
{"text": "public class Movies {\n  private int movieCount;\n  private String genre;\n \n  public Movies(int movieCount, String genre) {\n    this.movieCount = movieCount;\n    this.genre = genre;\n  }\n \n  public void printMovieDetails() {\n    System.out.println(\"The movie count is \" + movieCount);\n    System.out.println(\"The genre is \" + genre);\n  }\n}", "label": 1}
{"text": "\"8, 12, 5, 2\"", "label": 1}
{"text": "<table>\n    <tr>\n      <th>Name</th>\n      <th>Age</th>\n    </tr>\n    <tr>\n      <td>John</td>\n      <td>25</td>\n    </tr>\n    <tr>\n      <td>David</td>\n      <td>34</td>\n    </tr>\n    <tr>\n      <td>Sarah</td>\n      <td>22</td>\n    </tr>\n  </table>", "label": 1}
{"text": "<h1 id=\"demo-id\">This is a heading</h1>", "label": 1}
{"text": "Yes, the statement is a valid Python syntax.", "label": 1}
{"text": "function findLargest(numArray) {\n  var largest = numArray[0];\n  var secondLargest;\n \n  for( var i = 1; i < numArray.length; i++ ) {\n    if( numArray[i] > largest ) {\n      secondLargest = largest;\n      largest = numArray[i];\n    }\n    else if ( numArray[i] > secondLargest ) {\n      secondLargest = numArray[i];\n    }\n  }\n \n  return [largest, secondLargest];\n}\n\nUsage:\nvar largest2 = findLargest([3, 6, 8, 5, 9, 1]);\n\nOutput:\n[9, 8]", "label": 1}
{"text": "def remove_string(s, t):\n    if t not in s:\n        return s\n    s = s.lower()\n    t = t.lower()\n    indices = []\n    start = 0\n    while True:\n        index = s.find(t, start)\n        if index == -1:\n            break\n        indices.append(index)\n        start = index + 1\n    offset = 0\n    for index in indices:\n        s = s[:index - offset] + s[index - offset + len(t):]\n        offset += len(t)\n    return s", "label": 1}
{"text": "console.error(\"Username and password do not match.\")", "label": 1}
{"text": "let str = \"Hello World!\";\nlet reversedStr = str.split(\"\").reverse().join(\"\");\nconsole.log(reversedStr);", "label": 1}
{"text": "UPDATE product\nSET stock = 10\nWHERE stock < 10;", "label": 1}
{"text": "function countOccurence(array, element) {\n    let count = 0;\n    array.forEach(el => {\n        if(el === element) \n            count++\n    });\n    return count;\n}\n\nvar array = [1, 2, 3, 4, 1];\nlet element = 1;\n\nconsole.log(countOccurence(array, element)); // 2", "label": 1}
{"text": "<html>\n    <head>\n        <style>\n            table tr:nth-child(2n) {\n                background-color: red;\n            }\n            table tr:nth-child(2n+1) {\n                background-color: blue;\n            }\n        </style>\n    </head>\n    <body>\n        <div>\n            <table>\n                <tr>\n                    <th>Cell 1</th>\n                    <th>Cell 2</th>\n                    <th>Cell 3</th>\n                </tr>\n                <tr>\n                    <td>Data 1</td>\n                    <td>Data 2</td>\n                    <td>Data 3</td>\n                </tr>\n                <tr>\n                    <td>Data 4</td>\n                    <td>Data 5</td>\n                    <td>Data 6</td>\n                </tr>\n            </table>\n        </div>\n    </body>\n</html>", "label": 1}
{"text": "SELECT * \nFROM People \nWHERE city = 'London' \nORDER BY last_name ASC;", "label": 1}
{"text": "class Rectangle: \n    def __init__(self, length, width): \n        self.length = length \n        self.width = width \n\n    def getArea(self): \n        return self.length * self.width \n\n    def getPerimeter(self): \n        return 2 * (self.length + self.width)", "label": 1}
{"text": "#include <iostream>\n\nint main()\n{\n    int n;\n    std::cout << \"Enter the upper limit: \";\n    std::cin >> n;\n\n    for (int i = 2; i <= n; i += 2)\n    {\n        std::cout << i << \" \";\n    }\n    std::cout << std::endl;\n\n    return 0;\n}", "label": 1}
{"text": "#define MAX_BUFFER_SIZE 10\n\n// structure of buffer\ntypedef struct {\n int buffer[MAX_BUFFER_SIZE];\n int counter;\n} buffer_t;\n\n// initialize buffer\nvoid init_buffer(buffer_t *buffer) {\n buffer->counter = 0;\n}\n\n// produce an item and add it to the buffer\nvoid produce(buffer_t *buffer, int item) {\n if (buffer->counter < MAX_BUFFER_SIZE) {\n  buffer->buffer[buffer->counter++] = item;\n }\n}\n\n// consume an item from the buffer\nint consume(buffer_t *buffer) {\n if (buffer->counter > 0) {\n  int item = buffer->buffer[--buffer->counter];\n  return item;\n }\n return -1;\n}", "label": 1}
{"text": "[A-F].*", "label": 1}
{"text": "SELECT * FROM Employees WHERE Salary BETWEEN 2000 AND 3000;", "label": 1}
{"text": "The keyword used to define a function in Python is \"def\".", "label": 1}
{"text": "def count_items(dict):\n    item_count = 0\n    for key in dict:\n        item_count += 1\n    return item_count", "label": 1}
{"text": "def fibonacci (n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\ndef sum_of_squares (n):\n    result = 0\n    for i in range(n+1):\n        result += fibonacci(i)**2\n    return result", "label": 1}
{"text": "4 2 1 8", "label": 1}
{"text": "CodingSkill", "label": 1}
{"text": "if 1 <= number <= 10:\n    print(\"The number is between 1 and 10\")", "label": 1}
{"text": "import re\nvalue = 'The integer value is 12'\n \nm = re.search(r'\\d+', value)\nprint(int(m.group(0)))", "label": 1}
{"text": "#include <stdio.h> \n \nint main() \n{ \n    int i = 0; \n  \n    // Iterate from 0 to 500 \n    while (i <= 500) { \n        if (i % 2 != 0) \n            printf(\"%d \", i); \n  \n        i++; \n    } \n  \n    return 0; \n}", "label": 1}
{"text": "In Java, data types int and float represent different levels of precision: int is for whole numbers, while float is for decimal numbers. Int has a 32-bit size, which allows for whole numbers from -2^31 to 2^31-1. Float is 32-bit and can refer to decimal values of up to seven digits. Float can also be expressed in scientific notation. In addition, int is an integer type, while float is a floating-point type. Both int and float can be used in arithmetic operations in Java.", "label": 1}
{"text": "<html>\n<head>\n  <title>Weather App</title>\n</head>\n<body>\n  <h1>Weather in Philadelphia</h1>\n  <h2>Today</h2>\n  <div id=\"weather\">\n    <script>\n\n    // API call to get the weather forecast\n    fetch(\"https://api.weather.gov/gridpoints/PHI/20,34/forecast\")\n      .then(response => response.json())\n      .then(data => {\n        // store data in variables\n        let tempHigh = data.properties.periods[0].temperature\n        let tempLow = data.properties.periods[0].temperatureTrend\n        let weatherDescription = data.properties.periods[0].shortForecast\n        let windSpeedInMPH = data.properties.periods[0].windSpeed\n        let windDirection = data.properties.periods[0].windDirection\n        \n        // create HTML string for displaying the forecast\n        let forecastHTML = `\n          <p><strong>Today's High:</strong> ${tempHigh}&deg;F</p>\n          <p><strong>Today's Low:</strong> ${tempLow}&deg;F</p>\n          <p><strong>Description:</strong> ${weatherDescription}</p>\n          <p><strong>Wind Speed:</strong> ${windSpeedInMPH} MPH, ${windDirection}</p>\n        `\n        // display forecast on the page\n        document.getElementById('weather').innerHTML = forecastHTML;\n      });\n\n    </script>\n  </div>\n</body>\n</html>", "label": 1}
{"text": "SELECT Name, Address\nFROM Customers\nWHERE NOT EXISTS (SELECT * \n                  FROM Orders \n                  WHERE Customers.ID = Orders.CustomerID);", "label": 1}
{"text": "import numpy as np\n\nx = np.zeros((3,2,2))", "label": 1}
{"text": "for (let i=1; i<=4; i++){\n  let output = '';\n  for (let j=4; j>=i; j--){\n    output += '*';\n  }\n  console.log(output);\n}", "label": 1}
{"text": "SELECT * FROM table_name WHERE column_1 != column_2;", "label": 1}
{"text": "rows = 5\n\nfor i in range(0, rows):\n    for j in range(0, rows-i-1):\n        print(end=\" \")\n    for j in range(0, i + 1):\n        print(\"*\", end=' ')\n    print(\"\\r\")", "label": 1}
{"text": "\"\"\"\nGenerate a 2D list of size 5x5 with random numbers between 0 and 9\n\"\"\"\n\nimport random\n\ndef generate_2d_list(rows, columns):\n    matrix = [[random.randint(0, 9) for i in range(columns)] for j in range(rows)]\n    return matrix\n\nif __name__ == '__main__':\n    rows = 5\n    columns = 5\n    matrix = generate_2d_list(rows, columns)\n    print(matrix)", "label": 1}
{"text": "import numpy as np \nimport keras \nfrom keras.models import Sequential\nfrom keras.layers import Dense, Activation\n\nmodel = Sequential()\nmodel.add(Dense(2, input_dim=2))\nmodel.add(Activation('relu'))\nmodel.add(Dense(1))\nmodel.add(Activation('sigmoid'))\n\nmodel.compile(optimizer='adam',\n              loss='binary_crossentropy',\n              metrics=['accuracy'])\n\nmodel.fit(x_train, y_train, epochs=50, batch_size=32)", "label": 1}
{"text": "def search(arr, target): \n    for i in range(len(arr)): \n        if arr[i] == target: \n            return i\n    return -1\n\nprint(\"Index of 6 is\", search(arr, target))", "label": 1}
{"text": "sample_dict = {\"a\":1, \"b\":2, \"c\": 3}\n\ndef get_key_highest_value(dict):\n    highest_value = max(dict.values())\n    for key, value in dict.items():\n        if value == highest_value:\n            return key", "label": 1}
{"text": "<html>\n  <head>\n    <title>Hello World!</title>\n    <style>\n      body { \n        background-color: yellow; \n        padding: 10px;\n      }\n    </style>\n  </head>\n  <body>\n    <p>Hello World!</p>\n  </body>\n</html>", "label": 1}
{"text": "<p>Hello <strong>World</strong>!</p>", "label": 1}
{"text": "def double_array(arr):\n    doubled_arr = []\n    for i in arr:\n        doubled_arr.append(i*2)\n    return doubled_arr", "label": 1}
{"text": "\"\"\"\nDefine a function which can generate a list of 15 random numbers between 1 to 30\n\"\"\"\nimport random\n\ndef generate_random_list():\n    return [random.randint(1,30) for _ in range(15)]\n    \nif __name__ == '__main__':\n    print(generate_random_list())", "label": 1}
{"text": "def coinChange(coins, amount):\n    dp = [float(\"inf\")] * (amount + 1)\n    dp[0] = 0\n\n    for coin in coins:\n        for x in range(coin, amount + 1):\n            dp[x] = min(dp[x], dp[x - coin] + 1)\n    if dp[amount] == float(\"inf\"):\n        return -1\n    return dp[amount]", "label": 1}
{"text": "myCar = Car(\"red\", 50)", "label": 1}
{"text": "import pandas as pd", "label": 1}
{"text": "A set is the ideal data structure to store a set of strings. It is a collection of unique values and can store any primitive data types. No duplicates are allowed in a set and it is also unordered, meaning it does not keep track of the order in which items were added.", "label": 1}
{"text": "The break statement is often used to terminate a loop prematurely if a certain condition is met. This can provide an efficient way to end a loop when a condition is found and can help improve the readability and performance of the code. Additionally, it can be used to handle any exceptions that may occur while the loop is running.", "label": 1}
{"text": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\">\n<link href=\"https://fonts.googleapis.com/css?family=Roboto&display=swap\" rel=\"stylesheet\">\n<title>My First Web Page</title>\n<style> \n  body {\n    font-family: 'Roboto', sans-serif; \n  }\n</style>\n</head>\n<body>\n\n</body>\n</html>", "label": 1}
{"text": "# Prime numbers between 2 and n\n\nn = int(input(\"Enter a positive integer: \"))\n\n# Initially assuming all integers between 2 and n are prime\nprimeArray = [True] * (n + 1)\n\n# Create list of prime numbers\nfor p in range(2, n+1): \n    # If prime[p] is not changed, then it is a prime \n    if primeArray[p]== True: \n        # Update all multiples of p \n        for i in range(2*p,n+1,p): \n            primeArray[i] = False\n\n# Print all prime numbers \nfor i in range(2,n+1): \n    if primeArray[i]: \n        print(i, end=\" \")", "label": 1}
{"text": "function swapElements(x) {\n  let temp = x[0];\n  x[0] = x[1];\n  x[1] = temp;\n}", "label": 1}
{"text": "import re \n  \nstring = \"Python is an interpreted, high-level, general-purpose programming language.\"\nsubstring = \"general-purpose\"\n\nsecond_occurrence = [(m.start(0)) for m in re.finditer(substring, string)][1]\nprint('The second occurrence of the substring starts at index:', second_occurrence)", "label": 1}
{"text": "<form action=\"/contact.php\" id=\"contactForm\" class=\"contactForm\">\n  <input type=\"text\" name=\"name\">\n  <input type=\"email\" name=\"email\">\n  <input type=\"submit\" value=\"Submit\">\n</form>", "label": 1}
{"text": "<form action=\"/contact.php\">\n  <input type=\"text\" name=\"name\">\n  <input type=\"email\" name=\"email\">\n  <input type=\"submit\" value=\"Submit\" class=\"btn\">\n</form>", "label": 1}
{"text": "import pymongo\n\nclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")\ndb = client[\"mydatabase\"]\ncollection = db[\"mycollection\"]\n\ncollection.insert_one({\n    \"name\": \"John Doe\",\n    \"age\": 25,\n    \"city\": \"New York\"\n})", "label": 1}
{"text": "let users = new Set([\"John\", \"Sandy\", \"Stephen\"]);\n\nif (users.has(\"John\")) {\n    console.log(\"John is present!\");\n}", "label": 1}
{"text": "radius = 5\n\nimport math\n\n# calculate the area\narea = math.pi * radius ** 2\n\nprint(\"The total area of the circle is \"+str(area)) # prints The total area of the circle is 78.53981633974483", "label": 1}
{"text": "A. print(1, 1, 2, 3, 5) \nB. print(0, 1, 2, 3, 5) \nC. print(1, 1, 3, 5, 8) \nD. print(0, 1, 1, 2, 3)\n\nD. print(0, 1, 1, 2, 3)", "label": 1}
{"text": "public class LinearSearch \n{ \n    // This function returns index of element x in arr[] \n    static int search(int arr[], int x) \n    { \n        int n = arr.length; \n        for(int i = 0; i < n; i++) \n        { \n            if(arr[i] == x) \n                return i; \n        } \n        return -1; \n    } \n  \n    public static void main(String args[]) \n    { \n        int arr[] = {23, 54, 12, 64, 76, 13, 45}; \n        int x = 45; \n  \n        int index = search(arr, x); \n        if (index == -1) \n            System.out.println(\"Element not present\"); \n        else\n            System.out.println(\"Element found at index \" + index); \n    } \n}", "label": 1}
{"text": "SELECT ItemName, ItemPrice FROM Orders;", "label": 1}
{"text": "def find_index(list_of_strings, target_string):\n    for i, string in enumerate(list_of_strings):\n        if string == target_string:\n            return i\n    return -1", "label": 1}
{"text": "def fahrenheit_to_celsius(temperature):\n    \"\"\"\n    This function converts temperatures in Fahrenheit to Celsius.\n    \"\"\"\n    celsius = (temperature - 32) * 5/9 \n    return celsius\n\nif __name__ == '__main__':\n    temperature = float(input('Enter temperature in Fahrenheit: '))\n    print('Temperature in Celcius is: {:.2f}'.format(fahrenheit_to_celsius(temperature)))", "label": 1}
{"text": "import random\nimport string\n\ndef generate_random_str():\n    letters = string.ascii_letters + string.digits\n    return ''.join(random.choice(letters) for i in range(5))", "label": 1}
{"text": "SELECT name, population \nFROM us_cities \nORDER BY population DESC \nLIMIT 10;", "label": 1}
{"text": "def infer_type(expression):\n     return type(eval(expression))", "label": 1}
{"text": "var popupWindow = window.open(\"\", \"\", \"width=600,height=400\");", "label": 1}
{"text": "def reverseString(testString): \n    reversedString = \"\"\n    for char in testString: \n        reversedString = char + reversedString\n    return reversedString\n\nprint(reverseString(testString))", "label": 1}
{"text": "$sql = \"CREATE TABLE mytable (\n    id INT AUTO_INCREMENT PRIMARY KEY, \n    name VARCHAR(50),\n    age INT,\n    gender VARCHAR(15)\n)\";", "label": 1}
{"text": "from sqlalchemy import Column, Integer, String\n\nclass Foo(Base):\n    __tablename__ = 'foo'\n    id = Column(Integer, primary_key=True)\n    bar = Column(String)", "label": 1}
{"text": "<h1 style=\"font-size: 16px;\">This is a heading</h1>\n<p style=\"font-size: 16px;\">This is a paragraph.</p>", "label": 1}
{"text": "import string\nimport random\n\ndef generate_password():\n    # get all letters and digits\n    chars = string.ascii_letters + string.digits + string.punctuation\n\n    # generate a 8 character password from chars\n    password = ''.join(random.sample(chars, 8))\n\n    return password\n\n# example\npassword = generate_password()\nprint(password) # >$z]e#43", "label": 1}
{"text": "def fibonacci(n):\n    \"\"\"Prints the fibonacci series till the nth term\"\"\"\n    # set initial values\n    a = 0\n    b = 1\n    # check for valid input\n    if n < 0:\n        print('Please enter a positive number')\n    elif n == 0:\n        print('0')\n    elif n == 1:\n        print('0, 1')\n    else:\n        # print first two terms\n        print('0, 1', end=', ')\n        for i in range(2,n):\n            c = a + b\n            print(c, end=', ')\n            # update values\n            a = b\n            b = c\n\nn = 10\nfibonacci(n) # 0, 1, 1, 2, 3, 5, 8, 13, 21, 34", "label": 1}
{"text": "li.list-item {\n \n}", "label": 1}
{"text": "<input type=\"text\" placeholder=\"Type something here\" />", "label": 1}
{"text": "def power_calc(base, exponent):\n    return base ** exponent", "label": 1}
{"text": "def name_length_dict(names):\n    name_length_dict = dict()\n    for name in names:\n        name_length_dict[name] = len(name)\n    return name_length_dict \n\nname_length_dict(names)", "label": 1}
{"text": "def convert_array(array):\n    \"\"\"\n    This function takes a NumPy array and\n    converts it to a list.\n    \"\"\"\n    return array.tolist()", "label": 1}
{"text": "SELECT customers.name, sum(sales.amount) as total_sales\nFROM customers\nINNER JOIN sales \nON customers.customer_id = sales.customer_id\nWHERE MONTH(sales.date) = '04' \n    AND YEAR(sales.date) = '2021'\nGROUP BY customers.name", "label": 1}
{"text": "library(ggplot2)\n\ndf <- data.frame(Current=data1, Previous=data2)\n\nggplot(df, aes(x=rownames(df))) + \ngeom_col(aes(y=Current, fill=\"Current Month\"), position=position_dodge(), width=0.5, color=\"black\") +\ngeom_col(aes(y=Previous, fill=\"Previous Month\"), position=position_dodge(), width=0.5, color=\"black\") +\nlabs(fill = \"Sales\") +\nylab(\"Sales\")", "label": 1}
{"text": "matrix = [[1, 2], [3, 4], [5, 6]]", "label": 1}
{"text": "The DataFrame can be converted to a list using the tolist() method. For example:\n\nimport pandas as pd\n\ndf = pd.DataFrame([[1, 2], [3, 4], [5, 6]])\nmy_list = df.tolist()\nprint(my_list)\n\n# Output: [[1, 2], [3, 4], [5, 6]]", "label": 1}
{"text": "def commonElements(list1, list2):\n    list1_set = set(list1) \n    list2_set = set(list2) \n    common_elements = list1_set.intersection(list2_set) \n    return common_elements", "label": 1}
{"text": "<button onclick=\"window.location.href='http://example.com'\">Click Here</button>", "label": 1}
{"text": "The C++ standard library does not have a function named 'to_string', so this code will not compile. To convert a floating-point number to a string, you should use std::stof() instead.", "label": 1}
{"text": "word = \"apple\"\nfor letter in word:\n    print(letter)", "label": 1}
{"text": "def col_sum(arr):\n    col_sum_arr = []\n    for j in range(len(arr[0])):\n        s = 0\n        for i in range(len(arr)):\n            s += arr[i][j]\n        col_sum_arr.append(s)\n    return col_sum_arr\n\nprint(col_sum([[1, 2, 3],\n               [4, 5, 6],\n               [7, 8, 9]]))\n# Output: [12, 15, 18]", "label": 1}
{"text": "class TreeNode:\n    def __init__(self, data):\n        self.data = data  \n        self.left = None\n        self.right = None\n      \ndef constructTree(arr): \n    root = TreeNode(arr[0])\n    root.left = TreeNode(arr[1])\n    root.right = TreeNode(arr[2])\n    root.left.left = TreeNode(arr[3])\n    root.left.right = TreeNode(arr[4])\n    root.right.left = TreeNode(arr[5])\n    root.right.right = TreeNode(arr[6])\n    return root", "label": 1}
{"text": "seq(from = 0, to = 100, by = 1)", "label": 1}
{"text": "char *replaceCharacter(char *str, char o, char *) \n{ \n    int i = 0; \n    while (str[i] != '\\0') { \n        if (str[i] == o) \n            str[i] = *; \n  \n        i++; \n    }return str; \n}  \n\n// Driver Program \nint main() \n{ \n    char str[] = \"Hello World\"; \n    printf(\"%s\", replaceCharacter(str, 'o', '*')); \n    return 0; \n}", "label": 1}
{"text": "CREATE TABLE messages (\n  id int(11) NOT NULL AUTO_INCREMENT,\n  message text NOT NULL,\n  PRIMARY KEY (id)\n);", "label": 1}
{"text": "$.ajax({\n  url: 'example.com/data',\n  type: 'GET', \n  dataType: 'json',\n  success: function(data) {\n    // data is available here\n  }\n});", "label": 1}
{"text": "84127", "label": 1}
{"text": "filtered_df = df[df['Age'] > 25]", "label": 1}
{"text": "\"!dlroW olleH\"", "label": 1}
{"text": "def decToBin(decimal_value): \n    if decimal_value > 1: \n        decToBin(decimal_value // 2) \n    print(decimal_value % 2, end = '') \n  \ndecToBin(17)", "label": 1}
{"text": "prime_list = [] \nfor num in range(100): \n    if num > 1:\n        for i in range(2, num): \n            if (num % i) == 0: \n                break\n        else:\n            prime_list.append(num) \nprint(prime_list)", "label": 1}
{"text": "import math \n\nmy_list = [5, 10, 20, 7, -8, 15]\n  \nlargest = max(my_list) \nsmallest = min(my_list) \n  \nprint(\"Largest element is:\", largest) \nprint(\"Smallest element is:\", smallest)", "label": 1}
{"text": "button:hover {\n  display: block;\n}\n\nbutton {\n  display: none;\n}", "label": 1}
{"text": "<ul>\n  <li class=\"list-item\">Apple</li>\n  <li class=\"list-item\">Orange</li>\n  <li class=\"list-item\">Banana</li>\n</ul>", "label": 1}
{"text": "def is_prime(num):\n    if num <= 1:  \n        return False\n    for i in range(2, num):  \n        if num % i == 0:  \n            return False\n\n    return True", "label": 1}
{"text": "SELECT Name, Age, Score\nFROM Student;", "label": 1}
{"text": "SELECT Name, Age\nFROM Student \nWHERE Score > 95;", "label": 1}
{"text": "def find_median(arr): \n\tarr.sort() \n\tif len(arr) % 2 != 0: \n\t\treturn arr[len(arr)//2] \n\treturn (arr[(len(arr)//2)-1] + arr[len(arr)//2])/2", "label": 1}
{"text": "function fetchWeather(city){\n    const url = `http://api.openweathermap.org/data/2.5/weather?q=${city}&appid=YOUR_API_KEY`;\n    const response = fetch(url)\n      .then(res => res.json());\n    return response;\n}", "label": 1}
{"text": "hist(vector, breaks=bin_size, col=\"blue', border=\"white\")", "label": 1}
{"text": "def replace_letters(text, letter):\n  new_text = \"\"\n  for i, char in enumerate(text):\n    if char == letter:\n       new_text += str(i)\n    else:\n       new_text += char\n  return new_text", "label": 1}
{"text": "def count_characters(text, char):\n    count = 0\n    for c in text:\n        if c == char:\n            count += 1\n    return count", "label": 1}
{"text": "def get_index(text, substring):\n    for i in range(len(text)-len(substring)+1):\n        if text[i:i+len(substring)] == substring:\n            return i\n    return -1", "label": 1}
{"text": "To deploy a static website on AWS, create an S3 bucket and configure the bucket for static website hosting. Upload the website content to the S3 bucket, then create a CloudFront distribution to redirect requests to the S3 bucket. Finally, configure a DNS record to point to the CloudFront distribution.", "label": 1}
{"text": "<form>\n  <label for=\"first_name\">First Name</label>\n  <input type=\"text\" id=\"first_name\" />\n  <label for=\"last_name\">Last Name</label>\n  <input type=\"text\" id=\"last_name\" />\n  <input type=\"submit\" />\n</form>", "label": 1}
{"text": "/[A-Z][a-z]+/g", "label": 1}
{"text": "<style>\n  table, th, td {\n    border: 1px solid black;\n  }\n</style>\n\n<table>\n  <thead>\n    <th>Column 1</th>\n    <th>Column 2</th>\n    <th>Column 3</th>\n    <th>Column 4</th>\n  </thead>\n  <tbody>\n    <tr>\n      <td></td>\n      <td></td>\n      <td></td>\n      <td></td>\n    </tr>\n    <tr>\n      <td></td>\n      <td></td>\n      <td></td>\n      <td></td>\n    </tr>\n    <tr>\n      <td></td>\n      <td></td>\n      <td></td>\n      <td></td>\n    </tr>\n  </tbody>\n</table>", "label": 1}
{"text": "$.get('http://example.com/items', function(data) {\n    // Code to handle the response\n});", "label": 1}
{"text": "function saveArrayToLocalStorage(arr) {\n  localStorage.setItem('array', JSON.stringify(arr));\n}", "label": 1}
{"text": "<script>\ndocument.getElementById(\"button\").onclick = () => {\n  // Your code goes here\n};\n</script>", "label": 1}
{"text": "The result of 15 * (3 + 7) is 150.", "label": 1}
{"text": "def sum_vector(x):\n    \"\"\"Returns the sum of all elements in a vector x.\"\"\"\n    total = 0\n    for num in x:\n        total += num\n    return total\n\nsum_vector(x) # returns 28", "label": 1}
{"text": "<a href=\"https://www.example.com\">Click here to go to another page.</a>", "label": 1}
{"text": "SELECT * FROM employees WHERE salary > 50000;", "label": 1}
{"text": "The design should include a navigation menu that allows users to search for and select food items, view the items in their cart, and checkout. The navigation menu should also have options to sign up, sign in, and view their order history that would only be visible when they are signed in. The checkout process should allow users to enter payment details and order confirmation.", "label": 1}
{"text": "SELECT COUNT(*) as num_books FROM `BOOK` WHERE availability = 1;", "label": 1}
{"text": "The ternary operator can be used to compare two values in the following way: (condition) ? (value if condition is true) : (value if condition is false);", "label": 1}
{"text": "The positions of all vowels in the string \"mississippi\" are: \n[1, 4, 7, 10].", "label": 1}
{"text": "public class Employee {\n    private String name;\n    private int age;\n    private String position;\n\n    public Employee(String name, int age, String position) {\n        this.name = name;\n        this.age = age;\n        this.position = position;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public String getPosition() {\n        return position;\n    }\n}", "label": 1}
{"text": "function sumTime(hrs, mins) {\n    return (hrs * 60 + mins);\n}\n\nconsole.log(sumTime(2, 45));\n\n# Output\n165", "label": 1}
{"text": "#include <stdio.h>\n\nint main()\n{\n     int a, b, sum;\n  \n    /* Input two numbers from user */\n    printf(\"Enter two numbers: \");\n    scanf(\"%d%d\", &a, &b);\n\n    sum = a + b;\n\n    printf(\"Sum = %d\", sum);\n\n    return 0;\n}", "label": 1}
{"text": "class Dog:\n    def __init__(self,name, age, breed):\n        self.name = name\n        self.age = age\n        self.breed =  breed", "label": 1}
{"text": "def generate_tuples(n):\n    tuples=[]\n    for x in range (1,n+1):\n        if n % x == 0:\n            tuples.append((x,int(n/x)))\n    return tuples", "label": 1}
{"text": "import json\n\nmyDict = json.loads(myJSON)\nprint(myDict)", "label": 1}
{"text": "def max_depth(node):\n    if node is None:\n        return 0\n    else:\n        left_depth = max_depth(node.left)\n        right_depth = max_depth(node.right)\n        if left_depth > right_depth:\n            return left_depth + 1\n        else: \n            return right_depth + 1", "label": 1}
{"text": "def prime_numbers(n): \n    numbers = list(range(2, n + 1)) \n    for i in range(2, n+1): \n        for j in range(i + 1, n+1): \n            if j % i == 0: \n                numbers[j - 2] = 0 \n  \n    return [number for number in numbers if number != 0]", "label": 1}
{"text": "def permutations(string): \n    if len(string) == 0: \n        return [] \n  \n    if len(string) == 1: \n        return [string] \n  \n    l = [] \n    for i in range(len(string)): \n       m = string[i] \n       rem_string = string[:i] + string[i+1:] \n       for p in permutations(rem_string): \n           l.append(m + p) \n    return l", "label": 1}
{"text": "let books = [\n  { name: 'Computer Programming Essentials', pages: 230 },\n  { name: 'Data Structures and Algorithms', pages: 180 },\n  { name: 'Artificial Intelligence Fundamentals', pages: 282 }\n];", "label": 1}
{"text": "for item in list:\n  print(item)", "label": 1}
{"text": "let encryptedString = CryptoJS.MD5(string).toString();", "label": 1}
{"text": "public static int findMax(int[] sequence) {\n    int maxVal = Integer.MIN_VALUE;\n    for (int val : sequence) {\n        if (val > maxVal) {\n            maxVal = val;\n        }\n    }\n    return maxVal;\n}", "label": 1}
{"text": "def sum_primes(n):\n    # Initialize sum to 0\n    sum_prime = 0\n\n    # Iterate through all numbers from 0 to n\n    for num in range(2, n+1):\n        is_prime = True\n        \n        # Check whether the number is prime\n        for div in range(2, num):\n            if num % div == 0:\n                is_prime = False\n                break\n        \n        # If the number is prime, add it to the sum\n        if is_prime:\n            sum_prime += num\n\n    # Return the sum\n    return sum_prime", "label": 1}
{"text": "def multiply_list_by_five(arr):\n    result = []\n    for num in arr:\n        result.append(num * 5)\n    return result", "label": 1}
{"text": "def count_frequency_of_words(string, word_list):\n    frequency_dict = {}\n    string_words = string.split()\n    for word in word_list:\n        count = 0\n        for s_word in string_words:\n            if s_word.lower() == word.lower():\n                count += 1\n        frequency_dict[word] = count\n    return frequency_dict", "label": 1}
{"text": "function factorial(n) {\n    if (n == 0) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}", "label": 1}
{"text": "<!doctype html>\n<html>\n  <head>\n    <title>My website</title>\n  </head>\n  <body>\n    <div class=\"container\">\n      <h1>Welcome to my website!</h1>\n    </div>\n    <script>\n      console.log('Welcome to my website!');\n    </script>\n  </body>\n</html>", "label": 1}
{"text": "INSERT INTO users (user_id, user_name) VALUES (5, \"Alex\");", "label": 1}
{"text": "true", "label": 1}
{"text": "h1 {\n  font-weight: bold;\n}", "label": 1}
{"text": "<form>\n  <label>Name:</label><br>\n  <input type=\"text\" name=\"name\"><br>\n  <label>Address:</label><br>\n  <textarea name=\"address\" rows=\"4\" cols=\"50\"></textarea><br>\n  <input type=\"submit\" value=\"Submit\">\n</form>", "label": 1}
{"text": "The appropriate action is to show an error message and to prevent the user from re-submitting the login form until the correct password is entered.", "label": 1}
{"text": "ALTER TABLE Customers\nADD City VARCHAR(255);", "label": 1}
{"text": "SELECT name, birthdate FROM employees;", "label": 1}
{"text": "The product of 16 and 4 is 64.", "label": 1}
{"text": "\"\"\"\nCreate a program to calculate the area and the perimeter of a rectangle\n\"\"\"\n\ndef area_perimeter(length, width): \n    area = length * width\n    perimeter = 2 * (length + width)\n    return area, perimeter\n\nif __name__ == '__main__':\n    print(area_perimeter(4, 5))", "label": 1}
{"text": "\"\"\"\nSort an array of characters in alphabetic order\n\"\"\"\n\ndef sort_alphabetically(arr):\n    arr.sort()\n    return arr\n\nif __name__ == '__main__':\n    print(sort_alphabetically(['x', 'q', 'b', 'j']))", "label": 1}
{"text": "[1, 2, 3, 4, 5]", "label": 1}
{"text": "for i in range(1, n + 1):\n    print(i, end=\" \")", "label": 1}
{"text": "def intersection(head1, head2):\n    s = set()\n    current1 = head1\n    current2 = head2\n    while current1 is not None:\n        s.add(current1.data)\n        current1 = current1.next\n    result = []\n    while current2 is not None:\n        if current2.data in s:\n            result.append(current2.data)\n        current2  = current2.next\n    return result", "label": 1}
{"text": "He lwrd", "label": 1}
{"text": "<html>\n<head>\n <title>Registration Form</title>\n <style>\n  body {\n   font-family: sans-serif;\n  }\n  .container {\n   width: 500px;\n   margin: 0 auto;\n  }\n  .form-steps {\n   padding: 20px 0;\n  }\n  .form-step {\n   padding: 10px;\n   border: 1px solid #ccc;\n   background-color: #eee;\n  }\n  .active {\n   background-color: #cdeb8e;\n  }\n  button {\n   background-color: #3f51b5;\n   color: #fff;\n   padding: 8px 15px;\n   border: 0;\n   margin-top: 20px;\n  }\n </style>\n</head>\n<body>\n <div class=\"container\">\n <div class=\"form-steps\">\n  <div class=\"form-step active\"><p>Step 1: Name and Email</p></div>\n  <div class=\"form-step\"><p>Step 2: Address</p></div>\n  <div class=\"form-step\"><p>Step 3: Password</p></div>\n </div>\n <form>\n  <input type=\"text\" placeholder=\"Name\" />\n  <input type=\"text\" placeholder=\"Email\" />\n  <input type=\"text\" placeholder=\"Address\" />\n  <input type=\"password\" placeholder=\"Password\" />\n  <button>Submit</button>\n </form>\n </div>\n</body>\n</html>", "label": 1}
{"text": "import requests\nfrom bs4 import BeautifulSoup\n \nurl = 'http://www.cnn.com/'\nresponse = requests.get(url)\nhtml_content = response.text\n \nsoup = BeautifulSoup(html_content, \"lxml\")\ntop_headlines = soup.find_all('h3',{'class':'cd__headline'})\n \nfor headline in top_headlines[:5]:\n print(headline.text)", "label": 1}
{"text": "SELECT name \nFROM customers \nWHERE orders > 500;", "label": 1}
{"text": "<html>\n  <head>\n    <title>Example HTML</title>\n  </head>\n  <body>\n    <h1>Heading</h1>\n    <p>This is a paragraph.</p>\n    <a href=\"www.example.com\">Link to example.com</a>\n  </body>\n</html>", "label": 1}
{"text": "The function returns a string, \"true\" which is invalid. The function should return a boolean value instead (True or False).", "label": 1}
{"text": "\"\"\"\nWrite a Python code to calculate the maximum temperature for today based on a forecast of the seven-day forecast\n\"\"\"\n\nimport datetime\n\ndef get_max_temperature_today(forecast):\n    today = datetime.datetime.today().weekday()\n    \n    max_temp = None\n    for day in forecast:\n        if day['day'] == today:\n            max_temp = max(max_temp, day['temperature'])\n    \n    return max_temp\n  \nif __name__ == \"__main__\":\n    forecast = [\n  {'day': 'Monday', 'description': 'sunny', 'temperature': 28},\n  {'day': 'Tuesday', 'description': 'sunny', 'temperature': 30},\n  {'day': 'Wednesday', 'description': 'cloudy', 'temperature': 28},\n  {'day': 'Thursday', 'description': 'raining', 'temperature': 25},\n  {'day': 'Friday', 'description': 'raining', 'temperature': 24},\n  {'day': 'Saturday', 'description': 'cloudy', 'temperature': 25},\n  {'day': 'Sunday', 'description': 'sunny', 'temperature': 27}\n]\n\nprint(get_max_temperature_today(forecast))", "label": 1}
{"text": "for i in range(11):\n    print(i)", "label": 1}
{"text": "import json\n\nresp = '[{\"name\": \"john\", \"age\": 25}, {\"name\": \"Anna\", \"age\": 17}, {\"name\": \"Rick\", \"age\": 46}]'\n\ndata = json.loads(resp)\nprint(len(data)) # 3 objects", "label": 1}
{"text": "if x * y < 0:", "label": 1}
{"text": "import asyncio\n\nasync def calculate_sum(numbers):\n    result = 0\n    for num in numbers:\n        result += num\n        await asyncio.sleep(2)\n    return result", "label": 1}
{"text": "def calculate_total(discounts):\n    total = 0\n    for discount in discounts:\n        total -= total * (discount / 100)\n    return total", "label": 1}
{"text": "const char* str1 = \"Hello\";\nconst char* str2 = \"World!\";", "label": 1}
{"text": "The main difference between a 'for' loop and a 'while' loop is that a 'for' loop is used to iterate through a set of numbers, whereas a 'while' loop is used to continue executing a code block until the condition becomes false. A 'for' loop is generally used when there is an established number of iterations or until a certain condition is met, whereas a 'while' loop is used when the exact number of iterations is not known. Additionally, 'for' loops usually contain a counter that is initialized, tested and incremented at the beginning of each iteration, whereas a 'while' loop will only check its condition at the beginning of each iteration.", "label": 1}
{"text": "string chs = \"abcdefghijklmnopqrstuvwxyz\";\nstring RandomString = \"\";\nRandom rd = new Random();\nfor (int i = 0; i < 5; i++)\n{\nRandomString += chs[rd.Next(0,26)];\n}\nConsole.WriteLine(RandomString);", "label": 1}
{"text": "Array.sort()\nprint(Array) # prints [2,5,8]", "label": 1}
{"text": "{\n    \"film\": {\n        \"title\": \"The Godfather\",\n        \"genre\": \"Drama\",\n        \"year\": 1972\n    }\n}", "label": 1}
{"text": "def insertion_sort(nums):\n    # iterate over the array\n    for i in range(1, len(nums)):\n        j = i-1\n        # hold element to be inserted\n        temp = nums[i]\n        # shift elements right if greater than element to be inserted\n        while nums[j] > temp and j >= 0: \n            nums[j+1] = nums[j]\n            j -= 1\n        # insert element at the found position\n        nums[j+1] = temp\n    return nums\n\nnums = [1, 4, 2, 7, 5]\nprint(insertion_sort(nums))", "label": 1}
{"text": "def partition(nums, low, high):\n    i = low-1\n    # set pivot as last element in array\n    pivot = nums[high]\n    \n    for j in range(low, high):\n        # if element is smaller than pivot, increment i and swap elements\n        if nums[j] < pivot:\n            i += 1\n            nums[i], nums[j] = nums[j], nums[i]\n\n    # swap pivot \n    nums[i+1], nums[high] = nums[high], nums[i+1] \n    return i+1\n\ndef quick_sort(nums, low, high):\n    if low < high:\n        # set partition index\n        part_idx = partition(nums, low, high)\n        # sort left side of partition index \n        quick_sort(nums, low, part_idx-1)\n        # sort right side of partition index \n        quick_sort(nums, part_idx+1, high)\n\nnums = [9, 5, 8, 1, 3, 6, 7]\nquick_sort(nums, 0, len(nums)-1)\nprint(\"Sorted array:\", nums)", "label": 1}
{"text": "public class Rectangle { \n    int length, width; \n  \n    // Constructor \n    public Rectangle(int length, int width) \n    { \n        this.length = length; \n        this.width = width; \n    }\n\n    public int getPerimeter() \n    { \n        // Calculate perimeter \n        return 2*(length + width); \n    } \n  \n    public int getArea() \n    { \n        // Calculate area \n        return length*width; \n    } \n}", "label": 1}
{"text": "def intersection(list_a, list_b):\n    return [element for element in list_a if element in list_b]", "label": 1}
{"text": "<html>\n    <head>\n        <title>My page</title>\n    </head>\n    <body>\n    </body>\n</html>", "label": 1}
{"text": "$(document).ready(function(){\n    alert(\"Popup box!\");\n});", "label": 1}
{"text": "def greet(name):\n    return \"Hello \" + name + \"!\"", "label": 1}
{"text": "def sortArray(arr):\n    arr.sort(reverse = True)\n    return arr", "label": 1}
{"text": "def isAnagram(s1, s2): \n  \n    # Get lengths of both strings \n    n1 = len(s1) \n    n2 = len(s2) \n  \n    # If lengths of both strings are not same, then they are not anagram \n    if n1 != n2: \n        return False\n  \n    # Sort both strings \n    s1 = sorted(s1) \n    s2 = sorted(s2) \n  \n    # Compare sorted strings \n    for i in range(0, n1): \n        if s1[i] != s2[i]: \n            return False\n  \n    return True\n\n# driver code\ns1 = \"listen\"\ns2 = \"silent\"\nprint(\"The two strings are anagrams:\", isAnagram(s1, s2))", "label": 1}
{"text": "def swap(arr, i, j): \n    temp = arr[i] \n    arr[i] = arr[j] \n    arr[j] = temp", "label": 1}
{"text": "sentence = \"My favorite color is red\"\nwords = sentence.split()", "label": 1}
{"text": "<table>\n    <tr><th>Name</th><th>Age</th><th>City</th></tr>\n    <tr><td>John</td><td>20</td><td>London</td></tr>\n    <tr><td>Bob</td><td>19</td><td>Paris</td></tr>\n    <tr><td>Alice</td><td>18</td><td>New York</td></tr>\n</table>", "label": 1}
{"text": "import os\n\ndirectory = os.getcwd() \nprint(\"The current working directory is\", directory)\n\nfiles = os.listdir(directory) \nprint(\"The files in the current directory are\", files)\n\nfor file in files:\n    if file.endswith(\".py\"):\n        print(\"The Python script\", file, \"is in the current directory\")", "label": 1}
{"text": "def powerset(s):\n    result = [[]]\n    for x in s:\n        result.extend([y + [x] for y in result])\n    return result", "label": 1}
{"text": "def double_list(nums):\n    return [num * 2 for num in nums]", "label": 1}
{"text": "def add_vectors(v1, v2):\n    result = []\n    for i in range(len(v1)):\n        result.append(v1[i] + v2[i])\n    return result\n \nprint(add_vectors([3, 4], [5, 6]))", "label": 1}
{"text": "def min_num(n1, n2):\n    if n1 < n2:\n        return n1\n    else:\n        return n2\n \nprint(min_num(7, 4))", "label": 1}
{"text": "echo \"${Sentence}\" | awk '{for (i=1;i<=NF;i++) print substr($i,1,1)}'", "label": 1}
{"text": "SELECT * FROM ages WHERE age BETWEEN 30 AND 40;", "label": 1}
{"text": "$str = \"SoftwareTestingHelp\";\nprint substr($str, 8, 1);", "label": 1}
{"text": "SELECT e1.name\nFROM Employee e1\nJOIN Employee e2 ON e1.manager_id = e2.id \nWHERE e1.salary > e2.salary", "label": 1}
{"text": "x = 2020\ny = 1\n\nprint(x + y + 1)", "label": 1}
{"text": "CREATE TABLE employers (\n  id INTEGER PRIMARY KEY,\n  name VARCHAR(100) UNIQUE NOT NULL,\n  age INT NOT NULL,\n  gender VARCHAR(50) NOT NULL,\n  street_address VARCHAR(100) NOT NULL,\n  city VARCHAR(100) NOT NULL,\n  state VARCHAR(100) NOT NULL,\n  zip_code INT NOT NULL,\n  phone_number VARCHAR(25) UNIQUE NOT NULL\n);", "label": 1}
{"text": "[1, 2, 3, 4, 7, 8]", "label": 1}
{"text": "sorted_users = sorted(users, key=lambda user: user['name'])", "label": 1}
{"text": "def prime_numbers():\n    prime_nums = []\n    for i in range(10, 50):\n        is_prime = True\n        for j in range(2, i):\n            if i%j ==0:\n                is_prime = False\n                break\n        if is_prime:\n            prime_nums.append(i)\n    return prime_nums", "label": 1}
{"text": "Buy? \n             No -----------> No\n            /              \\\n          No                Yes \n         /                  \\\n   Age/Income            Car = Yes\n  0-25/0-25k ------------> Yes\n /         \\\nNo          >25k --------> Yes\n            /\n          No ----------------> No", "label": 1}
{"text": "16\n            /  \\\n           9    7\n          /\\    /\\ \n         5  4  3  2\n        /  /\\  /  /\n       G  P  T  EP\n (E stands for empty)", "label": 1}
{"text": "Creating a new thread in Java is quite simple. The new thread can be created by extending the Thread class and overriding the run() method.\n\nExample:\n\npublic class MyThread extends Thread {\n   @Override\n   public void run() {\n      // logic to be executed in the new thread\n   }\n}\n \n// Create the new thread\n MyThread thread = new MyThread();\n // Start the new thread\n thread.start();", "label": 1}
{"text": "Using a loop and mathematical operators, the sum of all the digits in a given number can be found in Java.\n\nExample:\n\nint number = 1234;\nint sum = 0;\nwhile(number > 0) {\n        int digit = number % 10;\n        sum += digit;\n        number /= 10;\n}\nSystem.out.println(\"The sum of all the digits is \"+sum);\n\n// Output: The sum of all the digits is 10", "label": 1}
{"text": "def shuffle_nums(nums):\n    from random import shuffle\n    shuffle(nums) \n    return nums", "label": 1}
{"text": "base = 8\nheight = 6\nhypotenuse = (base**2 + height**2)**0.5\nprint(hypotenuse) // Output: 10.0", "label": 1}
{"text": "function divisors(num){\n  let result = [];\n  for (let i = 1; i <= num; i++){ // 1, 2, 3... num\n    if (num % i === 0){\n      if (i != num){\n        result.push(i);\n      }\n    }\n  }\n  return result;\n}\n\nconsole.log(divisors(12)); //Output: [1, 2, 3, 4, 6]", "label": 1}
{"text": "UPDATE items \nSET price = 50 \nWHERE price > 50;", "label": 1}
{"text": "[[1, 2, 3, 4, 5],\n [6, 7, 8, 9, 10],\n [11, 12, 13, 14, 15],\n [16, 17, 18, 19, 20],\n [21, 22, 23, 24, 25]]", "label": 1}
{"text": "list_sum = 0\nfor num in list1:\n    list_sum += num\n\nprint(list_sum)\n\n# Output: 15", "label": 1}
{"text": "def fahren_to_celsius(fahren):\n    celsius = (fahren - 32) * (5 / 9)\n    return celsius\n\nprint(fahren_to_celsius(50)) \n\n# Output: 10.0", "label": 1}
{"text": "The solution of this Linear Programming problem is x = 40 and y =", "label": 1}
{"text": "Linear search is an algorithm for finding a particular value in an array. It works by sequentially going through each item in the array, comparing the desired value with each item until it is either found or the end of the array is reached. If the item is found, it's index in the array is returned, otherwise, -1 is returned indicating the value wasn't found.", "label": 1}
{"text": "arr = [0] * 10", "label": 1}
{"text": "INSERT INTO table_name (name, age) VALUES ('John', 34)", "label": 1}
{"text": "string = string.replace(\"My website\", \"John's website\")", "label": 1}
{"text": "for(let i = 0; i < arr.length; i++){\n    if (arr[i] % 2 !== 0 ){\n        console.log(arr[i]);\n    }\n}", "label": 1}
{"text": "let newArr = arr.map(x => x * 2);", "label": 1}
{"text": "SELECT * \nFROM customers \nWHERE state = 'California';", "label": 1}
{"text": "SELECT\n state,\n product,\n MAX(revenue) AS revenue\nFROM Sales\nGROUP BY state, product;", "label": 1}
{"text": "<div style=\"width: 100px; height: 100px;\n    background: red; border-radius: 50%;\"></div>", "label": 1}
{"text": "Sub FindLastRowNY()\nLastRow = Range(\"A1\").End(xlDown).Row \nFor i = LastRow To 1 Step -1\n    If Cells(i, 2).Value = \"New York\" Then\n        MsgBox i\n        Exit Sub\n    End If\nNext i\nEnd Sub", "label": 1}
{"text": "for (int i = 0; i < arr.length; i++) \n    {\n        for (int j = i + 1; j < arr.length; j++) \n        {\n            if (arr[i] > arr[j]) \n            {\n                int temp = arr[i]; \n                arr[i] = arr[j]; \n                arr[j] = temp; \n            } \n        }\n    }", "label": 1}
{"text": "for (int i = 0; i < str.Length; i++)\n{\n     str[i] = char.ToLower(str[i]);\n}", "label": 1}
{"text": "static int Fibonacci(int a)\n  { \n    if (a <= 1) return a; \n    return Fibonacci(a - 1) + Fibonacci(a - 2); \n  }", "label": 1}
{"text": "CREATE OR REPLACE PROCEDURE delete_employees_table()\nAS\nBEGIN\n DROP TABLE Employees;\nEND;", "label": 1}
{"text": "int power(int k, int n)\n{\n    int result = 1;\n    while (n > 0)\n    {\n        result *= k;\n        n--;\n    }\n    return result;\n}", "label": 1}
{"text": "\"\"\"\nFunction to search an array of objects by any parameter\n\"\"\"\n\nconst searchArray = (arr, key, value) => {\n  return arr.find((obj) => obj[key] === value)\n}\n\nconst searchedName = searchArray(people, 'name', 'John')\nconsole.log(searchedName) // {name: 'John', age: 19}", "label": 1}
{"text": "\"\"\"\nBasic class in JavaScript with a constructor, a method for changing the greeting and a method for saying the greeting\n\"\"\"\n\nclass GreetingGenerator {\n  constructor(greeting) {\n    this.greeting = greeting\n  }\n\n  setGreeting(greeting) {\n    this.greeting = greeting\n  }\n\n  sayGreeting() {\n    console.log(this.greeting)\n  }\n}\n\nconst greet = new GreetingGenerator('Hello World!')\ngreet.setGreeting('Good Morning!')\ngreet.sayGreeting() // 'Good Morning!'", "label": 1}
{"text": "\"\"\"\nFunction rotate array to the right by k steps\n\"\"\"\n\nconst rotateArray = (arr, k) => {\n  let rotatedArray = [...arr]  // Create a shallow copy of the array\n  for (let i = 0; i < k; i++) {\n    let lastElement = rotatedArray.pop()\n    rotatedArray.unshift(lastElement)\n  }\n  return rotatedArray\n}\n\nconsole.log(rotateArray(arr, k)) // [3,4,5,1,2]", "label": 1}
{"text": "\"\"\"\nFunction to find the shortest possible palindrome\n\"\"\"\n\nconst findShortestPalindrome = (string) => {\n  let reversedString = string.split('').reverse().join('')\n  let newString = string + '#' + reversedString\n  let lps = []\n  let i = 1\n  let j = 0\n  while (i < newString.length) {\n    if (newString[i] === newString[j]) {\n      lps[i] = j + 1\n      i++\n      j++\n    } else {\n      if (j !== 0) {\n        j = lps[j - 1]\n      } else {\n        lps[i] = 0\n        i++\n      }\n    }\n  }\n  return string + reversedString.substring(lps[newString.length - 1])\n}\n\nconsole.log(findShortestPalindrome(string)) // 'ecarace'", "label": 1}
{"text": "System.out.println(\"Hello World!\");", "label": 1}
{"text": "SELECT * \nFROM students \nWHERE age > 25;", "label": 1}
{"text": "# set a range for the numbers\nmin = 10\nmax = 20\n\n# iterate and print odd numbers\nfor num in range(min,max+1): \n    if num % 2 != 0: \n        print(num, end=\" \")", "label": 1}
{"text": "SELECT name, age\nFROM users\nWHERE age > 25;", "label": 1}
{"text": "total = 0\nfor i in [1, 2, 3, 4, 5]:\n total += i\nprint(total)\n\n# the output will be 15", "label": 1}
{"text": "Debugging is the process of finding and fixing errors in a program's code. In C programming, debugging involves finding and fixing syntax errors, logical errors, and runtime errors. To debug a C program, you must use a debugging tool such as a debugger or a print statement. The debugging process involves setting breakpoints, examining the current state of the program, modifying data, and stepping through the code to analyze its execution.", "label": 1}
{"text": "SELECT * \nFROM employees \nWHERE department = 1 \nAND salary > 50000;", "label": 1}
{"text": "<input type=\"checkbox\" name=\"remember\" value=\"yes\"> Remember me", "label": 1}
{"text": "h1 {\n  font-family: Arial;\n  color: #000000;\n  font-size: 22px;\n}", "label": 1}
{"text": "#include<iostream>\n\nusing namespace std;\n\nint main() \n{ \n    int n = 10;\n    int a = 0, b = 1, c;\n\n    cout << a << \" \" << b << \" \"; \n\n    for (int i = 2; i < n; i++) { \n        c = a + b; \n        cout << c << \" \"; \n        a = b; \n        b = c; \n    } \n  \n    return 0; \n}", "label": 1}
{"text": "<html>\n  <head>\n    <title>Centered Paragraph</title>\n  </head>\n  <body>\n    <div style=\"text-align:center;\">\n      <p>This is a centered paragraph.</p>\n    </div>\n  </body>\n</html>", "label": 1}
{"text": "#include <iostream>\nusing namespace std;\n\nint main() {\n    for (int i = 7; i <= 50; i+= 7)\n    {\n        cout << i << \" \";\n    }\n    cout << endl;\n    return 0;\n}", "label": 1}
{"text": "def combineTwoLists(list1, list2):\n    new_list = list1 + list2\n    return new_list\n\nresult = combineTwoLists(list1, list2)\nprint(result) # [1, 2, 3, 4, 5, 6]", "label": 1}
{"text": "def findPattern(str1, str2): \n \n    ind = 0\n    for ch in str2: \n        if ch not in str1[ind:]: \n            return 0\n  \n        ind = str1.index(ch, ind) + 1\n \n    return 1\n  \n# Driver code \nif findPattern(\"timetopractice\", \"top\"): \n    print(\"Subsequence Found\") \nelse: \n    print(\"Subsequence Not Found\")", "label": 1}
{"text": "[[0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0]]", "label": 1}
{"text": "def reverse_list(lst):\n    rev_lst = lst[::-1]\n    return rev_lst", "label": 1}
{"text": "try:\n    list1 = [1, 2, 3]\n    print(list1[5])\nexcept IndexError:\n    print(\"IndexError occurred.\")", "label": 1}
{"text": "module F(A,B,C,D,Z);\n    input A, B, C, D;\n    output Z;\n    reg Z;\n    always @ (A,B,C,D)\n        begin\n             Z = ~(A | ~B | C | ~D);\n        end\nendmodule", "label": 1}
{"text": "def generateId(string):\n    hashValue = hash(string)\n    id = 0\n    while hashValue > 0:\n        id += hashValue % 10\n        hashValue //= 10\n    return id", "label": 1}
{"text": "def classify(sentence):\n    if 'sports' in sentence.lower():\n        return 'sports'\n    elif 'entertainment' in sentence.lower():\n        return 'entertainment'\n    elif 'politics' in sentence.lower():\n        return 'politics'\n    elif 'finance' in sentence.lower():\n        return 'finance'\n    elif 'science' in sentence.lower():\n        return 'science'\n    else:\n        return 'other'", "label": 1}
{"text": "def sortByLength(sentence):\n    words = sentence.split(' ')\n    sortedWords = sorted(words, key=len)\n    return sortedWords", "label": 1}
{"text": "def add(a, b):\n    sum = a + b\n    return sum", "label": 1}
{"text": "console.log(\"Goodbye World!\");", "label": 1}
{"text": "Binary number: 111111", "label": 1}
{"text": "def evalExpression(x, y, z):\n  return 4*x + 3*y - 2*z\n\n# Test\nx = 1\ny = 3\nz = -2\nresult = evalExpression(x, y, z)\nprint(result) # 5", "label": 1}
{"text": "<form action=\"\" method=\"post\">\n  <label for=\"name\">Name:</label><br>\n  <input type=\"text\" name=\"name\" id=\"name\"> <br>\n  <label for=\"email\">Email:</label><br>\n  <input type=\"email\" name=\"email\" id=\"email\"><br>\n  <label for=\"message\">Message:</label><br>\n  <textarea name=\"message\" id=\"message\" rows=\"4\" cols=\"50\"></textarea><br><br>\n  <input type=\"submit\" value=\"Submit\">\n</form>", "label": 1}
{"text": "There is a missing semicolon after the \"x = x + 1\" line, needed to terminate the while loop.", "label": 1}
{"text": "import re\np = re.compile(r'https?://(?:[-\\w.]|(?:%[\\da-fA-F]{2}))+')\nwords = p.findall(url)", "label": 1}
{"text": "One way of detecting if there is an infinite loop in a code is by using a counter to count the number of iterations the loop is performing. If the number of iterations exceeds some predefined threshold value, we can conclude that the code is executing an infinite loop. Another technique to detect an infinite loop is to keep track of all the loop variables and compare the values at two different points in the loop. If it detects a repeating pattern, it may indicate that the loop is stuck in an infinite loop.", "label": 1}
{"text": "def search(items, item): \n    for i in range(len(items)): \n    if items[i] == item:\n        found = i \n    if found: \n        return found \n    else: \n        return -1", "label": 1}
{"text": "arrayBool = [False]*10", "label": 1}
{"text": ".bold-font {\n\u00a0\u00a0\u00a0\u00a0font-weight: bold;\n\u00a0\u00a0\u00a0\u00a0font-style: normal;\n}", "label": 1}
{"text": "document.getElementById('button1').style.color='blue';", "label": 1}
{"text": "for s in arr:\n    print(s)", "label": 1}
{"text": "// evaluate the expression\nlet expression = '7 + 4 * 3 - 6 / 2';\n\n// evaluate the expression\nlet result = eval(expression);\n\n// print the result\nconsole.log(result);\n// Output: 19", "label": 1}
{"text": "def factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)", "label": 1}
{"text": "alert(\"Hello, World!\");", "label": 1}
{"text": "SELECT * FROM Student WHERE Grade >= 90;", "label": 1}
{"text": "Event listeners can be used to make the page interactive. For example, onclick listeners could be used to execute functions when a button is clicked, onsubmit listeners could be used to execute functions when a form is submitted, and onchange listeners could be used to execute functions when an element's contents are changed.", "label": 1}
{"text": "\"\"\"\nModify the code to display a simple error message whenever a parameter is passed as string\n\"\"\"\n\nfunction sum(a, b) {\n  // Test if either a or b is a string\n  if (typeof a === 'string' || typeof b === 'string') {\n    throw new Error('Parameters must be numbers');\n  }\n  return a + b;\n}", "label": 1}
{"text": "\"\"\"\nEdit the code to make the string word_list case-insensitive\n\"\"\"\n\nword_list = [\"cat\", \"dog\", \"bird\"]\n\n# Make the string case-insensitive\nword_list = [word.lower() for word in word_list]\n\nprint(word_list)\n\n\"\"\"\nOutput: ['cat', 'dog', 'bird']\n\"\"\"", "label": 1}
{"text": "\"\"\"\nFor the given dictionary, list all its keys and values in the following format\n\"\"\"\n\ndata = {\n  \"name\": \"John Doe\",\n  \"age\": 40,\n  \"address\": {\n    \"street\": \"123 Main Street\",\n    \"city\": \"Albany\",\n    \"state\": \"NY\"\n  }\n}\n\nfor key, value in data.items():\n    print(f\"{key}: {value}\")\n    if isinstance(value, dict):\n        for k,v in value.items():\n            print(f\"  {k}: {v}\")\n\n\"\"\"\nOutput:\nname: John Doe\nage: 40\naddress: {'street': '123 Main Street', 'city': 'Albany', 'state': 'NY'}\n  street: 123 Main Street\n  city: Albany\n  state: NY\n\"\"\"", "label": 1}
{"text": "\"\"\"\nGenerate a JSON response which contains the age of all users in  the database\n\"\"\"\n\nimport json\n\n# Database of users\nusers = [\n  {'name': 'John Doe', 'age': 40},\n  {'name': 'Bob Jones', 'age': 30},\n  {'name': 'Alice Smith', 'age': 20}\n]\n\n# Generate the json response\nresponse = {'ages': [user['age'] for user in users]}\n\n# Print the response\nprint(json.dumps(response))\n\n\"\"\"\nOutput: {\"ages\": [40, 30, 20]}\n\"\"\"", "label": 1}
{"text": "SELECT name\nFROM students\nWHERE grade >= 80;", "label": 1}
{"text": "You can search for and replace a string with a substring in Python by using the \"replace\" method. The syntax would be: string.replace(\"string_to_be_replaced\", \"new_string\"). For example: \"Hello, world\".replace(\"world\", \"there\") would return \"Hello, there\".", "label": 1}
{"text": "The most efficient way to iterate through a list of dictionaries in Python is to use the \"for-in\" loop. This loop iterates over the elements of the list and accesses the values of the dictionary using the \"key\" argument. The syntax would be: for item in list: do_something(item[key]).", "label": 1}
{"text": "SELECT name, address FROM customers \nWHERE address LIKE ('%[zipcode]%')", "label": 1}
{"text": "// This function takes in two values, a base and an exponent, and calculates the power of the base with the exponent. The result is computed by multiplying the base with the exponent. The result is then returned to the caller.", "label": 1}
{"text": "Integer.", "label": 1}
{"text": "for (int i = 0; i < 5; i++) {\n    System.out.println(\"Hello World\");\n}", "label": 1}
{"text": "The 'const' keyword in C++ is used to indicate that the value of a variable cannot be modified after its initial assignment. It can be used to create read-only variables that are useful for preventing accidental data modification.", "label": 1}
{"text": "<?php\nif(isset($_POST['submit'])){\n \n$name = $_POST['name'];\n$subject = $_POST['subject'];\n$mailFrom = $_POST['email'];\n$message = $_POST['message'];\n\n$mailTo = \"example@gmail.com\";\n$headers = \"From: \".$mailFrom;\n$txt = \"You have received an email from \".$name.\".\\n\\n\".$message;\n \nmail($mailTo, $subject, $txt, $headers);\nheader(\"Location: index.php?mailsend\");\n}\n?>", "label": 1}
{"text": "<form>\n  <label for=\"name\">Name:</label><br>\n  <input type=\"text\" name=\"name\" placeholder=\"Enter your name\"><br>\n  <label for=\"email\">Email:</label><br>\n  <input type=\"email\" name=\"email\" placeholder=\"Enter your email\"><br>\n  <label for=\"phone\">Phone:</label><br>\n  <input type=\"tel\" name=\"phone\" placeholder=\"Enter your phone number\"><br>\n  <input type=\"submit\" value=\"Submit\">\n</form>", "label": 1}
{"text": "import Foundation\n\nlet url = URL(string: \"https://my-api.com/endpoint\")!\n\nlet task = URLSession.shared.dataTask(with: url) {(data, response, error) in\n  guard let data = data else { return }\n\n  do {\n    let json = try JSONSerialization.jsonObject(with: data, options: [])\n    print(json)\n  } catch {\n    print(error)\n  }\n}\n\ntask.resume()", "label": 1}
{"text": "DELETE from user \nWHERE email=\"example@example.com\";", "label": 1}
{"text": "def multiple_table():\n    for i in range(1, 13):\n        for j in range(1, 13):\n            print(\"%2d x %2d = %3d\" %(i, j, i*j))\n        print(\"\\n\")\nmultiple_table()", "label": 1}
{"text": "class CompoundInterest { \n    static double compoundInterest(double principal, double time, double rate, double n) \n    { \n        return principal * (Math.pow((1 + rate / n), n * time)); \n    } \n\n    public static void main(String[] args) \n    { \n        double principal = 1000; \n        double time = 2; \n        double rate = 10; \n        double n = 4; \n        System.out.println(\"Compound Interest is \" + compoundInterest(principal, time, rate, n)); \n    } \n}", "label": 1}
{"text": "function convertISODate(ISOdateString) {\n    const date = new Date(ISOdateString);\n    const dateString = date.toLocaleString('default', {day: 'numeric', month: 'long', year:'numeric'});\n\n    return dateString;\n}\n\nconsole.log(convertISODate('2020-06-15'));\n// Output: June 15, 2020", "label": 1}
{"text": "{\n \"name\": \"John Doe\",\n \"age\": 30\n}", "label": 1}
{"text": "The derivative of f(x) is f'(x) = 2x + 5", "label": 1}
{"text": "for(int i=0; i<array.length; i++) {\n    System.out.println(array[i]);\n}", "label": 1}
{"text": "\\<div\\>(.*?)\\</div\\>", "label": 1}
{"text": "def permutation(str):\n    if len(str) == 0: \n        return [''] \n    prev_list = permutation(str[1:len(str)]) \n    next_list = [] \n    for i in range(0,len(prev_list)): \n        for j in range(0,len(str)): \n            new_str = prev_list[i][0: j]+str[0]+prev_list[i][j: len(str)-1] \n            if new_str not in next_list: \n                next_list.append(new_str) \n    return next_list\n\n# Test\nstr = 'CAT'\nperm = permutation(str)\n\n# Output\nprint(perm)\n# ['CAT', 'CTA', 'ACT', 'ATC', 'TCA', 'TAC']", "label": 1}
{"text": "\"\"\"\nReplace the character on odd index positions with '#'.\n\"\"\"\n\ndef add_pound_signs(string):\n    result_string = \"\"\n    for i in range(len(string)):\n        if i % 2 == 1:\n            result_string += \"#\"\n        else:\n            result_string += string[i]\n    return result_string\n\nif __name__ == '__main__': \n    string = \"Hello World!\"\n    print(add_pound_signs(string))", "label": 1}
{"text": "def print_multiplication_table(x):\n  for i in range(1, 11):\n    ans = i*x\n    print(f\"{i} x {x} = {ans}\")\n\nprint_multiplication_table(x)", "label": 1}
{"text": "x <- 4:24", "label": 1}
{"text": "The purpose of a pivot table in Excel is to summarize and analyze data. It can quickly summarize large amounts of data and create useful summaries with a few clicks. Pivot tables are useful for quickly analyzing data in different ways, such as sorting and filtering, and deriving meaningful insights.", "label": 1}
{"text": "result <- sample(1:10, 10, replace = TRUE)\n print(result)", "label": 1}
{"text": "function calculateTip(bill) {\n  return (bill < 50 ? bill * 0.2 : bill * 0.15);\n}", "label": 1}
{"text": "def sum_elements(matrix):\n    result = 0\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            result = result + matrix[i][j]\n    return result\n\nprint(sum_elements(matrix))", "label": 1}
{"text": "The Django web application should have the following components: a) a simple UI with a newsfeed list, b) a view to fetch news items from different sources, c) a web scraper to fetch web pages and presenting them on the newsfeed list, d) a database to store news items, and e) a settings page to add or change sources of the news items. Additionally, the newsfeed list should also allow users to filter the news items based on topics, sources, and titles.", "label": 1}
{"text": "import { Component } from '@angular/core';\n\n@Component({\n selector: 'form-input',\n template: `\n <form>\n  <input type=\"text\" id=\"textInput\" />\n  <button type=\"submit\">Submit</button>\n </form>\n `\n})\nexport class FormInput {\n\n}", "label": 1}
{"text": "function extractChars(str, num){\n    return str.substring(0, num);\n}\n\nvar str = \"hello world\";\nvar output = extractChars(str, 5);\n\nconsole.log(output); // Output: hello", "label": 1}
{"text": "for(int i=0; i<=20; i++)\n{\n if (i%2 != 0)\n    std::cout << i <<\"\\n\";\n}", "label": 1}
{"text": "<!DOCTYPE html>\n<html>\n<head>\n  <style>\n    body {\n   background-color: black;\n   color: white;\n  }\n  </style>\n</head>\n<body>\n \n</body>\n</html>", "label": 1}
{"text": "\"o to th\"", "label": 1}
{"text": "['odd', 'even', 'odd', 'even', 'odd', 'even']", "label": 1}
{"text": "\"\"\"\ndef is_palindrome(num):\n    # Initializing variables\n    n = num\n    rev = 0\n    while (n > 0):\n        # Storing the remainder\n        rev = (rev * 10) + n % 10\n\n        # Updating n\n        n //= 10\n\n    # Checking if the reversed number is equal to the given number\n    if (num == rev):\n        return True\n\n    return False\n\n# Function call\nprint(is_palindrome(1234321))\n\"\"\"\n\nOutput: True", "label": 1}
{"text": "const ProfileTable = () => {\n  return (\n    <table>\n      <tr>\n        <th>Full Name</th>\n        <th>Username</th>\n        <th>Email</th>\n        <th>Phone</th>\n      </tr>\n      <tr>\n        <td>{user.full_name}</td>\n        <td>{user.username}</td>\n        <td>{user.email}</td>\n        <td>{user.phone}</td>\n      </tr>\n    </table>\n  );\n};", "label": 1}
{"text": "def remove_special_characters(string): \n    final_string = \"\" \n    for character in string: \n        if character.isalnum(): \n            final_string += character \n    return final_string", "label": 1}
{"text": "SELECT * \nFROM customer_orders \nWHERE total_price > 50;", "label": 1}
{"text": "class Student {\n    String name;\n    String studentId;\n    String course;\n    String[] subjects;\n    int age;\n    String email;\n    Float averageScore;\n    Map<String, Float> scoresBySubject;\n}", "label": 1}
{"text": "#include<stdio.h>\n#include<stdlib.h>\n#include<time.h>\n\nint main() \n{ \n\tsrand(time(0));\n\tint x;\n\tx = rand() % 6;\n\tprintf(\"%d\\n\",x);\n}", "label": 1}
{"text": "for num in range(start, end+1):\n    if num % 2 == 0:\n        print(num)", "label": 1}
{"text": "def find_strings(string_list, sub_string):\n    results = []\n    for string in string_list:\n        if sub_string in string:\n            results.append(string)\n    return results", "label": 1}
{"text": "int sum = x + y;\nSystem.out.println(\"The sum of the two numbers is: \" + sum);", "label": 1}
{"text": "AJAX is a combination of HTML, CSS, JavaScript, and XML that allows for dynamic, asynchronous web page updates without page reloads. AJAX is used to create a more interactive and responsive user experience by quickly updating parts of the page with new data from the server. It is also used to create web applications that have better performance and faster response times.", "label": 1}
{"text": "\"\"\"\nFind the greatest common divisor for two integer inputs using the Euclidean Algorithm\n\"\"\"\n\ndef greatest_common_divisor(int1, int2):\n  if int1 == 0:\n    return int2\n  elif int2 == 0:\n    return int1\n  elif int1 == int2:\n    return int1\n  else:\n    if int1 > int2:\n      return greatest_common_divisor(int2, int1 % int2)\n    else:\n      return greatest_common_divisor(int1, int2 % int1)\n\nif __name__ == \"__main__\":\n   print(greatest_common_divisor(30, 60))", "label": 1}
{"text": "def sum_series(n):\n    result = 0\n    for x in range(1, n+1):\n        result += (x**3) / (3*x+1)\n    return result\n\nprint(sum_series(14))", "label": 1}
{"text": "A set is an unordered collection of items while a list is an ordered collection of items. Sets have no duplicate elements so all the elements in a set must be unique. The elements inside a list may or may not be unique. Sets are faster when compared to lists for retrieving elements since lookups of items don't require continuous search whereas lists need linear search. The sets built-in functions such as union, intersection give us a quick way of performing mathematical set operations. The elements of set are unchangeable and once you create a set the element in the set remain the same. But, items in a list can be modified.", "label": 1}
{"text": "Python and Java are two of the most popular programming languages in the world. Python is a high-level, interpreted, general-purpose programming language while Java is a statically-typed, object-oriented language. Python is primarily used for web development, scripting and data science while Java is used for enterprise software development and Android development. Python features an easy-to-read syntax, dynamic typing, interpreted execution, and built-in support for specific tasks. Java has a more structured approach, relies on a compiler, and has a wide range of third-party libraries. Python is generally easier to learn and use, while Java provides optimized performance.", "label": 1}
{"text": "def count_words(s): \n    words = s.split() \n    returnCounter = dict.fromkeys(words, 0) \n    for word in words: \n        returnCounter[word] += 1\n    return returnCounter", "label": 1}
{"text": "The easiest way to install the Pillow package is through pip, the official package manager for Python. To install Pillow using pip, open the command line interface and type \"pip install Pillow\".", "label": 1}
{"text": "func addTwoIntegers(a: Int, b: Int) -> Int {\n    return a + b\n}", "label": 1}
{"text": "for (auto& item : myList) {\n  cout << item << endl;\n}", "label": 1}
{"text": "echo date('F j, Y');", "label": 1}
{"text": "The sentence \"Jack and Jill went up the hill\" can be tokenized into the following four tokens: \n[\"Jack\", \"and\", \"Jill\", \"went\", \"up\", \"the\", \"hill\"].", "label": 1}
{"text": "int[] arr = {4, 9, 3, 6, 2, 1}; \n\nArrays.sort(arr); \n\nSystem.out.println(Arrays.toString(arr));\n\n// Output: [1, 2, 3, 4, 6, 9]", "label": 1}
{"text": "import java.util.HashMap;\n\nHashMap<String, Integer> myMap = new HashMap<>();\n// adding key-value pairs to the HashMap\nmyMap.put(\"Key1\", 5);\nmyMap.put(\"Key2\", 8);\nmyMap.put(\"Key3\", 10);\n// retrieving values by keys\nint val1 = myMap.get(\"Key1\"); \nint val2 = myMap.get(\"Key2\"); \nint val3 = myMap.get(\"Key3\");\n// etc.", "label": 1}
{"text": "def add_matrices(matrix1, matrix2):\n    # assert that the matrices are of equal size\n    assert len(matrix1) == len(matrix2), \"Matrices should have the same size\"\n    assert len(matrix1[0]) == len(matrix2[0]), \"Matrices should have the same size\"\n\n    # add the elements\n    for i in range(len(matrix1)):\n        for j in range(len(matrix2[0])):\n            matrix1[i][j] += matrix2[i][j]\n\n    return matrix1", "label": 1}
{"text": "data = {\n  \"name\": \"John Doe\",\n  \"age\": 34,\n  \"hobbies\": [\"reading\", \"cycling\", \"movies\"],\n  \"address\": {\n    \"city\": \"London\",\n    \"country\": \"United Kingdom\"\n  }\n}\n\n# Parse the json to a dictionary\ndictionary = json.loads(data)", "label": 1}
{"text": "def combine_lists(list_1, list_2):\n    return list_1 + list_2\n\nlist_1 = [2, 4, 6]\nlist_2 = [3, 5, 7]\n\nprint(combine_lists(list_1, list_2))", "label": 1}
{"text": "class ReverseNumber(): \n    def __init__(self): \n        pass\n    \n    def reverse_number(self, num): \n      \n        reverse = 0\n  \n        # Iterate over the given number \n        while(num > 0): \n            reminder = num % 10\n  \n            # Constructing the reverse number\n            reverse = (reverse * 10) + reminder \n  \n            # Floor division\n            num = num // 10\n  \n        return reverse \n  \n# Driver Code \nif __name__ == '__main__': \n    rev = ReverseNumber()\n    print(rev.reverse_number(123))", "label": 1}
{"text": "import java.util.Random; \n\npublic class RandomArray {\n    public static void main(String[] args) {\n        Random rand = new Random(); \n  \n        float array[] = new float[10];  \n  \n        for(int i = 0; i < 10; i++) { \n            array[i] = rand.nextFloat(); \n        }\n  \n        System.out.println(\"Array of 10 random numbers between 0 and 1: \");\n        for (int i = 0; i < 10; i++) { \n            System.out.println(array[i]); \n        } \n    }\n}", "label": 1}
{"text": "let lowerCaseText = text.toLowerCase();\nconsole.log(lowerCaseText); // lowercasing", "label": 1}
{"text": "tasks = [t for t in tasks if not t.completed]", "label": 1}
{"text": "def print_indices(x, arr):\n    indices = []\n    for i in range(len(arr)):\n        if arr[i] == x:\n            indices.append(i)\n    return indices\n\nprint(print_indices(x, arr))  # [1, 4]", "label": 1}
{"text": "for i in range(5):\n    print(\"I love Python\")", "label": 1}
{"text": "def encrypt_string(string):\n    encrypted_string = \"\" \n\n    for char in string:\n        encrypted_string += chr(ord(char) + 5)\n\n    return encrypted_string", "label": 1}
{"text": "sorted_list = sorted(my_list, key=lambda x: x[1])", "label": 1}
{"text": "i = 0 \nwhile i < len(my_list): \n    print(my_list[i]) \n    i += 1", "label": 1}
{"text": "2,000 meters is equal to 2 kilometers.", "label": 1}
{"text": "<html>\n  <head>\n    <style>\n      body {\n        background-image: url(\"background.jpg\");\n        background-size: cover;\n        background-blur: 10px;\n      }\n      .container {\n        position: relative;\n        text-align: center;\n      }\n    </style>\n  </head>\n  <body>\n    <div class=\"container\">\n      <h1>Hello World</h1>\n    </div>\n  </body>\n</html>", "label": 1}
{"text": "import requests \n  \n# Creating list of words \nlist = [\"hello\", \"world\", \"fksgks\"] \n  \n# Iterating in the list of words \nfor i in list: \n    url = \"https://www.dictionary.com/browse/\"+i \n    try: \n        webpage = requests.get(url) \n  \n        # Valid word if request status  \n        # code is 200 \n        if webpage.status_code == 200: \n            valid = True\n        else: \n            valid = False\n    except: \n        valid = False\n              \nif valid == False: \n    print(\"False\")\nelse:\n    print(\"True\")", "label": 1}
{"text": "import json\n\ndef parse_json(json_str):\n    data = json.loads(json_str)\n\n    for key, values in sorted(data.items()):\n        print(key, \"=\", values)\n\nparse_json('{\"orange\": 4, \"apple\": 1, \"banana\": 2 }')", "label": 1}
{"text": "import requests\n\ndef get_content(url):\n    response = requests.get(url)\n    html = response.content\n    return html", "label": 1}
{"text": "public class Person {\n    private String name;\n    private int age;\n    \n    public Person(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n    \n    public String getName() {\n        return name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n}", "label": 1}
{"text": "def validate_email(email):\n    regex = '^[a-z0-9]+[\\._]?[a-z0-9]+[@]\\w+[.]\\w{2,3}$'\n    if re.search(regex,email):\n        return True\n    else:\n        return False", "label": 1}
{"text": "#Implement a function that takes in 2 strings and returns a new string consisting of alternating characters\ndef alt_string(str1, str2):\n    alt_str = \"\" \n    length = len(str1) if len(str1) <= len(str2) else len(str2)\n    \n    for i in range(length):\n        alt_str += str1[i] + str2[i]\n    \n    if len(str1) > len(str2):\n        alt_str += str1[length:]\n    elif len(str2) > len(str1):\n        alt_str += str2[length:]\n    \n    return alt_str", "label": 1}
{"text": "#Change the given code so that it prints the sentence \"Hello, World!\"\n\nprint(\"Hello, World!\")", "label": 1}
{"text": "import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'url_of_webpage'\npage = requests.get(url)\nsoup = BeautifulSoup(page.content, 'html.parser')\ntext = soup.find_all(text=True)\n\nfor t in text:\n print(t)", "label": 1}
{"text": "function fibonacci(n) {\n  if (n == 0 || n == 1) {\n    return n;\n  }\n\n  let fibo = [0, 1];\n\n  for (let i = 2; i <= n; i++) {\n    let nextFibonacci = fibo[i - 1] + fibo[i - 2];\n    fibo.push(nextFibonacci);\n  }\n\n  return fibo[n];\n}", "label": 1}
{"text": "int[] arr = new int[oldArray.length];\nArrays.fill(arr, 0);", "label": 1}
{"text": "SELECT COUNT(*)\nFROM Employee", "label": 1}
{"text": "<html>\n    <head>\n    <title>Time Display</title>\n    <script>\n        function updateTime() {\n            let currTime = new Date();\n            document.getElementById(\"currentTime\").innerHTML = currTime.toLocaleTimeString();\n        }\n    </script>\n    </head>\n    <body onload=\"updateTime()\">\n        <div id=\"currentTime\"></div>\n    </body>\n</html>", "label": 1}
{"text": "public class SimpleCalculator {\n    public SimpleCalculator() {}\n\n    public double add(double a, double b) {\n        return a + b;\n    }\n\n    public double subtract(double a, double b) {\n        return a - b;\n    }\n\n    public double multiply(double a, double b) {\n        return a * b;\n    }\n\n    public double divide(double a, double b) {\n        return a / b;\n    }\n\n    public double sqrt(double a) {\n        return Math.sqrt(a);\n    }\n}", "label": 1}
{"text": "let today= new Date();\nlet dd = String(today.getDate()).padStart(2, '0');\nlet mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\nlet yyyy = today.getFullYear();\n\nconsole.log(yyyy+mm+dd);", "label": 1}
{"text": "SELECT AVG(Age) \nFROM People \nWHERE City = {city}", "label": 1}
{"text": "let result = [];\n\nfor (let i = 0; i < my_data.length; i++) {\n    let max_val = 0;\n    for (let j = 0; j < my_data[i].length; j++) {\n        if (my_data[i][j] > max_val) {\n            max_val = my_data[i][j];\n        }\n    }\n    result.push(max_val);\n}\n\nconsole.log(result);", "label": 1}
{"text": "SELECT DATEDIFF(date_field_2, date_field_1) AS Days_Difference \nFROM table;", "label": 1}
{"text": "Fruits: Apple, Banana, Lemon\nVegetables: Carrot, Tomato", "label": 1}
{"text": "public class Fibonacci {\n    public static void main(String[] args) {\n        int limit = 10;\n        System.out.print(\"Fibonacci Series of \"+limit+\" numbers: \");\n        for(int i=0; i<limit; i++){\n            System.out.print(fibonacci(i)+\" \");\n        }\n    }\n \n    public static int fibonacci(int number){\n        if(number==0 || number==1){\n            return number;\n        }\n \n        return fibonacci(number-1) + fibonacci(number-2);\n    }\n}", "label": 1}
{"text": "import numpy as np\n\nrand_sample = np.random.randint(low=0, high=100, size=10)", "label": 1}
{"text": "import matplotlib.pyplot as plt\n  \nmale_salaries = [3000, 3500, 3000, 3500, 4000] \nfemale_salaries = [2500, 3000, 2500, 3000, 3500] \n  \nplt.bar(range(len(male_salaries)), male_salaries, width=0.35, \n            label='Male Salaries') \n  \nplt.bar([x+0.35 for x in range(len(female_salaries))], \n            female_salaries, width=0.35, \n            label='Female Salaries') \n  \nplt.xlabel('Employee') \nplt.ylabel('Salaries') \nplt.title('Salaries per Gender') \nplt.legend(loc=\"upper right\") \nplt.show()", "label": 1}
{"text": "function isLeapYear(year) {\n  return (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));\n}", "label": 1}
{"text": "SELECT \n  user_id, COUNT(*) AS num_posts \nFROM\n  table\nGROUP BY \n  user_id\nHAVING \n  COUNT(*) > 5", "label": 1}
{"text": "char_list = list(string)\nprint(char_list) # Output: ['H', 'e', 'l', 'l', 'o', ' ', 'W', 'o', 'r', 'l', 'd', '!']", "label": 1}
{"text": "def frequency_count(word):\n    # dictionary to store the frequency of occurrence\n    frequency = {}\n\n    # iterate through each character\n    for char in word:\n        # if the character is present in the frequency dictionary\n        if char in frequency:\n            # increase the count of the character\n            frequency[char] += 1\n        else:\n            # add the character to the dictionary and set its count to 1\n            frequency[char] = 1\n\n    return frequency\n\n# Calculate the frequency of occurrence\nfrequencies = frequency_count(word)\nprint(frequencies) # Output: {'p': 1, 'r': 2, 'o': 2, 'g': 2, 'a': 1, 'm': 1, 'i': 1, 'n': 1}", "label": 1}
{"text": "/(\\S+)@(\\S+)/", "label": 1}
{"text": "entries = db.execute_query(\"SELECT * FROM users ORDER BY id DESC LIMIT 30\")", "label": 1}
{"text": "The GCD of numbers 8 and 12 is 4.", "label": 1}
{"text": "class List:\n    def __init__(self, data):\n        self.data = data\n    \n    def isEmpty(self):\n        return not self.data", "label": 1}
{"text": "[2, 3, 4, 5, 1]", "label": 1}
{"text": "db.collection.find({user_id: {$gt: 5}})", "label": 1}
{"text": "function convertToFahrenheit(celsius) {\n  return (celsius * 1.8) + 32;\n}\n\nfunction convertToCelsius(fahrenheit) {\n  return (fahrenheit - 32) / 1.8;\n}", "label": 1}
{"text": "for i in range(20):\n    print(\"Hello World\")", "label": 1}
{"text": "8 / (2 * (2 + 2))   // parentheses moved to form the correct expression which yields the correct answer (16).", "label": 1}
{"text": "def reverse_list(l):\n    return l[::-1]", "label": 1}
{"text": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"age\": 23\n}", "label": 1}
{"text": "def count_ways(n): \n    if n==1 or n==0: \n        return 1\n    elif n==2: \n        return 2\n    else: \n        return count_ways(n-1) + count_ways(n-2) + count_ways(n-3)", "label": 1}
{"text": "p {\n  font-weight: bold;\n}", "label": 1}
{"text": "class Circle { \n  constructor(radius) {\n    this.radius = radius;\n  }  \n  \n  get area() { \n    return Math.PI * this.radius * this.radius; \n  }  \n}", "label": 1}
{"text": "You can add elements from one list to another list in Python using the extend() method, which adds all elements of one list to another list.\n\nFor example, if you have the lists list1 and list2, you can add all elements of list2 to list1 with the following code:\n\nlist1.extend(list2)\n\nAlternatively, you can use the list.append() method to add each element of list2 to list1 one-by-one. For example:\n\nfor element in list2:\n    list1.append(element)", "label": 1}
{"text": "#include <stdio.h>\nint main()\n{\n    int i = 0;\n    while(1)\n    {\n        printf(\"%d\\n\",i);\n        i++;\n    }\n    return 0;\n}", "label": 1}
{"text": "String subject = \"Computer Science\";", "label": 1}
{"text": "import json\n\ndata_dict = json.loads(data)\nname = data_dict[\"name\"]\nage = data_dict[\"age\"]\nprint(name)\nprint(age)", "label": 1}
{"text": "^.*a.*$", "label": 1}
{"text": "function maxValue(n: number, arr: number[]): number {\n let max = arr[0];\n for (let i = 1; i < n; i++) {\n  if (arr[i] > max) max = arr[i];\n }\n return max;\n}\n\n// Call the function\nlet max = maxValue(5, [8,2,10,12,16]);\n\n// Output the result\nconsole.log(\"The maximum value is \" + max);", "label": 1}
{"text": "def create_list(start, end):\n    \"\"\"\n    Create a code to generate a list of all numbers between a given start and end number\n    \"\"\"\n    number_list = []\n    for num in range(start, end+1):\n        number_list.append(num)\n    return number_list\n\nstart = 10\nend = 20\n\nresult = create_list(start, end)\nprint(result) #[10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]", "label": 1}
{"text": "#include<iostream>\nusing namespace std;\n \nint partition (int arr[], int low, int high)\n{\n    int pivot = arr[high];    // pivot\n    int i = (low - 1);  // Index of smaller element\n \n    for (int j = low; j <= high- 1; j++)\n    {\n        if (arr[j] <= pivot)\n        {\n            i++;    // increment index of smaller element\n            swap(arr[i], arr[j]);\n        }\n    }\n    swap(arr[i + 1], arr[high]);\n    return (i + 1);\n}\n \n \nvoid quickSort(int arr[], int low, int high)\n{\n    if (low < high)\n    {\n        int pi = partition(arr, low, high);\n \n        quickSort(arr, low, pi - 1);\n        quickSort(arr, pi + 1, high);\n    }\n}\n \nvoid printArray(int arr[], int n)\n{\n    for (int i=0; i < n; i++)\n        cout << arr[i] << \" \";\n}", "label": 1}
{"text": "<html>\n  <body>\n    <form>\n      <input type=\"checkbox\" />\n    </form>\n  </body>\n</html>", "label": 1}
{"text": "def getGrade(score):\n    if score >= 90:\n        return \"A\"\n    elif score >= 80:\n        return \"B\"\n    elif score >= 70:\n        return \"C\"\n    elif score >= 60:\n        return \"D\"\n    else:\n        return \"F\"", "label": 1}
{"text": "new_dict = {**dic1, **dic2}", "label": 1}
{"text": "*\n**\n***", "label": 1}
{"text": "def check_equal(x, y)\n{\n    if (x == (y * -1)) \n    {\n        return true;\n    } \n    else \n    {\n        return false;\n    }\n}", "label": 1}
{"text": "A linked list is a linear data structure where each node is connected to the next node by a pointer.", "label": 1}
{"text": "def check_number(number, condition):\n    if condition and number % 2 == 0:\n        return \"yes\"\n    else:\n        return \"no\"", "label": 1}
{"text": "The factorial of 7 is 5040.", "label": 1}
{"text": "An array of objects can be created using the syntax below:\n\nlet arrayOfObjects = [\n  { key1: 'value1', key2: 'value2' },\n  { key1: 'value3', key2: 'value4' },\n  { key1: 'value5', key2: 'value6' }\n];", "label": 1}
{"text": "SELECT *\nFROM users \nWHERE username LIKE 'S%';", "label": 1}
{"text": "function toggleFontSize(){\n  let fontSize = document.body.style.fontSize;\n  if(fontSize === \"\") {\n    document.body.style.fontSize = \"2rem\";\n  } else{\n    document.body.style.fontSize = \"\"\n  }\n}", "label": 1}
{"text": "def repeat_string(string, n):\n    \"\"\"\n    This function takes a string and an integer as input and returns the \n    string repeated n times.\n\n    Parameters:\n    string (string): The string that needs to be repeated.\n    n (int): The number of times the string needs to be repeated.\n\n    Returns:\n    string: The repeated string\n    \"\"\"\n    return string * n", "label": 1}
{"text": "# Add the following line to the top of this Python code to make it syntactically correct.\ndef test_it():\n    print(\"This is a test\")", "label": 1}
{"text": "def create_list(start, end, step): \n    list = [] \n    while start < end: \n        list.append(start) \n        start += step \n    return list", "label": 1}
{"text": "<form action=\"\">\n  <label for=\"name\">Name: </label>\n  <input type=\"text\" name=\"name\" id=\"name\" />\n  <label for=\"email\">Email: </label>\n  <input type=\"text\" name=\"email\" id=\"email\" />\n  <label for=\"address\">Address: </label>\n  <input type=\"text\" name=\"address\" id=\"address\" />\n  <button type=\"submit\">Submit</button>\n</form>", "label": 1}
{"text": "const sum = (a, b) => a + b;", "label": 1}
{"text": "def split_string(string, separator):\n    return string.split(separator)", "label": 1}
{"text": "int arr[3][3] = {{1,2,3}, {4,5,6}, {7,8,9}};", "label": 1}
{"text": "In JavaScript, a class is defined using the class keyword. The class definition consists of a constructor method, which is called automatically when an instance of the class is created, and other methods which can be called on the instance.\n```\nclass MyClass{\n    constructor(){\n        //Constructor code\n    }\n    //Class methods\n}\n```", "label": 1}
{"text": "In Lua, date strings can be formatted using os.date(). For example, the following code will give the date string in the format \"YYYY-MM-DD\":\n\ndateString = os.date(\"%Y-%m-%d\")", "label": 1}
{"text": "<!DOCTYPE html>\n<html>\n<head>\n  <title>Simple PHP Website</title>\n</head>\n<body>\n  <?php\n    $data = [\n      [\n        \"firstname\" => \"Oliver\",\n        \"lastname\" => \"Smith\",\n        \"address\" => \"1234 Main Street, City, Country\"\n      ],\n      [\n        \"firstname\" => \"John\",\n        \"lastname\" => \"Doe\",\n        \"address\" => \"5678 Long Road, City, Country\"\n      ],\n      [\n        \"firstname\" => \"Chris\",\n        \"lastname\" => \"Fitzgerald\",\n        \"address\" => \"9123 Eagle Street, City, Country\"\n      ]\n    ]; \n\n    foreach($data as $person) {\n      echo '<p>';\n      echo $person['firstname'] . ' ' . $person['lastname'] . '<br/>';\n      echo $person['address'];\n      echo '</p>';\n    }\n  ?>\n</body>\n</html>", "label": 1}
{"text": "SELECT Id, Name, Age FROM employee;", "label": 1}
{"text": "class Bird {\n    constructor(name, color) {\n        this.name = name;\n        this.color = color;\n    }\n\n    // Add another method or property\n    \n    fly() {\n        console.log(`${this.name} is flying`);\n    }\n}", "label": 1}
{"text": "def create_matrix(size):\n    matrix = []\n    for i in range(size):\n        row = []\n        for j in range(size):\n            row.append(0)\n        matrix.append(row)\n    return matrix", "label": 1}
{"text": "<script> \nfunction showTooltip() {\n    // code to show tooltip\n}\n\ndocument.onmouseover = showTooltip;\n</script>", "label": 1}
{"text": "try {\n    // code to be tried\n} catch (Exception e) {\n    // code to be executed if exception occurs\n}", "label": 1}
{"text": "Creating a database table involves the following steps:\n1. Connect to the desired database.\n2. Create a SQL statement to define the table's structure and establish fields, field types, primary keys, etc.\n3. Execute the SQL statement to create the table.\n4. Close the database connection.", "label": 1}
{"text": "import numpy as np\n\na = [1, 2, 3, 4, 5]\nb = np.array([i % 2 for i in a])", "label": 1}
{"text": "import string\nimport random\n\ndef generate_password(length):\n    symbols = string.punctuation\n    numbers = string.digits\n    lowercase = string.ascii_lowercase\n    uppercase = string.ascii_uppercase\n    \n    characters = symbols + numbers + lowercase + uppercase\n    password = random.choice(symbols) + random.choice(numbers) + random.choice(lowercase) + random.choice(uppercase)\n    \n    for _ in range(length-4):\n        password += random.choice(characters)\n        \n    return password", "label": 1}
{"text": "string = \"Hello World\"\n\ndef count_characters(string):\n    count_dict = {}\n    for char in string:\n        if char not in count_dict:\n            count_dict[char] = 1\n        else:\n            count_dict[char] += 1\n    return count_dict\n\nprint(count_characters(string))", "label": 1}
{"text": "string = \"Hello World!\"\n\nfirst_char = string[0]\nlast_char = string[-1]\n\nprint(first_char, last_char)", "label": 1}
{"text": "sum_of_all_blocks = 1750", "label": 1}
{"text": "def concatenate_arrays(arr1, arr2):\n    new_array = arr1 + arr2\n    return new_array\n\narr1 = [1,2,3]\narr2 = [5,6]\nprint(concatenate_arrays(arr1, arr2))", "label": 1}
{"text": "SGVsbG8gV29ybGQh", "label": 1}
{"text": "CREATE TABLE movies (\n    id INT NOT NULL AUTO_INCREMENT,\n    title VARCHAR(255) NOT NULL,\n    release_date DATE NOT NULL,\n    PRIMARY KEY (id)\n);", "label": 1}
{"text": "<form>\n    <input type=\"email\" name=\"email\" pattern=\"[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,}$\" required>\n    <input type=\"submit\" value=\"Submit\">\n</form>", "label": 1}
{"text": "The HTML element for displaying a hyperlink is 'a'.", "label": 1}
{"text": "A HashMap can be used to store the data structure. It uses the numbers as the key, and their frequency could be the value associated with the key.", "label": 1}
{"text": "def character_frequency(word):\n    freq_dict = {}\n    for char in word:\n        if char in freq_dict:\n            freq_dict[char] += 1\n        else:\n            freq_dict[char] = 1\n    return freq_dict\n\nword = 'Python'\nprint(character_frequency(word))\n# {'P': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}", "label": 1}
{"text": "def sum_special(arr):\n    temp = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            temp += arr[i] * arr[j]\n    return temp", "label": 1}
{"text": "numbers = [1, 2, 3, 4, 5, 6, 7, 8]\nnew_list = [num for num in numbers if num % 2 != 0]\nprint(new_list)", "label": 1}
{"text": "def remove_last_two(s):\n    return s[:-2]", "label": 1}
{"text": "SELECT COUNT(gender) \nFROM student \nWHERE gender = 'female';", "label": 1}
{"text": "if userID > 0:\n    print(\"Welcome new user\")\nelse:\n    print(\"User ID is invalid\")", "label": 1}
{"text": "<canvas id=\"myCanvas\" width=\"500\" height=\"250\"></canvas>", "label": 1}
{"text": "The command to create an array in Java is \"int[ ] arr = new int[size]\".", "label": 1}
{"text": "Python uses dynamic typing, meaning that the type of data in a variable is not explicitly declared, instead it is automatically determined by the interpreter when a value is assigned to a variable. This allows for data types to be changed throughout the course of a program.", "label": 1}
{"text": "$my_array = array('apple', 'orange', 'banana');", "label": 1}
{"text": "var arr = [1,2,3,4,5,6];\n\nconsole.log(arr.length);\n#output: 6", "label": 1}
{"text": "def prime_numbers(n): \n    primes = [] \n    for num in range(2, n+1): \n        is_prime = True\n        for i in range(2, num): \n            if (num % i == 0): \n                is_prime = False\n        if is_prime: \n            primes.append(num) \n    return primes", "label": 1}
{"text": "import sys\n\nif __name__ == '__main__':\n    args = sys.argv\n    if len(args) > 1:\n        command = args[1]\n        print(f'Executing command: {command}')\n        os.system(command)", "label": 1}
{"text": "The result of XORing 1010 and 0101 is 1111.", "label": 1}
{"text": ".alert-box {\n    background-color: red;\n}", "label": 1}
{"text": "SELECT COUNT(*) FROM people WHERE lastName = 'Smith';", "label": 1}
{"text": "my_dict = {'key1':'value1','key2':'value2'}", "label": 1}
{"text": "div {\n    width: 200px;\n}", "label": 1}
{"text": "[{'name': 'John', 'age': '21'},\n {'name': 'Jane', 'age': '27'},\n {'name': 'Jack', 'age': '38'}]", "label": 1}
{"text": "int findMinMax(int arr[], int n, bool min) {\n    int minMax = INT_MAX;\n    for (int i = 0; i < n; i++) {\n        if (min) {\n            if (arr[i] < minMax) {\n                minMax = arr[i];\n            }\n        } else {\n            if (arr[i] > minMax) {\n                minMax = arr[i];\n            }\n        }\n    }\n    return minMax;\n}", "label": 1}
{"text": "function flattenArray(arr, depth) {\n  let result = [];\n  \n  for (let item of arr) {\n    if (Array.isArray(item) && depth > 0) {\n      result.push(...flattenArray(item, depth - 1)); // Recursively flatten the array\n    } else {\n      result.push(item);\n    }\n  }\n  \n  return result;\n}", "label": 1}
{"text": "import time\n\nfor i in range(10):\n    print(i)\n    time.sleep(1)", "label": 1}
{"text": "def triangle_area(side):\n return side * (side ** 0.5) / 2", "label": 1}
{"text": "class Student\n{\nprivate:\n    int age;\n    string name;\npublic:\n    Student(int a, string n) : age(a), name(n) {}\n    int getAge() { return age; }\n    string getName() { return name; }\n    void setAge(int a) { age = a; }\n    void setName(string n) { name = n; }\n};", "label": 1}
{"text": "Python supports for loops, while loops, and nested loops. Additionally, the loop statement can be used to construct an infinite loop.", "label": 1}
{"text": "for i in range(9, 26):\n    print(i)", "label": 1}
{"text": "def fibonacci(n):\n  a = 0\n  b = 1\n  if n < 0:\n    print(\"Incorrect input\")\n  elif n == 0:\n    return a\n  elif n == 1:\n    return b\n  else:\n     for i in range(2,n):\n       c = a + b\n       a = b\n       b = c\n     return b", "label": 1}
{"text": "public class MaximumPairSum { \n\n    static int findMaximumPairSum(int arr[]) { \n        int max1 = Integer.MIN_VALUE; \n        int max2 = Integer.MIN_VALUE; \n        int max3 = Integer.MIN_VALUE; \n        int max4 = Integer.MIN_VALUE; \n\n        for (int i = 0; i < arr.length; i++) { \n \n            if (arr[i] > max1) { \n \n                max4 = max3; \n                max3 = max2; \n                max2 = max1; \n                max1 = arr[i]; \n            } \n\n            else if (arr[i] > max2) { \n                max4 = max3; \n                max3 = max2; \n                max2 = arr[i]; \n            } \n\n            else if (arr[i] > max3) { \n                max4 = max3; \n                max3 = arr[i]; \n            } \n\n            else if (arr[i] > max4) \n                max4 = arr[i]; \n        } \n        return max1 + max2 + max3 + max4; \n    } \n \n    public static void main(String[] args) \n    { \n        int arr[] = { 2, 10, -4, 3, 14, 8 }; \n        System.out.println(findMaximumPairSum(arr)); \n    } \n}", "label": 1}
{"text": "public class SumSquares {\n    public static int sumSquares(int k, int n) {\n        int sum = 0;\n        for(int i = k; i <= n; i++) {\n            if (i % 2 == 0) {\n                sum += (i * i);\n            }\n        }\n        return sum;\n    }\n}", "label": 1}
{"text": "p {\n    color: blue;\n}", "label": 1}
{"text": "A simple algorithm to find the maximum value in a given list of integers is to start with the first element and compare it with the subsequent elements. If a larger element is found, update the maximum value and continue comparing. At the end of the loop, the maximum value will hold the maximum value from the given list.", "label": 1}
{"text": "let myArr = [1, 2, 3, 4].filter((item, index, arr) => arr.indexOf(item) === index);", "label": 1}
{"text": "echo \"Welcome!\"", "label": 1}
{"text": "public static boolean isStringLongerThan5(String str) {\n  return str.length() > 5;\n}", "label": 1}
{"text": "function quadraticEquation(a, b, c) {\n    let result;\n    let delta = (b * b) - (4 * a * c);\n    if (delta > 0) {\n      result = {\n        root1: (-b + Math.sqrt(delta)) / (2 * a),\n        root2: (-b - Math.sqrt(delta)) / (2 * a)\n      };\n    }\n    else if (delta == 0) {\n      result = {\n        root1: (-b + Math.sqrt(delta)) / (2 * a)\n      };\n    }\n    else {\n      result = {\n        root1: 'cannot calculate the roots'\n      };\n    }\n    return result;\n  }", "label": 1}
{"text": "Dynamic Programming (DP) is an algorithmic technique used to solve optimization problems. Specifically, the Knapsack problem is a popular problem which is solved using the DP approach. The idea is to solve the problem by breaking it into smaller sub-problems and storing the results of each subproblem in a table. This table is referred to as the DP table, and is used to solve larger problems more efficiently. The DP approach is also used to optimally solve problems that have overlapping subproblems; this technique is known as memoization. This method of solving the Knapsack problem involves constructing a two dimensional array of items and weights, and then iterating through each row and column in the table to find the optimal solution.", "label": 1}
{"text": "# Finds two numbers in an array that have the largest sum\ndef getMaxSum(arr):\n    # Initialize the sum to the maximum possible value\n\tmaxSum = -float('inf')\n\t\n\t# Iterate over all elements of the array\n\tfor i in range(len(arr)):\n\t\tfor j in range(i+1, len(arr)):\n\t\t\t# Compare the current sum to the maximum sum\n\t\t\tmaxSum = max(maxSum, arr[i] + arr[j])\n\n    # Return the largest sum\n\treturn maxSum", "label": 1}
{"text": "string = 'hello world'\nstring = string.upper()\nprint(string)", "label": 1}
{"text": "//recursive approach\nNode *deleteKey(Node *head, int k) \n{ \n    Node *curr = head; \n    if (curr == NULL) \n        return NULL; \n\n    // check for head node \n    if (curr->key == k) { \n        Node *temp = curr; \n        head = curr->next; \n        free(temp); \n        return deleteKey(head, k); \n    } \n\n    // check for other nodes \n    while (curr->next != NULL) { \n        if (curr->next->key == k) { \n            Node *temp = curr->next; \n            curr->next = curr->next->next; \n            free(temp); \n        } \n        curr = curr->next; \n    } \n    return head; \n}", "label": 1}
{"text": "for i in range (0, len(string), 2):\n    print(string[i], end = '')", "label": 1}
{"text": "my_dict = {'a': 1, 'b': 2, 'c': 3, 'd': 4}\n\n# remove element 'd'\nmy_dict.pop('d', None)\n\n# print resulting dictionary\nprint(my_dict)\n\n# Output: {'a': 1, 'b': 2, 'c': 3}", "label": 1}
{"text": "\"\"\"\nCreate a script that can predict the next letter in a given string of text\n\"\"\"\nimport tensorflow as tf\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\n\ndef predict_next_letter(text):\n  data = [ord(char) for char in text]\n  data = pad_sequences([data], maxlen=10, truncating='post')\n  prediction = model.predict(data)\n  index = tf.argmax(prediction[0]).numpy()\n  \n  return chr(index)\n\nif __name__ == '__main__':\n    print(predict_next_letter('Hello'))", "label": 1}
{"text": "\"\"\"\nParse an XML document and return a JSON object containing the data\n\"\"\"\nimport xml.etree.ElementTree as ET\nimport json\n\ndef parse_xml(xml_string):\n  root = ET.fromstring(xml_string)\n  \n  book = {}\n  for child in root:\n    book[child.tag] = child.text\n    \n  return json.dumps(book)\n  \nif __name__ == '__main__':\n    print(parse_xml('<book><title>Cat in the Hat</title><author>Dr. Seuss</author><year>1957</year></book>'))", "label": 1}
{"text": "\"\"\"\nGenerate a random password of length 16 using the letters a-z\n\"\"\"\nimport random\n\ndef generate_password():\n  letters = 'abcdefghijklmnopqrstuvwxyz'\n  return ''.join(random.choice(letters) for i in range(16))\n\nif __name__ == '__main__':\n    print(generate_password())", "label": 1}
{"text": "\"\"\"\nCreate a function that takes two strings as input and returns true if the characters in one of the string appear in order in the other string\n\"\"\"\ndef is_substring(str1, str2):\n  i = 0\n  for char in str2:\n    if char == str1[i]:\n      i += 1\n    if i == len(str1):\n      return True\n  return False\n\nif __name__ == '__main__':\n    print(is_substring('mystring', 'isthis')) # True", "label": 1}
{"text": "def shortest_increasing_subarray(nums):\n    res, curr = float('inf'), 0\n    for i in range(len(nums)-1):\n        if nums[i] < nums[i+1]: \n            curr += 1\n        else:\n            res = min(res, curr)\n            curr = 0\n    return max(res, curr) + 1", "label": 1}
{"text": "def print_string_keys(json_object):\n  for key in json_object:\n      if isinstance(json_object[key], str):\n          print(key)", "label": 1}
{"text": "def deep_copy(json_object):\n    import json\n    return json.loads(json.dumps(json_object))", "label": 1}
{"text": "def max_sum_path(matrix):\n    rows, columns = len(matrix), len(matrix[0])\n    dp = [[float(\"-inf\") for i in range(columns)] for j in range(rows)]\n    dp[0][0] = matrix[0][0]\n    for i in range(rows):\n        for j in range(columns):\n            if i > 0:\n                dp[i][j] = max(dp[i][j], dp[i-1][j] + matrix[i][j])\n            if j > 0:\n                dp[i][j] = max(dp[i][j], dp[i][j-1] + matrix[i][j])\n    return dp[-1][-1]", "label": 1}
{"text": "function packChars(str) {\n    var arr = [];\n    for (var i = 0; i < 8; i++) {\n        arr.push(str[i] || \" \");\n    }\n    return arr;\n}\npackChars(myString);\n// Returns [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"]", "label": 1}
{"text": "def get_complement(dna_string):\n    \"\"\"Get complement of given DNA string\"\"\"\n\n    # create a dictionary with complementary keys and values\n    dna_complement = {'A':'T', 'T':'A', 'C':'G', 'G':'C'}\n\n    # create an output variable\n    output_str = \"\"\n\n    # iterate over each char in the dna string and add its complement to the output string\n    for char in dna_string:\n        output_str += dna_complement[char]\n\n    return output_str", "label": 1}
{"text": "def factorial_(num):\n    \"\"\"Find the factorial of a given number\"\"\"\n\n    # initialize the value of factorial\n    factorial = 1\n\n    # multiply the number with the numbers \n    # below its value to get the factorial\n    for i in range(1, num+1):\n        factorial *= i\n    \n    return factorial", "label": 1}
{"text": "name.length == 5", "label": 1}
{"text": "def cosine_distance(a, b):\n  numerator = 0 \n  sum_a_sq = 0 \n  sum_b_sq = 0\n  for (x, y) in zip(a, b):\n    numerator += x*y\n    sum_a_sq += x**2\n    sum_b_sq += y**2\n  \n  denominator = (sum_a_sq * sum_b_sq)**.5\n  return numerator/denominator\n\ncosine_distance(vector1, vector2)", "label": 1}
{"text": "def quadratic_equation(a,b,c):\n   discriminant = pow(b,2)-4*a*c\n   if(discriminant < 0):\n      return \"No real solutions\"\n   elif(discriminant == 0):\n      return (-b + pow(discriminant, 0.5))/(2*a)\n   else:\n      return ((-b + pow(discriminant, 0.5))/(2*a), (-b - pow(discriminant, 0.5))/(2*a))", "label": 1}
{"text": "typeof value == 'number' && isFinite(value)", "label": 1}
{"text": "<button>Submit</button>", "label": 1}
{"text": "for char in text: \n    print(char)", "label": 1}
{"text": "import re\nlist = re.findall(r'\\d+', s)", "label": 1}
{"text": "def Fibonacci(n): \n   if n<0: \n      print(\"Incorrect input\") \n   # First Fibonacci number is 0 \n   elif n==0: \n      return 0\n   # Second Fibonacci number is 1 \n   elif n==1: \n      return 1\n   else: \n      return Fibonacci(n-1)+Fibonacci(n-2)", "label": 1}
{"text": "from polyglot.detect import Detector\n\nsentence = \"Dies ist ein Satz.\"\n\ndetector = Detector(sentence)\nprint(detector.language.name)\n\n# Output: German", "label": 1}
{"text": "import re\n\nstring = \"This is a string with multiple words and special characters !@#\"\nmatches = re.findall(r'(?<= ).*?(?= )', string)\nprint(matches)\n\n# Output: ['is', 'a', 'string', 'with', 'multiple', 'words', 'and', 'special']", "label": 1}
{"text": "import tkinter as tk\n\nroot = tk.Tk()\nframe = tk.Frame(root)\nframe.pack()\n\nlabel = tk.Label(frame, text=\"Hello World!\")\nlabel.pack()\n\nbutton = tk.Button(frame, text=\"Exit\", command=frame.quit)\nbutton.pack()\n\nroot.mainloop()", "label": 1}
{"text": "def filter_array(arr, num):\n    return [x for x in arr if x > num]", "label": 1}
{"text": "def prime_check(n):\n    if n < 2: \n        return False\n    if n == 2: \n        return True\n    if not n & 1: \n        return False\n    for x in range(3, int(n**0.5) + 1, 2):\n        if n % x == 0:\n            return False\n    return True", "label": 1}
{"text": "def is_palindrome(str): \n    # First convert all to the same case\n    str = str.lower()\n    return str == str[::-1]", "label": 1}
{"text": "// This is a basic example of a REST API that returns weather information for specific cities.\n\napp.get('/weather', (req, res) => {\n  const cityNames = req.query.cities.split(',');\n  const cities = {\n    'New York City': { lat: 40.7128, lng: 74.0060 },\n    'Los Angeles': { lat: 34.0522, lng: 118.2437 },\n    'San Francisco': { lat: 37.7749, lng: 122.4194 },\n  }\n\n  let results = [];\n  for (const city of cityNames) {\n     results.push(getWeather(cities[city]));\n  }\n\n  res.send(results);\n});\n\nfunction getWeather({lat, lng}) {\n  // Code to make external API call to get weather information\n}", "label": 1}
{"text": "class CustomMessage:\n    def __init__(self):\n        print(\"This is a custom message!\")", "label": 1}
{"text": "for(let i=0; i<=5; i++) {\n    console.log(i);\n}", "label": 1}
{"text": "str.upper()", "label": 1}
{"text": "<!DOCTYPE html>\n<html> \n  <head> \n    <title>Table with Background Color</title> \n  </head> \n \n  <body> \n    <h1>Table with Background Color</h1>\n  \n    <table style=\"background-color: #e6e6fa;\">\n      <tr>\n        <th>Name</th>\n        <th>Age</th>\n        <th>Occupation</th>\n      </tr>\n    </table>\n  </body> \n</html>", "label": 1}
{"text": "test", "label": 1}
{"text": "[1, 0, 1, 0]", "label": 1}
{"text": "def transpose(matrix):\n    row_major = []\n    row, col = len(matrix), len(matrix[0])\n    for i in range(col):\n        row_major.append([])\n        for j in range(row):\n            row_major[i].append(matrix[j][i])\n\n    return row_major", "label": 1}
{"text": "query getData {\n  users {\n    id\n    name\n    email\n  }\n}", "label": 1}
{"text": "def print_welcome(n):\n    for i in range(n):\n        print(\"Welcome\")", "label": 1}
{"text": "def removeLetters(inputString, letter):\n    outputString = \"\"\n    for c in inputString:\n        if c != letter:\n            outputString = outputString + c\n    return outputString\n\nprint(removeLetters(\"This string contains multiple letter t's.\", 't'))\n\nOUTPUT:\n\"This string contains multiple letter s.\"", "label": 1}
{"text": "def binary_to_decimal(binary):\n    decimal = 0 \n    length = len(binary) \n    for digit in range(0, length): \n        decimal += int(binary[digit]) * pow(2, length - digit - 1) \n    return decimal \n\nprint(binary_to_decimal(\"60\"))\nOutput: 24", "label": 1}
{"text": "pip install numpy", "label": 1}
{"text": "def compare_strings(s1, s2):\n    count = 0\n    for i in range(min(len(s1), len(s2))):\n        if s1[i] != s2[i]:\n            count += 1\n    return count", "label": 1}
{"text": "UPDATE employees \nSET employee_name='John'\nWHERE employee_id=101;", "label": 1}
{"text": "def cube(number):\n    return number**3", "label": 1}
{"text": "# Using Python:\n\n# Imports\nimport mysql.connector\n\n# Database connection\nmydb = mysql.connector.connect(\n    host=\"<hostname>\",\n    user=\"<username>\",\n    passwd=\"<password>\",\n    database=\"<database_name>\"\n)\n\n# Query\nmycursor = mydb.cursor()\n\nmycursor.execute(\"SELECT * FROM customers\")\n\n# Fetch results\nmyresult = mycursor.fetchall()\n\n# Return results\nfor x in myresult:\n    print(x)", "label": 1}
{"text": "10.times do \n    puts \u201cHello World\u201d\n end", "label": 1}
{"text": "let string = \"This is a test sentence\";\nlet wordsArray = string.split(\" \"); \nlet frequencyMap = {};\nwordsArray.forEach(word => {\n    frequencyMap[word] = frequencyMap[word] ? frequencyMap[word] + 1 : 1;\n});\nconsole.log(frequencyMap);\n// Output: {This: 1, is: 1, a: 1, test: 1, sentence: 1}", "label": 1}
{"text": "SELECT name, grade FROM Students; \n\nThis query will return the names and grades of all students from the Students table. For example, it will return \"Harry A\" and \"Selman B\" and \"Linda A\".", "label": 1}
{"text": "@app.route('/user', methods=['GET'])\ndef get_user():\n    user_id = request.args.get('user_id')\n    user = db.execute('SELECT * FROM user WHERE user_id = ?', (user_id,)).fetchone()\n    if user is None:\n`.        abort(404)\n\n    return jsonify(user)", "label": 1}
{"text": "const http = require('http');\nconst fs = require('fs');\nconst port = 3000;\n\nconst server = http.createServer((req, res) => { \n    if (req.method == 'POST') {\n        let body = '';\n        req.on('data', chunk => {\n            body += chunk.toString(); \n        });\n        req.on('end', () => {\n            console.log(body);\n            res.end('ok');\n        });\n    }\n});\n\nserver.listen(port);\nconsole.log(`Server listening on port ${port}`);", "label": 1}
{"text": "<input type=\"text\" value=\"Welcome\" />", "label": 1}
{"text": "def is_empty(str):\n  ''' This function takes as input a string and evaluates its \n      quantity to true or false.\n  '''\n  if len(str.strip()) == 0:\n    return True\n  else:\n    return False", "label": 1}
{"text": "import pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\n\n# Read data and split into training and test sets\ndata = pd.read_csv(\"customer_data.csv\")\nX = data.drop(\"target\", axis=1)\ny = data.target\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\n\n# Train the model\nclf = RandomForestClassifier()\nclf.fit(X_train, y_train)\n\n# Evaluate the model\nscore = clf.score(X_test, y_test)\nprint(\"Model accuracy:\", score)", "label": 1}
{"text": "The following regex expression can be used to solve this problem: \n(?<=.)(?=-.)|(?<!-.)", "label": 1}
{"text": "SELECT AVG(Purchase_Length) as Average_Purchase_Length \nFROM Purchase;", "label": 1}
{"text": "The following steps can be taken to create a tensorflow model to predict the probability of rain given an input dataset:\n\n1. Preprocess and clean the input data.\n2. Split the data into training and testing datasets.\n3. Build a neural network model with the input dataset.\n4. Compile the model with a suitable loss function, optimizer, and metrics.\n5. Train the model and evaluate the performance.\n6. Predictions can be made by passing a new input into the model.", "label": 1}
{"text": ".myClass {\n    width: 400px;\n    height: 200px;\n    border: 3px dotted yellow;\n}", "label": 1}
{"text": "x = lambda a : a[0]\nprint(x(\"Hello\"))", "label": 1}
{"text": "def is_sum_even(num1, num2):\n    \"\"\"Checks if the product of two numbers is even or odd.\"\"\"\n    sum = num1 * num2\n    return sum % 2 == 0\n\nif __name__ == \"__main__\":\n    is_even = is_sum_even(8, 12)\n    print(\"Is the sum even? \", is_even)", "label": 1}
{"text": "x = 10\ny = 15\nz = 5\n\n# Find the maximum\nmax_val = max(x, y, z)\n\nprint(f\"The maximum among {x}, {y}, and {z} is {max_val}.\")", "label": 1}
{"text": "# Calculate the probability\nprobability = mean(x > 5)\n\nprint(f\"Probability of getting a number greater than 5 from a range of 1 to 10 is {probability}.\")", "label": 1}
{"text": "def convert_list_to_str(list):\n    return \";\".join(list) \n\nprint(convert_list_to_str(list))", "label": 1}
{"text": "def filter_3_5(nums): \n    return [num for num in nums if num % 3 == 0 and num % 5 == 0]\n\nprint(filter_3_5(list))", "label": 1}
{"text": "function power(num, pow) {\n    let result = 1;\n    for (let i = 1; i <= pow; i++) {\n        result *= num;\n    }\n    return result;\n}", "label": 1}
{"text": "<form method=\"post\" action=\"submit.php\">\n  <input type=\"text\" name=\"name\" placeholder=\"Name\" required>\n  <input type=\"email\" name=\"email\" placeholder=\"Email\" required>\n  <input type=\"file\" name=\"photo\" placeholder=\"Photo\" required>\n  <input type=\"submit\" value=\"Submit\">\n</form>", "label": 1}
{"text": "SELECT name, COUNT(*) as visits \nFROM websites\nWHERE date = 'DD-MM-YYYY'\nGROUP BY name\nORDER BY visits DESC\nLIMIT 3;", "label": 1}
{"text": "#include <stdio.h>\n#include <stdlib.h>\n\n#define MAX_NUM_TEAMS 8\n\nstruct team { \n  int teamID; \n  char name[30]; \n};\n\nstruct bracket {\n  struct team *teams;\n  int numTeams;\n  int winningTeam;\n};\n\nvoid createBracket(struct bracket *bracket, int numTeams) {\n  bracket->teams = calloc(numTeams, sizeof(struct team));\n  bracket->numTeams = numTeams; \n  int matchups[numTeams/2][2] = {0};\n  \n  // Generate a list of matchups\n  int i, j;\n  for (i = 0; i < numTeams/2; i++) {\n    for (j = 0; j < 2; j++) {\n      int randID = rand() % numTeams;\n      int found = 0;\n      int k;\n      for (k = 0; k < i*2+j; k++) {\n        if (randID == matchups[k/2][k%2]) {\n          found = 1;\n          break;\n        }\n      }\n      if (!found) {\n        matchups[i][j] = randID;\n      }\n      else {\n        j--;\n      }\n    }\n  }\n  \n  // Generate list of teams\n  for (i = 0; i < numTeams; i++) {\n    struct team t;\n    t.teamID = i;\n    // Randomly generate team name\n    int n;\n    for (n = 0; n < 30; n++) {\n      t.name[n] = (rand() % 26) + 'a';\n    }\n    bracket->teams[i] = t;\n  }\n  \n  // Initialize the bracket with teams\n  for (i = 0; i < numTeams/2; i++) {\n    bracket->teams[matchups[i][0]].opponent = matchups[i][1];\n    bracket->teams[matchups[i][1]].opponent = matchups[i][0];\n  } \n}\n\nvoid evaluateBracket(struct bracket *bracket, int winningTeam) {\n  bracket->winningTeam = winningTeam;\n  \n  int count = 0;\n  int currTeam = winningTeam;\n  int opponent;\n  \n  while (currTeam != 0) {\n    opponent = bracket->teams[currTeam].opponent;\n    bracket->teams[opponent].opponent = -1;\n    currTeam = opponent;\n    count++;\n  }\n  if (count >= bracket->numTeams/2) {\n    printf(\"Winner: %s\\n\", bracket->teams[winningTeam].name);\n  }\n  else {\n    printf(\"The team %s has been eliminated from the tournament\\n\", bracket->teams[winningTeam].name);\n  }\n}", "label": 1}
{"text": "#include <stdio.h>\nint main()\n{\n   int array[100], minimum, size, c;\n \n   printf(\"Enter the number of elements in array\\n\");\n   scanf(\"%d\",&size);\n \n   printf(\"Enter %d integers\\n\", size);\n \n   for ( c = 0 ; c < size ; c++ )\n      scanf(\"%d\", &array[c]);\n \n   minimum = array[0];\n \n   // Optimization\n   int start  = 1;\n   int end  = size-1;\n   while(start <= end){\n     int mid = (start + end)/2;\n     if(array[mid] < minimum){\n       minimum = array[mid];\n       end = mid - 1;\n     } else {\n       start = mid + 1;\n     }\n   } \n \n   printf(\"Minimum element is %d.\\n\", minimum);\n   return 0;\n}", "label": 1}
{"text": "def generate_pattern(x):\n    arr = []\n    for i in range(11):\n        arr.append(x**i)\n    return arr", "label": 1}
{"text": "class Customer\n  attr_accessor :name, :age, :address\n\n  def initialize(name, age, address)\n    @name = name\n    @age = age\n    @address = address\n  end\nend", "label": 1}
{"text": "x, y, z = 1, 2, 3", "label": 1}
{"text": "let sum = [1, 2, 3, 4, 5].reduce((acc, currentVal) => acc + currentVal, 0);", "label": 1}
{"text": "int[] reverse = new int[arr.length]; \n \nint j = arr.length; \n  \n// Initializing the index of reverse array \nint i; \n  \nfor (i = 0; i < arr.length; i++)  \n{ \n    reverse[j - 1] = arr[i]; \n  \n    j--; \n}", "label": 1}
{"text": "switch number {\n case _ where number > 10: \n    print(\"The number is greater than 10\") \n default: \n    break \n}", "label": 1}
{"text": "words = sentence.split(\" \")", "label": 1}
{"text": "let maxNum = [1, 2, 3, 4, 5].reduce(function(a, b){\n    return Math.max(a, b)\n});", "label": 1}
{"text": "import java.util.HashMap;\n\npublic class Anagram { \n\n    // Utility method to check whether two strings are anagram or not \n    static boolean areAnagram(String A, String B) { \n  \n        // If length of both strings is not same, then they can't be anagram\n        if (A.length() != B.length()) \n            return false; \n  \n        // Make a copy of string\n        A = A.toLowerCase(); \n        B = B.toLowerCase(); \n  \n        // Create a hash map\n        HashMap<Character, Integer> map = new HashMap<>(); \n  \n        // Iterate through both strings and increment count\n        // in hash map \n        for (int i = 0; i < A.length(); i++) { \n            char ch = A.charAt(i); \n  \n            if (map.containsKey(ch)) {\n                int f = map.get(ch); \n                f++; \n                map.put(ch, f); \n            } else {\n                map.put(ch, 1); \n            }\n        } \n  \n        for (int i = 0; i < B.length(); i++) {\n            char ch = B.charAt(i); \n            if (map.containsKey(ch)) {\n                int f = map.get(ch); \n\n                // If char is not present, then by default \n                // f would be 0\n                if (f == 0) \n                    return false; \n  \n                f--; \n                map.put(ch, f); \n            } else {\n                return false; \n            }\n        }\n        return true;\n    } \n  \n    // Driver code \n    public static void main (String[] args) throws java.lang.Exception { \n        String A = \"listen\";\n        String B = \"silent\";\n        if (areAnagram(A, B)) {\n            System.out.println(\"The two strings are anagrams of each other.\");\n        } else {\n            System.out.println(\"The two strings are not anagrams of each other.\");\n        }\n    } \n}", "label": 1}
{"text": "def sort_str(str1, str2): \n    # extract the words from the strings \n    str1_list = list (map (str, str1)) \n    str2_list = list (map (str, str2)) \n  \n    # sort the strings \n    str1_list.sort() \n    str2_list.sort() \n  \n    # join the chars of the strings \n    sorted_str1 = ''.join(str1_list) \n    sorted_str2 = ''.join(str2_list) \n  \n    # check if the words are the same \n    if (sorted_str1 == sorted_str2): \n        return True\n    else: \n        return False\n            \nprint(sort_str(\"javascript\", \"python\"))", "label": 1}
{"text": "SELECT AVG(age)\nFROM students\nWHERE class = 'XYZ';", "label": 1}
{"text": "/hello\\s+people/", "label": 1}
{"text": "<input type=\"text\" required>", "label": 1}
{"text": "int numbers[10] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};", "label": 1}
{"text": "public class Example{\n    public int num;\n    \n    public Example(int num){\n        this.num = num;\n    }\n}", "label": 1}
{"text": "Regex: https?://[\\w\\d./]+", "label": 1}
{"text": "Dict = {key: value for key, value in {\"A\":1, \"B\":2, \"C\":3, \"D\":4}.items()}", "label": 1}
{"text": "def iterate_dictionary(dict): \n  for key in dict: \n    print(key, ':', dict[key]) \n\niterate_dictionary(dict)", "label": 1}
{"text": "# print the length of array\nprint(len(arr))\n5\n \n# print the middle element of array\nmidIndex = len(arr) // 2\nprint(arr[midIndex])\n3", "label": 1}
{"text": "The greatest common divisor of 36 and 24 is 12.", "label": 1}
{"text": "#include <stdio.h>\n\nint factorial(int n)\n{\n    int result = 1;\n    for (int i = 1; i <= n; i++) {\n        result *= i;\n    }\n    return result;\n}\n\nint main()\n{\n    int input = 5;\n    int result = factorial(input);\n    printf(\"The factorial of %d is %d\", input, result);\n    return 0;\n}", "label": 1}
{"text": "public static List<Integer> getElementsGreaterThan(int[] array, int number) {\n    List<Integer> result = new ArrayList<>();\n    for (int element : array) {\n        if (element > number) {\n            result.add(element);\n        }\n    }\n    return result;\n}", "label": 1}
{"text": "\\bhello\\b", "label": 1}
{"text": "aws dynamodb create-table --table-name Users --attribute-definitions \nAttributeName=UserID,AttributeType=S \n--key-schema AttributeName=UserID,KeyType=HASH \n--provisioned-throughput ReadCapacityUnits=5,WriteCapacityUnits=5", "label": 1}
{"text": "int[][][] array3D = new int[4][4][4];", "label": 1}
{"text": "SELECT AVG(Salary) FROM Employees;", "label": 1}
{"text": "/^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$/", "label": 1}
{"text": "def to_title_case(word):\n    return word[0].upper() + word[1:].lower()", "label": 1}
{"text": "[2, 3, 5]", "label": 1}
{"text": "\"\"\"\nWrite a function that takes a sentence and returns the reversed version of that sentence\n\"\"\"\n\ndef reverse_sentence(sentence):\n    word_list = sentence.split()\n    reversed_str = \" \".join(word_list[::-1])\n    return reversed_str\n\nif __name__ == \"__main__\":\n    print(reverse_sentence(\"Hello, world!\"))", "label": 1}
{"text": "<table>\n  <tr>\n    <th>Name</th>\n    <th>Age</th>\n  </tr>\n  <tr>\n    <td>John</td>\n    <td>20</td>\n  </tr>\n  <tr>\n    <td>Alice</td>\n    <td>22</td>\n  </tr>\n</table>", "label": 1}
{"text": "\"\"\"\nSort this list in a descending order\n\"\"\"\n\nmy_list = [1,9,3,5,7]\n\n# Sort the list in a descending order\nmy_list.sort(reverse=True)\nprint(my_list)", "label": 1}
{"text": "\"\"\"\nChange the value of the second element of this list to 'cricket'\n\"\"\"\n\nsports_list = ['soccer', 'rugby', 'hockey']\n\n# Change the value of the second element of this list to 'cricket'\nsports_list[1] = 'cricket'\nprint(sports_list)", "label": 1}
{"text": "while (true) {\n  //infinite loop code here\n}", "label": 1}
{"text": "<html>\n  <body>\n    <form>\n      Enter Number 1: <input type=\"text\" name=\"num1\" /> <br />\n      Enter Number 2: <input type=\"text\" name=\"num2\" /> <br />\n      <input type=\"submit\" value=\"Submit\" />\n    </form>\n    <script>\n      function calculateSum() {\n        let num1 = document.forms[\"form\"][\"num1\"].value;\n        let num2 = document.forms[\"form\"][\"num2\"].value;\n        document.write(\"Sum of the two numbers is: \" + (num1 + num2));\n      }\n    </script>\n  </body>\n</html>", "label": 1}
{"text": "def sumOfSquares(num1, num2):\n    return num1**2 + num2**2", "label": 1}
{"text": "//Pseudocode \n \n//Function to obtain the factors of given input\nfunction obtainFactors(int num){ \n\n //Variable to store the factors \n List factors = [] \n\n //Loop through all number less than the given input \n for i = 1 to num { \n\n    //Check if a particular number is a factor of the given input \n    if num % i == 0 { \n\n       //Add the number to the list of factors \n       factors.add(i) \n    } \n } \n \n //Print out the list of factors \n print(factors) \n}", "label": 1}
{"text": "#Function to sort an array using bubble sort\ndef bubbleSort(arr):\n  #Loop through all elements in the array\n  for i in range(len(arr)):\n    #Loop through all elements up to the one larger than the one at the current position\n    for j in range(0, len(arr)-i-1):\n      #Swap elements if necessary\n      if arr[j] > arr[j+1] :\n        arr[j], arr[j+1] = arr[j+1], arr[j]\n\n#Driver code\narr = [5,2,1,8,0,9,4]\nbubbleSort(arr)", "label": 1}
{"text": "const mysql = require('mysql');\n\n// Connect\nconst database = mysql.createConnection({\n  host: 'localhost',\n  user: 'admin',\n  password: 'password',\n  database: 'myDatabaseName'\n});\n\n//Connect\ndatabase.connect(function(err) { \n  if (err) throw err;\n});", "label": 1}
{"text": "def printFullName(firstName, lastName):\n  print(firstName + \" \" + lastName)", "label": 1}
{"text": "SELECT DISTINCT categories FROM products;", "label": 1}
{"text": "# Print all unique combinations of an array of integers\n\ndef all_combinations(nums):\n  result = [[]]\n  for num in nums:\n    temp_result = []\n    for res in result:\n      temp_result.append(res + [num])\n    result.extend(temp_result)\n  return result\n\nprint(all_combinations(nums)) # [[1], [2], [3], [1, 2], [1, 3], [2, 3], [1, 2, 3]]", "label": 1}
{"text": "# define CNN model\nmodel_cnn = Sequential([\n    Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)),\n    MaxPool2D(),\n    Flatten(),\n    Dense(100, activation='relu'),\n    Dense(10, activation='softmax')\n])\n\n# define RNN model\nmodel_lstm = Sequential()\nmodel_lstm.add(LSTM(128, input_shape=(28, 28, 32)))\nmodel_lstm.add(Dense(100, activation='relu'))\nmodel_lstm.add(Dense(10, activation='softmax'))\n\n# define the model\nmodel = Sequential()\nmodel.add(Convolution2D(32, 3, 3, input_shape=(28, 28, 1), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(LSTM(128))\nmodel.add(Dense(100, activation='relu'))\nmodel.add(Dropout(.2))\nmodel.add(Dense(10, activation='softmax'))", "label": 1}
{"text": "def convert_currency(amount, from_currency, to_currency):\n    # use a free online currency conversion API like Fixer\n    # to convert an amount from one currency to another\n    response = requests.get(f\"http://data.fixer.io/api/convert?access_key=<your_key>&from={from_currency}&to={to_currency}&amount={amount}\")\n    return response.json()[\"result\"]", "label": 1}
{"text": "\"\"\"\nAPI to pull company data from an external source.\n\nParameters:\n1. company_id: Unique id of the company\n2. fields: List of strings of fields to include in the response\n\nReturns:\nA JSON containing the specified fields from the external source.\n\"\"\"\n\ndef get_company_data(company_id, fields):\n    # use an external API to fetch the data\n    response = requests.get(f\"http://example.com/api/company?id={company_id}\")\n    data = response.json()\n    response_data = {}\n    for field in fields:\n        response_data[field] = data[field]\n    return response_data", "label": 1}
{"text": "def word_frequency(words):\n    freq = {}\n    for word in words:\n        if word not in freq:\n            freq[word] = 0\n        freq[word] += 1    \n    for word, count in freq.items():\n        print('{}: {}'.format(word, count))\n        \nword_frequency(['foo', 'bar', 'foo', 'baz', 'bar'])", "label": 1}
{"text": "# Set up the project using a web framework such as Flask\n# Import necessary libraries such as Pandas, Numpy and SQLite\n# Create database and import recipe dataset\n# Create the user interface\n# Set up routes\n# Create a search form\n# Execute a SQL query to access the recipes that match the search query\n# Display the recipe results\n# Add pagination\n# Add sorting options", "label": 1}
{"text": "// Code in JavaScript\n\nconst numbers = [2, 3, 6, 9, 5];\nlet max = numbers[0];\nlet min = numbers[0];\n\nfor(let i=0; i<numbers.length; i++){\n    if(numbers[i] > max){\n        max = numbers[i];\n    }\n    if(numbers[i] < min){\n        min = numbers[i];\n    }\n}\n \nconsole.log('Max value is', max);\nconsole.log('Min value is', min);", "label": 1}
{"text": "SELECT * FROM <table_name> WHERE <column_name> > 50;", "label": 1}
{"text": "for i in range(10):\n    print(i)", "label": 1}
{"text": "class MyObject {\n    constructor(elements) {\n      this.elements = elements;\n    }\n    \n    sumElements() {\n        let sum = 0;\n        this.elements.forEach(element => {\n            sum += element;\n        });\n        return sum;\n    }\n}", "label": 1}
{"text": "integer", "label": 1}
{"text": "fahrenheit = lambda T : ( ( float(9) / 5 )*T + 32 )", "label": 1}
{"text": "A for loop is a type of loop used in programming to execute a set of code multiple times. For loops use an iterable object to iterate over a sequence of statements, such as a list or a string. For loops are typically used to traverse through a sequence of elements, perform a set of calculations or operations on each element, and once the operations are complete, move on to the next element until the list has been exhausted. For loops can also be used to execute a set of statements a certain number of times, or while a certain condition is true. One example would be iterating through a list of numbers and printing their sum to the console. Another example would be running a loop until a certain value is reached or exceeded, such as in calculating the factorial of a number.", "label": 1}
{"text": "SELECT COUNT(*) \nFROM Employees \nWHERE Department = 'Software Engineering';", "label": 1}
{"text": "function filter_short_words($words) {\n  $filtered = array();\n  foreach($words as $word) {\n    if (strlen($word) >= 3) {\n      array_push($filtered, $word);\n    }\n  }\n  return $filtered;\n}", "label": 1}
{"text": "def find_sum(lst):\n    \"\"\"Return the sum of a given list of numbers.\"\"\"\n    res = 0\n    for x in lst:\n        res += x\n    return res # was missing, was iterating over list instead of lst.", "label": 1}
{"text": "public static int[] filterArrayByK(int[] arr, int k) { \n\tint i, j, index = 0; \n\tint[] filteredArray = new int[arr.length]; \n\n\tfor (i = 0; i < arr.length; i++) { \n\t\tif (arr[i] <= k) { \n\t\t\tfilteredArray[index] = arr[i]; \n\t\t\tindex++; \n\t\t} \n\t} \n\n\tint[] result = new int[index]; \n\tfor (j = 0; j < index; j++) { \n\t\tresult[j] = filteredArray[j]; \n\t} \n\n\treturn result; \n}", "label": 1}
{"text": "SELECT year, author, MAX(books) AS most_books\nFROM authors\nGROUP BY year;", "label": 1}
{"text": "string = \"This is an example\"\nprint(string.find(\"is\"))", "label": 1}
{"text": "num_1 = 10\nnum_2 = 15\nprint(num_1 * num_2)", "label": 1}
{"text": "def add_period(phrase):\n    if not isinstance(phrase, str):\n        raise ValueError(\"phrase should be a String\")\n    return phrase + \".\"", "label": 1}
{"text": "import math\noutput = math.sqrt(25)", "label": 1}
{"text": "my_string <- \"Hello World\"", "label": 1}
{"text": "# Program to print the prime numbers between 1 and 50\n \nfor num in range(1, 51):\n\n   # prime numbers are greater than 1\n   if num > 1:\n       for i in range(2, num):\n           if (num % i) == 0:\n               break\n       else:  \n           print(num)", "label": 1}
{"text": "import nltk\nfrom nltk.sentiment import SentimentIntensityAnalyzer\n\nsentence = \"The movie was terrible and boring.\"\nanalysis = SentimentIntensityAnalyzer()\nscore = analysis.polarity_scores(sentence)\nif score[\"compound\"] >= 0.5:\n    output = \"positive\"\nelse:\n    output = \"negative\"\n\nprint(\"The sentiment of the sentence is:\", output)", "label": 1}
{"text": "def search(arr, given_str):\n    for item in arr:\n        if item == given_str:\n            return True\n    return False", "label": 1}
{"text": "Cosine similarity is a measure of similarity between two non-zero vectors of an inner product space that measures the cosine of the angle between them. It is a normalized measure of similarity, ranging from -1 (completely different) to 1 (exactly similar). The cosine similarity is given by the dot product of the two vectors divided by their magnitudes.", "label": 1}
{"text": "SELECT * FROM users;", "label": 1}
{"text": "Hella there", "label": 1}
{"text": "function concatenate(str1, str2){\n  return str1 + str2;\n}\n\nconsole.log(concatenate(param1,param2)); // \"helloworld\"", "label": 1}
{"text": "number = input(\"Please input a number: \")\n\nif type(number) == int:\n    print(\"Input is an integer\")\nelse:\n    print(\"Input is a decimal\")", "label": 1}
{"text": "import random\n\ndef generate_random_number():\n    return random.randint(1, 10)", "label": 1}
{"text": "<html>\n<head>\n<style>\n.container {\n    width: 300px;\n    height: 200px;\n    background-color: blue;\n}\n\n.text {\n    color: white;\n    font-family: Arial;\n    font-size: 16px;\n    padding: 15px;\n    text-align: center;\n}\n</style>\t\n</head>\n\n<body>\n\n<div class=\"container\">\n  <div class=\"text\">Hello World!</div>\n</div>\n\n</body>\n</html>", "label": 1}
{"text": "def currency_convert(amount):\n   \n    #Convert amount from USD to INR\n    inr = amount * 73.20 \n    \n    #return the converted currency\n    return inr\n  \n#Test\namount = int(input(\"Enter amount of currency in USD:\")) \n  \nprint(\"The amount in INR:\",currency_convert(amount))", "label": 1}
{"text": "# Defining a node \nNode <- function(value){\t \n   this$value <- value\n   this$next <- NULL\n   return(this)\n} \n\t\n# Defining a Linked List \nLinkedList <- function(){ \n   this$head <- NULL\n   this$tail <- NULL\n\t\n   # Function to add an element in the linked list \n   addNode <- function(value){\n        newnode <- Node(value) \n\t\t\n        # If the Linked List has no node \n        if(is.null(this$head)){ \n            this$head <- newnode\n            this$tail <- newnode \n        } else { \n\t\t\t\n            # Point tail node to newly added node\n            this$tail$next <- newnode \n            this$tail <- newnode \n        } \n\t\t\n        # Return the new linked list\n        return(this) \n   } \n\t\n   # Return the linked list\n   return(list(addNode = addNode)) \n}", "label": 1}
{"text": "SELECT name, job_title, salary\nFROM employees\nWHERE department = 'Sales'", "label": 1}
{"text": "\"\"\"\nExample of data visualization using Python's matplotlib library\n\"\"\"  \nimport matplotlib.pyplot as plt\n\n#Create two datasets\nx_values = [1, 2, 3, 4, 5]\ny_values = [1, 4, 9, 16, 25]\n\n#Plot the data\nplt.plot(x_values, y_values)\n\n#Label the axes\nplt.xlabel('x values')\nplt.ylabel('y values')\n\n#Show the plot\nplt.show()", "label": 1}
{"text": "This line of code will sort the array `arr` in descending order. That is, the array's elements will be arranged in a descending order, with the highest element at the first index, the second highest at the second index, and so on.", "label": 1}
{"text": "```\n#For numbers from 1 through 100\nfor i from 1 to 100:\n    #If the number is divisible by both 3 and 5\n    if i is divisible by 3 and 5:\n        #Print FizzBuzz\n        print \"FizzBuzz\"\n    #If the number is divisible only by 3\n    elif i is divisible by 3:\n        #Print Fizz\n        print \"Fizz\"\n    #If the number is divisible only by 5\n    elif i is divisible by 5:\n        #Print Buzz\n        print \"Buzz\"\n    #Otherwise\n    else: \n        #Print the number\n        print i\n```", "label": 1}
{"text": "public class Employee {\n    String name;\n    int age;\n    String phoneNumber;\n    String address;\n \n public Employee(String name, int age, String phoneNumber, String address) {\n    this.name = name;\n    this.age = age;\n    this.phoneNumber = phoneNumber;\n    this.address = address;\n }\n\n    // Getters and Setters\n....\n}", "label": 1}
{"text": "# Function to find elements in an array that is \n# divisible by a given number \ndef isDivisible(arr, num): \n  \n    # Stores result \n    res = [] \n  \n    # Iterate over all elements \n    for i in range(0,len(arr)): \n  \n        # If remainder is 0 then add elements \n        # to result \n        if (arr[i] % num == 0): \n            res.append(arr[i]) \n  \n    return res \n  \n# Driver code \narr = [5, 15, 20, 25, 30] \nnum = 5\n  \n# Print result \nprint(isDivisible(arr,num))", "label": 1}
{"text": "class Point2D {\n   private:\n     double x;\n     double y;\n   public:\n     Point2D(double x_coordinate, double y_coordinate);\n     double get_x();\n     double get_y();\n};\n\nPoint2D::Point2D(double x_coordinate, double y_coordinate) {\n   x = x_coordinate;\n   y = y_coordinate;\n}\n\ndouble Point2D::get_x() {\n   return x;\n}\n\ndouble Point2D::get_y() {\n   return y;\n}", "label": 1}
{"text": "const jsonStr = '{\"name\": \"John\", \"age\": 30, \"likes\": [\"sports\", \"chess\"]}';\nlet jsonObj = JSON.parse(jsonStr);\n\nfor (let key in jsonObj) {\n console.log(`${key}: ${jsonObj[key]}`);\n}", "label": 1}
{"text": "#!/bin/bash\n\nif [ $# -eq 0 ]; then\n    echo \"Error: No arguments supplied.\"\n    exit 1\nfi\n\nip=$( dig +short $1 )\necho $ip", "label": 1}
{"text": "let regex = /^Hello/;", "label": 1}
{"text": "public class MainActivity extends AppCompatActivity {\n\n  @Override\n  protected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_main);\n    \n    // Get reference to button\n    Button switchModeButton = (Button) findViewById(R.id.switch_mode_button);\n    switchModeButton.setOnClickListener(new View.OnClickListener() {\n      @Override\n      public void onClick(View view) {\n        AppCompatDelegate.setDefaultNightMode(\n                  AppCompatDelegate.getDefaultNightMode() == AppCompatDelegate.MODE_NIGHT_YES ?\n                          AppCompatDelegate.MODE_NIGHT_NO : AppCompatDelegate.MODE_NIGHT_YES\n        );\n        recreate();\n      }\n    });\n  }  \n}", "label": 1}
{"text": "<body style=\"margin: 0; padding: 0; font-family: sans-serif; box-sizing: border-box; font-size: 16px; line-height: 1.5; background-color: #f5f5f5; color: #222222;\">\n    <h2>Hello World</h2>\n</body>", "label": 1}
{"text": "class MyClass:\n    def __init__(self, given_list):\n        self.given_list = given_list\n    \n    def check_equal_to_10(self):\n        if len(self.given_list) == 0:\n            return False\n        for num in self.given_list:\n            if num != 10:\n                return False\n        print(\"Endless fun\")\n        return True", "label": 1}
{"text": "#!/bin/bash\n\nCMD=\"echo \"The result is 120\"\"\n\neval $CMD | grep -o \"The result is.*\"", "label": 1}
{"text": "num1 = int(input(\"Enter the first number: \"))\nnum2 = int(input(\"Enter the second number: \"))\n\n# add two numbers\nsum = num1 + num2\n\n# display the sum\nprint(\"The sum of {0} and {1} is {2}\".format(num1, num2, sum))", "label": 1}
